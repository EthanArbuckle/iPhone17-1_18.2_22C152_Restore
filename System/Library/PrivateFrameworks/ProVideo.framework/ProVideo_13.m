void sub_1B7C43348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZEffect::performDragOperation(OZEffect *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  return OZEffect::performDragOperation((OZEffect *)((char *)this - 48), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZEffect::deleteThis(OZEffect *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 88) == a2 && (uint64_t v3 = *((void *)this + 45)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 608))();
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'OZEffect::deleteThis(OZEffect *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 40) == a2 && (uint64_t v3 = *((void *)this + 39)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 608))();
  }
  else {
    return 0;
  }
}

uint64_t OZEffect::copy(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZEffect::copy(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZEffect::paste(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZEffect::paste(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZEffect::rename(OZEffect *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

uint64_t non-virtual thunk to'OZEffect::rename(OZEffect *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

BOOL OZEffect::isSelected(OZEffect *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 88), 1);
}

BOOL non-virtual thunk to'OZEffect::isSelected(OZEffect *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 40), 1);
}

OZChannelBase *OZEffect::select(OZEffect *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 88), 1, 0);
}

OZChannelBase *non-virtual thunk to'OZEffect::select(OZEffect *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelBase *OZEffect::deselect(OZEffect *this)
{
  v1 = (OZChannelBase *)((char *)this + 88);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 88), 1, 0);

  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

OZChannelBase *non-virtual thunk to'OZEffect::deselect(OZEffect *this)
{
  v1 = (OZChannelBase *)((char *)this + 40);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 40), 1, 0);

  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

uint64_t OZEffect::isAnyParentSelected(OZEffect *this)
{
  uint64_t v2 = *((void *)this + 45);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
  uint64_t v4 = 1;
  if (OZChannelBase::testFlag(v3, 1)) {
    return v4;
  }
  v5 = *(uint64_t (**)(void))(**((void **)this + 45) + 704);

  return v5();
}

uint64_t non-virtual thunk to'OZEffect::isAnyParentSelected(OZEffect *this)
{
  return OZEffect::isAnyParentSelected((OZEffect *)((char *)this - 48));
}

uint64_t OZEffect::canAddToSceneNode(OZEffect *this, OZSceneNode *a2)
{
  unint64_t v2 = *(void *)((*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2) + 8);
  if (!v2) {
    return 0;
  }
  long long v12 = xmmword_1B83804B0;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v12)) {
    return 0;
  }
  long long v11 = xmmword_1B8380C00;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v11)) {
    return 0;
  }
  long long v10 = xmmword_1B8381340;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v10)) {
    return 0;
  }
  long long v9 = xmmword_1B8381910;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v9)) {
    return 0;
  }
  long long v8 = xmmword_1B8381920;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v8)) {
    return 0;
  }
  long long v7 = xmmword_1B837FEA0;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v7)) {
    return 0;
  }
  long long v6 = xmmword_1B8380C30;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v6)) {
    return 0;
  }
  long long v5 = xmmword_1B837FE90;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v5)) {
    return 0;
  }
  long long v4 = xmmword_1B7E77B80;
  return OZFactory::isKindOfClass(v2, (int32x4_t *)&v4) ^ 1;
}

uint64_t OZEffect::getScene(OZEffect *this)
{
  uint64_t result = *((void *)this + 45);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZEffect::getScene(OZEffect *this)
{
  uint64_t result = *((void *)this + 39);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

int8x8_t *OZEffect::dirty(OZEffect *this)
{
  OZObjectManipulator::dirty((OZEffect *)((char *)this + 48));
  uint64_t result = (int8x8_t *)*((void *)this + 45);
  if (result
    && *(void *)&vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 496);
    return (int8x8_t *)v3();
  }
  return result;
}

int8x8_t *non-virtual thunk to'OZEffect::dirty(OZEffect *this)
{
  return OZEffect::dirty((OZEffect *)((char *)this - 48));
}

__n128 OZEffect::getNaturalDuration@<Q0>(OZEffect *this@<X0>, __n128 *a2@<X8>)
{
  if ((*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this))
  {
    long long v4 = (OZSceneSettings *)((*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this) + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZEffect::getNaturalDuration@<D0>(OZEffect *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = OZEffect::getNaturalDuration((OZEffect *)((char *)this - 48), a2).n128_u64[0];
  return result;
}

double OZEffect::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  long long v7 = v6;
  (*(void (**)(int8x8_t *))(*(void *)v6 + 40))(v6);
  (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)a1 + 544))(a1, lpsrc, 0, 0, 1);
  __n128 v25 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  uint64_t v8 = *(void *)(a1 + 360);
  if (v8 && (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8))
  {
    long long v9 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 360) + 272))(*(void *)(a1 + 360));
    v24[0] = 0;
    v24[1] = 0;
    v23 = (uint64_t *)v24;
    OZScene::getImmediatelyReferencedNodes(v9, *(_DWORD *)(a1 + 112), &v23);
    long long v10 = v23;
    if (v23 != (uint64_t *)v24)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v9, *((_DWORD *)v10 + 7));
        if (Node)
        {
          long long v12 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12, lpsrc, a3);
            PCHash128::operator+=((int *)&v25, StaticHash);
          }
        }
        v14 = (uint64_t *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v10[2];
            BOOL v16 = *v15 == (void)v10;
            long long v10 = v15;
          }
          while (!v16);
        }
        long long v10 = v15;
      }
      while (v15 != (uint64_t *)v24);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v23, v24[0]);
  }
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17)
  {
    v18 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 104))(v17);
    if (*(void *)(a1 + 24))
    {
      if (v18)
      {
        uint64_t v19 = *(void *)(a1 + 360);
        v20 = (_OWORD *)(v19 + 16);
        if (!v19) {
          v20 = 0;
        }
        if (v18 != v20)
        {
          StaticHashWithoutEffects = (int *)OZObjectManipulator::getStaticHash(v18, lpsrc, a3);
LABEL_24:
          PCHash128::operator+=((int *)&v25, StaticHashWithoutEffects);
          goto LABEL_25;
        }
        if (v19)
        {
          StaticHashWithoutEffects = (int *)OZSceneNode::getStaticHashWithoutEffects(*(int8x8_t **)(a1 + 360), lpsrc, (uint64_t)a3);
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v7, &v25).n128_u64[0];
  return result;
}

void sub_1B7C43B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

double non-virtual thunk to'OZEffect::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZEffect::calcStaticHash(a1 - 48, a2, a3);
}

double OZEffect::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  if (!v8) {
    __cxa_bad_cast();
  }
  long long v9 = v8;
  long long v29 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(a1, &v29, 1, 1, 1);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 48))(lpsrc, v10);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v28 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 88), (PCSerializerWriteStream *)lpsrc, &v28);
  __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 88), &v27);
  (*(void (**)(void *, void, __n128))(*(void *)lpsrc + 16))(lpsrc, 0, TimeOffset);
  (*(void (**)(void *, __n128 *))(*(void *)lpsrc + 112))(lpsrc, &v27);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  __n128 v26 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  uint64_t v12 = *(void *)(a1 + 360);
  if (v12 && (*(uint64_t (**)(uint64_t))(*(void *)v12 + 272))(v12))
  {
    v13 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 360) + 272))(*(void *)(a1 + 360));
    *(void *)&v28.timescale = 0;
    v28.CMTimeEpoch epoch = 0;
    v28.CMTimeValue value = (CMTimeValue)&v28.timescale;
    OZScene::getImmediatelyReferencedNodes(v13, *(_DWORD *)(a1 + 112), (uint64_t **)&v28);
    CMTimeValue value = v28.value;
    if ((CMTimeScale *)v28.value != &v28.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v13, *(_DWORD *)(value + 28));
        if (Node)
        {
          BOOL v16 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v16, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v25);
            PCHash128::operator+=((int *)&v26, (int *)&v25);
          }
        }
        uint64_t v17 = *(CMTime **)(value + 8);
        if (v17)
        {
          do
          {
            v18 = v17;
            uint64_t v17 = (CMTime *)v17->value;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = *(CMTime **)(value + 16);
            BOOL v19 = v18->value == value;
            CMTimeValue value = (CMTimeValue)v18;
          }
          while (!v19);
        }
        CMTimeValue value = (CMTimeValue)v18;
      }
      while (v18 != (CMTime *)&v28.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, *(void **)&v28.timescale);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    v21 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 104))(v20);
    if (*(void *)(a1 + 24))
    {
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 360);
        v23 = (_OWORD *)(v22 + 16);
        if (!v22) {
          v23 = 0;
        }
        if (v21 != v23)
        {
          OZObjectManipulator::getHashForState(v21, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v28);
LABEL_24:
          PCHash128::operator+=((int *)&v26, (int *)&v28);
          goto LABEL_25;
        }
        if (v22)
        {
          OZSceneNode::getHashForStateWithoutEffects(*(OZCacheManager **)(a1 + 360), lpsrc, (OZRenderParams *)a3, (uint64_t)a4, &v28);
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v9, &v26).n128_u64[0];
  return result;
}

void sub_1B7C43FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

double non-virtual thunk to'OZEffect::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZEffect::calcHashForState(a1 - 48, a2, a3, a4);
}

uint64_t OZEffect::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  long long v4 = (OZChannelObjectRoot *)(this + 11);
  if (!OZChannelBase::testFlag((OZChannelBase *)(this + 11), 8)) {
    OZFactory::setNeedsSaving(this[5], (const OZFactory *)1);
  }

  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t non-virtual thunk to'OZEffect::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZEffect::markFactoriesForSerialization(this - 10, a2);
}

uint64_t OZEffect::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZEffectScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 120);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 28));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(this[5], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 73))(this))
  {
    if (this[16]) {
      uint64_t v6 = this[16];
    }
    else {
      uint64_t v6 = (OZFactory *)(this + 15);
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t, OZFactory *))(*(void *)a2 + 200))(a2, 118, v6);
  }
  (*((void (**)(OZFactory **))*this + 79))(this);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 184))(a2, 116);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZEffect::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZEffect::writeHeader(this - 10, a2);
}

uint64_t OZEffect::writeBody(OZEffect *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZEffectScope);
  OZChannelObjectRoot::writeBody((OZEffect *)((char *)this + 88), a2, 0, 1, a5);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZEffect::writeBody(OZEffect *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZEffect::writeBody((OZEffect *)((char *)this - 80), a2, 0, 0, a5);
}

uint64_t OZEffect::parseBegin(OZEffect *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZEffectScope);

  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 88), a2);
}

uint64_t non-virtual thunk to'OZEffect::parseBegin(OZEffect *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZEffectScope);

  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
}

uint64_t OZEffect::parseEnd(OZEffect *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannelFolder *)((char *)this + 88);
  (*(void (**)(OZEffect *))(*(void *)this + 200))(this);

  return OZChannelObjectRoot::parseEnd(v3, a2);
}

uint64_t non-virtual thunk to'OZEffect::parseEnd(OZEffect *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (char *)this - 80;
  (*(void (**)(char *))(*((void *)this - 10) + 200))((char *)this - 80);

  return OZChannelObjectRoot::parseEnd((OZChannelFolder *)(v3 + 88), a2);
}

uint64_t OZEffect::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelObjectRoot::parseElement(this + 11, a2, a3);
}

uint64_t non-virtual thunk to'OZEffect::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelObjectRoot::parseElement(this + 1, a2, a3);
}

double OZEffect::globalToLocalTime@<D0>(OZEffect *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::globalToLocalTime((OZEffect *)((char *)this + 88), a2, a3);
}

double OZEffect::localToGlobalTime@<D0>(OZEffect *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::localToGlobalTime((OZEffect *)((char *)this + 88), a2, a3);
}

uint64_t OZEffect::canBeAppliedToChildren(OZEffect *this, CMTime *a2)
{
  CMTime v4 = *a2;
  uint64_t result = (*(uint64_t (**)(OZEffect *, CMTime *))(*(void *)this + 664))(this, &v4);
  if (result) {
    return (*(uint64_t (**)(OZEffect *))(*(void *)this + 672))(this);
  }
  return result;
}

void *OZEffect::getHashForStateRN@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 + 48), a2, a3, a4, a5);
}

_OWORD *OZEffect::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 + 48), a2, a3);
}

OZChannelBase *OZEffect::finishInitializing(OZEffect *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 88));
}

uint64_t OZEffect::getSerializer(OZEffect *this)
{
  return (uint64_t)this + 80;
}

uint64_t OZEffect::getInstanceID(OZEffect *this)
{
  return *((unsigned int *)this + 28);
}

void OZEffect::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void *OZEffect::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 88), a2);
}

__n128 OZEffect::getTimeExtent@<Q0>(OZEffect *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *((_OWORD *)this + 15);
  *(void *)(a2 + 16) = *((void *)this + 32);
  *(void *)(a2 + 40) = *((void *)this + 35);
  __n128 result = *(__n128 *)((char *)this + 264);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t OZEffect::setVersion(uint64_t this, double a2)
{
  *(double *)(this + 344) = a2;
  return this;
}

double OZEffect::getVersion(OZEffect *this)
{
  return *((double *)this + 43);
}

void OZEffect::createNewLithiumNode(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

uint64_t non-virtual thunk to'OZEffect::getImageNode(OZEffect *this)
{
  return (uint64_t)this - 48;
}

void *std::list<OZSimulationBehavior *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      long long v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *long long v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B7C445F8(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

char *OZChannelMaterialMapTransform::init(OZChannelMaterialMapTransform *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 4);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1992), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2144), 0.01);
  int v4 = 2;
  *(void *)uint64_t v3 = 0x100000000;
  return OZChannelEnum::setTags((OZChannelMaterialMapTransform *)((char *)this + 896), (char *)v3, 3);
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  *uint64_t v6 = &unk_1F1146E58;
  v6[2] = &unk_1F1147138;
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Transform Source Enum");
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Transform Source Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128), 0, &v8, &v7, (OZChannelFolder *)this, 3u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Transform Mode Enum");
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Transform Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), 0, &v8, &v7, (OZChannelFolder *)this, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Placement Mode Enum");
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Placement Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), 0, &v8, &v7, (OZChannelFolder *)this, 4u, 65546, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Placement Mode Enum");
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Placement Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), 0, &v8, &v7, (OZChannelFolder *)this, 8u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Position Label");
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), 0.0, 0.0, &v8, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Scale Label");
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), 1.0, 1.0, &v8, (OZChannelFolder *)this, 6u, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Map Rotation Label");
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), 0.0, 0.0, 0.0, &v8, (OZChannelFolder *)this, 7u, 0, 4u, 0, 0);
  PCString::~PCString(&v8);
  OZChannelMaterialMapTransform::init(this);
}

void sub_1B7C44A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v20 = v17;
  OZChannelRotation3D::~OZChannelRotation3D(v20);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v19);
  OZChannelPosition::~OZChannelPosition(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B7C44ACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C44AEC()
{
}

void sub_1B7C44AF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C44B14()
{
}

void sub_1B7C44B1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C44B3C()
{
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  Instance = (OZFactory *)OZChannelMaterialMapTransform_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, a6);
  *(void *)this = &unk_1F1146E58;
  *((void *)this + 2) = &unk_1F1147138;
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Transform Source Enum");
  PCURL::PCURL((PCURL *)&v13, @"Channel Map Transform Source Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128), 0, &v14, &v13, (OZChannelFolder *)this, 3u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Transform Mode Enum");
  PCURL::PCURL((PCURL *)&v13, @"Channel Map Transform Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), 0, &v14, &v13, (OZChannelFolder *)this, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Placement Mode Enum");
  PCURL::PCURL((PCURL *)&v13, @"Channel Map Placement Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), 0, &v14, &v13, (OZChannelFolder *)this, 4u, 65546, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Placement Mode Enum");
  PCURL::PCURL((PCURL *)&v13, @"Channel Map Placement Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), 0, &v14, &v13, (OZChannelFolder *)this, 8u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Position Label");
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), 0.0, 0.0, &v14, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Scale Label");
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), 1.0, 1.0, &v14, (OZChannelFolder *)this, 6u, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Channel Map Rotation Label");
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), 0.0, 0.0, 0.0, &v14, (OZChannelFolder *)this, 7u, 0, 4u, 0, 0);
  PCString::~PCString(&v14);
  OZChannelMaterialMapTransform::init(this);
}

void sub_1B7C44ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v20 = v17;
  OZChannelRotation3D::~OZChannelRotation3D(v20);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v19);
  OZChannelPosition::~OZChannelPosition(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B7C44F94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C44FB4()
{
}

void sub_1B7C44FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C44FDC()
{
}

void sub_1B7C44FE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C45004()
{
}

uint64_t OZChannelMaterialMapTransform_Factory::getInstance(OZChannelMaterialMapTransform_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelMaterialMapTransform_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelMaterialMapTransform_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialMapTransform_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialMapTransform_Factory::_instance;
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *uint64_t v5 = &unk_1F1146E58;
  v5[2] = &unk_1F1147138;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 16), (const OZChannelEnum *)&a2[1].var2, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), (const OZChannelEnum *)&a2[3].var6, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), (const OZChannelEnum *)&a2[5].var10, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), (const OZChannelEnum *)&a2[8], (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), (const OZChannelPosition *)&a2[10].var4, (OZChannelFolder *)this);
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), (const OZChannelMaterialMapScale *)&a2[16].var8, (OZChannelFolder *)this);
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), (const OZChannelRotation3D *)&a2[27].var2, (OZChannelFolder *)this);
  *((void *)this + 487) = a2[34].var11;
  (*(void (**)(OZChannelMaterialMapTransform *, const OZChannelBase *, uint64_t))(*(void *)this + 232))(this, a2, 1);
}

void sub_1B7C451C4(_Unwind_Exception *a1)
{
  OZChannelRotation3D::~OZChannelRotation3D(v8);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v7);
  OZChannelPosition::~OZChannelPosition(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void sub_1B7C45230()
{
}

void sub_1B7C45238()
{
}

void sub_1B7C45240()
{
}

void OZChannelMaterialMapTransform::clone(OZChannelMaterialMapTransform *this)
{
}

void sub_1B7C45298(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform::copy(OZChannelMaterialMapTransform *this, const OZChannelBase *a2, char a3)
{
  int v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelEnum::copy((PCString *)this + 16, (const OZChannelBase *)((char *)v4 + 128), a3);
  }
  OZChannelEnum::copy((PCString *)this + 48, (const OZChannelBase *)((char *)v4 + 384), a3);
  OZChannelEnum::copy((PCString *)this + 112, v4 + 8, a3);
  OZChannelPosition::copy((OZChannelMaterialMapTransform *)((char *)this + 1152), (const OZChannelBase *)((char *)v4 + 1152), a3);
  OZChannelMaterialMapScale::copy((OZChannelMaterialMapTransform *)((char *)this + 1856), (const OZChannelBase *)((char *)v4 + 1856), a3);

  OZChannelRotation3D::copy((OZChannelMaterialMapTransform *)((char *)this + 3040), (const OZChannelBase *)((char *)v4 + 3040), a3);
}

uint64_t OZChannelMaterialMapTransform::parseEnd(OZChannelMaterialMapTransform *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 640), 2))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 640), 10, 0);
    int v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 640), MEMORY[0x1E4F1FA48], 0.0);
    double v6 = 2.0;
    if (ValueAsUint == 1) {
      double v6 = 0.0;
    }
    if (!ValueAsUint) {
      double v6 = 1.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 896), v4, v6, 0);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZChannelMaterialMapTransform::parseEnd(OZChannelMaterialMapTransform *this, PCSerializerReadStream *a2)
{
  return OZChannelMaterialMapTransform::parseEnd((OZChannelMaterialMapTransform *)((char *)this - 16), a2);
}

void OZChannelMaterialMapTransform::getPreviewScale(OZChannelMaterialMapTransform *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)a3 = _Q0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2296), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
  double v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
  double v15 = v14;
  if (ValueAsInt)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 18, a2, 0.0);
    double v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 19, a2, 0.0);
    double v18 = *((double *)this + 487);
    double v13 = v17 * (v13 * v18);
    double v15 = v19 * (v15 * v18);
  }
  *(double *)a3 = v13;
  *(double *)(a3 + 8) = v15;
}

uint64_t OZChannelMaterialMapTransform::willSetScaleWithFontSize(OZChannelMaterialMapTransform *this, const CMTime *a2, int a3, double a4)
{
  PCString v8 = (OZChannel *)((char *)this + 2448);
  *((double *)this + 487) = a4
                          / (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 2448), MEMORY[0x1E4F1FA48], 0.0);
  if (a3)
  {
    OZChannel::setValue(v8, MEMORY[0x1E4F1FA48], a4, 0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
    double v10 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
    double v12 = v11;
    OZChannelMaterialMapScale::setBasisScale((OZChannelMaterialMapTransform *)((char *)this + 1856), v10, v11);
    (*(void (**)(char *, double))(*((void *)this + 249) + 776))((char *)this + 1992, 1.0 / v10);
    v13.n128_f64[0] = 1.0 / v12;
    double v14 = *(uint64_t (**)(char *, __n128))(*((void *)this + 268) + 776);
    double v15 = (char *)this + 2144;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1288), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1440), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)this + 18, a2, 0.0);
    double v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 19, a2, 0.0);
    double v19 = v18;
    v20.n128_f64[0] = v17 * *((double *)this + 487);
    (*(void (**)(char *, __n128))(*((void *)this + 249) + 776))((char *)this + 1992, v20);
    v21.n128_f64[0] = v19 * *((double *)this + 487);
    (*(void (**)(char *, __n128))(*((void *)this + 268) + 776))((char *)this + 2144, v21);
    v22.n128_u64[0] = *((void *)this + 487);
    (*(void (**)(char *, __n128))(*((void *)this + 161) + 776))((char *)this + 1288, v22);
    v13.n128_u64[0] = *((void *)this + 487);
    double v14 = *(uint64_t (**)(char *, __n128))(*((void *)this + 180) + 776);
    double v15 = (char *)this + 1440;
  }

  return v14(v15, v13);
}

OZChannelBase *OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility(OZChannelMaterialMapTransform *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 128), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v3 = (OZChannelBase *)((char *)this + 1152);
  int v4 = (OZChannelBase *)((char *)this + 1856);
  uint64_t v5 = (OZChannelBase *)((char *)this + 3040);
  double v6 = (OZChannelBase *)((char *)this + 384);
  PCString v7 = (OZChannelBase *)((char *)this + 896);
  if (ValueAsInt)
  {
    OZChannelBase::setFlag(v3, 0x400000, 0);
    OZChannelBase::setFlag(v4, 0x400000, 0);
    OZChannelBase::setFlag(v5, 0x400000, 0);
    OZChannelBase::setFlag(v6, 0x400000, 0);
    return OZChannelBase::setFlag(v7, 0x400000, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v3, 0x400000, 0);
    OZChannelBase::resetFlag(v4, 0x400000, 0);
    OZChannelBase::resetFlag(v5, 0x400000, 0);
    OZChannelBase::resetFlag(v6, 0x400000, 0);
    return OZChannelBase::resetFlag(v7, 0x400000, 0);
  }
}

OZChannelBase *SetSaveWhenAtDefaultStateFlagOnDescendants(OZChannelBase *result)
{
  var0 = result[1].var0;
  char v2 = (OZChannelBase **)*var0;
  uint64_t v3 = (OZChannelBase **)var0[1];
  if (*var0 != v3)
  {
    do
    {
      int v4 = *v2;
      __n128 result = OZChannelBase::setFlag(*v2, 0x100000000, 0);
      if ((v4->var7 & 0x1000) != 0)
      {
        __n128 result = (OZChannelBase *)SetSaveWhenAtDefaultStateFlagOnDescendants(v5);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

OZChannelBase *OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault(OZChannelBase *this)
{
  (*((void (**)(OZChannelBase *))this->var0 + 17))(this);
  OZChannelBase::setFlag(this, 0x100000000, 0);

  return SetSaveWhenAtDefaultStateFlagOnDescendants(this);
}

void non-virtual thunk to'OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this)
{
}

{
  uint64_t vars8;

  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZChannelMaterialMapTransform *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZChannelMaterialMapTransform_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C45AEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform_Factory::OZChannelMaterialMapTransform_Factory(OZChannelMaterialMapTransform_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B7E791E0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11471A8;
  *((void *)this + 16) = &unk_1F1147278;
}

void sub_1B7C45BBC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform_Factory::create(OZChannelMaterialMapTransform_Factory *this, const PCString *a2)
{
}

void sub_1B7C45C34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform_Factory::createCopy(OZChannelMaterialMapTransform_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C45CEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform_Factory::createChannelCopy(OZChannelMaterialMapTransform_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C45DA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZPublishSettings::OZPublishSettings(OZPublishSettings *this, OZScene *a2)
{
  *(void *)this = &unk_1F11472D0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  PCString::PCString(&v4, "Published Folder");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32), &v4, 0, 1u, 8u);
  PCString::~PCString(&v4);
  *((void *)this + 20) = a2;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 22) = (char *)this + 184;
}

void sub_1B7C45E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  __n128 v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void OZPublishSettings::copyPublishedParameters(OZPublishSettings *this, const OZPublishSettings *a2)
{
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
}

void sub_1B7C45FF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void OZPublishSettings::OZPublishSettings(OZPublishSettings *this, const OZPublishSettings *a2, OZScene *a3)
{
  *(void *)this = &unk_1F11472D0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32), (const OZPublishSettings *)((char *)a2 + 32), 0);
  *((void *)this + 20) = a3;
  *((_WORD *)this + 84) = *((_WORD *)a2 + 84);
  *((void *)this + 23) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *((void *)this + 24) = 0;
  OZPublishSettings::copyPublishedParameters(this, a2);
}

void sub_1B7C460B8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *v5);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v2);
  PCString v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void OZPublishSettings::~OZPublishSettings(OZPublishSettings *this)
{
  *(void *)this = &unk_1F11472D0;
  OZPublishSettings::clearAll(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 176, *((void **)this + 23));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32));
  char v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  OZPublishSettings::~OZPublishSettings(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZPublishSettings::clearAll(OZPublishSettings *this)
{
  char v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      if (*v2)
      {
        OZChannelRef::~OZChannelRef((void **)(v4 + 8));
        MEMORY[0x1BA9BFBA0](v4, 0x1012C40849EBCB1);
      }
      *v2++ = 0;
    }
    while (v2 != v3);
    char v2 = (uint64_t *)*((void *)this + 1);
  }
  *((void *)this + 2) = v2;

  OZChannelBase::reset((OZChannelBase *)((char *)this + 32), 0);
}

void OZPublishSettings::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16)) {
    operator new();
  }
}

void sub_1B7C46394(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::addChannel(OZPublishSettings *this, OZChannelBase *a2)
{
  uint64_t v4 = *((void *)this + 18);
  if (v4) {
    uint64_t v5 = *(const OZChannelBase **)(*(void *)(v4 + 8) - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = OZPublishSettings::isChannelPublished(this, a2);
  if ((result & 1) == 0)
  {
    return (uint64_t)OZPublishSettings::addChannelRec(this, a2, v5);
  }
  return result;
}

uint64_t OZPublishSettings::isChannelPublished(OZPublishSettings *this, OZChannelBase *a2)
{
  char v2 = a2;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
  if (v2)
  {
    double v6 = ChannelRootBase;
    unsigned int var3 = ChannelRootBase->var3;
    char v8 = 1;
    while (v2 != (OZChannelBase *)v6->var6)
    {
      if (v8 & 1 | (v9 == 0) {
        || (double v11 = v9, !OZChannelFolder::testFoldFlag(v9, 0x20000))
      }
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)v13, v2, v6);
        if (v3 != v4)
        {
          uint64_t v10 = v3;
          while (**(_DWORD **)v10 != var3
               || !OZChannelRef::operator==((unsigned __int8 *)(*(void *)v10 + 8), (unsigned __int8 *)v13))
          {
            v10 += 8;
            if (v10 == v4) {
              goto LABEL_10;
            }
          }
          OZChannelRef::~OZChannelRef(v13);
          return 1;
        }
LABEL_10:
        OZChannelRef::~OZChannelRef(v13);
      }
      char v8 = 0;
      uint64_t result = 0;
      char v2 = (OZChannelBase *)v2->var6;
      if (!v2) {
        return result;
      }
    }
  }
  return 0;
}

void sub_1B7C465D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZPublishSettings::addChannelRec(OZPublishSettings *this, const OZChannelBase *a2, const OZChannelBase *a3)
{
  var0 = a2->var0;
  if (!v7)
  {
LABEL_4:
    if (((unsigned int (*)(const OZChannelBase *))var0[15])(a2))
    {
      for (i = *v10; i != v10[1]; ++i)
      {
        double v12 = *i;
        OZPublishSettings::removeChannelRec(this, v12);
      }
    }
    operator new();
  }
  double v9 = v7;
  if (OZPublishSettings::TreatTargetFolderAsUnit(v7, v8))
  {
    var0 = a2->var0;
    goto LABEL_4;
  }
  uint64_t v13 = *((void *)v9 + 14);
  if (!v13) {
    return 0;
  }
  double v14 = *(OZChannelBase ***)v13;
  if (*(void *)v13 == *(void *)(v13 + 8)) {
    return 0;
  }
  double v15 = 0;
  do
  {
    double v16 = *v14;
    if (((*v14)->var7 & 2) == 0 && (OZPublishSettings::isChannelPublished(this, *v14) & 1) == 0)
    {
      a3 = (const OZChannelBase *)OZPublishSettings::addChannelRec(this, v16, a3);
      double v15 = a3;
    }
    ++v14;
  }
  while (v14 != *(OZChannelBase ***)(v13 + 8));
  return v15;
}

void sub_1B7C469A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL OZPublishSettings::TreatTargetFolderAsUnit(OZChannelFolder *this, const OZChannelFolder *a2)
{
  if (((*(uint64_t (**)(OZChannelFolder *, const OZChannelFolder *))(*(void *)this + 120))(this, a2) & 1) != 0
  {
    return 1;
  }

  return OZChannelFolder::testFoldFlag(this, 0x20000);
}

void OZPublishSettings::publishedNameForChannel(OZPublishSettings *this, OZChannelBase *a2, PCString *a3)
{
  PCString::set(a3, &a2->var4);
  if ((*(unsigned int (**)(OZChannelFolder *))(*(void *)a2->var6 + 120))(a2->var6))
  {
    PCURL::PCURL((PCURL *)&v10, @"Publish Channel Separator");
    PCString::PCString(&v11, a3);
    PCString::append(&v11, &v10);
    var6 = a2->var6;
    PCString::PCString(&v12, &v11);
    PCString::append(&v12, (const PCString *)var6 + 4);
    PCString::set(a3, &v12);
    PCString::~PCString(&v12);
    PCString::~PCString(&v11);
    PCString::~PCString(&v10);
  }
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a2);
    if (ObjectManipulator)
    {
      if (v7)
      {
        char v8 = v7;
        if (OZImageElement::isDropZone(v7))
        {
          Name = (const PCString *)OZObjectManipulator::getName((OZImageElement *)((char *)v8 + 16));
          PCString::set(a3, Name);
        }
      }
    }
  }
}

void sub_1B7C46CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

void OZPublishSettings::removeChannelRec(OZPublishSettings *this, OZChannelBase *a2)
{
  if (a2
  {
    double v17 = (const OZChannelBase ***)*((void *)v6 + 14);
    if (v17)
    {
      for (i = *v17; i != v17[1]; ++i)
      {
        double v19 = *i;
        OZPublishSettings::removeChannelRec(this, v19);
      }
    }
  }
  else
  {
    PCString v7 = (unsigned __int8 **)*((void *)this + 1);
    char v8 = (unsigned __int8 **)*((void *)this + 2);
    ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
    unsigned int var3 = ChannelRootBase->var3;
    OZChannelRef::OZChannelRef((OZChannelRef *)v27, a2, ChannelRootBase);
    if (v7 == v8)
    {
LABEL_9:
      var6 = a2->var6;
      if (var6 && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6))
      {
        double v15 = a2->var6;
        double v16 = v15
        ProxyChannelForTarget = OZPublishSettings::getProxyChannelForTarget(this, v16);
        if (ProxyChannelForTarget)
        {
          var0 = v16[1].var0;
          for (j = (char *)var0[1]; j != *var0; j -= 8)
          {
            __n128 v26 = (const OZChannelBase *)*((void *)j - 1);
            long long v25 = (OZChannelBase *)v26;
            if (v26 != a2 && !OZChannelBase::testFlag(v25, 2)) {
              OZPublishSettings::addChannelRec(this, v25, ProxyChannelForTarget);
            }
          }
          OZPublishSettings::removeChannelRec(this, v16);
        }
      }
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v12 = -(uint64_t)v7;
      while (1)
      {
        uint64_t v13 = *v7;
        if (*(_DWORD *)*v7 == var3 && OZChannelRef::operator==(v13 + 8, (unsigned __int8 *)v27)) {
          break;
        }
        ++v7;
        ++v11;
        v12 -= 8;
        if (v7 == v8) {
          goto LABEL_9;
        }
      }
      uint64_t v20 = *((void *)this + 2);
      uint64_t v21 = v20 - (8 - v12);
      if (v20 != 8 - v12) {
        memmove((void *)-v12, (const void *)(8 - v12), v20 - (8 - v12));
      }
      *((void *)this + 2) = v21 - v12;
      OZChannelRef::~OZChannelRef((void **)v13 + 1);
      MEMORY[0x1BA9BFBA0](v13, 0x1012C40849EBCB1);
      OZPublishSettings::removeProxyChannelWithValue((OZChannelFolder *)this, (OZChannelFolder *)((char *)this + 32), v11);
    }
    OZChannelRef::~OZChannelRef(v27);
  }
}

void sub_1B7C46F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

OZChannelFolder *OZPublishSettings::removeProxyChannelWithValue(OZChannelFolder *this, OZChannelFolder *a2, unsigned int a3)
{
  uint64_t v3 = *((void *)a2 + 14);
  if (!v3) {
    return this;
  }
  uint64_t v4 = *(OZChannelBase ***)v3;
  if (*(void *)v3 == *(void *)(v3 + 8)) {
    return this;
  }
  double v6 = (OZPublishSettings *)this;
  PCString v7 = 0;
  char v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  do
  {
    double v9 = v7;
    PCString v7 = *v4;
    if (((*v4)->var7 & 0x1000) != 0 && ((*((uint64_t (**)(OZChannelBase *))v7->var0 + 15))(*v4) & 1) == 0)
    {
      OZPublishSettings::removeProxyChannelWithValue(v6, v13, a3);
    }
    else
    {
      if (v10)
      {
        unsigned int v11 = v10;
        unsigned int ValueAsInt = OZChannel::getValueAsInt(v10, v8, 0.0);
        if (ValueAsInt == a3) {
          goto LABEL_12;
        }
        if (ValueAsInt > a3)
        {
          OZChannel::setDefaultValue(v11, (double)(ValueAsInt - 1));
          (*((void (**)(OZChannel *, void))v11->var0 + 35))(v11, 0);
        }
      }
    }
    PCString v7 = v9;
LABEL_12:
    ++v4;
  }
  while (v4 != *(OZChannelBase ***)(v3 + 8));
  this = a2;
  if (v7)
  {
    OZChannelFolder::removeDescendant(a2, v7);
    double v14 = (uint64_t (*)(OZChannelBase *))*((void *)v7->var0 + 1);
    return (OZChannelFolder *)v14(v7);
  }
  return this;
}

OZChannelBase *OZPublishSettings::getProxyChannelForTarget(OZPublishSettings *this, OZChannelBase *a2)
{
  ChannelWithValue = a2;
  if (a2
    && ((a2->var7 & 0x1000) == 0 || (OZChannelFolder::hasDescendant((OZChannelFolder *)((char *)this + 32), a2) & 1) == 0))
  {
    ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(ChannelWithValue);
    unsigned int var3 = ChannelRootBase->var3;
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, ChannelWithValue, ChannelRootBase);
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = *((void *)this + 2);
    if (v6 == v7)
    {
LABEL_9:
      ChannelWithValue = 0;
    }
    else
    {
      unsigned int v8 = 0;
      while (var3 != **(_DWORD **)v6
           || !OZChannelRef::operator==((unsigned __int8 *)v10, (unsigned __int8 *)(*(void *)v6 + 8)))
      {
        v6 += 8;
        ++v8;
        if (v6 == v7) {
          goto LABEL_9;
        }
      }
      ChannelWithValue = (OZChannelBase *)OZPublishSettings::findChannelWithValue(this, (OZChannelFolder *)((char *)this + 32), v8);
    }
    OZChannelRef::~OZChannelRef(v10);
  }
  return ChannelWithValue;
}

void sub_1B7C47290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::getHighestChanID(OZPublishSettings *this, OZChannelFolder *a2)
{
  uint64_t v2 = *((void *)a2 + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)v2;
  if (*(void *)v2 == *(void *)(v2 + 8)) {
    return 0;
  }
  LODWORD(v5) = 0;
  do
  {
    uint64_t v6 = (unsigned char *)*v3;
    unsigned int v7 = *(_DWORD *)(*v3 + 24);
    if (v7 <= v5) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v7;
    }
    if ((v6[57] & 0x10) != 0 && ((*(uint64_t (**)(void))(*(void *)v6 + 120))(*v3) & 1) == 0)
    {
      unsigned int HighestChanID = OZPublishSettings::getHighestChanID(this, v8);
      if (HighestChanID <= v5) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = HighestChanID;
      }
    }
    ++v3;
  }
  while (v3 != *(void **)(v2 + 8));
  return v5;
}

OZChannelBase *OZPublishSettings::getChannelAtIndex(OZPublishSettings *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (((unint64_t)(*((void *)this + 2) - v2) >> 3) <= a2) {
    return 0;
  }
  uint64_t v3 = *(unsigned int **)(v2 + 8 * a2);
  uint64_t Object = OZScene::getObject(*((OZScene **)this + 20), *v3);
  if (!Object) {
    return 0;
  }
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)Object + 216))(Object);

  return OZChannelRef::getChannel((OZChannelRef *)(v3 + 2), v5);
}

OZChannelBase *OZPublishSettings::getTargetChannelForProxy(OZPublishSettings *this, OZChannelBase *a2)
{
  int hasDescendant = OZChannelFolder::hasDescendant((OZChannelFolder *)((char *)this + 32), a2);
  if (!a2 {
    || !hasDescendant
  }
  {
    return a2;
  }
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)a2, MEMORY[0x1E4F1FA48], 0.0);

  return OZPublishSettings::getChannelAtIndex(this, ValueAsInt);
}

OZChannel *OZPublishSettings::findChannelWithValue(OZPublishSettings *this, OZChannelFolder *a2, unsigned int a3)
{
  uint64_t v3 = (void **)*((void *)a2 + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3 != v3[1])
    {
      unsigned int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        unsigned int v8 = (const void *)*v4;
        if ((*(unsigned char *)(*v4 + 57) & 0x10) != 0
          && ((*(uint64_t (**)(void))(*(void *)v8 + 120))(*v4) & 1) == 0)
        {
          uint64_t ChannelWithValue = OZPublishSettings::findChannelWithValue(this, v11, a3);
          if (ChannelWithValue) {
            return (OZChannel *)ChannelWithValue;
          }
        }
        else
        {
          if (v9)
          {
            PCString v10 = v9;
            if (OZChannel::getValueAsInt(v9, v7, 0.0) == a3) {
              return v10;
            }
          }
        }
        ++v4;
      }
      while (v4 != v3[1]);
    }
  }
  return 0;
}

char *OZPublishSettings::cleanUpMissingChannels(char *this)
{
  uint64_t v1 = (unsigned int **)*((void *)this + 1);
  if (v1 != *((unsigned int ***)this + 2))
  {
    uint64_t v2 = (uint64_t)this;
    unsigned int v3 = 0;
    uint64_t v4 = (OZChannelFolder *)(this + 32);
    do
    {
      uint64_t v5 = *v1;
      uint64_t Object = OZScene::getObject(*(OZScene **)(v2 + 160), **v1);
      if (Object
        && (unsigned int v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)Object + 216))(Object),
            (this = (char *)OZChannelRef::getChannel((OZChannelRef *)(v5 + 2), v7)) != 0))
      {
        ++v3;
        ++v1;
      }
      else
      {
        unsigned int v8 = *(unsigned int ***)(v2 + 16);
        int64_t v9 = (char *)v8 - (char *)(v1 + 1);
        if (v8 != v1 + 1) {
          memmove(v1, v1 + 1, (char *)v8 - (char *)(v1 + 1));
        }
        *(void *)(v2 + 16) = (char *)v1 + v9;
        OZChannelRef::~OZChannelRef((void **)v5 + 1);
        MEMORY[0x1BA9BFBA0](v5, 0x1012C40849EBCB1);
        this = (char *)OZPublishSettings::removeProxyChannelWithValue((OZChannelFolder *)v2, v4, v3);
      }
    }
    while (v1 != *(unsigned int ***)(v2 + 16));
  }
  return this;
}

uint64_t OZPublishSettings::writeHeader(OZPublishSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZPublishSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 34);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZPublishSettings::writeBody(OZPublishSettings *this, PCSerializerWriteStream *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZPublishSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 2);
  uint64_t v4 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = (unsigned int **)*((void *)this + 1);
  uint64_t v5 = (unsigned int **)*((void *)this + 2);
  if (v5 != v6)
  {
    v27[1] = v27;
    MEMORY[0x1F4188790](v4);
    unsigned int v8 = (char *)v27 - v7;
    int v9 = 0;
    do
    {
      PCString v10 = *v6;
      uint64_t Object = OZScene::getObject(*((OZScene **)this + 20), **v6);
      BOOL v13 = 0;
      if (Object)
      {
        uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)Object + 216))(Object);
        if (OZChannelRef::getChannel((OZChannelRef *)(v10 + 2), v12)) {
          BOOL v13 = 1;
        }
      }
      v8[v9] = v13;
      ++v6;
      ++v9;
    }
    while (v6 != v5);
    double v14 = (OZChannelBase ***)*((void *)this + 18);
    if (v14)
    {
      double v15 = *v14;
      double v16 = v14[1];
      if (*v14 != v16)
      {
        double v17 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          double v18 = *v15;
          BOOL v19 = OZChannelBase::testFlag(*v15, 8);
          if (v18) {
            char v20 = v19;
          }
          else {
            char v20 = 1;
          }
          if ((v20 & 1) == 0)
          {
            if (v21)
            {
              __n128 v22 = v21;
              unsigned int ValueAsInt = OZChannel::getValueAsInt(v21, v17, 0.0);
              if (v8[ValueAsInt])
              {
                v24 = *(unsigned int **)(*((void *)this + 1) + 8 * ValueAsInt);
                long long v25 = (const char *)(v24 + 2);
                if (*((char *)v24 + 31) < 0) {
                  long long v25 = *(const char **)v25;
                }
                PCString::PCString(&v28, v25);
                (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 2, *v24);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 1, &v28);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 3, &v22->var4);
                (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
                PCString::~PCString(&v28);
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7C47B6C(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::parseBegin(OZPublishSettings *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 169) = 1;
  return 1;
}

uint64_t OZPublishSettings::parseEnd(OZPublishSettings *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZPublishSettings::parseElement(OZPublishSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v11 = 0;
  PCSharedCount::PCSharedCount(&v10);
  int v9 = 0;
  PCSharedCount::PCSharedCount(&v8);
  OZChannelFolder::parseElement((OZChannelFolder *)((char *)this + 32), a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 1)
  {
    (*(void (**)(PCStreamElement *, int *))(*(void *)a3 + 32))(a3, &v11);
  }
  else if (v6 == 2)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v9);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v10);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)&v8))
    {
      OZPublishSettings::getHighestChanID(this, (OZChannelFolder *)((char *)this + 32));
      operator new();
    }
    operator new();
  }
  PCString::~PCString((PCString *)&v8);
  PCString::~PCString((PCString *)&v10);
  return 1;
}

void sub_1B7C47EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, PCString a15)
{
  MEMORY[0x1BA9BFBA0](v15, 0x10E1C409BAC03F7);
  PCString::~PCString(&a13);
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

char *OZPublishSettings::didFinishLoadingIntoScene(OZPublishSettings *this)
{
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 32), 8, 1);

  return OZPublishSettings::cleanUpMissingChannels((char *)this);
}

void OZInspectorState::OZInspectorState(OZInspectorState *this)
{
  *(void *)this = &unk_1F1147360;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  uint64_t v1 = (PCString *)((char *)this + 8);
  *((void *)this + 3) = 0;
  PCString::PCString(&v4, "./1/100");
  PCString::PCString(&v3, "./1/200");
  uint64_t v5 = &v4;
  *((unsigned char *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  uint64_t v5 = &v3;
  *((unsigned char *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v3, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  PCString::PCString(&v2, "./1/344");
  uint64_t v5 = &v2;
  *((unsigned char *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v2, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  PCString::~PCString(&v2);
  PCString::~PCString(&v3);
  PCString::~PCString(&v4);
}

void sub_1B7C480D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v12, *v13);
  _Unwind_Resume(a1);
}

void OZInspectorState::OZInspectorState(OZInspectorState *this, const OZInspectorState *a2)
{
  *(void *)this = &unk_1F1147360;
  std::map<PCString,BOOL>::map[abi:ne180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
}

uint64_t OZInspectorState::writeHeader(uint64_t this, PCSerializerWriteStream *a2)
{
  if (*(void *)(this + 24))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZInspectorScope);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 85);
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  return this;
}

void OZInspectorState::writeBody(OZInspectorState *this, PCSerializerWriteStream *a2)
{
  PCString::PCString(&v9, "./1/100");
  PCString::PCString(&v8, "./1/200");
  if (*((void *)this + 3))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZInspectorScope);
    PCString v4 = (OZInspectorState *)*((void *)this + 1);
    if (v4 != (OZInspectorState *)((char *)this + 16))
    {
      do
      {
        if (*((unsigned char *)v4 + 40)
          || PCString::compare((PCString *)v4 + 4, &v9)
          && PCString::compare((PCString *)v4 + 4, &v8))
        {
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
          (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 200))(a2, 1, (uint64_t)v4 + 32);
          (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 2, *((unsigned __int8 *)v4 + 40));
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
        uint64_t v5 = (OZInspectorState *)*((void *)v4 + 1);
        if (v5)
        {
          do
          {
            int v6 = v5;
            uint64_t v5 = *(OZInspectorState **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            int v6 = (OZInspectorState *)*((void *)v4 + 2);
            BOOL v7 = *(void *)v6 == (void)v4;
            PCString v4 = v6;
          }
          while (!v7);
        }
        PCString v4 = v6;
      }
      while (v6 != (OZInspectorState *)((char *)this + 16));
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
}

void sub_1B7C483A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZInspectorState::parseBegin(OZInspectorState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZInspectorState::parseEnd(OZInspectorState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZInspectorState::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v8);
  char v7 = 0;
  if (*((_DWORD *)a3 + 2) == 1)
  {
    (*(void (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(void *)a3 + 96))(a3, 1, &v8);
    (*(void (**)(PCStreamElement *, uint64_t, char *))(*(void *)a3 + 152))(a3, 2, &v7);
    char v5 = v7;
    PCString v9 = &v8;
    *((unsigned char *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(this + 1, (PCString *)&v8, (uint64_t)&std::piecewise_construct, (const PCString **)&v9)+ 40) = v5;
  }
  PCString::~PCString((PCString *)&v8);
  return 0;
}

void sub_1B7C484D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZInspectorState::~OZInspectorState(PCString **this)
{
  *this = (PCString *)&unk_1F1147360;
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  uint64_t vars8;

  *this = (PCString *)&unk_1F1147360;
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)(this + 1), this[2]);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t *std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  int v6 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v11, this);
  var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    PCSharedCount v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v10[0]);
    var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

void std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (PCString *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  LOBYTE(v6[5].var0) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B7C486A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<PCString,BOOL>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<PCString,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<PCString,BOOL>,std::__tree_node<std::__value_type<PCString,BOOL>,void *> *,long>>>(a1, *(PCString **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B7C486FC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v1, *(PCString **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<PCString,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<PCString,BOOL>,std::__tree_node<std::__value_type<PCString,BOOL>,void *> *,long>>>(uint64_t *result, PCString *a2, void *a3)
{
  if (a2 != (PCString *)a3)
  {
    PCString v4 = a2;
    uint64_t v5 = (PCString *)result;
    int v6 = (PCString *)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString const,BOOL> const&>(v5, v6, v4 + 4, (uint64_t)&v4[4]);
      var0 = v4[1].var0;
      if (var0)
      {
        do
        {
          PCSharedCount v8 = var0;
          var0 = (__CFString *)var0->isa;
        }
        while (var0);
      }
      else
      {
        do
        {
          PCSharedCount v8 = v4[2].var0;
          BOOL v9 = v8->isa == v4;
          PCString v4 = (PCString *)v8;
        }
        while (!v9);
      }
      PCString v4 = (PCString *)v8;
    }
    while (v8 != (__CFString *)a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString const,BOOL> const&>(PCString *a1, PCString *a2, PCString *a3, uint64_t a4)
{
  int v6 = std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(a1, a2, &v12, &v11, a3);
  var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    PCSharedCount v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::pair<PCString const,BOOL> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v8, v10[0]);
    var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

void std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::pair<PCString const,BOOL> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (PCString *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, (const PCString *)a2);
  LOBYTE(v6[5].var0) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B7C48898(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t OZGuide::writeHeader(OZGuide *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 76);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuide::writeBody(OZGuide *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideScope);
  float v4 = *((float *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, float))(*(void *)a2 + 80))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  int v6 = *(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24);

  return v6(a2);
}

uint64_t OZGuide::parseBegin(OZGuide *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZGuide::parseEnd(OZGuide *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZGuide::parseElement(OZGuide *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v3 = *((_DWORD *)a3 + 2);
  if (v3 == 2)
  {
    (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)this + 12);
  }
  else if (v3 == 1)
  {
    (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 56))(a3, (char *)this + 8);
  }
  return 0;
}

void OZGuideSet::OZGuideSet(OZGuideSet *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F11473D0;
  *((void *)this + 1) = (char *)this + 16;
}

uint64_t OZGuideSet::writeHeader(OZGuideSet *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideSetScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 75);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuideSet::writeBody(OZGuideSet *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideSetScope);
  int v6 = (OZGuideSet *)*((void *)this + 1);
  if (v6 != (OZGuideSet *)((char *)this + 16))
  {
    do
    {
      (*(void (**)(void *, PCSerializerWriteStream *, uint64_t))(*((void *)v6 + 4) + 16))((void *)v6 + 4, a2, a3);
      (*(void (**)(void *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*((void *)v6 + 4) + 24))((void *)v6 + 4, a2, a3, 1, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      char v7 = (OZGuideSet *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          PCSharedCount v8 = v7;
          char v7 = *(OZGuideSet **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          PCSharedCount v8 = (OZGuideSet *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          int v6 = v8;
        }
        while (!v9);
      }
      int v6 = v8;
    }
    while (v8 != (OZGuideSet *)((char *)this + 16));
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuideSet::parseBegin(OZGuideSet *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZGuideSet::parseEnd(uint64_t **this, PCSerializerReadStream *a2)
{
  if (OZGuideSet::_reading)
  {
    std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(this + 1, OZGuideSet::_reading, OZGuideSet::_reading);
    if (OZGuideSet::_reading) {
      (*(void (**)(uint64_t))(*(void *)OZGuideSet::_reading + 8))(OZGuideSet::_reading);
    }
  }
  OZGuideSet::_reading = 0;
  return 0;
}

uint64_t OZGuideSet::parseElement(uint64_t **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 76)
  {
    if (!OZGuideSet::_reading) {
      operator new();
    }
    std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(this + 1, OZGuideSet::_reading, OZGuideSet::_reading);
    PCSerializerReadStream::pushHandler(a2, (PCSerializer *)OZGuideSet::_reading);
  }
  return 0;
}

void OZGuide::~OZGuide(OZGuide *this)
{
}

uint64_t *std::__tree<OZGuide>::__find_equal<OZGuide>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  float v4 = v5;
  if (v5)
  {
    float v6 = *(float *)(a3 + 8);
    do
    {
      while (1)
      {
        char v7 = v4;
        int v8 = *((unsigned __int8 *)v4 + 44);
        if ((!*(unsigned char *)(a3 + 12) || v8) && (!*(unsigned char *)(a3 + 12) && v8 || v6 >= *((float *)v7 + 10))) {
          break;
        }
        float v4 = (uint64_t *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_18;
        }
      }
      if ((*(unsigned char *)(a3 + 12) || !v8) && (*(unsigned char *)(a3 + 12) && !v8 || *((float *)v7 + 10) >= v6)) {
        break;
      }
      uint64_t result = v7 + 1;
      float v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    char v7 = result;
  }
LABEL_18:
  *a2 = v7;
  return result;
}

void *std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<OZGuide>::__find_equal<OZGuide>((uint64_t)a1, &v11, a2);
  float v6 = (void *)*v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    float v6 = operator new(0x30uLL);
    v9[1] = a1 + 1;
    v6[4] = &unk_1F1147428;
    *((_DWORD *)v6 + 10) = *(_DWORD *)(a3 + 8);
    *((unsigned char *)v6 + 44) = *(unsigned char *)(a3 + 12);
    char v10 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t OZChannelImageWithOptions::getOffset(OZChannelImageWithOptions *this)
{
  return (uint64_t)this + 624;
}

void OZRig::OZRig(OZRig *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1147528;
  v5[2] = &unk_1F11479F0;
  v5[6] = &unk_1F1147C48;
  PCString::PCString(&v6, "Channel Widgets");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), &v6, (OZChannelFolder *)((char *)this + 56), 0x64u, 2u, 0);
  PCString::~PCString(&v6);
  *((void *)this + 152) = (char *)this + 1216;
  *((void *)this + 153) = (char *)this + 1216;
  *((void *)this + 154) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

void sub_1B7C4908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  std::__list_imp<unsigned int>::clear(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZRig::OZRig(OZRig *this, const OZRig *a2, uint64_t a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  *(void *)uint64_t v6 = &unk_1F1147528;
  *(void *)(v6 + 16) = &unk_1F11479F0;
  *(void *)(v6 + 48) = &unk_1F1147C48;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v6 + 56));
  *((void *)this + 152) = (char *)this + 1216;
  *((void *)this + 153) = (char *)this + 1216;
  *((void *)this + 154) = 0;
  if ((a3 & 1) == 0)
  {
    char v7 = (char *)a2 + 1216;
    if ((const OZRig *)((char *)a2 + 1216) != *((const OZRig **)a2 + 153))
    {
      do
      {
        int v8 = (const void *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(*(void *)(*(void *)v7 + 16)
                                                                                            + 8)
                                                                              + 24))(*(void *)(*(void *)(*(void *)v7 + 16) + 8), *(void *)(*(void *)v7 + 16), a3);
        if (v8)
        {
          if (v9)
          {
            char v10 = v9;
            if ((a3 & 8) == 0)
            {
              OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v9 + 16));
              uint64_t v11 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v10 + 640))(v10);
              OZChannelBase::setNameUnset(v11, 1);
            }
            (*(void (**)(OZRig *, char *, void))(*(void *)this + 984))(this, v10, 0);
          }
        }
        char v7 = *(char **)v7;
      }
      while (v7 != *((char **)a2 + 153));
    }
  }
}

void sub_1B7C492C4(_Unwind_Exception *a1)
{
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void OZRig::~OZRig(OZRig *this)
{
  *(void *)this = &unk_1F1147528;
  *((void *)this + 2) = &unk_1F11479F0;
  *((void *)this + 6) = &unk_1F1147C48;
  for (uint64_t i = *((void *)this + 154); i; uint64_t i = *((void *)this + 154))
  {
    int v3 = (uint64_t *)*((void *)this + 153);
    float v4 = (OZSceneNode *)v3[2];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    *((void *)this + 154) = i - 1;
    operator delete(v3);
    uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v4 + 640))(v4);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1088), v6);
    (*(void (**)(OZSceneNode *, void))(*(void *)v4 + 256))(v4, 0);
    char v7 = (OZScene *)*((void *)this + 121);
    if (v7)
    {
      OZScene::unregisterNode(v7, v4);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v4);
    }
    (*(void (**)(OZSceneNode *))(*(void *)v4 + 8))(v4);
  }
  std::__list_imp<unsigned int>::clear((void *)this + 152);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));

  OZSceneNode::~OZSceneNode(this);
}

{
  uint64_t vars8;

  OZRig::~OZRig(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRig::~OZRig(OZRig *this)
{
}

{
  OZRig::~OZRig((OZRig *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZRig::~OZRig((OZRig *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRig::~OZRig((OZRig *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZRig::hasDescendants(OZRig *this)
{
  return *((void *)this + 154) != 0;
}

uint64_t OZRig::numberOfDescendants(OZRig *this)
{
  return *((unsigned int *)this + 308);
}

uint64_t OZRig::getDescendantAtIndex(OZRig *this, int a2)
{
  PCString v2 = (char *)this + 1216;
  int v3 = (char *)*((void *)this + 153);
  BOOL v4 = v3 != (char *)this + 1216;
  if (v3 != (char *)this + 1216 && a2 != 0)
  {
    int v6 = a2 - 1;
    do
    {
      int v3 = (char *)*((void *)v3 + 1);
      BOOL v8 = v6-- != 0;
      BOOL v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v9 = *((void *)v3 + 2);
  if (v9) {
    return v9 + 16;
  }
  else {
    return 0;
  }
}

uint64_t OZRig::addDescendantAfter(OZRig *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  if (lpsrc)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_9:
    int v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v6)
  {
LABEL_10:
    char v9 = 1;
    goto LABEL_14;
  }
  char v7 = (char *)this + 1216;
  for (uint64_t i = *((void *)this + 153); (char *)i != v7; uint64_t i = *(void *)(i + 8))
  {
    if (*(OZSceneNode **)(i + 16) == a3)
    {
      if ((char *)i != v7)
      {
        char v10 = *(uint64_t **)(i + 8);
        uint64_t v11 = operator new(0x18uLL);
        v11[2] = v5;
        uint64_t v12 = *v10;
        *(void *)(v12 + 8) = v11;
        *uint64_t v11 = v12;
        *char v10 = (uint64_t)v11;
        v11[1] = v10;
        ++*((void *)this + 154);
        goto LABEL_16;
      }
      break;
    }
  }
  char v9 = 0;
LABEL_14:
  BOOL v13 = operator new(0x18uLL);
  double v14 = (void *)*((void *)this + 153);
  void *v13 = (char *)this + 1216;
  v13[1] = v14;
  v13[2] = v5;
  void *v14 = v13;
  *((void *)this + 153) = v13;
  ++*((void *)this + 154);
  if (v9)
  {
    uint64_t v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v5 + 640))(v5);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1088), v15);
  }
  else
  {
LABEL_16:
    double v16 = (const OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)v6 + 640))(v6);
    double v17 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v5 + 640))(v5);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 1088), v16, v17);
  }
  (*(void (**)(OZSceneNode *, OZRig *))(*(void *)v5 + 256))(v5, this);
  double v18 = (OZScene *)*((void *)this + 121);
  if (v18)
  {
    OZScene::registerNode(v18, v5);
    OZScene::addAllDependencies(*((void *)this + 121), v5);
  }
  BOOL v19 = *(uint64_t (**)(OZRig *))(*(void *)this + 496);

  return v19(this);
}

uint64_t OZRig::addDescendantBefore(OZRig *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  if (lpsrc)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_9:
    int v6 = (uint64_t *)((char *)this + 1216);
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_9;
  }
LABEL_3:
  int v6 = (uint64_t *)((char *)this + 1216);
  {
    for (uint64_t i = *((void *)this + 153); (uint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        int v6 = (uint64_t *)i;
        break;
      }
    }
  }
LABEL_11:
  BOOL v8 = operator new(0x18uLL);
  v8[2] = v5;
  uint64_t v9 = *v6;
  *(void *)(v9 + 8) = v8;
  *BOOL v8 = v9;
  *int v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((void *)this + 154);
  if (a3)
  {
    char v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    uint64_t v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v5 + 640))(v5);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 1088), v10, v11);
  }
  else
  {
    uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v5 + 640))(v5);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1088), v12);
  }
  (*(void (**)(OZSceneNode *, OZRig *))(*(void *)v5 + 256))(v5, this);
  BOOL v13 = (OZScene *)*((void *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, v5);
    OZScene::addAllDependencies(*((void *)this + 121), v5);
  }
  double v14 = *(uint64_t (**)(OZRig *))(*(void *)this + 496);

  return v14(this);
}

OZChannelFolder *OZRig::removeDescendant(OZRig *this, OZSceneNode *lpsrc)
{
  if (lpsrc) {
  else
  }
    BOOL v4 = 0;
  uint64_t v5 = (char *)this + 1216;
  for (uint64_t i = (uint64_t *)*((void *)this + 153); i != (uint64_t *)v5; uint64_t i = (uint64_t *)i[1])
  {
    if ((OZSceneNode *)i[2] == v4)
    {
      if (i != (uint64_t *)v5)
      {
        (*(void (**)(OZSceneNode *, void))(*(void *)v4 + 256))(v4, 0);
        uint64_t v7 = *i;
        *(void *)(v7 + 8) = i[1];
        *(void *)i[1] = v7;
        --*((void *)this + 154);
        operator delete(i);
        (*(void (**)(OZRig *))(*(void *)this + 496))(this);
        if ((*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this))
        {
          BOOL v8 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this);
          OZScene::unregisterNode(v8, v4);
          uint64_t v9 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this);
          OZScene::removeAllDependencies(v9, v4);
        }
      }
      break;
    }
  }
  char v10 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)lpsrc + 640))(lpsrc);

  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1088), v10);
}

uint64_t OZRig::begin_descendants(OZRig *this)
{
  return *((void *)this + 153);
}

uint64_t OZRig::end_descendants(OZRig *this)
{
  return (uint64_t)this + 1216;
}

uint64_t OZRig::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRigScope);
    uint64_t v10 = (*((uint64_t (**)(unsigned int **))*this + 128))(this);
    uint64_t v11 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    if (v10 != v11)
    {
      uint64_t v12 = v11;
      do
      {
        uint64_t v13 = *(void *)(v10 + 16);
        if (!OZChannelBase::testFlag((OZChannelBase *)(v13 + 56), 8))
        {
          uint64_t v15 = *(void *)(v13 + 48);
          uint64_t v14 = v13 + 48;
          (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(v15 + 16))(v14, a2, 0);
          (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2, 0, 1, 1);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10 != v12);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
  }

  return OZSceneNode::writeBody(this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZRig::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRig::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZRig::parseBegin(OZRig *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZRig::parseBegin(OZRig *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZRig::parseEnd(OZRig *this, PCSerializerReadStream *a2)
{
  return OZSceneNode::parseEnd((OZRig *)((char *)this - 48), a2);
}

uint64_t OZRig::parseElement(OZRig *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 62)
  {
    PCSharedCount::PCSharedCount(&v18);
    *(void *)double v17 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v17);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    int v6 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v17[0]);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = (const void *)(*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v7 + 168))(v7, &v18, v17[1]);
        if (v8) {
        else
        }
          uint64_t v9 = 0;
        OZChannelBase::setID((OZChannelBase *)(v9 + 56), v17[1]);
        (*(void (**)(char *, OZRig *))(*(void *)v9 + 256))(v9, this);
        uint64_t v10 = operator new(0x18uLL);
        v10[1] = (char *)this + 1216;
        v10[2] = v9;
        uint64_t v11 = *((void *)this + 152);
        *uint64_t v10 = v11;
        *(void *)(v11 + 8) = v10;
        *((void *)this + 152) = v10;
        ++*((void *)this + 154);
        uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v9 + 640))(v9);
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1088), v12);
        uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v9 + 640))(v9);
        OZChannelBase::resetFlag(v13, 64, 0);
        uint64_t v14 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this);
        uint64_t v15 = (uint64_t)v14;
        if (v14)
        {
          OZScene::registerNode(v14, (OZSceneNode *)v9);
          OZScene::addAllDependencies(v15, (OZSceneNode *)v9);
        }
        PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v9 + 48));
      }
    }
    PCString::~PCString((PCString *)&v18);
  }
  return 1;
}

void sub_1B7C4A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZRig::parseElement(OZRig *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZRig::allowDrag(OZRig *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (lpsrc)
  {
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  unint64_t v16 = *((void *)lpsrc + 1);
  long long v28 = xmmword_1B8378A00;
  if (OZFactory::isKindOfClass(v16, (int32x4_t *)&v28)
    && (OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(void *)this + 640))(this) == a3)
  {
    if (*a6 == 1 && OZRigWidget::CanRigChannel((unint64_t)v19, v20))
    {
      *((_DWORD *)this + 310) = 3;
      *a5 = a4 & 1;
      unsigned int v21 = 1;
LABEL_36:
      *a6 = v21;
    }
  }
  else
  {
    if (!v15)
    {
      OZSceneNode::allowDrag(this, lpsrc, a3, a4, a5, a6, a7);
      return;
    }
    double v17 = (char *)this + 1216;
    for (uint64_t i = *((void *)this + 153); ; uint64_t i = *(void *)(i + 8))
    {
      if ((char *)i == v17) {
        goto LABEL_17;
      }
      if (*(void **)(i + 16) == v15) {
        break;
      }
    }
    if ((char *)i == v17 || (OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(void *)this + 640))(this) != a3)
    {
LABEL_17:
      if (!(*(uint64_t (**)(void *))(*(void *)v15 + 272))(v15)
        || (uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v15 + 272))(v15),
            v22 == (*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this)))
      {
        uint64_t v23 = *((void *)this + 153);
        if ((char *)v23 == v17) {
          goto LABEL_33;
        }
        char v27 = a4;
        uint64_t v24 = 0;
        uint64_t v25 = -1;
        uint64_t v26 = -1;
        do
        {
          if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v23 + 16) + 640))(*(void *)(v23 + 16)) == a3) {
            uint64_t v25 = v24;
          }
          if (*(void **)(v23 + 16) == v14) {
            uint64_t v26 = v24;
          }
          if ((v26 & 0x8000000000000000) == 0 && (v25 & 0x8000000000000000) == 0) {
            break;
          }
          ++v24;
          uint64_t v23 = *(void *)(v23 + 8);
        }
        while ((char *)v23 != v17);
        if (v26 != v25 && ((v25 | v26) & 0x8000000000000000) == 0)
        {
          *a5 = v27 & 2;
          if (v26 <= v25) {
            unsigned int v21 = 3;
          }
          else {
            unsigned int v21 = 2;
          }
          goto LABEL_36;
        }
        LOBYTE(a4) = v27;
        if (v25 < 0)
        {
LABEL_33:
          if ((OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(void *)this + 640))(this) != a3) {
            return;
          }
        }
        *a5 = a4 & 1;
      }
    }
  }
}

void non-virtual thunk to'OZRig::allowDrag(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

uint64_t non-virtual thunk to'OZRig::prepareForDragOperation()
{
  return OZSceneNode::prepareForDragOperation();
}

uint64_t OZRig::performDragOperation(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  uint64_t v16 = (*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this);
  double v17 = (OZScene *)v16;
  if (v16) {
    PCSharedCount v18 = *(OZChannelBase **)(v16 + 1584);
  }
  else {
    PCSharedCount v18 = 0;
  }
  if (*((unsigned char *)this + 1244))
  {
    if (a2) {
    else
    }
      BOOL v19 = 0;
    if (*((_DWORD *)this + 312))
    {
      uint64_t v22 = *(const void **)(*((void *)this + 153) + 16);
      if (!v22)
      {
        uint64_t v24 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      if (v18)
      {
        PCURL::PCURL((PCURL *)&v34, @"Undo Add Widget to Rig");
        OZChannelBase::setRangeName(v18, &v34);
        PCString::~PCString(&v34);
      }
      Widget = OZRig::createWidget(this, (const PCString *)*((unsigned int *)this + 310));
    }
    uint64_t v24 = Widget;
LABEL_21:
    OZRigWidget::addChannel(v24, v19, 0);
    int v25 = *((_DWORD *)this + 312) + 1;
    *((_DWORD *)this + 312) = v25;
    if (v25 == a6)
    {
      (*(void (**)(OZRig *))(*(void *)this + 496))(this);
      if (v17 && v18 != 0)
      {
        if (v24) {
          char v27 = (OZRigWidget *)((char *)v24 + 16);
        }
        else {
          char v27 = 0;
        }
        OZScene::selectObject(v17, v27, 0, 0);
        OZDocument::postNotification((OZDocument *)v18, 48);
        OZChannelBase::setRangeName(v18, v28);
      }
    }
    return 1;
  }
  if (*((unsigned char *)this + 1245))
  {
    uint64_t v21 = v20[120];
    if (v21)
    {
      if (!*((_DWORD *)this + 312))
      {
        PCURL::PCURL((PCURL *)&v34, @"Undo Reorder");
        (*(void (**)(void *, PCString *, uint64_t))(v20[2] + 176))(v20 + 2, &v34, 3);
        PCString::~PCString(&v34);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v21 + 1000))(v21, v20);
    }
    else
    {
      PCURL::PCURL((PCURL *)&v34, @"Undo Drop");
      (*(void (**)(char *, PCString *, uint64_t))(*((void *)this + 2) + 176))((char *)this + 16, &v34, 3);
      PCString::~PCString(&v34);
    }
    v30 = (void *)*((void *)this + 153);
    if (v30 != (void *)((char *)this + 1216))
    {
      v31 = v30 + 2;
      if ((OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v30[2] + 640))(v30[2]) == a3)
      {
        uint64_t v32 = 0;
LABEL_41:
        if (a5 == 3) {
          uint64_t v32 = *v31;
        }
        goto LABEL_43;
      }
      while (1)
      {
        v30 = (void *)v30[1];
        if (v30 == (void *)((char *)this + 1216)) {
          break;
        }
        uint64_t v32 = *v31;
        v31 = v30 + 2;
        if ((OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v30[2] + 640))(v30[2]) == a3) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v32 = 0;
LABEL_43:
    (*(void (**)(OZRig *, void *, uint64_t))(*(void *)this + 984))(this, v20, v32);
    int v33 = *((_DWORD *)this + 312) + 1;
    *((_DWORD *)this + 312) = v33;
    if (v33 == a6)
    {
      (*(void (**)(OZRig *))(*(void *)this + 496))(this);
      if (v18) {
        OZDocument::postNotification((OZDocument *)v18, 16);
      }
    }
    return 1;
  }

  return OZSceneNode::performDragOperation(this, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B7C4ABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

OZRigWidget *OZRig::createWidget(OZRig *this, const PCString *a2)
{
  PCSharedCount::PCSharedCount(&v15);
  switch((int)a2)
  {
    case 1:
      PCURL::PCURL((PCURL *)&v14, @"Widget Type Checkbox");
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      uint64_t v11 = "Rig Checkbox";
      break;
    case 2:
      PCURL::PCURL((PCURL *)&v14, @"Widget Type Pop Up");
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      uint64_t v11 = "Rig Pop-Up";
      break;
    case 3:
      PCURL::PCURL((PCURL *)&v14, @"Widget Type Slider");
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      uint64_t v11 = "Rig Slider";
      break;
    case 4:
      PCURL::PCURL((PCURL *)&v14, @"Widget Type Aspect Ratio");
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      uint64_t v11 = 0;
      break;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", v4, v5, v6, v7, v8, v9, v10, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRig.cpp");
      pcAbortImpl();
  }
  uint64_t v12 = OZRigWidget::create((OZRigWidget *)&v15, a2);
  OZRig::addWidget(this, v12);
  PCURL::PCURL((PCURL *)&v14, @"Undo Add Widget to Rig");
  (*(void (**)(uint64_t, PCString *, uint64_t))(*((void *)v12 + 2) + 176))((uint64_t)v12 + 16, &v14, 1);
  PCString::~PCString(&v14);
  OZChannelBase::setRangeName((OZChannelBase *)"Rig", (const PCString *)v11);
  PCString::~PCString((PCString *)&v15);
  return v12;
}

void sub_1B7C4ADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
}

uint64_t non-virtual thunk to'OZRig::performDragOperation(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRig::performDragOperation((OZRig *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void *OZRig::addWidget(OZRig *this, OZRigWidget *a2)
{
  uint64_t v4 = (OZChannelFolder *)((char *)this + 1088);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(void *)a2 + 640))(a2);
  OZChannelFolder::push_front(v4, v5);
  (*(void (**)(OZRigWidget *, OZRig *))(*(void *)a2 + 256))(a2, this);
  uint64_t v6 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(void *)this + 272))(this);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    OZScene::registerNode(v6, a2);
    OZScene::addAllDependencies(v7, a2);
    OZDocument::postNotification(*(OZDocument **)(v7 + 1584), 16);
    (*(void (**)(OZRigWidget *, uint64_t))(*(void *)a2 + 280))(a2, v7);
  }
  uint64_t result = operator new(0x18uLL);
  uint64_t v9 = (void *)*((void *)this + 153);
  *uint64_t result = (char *)this + 1216;
  result[1] = v9;
  result[2] = a2;
  *uint64_t v9 = result;
  *((void *)this + 153) = result;
  ++*((void *)this + 154);
  return result;
}

void OZLiCachingDelegate::OZLiCachingDelegate(OZLiCachingDelegate *this)
{
  *(void *)this = &unk_1F1147D70;
  PCSingleton::PCSingleton((OZLiCachingDelegate *)((char *)this + 8), 0);
  *(void *)this = &unk_1F1147CB8;
  *((void *)this + 1) = &unk_1F1147D08;
  LiSetCachingDelegate((uint64_t)this);
}

void sub_1B7C4B0C8(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLiCachingDelegate::instance(OZLiCachingDelegate *this)
{
  {
    operator new();
  }
  return OZLiCachingDelegate::instance(void)::inst;
}

void sub_1B7C4B154(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

BOOL OZLiCachingDelegate::addTexture(int a1, ProGL::TextureHandle *a2, int a3, PCHash128 *a4)
{
  uint64_t v7 = PGCreateTextureFromPGLTexture((void (**)(_anonymous_namespace_ **))a2, &v11);
  uint64_t v8 = (PGTextureCache *)OZCacheManager::Instance(v7);
  BOOL v9 = OZCacheManager::addTexture(v8, &v11, (long long *)a2 + 1, a3, a4);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_1B7C4B210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL OZLiCachingDelegate::getTextureForKey(OZCacheManager *a1, int a2, const PCHash128 *a3, uint64_t a4)
{
  uint64_t v7 = (PGTextureCache *)OZCacheManager::Instance(a1);
  OZCacheManager::getTextureForKey(v7, a2, a3, (unsigned char *)(a4 + 16), &v13);
  uint64_t v8 = v13;
  if (v13)
  {
    PGTexture::getPGLTexture((uint64_t)v13, &v12);
    long long v9 = v12;
    long long v12 = 0uLL;
    uint64_t v10 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v8 != 0;
}

void sub_1B7C4B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void OZLiCachingDelegate::disableLimits(OZLiCachingDelegate *this)
{
  uint64_t v1 = (PGTextureCache *)PGTextureCache::instance(this);

  PGTextureCache::disableLimits(v1);
}

void OZLiCachingDelegate::enableLimits(OZLiCachingDelegate *this)
{
  uint64_t v1 = (PGTextureCache *)PGTextureCache::instance(this);

  PGTextureCache::enableLimits(v1);
}

void OZLiCachingDelegate::addBitmap(OZCacheManager *a1, void *a2, PCHash128 *a3, double a4)
{
  OZCacheManager::Instance(a1);
  OZCacheManager::addImage(a2, a3, &v7, a4);
  ProCore_Impl::PCNSRefImpl::release(&v7);
}

void OZLiCachingDelegate::getBitmapForKey(OZLiCachingDelegate *this@<X0>, const PCHash128 *a2@<X1>, void *a3@<X8>)
{
  OZCacheManager::Instance(this);

  OZCacheManager::getImageForKey(a2, a3);
}

void OZLiCachingDelegate::~OZLiCachingDelegate(OZLiCachingDelegate *this)
{
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((OZLiCachingDelegate *)((char *)this + 8));

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZLiCachingDelegate::~OZLiCachingDelegate(OZLiCachingDelegate *this)
{
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t AbsoluteNSURL(NSString *a1, NSString *a2)
{
  int v3 = a1;
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB10], "URLWithString:", a1), "path"), "characterAtIndex:", 0) != 47)int v3 = -[NSString stringByAppendingPathComponent:](a2, "stringByAppendingPathComponent:", v3); {
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  }

  return [v4 fileURLWithPath:v3];
}

id LoadSCNSceneFromFile(NSURL *a1)
{
  id result = (id)[MEMORY[0x1E4F3B270] sceneSourceWithURL:a1 options:0];
  if (result)
  {
    PCString v2 = result;
    int v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v4 = [NSNumber numberWithBool:1];
    [v3 setObject:v4 forKey:*MEMORY[0x1E4F3B3B8]];
    [v3 setObject:*MEMORY[0x1E4F3B3A8] forKey:*MEMORY[0x1E4F3B3A0]];
    uint64_t v5 = (void *)[v2 sceneWithOptions:v3 error:0];
    return v5;
  }
  return result;
}

uint64_t New3DEngineSceneFileImpl(OZ3DEngineSceneFile *a1, const __CFURL **this)
{
  PCURL::getExtension(this, (PCURL *)&v8);
  PCString::PCString(&v7, "usdz");
  int v2 = PCString::caseInsensitiveCompare(&v8, &v7);
  PCString::~PCString(&v7);
  if (!v2) {
    operator new();
  }
  PCString::PCString(&v7, "scn");
  int v3 = PCString::caseInsensitiveCompare(&v8, &v7);
  PCString::~PCString(&v7);
  if (!v3) {
    operator new();
  }
  PCString::PCString(&v7, "arface");
  int v4 = PCString::caseInsensitiveCompare(&v8, &v7);
  PCString::~PCString(&v7);
  if (!v4) {
    operator new();
  }
  PCString::PCString(&v7, "obj");
  int v5 = PCString::caseInsensitiveCompare(&v8, &v7);
  PCString::~PCString(&v7);
  if (!v5) {
    operator new();
  }
  PCString::~PCString(&v8);
  return 0;
}

void sub_1B7C4B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C400C931945);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFile::willDoCollectOperation(OZ3DEngineSceneFile *this, NSString *a2)
{
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 64))(FileImpl))
  {
    uint64_t v5 = OZ3DEngineSceneFile::getFileImpl(this);
    (*(void (**)(uint64_t, NSString *))(*(void *)v5 + 104))(v5, a2);
  }
  return 1;
}

uint64_t OZ3DEngineSceneFile::didDoCollectOperation(OZ3DEngineSceneFile *this, OZCopyFootageInfo *a2)
{
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)FileImpl + 64))(FileImpl);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)OZ3DEngineSceneFile::getFileImpl(this) + 112);
    return v5();
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::getFilePathForCollectOperation(OZ3DEngineSceneFile *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1264))();
}

uint64_t OZ3DEngineSceneFile::clearLoadedFile(OZ3DEngineSceneFile *this)
{
  uint64_t result = *((void *)this + 216);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 216) = 0;
  return result;
}

uint64_t OZ3DEngineSceneFile::openMedia(OZ3DEngineSceneFile *this)
{
  if (*((unsigned char *)this + 1560)) {
    return 0;
  }
  if (*((void *)this + 193))
  {
    uint64_t FileImpl = (OZ3DEngineSceneFileImpl *)OZ3DEngineSceneFile::getFileImpl(this);
    OZ3DEngineSceneFileImpl::readFile(FileImpl);
    char v4 = *(_DWORD *)(OZ3DEngineSceneFile::getFileImpl(this) + 256) != 1;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, v4);
  }
  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this)
    && *((void *)this + 194))
  {
    uint64_t v5 = (OZ3DEngineSceneFileImpl *)OZ3DEngineSceneFile::getFileImpl(this);
    OZ3DEngineSceneFileImpl::readFile(v5);
    char v6 = *(_DWORD *)(OZ3DEngineSceneFile::getFileImpl(this) + 256) != 1;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, v6);
  }
  PCString v7 = (const __CFURL **)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1408))(this);
  if (v7)
  {
    PCURL::getAsFileSystemString(v7, &v8);
    PCString::set((PCString *)this + 196, &v8);
    PCString::~PCString(&v8);
  }
  LODWORD(result) = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this);
  if ((result & 1) == 0) {
    *((unsigned char *)this + 1560) = 1;
  }
  return result;
}

void sub_1B7C4BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZ3DEngineSceneFileImpl::readFile(OZ3DEngineSceneFileImpl *this)
{
  int v2 = (PCMutex *)((char *)this + 280);
  PCMutex::lock((PCMutex *)((char *)this + 280));
  if (!*((_DWORD *)this + 64))
  {
    int v3 = (*(uint64_t (**)(OZ3DEngineSceneFileImpl *))(*(void *)this + 136))(this);
    if (v3) {
      int v4 = 1;
    }
    else {
      int v4 = 2;
    }
    if (*((_DWORD *)this + 64) != v4)
    {
      *((_DWORD *)this + 64) = v4;
      if (v3) {
        OZ3DEngineSceneFile::didReadSceneFile(*((OZ3DEngineSceneFile **)this + 33), 1);
      }
    }
  }
  return PCMutex::unlock(v2);
}

void sub_1B7C4BC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

uint64_t OZ3DEngineSceneFile::isSceneFileValid(OZ3DEngineSceneFile *this, NSString *a2)
{
  if ((objc_msgSend((id)-[OZ3DEngineSceneFile pathExtension](this, "pathExtension"), "isEqualToString:", @"arface") & 1) == 0)
  {
    uint64_t result = (uint64_t)LoadSCNSceneFromFile((NSURL *)[MEMORY[0x1E4F1CB10] fileURLWithPath:this]);
    if (!result) {
      return result;
    }
  }
  return 1;
}

uint64_t OZ3DEngineSceneFile::get3DScene(OZ3DEngineSceneFile *this)
{
  uint64_t FileImpl = (OZ3DEngineSceneFileImpl *)OZ3DEngineSceneFile::getFileImpl(this);
  OZ3DEngineSceneFileImpl::readFile(FileImpl);
  return (uint64_t)FileImpl + 8;
}

uint64_t OZ3DEngineSceneFile::getBounds(OZ3DEngineSceneFile *a1, double *a2, long long *a3)
{
  uint64_t result = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)a1 + 1432))(a1);
  if (result)
  {
    double v7 = 0.0;
    double v8 = -1.0;
    double v9 = -1.0;
    double v10 = 0.0;
    if (!a2) {
      return result;
    }
LABEL_11:
    *a2 = v7;
    a2[1] = v10;
    a2[2] = v8;
    a2[3] = v9;
    return result;
  }
  uint64_t result = OZ3DEngineSceneFile::getFileImpl(a1);
  if (result)
  {
    if (*((unsigned char *)a3 + 202)) {
      uint64_t v11 = (long long *)MEMORY[0x1E4F1FA48];
    }
    else {
      uint64_t v11 = a3;
    }
    long long v14 = *v11;
    uint64_t v15 = *((void *)v11 + 2);
    uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr))(*(void *)result + 128))(v16);
    double v7 = *(double *)v16;
    double v12 = *(double *)&v16[1];
    double v10 = *(double *)&v16[2];
    double v13 = *(double *)&v16[3];
  }
  else
  {
    double v10 = 1.0;
    double v13 = -1.0;
    double v12 = -1.0;
    double v7 = 1.0;
  }
  double v8 = v12 - v7;
  double v9 = v13 - v10;
  if (a2) {
    goto LABEL_11;
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::getBounds(uint64_t a1, double *a2, long long *a3)
{
  return OZ3DEngineSceneFile::getBounds((OZ3DEngineSceneFile *)(a1 - 1576), a2, a3);
}

double OZ3DEngineSceneFile::getPreviewBounds(uint64_t a1, double *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 1576))(a1);
  double v4 = a2[2];
  double result = a2[3];
  if (v4 <= result)
  {
    if (v4 < result)
    {
      *a2 = result / v4 * *a2;
      a2[2] = result;
      double v4 = result;
    }
  }
  else
  {
    a2[1] = v4 / result * a2[1];
    a2[3] = v4;
    double result = v4;
  }
  if (v4 < 1.0 && v4 > 0.0)
  {
    double v5 = (double)(int)vcvtmd_s64_f64(v4 + 0.5 + 0.0000001);
    *a2 = v5 / v4 * *a2;
    a2[2] = v5;
  }
  if (result < 1.0 && result > 0.0)
  {
    double v6 = (double)(int)vcvtmd_s64_f64(result + 0.5 + 0.0000001);
    double result = v6 / result * a2[1];
    a2[1] = result;
    a2[3] = v6;
  }
  return result;
}

double non-virtual thunk to'OZ3DEngineSceneFile::getPreviewBounds(uint64_t a1, double *a2)
{
  return OZ3DEngineSceneFile::getPreviewBounds(a1 - 1576, a2);
}

float OZ3DEngineSceneFile::getDimensions(OZ3DEngineSceneFile *this, float *a2, float *a3, const OZRenderState *a4)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(OZ3DEngineSceneFile *, void *, const OZRenderState *))(*(void *)this + 1576))(this, v14, a4);
  double v11 = *((double *)&v15 + 1);
  float v12 = *(double *)&v15;
  *a2 = v12;
  float result = v11;
  *a3 = result;
  return result;
}

float non-virtual thunk to'OZ3DEngineSceneFile::getDimensions(OZ3DEngineSceneFile *this, float *a2, float *a3, const OZRenderState *a4)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(char *, void *, const OZRenderState *))(*((void *)this - 197) + 1576))((char *)this - 1576, v14, a4);
  double v11 = *((double *)&v15 + 1);
  float v12 = *(double *)&v15;
  *a2 = v12;
  float result = v11;
  *a3 = result;
  return result;
}

void OZ3DEngineSceneFile::getHeliumGraph(OZ3DEngineSceneFile *a1, uint64_t a2, uint64_t a3, FxColorDescription *a4, uint64_t a5)
{
  LiRenderingTechnology::getLogLithium((LiRenderingTechnology *)(a2 + 1316));
  FxColorDescription::setDynamicRange(a4, 0);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  uint64_t RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  LiRenderParameters::LiRenderParameters(v15, a4, RenderNodeList, BlendingGamma);
  LiAgent::LiAgent(v14, v15, a5, 0);
  double v11 = (LiHe3DEngineNode *)HGObject::operator new(0x2C0uLL);
  LiHe3DEngineNode::LiHe3DEngineNode(v11);
  CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace(a4);
  *((void *)v11 + 86) = CGColorSpace;
  *((void *)v11 + 87) = PCColorSpaceCache::cgRec709Linear(CGColorSpace);
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(a1);
  OZ3DEngineSceneFileImpl::readFile((OZ3DEngineSceneFileImpl *)FileImpl);
  std::recursive_mutex::lock((std::recursive_mutex *)(FileImpl + 8));
  operator new();
}

void sub_1B7C4C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGObject::operator delete(v11);
  HGTransform::~HGTransform((HGTransform *)&a9);
  PCSharedCount::~PCSharedCount(v12);
  if (STACK[0x280]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x280]);
  }
  std::recursive_mutex::unlock(v10);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  LiAgent::~LiAgent((LiAgent *)&STACK[0x288]);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x458]);
  _Unwind_Resume(a1);
}

double OZ3DEngineSceneFile::getSceneVolume(OZ3DEngineSceneFile *a1, _OWORD *a2)
{
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(a1);
  if (FileImpl)
  {
    (*(void (**)(_OWORD *__return_ptr))(*(void *)FileImpl + 128))(v6);
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

void non-virtual thunk to'OZ3DEngineSceneFile::getHeliumGraph(uint64_t a1, uint64_t a2, uint64_t a3, FxColorDescription *a4, uint64_t a5)
{
}

void OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(OZ3DEngineSceneFileImpl *this, OZ3DEngineSceneFile *a2, const PCURL *a3)
{
  *(void *)this = &unk_1F1147DB0;
  Li3DEngineScene::Li3DEngineScene((OZ3DEngineSceneFileImpl *)((char *)this + 8));
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  PCURL::PCURL((OZ3DEngineSceneFileImpl *)((char *)this + 192), a3);
  *(_OWORD *)((char *)this + 200) = xmmword_1B7E73BA0;
  *((void *)this + 31) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 232) = xmmword_1B7E73BA0;
  *(_OWORD *)((char *)this + 216) = xmmword_1B7E73BA0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = a2;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  PCMutex::PCMutex((PCMutex *)((char *)this + 280), 1);
  *((void *)this + 35) = &unk_1F10933F0;
  operator new();
}

void sub_1B7C4CA28(_Unwind_Exception *a1)
{
  PCString::~PCString(v3);
  PCURL::~PCURL(v2);
  Li3DEngineScene::~Li3DEngineScene(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(OZ3DEngineSceneFileImpl *this)
{
  *(void *)this = &unk_1F1147DB0;
  int v2 = (std::recursive_mutex *)((char *)this + 8);
  Li3DEngineScene::set((OZ3DEngineSceneFileImpl *)((char *)this + 8), 0);
  uint64_t v3 = *((void *)this + 22);
  if (v3)
  {
    long long v5 = (void **)*((void *)this + 22);
    std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1BA9BFBA0](v3, 0x20C40960023A9);
  }
  *((void *)this + 22) = 0;
  double v4 = (void **)*((void *)this + 23);
  if (v4)
  {
    if (*v4) {
      operator delete(*v4);
    }
    MEMORY[0x1BA9BFBA0](v4, 0x1010C40113C0ABBLL);
  }
  *((void *)this + 23) = 0;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 280));
  PCString::~PCString((PCString *)this + 34);
  PCURL::~PCURL((OZ3DEngineSceneFileImpl *)((char *)this + 192));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 152, *((PCSharedCount **)this + 20));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 15);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 88, *((id **)this + 12));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 9);
  std::recursive_mutex::~recursive_mutex(v2);
}

void OZ3DEngineSceneFileImpl::setURL(uint64_t **this, const __CFURL **a2)
{
  double v4 = (const void **)(this + 24);
  if (!CFEqual(*a2, this[24]))
  {
    PCURL::operator=(v4, a2);
    ((void (*)(uint64_t **))(*this)[2])(this);
    Li3DEngineScene::set((Li3DEngineScene *)(this + 1), 0);
    long long v5 = this[22];
    uint64_t v7 = *v5;
    for (uint64_t i = v5[1]; i != v7; PCURL::~PCURL((PCURL *)(i - 8)))
      ;
    v5[1] = v7;
    this[23][1] = 0;
    if (*((_DWORD *)this + 64)) {
      *((_DWORD *)this + 64) = 0;
    }
  }
}

double OZ3DEngineSceneFileImpl::getOriginalFileDurationInSeconds(OZ3DEngineSceneFileImpl *this)
{
  OZ3DEngineSceneFileImpl::readFile(this);
  int v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock(v2);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v2);
  double v4 = Representation;
  if (Representation)
  {
    long long v5 = (void *)[Representation attributeForKey:*MEMORY[0x1E4F3B398]];
    double v6 = (void *)[v4 attributeForKey:*MEMORY[0x1E4F3B3C0]];
    [v5 doubleValue];
    double v8 = v7;
    [v6 doubleValue];
    double v10 = v8 - v9;
  }
  else
  {
    double v10 = 1.0;
  }
  std::recursive_mutex::unlock(v2);
  return v10;
}

void sub_1B7C4CCFC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFileImpl::getNumPolygons(OZ3DEngineSceneFileImpl *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  OZ3DEngineSceneFileImpl::readFile(this);
  int v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock(v2);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v2);
  if (Representation
    && (double v4 = objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodesPassingTest:", &__block_literal_global_79), v21 = 0u, v22 = 0u, v19 = 0u, v20 = 0u, (v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16)) != 0))
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v4);
        }
        double v9 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        double v10 = objc_msgSend((id)objc_msgSend(v9, "geometry", 0), "geometryElements");
        uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v11)
        {
          uint64_t v12 = *(void *)v16;
          do
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              if (*(void *)v16 != v12) {
                objc_enumerationMutation(v10);
              }
              uint64_t v6 = v6
                 + [*(id *)(*((void *)&v15 + 1) + 8 * j) primitiveCount];
            }
            uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }
          while (v11);
        }
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::recursive_mutex::unlock(v2);
  return v6;
}

void sub_1B7C4CEE4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZN23OZ3DEngineSceneFileImpl14getNumPolygonsEv_block_invoke(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

void *OZ3DEngineSceneFileImpl::getAssociatedFileURLs@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  OZ3DEngineSceneFileImpl::readFile((OZ3DEngineSceneFileImpl *)this);
  double v4 = this[22];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  unint64_t v7 = (v6 - *v4) >> 3;

  return std::vector<PCURL>::__init_with_size[abi:ne180100]<PCURL*,PCURL*>(a2, v5, v6, v7);
}

void OZ3DEngineSceneFile::didReadSceneFile(OZ3DEngineSceneFile *this, char a2)
{
  if (a2)
  {
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 216) + 48))(*((void *)this + 216));
    double v4 = (OZChannelBase *)((char *)this + 1600);
    if (v3) {
      OZChannelBase::resetFlag(v4, 2, 1);
    }
    else {
      OZChannelBase::setFlag(v4, 2, 1);
    }
    double OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    if (fabs(OriginalFileDurationInSeconds) >= 0.0000001)
    {
      CMTimeMakeWithSeconds(&v14, OriginalFileDurationInSeconds, 60);
    }
    else
    {
      uint64_t v6 = *((void *)this + 121);
      if (v6
        || OZApplication::getCurrentDoc((OZApplication *)theApp)
        && (uint64_t v6 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
      {
        __n128 v11 = 0uLL;
        CMTimeEpoch v12 = 0;
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v11);
        *(__n128 *)&v14.CMTimeValue value = v11;
        v14.CMTimeEpoch epoch = v12;
      }
    }
    __n128 v11 = *(__n128 *)MEMORY[0x1E4F1FA48];
    CMTimeEpoch v12 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    CMTime v13 = v14;
    unint64_t v7 = (OZChannelObjectRootBase *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 640))(this);
    OZChannelObjectRootBase::setTimeExtent(v7, (const PCTimeRange *)&v11, [MEMORY[0x1E4F29060] isMainThread] ^ 1);
  }
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this))
  {
    double v8 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this);
    OZScene::recalcDependencies(v8);
  }
  OZ3DEngineSceneFile::get3DEngineSceneElements(this, (void **)&v11);
  unint64_t v10 = v11.n128_u64[1];
  double v9 = (OZ3DEngineSceneElement **)v11.n128_u64[0];
  if (v11.n128_u64[0] != v11.n128_u64[1])
  {
    do
      OZ3DEngineSceneElement::didReadSceneFile(*v9++);
    while (v9 != (OZ3DEngineSceneElement **)v10);
    double v9 = (OZ3DEngineSceneElement **)v11.n128_u64[0];
  }
  if (v9)
  {
    v11.n128_u64[1] = (unint64_t)v9;
    operator delete(v9);
  }
}

void sub_1B7C4D1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double getSceneBoundingBox@<D0>(SCNScene *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = xmmword_1B7E736F0;
  *(_OWORD *)(a2 + 32) = xmmword_1B7E736F0;
  *(_OWORD *)a2 = xmmword_1B7E736F0;
  [(SCNNode *)[(SCNScene *)a1 rootNode] getBoundingBoxMin:v10 max:v9];
  double result = v10[0];
  double v4 = v9[0];
  double v5 = v10[1];
  double v6 = v9[1];
  double v7 = v10[2];
  double v8 = v9[2];
  *(double *)a2 = v10[0];
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  *(double *)(a2 + 24) = v6;
  *(double *)(a2 + 32) = v7;
  *(double *)(a2 + 40) = v8;
  return result;
}

uint64_t OZ3DEngineSceneFileImpl::setSCNScenePointerFromFile(const __CFURL **this)
{
  int v2 = (Li3DEngineScene *)(this + 1);
  Li3DEngineScene::set((Li3DEngineScene *)(this + 1), 0);
  PCURL::getAsFileSystemString(this + 24, &v17);
  int v3 = PCString::ns_str(&v17);
  PCString::~PCString(&v17);
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v3))
  {
    double v4 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v5 = (uint64_t)v3;
    goto LABEL_7;
  }
  double v6 = (void *)[MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v7 = [(__CFString *)v3 rangeOfString:@"Motion.app"];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t result = -[__CFString stringByReplacingCharactersInRange:withString:](v3, "stringByReplacingCharactersInRange:withString:", 0, v7 + v8, [v6 bundlePath]);
  if (result)
  {
    uint64_t v5 = result;
    double v4 = (void *)MEMORY[0x1E4F1CB10];
LABEL_7:
    uint64_t result = (uint64_t)LoadSCNSceneFromFile((NSURL *)[v4 fileURLWithPath:v5]);
    if (result)
    {
      unint64_t v10 = (SCNScene *)result;
      objc_msgSend((id)objc_msgSend((id)result, "rootNode"), "getBoundingBoxMin:max:", &v17, v16);
      double v11 = v16[0];
      double v12 = *((float *)&v17.var0 + 1);
      double v13 = v16[1];
      double v14 = v18;
      double v15 = v16[2];
      *((double *)this + 26) = *(float *)&v17.var0;
      *((double *)this + 27) = v11;
      *((double *)this + 28) = v12;
      *((double *)this + 29) = v13;
      *((double *)this + 30) = v14;
      *((double *)this + 31) = v15;
      Li3DEngineScene::set(v2, v10);
      postProcessLoadedSCNScene((std::recursive_mutex *)v2);
      (*((void (**)(const __CFURL **))*this + 15))(this);
      return 1;
    }
  }
  return result;
}

void sub_1B7C4D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
}

void postProcessLoadedSCNScene(std::recursive_mutex *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::recursive_mutex::lock(a1);
  double v14 = (id *)a1;
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)a1);
  objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "setName:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29128], "UUID"), "UUIDString"));
  int v3 = objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodesPassingTest:", &__block_literal_global_94_0);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v20;
    uint64_t v6 = *MEMORY[0x1E4F3B348];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        double v9 = objc_msgSend((id)objc_msgSend(v8, "geometry"), "materials");
        uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v16;
          do
          {
            for (uint64_t j = 0; j != v10; ++j)
            {
              if (*(void *)v16 != v11) {
                objc_enumerationMutation(v9);
              }
              double v13 = *(void **)(*((void *)&v15 + 1) + 8 * j);
              [v13 setLitPerPixel:1];
              [v13 setLightingModelName:v6];
            }
            uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }
          while (v10);
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v4);
  }
  Li3DEngineScene::didLoad_NoLock(v14);
  std::recursive_mutex::unlock((std::recursive_mutex *)v14);
}

void sub_1B7C4D5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
}

__darwin_time_t OZ3DEngineSceneFileImpl::getModificationDate(const __CFURL **this)
{
  PCURL::getFilename(this + 24, &v13);
  int v2 = PCString::createUTF8Str(&v13);
  PCString::~PCString(&v13);
  int v3 = stat(v2, &v14);
  free(v2);
  if (v3) {
    __darwin_time_t tv_sec = 0;
  }
  else {
    __darwin_time_t tv_sec = v14.st_mtimespec.tv_sec;
  }
  CFURLRef v5 = this[22];
  if (v5)
  {
    uint64_t v6 = *(void *)v5;
    if (*((void *)this[22] + 1) != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        PCURL::getFilename((const __CFURL **)(v6 + v7), &v13);
        double v9 = PCString::createUTF8Str(&v13);
        PCString::~PCString(&v13);
        int v10 = stat(v9, &v14);
        free(v9);
        __darwin_time_t v11 = v14.st_mtimespec.tv_sec;
        if (v14.st_mtimespec.tv_sec <= tv_sec) {
          __darwin_time_t v11 = tv_sec;
        }
        if (!v10) {
          __darwin_time_t tv_sec = v11;
        }
        ++v8;
        uint64_t v6 = *(void *)this[22];
        v7 += 8;
      }
      while (v8 < (*((void *)this[22] + 1) - v6) >> 3);
    }
  }
  return tv_sec;
}

void sub_1B7C4D718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

__n128 OZ3DEngineSceneFileImpl::getBoundingBox@<Q0>(OZ3DEngineSceneFileImpl *this@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *((_OWORD *)this + 14);
  *(_OWORD *)a2 = *((_OWORD *)this + 13);
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *((__n128 *)this + 15);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t OZ3DEngineSceneFileImpl::updateAssociatedResourcesAvailable(OZ3DEngineSceneFileImpl *this)
{
  __p = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*((void *)this + 22))
  {
    uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v3 = **((void **)this + 22);
    if (*(void *)(*((void *)this + 22) + 8) != v3)
    {
      uint64_t v4 = (void *)v2;
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = (void *)MEMORY[0x1E4F1CB10];
        PCURL::getAsURLString((const __CFURL **)(v3 + v5), (PCURL *)&v12);
        unint64_t v8 = (void *)[v7 URLWithString:PCString::ns_str(&v12)];
        PCString::~PCString(&v12);
        LOBYTE(v12.var0) = 0;
        LOBYTE(v12.var0) = objc_msgSend(v4, "fileExistsAtPath:", objc_msgSend(v8, "path", v12.var0));
        std::vector<BOOL>::push_back((uint64_t)&__p, &v12);
        ++v6;
        uint64_t v3 = **((void **)this + 22);
        v5 += 8;
      }
      while (v6 < (*(void *)(*((void *)this + 22) + 8) - v3) >> 3);
    }
  }
  double v9 = (void **)*((void *)this + 23);
  if ((void *)v14 == v9[1])
  {
    if (std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(__p, 0, (uint64_t)__p + 8 * (v14 >> 6), v14 & 0x3F, *v9))
    {
      uint64_t v10 = 0;
      goto LABEL_10;
    }
    double v9 = (void **)*((void *)this + 23);
  }
  std::vector<BOOL>::operator=(v9, (uint64_t)&__p);
  uint64_t v10 = 1;
LABEL_10:
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_1B7C4D890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZ3DEngineSceneFileImplOBJ::~OZ3DEngineSceneFileImplOBJ(id *this)
{
  *this = &unk_1F1147E78;

  this[44] = 0;
  this[45] = 0;

  this[46] = 0;
  this[47] = 0;

  this[49] = 0;
  this[48] = 0;

  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl((OZ3DEngineSceneFileImpl *)this);
}

{
  uint64_t vars8;

  OZ3DEngineSceneFileImplOBJ::~OZ3DEngineSceneFileImplOBJ(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZ3DEngineSceneFileImplOBJ::dirty(id *this)
{
  this[44] = 0;
  this[45] = 0;

  this[46] = 0;
  this[47] = 0;

  this[49] = 0;
  this[48] = 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsLights(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsAnimation(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsLinkedTextures(OZ3DEngineSceneFileImplOBJ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplOBJ::hasNaturalDuration(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplOBJ *this)
{
  return 1;
}

NSString *OZ3DEngineSceneFileImplOBJ::willDoCollectOperation(id *this, NSString *a2)
{
  this[49] = a2;

  return a2;
}

uint64_t OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile(int a1, const __CFURL **this, int a3, const __CFURL **a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  PCURL::getAsFileSystemString(this, &v28);
  uint64_t v23 = PCString::ns_str(&v28);
  PCString::~PCString(&v28);
  PCURL::getAsFileSystemString(a4, &v28);
  uint64_t v7 = PCString::ns_str(&v28);
  PCString::~PCString(&v28);
  if (a3) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v23;
  }
  uint64_t v21 = [(__CFString *)v8 stringByDeletingLastPathComponent];
  v28.var0 = 0;
  double v9 = (void *)[NSString stringWithContentsOfFile:v23 encoding:1 error:&v28];
  if (!v9) {
    return 0;
  }
  uint64_t v10 = objc_msgSend(v9, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "newlineCharacterSet"));
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (!v11) {
    return 1;
  }
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = *(void *)v25;
LABEL_7:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v25 != v14) {
      objc_enumerationMutation(v10);
    }
    long long v16 = *(void **)(*((void *)&v24 + 1) + 8 * v15);
    int v17 = [v16 length];
    uint64_t v18 = [v16 rangeOfString:@"#"];
    if (v18 != 0x7FFFFFFFFFFFFFFFLL) {
      long long v16 = (void *)[v16 substringToIndex:v18];
    }
    long long v19 = objc_msgSend(v16, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet", v18));
    if ([v19 length])
    {
      uint64_t result = std::function<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(a5, v21, [(__CFString *)v23 lastPathComponent], v12 + (int)v15, v13, (uint64_t)v19);
      if (!result) {
        return result;
      }
    }
    v13 += v17 + 1;
    if (v11 == ++v15)
    {
      uint64_t v11 = [v10 countByEnumeratingWithState:&v24 objects:v29 count:16];
      v12 += v15;
      uint64_t result = 1;
      if (v11) {
        goto LABEL_7;
      }
      return result;
    }
  }
}

void sub_1B7C4DCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,PCString a22)
{
}

uint64_t std::function<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  int v9 = a5;
  int v10 = a4;
  uint64_t v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, uint64_t *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(OZ3DEngineSceneFileImplOBJ *this, int a2)
{
  int v2 = a2;
  v25[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v21 = a2;
  uint64_t v4 = (uint64_t *)*((void *)this + 22);
  uint64_t v6 = *v4;
  for (uint64_t i = v4[1]; i != v6; PCURL::~PCURL((PCURL *)(i - 8)))
    ;
  v4[1] = v6;
  PCURL::PCURL((PCURL *)&v20, (OZ3DEngineSceneFileImplOBJ *)((char *)this + 192));

  *((void *)this + 47) = objc_opt_new();
  *((void *)this + 48) = objc_opt_new();

  *((void *)this + 44) = objc_opt_new();
  *((void *)this + 45) = objc_opt_new();

  uint64_t v7 = objc_opt_new();
  *((void *)this + 46) = v7;
  uint64_t v19 = 0;
  v25[0] = &unk_1F1148220;
  v25[1] = this;
  v25[3] = v25;
  OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile(v7, &v20, 0, &v20, (uint64_t)v25);
  std::__function::__value_func<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__value_func[abi:ne180100](v25);
  long long v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = (PCURL **)*((void *)this + 22);
  int v9 = *v8;
  int v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      std::vector<PCURL>::push_back[abi:ne180100]((uint64_t *)&v16, v9);
      int v9 = (PCURL *)((char *)v9 + 8);
    }
    while (v9 != v10);
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    if (v16 != v17)
    {
      do
      {
        long long v24 = 0;
        int v13 = operator new(0x28uLL);
        void *v13 = &unk_1F11482B0;
        v13[1] = this;
        v13[2] = &v21;
        v13[3] = (char *)&v19 + 4;
        v13[4] = &v19;
        long long v24 = v13;
        OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile((int)v13, v11, 1, &v20, (uint64_t)v23);
        std::__function::__value_func<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__value_func[abi:ne180100](v23);
        ++v11;
      }
      while (v11 != v12);
      int v2 = v21;
    }
  }
  if (v2 && HIDWORD(v19) == v19 && (int)v19 >= 1)
  {
    PCURL::getAsFileSystemString(&v20, &v22);
    uint64_t v14 = PCString::ns_str(&v22);
    PCString::~PCString(&v22);
    [(__CFString *)v14 lastPathComponent];
  }
  v22.var0 = (__CFString *)&v16;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  PCURL::~PCURL((PCURL *)&v20);
  return 1;
}

void sub_1B7C4DF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, PCString a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a15.var0 = (__CFString *)&a9;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  PCURL::~PCURL((PCURL *)&a13);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImplUSDZ::OZ3DEngineSceneFileImplUSDZ(OZ3DEngineSceneFileImplUSDZ *this, OZ3DEngineSceneFile *a2, const PCURL *a3)
{
}

void sub_1B7C4E07C(_Unwind_Exception *a1)
{
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImplUSDZ::~OZ3DEngineSceneFileImplUSDZ(OZ3DEngineSceneFileImplUSDZ *this)
{
  *(void *)this = &unk_1F1147F20;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));

  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);
}

{
  uint64_t vars8;

  OZ3DEngineSceneFileImplUSDZ::~OZ3DEngineSceneFileImplUSDZ(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsLights(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsAnimation(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsLinkedTextures(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 0;
}

BOOL OZ3DEngineSceneFileImplUSDZ::hasNaturalDuration(OZ3DEngineSceneFileImplUSDZ *this)
{
  return fabs((*(double (**)(OZ3DEngineSceneFileImplUSDZ *))(*(void *)this + 96))(this)) >= 0.0000001;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::populateAssociatedURLs(OZ3DEngineSceneFileImplUSDZ *this)
{
  if (!*((void *)this + 22)) {
    operator new();
  }
  return 1;
}

void OZ3DEngineSceneFileImplSCN::~OZ3DEngineSceneFileImplSCN(OZ3DEngineSceneFileImplSCN *this)
{
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsLights(OZ3DEngineSceneFileImplSCN *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsAnimation(OZ3DEngineSceneFileImplSCN *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsLinkedTextures(OZ3DEngineSceneFileImplSCN *this)
{
  return 0;
}

BOOL OZ3DEngineSceneFileImplSCN::hasNaturalDuration(OZ3DEngineSceneFileImplSCN *this)
{
  return fabs((*(double (**)(OZ3DEngineSceneFileImplSCN *))(*(void *)this + 96))(this)) >= 0.0000001;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplSCN *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplSCN::populateAssociatedURLs(OZ3DEngineSceneFileImplSCN *this)
{
  if (!*((void *)this + 22)) {
    operator new();
  }
  return 1;
}

void OZ3DEngineSceneFileImplARFace::~OZ3DEngineSceneFileImplARFace(OZ3DEngineSceneFileImplARFace *this)
{
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZ3DEngineSceneFileImplARFace::setSCNScenePointerFromFile(OZ3DEngineSceneFileImplARFace *this)
{
  uint64_t v1 = (OZ3DEngineSceneFileImplARFace *)((char *)this + 8);
  Li3DEngineScene::set((OZ3DEngineSceneFileImplARFace *)((char *)this + 8), 0);
  int v2 = (SCNScene *)objc_alloc_init(MEMORY[0x1E4F3B268]);
  id v3 = objc_alloc_init(MEMORY[0x1E4F3B228]);
  [(SCNNode *)[(SCNScene *)v2 rootNode] addChildNode:v3];

  if (v2)
  {
    Li3DEngineScene::set(v1, v2);
    postProcessLoadedSCNScene((std::recursive_mutex *)v1);
  }
  return v2 != 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsLights(OZ3DEngineSceneFileImplARFace *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsAnimation(OZ3DEngineSceneFileImplARFace *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsLinkedTextures(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

double OZ3DEngineSceneFileImplARFace::getOriginalFileDurationInSeconds(OZ3DEngineSceneFileImplARFace *this)
{
  return -1.0;
}

uint64_t OZ3DEngineSceneFileImplARFace::hasNaturalDuration(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::populateAssociatedURLs(OZ3DEngineSceneFileImplARFace *this)
{
  if (!*((void *)this + 22)) {
    operator new();
  }
  return 1;
}

PCMutex *OZ3DEngineSceneFileImplUSDZ::getBoundingBox@<X0>(PCMutex *this@<X0>, CMTime *a2@<X1>, double *a3@<X8>)
{
  id v3 = this;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  if (this[4]._Mutex.__opaque[52] || this[4]._Mutex.__opaque[53])
  {
    CMTime time = *a2;
    double Seconds = CMTimeGetSeconds(&time);
    v183 = (PCMutex *)((char *)v3 + 368);
    PCMutex::lock((PCMutex *)((char *)v3 + 368));
    char v184 = 1;
    int v6 = (int)(Seconds / 0.0166666667);
    int v182 = v6;
    uint64_t v7 = *(char **)v3[6]._Mutex.__opaque;
    if (!v7) {
      goto LABEL_13;
    }
    opaque = v3[6]._Mutex.__opaque;
    do
    {
      int v9 = *((_DWORD *)v7 + 8);
      BOOL v10 = v9 < v6;
      if (v9 >= v6) {
        uint64_t v11 = (char **)v7;
      }
      else {
        uint64_t v11 = (char **)(v7 + 8);
      }
      if (!v10) {
        opaque = v7;
      }
      uint64_t v7 = *v11;
    }
    while (*v11);
    if (opaque != v3[6]._Mutex.__opaque && *((_DWORD *)opaque + 8) <= v6)
    {
      long long v151 = *(_OWORD *)(opaque + 56);
      *(_OWORD *)a3 = *(_OWORD *)(opaque + 40);
      *((_OWORD *)a3 + 1) = v151;
      *((_OWORD *)a3 + 2) = *(_OWORD *)(opaque + 72);
      return (PCMutex *)PCMutex::unlock((PCMutex *)((char *)v3 + 368));
    }
    else
    {
LABEL_13:
      memset(v181, 0, sizeof(v181));
      long long v180 = 0u;
      long long v179 = 0u;
      long long v178 = 0u;
      long long v177 = 0u;
      long long v176 = 0u;
      long long v175 = 0u;
      double v174 = Seconds;
      int32x4_t v172 = vdupq_n_s32(0xF149F2CA);
      int32x4_t v173 = vdupq_n_s32(0x7149F2CAu);
      v156 = v3;
      v154 = a3;
      if (v3[4]._Mutex.__opaque[52])
      {
        *(void *)&long long v175 = objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "childObjectsOfClass:", objc_opt_class()), "objectAtIndexedSubscript:", 0);
        unint64_t v12 = objc_msgSend((id)objc_msgSend((id)v175, "jointBindTransforms"), "elementCount");
        *((void *)&v175 + 1) = [(id)v175 jointPaths];
        std::vector<simd_float4x4>::resize((uint64_t)&v176, v12);
        int v13 = (void *)[(id)v175 jointBindTransforms];
        [v13 getFloat4x4Array:(void)v176 maxCount:v12];
        uint64_t v14 = (_OWORD *)MEMORY[0x1E4F149A0];
        float32x4_t v159 = *(float32x4_t *)(MEMORY[0x1E4F149A0] + 16);
        float32x4_t v160 = *(float32x4_t *)MEMORY[0x1E4F149A0];
        float32x4_t v157 = *(float32x4_t *)(MEMORY[0x1E4F149A0] + 48);
        float32x4_t v158 = *(float32x4_t *)(MEMORY[0x1E4F149A0] + 32);
        for (uint64_t i = (void *)v175; i; uint64_t i = (void *)[i parent])
        {
          long long v16 = (void *)[i transform];
          if (v16)
          {
            [v16 localTransformAtTime:Seconds];
            unint64_t v21 = 0;
            float32x4_t v188 = v160;
            float32x4_t v189 = v159;
            float32x4_t v190 = v158;
            float32x4_t v191 = v157;
            do
            {
              v207[v21 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v21 * 4))), v18, *(float32x2_t *)&v188.f32[v21], 1), v19, *(float32x4_t *)((char *)&v188 + v21 * 4), 2), v20, *(float32x4_t *)((char *)&v188 + v21 * 4), 3);
              v21 += 4;
            }
            while (v21 != 16);
            float32x4_t v159 = (float32x4_t)v207[1];
            float32x4_t v160 = (float32x4_t)v207[0];
            float32x4_t v157 = (float32x4_t)v207[3];
            float32x4_t v158 = (float32x4_t)v207[2];
          }
        }
        for (unint64_t j = 0; j < objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "animations"), "count"); ++j)
        {
          objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "animations"), "objectAtIndexedSubscript:", j);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            unint64_t v155 = j;
            uint64_t v23 = objc_msgSend((id)objc_msgSend(v156[5]._vptr$PCMutex, "animations"), "objectAtIndexedSubscript:", j);
            if (v23)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                *(void *)&long long v179 = [v23 jointPaths];
                unint64_t v24 = [(id)v179 count];
                long long v25 = (void *)[v23 translations];
                long long v26 = (void *)[v23 rotations];
                long long v27 = (void *)[v23 scales];
                _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(v171, v24);
                std::vector<simd_quatd>::vector(v170, v24);
                _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(__p, v24);
                [v27 getDouble3Array:v171[0] maxCount:v24 atTime:Seconds];
                [v26 getDoubleQuaternionArray:v170[0] maxCount:v24 atTime:Seconds];
                [v25 getDouble3Array:__p[0] maxCount:v24 atTime:Seconds];
                std::vector<simd_float4x4>::resize((uint64_t)&v179 + 8, v24);
                uint64_t v29 = (float64x2_t *)MEMORY[0x1E4F14990];
                if (v24)
                {
                  for (uint64_t k = 0; k != v24; ++k)
                  {
                    uint64_t v31 = 0;
                    uint64_t v32 = (unint64_t *)((char *)v171[0] + 32 * k);
                    int v33 = (float64x2_t *)((char *)v170[0] + 32 * k);
                    float64x2_t v35 = *v33;
                    float64x2_t v34 = v33[1];
                    double v36 = vmuld_n_f64(v35.f64[0], v35.f64[0]);
                    double v37 = vmuld_lane_f64(v35.f64[1], v35, 1);
                    double v38 = vmuld_n_f64(v34.f64[0], v34.f64[0]);
                    double v39 = vmuld_lane_f64(v34.f64[1], v34, 1);
                    v44.f64[0] = v39 + v36 - v37 - v38;
                    double v40 = vmuld_lane_f64(v35.f64[0], v35, 1);
                    double v41 = vmuld_lane_f64(v34.f64[0], v34, 1);
                    double v42 = vmuld_n_f64(v33->f64[0], v34.f64[0]);
                    double v43 = vmuld_lane_f64(v33->f64[1], v34, 1);
                    v44.f64[1] = v40 + v41 + v40 + v41;
                    v45.f64[1] = 0.0;
                    v45.f64[0] = v42 - v43 + v42 - v43;
                    v47.f64[0] = v40 - v41 + v40 - v41;
                    double v46 = vmuld_lane_f64(v34.f64[0], *v33, 1);
                    v34.f64[0] = vmuld_lane_f64(v33->f64[0], v34, 1);
                    v47.f64[1] = v39 + v37 - v38 - v36;
                    v48.f64[1] = 0.0;
                    v48.f64[0] = v46 + v34.f64[0] + v46 + v34.f64[0];
                    v49.f64[0] = v42 + v43 + v42 + v43;
                    v49.f64[1] = v46 - v34.f64[0] + v46 - v34.f64[0];
                    v50.f64[1] = 0.0;
                    v50.f64[0] = v38 + v39 - v36 - v37;
                    *(void *)&long long v51 = 0;
                    *((void *)&v51 + 1) = v32[1];
                    *(void *)&v28.f64[0] = v32[2];
                    float64x2_t v53 = *v29;
                    float64x2_t v52 = v29[1];
                    float64x2_t v55 = v29[2];
                    float64x2_t v54 = v29[3];
                    float64x2_t v57 = v29[4];
                    float64x2_t v56 = v29[5];
                    v58 = (float64x2_t *)((char *)__p[0] + 32 * k);
                    float64x2_t v60 = *v58;
                    float64x2_t v59 = v58[1];
                    *(_OWORD *)v186 = *v32;
                    v187[0] = 0u;
                    v187[1] = v51;
                    memset(&v187[2], 0, 32);
                    v187[4] = v28;
                    v187[5] = 0u;
                    v187[6] = xmmword_1B7E733E0;
                    do
                    {
                      float64x2_t v62 = *(float64x2_t *)&v186[v31];
                      float64x2_t v61 = *(float64x2_t *)&v186[v31 + 2];
                      float64x2_t v28 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v48, v62, 1), v50, v61.f64[0]), (float64x2_t)xmmword_1B7E733E0, v61, 1);
                      v63 = (float64x2_t *)((char *)&v188 + v31 * 8);
                      float64x2_t *v63 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v62.f64[0]), v47, v62, 1), v49, v61.f64[0]), (float64x2_t)0, v61, 1);
                      v63[1] = v28;
                      v31 += 4;
                    }
                    while (v31 != 16);
                    uint64_t v64 = 0;
                    memset(v207, 0, sizeof(v207));
                    v59.f64[1] = 1.0;
                    do
                    {
                      float64x2_t v66 = *(float64x2_t *)((char *)&v188 + v64 * 16);
                      float64x2_t v65 = *(float64x2_t *)((char *)&v188 + v64 * 16 + 16);
                      v67 = (float64x2_t *)&v207[v64];
                      float64x2_t *v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v66.f64[0]), v55, v66, 1), v57, v65.f64[0]), v60, v65, 1);
                      v67[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v66.f64[0]), v54, v66, 1), v56, v65.f64[0]), v59, v65, 1);
                      v64 += 2;
                    }
                    while (v64 != 8);
                    for (uint64_t m = 0; m != 4; ++m)
                      v192[m] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v207[2 * m]), (float64x2_t)v207[2 * m + 1]);
                    long long v69 = v192[1];
                    long long v70 = v192[2];
                    long long v71 = v192[3];
                    v72 = (_OWORD *)(*((void *)&v179 + 1) + (k << 6));
                    _OWORD *v72 = v192[0];
                    v72[1] = v69;
                    v72[2] = v70;
                    v72[3] = v71;
                  }
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v170[0])
                {
                  v170[1] = v170[0];
                  operator delete(v170[0]);
                }
                if (v171[0])
                {
                  v171[1] = v171[0];
                  operator delete(v171[0]);
                }
              }
            }
            uint64_t v74 = *((void *)&v179 + 1);
            uint64_t v73 = v180;
            v75 = (void *)v179;
            unint64_t v76 = (uint64_t)(v180 - *((void *)&v179 + 1)) >> 6;
            std::vector<simd_float4x4>::resize((uint64_t)v181, v76);
            v186[1] = 0;
            v186[0] = 0;
            *(void *)&v187[0] = 0;
            if (v73 == v74)
            {
              v82 = 0;
              v92 = 0;
              uint64_t v96 = 0;
            }
            else
            {
              uint64_t v77 = 0;
              if (v76 <= 1) {
                uint64_t v78 = 1;
              }
              else {
                uint64_t v78 = v76;
              }
              do
              {
                uint64_t v79 = objc_msgSend((id)objc_msgSend(v75, "objectAtIndexedSubscript:", v77), "stringByDeletingLastPathComponent");
                uint64_t v80 = 0;
                while (v77 == v80
                     || (objc_msgSend((id)objc_msgSend(v75, "objectAtIndexedSubscript:", v80), "isEqualToString:", v79) & 1) == 0)
                {
                  if (v78 == ++v80)
                  {
                    LODWORD(v80) = -1;
                    break;
                  }
                }
                v81 = (char *)v186[1];
                if (v186[1] >= (void *)*(void *)&v187[0])
                {
                  v83 = (char *)v186[0];
                  unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v186[1] - (char *)v186[0]) >> 2);
                  unint64_t v85 = v84 + 1;
                  if (v84 + 1 > 0x1555555555555555) {
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(*(void *)&v187[0] - (unint64_t)v186[0]) >> 2) > v85) {
                    unint64_t v85 = 0x5555555555555556 * ((uint64_t)(*(void *)&v187[0] - (unint64_t)v186[0]) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v187[0] - (unint64_t)v186[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v86 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v86 = v85;
                  }
                  if (v86)
                  {
                    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>((uint64_t)v187, v86);
                    v81 = (char *)v186[1];
                    v83 = (char *)v186[0];
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = &v87[12 * v84];
                  *(_DWORD *)v88 = v77;
                  *((_DWORD *)v88 + 1) = v80;
                  *((_DWORD *)v88 + 2) = 0;
                  v89 = v88;
                  if (v81 != v83)
                  {
                    do
                    {
                      uint64_t v90 = *(void *)(v81 - 12);
                      v81 -= 12;
                      int v91 = *((_DWORD *)v81 + 2);
                      *(void *)(v89 - 12) = v90;
                      v89 -= 12;
                      *((_DWORD *)v89 + 2) = v91;
                    }
                    while (v81 != v83);
                    v83 = (char *)v186[0];
                  }
                  v82 = (unsigned int *)(v88 + 12);
                  v186[0] = v89;
                  v186[1] = v88 + 12;
                  *(void *)&v187[0] = &v87[12 * v86];
                  if (v83) {
                    operator delete(v83);
                  }
                }
                else
                {
                  *(_DWORD *)v186[1] = v77;
                  *((_DWORD *)v81 + 1) = v80;
                  v82 = (unsigned int *)(v81 + 12);
                  *((_DWORD *)v81 + 2) = 0;
                }
                v186[1] = v82;
                ++v77;
              }
              while (v77 != v78);
              v92 = (unsigned int *)v186[0];
              v93 = (unsigned int *)v186[0];
              if (v186[0] == v82)
              {
                uint64_t v96 = 0;
                v92 = v82;
              }
              else
              {
                do
                {
                  v93[2] = 0;
                  uint64_t v94 = v93[1];
                  if ((v94 & 0x80000000) == 0)
                  {
                    unsigned int v95 = 0;
                    do
                    {
                      LODWORD(v94) = v92[3 * v94 + 1];
                      ++v95;
                    }
                    while ((v94 & 0x80000000) == 0);
                    v93[2] = v95;
                  }
                  v93 += 3;
                }
                while (v93 != v82);
                uint64_t v96 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v82 - v92));
              }
            }
            std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>((uint64_t)v92, (unint64_t)v82, v96, 1);
            v97 = (int *)v186[0];
            v98 = (int *)v186[1];
            if (v186[0] != v186[1])
            {
              do
              {
                if (v97[2] < 1)
                {
                  uint64_t v115 = *v97;
                  v116 = (long long *)(*((void *)&v179 + 1) + (v115 << 6));
                  v117 = (char *)v181[0] + 64 * v115;
                  long long v118 = *v116;
                  long long v119 = v116[1];
                  long long v120 = v116[3];
                  v117[2] = v116[2];
                  v117[3] = v120;
                  _OWORD *v117 = v118;
                  v117[1] = v119;
                }
                else
                {
                  unint64_t v99 = 0;
                  uint64_t v100 = *v97;
                  v101 = (char *)v181[0];
                  v102 = (float32x4_t *)((char *)v181[0] + 64 * (uint64_t)v97[1]);
                  float32x4_t v103 = *v102;
                  float32x4_t v104 = v102[1];
                  float32x4_t v105 = v102[2];
                  float32x4_t v106 = v102[3];
                  v107 = (float32x4_t *)(*((void *)&v179 + 1) + (v100 << 6));
                  float32x4_t v108 = v107[1];
                  float32x4_t v109 = v107[2];
                  float32x4_t v110 = v107[3];
                  float32x4_t v188 = *v107;
                  float32x4_t v189 = v108;
                  float32x4_t v190 = v109;
                  float32x4_t v191 = v110;
                  do
                  {
                    v207[v99 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v103, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v99 * 4))), v104, *(float32x2_t *)&v188.f32[v99], 1), v105, *(float32x4_t *)((char *)&v188 + v99 * 4), 2), v106, *(float32x4_t *)((char *)&v188 + v99 * 4), 3);
                    v99 += 4;
                  }
                  while (v99 != 16);
                  long long v111 = v207[1];
                  long long v112 = v207[2];
                  long long v113 = v207[3];
                  v114 = &v101[64 * v100];
                  *(_OWORD *)v114 = v207[0];
                  *((_OWORD *)v114 + 1) = v111;
                  *((_OWORD *)v114 + 2) = v112;
                  *((_OWORD *)v114 + 3) = v113;
                }
                v97 += 3;
              }
              while (v97 != v98);
              v97 = (int *)v186[0];
            }
            if (v97)
            {
              v186[1] = v97;
              operator delete(v97);
            }
            v121 = (char *)v181[0];
            if (v181[1] != v181[0])
            {
              unint64_t v122 = 0;
              do
              {
                unint64_t v123 = 0;
                v124 = (float32x4_t *)&v121[64 * v122];
                float32x4_t v125 = v124[1];
                float32x4_t v126 = v124[2];
                float32x4_t v127 = v124[3];
                float32x4_t v188 = *v124;
                float32x4_t v189 = v125;
                float32x4_t v190 = v126;
                float32x4_t v191 = v127;
                do
                {
                  v207[v123 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v160, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v123 * 4))), v159, *(float32x2_t *)&v188.f32[v123], 1), v158, *(float32x4_t *)((char *)&v188 + v123 * 4), 2), v157, *(float32x4_t *)((char *)&v188 + v123 * 4), 3);
                  v123 += 4;
                }
                while (v123 != 16);
                float32x4_t v128 = (float32x4_t)v207[1];
                float32x4_t v129 = (float32x4_t)v207[2];
                float32x4_t v130 = (float32x4_t)v207[3];
                float32x4_t *v124 = (float32x4_t)v207[0];
                v124[1] = v128;
                v124[2] = v129;
                v124[3] = v130;
                ++v122;
                v121 = (char *)v181[0];
              }
              while (v122 < ((char *)v181[1] - (char *)v181[0]) >> 6);
            }
            std::vector<simd_float4x4>::__assign_with_size[abi:ne180100]<simd_float4x4*,simd_float4x4*>((char *)&v177 + 8, (char *)v176, *((uint64_t *)&v176 + 1), (uint64_t)(*((void *)&v176 + 1) - v176) >> 6);
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            v131 = v156[5]._vptr$PCMutex;
            uint64_t v132 = [v131 countByEnumeratingWithState:&v165 objects:v206 count:16];
            unint64_t j = v155;
            if (v132)
            {
              uint64_t v133 = *(void *)v166;
              do
              {
                for (uint64_t n = 0; n != v132; ++n)
                {
                  if (*(void *)v166 != v133) {
                    objc_enumerationMutation(v131);
                  }
                  v135 = *(void **)(*((void *)&v165 + 1) + 8 * n);
                  long long v136 = v14[1];
                  *(_OWORD *)((char *)v207 + 15) = *v14;
                  *(_OWORD *)((char *)&v207[1] + 15) = v136;
                  long long v137 = v14[3];
                  *(_OWORD *)((char *)&v207[2] + 15) = v14[2];
                  *(_OWORD *)((char *)&v207[3] + 15) = v137;
                  char v200 = 1;
                  long long v203 = v207[2];
                  *(_OWORD *)v204 = v207[3];
                  *(_OWORD *)&v204[15] = v137;
                  long long v201 = v207[0];
                  long long v202 = v207[1];
                  v205 = &v174;
                  getBounds(v135, (uint64_t)&v200, (long long *)v172.i8);
                }
                uint64_t v132 = [v131 countByEnumeratingWithState:&v165 objects:v206 count:16];
              }
              while (v132);
            }
          }
          id v3 = v156;
        }
      }
      else if (v3[4]._Mutex.__opaque[53])
      {
        long long v163 = 0u;
        long long v164 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        v138 = v3[5]._vptr$PCMutex;
        uint64_t v139 = [v138 countByEnumeratingWithState:&v161 objects:v199 count:16];
        if (v139)
        {
          uint64_t v140 = *(void *)v162;
          v141 = (_OWORD *)MEMORY[0x1E4F149A0];
          do
          {
            for (iuint64_t i = 0; ii != v139; ++ii)
            {
              if (*(void *)v162 != v140) {
                objc_enumerationMutation(v138);
              }
              v143 = *(void **)(*((void *)&v161 + 1) + 8 * ii);
              long long v144 = v141[1];
              *(_OWORD *)((char *)v207 + 15) = *v141;
              *(_OWORD *)((char *)&v207[1] + 15) = v144;
              long long v145 = v141[3];
              *(_OWORD *)((char *)&v207[2] + 15) = v141[2];
              *(_OWORD *)((char *)&v207[3] + 15) = v145;
              char v193 = 0;
              long long v196 = v207[2];
              *(_OWORD *)v197 = v207[3];
              *(_OWORD *)&v197[15] = v145;
              long long v194 = v207[0];
              long long v195 = v207[1];
              v198 = &v174;
              getBounds(v143, (uint64_t)&v193, (long long *)v172.i8);
            }
            uint64_t v139 = [v138 countByEnumeratingWithState:&v161 objects:v199 count:16];
            id v3 = v156;
          }
          while (v139);
        }
      }
      uint64_t v146 = *(uint64_t *)((char *)v173.i64 + 4);
      uint64_t v147 = v172.i64[0];
      float v148 = *(float *)v173.i32;
      float v149 = *(float *)&v172.i32[2];
      *(void *)&v207[0] = &v182;
      v150 = (double *)std::__tree<std::__value_type<int,PCBox<double>>,std::__map_value_compare<int,std::__value_type<int,PCBox<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCBox<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v3[6]._Mutex, &v182, (uint64_t)&std::piecewise_construct, (_DWORD **)v207);
      v150[5] = v148;
      v150[6] = *(float *)&v147;
      v150[7] = *(float *)&v146;
      v150[8] = *((float *)&v147 + 1);
      v150[9] = *((float *)&v146 + 1);
      v150[10] = v149;
      if (v181[0])
      {
        v181[1] = v181[0];
        operator delete(v181[0]);
      }
      if (*((void *)&v179 + 1))
      {
        *(void *)&long long v180 = *((void *)&v179 + 1);
        operator delete(*((void **)&v179 + 1));
      }
      if (*((void *)&v177 + 1))
      {
        *(void *)&long long v178 = *((void *)&v177 + 1);
        operator delete(*((void **)&v177 + 1));
      }
      if ((void)v176)
      {
        *((void *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      this = v183;
      if (v183 && v184) {
        this = (PCMutex *)PCMutex::unlock(v183);
      }
      double *v154 = v148;
      v154[1] = *(float *)&v147;
      v154[2] = *(float *)&v146;
      v154[3] = *((float *)&v147 + 1);
      v154[4] = *((float *)&v146 + 1);
      v154[5] = v149;
    }
  }
  else
  {
    long long v152 = *(_OWORD *)&this[3]._Mutex.__sig;
    long long v153 = *(_OWORD *)&this[3]._Mutex.__opaque[8];
    *(_OWORD *)a3 = *(_OWORD *)&this[2]._Mutex.__opaque[48];
    *((_OWORD *)a3 + 1) = v152;
    *((_OWORD *)a3 + 2) = v153;
  }
  return this;
}

void sub_1B7C4F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void std::vector<simd_float4x4>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<simd_float4x4>::__append((void **)a1, a2 - v2);
  }
}

void *getBounds(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  int v6 = (void *)[a1 transform];
  if (v6)
  {
    [v6 localTransformAtTime:**(double **)(a2 + 80)];
    uint64_t v7 = 0;
    float32x4_t v8 = *(float32x4_t *)(a2 + 16);
    float32x4_t v9 = *(float32x4_t *)(a2 + 32);
    float32x4_t v10 = *(float32x4_t *)(a2 + 48);
    float32x4_t v11 = *(float32x4_t *)(a2 + 64);
    v158.columns[0] = v12;
    v158.columns[1] = v13;
    v158.columns[2] = v14;
    v158.columns[3] = v15;
    do
    {
      *(float32x4_t *)((char *)&v153 + v7 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)&v158.columns[v7])), v9, *(float32x2_t *)v158.columns[v7].f32, 1), v10, (float32x4_t)v158.columns[v7], 2), v11, (float32x4_t)v158.columns[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    float32x4_t v16 = v154;
    float32x4_t v17 = v155;
    float32x4_t v18 = v156;
    *(float32x4_t *)(a2 + 16) = v153;
    *(float32x4_t *)(a2 + 32) = v16;
    *(float32x4_t *)(a2 + 48) = v17;
    *(float32x4_t *)(a2 + 64) = v18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v19 = [a1 vertexCount];
    float32x4_t v20 = (void *)[a1 vertexBuffers];
    unint64_t v21 = (void *)[a1 vertexDescriptor];
    uint64_t v22 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v20, "objectAtIndexedSubscript:", objc_msgSend((id)objc_msgSend(v21, "attributeNamed:", *MEMORY[0x1E4F35B90]), "bufferIndex")), "map"), "bytes");
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEEC2Em(__p, v19);
    if (v19)
    {
      uint64_t v23 = 0;
      int32x4_t v24 = vdupq_n_s32(0xF149F2CA);
      int32x4_t v25 = vdupq_n_s32(0x7149F2CAu);
      int32x4_t v129 = v25;
      v25.i32[0] = 1.0;
      do
      {
        int v26 = 0;
        uint64_t v27 = v22 + 12 * v23;
        *(void *)&long long v28 = *(void *)v27;
        DWORD2(v28) = *(_DWORD *)(v27 + 8);
        HIDWORD(v28) = 1.0;
        int32x4_t v29 = v129;
        do
        {
          __int32 v30 = v29.i32[3];
          int32x4_t v31 = v24;
          long long v144 = v28;
          uint64_t v32 = (float *)((unint64_t)&v146 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          float v33 = *(float *)((unint64_t)&v144 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          float64x2_t v34 = (float *)((unint64_t)&v145 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          int32x4_t v145 = v29;
          float v35 = *v34;
          if (*v34 >= v33) {
            float v35 = v33;
          }
          *float64x2_t v34 = v35;
          int32x4_t v29 = v145;
          v29.i32[3] = v30;
          int32x4_t v146 = v31;
          float v36 = *v32;
          if (v33 >= *v32) {
            float v36 = v33;
          }
          *uint64_t v32 = v36;
          int32x4_t v24 = v146;
          v24.i32[3] = v31.i32[3];
          ++v26;
        }
        while (v26 != 3);
        int32x4_t v129 = v29;
        *((_OWORD *)__p[0] + v23++) = v28;
      }
      while (v23 != v19);
    }
    else
    {
      int32x4_t v25 = vdupq_n_s32(0x7149F2CAu);
      int32x4_t v129 = v25;
      int32x4_t v24 = vdupq_n_s32(0xF149F2CA);
    }
    int32x4_t v126 = v24;
    double v37 = objc_msgSend(a1, "componentConformingToProtocol:", &unk_1F122C438, *(double *)v25.i64);
    if (!v37) {
      goto LABEL_36;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_36;
    }
    float32x4_t v128 = (void *)[v37 jointPaths];
    if (!v128 || ![v128 count])
    {
      double v40 = (void *)[v37 skeleton];
      if (v40) {
        float32x4_t v128 = (void *)[v40 jointPaths];
      }
    }
    [v37 geometryBindTransform];
    for (uint64_t i = 0; i != 4; ++i)
      v158.columns[i] = (simd_float4)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v153 + 2 * i)), *((float64x2_t *)&v153 + 2 * i + 1));
    if (v128 && *(unsigned char *)a2)
    {
      float32x4_t v121 = (float32x4_t)v158.columns[1];
      float32x4_t v122 = (float32x4_t)v158.columns[0];
      float32x4_t v119 = (float32x4_t)v158.columns[3];
      float32x4_t v120 = (float32x4_t)v158.columns[2];
      double v42 = (void *)[a1 vertexAttributeDataForAttributeNamed:*MEMORY[0x1E4F35B68]];
      uint64_t v43 = [a1 vertexAttributeDataForAttributeNamed:*MEMORY[0x1E4F35B70]];
      float64x2_t v44 = (void *)v43;
      if (v42) {
        BOOL v45 = v43 == 0;
      }
      else {
        BOOL v45 = 1;
      }
      if (!v45)
      {
        __int16 v46 = [v42 format];
        uint64_t v127 = [v42 dataStart];
        uint64_t v125 = [v44 dataStart];
        std::vector<unsigned long>::vector(v152, [v128 count]);
        unint64_t v116 = v19;
        std::vector<unsigned long>::vector(v151, [v128 count]);
        unint64_t v47 = 0;
        uint64_t v48 = v46 & 0xFFF;
        while (v47 < [v128 count])
        {
          uint64_t StringInArray = findStringInArray((void *)[v128 objectAtIndexedSubscript:v47], *(void **)(*(void *)(a2 + 80) + 72));
          *((void *)v152[0] + v47) = StringInArray;
          if (*(void *)(*(void *)(a2 + 80) + 8))
          {
            uint64_t v50 = findStringInArray((void *)[v128 objectAtIndexedSubscript:v47], objc_msgSend(*(id *)(*(void *)(a2 + 80) + 8), "jointPaths"));
            *((void *)v151[0] + v47) = v50;
          }
          ++v47;
        }
        if (v116)
        {
          uint64_t v123 = 0;
          long long v118 = *(void **)(a2 + 80);
          v88 = (simd_float4x4 *)MEMORY[0x1E4F149A0];
          uint64_t v117 = v48;
          do
          {
            if (v48)
            {
              uint64_t v89 = 0;
              uint64_t v90 = v123 * v48;
              float32x4_t v91 = 0uLL;
              do
              {
                float32x4_t v130 = v91;
                unint64_t v92 = *(unsigned __int16 *)(v127 + 2 * (v89 + v90));
                unint64_t v93 = [v128 count];
                float32x4_t v91 = v130;
                if (v93 > v92 && *(float *)(v125 + 4 * (v89 + v90)) != 0.0)
                {
                  float v124 = *(float *)(v125 + 4 * (v89 + v90));
                  unint64_t v94 = *((void *)v151[0] + v92);
                  uint64_t v95 = v118[6];
                  uint64_t v96 = v118[7] - v95;
                  v97 = (simd_float4x4 *)(v95 + (v94 << 6));
                  v98 = (float32x4_t *)v88;
                  if (v94 >= v96 >> 6) {
                    unint64_t v99 = v88;
                  }
                  else {
                    unint64_t v99 = v97;
                  }
                  unint64_t v100 = *((void *)v152[0] + v92);
                  uint64_t v101 = v118[13];
                  unint64_t v102 = (v118[14] - v101) >> 6;
                  simd_float4x4 v162 = __invert_f4(*v99);
                  uint64_t v103 = 0;
                  simd_float4x4 v158 = v162;
                  do
                  {
                    *(float32x4_t *)((char *)&v153 + v103 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, COERCE_FLOAT(*(_OWORD *)&v158.columns[v103])), v121, *(float32x2_t *)v158.columns[v103].f32, 1), v120, (float32x4_t)v158.columns[v103], 2), v119, (float32x4_t)v158.columns[v103], 3);
                    ++v103;
                  }
                  while (v103 != 4);
                  float32x4_t v104 = (float32x4_t *)(v101 + (v100 << 6));
                  BOOL v105 = v100 >= v102;
                  v88 = (simd_float4x4 *)v98;
                  if (v105) {
                    float32x4_t v104 = v98;
                  }
                  float32x4_t v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v153, COERCE_FLOAT(*((_OWORD *)__p[0] + v123))), v154, *(float32x2_t *)((char *)__p[0] + 16 * v123), 1), v155, *((float32x4_t *)__p[0] + v123), 2), v156, *((float32x4_t *)__p[0] + v123), 3);
                  float32x4_t v91 = vaddq_f32(v130, vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v104, v106.f32[0]), v104[1], *(float32x2_t *)v106.f32, 1), v104[2], v106, 2), v104[3], v106, 3), v124));
                  uint64_t v48 = v117;
                }
                ++v89;
              }
              while (v89 != v48);
            }
            else
            {
              float32x4_t v91 = 0uLL;
            }
            for (int j = 0; j != 3; ++j)
            {
              float32x4_t v141 = v91;
              float32x4_t v108 = (float *)((unint64_t)&v143 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              float v109 = *(float *)((unint64_t)&v141 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              long long v143 = a3[1];
              float v110 = *v108;
              if (*v108 >= v109) {
                float v110 = v109;
              }
              *float32x4_t v108 = v110;
              long long v111 = (float *)((unint64_t)&v142 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              uint64_t v112 = v143;
              *((_DWORD *)a3 + 6) = DWORD2(v143);
              long long v113 = *a3;
              *((void *)a3 + 2) = v112;
              long long v142 = v113;
              float v114 = *v111;
              if (v109 >= *v111) {
                float v114 = v109;
              }
              *long long v111 = v114;
              uint64_t v115 = v142;
              *((_DWORD *)a3 + 2) = DWORD2(v142);
              *(void *)a3 = v115;
            }
            ++v123;
          }
          while (v123 != v116);
        }
        if (v151[0])
        {
          v151[1] = v151[0];
          operator delete(v151[0]);
        }
        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete(v152[0]);
        }
      }
    }
    else
    {
LABEL_36:
      int v51 = 0;
      float32x4_t v52 = *(float32x4_t *)(a2 + 16);
      float32x4_t v53 = *(float32x4_t *)(a2 + 32);
      LODWORD(v38) = v129.i32[1];
      LODWORD(v39) = v126.i32[1];
      float32x4_t v54 = *(float32x4_t *)(a2 + 48);
      long long v55 = *(_OWORD *)(a2 + 64);
      int32x4_t v56 = vdupq_n_s32(0xF149F2CA);
      int32x4_t v57 = vdupq_n_s32(0x7149F2CAu);
      do
      {
        int v58 = 0;
        float v59 = *(float *)v129.i32;
        if ((v51 & 1) == 0) {
          float v59 = *(float *)v126.i32;
        }
        if ((v51 & 2) != 0) {
          float v60 = *(float *)&v129.i32[1];
        }
        else {
          float v60 = *(float *)&v126.i32[1];
        }
        if ((v51 & 4) != 0) {
          float v61 = *(float *)&v129.i32[2];
        }
        else {
          float v61 = *(float *)&v126.i32[2];
        }
        float32x4_t v62 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v52, v59), v53, v60), v54, v61);
        do
        {
          __int32 v63 = v57.i32[3];
          int32x4_t v64 = v56;
          long long v138 = v55;
          float64x2_t v65 = (float *)((unint64_t)&v139 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          float v66 = *(float *)((unint64_t)&v138 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          float32x4_t v137 = v62;
          float v67 = v66 + *(float *)((unint64_t)&v137 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          int32x4_t v139 = v57;
          float v68 = *v65;
          if (*v65 >= v67) {
            float v68 = v67;
          }
          *float64x2_t v65 = v68;
          int32x4_t v69 = v139;
          int32x4_t v57 = v139;
          v57.i32[3] = v63;
          long long v70 = (float *)((unint64_t)&v140 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          int32x4_t v140 = v64;
          float v71 = *v70;
          if (v67 >= *v70) {
            float v71 = v67;
          }
          *long long v70 = v71;
          int32x4_t v72 = v140;
          int32x4_t v56 = v140;
          v56.i32[3] = v64.i32[3];
          ++v58;
        }
        while (v58 != 3);
        ++v51;
      }
      while (v51 != 8);
      int v73 = 0;
      long long v75 = *a3;
      long long v74 = a3[1];
      do
      {
        long long v134 = v74;
        unint64_t v76 = (float *)((unint64_t)&v131 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        float v77 = *(float *)((unint64_t)&v134 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        int32x4_t v133 = v69;
        if (*(float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) < v77) {
          float v77 = *(float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        }
        long long v136 = v38;
        *(float *)((unint64_t)&v136 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) = v77;
        long long v38 = v136;
        long long v132 = v75;
        float v78 = *(float *)((unint64_t)&v132 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        int32x4_t v131 = v72;
        if (v78 < *v76) {
          float v78 = *v76;
        }
        long long v135 = v39;
        *(float *)((unint64_t)&v135 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) = v78;
        long long v39 = v135;
        ++v73;
      }
      while (v73 != 3);
      *((_DWORD *)a3 + 2) = DWORD2(v135);
      *(void *)a3 = v39;
      *((_DWORD *)a3 + 6) = DWORD2(v38);
      *((void *)a3 + 2) = v38;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  uint64_t result = (void *)[a1 children];
  if (result)
  {
    uint64_t result = (void *)[result objects];
    uint64_t v80 = result;
    if (result)
    {
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t result = (void *)[result countByEnumeratingWithState:&v147 objects:v160 count:16];
      v81 = result;
      if (result)
      {
        uint64_t v82 = *(void *)v148;
        do
        {
          v83 = 0;
          do
          {
            if (*(void *)v148 != v82) {
              objc_enumerationMutation(v80);
            }
            uint64_t v84 = *(void *)(*((void *)&v147 + 1) + 8 * (void)v83);
            long long v85 = *(_OWORD *)(a2 + 48);
            v159[2] = *(_OWORD *)(a2 + 32);
            v159[3] = v85;
            long long v86 = *(_OWORD *)(a2 + 80);
            v159[4] = *(_OWORD *)(a2 + 64);
            v159[5] = v86;
            long long v87 = *(_OWORD *)(a2 + 16);
            v159[0] = *(_OWORD *)a2;
            v159[1] = v87;
            getBounds(v84, v159, a3);
            v83 = (char *)v83 + 1;
          }
          while (v81 != v83);
          uint64_t result = (void *)[v80 countByEnumeratingWithState:&v147 objects:v160 count:16];
          v81 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_1B7C4FA6C(_Unwind_Exception *a1)
{
  unint64_t v2 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void SceneInfo::~SceneInfo(SceneInfo *this)
{
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  id v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

uint64_t OZ3DEngineSceneFileImplUSDZ::postReadMedia(OZ3DEngineSceneFileImplUSDZ *this)
{
  uint64_t v2 = *((void *)this + 24);
  *((_WORD *)this + 178) = 0;
  uint64_t result = [objc_alloc(MEMORY[0x1E4F35BB0]) initWithURL:v2];
  *((void *)this + 45) = result;
  if (result)
  {
    uint64_t result = [(id)result count];
    if (result)
    {
      uint64_t v4 = (void *)[*((id *)this + 45) childObjectsOfClass:objc_opt_class()];
      if (v4)
      {
        if ([v4 count]) {
          *((unsigned char *)this + 356) = 1;
        }
      }
      uint64_t result = 1;
      *((unsigned char *)this + 357) = 1;
    }
  }
  return result;
}

BOOL ___ZL25postProcessLoadedSCNSceneP15Li3DEngineScene_block_invoke(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v10 + 8))
                {
                  int v111 = *(_DWORD *)(v10 + 8);
                  uint64_t v105 = *(void *)v10;
                  uint64_t v47 = *(void *)(a2 - 12);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 4);
                  *(void *)unint64_t v10 = v47;
                  *(_DWORD *)(a2 - 4) = v111;
                  *(void *)(a2 - 12) = v105;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(a2 - 12));
                break;
              case 4uLL:
                uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v10, v10 + 12, v10 + 24, a2 - 12);
                break;
              case 5uLL:
                uint64_t v48 = (uint64_t *)(v10 + 12);
                float64x2_t v49 = (uint64_t *)(v10 + 24);
                uint64_t v50 = (uint64_t *)(v10 + 36);
                uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v10, v10 + 12, v10 + 24, v10 + 36);
                if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v10 + 44))
                {
                  uint64_t v51 = *v50;
                  int v52 = *(_DWORD *)(v10 + 44);
                  int v53 = *(_DWORD *)(a2 - 4);
                  *uint64_t v50 = *(void *)(a2 - 12);
                  *(_DWORD *)(v10 + 44) = v53;
                  *(_DWORD *)(a2 - 4) = v52;
                  *(void *)(a2 - 12) = v51;
                  if (*(_DWORD *)(v10 + 44) < *(_DWORD *)(v10 + 32))
                  {
                    int v54 = *(_DWORD *)(v10 + 32);
                    uint64_t v55 = *v49;
                    *float64x2_t v49 = *v50;
                    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 44);
                    *uint64_t v50 = v55;
                    *(_DWORD *)(v10 + 44) = v54;
                    if (*(_DWORD *)(v10 + 32) < *(_DWORD *)(v10 + 20))
                    {
                      int v56 = *(_DWORD *)(v10 + 20);
                      uint64_t v57 = *v48;
                      *uint64_t v48 = *v49;
                      *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
                      *float64x2_t v49 = v57;
                      *(_DWORD *)(v10 + 32) = v56;
                      if (*(_DWORD *)(v10 + 20) < *(_DWORD *)(v10 + 8))
                      {
                        int v112 = *(_DWORD *)(v10 + 8);
                        uint64_t v106 = *(void *)v10;
                        *(void *)unint64_t v10 = *v48;
                        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
                        *uint64_t v48 = v106;
                        *(_DWORD *)(v10 + 20) = v112;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 287)
          {
            unint64_t v58 = v10 + 12;
            BOOL v60 = v10 == a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = v10;
                do
                {
                  int v63 = *(_DWORD *)(v62 + 20);
                  int v64 = *(_DWORD *)(v62 + 8);
                  unint64_t v62 = v58;
                  if (v63 < v64)
                  {
                    uint64_t v65 = *(void *)v58;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      uint64_t v67 = v10 + v66;
                      *(void *)(v67 + 12) = *(void *)(v10 + v66);
                      *(_DWORD *)(v67 + 20) = *(_DWORD *)(v10 + v66 + 8);
                      if (!v66) {
                        break;
                      }
                      v66 -= 12;
                      if (v63 >= *(_DWORD *)(v67 - 4))
                      {
                        uint64_t v68 = v10 + v66 + 12;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v68 = v10;
LABEL_85:
                    *(void *)uint64_t v68 = v65;
                    *(_DWORD *)(v68 + 8) = v63;
                  }
                  unint64_t v58 = v62 + 12;
                  v61 += 12;
                }
                while (v62 + 12 != a2);
              }
            }
            else if (!v60)
            {
              do
              {
                int v97 = *(_DWORD *)(v9 + 20);
                int v98 = *(_DWORD *)(v9 + 8);
                unint64_t v9 = v58;
                if (v97 < v98)
                {
                  uint64_t v99 = *(void *)v58;
                  do
                  {
                    unint64_t v100 = v58;
                    uint64_t v101 = *(void *)(v58 - 12);
                    v58 -= 12;
                    *(void *)unint64_t v100 = v101;
                    *(_DWORD *)(v100 + 8) = *(_DWORD *)(v100 - 4);
                  }
                  while (v97 < *(_DWORD *)(v100 - 16));
                  *(void *)unint64_t v58 = v99;
                  *(_DWORD *)(v58 + 8) = v97;
                }
                unint64_t v58 = v9 + 12;
              }
              while (v9 + 12 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v10 + 12 * v72;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    BOOL v74 = *(_DWORD *)(v10 + 12 * v72 + 8) < *(_DWORD *)(v73 + 20);
                    v73 += 12 * v74;
                    if (v74) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  int v75 = *(_DWORD *)(v10 + 12 * v71 + 8);
                  if (*(_DWORD *)(v73 + 8) >= v75)
                  {
                    uint64_t v76 = v10 + 12 * v71;
                    uint64_t v77 = *(void *)v76;
                    do
                    {
                      uint64_t result = v76;
                      uint64_t v76 = v73;
                      uint64_t v78 = *(void *)v73;
                      *(_DWORD *)(result + 8) = *(_DWORD *)(v76 + 8);
                      *(void *)uint64_t result = v78;
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t result = (2 * v72) | 1;
                      unint64_t v73 = v10 + 12 * result;
                      uint64_t v79 = 2 * v72 + 2;
                      if (v79 < (uint64_t)v12)
                      {
                        BOOL v74 = *(_DWORD *)(v10 + 12 * result + 8) < *(_DWORD *)(v73 + 20);
                        v73 += 12 * v74;
                        if (v74) {
                          uint64_t result = v79;
                        }
                      }
                      uint64_t v72 = result;
                    }
                    while (*(_DWORD *)(v73 + 8) >= v75);
                    *(void *)uint64_t v76 = v77;
                    *(_DWORD *)(v76 + 8) = v75;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              int64_t v80 = v11 / 0xCuLL;
              do
              {
                uint64_t v81 = 0;
                int v113 = *(_DWORD *)(v10 + 8);
                uint64_t v107 = *(void *)v10;
                unint64_t v82 = v10;
                do
                {
                  uint64_t v83 = v81 + 1;
                  unint64_t v84 = v82 + 12 * (v81 + 1);
                  uint64_t v85 = (2 * v81) | 1;
                  uint64_t v86 = 2 * v81 + 2;
                  if (v86 < v80)
                  {
                    int v87 = *(_DWORD *)(v82 + 12 * v83 + 8);
                    int v88 = *(_DWORD *)(v84 + 20);
                    v84 += 12 * (v87 < v88);
                    if (v87 < v88) {
                      uint64_t v85 = v86;
                    }
                  }
                  uint64_t v89 = *(void *)v84;
                  *(_DWORD *)(v82 + 8) = *(_DWORD *)(v84 + 8);
                  *(void *)unint64_t v82 = v89;
                  unint64_t v82 = v84;
                  uint64_t v81 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                a2 -= 12;
                if (v84 == a2)
                {
                  *(_DWORD *)(v84 + 8) = v113;
                  *(void *)unint64_t v84 = v107;
                }
                else
                {
                  uint64_t v90 = *(void *)a2;
                  *(_DWORD *)(v84 + 8) = *(_DWORD *)(a2 + 8);
                  *(void *)unint64_t v84 = v90;
                  *(_DWORD *)(a2 + 8) = v113;
                  *(void *)a2 = v107;
                  uint64_t v91 = v84 - v10 + 12;
                  if (v91 >= 13)
                  {
                    unint64_t v92 = (v91 / 0xCuLL - 2) >> 1;
                    int v93 = *(_DWORD *)(v84 + 8);
                    if (*(_DWORD *)(v10 + 12 * v92 + 8) < v93)
                    {
                      uint64_t v94 = *(void *)v84;
                      do
                      {
                        unint64_t v95 = v84;
                        unint64_t v84 = v10 + 12 * v92;
                        uint64_t v96 = *(void *)v84;
                        *(_DWORD *)(v95 + 8) = *(_DWORD *)(v84 + 8);
                        *(void *)unint64_t v95 = v96;
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v10 + 12 * v92 + 8) < v93);
                      *(void *)unint64_t v84 = v94;
                      *(_DWORD *)(v84 + 8) = v93;
                    }
                  }
                }
                BOOL v74 = v80-- <= 2;
              }
              while (!v74);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 12 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)v9, (uint64_t *)(v9 + 12 * (v12 >> 1)), (uint64_t *)(a2 - 12));
            uint64_t v15 = 3 * v13;
            float32x4_t v16 = (uint64_t *)(v9 + 12 * v13 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v9 + 12), v16, (uint64_t *)(a2 - 24));
            float32x4_t v17 = (uint64_t *)(v9 + 12 + 4 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v9 + 24), v17, (uint64_t *)(a2 - 36));
            uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v16, (uint64_t *)v14, v17);
            int v108 = *(_DWORD *)(v9 + 8);
            uint64_t v102 = *(void *)v9;
            int v18 = *(_DWORD *)(v14 + 8);
            *(void *)unint64_t v9 = *(void *)v14;
            *(_DWORD *)(v9 + 8) = v18;
            *(_DWORD *)(v14 + 8) = v108;
            *(void *)unint64_t v14 = v102;
          }
          else
          {
            uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v9 + 12 * (v12 >> 1)), (uint64_t *)v9, (uint64_t *)(a2 - 12));
          }
          --a3;
          if (a4) {
            break;
          }
          int v19 = *(_DWORD *)(v9 + 8);
          if (*(_DWORD *)(v9 - 4) < v19) {
            goto LABEL_13;
          }
          if (v19 >= *(_DWORD *)(a2 - 4))
          {
            unint64_t v37 = v9 + 12;
            do
            {
              unint64_t v10 = v37;
              if (v37 >= a2) {
                break;
              }
              int v38 = *(_DWORD *)(v37 + 8);
              v37 += 12;
            }
            while (v19 >= v38);
          }
          else
          {
            unint64_t v35 = v9;
            do
            {
              unint64_t v10 = v35 + 12;
              int v36 = *(_DWORD *)(v35 + 20);
              v35 += 12;
            }
            while (v19 >= v36);
          }
          unint64_t v39 = a2;
          if (v10 < a2)
          {
            unint64_t v40 = a2;
            do
            {
              unint64_t v39 = v40 - 12;
              int v41 = *(_DWORD *)(v40 - 4);
              v40 -= 12;
            }
            while (v19 < v41);
          }
          uint64_t v42 = *(void *)v9;
          while (v10 < v39)
          {
            int v110 = *(_DWORD *)(v10 + 8);
            uint64_t v104 = *(void *)v10;
            uint64_t v43 = *(void *)v39;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v39 + 8);
            *(void *)unint64_t v10 = v43;
            *(_DWORD *)(v39 + 8) = v110;
            *(void *)unint64_t v39 = v104;
            do
            {
              int v44 = *(_DWORD *)(v10 + 20);
              v10 += 12;
            }
            while (v19 >= v44);
            do
            {
              int v45 = *(_DWORD *)(v39 - 4);
              v39 -= 12;
            }
            while (v19 < v45);
          }
          BOOL v4 = v10 - 12 >= v9;
          BOOL v5 = v10 - 12 == v9;
          if (v10 - 12 != v9)
          {
            uint64_t v46 = *(void *)(v10 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
            *(void *)unint64_t v9 = v46;
          }
          a4 = 0;
          *(void *)(v10 - 12) = v42;
          *(_DWORD *)(v10 - 4) = v19;
        }
        int v19 = *(_DWORD *)(v9 + 8);
LABEL_13:
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)v9;
        do
        {
          int v22 = *(_DWORD *)(v9 + v20 + 20);
          v20 += 12;
        }
        while (v22 < v19);
        unint64_t v23 = v9 + v20;
        unint64_t v24 = a2;
        if (v20 == 12)
        {
          unint64_t v27 = a2;
          while (v23 < v27)
          {
            unint64_t v25 = v27 - 12;
            int v28 = *(_DWORD *)(v27 - 4);
            v27 -= 12;
            if (v28 < v19) {
              goto LABEL_23;
            }
          }
          unint64_t v25 = v27;
        }
        else
        {
          do
          {
            unint64_t v25 = v24 - 12;
            int v26 = *(_DWORD *)(v24 - 4);
            v24 -= 12;
          }
          while (v26 >= v19);
        }
LABEL_23:
        unint64_t v10 = v23;
        if (v23 < v25)
        {
          unint64_t v29 = v25;
          do
          {
            int v109 = *(_DWORD *)(v10 + 8);
            uint64_t v103 = *(void *)v10;
            uint64_t v30 = *(void *)v29;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v29 + 8);
            *(void *)unint64_t v10 = v30;
            *(_DWORD *)(v29 + 8) = v109;
            *(void *)unint64_t v29 = v103;
            do
            {
              int v31 = *(_DWORD *)(v10 + 20);
              v10 += 12;
            }
            while (v31 < v19);
            do
            {
              int v32 = *(_DWORD *)(v29 - 4);
              v29 -= 12;
            }
            while (v32 >= v19);
          }
          while (v10 < v29);
        }
        if (v10 - 12 != v9)
        {
          uint64_t v33 = *(void *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          *(void *)unint64_t v9 = v33;
        }
        *(void *)(v10 - 12) = v21;
        *(_DWORD *)(v10 - 4) = v19;
        if (v23 >= v25) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>(v9, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v9, v10 - 12);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v10, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 12;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  int v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v9 = *a2;
      int v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        int v11 = *((_DWORD *)result + 2);
        uint64_t v12 = *result;
        int v13 = *((_DWORD *)a2 + 2);
        *uint64_t result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      int v14 = *((_DWORD *)result + 2);
      uint64_t v15 = *result;
      int v16 = *((_DWORD *)a2 + 2);
      *uint64_t result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
      int v5 = *((_DWORD *)a2 + 2);
      uint64_t v6 = *a2;
      int v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      int v5 = *((_DWORD *)result + 2);
      uint64_t v6 = *result;
      int v7 = *((_DWORD *)a3 + 2);
      *uint64_t result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        uint64_t v7 = *(void *)a1;
        int v8 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(void *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      int v18 = (uint64_t *)(a1 + 12);
      int v19 = (uint64_t *)(a1 + 24);
      uint64_t v20 = (uint64_t *)(a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(a1, a1 + 12, a1 + 24, a1 + 36);
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 44))
      {
        int v21 = *(_DWORD *)(a1 + 44);
        uint64_t v22 = *v20;
        int v23 = *(_DWORD *)(a2 - 4);
        uint64_t *v20 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v23;
        *(void *)(a2 - 12) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        if (*(_DWORD *)(a1 + 44) < *(_DWORD *)(a1 + 32))
        {
          int v24 = *(_DWORD *)(a1 + 32);
          uint64_t v25 = *v19;
          *int v19 = *v20;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          uint64_t *v20 = v25;
          *(_DWORD *)(a1 + 44) = v24;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 20))
          {
            int v26 = *(_DWORD *)(a1 + 20);
            uint64_t v27 = *v18;
            uint64_t *v18 = *v19;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *int v19 = v27;
            *(_DWORD *)(a1 + 32) = v26;
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 8))
            {
              int v28 = *(_DWORD *)(a1 + 8);
              uint64_t v29 = *(void *)a1;
              *(void *)a1 = *v18;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              uint64_t *v18 = v29;
              *(_DWORD *)(a1 + 20) = v28;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v10 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 36) = *(void *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24) {
          break;
        }
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          uint64_t v17 = a1 + v15 + 36;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 12 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    int v9 = *(_DWORD *)(a3 + 8);
    uint64_t v10 = *(void *)a3;
    int v11 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(void *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      int v12 = *(_DWORD *)(a2 + 8);
      uint64_t v13 = *(void *)a2;
      int v14 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t findStringInArray(void *a1, void *a2)
{
  uint64_t v4 = 999999;
  if ([a2 count])
  {
    uint64_t v5 = 0;
    while ((objc_msgSend(a1, "isEqualToString:", objc_msgSend(a2, "objectAtIndexedSubscript:", v5)) & 1) == 0)
    {
      if (++v5 >= (unint64_t)[a2 count]) {
        return v4;
      }
    }
    return v5;
  }
  return v4;
}

void *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B7C509F8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B7C50A70(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<Li3DEngineObjectData>::shared_ptr[abi:ne180100]<Li3DEngineObjectData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7C50AF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<Li3DEngineObjectData *,std::shared_ptr<Li3DEngineObjectData>::__shared_ptr_default_delete<Li3DEngineObjectData,Li3DEngineObjectData>,std::allocator<Li3DEngineObjectData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<Li3DEngineObjectData *,std::shared_ptr<Li3DEngineObjectData>::__shared_ptr_default_delete<Li3DEngineObjectData,Li3DEngineObjectData>,std::allocator<Li3DEngineObjectData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::vector<PCURL>::__init_with_size[abi:ne180100]<PCURL*,PCURL*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCURL>,PCURL*,PCURL*,PCURL*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B7C50BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCURL>,PCURL*,PCURL*,PCURL*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      PCURL::PCURL((PCURL *)(a4 + v7), (const PCURL *)(a2 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B7C50C68(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      PCURL::~PCURL((PCURL *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__func()
{
}

void *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1148220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1148220;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, NSString **a2, uint64_t a3, unsigned int *a4, unsigned int *a5, id *a6)
{
  unint64_t v6 = *a2;
  unsigned int v7 = *a4;
  uint64_t v8 = *a5;
  id v9 = *a6;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = objc_msgSend(*a6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet"));
  if (![v11 count])
  {
    [v9 length];
    return 1;
  }
  int v12 = (void *)[v11 objectAtIndexedSubscript:0];
  uint64_t v13 = [v9 length];
  if (!v12) {
    return 1;
  }
  uint64_t v14 = v13;
  if (![v12 isEqualToString:@"mtllib"]) {
    return 1;
  }
  unint64_t v15 = [v11 count];
  if (v15 < 2) {
    return 0;
  }
  unint64_t v16 = v15;
  uint64_t v26 = v14;
  unsigned int v27 = v7;
  unint64_t v17 = v15 - 1;
  int v18 = &stru_1F119C770;
  unsigned int v19 = 2;
  unint64_t v20 = 1;
  do
  {
    int v21 = (__CFString *)-[__CFString stringByAppendingString:](v18, "stringByAppendingString:", [v11 objectAtIndexedSubscript:v20]);
    int v18 = v21;
    if (v17 > v20) {
      int v18 = (__CFString *)[(__CFString *)v21 stringByAppendingString:@" "];
    }
    unint64_t v20 = v19;
  }
  while (v16 > v19++);
  if (!v18) {
    return 0;
  }
  uint64_t result = [(__CFString *)v18 length];
  if (result)
  {
    int v24 = objc_msgSend((id)AbsoluteNSURL(&v18->isa, v6), "URLByStandardizingPath");
    objc_msgSend(*(id *)(v10 + 376), "setObject:forKeyedSubscript:", objc_msgSend(v24, "path"), v18);
    PCURL::PCURL((PCURL *)v28, v24);
    std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v28);
    objc_msgSend(*(id *)(v10 + 352), "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v27));
    uint64_t v25 = objc_opt_new();
    [v25 setLineByteOffset:v8];
    [v25 setNextLineByteOffset:v8 + v26 + 1];
    objc_msgSend(*(id *)(v10 + 360), "setObject:forKey:", v25, objc_msgSend(NSNumber, "numberWithUnsignedInt:", v27));

    PCURL::~PCURL((PCURL *)v28);
    return 1;
  }
  return result;
}

void sub_1B7C50FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__func()
{
}

__n128 std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F11482B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F11482B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, NSString **a2, uint64_t *a3, unsigned int *a4, uint64_t a5, id *a6)
{
  unsigned int v7 = *a2;
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = objc_msgSend(*a6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet"));
  if ([v11 count]) {
    int v12 = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", 0), "stringByReplacingOccurrencesOfString:withString:", @"\\", @"/"");
  }
  else {
    int v12 = 0;
  }
  if ((unint64_t)[v11 count] < 2)
  {
    uint64_t v13 = 0;
    if (!v12) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v13 = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", 1), "stringByReplacingOccurrencesOfString:withString:", @"\\", @"/"");
    if (!v12) {
      goto LABEL_24;
    }
  }
  if (([v12 hasPrefix:@"map_"] & 1) == 0
    && ([v12 hasPrefix:@"disp"] & 1) == 0
    && ([v12 hasPrefix:@"decal"] & 1) == 0
    && ([v12 hasPrefix:@"bump"] & 1) == 0
    && ![v12 hasPrefix:@"refl"])
  {
LABEL_24:
    if (!v13 || ![v13 hasPrefix:@"spectral"]) {
      return 1;
    }
    if ((unint64_t)[v11 count] >= 2)
    {
      uint64_t result = objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
      if (!result) {
        return result;
      }
      unint64_t v20 = (void *)result;
      if (objc_msgSend((id)objc_msgSend((id)result, "pathExtension"), "isEqualToString:", @"rfl"))
      {
LABEL_31:
        uint64_t result = [v20 length];
        if (!result) {
          return result;
        }
        int v21 = (void *)[*(id *)(v10 + 384) objectForKeyedSubscript:v8];
        if (!v21)
        {
          int v21 = objc_opt_new();
          [*(id *)(v10 + 384) setObject:v21 forKeyedSubscript:v8];
        }
        uint64_t v22 = objc_msgSend((id)AbsoluteNSURL((NSString *)v20, v7), "URLByStandardizingPath");
        uint64_t v23 = [v22 path];
        if (**(unsigned char **)(a1 + 16))
        {
          ++**(_DWORD **)(a1 + 24);
          if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v23) & 1) == 0) {
            ++**(_DWORD **)(a1 + 32);
          }
        }
        [v21 setObject:v23 forKeyedSubscript:v20];
        PCURL::PCURL((PCURL *)v24, v22);
        std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v24);
        unsigned int v19 = (void *)[*(id *)(v10 + 368) objectForKeyedSubscript:v8];
        if (!v19)
        {
          unsigned int v19 = objc_opt_new();
          [*(id *)(v10 + 368) setObject:v19 forKeyedSubscript:v8];
        }
        goto LABEL_23;
      }
      if ((unint64_t)[v11 count] >= 3)
      {
        uint64_t result = objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 2);
        unint64_t v20 = (void *)result;
        if (!result) {
          return result;
        }
        goto LABEL_31;
      }
    }
    return 0;
  }
  if ((unint64_t)[v11 count] < 2) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1), "stringByReplacingOccurrencesOfString:withString:", @"\\", @"/"");
  if (result)
  {
    unint64_t v15 = (NSString *)result;
    uint64_t result = [(id)result length];
    if (result)
    {
      unint64_t v16 = (void *)[*(id *)(v10 + 384) objectForKeyedSubscript:v8];
      if (!v16)
      {
        unint64_t v16 = objc_opt_new();
        [*(id *)(v10 + 384) setObject:v16 forKeyedSubscript:v8];
      }
      unint64_t v17 = objc_msgSend((id)AbsoluteNSURL(v15, v7), "URLByStandardizingPath");
      uint64_t v18 = [v17 path];
      if (**(unsigned char **)(a1 + 16))
      {
        ++**(_DWORD **)(a1 + 24);
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v18) & 1) == 0) {
          ++**(_DWORD **)(a1 + 32);
        }
      }
      [v16 setObject:v18 forKeyedSubscript:v15];
      PCURL::PCURL((PCURL *)v24, v17);
      std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v24);
      unsigned int v19 = (void *)[*(id *)(v10 + 368) objectForKeyedSubscript:v8];
      if (!v19)
      {
        unsigned int v19 = objc_opt_new();
        [*(id *)(v10 + 368) setObject:v19 forKeyedSubscript:v8];
      }
LABEL_23:
      objc_msgSend(v19, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v9));
      PCURL::~PCURL((PCURL *)v24);
      return 1;
    }
  }
  return result;
}

void sub_1B7C515E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target_type()
{
}

void std::vector<simd_float4x4>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[64 * v10];
    unint64_t v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    unint64_t v16 = &v14[64 * a2];
    uint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 4);
        long long v20 = *((_OWORD *)v17 - 3);
        long long v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1B7C517D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<simd_quatd>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1B7C5184C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<simd_float4x4>::__assign_with_size[abi:ne180100]<simd_float4x4*,simd_float4x4*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<TXLineMetrics>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

uint64_t **std::__tree<std::__value_type<int,PCBox<double>>,std::__map_value_compare<int,std::__value_type<int,PCBox<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCBox<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = xmmword_1B7E736F0;
    *(_OWORD *)(v11 + 56) = xmmword_1B7E736F0;
    *(_OWORD *)(v11 + 40) = xmmword_1B7E736F0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

OZChannelRef *OZRigEditModeEntry::OZRigEditModeEntry(OZChannelRef *a1, const std::string *a2)
{
  OZChannelRef::OZChannelRef(a1);
  OZChannelRef::operator=(v4, a2);
  *((void *)a1 + 3) = a2[1].__r_.__value_.__l.__data_;
  return a1;
}

void sub_1B7C51A84(_Unwind_Exception *a1)
{
  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

std::string *OZRigEditModeEntry::operator=(std::string *a1, const std::string *a2)
{
  OZChannelRef::operator=(a1, a2);
  a1[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  return a1;
}

void OZRigWidget::OZRigWidget(OZRigWidget *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *int64_t v5 = &unk_1F1148330;
  v5[2] = &unk_1F1148808;
  v5[6] = &unk_1F1148A60;
  v5[136] = 0;
  PCURL::PCURL((PCURL *)&v8, @"Rig Widget Options Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1096), &v8, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0);
  PCString::~PCString(&v8);
  *((void *)this + 155) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  unint64_t v6 = (OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *)PCString::PCString(&v8, "Hidden");
  Instance = (OZChannelImpl *)OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(v6);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 1248), 0, &v8, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, Instance, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Rig Widget Snapshots");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1400), &v8, (OZChannelFolder *)((char *)this + 448), 0x65u, 2u, 0);
  PCString::~PCString(&v8);
  *((void *)this + 193) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((void *)this + 194) = (char *)this + 1552;
  *((void *)this + 195) = (char *)this + 1552;
  *((void *)this + 196) = 0;
  *((_DWORD *)this + 394) = 1;
  *((unsigned char *)this + 1581) = 0;
  *((void *)this + 198) = (char *)this + 1584;
  *((void *)this + 199) = (char *)this + 1584;
  *((void *)this + 200) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1096), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1096));
}

void sub_1B7C51CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget(OZRigWidget *this, const OZRigWidget *a2, char a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1148330;
  *(void *)(v5 + 16) = &unk_1F1148808;
  *(void *)(v5 + 48) = &unk_1F1148A60;
  unint64_t v6 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1096), (const OZChannelFolder *)((char *)a2 + 1096), (OZChannelFolder *)(v5 + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1248), (const OZChannelBase *)((char *)a2 + 1248), v6);
  *((void *)this + 156) = &unk_1F1101490;
  *((void *)this + 158) = &unk_1F11017F0;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1400), (const OZChannelFolder *)((char *)a2 + 1400), v6);
  *((void *)this + 193) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  std::list<unsigned int>::list((void *)this + 194, (uint64_t)a2 + 1552);
  *((_DWORD *)this + 394) = *((_DWORD *)a2 + 394);
  *((unsigned char *)this + 1580) = 0;
  *((unsigned char *)this + 1581) = *((unsigned char *)a2 + 1581);
  *((void *)this + 198) = (char *)this + 1584;
  *((void *)this + 199) = (char *)this + 1584;
  *((void *)this + 200) = 0;
  *((void *)this + 136) = 0;
  *((void *)this + 153) = 0;
  *((void *)this + 155) = 0;
  *((void *)this + 154) = 0;
  if (*((void *)a2 + 136)) {
    OZRigWidget::copyWidget(this, a2);
  }
}

void sub_1B7C51EE8(_Unwind_Exception *a1)
{
  std::__list_imp<OZRigEditModeEntry>::clear(v6);
  std::__list_imp<unsigned int>::clear(v5);
  unint64_t v9 = *v7;
  if (*v7)
  {
    *((void *)v1 + 192) = v9;
    operator delete(v9);
  }
  OZChannelFolder::~OZChannelFolder(v4);
  OZChannel::~OZChannel(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::copyWidget(OZRigWidget *this, const OZRigWidget *a2)
{
  uint64_t v4 = *((void *)a2 + 153);
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 248))(v4);
    if (v5) {
    *((void *)this + 153) = v5;
    }
    unint64_t v6 = (void *)(*(uint64_t (**)(void))(**((void **)a2 + 154) + 248))(*((void *)a2 + 154));
    if (v6) {
    *((void *)this + 154) = v6;
    }
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), *((OZChannelBase **)this + 153));
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), *((OZChannelBase **)this + 154));
    (*(void (**)(void))(**((void **)this + 153) + 504))();
    (*(void (**)(void))(**((void **)this + 154) + 504))();
  }
  uint64_t v7 = *((void *)a2 + 155);
  if (v7)
  {
    PCString v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 248))(v7);
    if (v8) {
    else
    }
      unint64_t v9 = 0;
    *((void *)this + 155) = v9;
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), v9);
    (*(void (**)(void, void, void))(**((void **)this + 155) + 504))(*((void *)this + 155), 0, 0);
  }
  uint64_t v10 = *((void *)a2 + 136);
  if (v10)
  {
    unint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 248))(v10);
    unint64_t v12 = v11
    *((void *)this + 136) = v12;
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), v12);
    if (*((_DWORD *)this + 394) != 3) {
      (*(void (**)(void, void, void))(**((void **)this + 136) + 504))(*((void *)this + 136), 0, 0);
    }
  }
  uint64_t result = OZChannelBase::operator=((uint64_t)this + 1248, (uint64_t)a2 + 1248);
  *((unsigned char *)this + 1581) = *((unsigned char *)a2 + 1581);
  if (*((void *)a2 + 191) != *((void *)a2 + 192)) {
    operator new();
  }
  return result;
}

void sub_1B7C523D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::~OZRigWidget(OZRigWidget *this)
{
  *(void *)this = &unk_1F1148330;
  *((void *)this + 2) = &unk_1F1148808;
  *((void *)this + 6) = &unk_1F1148A60;
  uint64_t v2 = *((void *)this + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 136) = 0;
  uint64_t v3 = *((void *)this + 153);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 153) = 0;
  uint64_t v4 = *((void *)this + 154);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 154) = 0;
  uint64_t v5 = *((void *)this + 155);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 155) = 0;
  unint64_t v6 = (void *)*((void *)this + 191);
  uint64_t v7 = (void *)*((void *)this + 192);
  while (v6 != v7)
  {
    if (*v6) {
      (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
    }
    *v6++ = 0;
  }
  std::__list_imp<OZRigEditModeEntry>::clear((void **)this + 198);
  std::__list_imp<unsigned int>::clear((void *)this + 194);
  PCString v8 = (void *)*((void *)this + 191);
  if (v8)
  {
    *((void *)this + 192) = v8;
    operator delete(v8);
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1400));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1248));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1096));

  OZSceneNode::~OZSceneNode(this);
}

{
  uint64_t vars8;

  OZRigWidget::~OZRigWidget(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRigWidget::~OZRigWidget(OZRigWidget *this)
{
}

{
  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

OZRigWidget *OZRigWidget::create(OZRigWidget *this, const PCString *a2)
{
  int v2 = (int)a2;
  long long v5 = xmmword_1B7E77B80;
  SceneNode = (OZRigWidget *)OZApplication::createSceneNode(theApp, (unsigned int *)&v5);
  OZRigWidget::setWidgetType(SceneNode, v2);
  return SceneNode;
}

uint64_t OZRigWidget::setWidgetType(OZRigWidget *this, int a2)
{
  *((_DWORD *)this + 394) = a2;
  OZRigWidget::createValueChannelForType(this, a2);
  switch(a2)
  {
    case 3:
      operator new();
    case 2:
      PCURL::PCURL((PCURL *)&v6, @"Rig Widget Initial Entry");
      uint64_t v4 = (const void *)*((void *)this + 136);
      if (v4) {
      operator new();
      }
    case 1:
      operator new();
  }
  return OZChannel::setValue((OZChannel *)((char *)this + 1248), MEMORY[0x1E4F1FA48], 1.0, 0);
}

void sub_1B7C52D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
  MEMORY[0x1BA9BFBA0](v14, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  long long v5 = v4;
  uint64_t v6 = *(void *)(a1 + 1088);
  if (v6)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 888))(a1, *(void *)(a1 + 1088));
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 448), *(OZChannelBase **)(a1 + 1088));
    uint64_t v7 = *(void *)(a1 + 1088);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *(void *)(a1 + 1088) = 0;
  }
  PCString v8 = *(OZChannelBase **)(a1 + 1224);
  if (v8)
  {
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), v8);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), *(OZChannelBase **)(a1 + 1232));
    uint64_t v9 = *(void *)(a1 + 1224);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    *(void *)(a1 + 1224) = 0;
    uint64_t v10 = *(void *)(a1 + 1232);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *(void *)(a1 + 1232) = 0;
  }
  unint64_t v11 = *(OZChannelBase **)(a1 + 1240);
  if (v11)
  {
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), v11);
    uint64_t v12 = *(void *)(a1 + 1240);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    *(void *)(a1 + 1240) = 0;
  }
  uint64_t v13 = *(void **)(a1 + 1528);
  uint64_t v14 = *(void **)(a1 + 1536);
  if (v13 != v14)
  {
    do
    {
      if (*v13) {
        (*(void (**)(void))(*(void *)*v13 + 8))(*v13);
      }
      *v13++ = 0;
    }
    while (v13 != v14);
    uint64_t v13 = *(void **)(a1 + 1528);
  }
  *(void *)(a1 + 1536) = v13;
  OZRigWidget::copyWidget((OZRigWidget *)a1, v5);
  uint64_t result = OZChannel::setValue((OZChannel *)(a1 + 1248), MEMORY[0x1E4F1FA48], 0.0, 0);
  if (v6 && *(void *)(a1 + 1088))
  {
    unint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 896);
    return v16(a1);
  }
  return result;
}

uint64_t OZRigWidget::deleteThis(OZRigWidget *this, OZChannelBase *a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
  uint64_t v14 = (uint64_t)&v14;
  unint64_t v15 = &v14;
  uint64_t v16 = 0;
  if (v4)
  {
    long long v5 = (OZChannelBase **)v4;
    if ((OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(void *)this + 640))(this) == a2
      && (OZChannelBase::isObjectRef(v5[198]) & 1) == 0
      && (OZChannelBase::isObjectRef(v5[198]) & 1) == 0
      && &v14 != (uint64_t *)((char *)this + 1552))
    {
      std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(&v14, *((void *)this + 195), (uint64_t)this + 1552);
    }
    uint64_t v6 = v15;
    if (v16 && v15 != &v14)
    {
      do
      {
        uint64_t Object = (const void *)OZScene::getObject((OZScene *)v5, *((_DWORD *)v6 + 4));
        if (Object)
        {
          if (v8)
          {
            uint64_t v9 = v8;
            PCSharedCount::PCSharedCount((PCSharedCount *)&v13);
            (*(void (**)(void *, PCString *, uint64_t))(v9[2] + 176))(v9 + 2, &v13, 2);
            PCString::~PCString(&v13);
            uint64_t v10 = (*(uint64_t (**)(void *))(*v9 + 312))(v9);
            (*(void (**)(void *, uint64_t))(*v9 + 432))(v9, v10);
          }
        }
        uint64_t v6 = (uint64_t *)v6[1];
      }
      while (v6 != &v14);
    }
  }
  uint64_t v11 = OZSceneNode::deleteThis(this, a2);
  std::__list_imp<unsigned int>::clear(&v14);
  return v11;
}

void sub_1B7C532C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRigWidget::deleteThis(OZRigWidget *this, OZChannelBase *a2)
{
  return OZRigWidget::deleteThis((OZRigWidget *)((char *)this - 16), a2);
}

uint64_t OZRigWidget::writeBody(OZRigWidget *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRigWidgetScope);
  uint64_t v10 = *((unsigned int *)this + 394);
  if (v10 != 4)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 700);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 191);
  uint64_t v12 = (uint64_t *)*((void *)this + 192);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    uint64_t v14 = *(unsigned int *)(v13 + 32);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 701);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v14);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZRigWidget::writeBody(OZRigWidget *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRigWidget::writeBody((OZRigWidget *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZRigWidget::parseBegin(OZRigWidget *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigWidgetScope);
  return v3;
}

uint64_t non-virtual thunk to'OZRigWidget::parseBegin(OZRigWidget *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZSceneNode::parseBegin((OZRigWidget *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigWidgetScope);
  return v3;
}

uint64_t OZRigWidget::parseElement(OZRigWidget *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 701)
  {
    unsigned int v9 = 0;
    if (PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v9)) {
      operator new();
    }
  }
  else if (v6 == 700)
  {
    unsigned int v10 = 0;
    if (PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v10))
    {
      unsigned int v7 = v10;
      *((_DWORD *)this + 394) = v10;
      if (v7 != 4) {
        OZRigWidget::createValueChannelForType(this, v7);
      }
    }
  }
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  return 1;
}

void sub_1B7C536C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::createValueChannelForType(OZRigWidget *this, int a2)
{
  Name = (const PCString *)OZObjectManipulator::getName((OZRigWidget *)((char *)this + 16));
  PCString::PCString(&v6, Name);
  switch(a2)
  {
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      long long v5 = (OZChannelBase *)*((void *)this + 136);
      if (v5) {
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), v5);
      }
      PCString::~PCString(&v6);
      return;
  }
}

void sub_1B7C53B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

uint64_t non-virtual thunk to'OZRigWidget::parseElement(OZRigWidget *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZRigWidget::parseEnd(OZChannel **this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)this + 394) == 3)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble(this[153], MEMORY[0x1E4F1FA48], 0.0);
    double v6 = v5;
    OZChannel::getValueAsDouble(this[154], v4, 0.0);
    double v8 = v7;
    OZChannel::setOffset(this[136], v6);
    OZChannel::setScale(this[136], v8 - v6);
    OZChannelBase::setFlag((OZChannelBase *)this[136], 256, 1);
  }
  unsigned int v9 = this[136];
  if (v9) {
    (*((void (**)(OZChannel *, uint64_t, uint64_t))v9->var0 + 13))(v9, 1, 1);
  }

  return OZSceneNode::parseEnd((OZSceneNode *)this, a2);
}

uint64_t non-virtual thunk to'OZRigWidget::parseEnd(OZChannel **this, PCSerializerReadStream *a2)
{
  return OZRigWidget::parseEnd(this - 6, a2);
}

void OZRigWidget::allowDrag(void **this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  unint64_t v14 = *((void *)a2 + 1);
  long long v17 = xmmword_1B8378A00;
  if (OZFactory::isKindOfClass(v14, (int32x4_t *)&v17)
    && (OZChannelBase *)(*((uint64_t (**)(void **))*this + 80))(this) == a3)
  {
    if (OZRigWidget::CanRigChannel((unint64_t)v15, v16)
      && v15 != this[136]
      && v15 != this[153]
      && v15 != this[154]
      && v15 != this[155])
    {
      *a5 = a4 & 1;
      *a6 = 1;
    }
  }
  else
  {
    OZSceneNode::allowDrag((OZSceneNode *)this, a2, a3, a4, a5, a6, a7);
  }
}

unint64_t OZRigWidget::CanRigChannel(unint64_t this, const OZChannelBase *a2)
{
  if (this)
  {
    int v2 = (OZRigWidget *)this;
    this = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    if (this)
    {
      unint64_t v4 = this;
      unint64_t v5 = *((void *)v2 + 1);
      if ((OZRigWidget::IsChannelRigged(v2, v3) & 1) != 0 || OZChannelBase::testFlag((OZChannelBase *)v2, 8)) {
        return 0;
      }
      long long v19 = xmmword_1B8378A10;
      if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v19) & 1) != 0
        || (long long v18 = xmmword_1B7E78CE0, this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v18), this))
      {
        long long v17 = xmmword_1B8378D50;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v17)) {
          return 0;
        }
        uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)v2);
        this = (*(uint64_t (**)(uint64_t, OZRigWidget *))(*(void *)ObjectManipulator + 416))(ObjectManipulator, v2);
        if (!this) {
          return this;
        }
        long long v16 = xmmword_1B8378CB0;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v16)) {
          return 0;
        }
        long long v15 = xmmword_1B8378CC0;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v15)) {
          return 0;
        }
        long long v14 = xmmword_1B8378CD0;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v14)) {
          return 0;
        }
        long long v13 = xmmword_1B8378CA0;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v13)) {
          return 0;
        }
        unint64_t v7 = *(void *)((*(uint64_t (**)(unint64_t))(*(void *)v4 + 256))(v4) + 8);
        long long v20 = xmmword_1B7E77B90;
        if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v20)) {
          return 0;
        }
        while (1)
        {
          int v2 = (OZRigWidget *)*((void *)v2 + 6);
          if (!v2) {
            break;
          }
          unint64_t v8 = *((void *)v2 + 1);
          long long v12 = xmmword_1B8378C40;
          if (OZFactory::isKindOfClass(v8, (int32x4_t *)&v12)) {
            break;
          }
          unint64_t v9 = *((void *)v2 + 1);
          long long v11 = xmmword_1B8378DA0;
          int isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v11);
          this = 0;
          if (isKindOfClass) {
            return this;
          }
        }
        return 1;
      }
    }
  }
  return this;
}

void non-virtual thunk to'OZRigWidget::allowDrag(void **this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

void OZRigWidget::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C54090()
{
  return 0;
}

void non-virtual thunk to'OZRigWidget::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C540DC()
{
  return 0;
}

uint64_t OZRigWidget::performDragOperation(OZRigWidget *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  if (lpsrc) {
  else
  }
    long long v16 = 0;
  if ((OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(void *)this + 640))(this) != a3 || v16 == 0)
  {
    return OZSceneNode::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    OZRigWidget::addChannel(this, v16, 0);
    (*(void (**)(OZRigWidget *))(*(void *)this + 496))(this);
    uint64_t v18 = (*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
    OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 16);
    return 1;
  }
}

void OZRigWidget::addChannel(OZRigWidget *this, OZChannelBase *a2, const OZChannelBase *a3)
{
  double v6 = *(OZChannelBase **)((*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this) + 1584);
  PCURL::PCURL((PCURL *)&v24, @"Rig Widget Undo Add Channel");
  OZChannelBase::setRangeName(v6, (const PCString *)&v24);
  PCString::~PCString((PCString *)&v24);
  PCURL::PCURL((PCURL *)&v24, @"Rig Widget Undo Add Channel");
  (*(void (**)(char *, long long *, void))(*((void *)this + 2) + 176))((char *)this + 16, &v24, 0);
  PCString::~PCString((PCString *)&v24);
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
  PCURL::PCURL((PCURL *)&v24, @"Rig Widget Undo Add Channel");
  (*(void (**)(uint64_t, long long *, void))(*(void *)(v8 + 16) + 176))(v8 + 16, &v24, 0);
  PCString::~PCString((PCString *)&v24);
  OZChannelBase::setRangeName(v6, v9);
  long long v24 = xmmword_1B7E77B90;
  Behavior = (OZRigBehavior *)OZApplication::createBehavior(theApp, (unsigned int *)&v24);
  int v11 = *((_DWORD *)Behavior + 20);
  long long v12 = operator new(0x18uLL);
  v12[4] = v11;
  uint64_t v13 = *((void *)this + 194);
  *(void *)long long v12 = v13;
  *((void *)v12 + 1) = (char *)this + 1552;
  *(void *)(v13 + 8) = v12;
  *((void *)this + 194) = v12;
  ++*((void *)this + 196);
  double v14 = (*(double (**)(OZRigBehavior *, OZChannelBase *))(*(void *)Behavior + 224))(Behavior, a2);
  OZRigBehavior::setWidget(Behavior, this, v14);
  OZChannel::getValueAsDouble(*((OZChannel **)this + 136), MEMORY[0x1E4F1FA48], 0.0);
  long long v16 = (uint64_t *)*((void *)this + 191);
  long long v17 = (uint64_t *)*((void *)this + 192);
  if (v16 != v17)
  {
    double v18 = v15;
    long long v19 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v20 = *v16++;
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 136), v19, 0.0);
      unsigned int v22 = *(_DWORD *)(v20 + 32);
      if (vabdd_f64(v18, v21) >= 0.0000001) {
        uint64_t v23 = a3;
      }
      else {
        uint64_t v23 = 0;
      }
      OZRigBehavior::createDefaultSnapshot(Behavior, v22, v23);
    }
    while (v16 != v17);
  }
}

void sub_1B7C54530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t non-virtual thunk to'OZRigWidget::performDragOperation(OZRigWidget *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRigWidget::performDragOperation((OZRigWidget *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

OZScene *OZRigWidget::dirty(OZRigWidget *this)
{
  OZSceneNode::dirty(this);
  uint64_t result = (OZScene *)(*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
  if (result)
  {
    uint64_t v3 = *((void *)this + 195);
    if ((OZRigWidget *)v3 != (OZRigWidget *)((char *)this + 1552))
    {
      unint64_t v4 = result;
      do
      {
        uint64_t result = (OZScene *)OZScene::getObject(v4, *(_DWORD *)(v3 + 16));
        if (result)
        {
          if (result)
          {
            unint64_t v5 = result;
            (*(void (**)(OZScene *))(*(void *)result + 352))(result);
            uint64_t result = (OZScene *)(*(uint64_t (**)(OZScene *))(*(void *)v5 + 320))(v5);
            if (result)
            {
              uint64_t v6 = (*(uint64_t (**)(OZScene *))(*(void *)v5 + 320))(v5);
              uint64_t result = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 496))(v6);
            }
          }
        }
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while ((OZRigWidget *)v3 != (OZRigWidget *)((char *)this + 1552));
    }
  }
  return result;
}

OZScene *non-virtual thunk to'OZRigWidget::dirty(OZRigWidget *this)
{
  return OZRigWidget::dirty((OZRigWidget *)((char *)this - 16));
}

uint64_t OZRigWidget::didAddToScene(OZRigWidget *this, OZScene *a2)
{
  OZSceneNode::didAddToScene(this, a2);
  uint64_t result = *((void *)this + 136);
  if (result)
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 104);
    return v4();
  }
  return result;
}

uint64_t OZRigWidget::willRemoveFromScene(OZChannelBase *this, OZScene *a2)
{
  uint64_t result = OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  if (*(OZChannelBase **)(*((void *)a2 + 198) + 288) == this)
  {
    return OZChannelBase::setRangeName(this, v5);
  }
  return result;
}

void OZRigWidget::didUndoLastChange(OZRigWidget *this)
{
  OZSceneNode::didUndoLastChange((uint64_t)this);
  int v2 = *(OZDocument **)((*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this) + 1584);

  OZDocument::postNotification(v2, 0x80000);
}

void OZRigWidget::setName(OZRigWidget *this, const PCString *a2, int a3)
{
  OZObjectManipulator::setName((OZRigWidget *)((char *)this + 16), a2, a3);
  if (a3)
  {
    uint64_t v6 = *((void *)this + 136);
    PCSharedCount::PCSharedCount(&v7);
    (*(void (**)(uint64_t, PCSharedCount *))(*(void *)v6 + 344))(v6, &v7);
    PCString::~PCString((PCString *)&v7);
  }
  OZChannelBase::setName(*((OZChannelBase **)this + 136), a2, 0);
}

void sub_1B7C548D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void non-virtual thunk to'OZRigWidget::setName(OZRigWidget *this, const PCString *a2, int a3)
{
}

BOOL OZRigWidget::canRigChannel(const OZChannelBase **this, OZChannelBase *a2)
{
  unint64_t v4 = (OZChannelBase *)((uint64_t (*)(const OZChannelBase **))(*this)[5].var10)(this);
  return !OZChannelBase::isDescendantOf(a2, v4) || this[136] == a2;
}

BOOL non-virtual thunk to'OZRigWidget::canRigChannel(const OZChannelBase **this, OZChannelBase *a2)
{
  return OZRigWidget::canRigChannel(this - 2, a2);
}

void OZRigWidget::getIconName(OZRigWidget *this@<X0>, PCURL *a2@<X8>)
{
  PCURL::PCURL(a2, @"M_LayersList_ObjectIconColor-RigSlider");
  unsigned int v4 = *((_DWORD *)this + 394) - 1;
  if (v4 < 3) {
    PCString::set((PCString *)a2, off_1E616DE90[v4]);
  }
}

void sub_1B7C549C4(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZRigWidget::getIconNameBW(OZRigWidget *this@<X0>, PCURL *a2@<X8>)
{
  PCURL::PCURL(a2, @"M_LayersList_ObjectIconGrey-RigSlider");
  unsigned int v4 = *((_DWORD *)this + 394) - 1;
  if (v4 < 3) {
    PCString::set((PCString *)a2, off_1E616DEA8[v4]);
  }
}

void sub_1B7C54A30(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::getIconID(OZRigWidget *this)
{
  int v1 = *((_DWORD *)this + 394);
  if (v1 == 2) {
    unsigned int v2 = 33;
  }
  else {
    unsigned int v2 = 32;
  }
  if (v1 == 1) {
    return 34;
  }
  else {
    return v2;
  }
}

void OZRigWidget::getSnapshotIDsForValue(OZRigWidget *this, double a2, unsigned int *a3, unsigned int *a4, double *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0.0;
  switch(*((_DWORD *)this + 394))
  {
    case 1:
      double __y = 0.0;
      modf(a2, &__y);
      unsigned int v14 = *(_DWORD *)(*(void *)(*((void *)this + 191) + 8 * __y) + 32);
      goto LABEL_40;
    case 2:
      double v15 = (uint64_t *)*((void *)this + 191);
      long long v16 = (uint64_t *)*((void *)this + 192);
      if (v15 == v16) {
        return;
      }
      long long v17 = (const CMTime *)MEMORY[0x1E4F1FA48];
      while (1)
      {
        uint64_t v18 = *v15;
        OZChannel::getValueAsDouble((OZChannel *)(*v15 + 136), v17, 0.0);
        if (vabdd_f64(v19, a2) < 0.0000001) {
          break;
        }
        if (++v15 == v16) {
          return;
        }
      }
LABEL_30:
      unsigned int v14 = *(_DWORD *)(v18 + 32);
      goto LABEL_40;
    case 3:
      uint64_t v20 = (uint64_t *)*((void *)this + 191);
      double v21 = (uint64_t *)*((void *)this + 192);
      if (v20 == v21) {
        return;
      }
      uint64_t v22 = *v20;
      OZChannel::getValueAsDouble((OZChannel *)(*v20 + 136), MEMORY[0x1E4F1FA48], 0.0);
      if (v23 >= a2)
      {
        uint64_t v26 = 0;
LABEL_32:
        if (!v26) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      long long v24 = v20 + 1;
      uint64_t v25 = (const CMTime *)MEMORY[0x1E4F1FA48];
      while (1)
      {
        uint64_t v26 = v22;
        if (v24 == v21) {
          break;
        }
        uint64_t v27 = *v24++;
        uint64_t v22 = v27;
        OZChannel::getValueAsDouble((OZChannel *)(v27 + 136), v25, 0.0);
        if (v28 >= a2) {
          goto LABEL_32;
        }
      }
      uint64_t v22 = 0;
      if (!v26) {
        goto LABEL_36;
      }
LABEL_33:
      if (!v22)
      {
        unsigned int v14 = *(_DWORD *)(v26 + 32);
        goto LABEL_40;
      }
LABEL_36:
      if (v22)
      {
        if (v26
          && (OZChannel::getValueAsDouble((OZChannel *)(v22 + 136), MEMORY[0x1E4F1FA48], 0.0),
              vabdd_f64(v38, a2) >= 0.0000001))
        {
          int v45 = (const CMTime *)MEMORY[0x1E4F1FA48];
          OZChannel::getValueAsDouble((OZChannel *)(v26 + 136), MEMORY[0x1E4F1FA48], 0.0);
          double v47 = v46;
          OZChannel::getValueAsDouble((OZChannel *)(v22 + 136), v45, 0.0);
          double v44 = OZRigSnapshot::applyInterpolation((OZRigSnapshot *)v26, (a2 - v47) / (v48 - v47));
          *a3 = *(_DWORD *)(v26 + 32);
          unsigned int v43 = *(_DWORD *)(v22 + 32);
LABEL_44:
          *a4 = v43;
          *a5 = v44;
        }
        else
        {
          unsigned int v14 = *(_DWORD *)(v22 + 32);
LABEL_40:
          *a3 = v14;
          *a5 = 0.0;
        }
      }
      return;
    case 4:
      uint64_t v29 = *((void *)this + 191);
      uint64_t v30 = *((void *)this + 192);
      if (v29 == v30) {
        return;
      }
      uint64_t v18 = 0;
      uint64_t v31 = v29 + 8;
      int v32 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        uint64_t v33 = v18;
        uint64_t v18 = *(void *)(v31 - 8);
        OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), v32, 0.0);
        BOOL v36 = v34 >= a2 && v33 != 0 || v31 == v30;
        v31 += 8;
      }
      while (!v36);
      if (!v18) {
        return;
      }
      if (!v33) {
        goto LABEL_30;
      }
      OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), MEMORY[0x1E4F1FA48], 0.0);
      if (vabdd_f64(v37, a2) < 0.0000001) {
        goto LABEL_30;
      }
      unint64_t v39 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble((OZChannel *)(v33 + 136), MEMORY[0x1E4F1FA48], 0.0);
      double v41 = v40;
      OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), v39, 0.0);
      *a3 = *(_DWORD *)(v33 + 32);
      unsigned int v43 = *(_DWORD *)(v18 + 32);
      double v44 = (a2 - v41) / (v42 - v41);
      goto LABEL_44;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigWidget.cpp");
      pcAbortImpl();
  }
}

uint64_t OZRigWidget::getCurrentSnapshot(OZChannel **this)
{
  OZChannel::getValueAsDouble(this[136], MEMORY[0x1E4F1FA48], 0.0);

  return OZRigWidget::getSnapshotForValue((OZRigWidget *)this, v2, 0.0000001);
}

uint64_t OZRigWidget::getSnapshotForValue(OZRigWidget *this, double a2, double a3)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 191);
  unsigned int v4 = (uint64_t *)*((void *)this + 192);
  if (v3 == v4) {
    return 0;
  }
  PCSharedCount v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    uint64_t v8 = *v3;
    OZChannel::getValueAsDouble((OZChannel *)(*v3 + 136), v7, 0.0);
    if (vabdd_f64(v9, a2) < a3) {
      break;
    }
    if (++v3 == v4) {
      return 0;
    }
  }
  return v8;
}

uint64_t OZRigWidget::numberOfSnapshots(OZRigWidget *this)
{
  return (*((void *)this + 192) - *((void *)this + 191)) >> 3;
}

uint64_t OZRigWidget::doPassThrough(OZRigWidget *this, const CMTime *a2)
{
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E4F1FA48], 0.0);
  if (result)
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 191); ; ++i)
    {
      if (i == *((uint64_t **)this + 192)) {
        return 0;
      }
      uint64_t v6 = *i;
      if (*(_DWORD *)(*i + 32) == result) {
        break;
      }
    }
    OZChannel::getValueAsDouble(*((OZChannel **)this + 136), a2, 0.0);
    double v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)(v6 + 136), MEMORY[0x1E4F1FA48], 0.0);
    return vabdd_f64(v9, v8) < 0.0000001;
  }
  return result;
}

void OZRigWidget::getCurrentSnapshotIDs(OZChannel **this, const CMTime *a2, unsigned int *a3, unsigned int *a4, double *a5)
{
  OZChannel::getValueAsDouble(this[136], a2, 0.0);

  OZRigWidget::getSnapshotIDsForValue((OZRigWidget *)this, v13, a3, a4, a5, v9, v10, v11, v12);
}

void OZRigWidget::willSetActiveSnapshot(OZRigWidget *this)
{
  double v2 = (OZChannelBase *)((char *)this + 1248);
  PCSharedCount::PCSharedCount(&v10);
  OZChannelBase::addToUndo(v2, (const PCString *)&v10);
  PCString::~PCString((PCString *)&v10);
  *((unsigned char *)this + 1580) = 1;
  uint64_t v3 = (*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 195);
    if ((OZRigWidget *)v4 != (OZRigWidget *)((char *)this + 1552))
    {
      unint64_t v5 = (OZScene *)v3;
      do
      {
        uint64_t Object = (const void *)OZScene::getObject(v5, *(_DWORD *)(v4 + 16));
        if (Object)
        {
          if (v7)
          {
            uint64_t ChanBase = OZSingleChannelBehavior::getChanBase(v7);
            if (ChanBase)
            {
              uint64_t v9 = ChanBase;
              PCSharedCount::PCSharedCount(&v10);
              (*(void (**)(uint64_t, PCSharedCount *))(*(void *)v9 + 344))(v9, &v10);
              PCString::~PCString((PCString *)&v10);
            }
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while ((OZRigWidget *)v4 != (OZRigWidget *)((char *)this + 1552));
    }
  }
}

void sub_1B7C5512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZRigWidget::setActiveSnapshot(OZRigWidget *this, unsigned int a2, int a3)
{
  uint64_t v6 = (OZChannel *)((char *)this + 1248);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt != a2)
  {
    int v8 = ValueAsInt;
    if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1400), ValueAsInt)) {
      int v8 = 0;
    }
    int v9 = *((unsigned __int8 *)this + 1580);
    if (!*((unsigned char *)this + 1580)) {
      OZRigWidget::willSetActiveSnapshot(this);
    }
    OZChannel::setValue(v6, MEMORY[0x1E4F1FA48], (double)a2, 0);
    uint64_t v10 = (*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
    if (v10)
    {
      uint64_t v11 = (OZScene *)v10;
      int v27 = v9;
      uint64_t v12 = *(OZChannelBase **)(v10 + 1504);
      if (v12) {
        OZChannelBase::setRangeName(v12, (const PCString *)1);
      }
      double v13 = (char *)this + 1552;
      uint64_t v14 = *((void *)this + 195);
      if ((OZRigWidget *)v14 != (OZRigWidget *)((char *)this + 1552))
      {
        if (v8) {
          int v15 = a3;
        }
        else {
          int v15 = 0;
        }
        do
        {
          uint64_t Object = (const void *)OZScene::getObject(v11, *(_DWORD *)(v14 + 16));
          if (Object)
          {
            if (v17)
            {
              uint64_t v18 = v17;
              if (v15) {
                OZRigBehavior::copyTargetToSnapshot(v17, v8);
              }
              if (a2) {
                OZRigBehavior::copySnapshotToTarget(v18, a2);
              }
            }
          }
          uint64_t v14 = *(void *)(v14 + 8);
        }
        while ((char *)v14 != v13);
        for (uint64_t i = *((void *)this + 195); (char *)i != v13; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v20 = (const void *)OZScene::getObject(v11, *(_DWORD *)(i + 16));
          if (v20)
          {
            if (v21)
            {
              uint64_t v22 = v21;
              uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(v21);
              uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(ChanBase);
              if (ObjectManipulator)
              {
                uint64_t v25 = ObjectManipulator;
                {
                  (*(void (**)(void *, OZSingleChannelBehavior *))(*(void *)v26 + 240))(v26, v22);
                }
              }
            }
          }
        }
      }
      if (!v27) {
        *((unsigned char *)this + 1580) = 0;
      }
    }
  }
}

void *OZRigWidget::registerRigBehavior(void *result, uint64_t a2)
{
  double v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 80);
  uint64_t v4 = result + 194;
  uint64_t v5 = result[195];
  if ((void *)v5 == result + 194)
  {
LABEL_13:
    uint64_t result = operator new(0x18uLL);
    *((_DWORD *)result + 4) = v3;
    uint64_t v7 = *v4;
    *(void *)(v7 + 8) = result;
    *uint64_t result = v7;
    *uint64_t v4 = (uint64_t)result;
    result[1] = v4;
    ++v2[196];
    return result;
  }
  uint64_t v6 = result[195];
  while (*(_DWORD *)(v6 + 16) != v3)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if ((uint64_t *)v6 == v4) {
      goto LABEL_10;
    }
  }
  if (v4 == (uint64_t *)v6)
  {
LABEL_10:
    while ((uint64_t *)v5 != v4)
    {
      if (*(_DWORD *)(v5 + 16) > v3)
      {
        uint64_t v4 = (uint64_t *)v5;
        goto LABEL_13;
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    goto LABEL_13;
  }
  return result;
}

void OZRigWidget::unregisterRigBehavior(void *a1, uint64_t a2)
{
  double v2 = a1 + 194;
  unsigned int v3 = (void *)a1[195];
  if (v3 != a1 + 194)
  {
    while (*((_DWORD *)v3 + 4) != *(_DWORD *)(a2 + 80))
    {
      unsigned int v3 = (void *)v3[1];
      if (v3 == v2) {
        return;
      }
    }
    if (v2 != v3)
    {
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = v3[1];
      *(void *)v3[1] = v4;
      --a1[196];
      operator delete(v3);
    }
  }
}

OZScene *OZRigWidget::getRiggedNodeIDs(void *a1, uint64_t **a2)
{
  uint64_t result = (OZScene *)(*(uint64_t (**)(void *))(*a1 + 272))(a1);
  if (result)
  {
    uint64_t v5 = a1[195];
    if ((void *)v5 != a1 + 194)
    {
      uint64_t v6 = result;
      do
      {
        uint64_t result = (OZScene *)OZScene::getObject(v6, *(_DWORD *)(v5 + 16));
        if (result)
        {
          if (result)
          {
            uint64_t result = (OZScene *)OZSingleChannelBehavior::getAffectedObject(result);
            if (result)
            {
              uint64_t result = (OZScene *)(*(uint64_t (**)(OZScene *))(*(void *)result + 232))(result);
              if (result)
              {
                unsigned int v7 = *((_DWORD *)result + 20);
                uint64_t result = (OZScene *)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, &v7, &v7);
              }
            }
          }
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while ((void *)v5 != a1 + 194);
    }
  }
  return result;
}

void OZRigWidget::willModifyChannel(OZRigWidget *this, const OZChannelBase *a2)
{
  var6 = a2->var6;
  uint64_t v5 = a2;
  if (var6)
  {
    if ((*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(a2->var6)) {
      uint64_t v5 = (const OZChannelBase *)var6;
    }
    else {
      uint64_t v5 = a2;
    }
  }
  if ((a2->var7 & 2) == 0
    && OZRigWidget::CanRigChannel((unint64_t)v5, a2)
    && *((const OZChannelBase **)this + 136) != a2)
  {
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, v5, 0);
    uint64_t v11 = 0;
    uint64_t v6 = (char *)this + 1584;
    for (uint64_t i = *((void *)this + 199); (char *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (OZChannelRef::operator==((unsigned __int8 *)(i + 16), (unsigned __int8 *)v10))
      {
        if (v6 != (char *)i) {
          goto LABEL_14;
        }
        break;
      }
    }
    uint64_t v11 = (*((uint64_t (**)(const OZChannelBase *))v5->var0 + 31))(v5);
    int v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>((uint64_t)this + 1584, 0, 0, (uint64_t)v10);
    v8[1] = v6;
    uint64_t v9 = *((void *)this + 198);
    *int v8 = v9;
    *(void *)(v9 + 8) = v8;
    *((void *)this + 198) = v8;
    ++*((void *)this + 200);
LABEL_14:
    OZChannelRef::~OZChannelRef(v10);
  }
}

void sub_1B7C5578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t OZRigWidget::IsChannelRigged(OZRigWidget *this, const OZChannelBase *a2)
{
  if ((*((unsigned char *)this + 57) & 0x10) != 0)
  {
    if (v6)
    {
      unsigned int v7 = *v6;
      if (*v6 != v6[1])
      {
        do
        {
          uint64_t IsChannelRigged = OZRigWidget::IsChannelRigged(*v7, v5);
          if (IsChannelRigged) {
            break;
          }
          ++v7;
        }
        while (v7 != v6[1]);
        return IsChannelRigged;
      }
    }
    return 0;
  }
  uint64_t v10 = (uint64_t)&v10;
  uint64_t v11 = &v10;
  uint64_t v12 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v10, 1);
  double v2 = v11;
  if (v11 == &v10)
  {
LABEL_5:
    std::__list_imp<unsigned int>::clear(&v10);
    return 0;
  }
  while (1)
  {
    unsigned int v3 = (void *)v2[2];
    unint64_t v4 = *(void *)((*(uint64_t (**)(void *))(*v3 + 344))(v3) + 8);
    long long v13 = xmmword_1B7E77B90;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v13)) {
      break;
    }
    double v2 = (uint64_t *)v2[1];
    if (v2 == &v10) {
      goto LABEL_5;
    }
  }
  uint64_t IsChannelRigged = (*(uint64_t (**)(void *, void, uint64_t))(v3[2] + 24))(v3 + 2, 0, 1);
  std::__list_imp<unsigned int>::clear(&v10);
  return IsChannelRigged;
}

void sub_1B7C55930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZRigWidget::copyTargetChansToActiveSnapshot(OZRigWidget *this)
{
  double v2 = (OZScene *)(*(uint64_t (**)(OZRigWidget *))(*(void *)this + 272))(this);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = (void *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1400), ValueAsInt);
  if (!result) {
    int ValueAsInt = 0;
  }
  if (ValueAsInt) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    for (uint64_t i = *((void *)this + 195); (OZRigWidget *)i != (OZRigWidget *)((char *)this + 1552); uint64_t i = *(void *)(i + 8))
    {
      uint64_t result = (void *)OZScene::getObject(v2, *(_DWORD *)(i + 16));
      if (result)
      {
        if (result) {
          uint64_t result = (void *)OZRigBehavior::copyTargetToSnapshot((OZRigBehavior *)result, ValueAsInt);
        }
      }
    }
  }
  return result;
}

uint64_t OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::OZRigWidget_activeSnapshotIDChanImpl_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::OZRigWidget_activeSnapshotIDChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::_OZRigWidget_activeSnapshotIDChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::_OZRigWidget_activeSnapshotIDChan) {
    operator new();
  }
}

void sub_1B7C55B1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::OZRigWidget_activeSnapshotIDChanImpl(OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *this)
{
}

void sub_1B7C55BF0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, unsigned int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&unk_1F1101490;
  this->var2 = (void **)&unk_1F11017F0;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B7C55D40(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<OZRigEditModeEntry>::clear(void **a1)
{
  if (a1[2])
  {
    char v2 = (void **)*a1;
    unsigned int v3 = (void **)a1[1];
    unint64_t v4 = *v3;
    v4[1] = *((void *)*a1 + 1);
    *v2[1] = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        BOOL v5 = (void **)v3[1];
        OZChannelRef::~OZChannelRef(v3 + 2);
        operator delete(v3);
        unsigned int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(OZRigWidget::OZRigWidget_valueDoubleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::OZRigWidget_valueDoubleImpl_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::OZRigWidget_valueDoubleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueDoubleImpl::_OZRigWidget_valueDouble;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_valueDoubleImpl::_OZRigWidget_valueDouble) {
    operator new();
  }
}

void sub_1B7C55E80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget_valueDoubleImpl::OZRigWidget_valueDoubleImpl(OZRigWidget::OZRigWidget_valueDoubleImpl *this)
{
}

void sub_1B7C55F50(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(OZRigWidget::OZRigWidget_valueDoubleInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::OZRigWidget_valueDoubleInfo_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::OZRigWidget_valueDoubleInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueDoubleInfo::_OZRigWidget_valueDoubleInfo;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_valueDoubleInfo::_OZRigWidget_valueDoubleInfo) {
    operator new();
  }
}

void sub_1B7C5602C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueDoubleInfo *OZRigWidget::OZRigWidget_valueDoubleInfo::OZRigWidget_valueDoubleInfo(OZRigWidget::OZRigWidget_valueDoubleInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.1, 0.01, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueDoubleInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1148BC0;
  *((void *)this + 10) = &unk_1F1148BE0;
  return this;
}

void sub_1B7C56104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(OZRigWidget::OZRigWidget_pSliderMinChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::OZRigWidget_pSliderMinChanImpl_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::OZRigWidget_pSliderMinChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_pSliderMinChanImpl::_OZRigWidget_pSliderMinChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_pSliderMinChanImpl::_OZRigWidget_pSliderMinChan) {
    operator new();
  }
}

void sub_1B7C561E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget_pSliderMinChanImpl::OZRigWidget_pSliderMinChanImpl(OZRigWidget::OZRigWidget_pSliderMinChanImpl *this)
{
}

void sub_1B7C562B8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(OZRigWidget::OZRigWidget_pSliderMaxChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::OZRigWidget_pSliderMaxChanImpl_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::OZRigWidget_pSliderMaxChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_pSliderMaxChanImpl::_OZRigWidget_pSliderMaxChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_pSliderMaxChanImpl::_OZRigWidget_pSliderMaxChan) {
    operator new();
  }
}

void sub_1B7C56394(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget_pSliderMaxChanImpl::OZRigWidget_pSliderMaxChanImpl(OZRigWidget::OZRigWidget_pSliderMaxChanImpl *this)
{
}

void sub_1B7C5647C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(OZRigWidget::OZRigWidget_valueAspectRatioImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::OZRigWidget_valueAspectRatioImpl_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::OZRigWidget_valueAspectRatioImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueAspectRatioImpl::_OZRigWidget_valueAspectRatio;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_valueAspectRatioImpl::_OZRigWidget_valueAspectRatio) {
    operator new();
  }
}

void sub_1B7C56558(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget_valueAspectRatioImpl::OZRigWidget_valueAspectRatioImpl(OZRigWidget::OZRigWidget_valueAspectRatioImpl *this)
{
}

void sub_1B7C5663C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(OZRigWidget::OZRigWidget_valueAspectRatioInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::OZRigWidget_valueAspectRatioInfo_once, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::OZRigWidget_valueAspectRatioInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueAspectRatioInfo::_OZRigWidget_valueAspectRatioInfo;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigWidget::OZRigWidget_valueAspectRatioInfo::_OZRigWidget_valueAspectRatioInfo) {
    operator new();
  }
}

void sub_1B7C56718(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueAspectRatioInfo *OZRigWidget::OZRigWidget_valueAspectRatioInfo::OZRigWidget_valueAspectRatioInfo(OZRigWidget::OZRigWidget_valueAspectRatioInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.1, 2.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueAspectRatioInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1148DA0;
  *((void *)this + 10) = &unk_1F1148DC0;
  return this;
}

void sub_1B7C567EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void *std::list<unsigned int>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      unsigned int v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)unsigned int v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B7C56898(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::OZ3DEngineSceneFile(OZ3DEngineSceneFile *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(void *)this = &unk_1F1148E18;
  *((void *)this + 2) = &unk_1F1149460;
  *((void *)this + 6) = &unk_1F11496B8;
  *((void *)this + 197) = &unk_1F1149710;
  PCURL::PCURL((PCURL *)&v6, @"3D Scene File Inspector Linked Textures");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), &v6, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0);
  PCString::~PCString(&v6);
  *((void *)this + 216) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1600), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1600), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1600), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1600));
}

void sub_1B7C569EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBase::setRangeName(v11, v13);
  OZSceneNodeFile::~OZSceneNodeFile(v10);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::OZ3DEngineSceneFile(OZ3DEngineSceneFile *this, OZ3DEngineSceneFile *a2, char a3)
{
  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(void *)this = &unk_1F1148E18;
  *((void *)this + 2) = &unk_1F1149460;
  *((void *)this + 6) = &unk_1F11496B8;
  *((void *)this + 197) = &unk_1F1149710;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), (const OZChannelFolder *)((char *)a2 + 1600), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 216) = 0;
}

void sub_1B7C56B00(_Unwind_Exception *a1, const PCString *a2)
{
  OZChannelBase::setRangeName(v3, a2);
  OZSceneNodeFile::~OZSceneNodeFile(v2);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::~OZ3DEngineSceneFile(OZ3DEngineSceneFile *this)
{
  *(void *)this = &unk_1F1148E18;
  *((void *)this + 2) = &unk_1F1149460;
  *((void *)this + 6) = &unk_1F11496B8;
  char v2 = (OZChannelBase *)((char *)this + 1576);
  *((void *)this + 197) = &unk_1F1149710;
  uint64_t v3 = *((void *)this + 216);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 216) = 0;
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1600));
  OZChannelBase::setRangeName(v2, v4);

  OZSceneNodeFile::~OZSceneNodeFile(this);
}

{
  uint64_t vars8;

  OZ3DEngineSceneFile::~OZ3DEngineSceneFile(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEngineSceneFile::~OZ3DEngineSceneFile(OZ3DEngineSceneFile *this)
{
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 48));
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 1576));
}

{
  uint64_t vars8;

  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 1576));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineSceneFile::getFileImpl(OZ3DEngineSceneFile *this)
{
  uint64_t result = *((void *)this + 216);
  if (!result)
  {
    if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1408))(this))
    {
      uint64_t v3 = (const __CFURL **)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1408))(this);
      uint64_t result = New3DEngineSceneFileImpl(this, v3);
      *((void *)this + 216) = result;
    }
    else
    {
      return *((void *)this + 216);
    }
  }
  return result;
}

void OZ3DEngineSceneFile::getKindName(OZ3DEngineSceneFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    PCURL::PCURL((PCURL *)a2, @"Media Info 3D Object");
  }
}

void OZ3DEngineSceneFile::getCodecName(OZ3DEngineSceneFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(void *)this + 1232))(&v7, this);
    PCURL::getExtension((const __CFURL **)&v7, (PCURL *)&v8);
    PCURL::~PCURL((PCURL *)&v7);
    PCString::PCString(&v7, "usdz");
    int v4 = PCString::caseInsensitiveCompare(&v8, &v7);
    PCString::~PCString(&v7);
    uint64_t v5 = @"Media Info USDZ Object File";
    if (v4)
    {
      PCString::PCString(&v7, "obj");
      int v6 = PCString::caseInsensitiveCompare(&v8, &v7);
      PCString::~PCString(&v7);
      if (!v6) {
        uint64_t v5 = @"Media Info Wavefront Object File";
      }
    }
    PCURL::PCURL((PCURL *)a2, v5);
    PCString::~PCString(&v8);
  }
}

void sub_1B7C56FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C56FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double OZ3DEngineSceneFile::getUserFrameRate(OZ3DEngineSceneFile *this)
{
  return *(double *)(*((void *)this + 121) + 368);
}

uint64_t OZ3DEngineSceneFile::getFrameRate(OZ3DEngineSceneFile *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1296))();
}

uint64_t OZ3DEngineSceneFile::getFrames(OZ3DEngineSceneFile *this)
{
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this)) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this);
  if (result)
  {
    uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    if (!FileImpl || !(*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 56))(FileImpl)) {
      return 1;
    }
    double OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    return (OriginalFileDurationInSeconds
                        * (*(double (**)(OZ3DEngineSceneFile *))(*(void *)this + 1328))(this));
  }
  return result;
}

Float64 OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(OZ3DEngineSceneFile *this)
{
  if (!OZ3DEngineSceneFile::getFileImpl(this)) {
    return 0.0;
  }
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  Float64 result = (*(double (**)(uint64_t))(*(void *)FileImpl + 96))(FileImpl);
  if (fabs(result) < 0.0000001)
  {
    uint64_t v4 = *((void *)this + 121);
    if (v4)
    {
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&time);
      return CMTimeGetSeconds(&time);
    }
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::getDurationInFrames(OZ3DEngineSceneFile *this)
{
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this)) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this);
  if (result)
  {
    if (!OZ3DEngineSceneFile::getFileImpl(this)) {
      return 1;
    }
    uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 56))(FileImpl)) {
      return 1;
    }
    double OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    return (OriginalFileDurationInSeconds
                        * (*(double (**)(OZ3DEngineSceneFile *))(*(void *)this + 1328))(this));
  }
  return result;
}

Float64 OZ3DEngineSceneFile::getMaximumDuration(OZ3DEngineSceneFile *this)
{
  uint64_t v2 = *((void *)this + 121);
  if (OZ3DEngineSceneFile::getFileImpl(this)) {
    return OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this) * *(double *)(v2 + 368);
  }
  else {
    return 1.0;
  }
}

double OZ3DEngineSceneFile::getPixelAspectRatio(OZ3DEngineSceneFile *this)
{
  return 1.0;
}

uint64_t OZ3DEngineSceneFile::getNumPolygons(OZ3DEngineSceneFile *this)
{
  if (((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this) & 1) != 0
    || !OZ3DEngineSceneFile::getFileImpl(this))
  {
    return 0;
  }
  uint64_t FileImpl = (OZ3DEngineSceneFileImpl *)OZ3DEngineSceneFile::getFileImpl(this);

  return OZ3DEngineSceneFileImpl::getNumPolygons(FileImpl);
}

void OZ3DEngineSceneFile::setAbsoluteFileURL(OZ3DEngineSceneFile *this, PCURL *a2)
{
}

uint64_t OZ3DEngineSceneFile::updateModifiedDate(OZ3DEngineSceneFile *this)
{
  uint64_t result = OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)FileImpl + 72))(FileImpl);
    if (*((_DWORD *)this + 384) == v4)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 384) = v4;
      return 1;
    }
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::updateAssociatedResourcesAvailable(OZ3DEngineSceneFile *this)
{
  uint64_t result = OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)OZ3DEngineSceneFile::getFileImpl(this) + 80);
    return v3();
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::updateMissingFile(const __CFURL ***this)
{
  if (OZ3DEngineSceneFile::getFileImpl((OZ3DEngineSceneFile *)this) || !this[193])
  {
    uint64_t result = ((uint64_t (*)(const __CFURL ***))(*this)[179])(this);
    if (result)
    {
      OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
      return 0;
    }
  }
  else
  {
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 1);
    PCURL::getAsURLString(this[193], (PCURL *)&v3);
    PCString::set((PCString *)this + 196, &v3);
    PCString::~PCString(&v3);
    return 1;
  }
  return result;
}

void sub_1B7C575CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZ3DEngineSceneFile::hasVideo()
{
  return 0;
}

uint64_t OZ3DEngineSceneFile::numAudioTracks(OZ3DEngineSceneFile *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFile::supportsAnimation(OZ3DEngineSceneFile *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)OZ3DEngineSceneFile::getFileImpl(this) + 40);

  return v1();
}

uint64_t OZ3DEngineSceneFile::getAssociatedFileURLs(OZ3DEngineSceneFile *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)OZ3DEngineSceneFile::getFileImpl(this) + 88);

  return v1();
}

uint64_t OZ3DEngineSceneFile::dirty(OZ3DEngineSceneFile *this)
{
  uint64_t result = OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    PCString v3 = *(uint64_t (**)(void))(*(void *)OZ3DEngineSceneFile::getFileImpl(this) + 16);
    return v3();
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::dirty(OZ3DEngineSceneFile *this)
{
  return OZ3DEngineSceneFile::dirty((OZ3DEngineSceneFile *)((char *)this - 16));
}

void OZ3DEngineSceneFile::get3DEngineSceneElements(OZ3DEngineSceneFile *this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  PCString v3 = (OZScene *)*((void *)this + 121);
  if (v3)
  {
    DependantNodes = (void *)OZScene::getDependantNodes(v3, *((_DWORD *)this + 20));
    if (DependantNodes)
    {
      int v6 = DependantNodes + 1;
      PCString v7 = (void *)*DependantNodes;
      if ((void *)*DependantNodes != DependantNodes + 1)
      {
        do
        {
          Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
          if (Node)
          {
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v12 = a2[1];
              unint64_t v11 = (unint64_t)a2[2];
              if ((unint64_t)v12 >= v11)
              {
                uint64_t v14 = ((char *)v12 - (unsigned char *)*a2) >> 3;
                if ((unint64_t)(v14 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v15 = v11 - (void)*a2;
                uint64_t v16 = v15 >> 2;
                if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
                  uint64_t v16 = v14 + 1;
                }
                if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v17 = v16;
                }
                if (v17) {
                  uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v17);
                }
                else {
                  uint64_t v18 = 0;
                }
                double v19 = &v18[8 * v14];
                *(void *)double v19 = v10;
                long long v13 = v19 + 8;
                double v21 = (char *)*a2;
                uint64_t v20 = (char *)a2[1];
                if (v20 != *a2)
                {
                  do
                  {
                    uint64_t v22 = *((void *)v20 - 1);
                    v20 -= 8;
                    *((void *)v19 - 1) = v22;
                    v19 -= 8;
                  }
                  while (v20 != v21);
                  uint64_t v20 = (char *)*a2;
                }
                *a2 = v19;
                a2[1] = v13;
                a2[2] = &v18[8 * v17];
                if (v20) {
                  operator delete(v20);
                }
              }
              else
              {
                *uint64_t v12 = v9;
                long long v13 = v12 + 1;
              }
              a2[1] = v13;
            }
          }
          double v23 = (void *)v7[1];
          if (v23)
          {
            do
            {
              long long v24 = v23;
              double v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              long long v24 = (void *)v7[2];
              BOOL v25 = *v24 == (void)v7;
              PCString v7 = v24;
            }
            while (!v25);
          }
          PCString v7 = v24;
        }
        while (v24 != v6);
      }
    }
  }
}

void sub_1B7C578C4(_Unwind_Exception *exception_object)
{
  PCString v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::didFinishLoadingIntoScene(OZ3DEngineSceneFile *this)
{
  return OZSceneNodeFile::didFinishLoadingIntoScene((OZ3DEngineSceneFile *)((char *)this - 16));
}

uint64_t OZ3DEngineSceneFile::getNaturalDurationFlags(OZ3DEngineSceneFile *this)
{
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 56))(FileImpl)) {
    return 1;
  }
  else {
    return 6;
  }
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::getNaturalDurationFlags(OZ3DEngineSceneFile *this)
{
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl((OZ3DEngineSceneFile *)((char *)this - 16));
  if ((*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 56))(FileImpl)) {
    return 1;
  }
  else {
    return 6;
  }
}

double OZ3DEngineSceneFile::getNaturalDuration@<D0>(OZ3DEngineSceneFile *this@<X0>, __n128 *a2@<X8>)
{
  if (!(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this))
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    __n128 v5 = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    unint64_t v6 = *(void *)(v7 + 16);
    goto LABEL_5;
  }
  uint64_t FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)FileImpl + 56))(FileImpl))
  {
    __n128 v5 = *(__n128 *)((char *)this + 232);
    *a2 = v5;
    unint64_t v6 = *((void *)this + 31);
LABEL_5:
    a2[1].n128_u64[0] = v6;
    return v5.n128_f64[0];
  }
  PCString v8 = (OZSceneSettings *)((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this) + 336);

  v5.n128_u64[0] = OZSceneSettings::getFrameDuration(v8, a2).n128_u64[0];
  return v5.n128_f64[0];
}

double non-virtual thunk to'OZ3DEngineSceneFile::getNaturalDuration@<D0>(OZ3DEngineSceneFile *this@<X0>, __n128 *a2@<X8>)
{
  return OZ3DEngineSceneFile::getNaturalDuration((OZ3DEngineSceneFile *)((char *)this - 16), a2);
}

double OZ3DEngineSceneFile::get3DFileTime@<D0>(OZ3DEngineSceneFile *this@<X0>, const CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 640))(this);
  (*(void (**)(CMTime *__return_ptr))(v5 + 712))(&v7);
  *a3 = *a2;
  CMTime v8 = v7;
  CMTime v9 = *a2;
  PC_CMTimeSaferAdd(&v9, &v8, (uint64_t)&v10);
  double result = *(double *)&v10;
  *(_OWORD *)&a3->CMTimeValue value = v10;
  a3->CMTimeEpoch epoch = v11;
  return result;
}

uint64_t OZ3DEngineSceneFile::writeBody(OZ3DEngineSceneFile *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, int a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZ3DEngineSceneFileScope);
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this)) {
    BOOL v51 = *(unsigned char *)(*(void *)((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this)
  }
                               + 1584)
                   + 160) != 0;
  else {
    BOOL v51 = 0;
  }
  int v53 = a4;
  *(_DWORD *)int v54 = a5;
  unsigned int v52 = a3;
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this)
    && !*(_DWORD *)(*(void *)((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this) + 1584)
                  + 320))
  {
    if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this)
      && (long long v10 = (const __CFURL **)*((void *)this + 193)) != 0)
    {
      PCURL::getAsURLString(v10, (PCURL *)v67);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v67);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      CMTimeEpoch v11 = (PCString *)v67;
    }
    else
    {
      (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(void *)this + 1272))(&v66, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v66);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      CMTimeEpoch v11 = &v66;
    }
    PCString::~PCString(v11);
    char v55 = 1;
  }
  else
  {
    char v55 = 0;
  }
  if (v12 && ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this) & 1) == 0)
  {
    URL = (const __CFURL **)PCXMLWriteStream::getURL(v12);
    PCURL::getAsFileSystemString(URL, &v65);
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(void *)this + 1264))(&v64, this);
    uint64_t v14 = (CFURLRef *)PCXMLWriteStream::getURL(v12);
    PCURL::getContainingFolderAsURLString(v14, (PCURL *)&v63);
    uint64_t v15 = PCString::cf_str(&v65);
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v15, @"/");
    unint64_t v17 = PCString::cf_str(&v64);
    CFArrayRef v18 = CFStringCreateArrayBySeparatingStrings(0, v17, @"/");
    int Count = CFArrayGetCount(ArrayBySeparatingStrings);
    int v20 = CFArrayGetCount(v18);
    int v21 = v20;
    if (Count >= v20) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = Count;
    }
    if ((int)v22 >= 1)
    {
      CFIndex v23 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v23);
        CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(v18, v23);
        if (CFStringCompare(ValueAtIndex, v25, 1uLL)) {
          break;
        }
        if (v22 == ++v23) {
          goto LABEL_23;
        }
      }
      LODWORD(v22) = v23;
      if (!v23) {
        goto LABEL_34;
      }
LABEL_23:
      if (v22 != 1
        || (CFStringRef v26 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v26)))
      {
        PCSharedCount::PCSharedCount(&v62);
        if (~v22 + Count >= 1)
        {
          int v27 = Count - v22;
          do
          {
            PCString::append((PCString *)&v62, "../");
            --v27;
          }
          while (v27 > 1);
        }
        if ((int)v22 < v21)
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t v29 = CFArrayGetValueAtIndex(v18, v22 + v28);
            PCURL::PCURL((PCURL *)&v61, v29);
            PCString::append((PCString *)&v62, &v61);
            PCString::~PCString(&v61);
            if (v21 - 1 > (int)v22 + (int)v28) {
              PCString::append((PCString *)&v62, "/");
            }
            ++v28;
          }
          while ((int)v22 + (int)v28 < v21);
        }
        PCURL::PCURL((PCURL *)&v61, (const PCString *)&v62, 0);
        PCSharedCount::PCSharedCount(&v60);
        PCURL::getAsURLString((const __CFURL **)&v61, (PCURL *)&v59);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v59);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        PCString::~PCString(&v59);
        PCString::~PCString((PCString *)&v60);
        PCURL::~PCURL((PCURL *)&v61);
        PCString::~PCString((PCString *)&v62);
      }
    }
LABEL_34:
    CFRelease(ArrayBySeparatingStrings);
    CFRelease(v18);
    PCString::~PCString(&v63);
    PCString::~PCString(&v64);
    PCString::~PCString(&v65);
  }
  if (v55) {
    return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
  }
  if (!(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this))
  {
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(void *)this + 1272))(&v65, this);
    if (v12)
    {
      int v32 = (const __CFURL **)PCXMLWriteStream::getURL(v12);
      PCURL::getAsURLString(v32, (PCURL *)&v64);
      uint64_t v33 = PCString::cf_str(&v64);
      CFArrayRef v34 = CFStringCreateArrayBySeparatingStrings(0, v33, @"/");
      unint64_t v35 = PCString::cf_str(&v65);
      CFArrayRef v36 = CFStringCreateArrayBySeparatingStrings(0, v35, @"/");
      int v37 = CFArrayGetCount(v34);
      if ((int)CFArrayGetCount(v36) >= v37)
      {
        if (v37 < 2)
        {
          BOOL v38 = 0;
        }
        else
        {
          CFIndex v41 = 0;
          uint64_t v42 = v37 - 1;
          if (v42 <= 1) {
            uint64_t v42 = 1;
          }
          uint64_t v43 = v42 - 1;
          do
          {
            CFStringRef v44 = (const __CFString *)CFArrayGetValueAtIndex(v34, v41);
            CFStringRef v45 = (const __CFString *)CFArrayGetValueAtIndex(v36, v41);
            CFComparisonResult v46 = CFStringCompare(v44, v45, 1uLL);
            BOOL v38 = v46 != kCFCompareEqualTo;
            if (v46) {
              break;
            }
          }
          while (v43 != v41++);
        }
      }
      else
      {
        BOOL v38 = 1;
      }
      CFRelease(v34);
      CFRelease(v36);
      PCString::~PCString(&v64);
    }
    else
    {
      BOOL v38 = 0;
    }
    PCString::PCString(&v64, "Contents/LibraryContent");
    if (*((unsigned char *)this + 1540))
    {
      int v48 = PCString::find(&v65, &v64);
      int v49 = v51;
      if (v48 >= 0) {
        int v49 = 1;
      }
      if (((v38 | v49) & 1) == 0) {
        goto LABEL_64;
      }
    }
    else if (!v51 && !v38)
    {
LABEL_64:
      PCString::~PCString(&v64);
      uint64_t v31 = &v65;
      goto LABEL_65;
    }
    PCString::PCString(&v56, &v65);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v56);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v56);
    goto LABEL_64;
  }
  uint64_t v30 = (const __CFURL **)*((void *)this + 194);
  if (v30)
  {
    PCURL::getAsURLString(v30, (PCURL *)v58);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v58);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    uint64_t v31 = (PCString *)v58;
LABEL_65:
    PCString::~PCString(v31);
    return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
  }
  unint64_t v39 = (const __CFURL **)*((void *)this + 193);
  char v40 = !v51;
  if (!v39) {
    char v40 = 1;
  }
  if ((v40 & 1) == 0)
  {
    PCURL::getAsURLString(v39, (PCURL *)v57);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v57);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    uint64_t v31 = (PCString *)v57;
    goto LABEL_65;
  }
  return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
}

void sub_1B7C58580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,PCString a22,PCString a23,PCString a24,PCString a25,PCString a26,PCString a27,PCString a28)
{
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::writeBody(OZ3DEngineSceneFile *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, int a5)
{
  return OZ3DEngineSceneFile::writeBody((OZ3DEngineSceneFile *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZ3DEngineSceneFile::parseBegin(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::parseBegin(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZ3DEngineSceneFile::parseEnd(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::parseEnd(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZ3DEngineSceneFile::parseElement(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v26);
  uint64_t v6 = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(void *)this + 272))(this);
  v8 = v6 && (uint64_t v7 = *(void *)(v6 + 1584)) != 0 && *(unsigned char *)(v7 + 160) != 0;
  *((unsigned char *)this + 1540) = 1;
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  int v9 = *((_DWORD *)a3 + 2);
  if (v9 != 2)
  {
    if (v9 == 1
      && (*((unsigned char *)this + 1541)
       || (*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this))
      && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
    {
      PCURL::PCURL((PCURL *)v25, (const PCString *)&v26, 0);
      if ((*(unsigned int (**)(OZ3DEngineSceneFile *, unsigned char *))(*(void *)this + 1400))(this, v25))
      {
        *((unsigned char *)this + 1541) = 0;
        if (*((unsigned char *)this + 1540)) {
          char v10 = 1;
        }
        else {
          char v10 = v8;
        }
        if ((v10 & 1) == 0) {
          (*(void (**)(OZ3DEngineSceneFile *))(*(void *)this + 104))(this);
        }
      }
      PCURL::~PCURL((PCURL *)v25);
    }
    goto LABEL_33;
  }
  if (!*((unsigned char *)this + 1541)
    && !(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this))
  {
    goto LABEL_33;
  }
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = v11;
  if (!PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26)) {
    goto LABEL_33;
  }
  long long v13 = PCString::cf_str((PCString *)&v26);
  CFStringRef v14 = CFURLCreateStringByReplacingPercentEscapes(0, v13, &stru_1F119C770);
  PCURL::PCURL((PCURL *)&v24, v14);
  PCURL::PCURL((PCURL *)v25, &v24, 0);
  PCString::~PCString(&v24);
  int v15 = (*(uint64_t (**)(OZ3DEngineSceneFile *, unsigned char *))(*(void *)this + 1416))(this, v25);
  PCURL::~PCURL((PCURL *)v25);
  if (!(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(void *)this + 1432))(this)
    || !*(void *)PCXMLReadStream::getURL(v12))
  {
    if (!v15) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  URL = (CFURLRef *)PCXMLReadStream::getURL(v12);
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
  CFURLRef v18 = (const __CFURL *)MEMORY[0x1BA9BE3F0](0, v14, 0, 0, PathComponent);
  CFURLRef v19 = CFURLCopyAbsoluteURL(v18);
  PCURL::PCURL((PCURL *)v25, v19);
  char v20 = (*(uint64_t (**)(OZ3DEngineSceneFile *, unsigned char *))(*(void *)this + 1400))(this, v25);
  if (*((unsigned char *)this + 1540)) {
    char v20 = (*(uint64_t (**)(OZ3DEngineSceneFile *, unsigned char *))(*(void *)this + 1416))(this, v25);
  }
  char v21 = v20;
  CFRelease(v14);
  CFRelease(PathComponent);
  CFRelease(v18);
  CFRelease(v19);
  PCURL::~PCURL((PCURL *)v25);
  if (v21)
  {
LABEL_28:
    *((unsigned char *)this + 1541) = 0;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
    if (*((unsigned char *)this + 1540)) {
      char v22 = 1;
    }
    else {
      char v22 = v8;
    }
    if ((v22 & 1) == 0) {
      (*(void (**)(OZ3DEngineSceneFile *))(*(void *)this + 104))(this);
    }
  }
LABEL_33:
  PCString::~PCString((PCString *)&v26);
  return 1;
}

void sub_1B7C58B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12)
{
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::parseElement(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZ3DEngineSceneFile::getLayers(OZ3DEngineSceneFile *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFile::getAudioTracks(OZ3DEngineSceneFile *this)
{
  return 0;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneFile::getWorkingColorDescription@<X0>(OZ3DEngineSceneFile *this@<X0>, uint64_t a2@<X8>)
{
  return OZSceneNode::getWorkingColorDescription((OZ3DEngineSceneFile *)((char *)this - 1576), a2);
}

float non-virtual thunk to'OZ3DEngineSceneFile::getBlendingGamma(OZ3DEngineSceneFile *this)
{
  return OZSceneNode::getBlendingGamma((OZ3DEngineSceneFile *)((char *)this - 1576));
}

void OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZRigWidget::OZRigWidget(this, a2, a3, a4);
  *(void *)int v4 = &unk_1F1149820;
  *((void *)v4 + 2) = &unk_1F1149CF8;
  *((void *)v4 + 6) = &unk_1F1149F50;
  OZRigWidget::setWidgetType(v4, 4);
}

void sub_1B7C58CC4(_Unwind_Exception *a1)
{
  OZRigWidget::~OZRigWidget(v1);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this, const OZRigWidgetAspectRatio *a2, char a3)
{
  OZRigWidget::OZRigWidget(this, a2, a3);
  *PCString v3 = &unk_1F1149820;
  int v3[2] = &unk_1F1149CF8;
  v3[6] = &unk_1F1149F50;
}

void non-virtual thunk to'OZRigWidgetAspectRatio::~OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this)
{
}

{
  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

void OZRigWidgetAspectRatio::~OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this)
{
  OZRigWidget::~OZRigWidget(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRigWidgetAspectRatio::parseEnd(OZRigWidgetAspectRatio *this, PCSerializerReadStream *a2)
{
  int v4 = (uint64_t *)*((void *)this + 191);
  uint64_t v5 = (uint64_t *)*((void *)this + 192);
  if (v4 != v5)
  {
    uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v7 = *v4;
      OZChannel::getValueAsDouble((OZChannel *)(*v4 + 136), v6, 0.0);
      OZRigWidgetAspectRatio::GetNameForAspectRatio(v8, (PCSharedCount *)&v10);
      OZChannelBase::setName((OZChannelBase *)(v7 + 8), &v10, 0);
      PCString::~PCString(&v10);
      ++v4;
    }
    while (v4 != v5);
  }
  return OZRigWidget::parseEnd((OZChannel **)this, a2);
}

void sub_1B7C58EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZRigWidgetAspectRatio::GetNameForAspectRatio(double a1@<D0>, PCSharedCount *a2@<X8>)
{
  {
    OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[0] = 0x3FF5555555555555;
    PCURL::PCURL((PCURL *)&unk_1EB9A0920, @"Rig Aspect Ratio 4:3");
    qword_1EB9A0928 = 0x3FF8000000000000;
    PCURL::PCURL((PCURL *)&unk_1EB9A0930, @"Rig Aspect Ratio 3:2");
    qword_1EB9A0938 = 0x3FFC71C71C71C71CLL;
    PCURL::PCURL((PCURL *)&unk_1EB9A0940, @"Rig Aspect Ratio 16:9");
    qword_1EB9A0948 = 0x3FFD22C3F35BA784;
    PCURL::PCURL((PCURL *)&unk_1EB9A0950, @"Rig Aspect Ratio 1.8:1");
    qword_1EB9A0958 = 0x3FF0000000000000;
    PCURL::PCURL((PCURL *)&unk_1EB9A0960, @"Rig Aspect Ratio 1:1");
    qword_1EB9A0968 = 0x3FE2000000000000;
    PCURL::PCURL((PCURL *)&unk_1EB9A0970, @"Rig Aspect Ratio 9:16");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_1B73F3000);
  }
  uint64_t v5 = 0;
  while (vabdd_f64(a1, *(double *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[v5]) >= 0.01)
  {
    v5 += 2;
    if (v5 == 12)
    {
      PCSharedCount::PCSharedCount(a2);
      PCURL::PCURL((PCURL *)&v8, @"Rig Aspect Ratio Custom Format");
      uint64_t v6 = PCString::cf_str(&v8);
      PCURL::PCURL((PCURL *)&v9, v6);
      PCString::~PCString(&v8);
      uint64_t v7 = PCString::createVerifiedFormatString(&v9, "%f");
      if (v7)
      {
        PCString::sprintf((PCString *)a2, v7, *(void *)&a1);
        free(v7);
      }
      PCString::~PCString(&v9);
      return;
    }
  }

  PCString::PCString((PCString *)a2, (const PCString *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[v5 + 1]);
}

void sub_1B7C59164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12)
{
}

uint64_t non-virtual thunk to'OZRigWidgetAspectRatio::parseEnd(OZRigWidgetAspectRatio *this, PCSerializerReadStream *a2)
{
  return OZRigWidgetAspectRatio::parseEnd((OZRigWidgetAspectRatio *)((char *)this - 48), a2);
}

uint64_t OZRigWidgetAspectRatio::didFinishLoadingIntoMotionEffect(OZRigWidgetAspectRatio *this)
{
  OZRigWidget::copyTargetChansToActiveSnapshot(this);

  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this);
}

uint64_t non-virtual thunk to'OZRigWidgetAspectRatio::didFinishLoadingIntoMotionEffect(OZRigWidgetAspectRatio *this)
{
  uint64_t v1 = (char *)this - 16;
  OZRigWidget::copyTargetChansToActiveSnapshot((OZRigWidgetAspectRatio *)((char *)this - 16));

  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)v1);
}

void OZRigWidgetAspectRatio::setTargetDisplayAspectRatio(OZRigWidgetAspectRatio *this, double a2, int a3)
{
  (*(void (**)(void, void, void, double))(**((void **)this + 136) + 712))(*((void *)this + 136), MEMORY[0x1E4F1FA48], 0, a2);
  uint64_t CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)this);
  if (CurrentSnapshot) {
    unsigned int v6 = *(_DWORD *)(CurrentSnapshot + 32);
  }
  else {
    unsigned int v6 = 0;
  }

  OZRigWidget::setActiveSnapshot(this, v6, a3);
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0xBu; i != -1; i -= 2)
    PCString::~PCString((PCString *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[i]);
}

void OZRigSnapshot::OZRigSnapshot(OZRigSnapshot *this, OZChannelFolder *a2, unsigned int a3)
{
  *(void *)this = &unk_1F1149FC0;
  unsigned int v6 = (OZChannelFolder *)((char *)this + 8);
  PCURL::PCURL((PCURL *)&v12, @"Rig Snapshot Root");
  OZChannelFolder::OZChannelFolder(v6, &v12, a2, a3, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Rig Snapshot Value");
  Instance = (OZChannelImpl *)OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(v7);
  OZChannelDouble::OZChannelDouble((OZRigSnapshot *)((char *)this + 136), 0.0, &v12, v6, 1u, 0, Instance, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Rig Snapshot Interpolation Enum");
  PCURL::PCURL((PCURL *)&v11, @"Rig Snapshot Interpolation");
  PCString v10 = (OZChannelImpl *)OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(v9);
  OZChannelEnum::OZChannelEnum((OZRigSnapshot *)((char *)this + 288), 1u, &v12, &v11, v6, 2u, 0, v10, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
}

void sub_1B7C59488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::OZRigSnapshot(OZRigSnapshot *this, const OZRigSnapshot *a2, OZChannelFolder *a3)
{
  *(void *)this = &unk_1F1149FC0;
  uint64_t v5 = (OZChannel *)((char *)this + 136);
  unsigned int v6 = (OZChannelFolder *)((char *)this + 8);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8), (const OZChannelFolder *)((char *)a2 + 8), a3);
  OZChannel::OZChannel(v5, (const OZChannelBase *)((char *)a2 + 136), v6);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZRigSnapshot *)((char *)this + 288), (const OZRigSnapshot *)((char *)a2 + 288), v6);
}

void sub_1B7C595AC(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::~OZRigSnapshot(OZRigSnapshot *this)
{
  *(void *)this = &unk_1F1149FC0;
  uint64_t v2 = (OZChannelBase *)((char *)this + 8);
  PCString v3 = (OZChannelFolder *)*((void *)this + 7);
  if (v3) {
    OZChannelFolder::removeDescendant(v3, v2);
  }
  OZChannelEnum::~OZChannelEnum((OZRigSnapshot *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)v2);
}

{
  uint64_t vars8;

  OZRigSnapshot::~OZRigSnapshot(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZRigSnapshot::applyInterpolation(OZRigSnapshot *this, double a2)
{
  double v3 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 288), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt)
  {
    if (ValueAsInt == 2)
    {
      double v13 = 0.0;
      PCMath::easeInOut(&v13, a2, 0.5, 0.5, 0.0, 1.0, 0, v6);
      return v13;
    }
    else
    {
      if (ValueAsInt != 1)
      {
        PCPrint("File %s, line %d should not have been reached:\n\t", v5, (uint64_t)v6, v7, v8, v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigSnapshot.cpp");
        pcAbortImpl();
      }
      return a2;
    }
  }
  return v3;
}

uint64_t OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(OZRigSnapshot::OZRigSnapshot_valueChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::OZRigSnapshot_valueChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::OZRigSnapshot_valueChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigSnapshot::OZRigSnapshot_valueChanImpl::_OZRigSnapshot_valueChan;
}

void std::__call_once_param<std::tuple<OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigSnapshot::OZRigSnapshot_valueChanImpl::_OZRigSnapshot_valueChan) {
    operator new();
  }
}

void sub_1B7C597EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::OZRigSnapshot_valueChanImpl::OZRigSnapshot_valueChanImpl(OZRigSnapshot::OZRigSnapshot_valueChanImpl *this)
{
}

void sub_1B7C598C4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::OZRigSnapshot_interpolationChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::OZRigSnapshot_interpolationChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::_OZRigSnapshot_interpolationChan;
}

void std::__call_once_param<std::tuple<OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::_OZRigSnapshot_interpolationChan) {
    operator new();
  }
}

void sub_1B7C599A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::OZRigSnapshot_interpolationChanImpl(OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *this)
{
}

void sub_1B7C59A74(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

double FaceTextureDOD@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1B8382020;
  return result;
}

uint64_t ApplyMetalTextureToNode(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "geometry"), "firstMaterial");
  [v5 setLightingModelName:a3];
  objc_msgSend((id)objc_msgSend(v5, "specular"), "setIntensity:", 0.2);
  objc_msgSend((id)objc_msgSend(v5, "diffuse"), "setContents:", *a2);
  [v5 setLitPerPixel:1];

  return [v5 setDoubleSided:1];
}

uint64_t ImageSourceTransformPairs@<X0>(OZChannelBase *this@<X1>, uint64_t result@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)result != *(void *)(result + 8)) {
    MakeImageSourceTransformPair(**(OZChannelImageWithOptions ***)result, this);
  }
  return result;
}

void sub_1B7C5A444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  PCSharedCount::~PCSharedCount(v9);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void MakeImageSourceTransformPair(OZChannelImageWithOptions *a1, OZChannelBase *this)
{
  OZChannelBase::setRangeName(this, &v2);
  operator new();
}

void sub_1B7C5A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v7.var0 = va_arg(va1, PC_Sp_counted_base *);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6A0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x600]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x6F0]);
  _Unwind_Resume(a1);
}

uint64_t HGNodeForImageSourceTransformPair@<X0>(LiAgent *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  LiAgent::getHelium(this, *(LiImageSource **)a2, a4);
  PCSharedCount v7 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v7);
  (*(void (**)(HGXForm *, void, uint64_t))(*(void *)v7 + 120))(v7, 0, *a4);
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  *(void *)&v13[16] = 0x3FF0000000000000;
  uint64_t v11 = 0x3FF0000000000000;
  long long v12 = 0u;
  *(_OWORD *)double v13 = 0u;
  float64x2_t v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v11, (float64x2_t)COERCE_UNSIGNED_INT64((double)*(int *)(a3 + 8) * 0.5), 0.0 - (double)*(int *)(a3 + 12) * 0.5, 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v11, (double *)(a2 + 16));
  *(float64x2_t *)&v13[8] = vnegq_f64(*(float64x2_t *)&v13[8]);
  float64x2_t v14 = vnegq_f64(v14);
  PGHelium::convertPCMatrix44((long long *)&v11, &v10);
  (*(void (**)(HGXForm *, HGTransform *))(*(void *)v7 + 576))(v7, v10);
  uint64_t v8 = *a4;
  if ((HGXForm *)*a4 != v7)
  {
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    *a4 = (uint64_t)v7;
    (*(void (**)(HGXForm *))(*(void *)v7 + 16))(v7);
  }
  if (v10) {
    (*(void (**)(HGTransform *))(*(void *)v10 + 24))(v10);
  }
  return (*(uint64_t (**)(HGXForm *))(*(void *)v7 + 24))(v7);
}

void sub_1B7C5A8CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__push_back_slow_path<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  PCString v24 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (PCSharedCount *)&v10[144 * v4];
  v21[0] = v10;
  v21[1] = v11;
  char v22 = v11;
  CFIndex v23 = &v10[144 * v9];
  v11->var0 = *(PC_Sp_counted_base **)a2;
  PCSharedCount::PCSharedCount(v11 + 1, (const PCSharedCount *)(a2 + 8));
  long long v12 = &v10[144 * v4];
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v12 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v12 + 2) = v15;
  *((_OWORD *)v12 + 3) = v13;
  *((_OWORD *)v12 + 4) = v14;
  long long v16 = *(_OWORD *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 96);
  long long v18 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v12 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v12 + 8) = v18;
  *((_OWORD *)v12 + 5) = v16;
  *((_OWORD *)v12 + 6) = v17;
  v22 += 18;
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__swap_out_circular_buffer(a1, v21);
  uint64_t v19 = a1[1];
  std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer((uint64_t)v21);
  return v19;
}

void sub_1B7C5AAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(a7 + v11 - 144) = *(void *)(a3 + v11 - 144);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a7 + v11 - 136), (const PCSharedCount *)(a3 + v11 - 136));
      long long v13 = *(_OWORD *)(a3 + v11 - 128);
      long long v14 = *(_OWORD *)(a3 + v11 - 112);
      long long v15 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v15;
      *(_OWORD *)(v12 - 128) = v13;
      *(_OWORD *)(v12 - 112) = v14;
      long long v16 = *(_OWORD *)(a3 + v11 - 64);
      long long v17 = *(_OWORD *)(a3 + v11 - 48);
      long long v18 = *(_OWORD *)(a3 + v11 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = v18;
      *(_OWORD *)(v12 - 64) = v16;
      *(_OWORD *)(v12 - 48) = v17;
      v11 -= 144;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B7C5ABFC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 += 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void OZRigBehavior::OZRigBehavior(OZRigBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F114A0E0;
  v5[2] = &unk_1F114A428;
  v5[6] = &unk_1F114A680;
  v5[42] = &unk_1F114A6D8;
  v5[67] = &unk_1F114A700;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 112));
  PCURL::PCURL((PCURL *)&v7, @"Rig Behavior Widget Ref");
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZRigBehavior *)((char *)this + 1000), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Rig Behavior Snapshots");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZRigBehavior *)((char *)this + 1208), &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 2u);
  PCString::~PCString(&v7);
  *((_WORD *)this + 668) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  __n128 v6 = (__n128)xmmword_1B7E77B80;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1000, &v6);
  *((unsigned char *)this + 1201) = 0;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1000, 0);
  *((unsigned char *)this + 888) = 0;
}

void sub_1B7C5AE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZRigBehavior::OZRigBehavior(OZRigBehavior *this, const OZRigBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *uint64_t v5 = &unk_1F114A0E0;
  v5[2] = &unk_1F114A428;
  v5[6] = &unk_1F114A680;
  v5[42] = &unk_1F114A6D8;
  v5[67] = &unk_1F114A700;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 112));
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZRigBehavior *)((char *)this + 1000), (const OZRigBehavior *)((char *)a2 + 1000), (OZChannelFolder *)((char *)this + 56));
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZRigBehavior *)((char *)this + 1208), (const OZRigBehavior *)((char *)a2 + 1208), (OZChannelFolder *)((char *)this + 56));
  *((_WORD *)this + 668) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  long long v6 = xmmword_1B7E77B80;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1000, (__n128 *)&v6);
  *((unsigned char *)this + 1201) = 0;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1000, 0);
  OZRigBehavior::copy(this, a2);
  *((unsigned char *)this + 888) = 0;
}

void sub_1B7C5B004(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v3);
  PCSharedMutex::~PCSharedMutex(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigBehavior::copy(OZRigBehavior *this, const OZBehavior *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    OZChanObjectRefWithPicker::operator=((uint64_t)this + 1000, result + 1000);
    uint64_t result = OZChannelFolder::operator=((uint64_t)this + 1208);
    *((unsigned char *)this + 1336) = *(unsigned char *)(v4 + 1336);
  }
  return result;
}

void OZRigBehavior::~OZRigBehavior(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1F114A0E0;
  *(void *)&this->__m_.__opaque[8] = &unk_1F114A428;
  *(void *)&this->__m_.__opaque[40] = &unk_1F114A680;
  *(void *)&this[5].__m_.__opaque[8] = &unk_1F114A6D8;
  *(void *)&this[8].__m_.__opaque[16] = &unk_1F114A700;
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelVaryingFolder *)&this[18].__m_.__opaque[48]);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanObjectRefWithPicker *)&this[15].__m_.__opaque[32]);
  PCSharedMutex::~PCSharedMutex(this + 14);

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)this);
}

{
  uint64_t vars8;

  OZRigBehavior::~OZRigBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRigBehavior::~OZRigBehavior(OZRigBehavior *this)
{
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 48));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 336));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRigBehavior::parseBegin(OZRigBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 26);
  if (v2 < 5 || (v2 == 5 ? (BOOL v3 = *((_DWORD *)a2 + 27) > 0xCu) : (BOOL v3 = 1), !v3)) {
    *((unsigned char *)this + 1336) = 1;
  }
  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZRigBehavior::parseBegin(OZRigBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 26);
  if (v2 < 5 || (v2 == 5 ? (BOOL v3 = *((_DWORD *)a2 + 27) > 0xCu) : (BOOL v3 = 1), !v3)) {
    *((unsigned char *)this + 1288) = 1;
  }
  return OZSingleChannelBehavior::parseBegin((OZRigBehavior *)((char *)this - 48), a2);
}

OZChannelBase *OZRigBehavior::didFinishLoadingIntoScene(OZRigBehavior *this)
{
  unsigned int v2 = (char *)this + 16;
  OZRigBehavior::registerWithWidget(this);
  OZRigBehavior::adjustToSnapshotCount(this);
  if (*((unsigned char *)this + 1336))
  {
    OZRigBehavior::adjustTo2DChannelsPromotedTo3D(this);
    *((unsigned char *)this + 1336) = 0;
  }
  Widget = OZRigBehavior::getWidget(this);
  uint64_t result = (OZChannelBase *)(*(uint64_t (**)(char *, void, uint64_t))(*((void *)this + 2) + 24))(v2, 0, 1);
  if ((Widget != 0) != result)
  {
    uint64_t v5 = *((void *)this + 2);
    long long v6 = (OZChannelBase *)((char *)this + 56);
    if (Widget)
    {
      (*(void (**)(char *, uint64_t))(v5 + 32))(v2, 1);
      return OZChannelBase::resetFlag(v6, 8, 1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 40))(v2, 1);
      return OZChannelBase::setFlag(v6, 8, 1);
    }
  }
  return result;
}

void *OZRigBehavior::registerWithWidget(OZRigBehavior *this)
{
  uint64_t result = (void *)OZSingleChannelBehavior::getChanBase(this);
  if (result)
  {
    uint64_t result = OZRigBehavior::getWidget(this);
    if (result)
    {
      return OZRigWidget::registerRigBehavior(result, (uint64_t)this);
    }
  }
  return result;
}

void OZRigBehavior::adjustToSnapshotCount(OZRigBehavior *this)
{
  Widget = (OZRigWidget *)OZRigBehavior::getWidget(this);
  if (OZSingleChannelBehavior::getChanBase(this) && Widget)
  {
    int v3 = OZRigWidget::numberOfSnapshots(Widget);
    uint64_t v4 = (void *)*((void *)this + 165);
    if (v4) {
      uint64_t v4 = (void *)((v4[1] - *v4) >> 3);
    }
    if (v3 != v4)
    {
      uint64_t v5 = (uint64_t *)*((void *)Widget + 191);
      for (uint64_t i = (uint64_t *)*((void *)Widget + 192); v5 != i; ++v5)
      {
        uint64_t v7 = *v5;
        if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), *(_DWORD *)(*v5 + 32))) {
          OZRigBehavior::createDefaultSnapshotHelper(this, *(_DWORD *)(v7 + 32), 0);
        }
      }
      OZRigBehavior::sortSnapshotChannels(this);
    }
  }
}

void OZRigBehavior::adjustTo2DChannelsPromotedTo3D(OZRigBehavior *this)
{
  uint64_t ChanBase = OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase)
  {
    uint64_t v3 = *((void *)this + 165);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)v3;
      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = v5 - *(void *)v3;
      if ((v6 & 0x7FFFFFFF8) != 0)
      {
        uint64_t v7 = (const OZChannelBase *)ChanBase;
        uint64_t v8 = *v4;
        unint64_t v9 = *(_DWORD **)(ChanBase + 8);
        int v11 = v9[2];
        int v10 = v9[3];
        int v13 = v9[4];
        int v12 = v9[5];
        BOOL v14 = v11 == 291593097 && v10 == -876591041;
        BOOL v15 = v14 && v13 == -1188129301;
        BOOL v16 = v15 && v12 == 209773980;
        if (v16
          && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v8 + 8) + 8), (int32x4_t)xmmword_1B8378B00)))) & 1) == 0|| (v11 == 1608349850 ? (BOOL v17 = v10 == -1900789225) : (BOOL v17 = 0), v17 ? (v18 = v13 == -1416984716) : (v18 = 0), v18 ? (v19 = v12 == -1370552087) : (v19 = 0), v19&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v8 + 8) + 8), (int32x4_t)xmmword_1B8378AB0)))) & 1) == 0))
        {
          CFStringRef v25 = 0;
          PCSharedCount v26 = 0;
          uint64_t v27 = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v25, v4, v5, v6 >> 3);
          OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 1208), 1);
          char v20 = v25;
          char v21 = v26;
          if (v25 != v26)
          {
            do
            {
              char v22 = *v20;
              DefaultSnapshotHelper = OZRigBehavior::createDefaultSnapshotHelper(this, (*v20)->var3, v7);
              double v24 = OZRigBehavior::copyValues(this, v22, DefaultSnapshotHelper);
              (*((void (**)(const OZChannelBase *, double))v22->var0 + 1))(v22, v24);
              ++v20;
            }
            while (v20 != v21);
            char v20 = v25;
          }
          if (v20)
          {
            PCSharedCount v26 = v20;
            operator delete(v20);
          }
        }
      }
    }
  }
}

void sub_1B7C5B79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *OZRigBehavior::getWidget(OZRigBehavior *this)
{
  uint64_t result = (void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1000));
  if (result)
  {
  }
  return result;
}

OZChannelBase *non-virtual thunk to'OZRigBehavior::didFinishLoadingIntoScene(OZRigBehavior *this)
{
  return OZRigBehavior::didFinishLoadingIntoScene((OZRigBehavior *)((char *)this - 16));
}

void *OZRigBehavior::didAddToNode(OZRigBehavior *this, OZSceneNode *a2)
{
  OZSingleChannelBehavior::didAddToNode(this, a2);

  return OZRigBehavior::registerWithWidget(this);
}

void OZRigBehavior::willRemove(OZRigBehavior *this)
{
  OZRigBehavior::unregisterWithWidget(this);

  OZSingleChannelBehavior::willRemove((PCString *)this);
}

void OZRigBehavior::unregisterWithWidget(OZRigBehavior *this)
{
  Widget = OZRigBehavior::getWidget(this);
  if (Widget)
  {
    OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
  }
}

void *OZRigBehavior::didAddSceneNodeToScene(OZRigBehavior *this, OZScene *a2)
{
  OZSingleChannelBehavior::didAddSceneNodeToScene(this, a2);

  return OZRigBehavior::registerWithWidget(this);
}

uint64_t OZRigBehavior::willRemoveSceneNodeFromScene(OZRigBehavior *this, OZScene *a2)
{
  OZRigBehavior::unregisterWithWidget(this);

  return OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
}

void OZRigBehavior::willDeleteObject(OZRigBehavior *this, OZObjectManipulator *a2)
{
  if ((OZObjectManipulator *)OZSingleChannelBehavior::getAffectedObject(this) == a2)
  {
    Widget = OZRigBehavior::getWidget(this);
    if (Widget) {
      OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
    }
  }

  OZSingleChannelBehavior::willDeleteObject(this, a2);
}

OZObjectManipulator *OZRigBehavior::didUndoDeleteOfObject(OZRigBehavior *this, OZObjectManipulator *a2)
{
  OZSingleChannelBehavior::didUndoDeleteOfObject(this, a2);
  uint64_t result = (OZObjectManipulator *)OZSingleChannelBehavior::getAffectedObject(this);
  if (result == a2)
  {
    return (OZObjectManipulator *)OZRigBehavior::registerWithWidget(this);
  }
  return result;
}

void OZRigBehavior::willDeleteMaterialLayer(OZRigBehavior *this, OZChannelBase *a2)
{
  uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase && OZChannelBase::isDescendantOf(ChanBase, a2)) {
    OZRigBehavior::unregisterWithWidget(this);
  }

  OZSingleChannelBehavior::willDeleteMaterialLayer(this, a2);
}

void OZRigBehavior::willDeleteChannel(OZRigBehavior *this, OZChannelBase *a2)
{
  uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase)
  {
    if (ChanBase == a2)
    {
      Widget = OZRigBehavior::getWidget(this);
      if (Widget) {
        OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
      }
    }
  }

  OZSingleChannelBehavior::willDeleteChannel((PCString *)this, a2);
}

OZChannelBase *OZRigBehavior::didUndoDeleteChannel(unsigned __int8 **this, OZChannelBase *a2)
{
  OZSingleChannelBehavior::didUndoDeleteChannel(this, a2);
  uint64_t result = (OZChannelBase *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
  if (result && result == a2)
  {
    return (OZChannelBase *)OZRigBehavior::registerWithWidget((OZRigBehavior *)this);
  }
  return result;
}

uint64_t OZRigBehavior::willUndoReorder(uint64_t this)
{
  *(unsigned char *)(this + 1337) = 1;
  return this;
}

uint64_t OZRigBehavior::didUndoReorder(uint64_t this)
{
  *(unsigned char *)(this + 1337) = 0;
  return this;
}

void OZRigBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  if (lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v5[136];
      uint64_t v7 = operator new(0x18uLL);
      v7[1] = a4;
      v7[2] = v6;
      uint64_t v8 = *a4;
      *uint64_t v7 = *a4;
      *(void *)(v8 + 8) = v7;
      *a4 = (uint64_t)v7;
      ++a4[2];
    }
  }
}

void *OZRigBehavior::getTimeExtent@<X0>(OZRigBehavior *this@<X0>, uint64_t a2@<X8>)
{
  Affecteduint64_t Object = (uint64_t *)OZSingleChannelBehavior::getAffectedObject(this);
  if (!AffectedObject)
  {
    uint64_t result = (void *)(*(uint64_t (**)(OZRigBehavior *))(*(void *)this + 328))(this);
    if (!result)
    {
      uint64_t v10 = MEMORY[0x1E4F1FA48];
      long long v11 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
      uint64_t v12 = *(void *)(v10 + 16);
      *(void *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = v11;
      *(void *)(a2 + 40) = v12;
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v5 = AffectedObject;
  uint64_t v6 = *AffectedObject;
  if (result)
  {
LABEL_8:
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 1128);
    return (void *)v9();
  }
  if (v8)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 608);
  }
  else
  {
    if (v13)
    {
      unint64_t v9 = *(uint64_t (**)(void))(*(void *)v13 + 592);
    }
    else
    {
      unint64_t v9 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t *))(v6 + 216))(v5) + 712);
    }
  }
  return (void *)v9();
}

void **OZRigBehavior::calcStaticHash(OZRigBehavior *a1, void *a2, uint64_t **a3)
{
  OZBehavior::calcStaticHash((uint64_t)a1, a2, a3);
  uint64_t result = (void **)OZRigBehavior::getWidget(a1);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*result[136] + 408);
    return (void **)v5();
  }
  return result;
}

void **non-virtual thunk to'OZRigBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZRigBehavior::calcStaticHash((OZRigBehavior *)(a1 - 16), a2, a3);
}

void *OZRigBehavior::calcHashForState(OZRigBehavior *a1, void *a2, CMTime *a3, uint64_t **a4)
{
  OZBehavior::calcHashForState((uint64_t)a1, a2, a3, a4);
  uint64_t result = OZRigBehavior::getWidget(a1);
  if (result)
  {
    uint64_t v8 = result[136];
    long long v9 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    return (void *)(*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)v8 + 448))(v8, a2, &v9);
  }
  return result;
}

void *non-virtual thunk to'OZRigBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZRigBehavior::calcHashForState((OZRigBehavior *)(a1 - 16), a2, a3, a4);
}

void OZRigBehavior::cacheCurrentSnapshotID(OZRigBehavior *this, const CMTime *a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 896);
  PCSharedMutex::lock((std::mutex *)this + 14);
  Widget = (OZRigWidget *)OZRigBehavior::getWidget(this);
  uint64_t v6 = (OZChannel **)Widget;
  if (Widget)
  {
    *((unsigned char *)this + 880) = OZRigWidget::doPassThrough(Widget, a2);
    OZRigWidget::getCurrentSnapshotIDs(v6, a2, (unsigned int *)this + 216, (unsigned int *)this + 217, (double *)this + 109);
    *((unsigned char *)this + 888) = 1;
  }
  PCSharedMutex::unlock(v4);
}

void sub_1B7C5BFF4(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZRigBehavior::clearCurrentSnapshotIDCache(std::mutex *this)
{
  unsigned int v2 = this + 14;
  PCSharedMutex::lock(this + 14);
  this[13].__m_.__opaque[48] = 0;
  PCSharedMutex::unlock(v2);
}

double OZRigBehavior::solveNode(std::mutex *this, int a2, const CMTime *a3, double a4, double a5)
{
  Widget = (OZChannel **)OZRigBehavior::getWidget((OZRigBehavior *)this);
  if (Widget)
  {
    uint64_t v10 = *(void **)&this[20].__m_.__opaque[32];
    if (v10)
    {
      if (((v10[1] - *v10) & 0x7FFFFFFF8) != 0)
      {
        long long v11 = Widget;
        PCSharedMutex::lock_shared(this + 14);
        if (this[13].__m_.__opaque[48])
        {
          int v12 = *(_DWORD *)&this[13].__m_.__opaque[24];
          int v13 = *(_DWORD *)&this[13].__m_.__opaque[28];
          double v14 = *(double *)&this[13].__m_.__opaque[32];
          int v15 = this[13].__m_.__opaque[40];
          PCSharedMutex::unlock_shared(this + 14);
          memset(&v19, 0, sizeof(v19));
          (*(void (**)(CMTime *__return_ptr))(**(void **)(*(void *)&this[5].__m_.__opaque[48] + 32)
                                                       + 336))(&v19);
          if (!v15)
          {
            v18[0] = v13;
            v18[1] = v12;
            double v17 = v14;
            return OZRigBehavior::getRiggedValue((OZRigBehavior *)this, a2, v12, v13, v14, &v19);
          }
        }
        else
        {
          PCSharedMutex::unlock_shared(this + 14);
          memset(&v19, 0, sizeof(v19));
          (*(void (**)(CMTime *__return_ptr))(**(void **)(*(void *)&this[5].__m_.__opaque[48] + 32)
                                                       + 336))(&v19);
          if ((OZRigWidget::doPassThrough((OZRigWidget *)v11, a3) & 1) == 0)
          {
            double v17 = 0.0;
            *(void *)BOOL v18 = 0;
            OZRigWidget::getCurrentSnapshotIDs(v11, &v19, &v18[1], v18, &v17);
            int v13 = v18[0];
            int v12 = v18[1];
            double v14 = v17;
            return OZRigBehavior::getRiggedValue((OZRigBehavior *)this, a2, v12, v13, v14, &v19);
          }
        }
      }
    }
  }
  return a5;
}

double OZRigBehavior::getRiggedValue(OZRigBehavior *this, int a2, int a3, int a4, double a5, const CMTime *a6)
{
  memset(&v41, 0, sizeof(v41));
  __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v38);
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 320))(&v37, TimeOffset);
  *(__n128 *)&v43.CMTimeValue value = v38;
  v43.CMTimeEpoch epoch = v39;
  CMTime v42 = v37;
  PC_CMTimeSaferSubtract(&v43, &v42, (uint64_t)&v40);
  CMTime v43 = *a6;
  CMTime v42 = v40;
  PC_CMTimeSaferAdd(&v43, &v42, (uint64_t)&v41);
  int v13 = (OZChannelFolder *)((char *)this + 1208);
  Descendant = (void *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a3);
  int v15 = Descendant;
  if (a5 != 0.0)
  {
    uint64_t v18 = OZChannelFolder::getDescendant(v13, a4);
    double v16 = 0.0;
    if (!v15) {
      return v16;
    }
    CMTime v19 = (const void *)v18;
    if (!v18) {
      return v16;
    }
    if ((v15[7] & 0x1000) != 0)
    {
      CFStringRef v25 = (const void *)OZChannelFolder::getDescendant(v23, a2);
      if (v25) {
      else
      }
        char v20 = 0;
      uint64_t v26 = OZChannelFolder::getDescendant(v24, a2);
      if (!v26)
      {
        uint64_t v27 = 0;
LABEL_18:
        unint64_t var1 = (unint64_t)v20->var1;
        long long v36 = xmmword_1B8378D00;
        if ((OZFactory::isKindOfClass(var1, (int32x4_t *)&v36) & 1) == 0)
        {
          long long v35 = xmmword_1B8378BA0;
          if ((OZFactory::isKindOfClass(var1, (int32x4_t *)&v35) & 1) == 0)
          {
            long long v34 = xmmword_1B8381730;
            if (!OZFactory::isKindOfClass(var1, (int32x4_t *)&v34))
            {
              OZChannel::getValueAsDouble(v20, &v41, 0.0);
              double v32 = v31;
              OZChannel::getValueAsDouble(v27, &v41, 0.0);
              return v32 + (v33 - v32) * a5;
            }
          }
        }
        double v17 = v20;
        goto LABEL_22;
      }
      CMTime v19 = (const void *)v26;
    }
    else
    {
    }
    goto LABEL_18;
  }
  double v16 = 0.0;
  if (Descendant)
  {
    if ((Descendant[7] & 0x1000) == 0)
    {
LABEL_22:
      OZChannel::getValueAsDouble(v17, &v41, 0.0);
      return v29;
    }
    char v22 = (const void *)OZChannelFolder::getDescendant(v21, a2);
    if (v22)
    {
      if (v17) {
        goto LABEL_22;
      }
    }
  }
  return v16;
}

double non-virtual thunk to'OZRigBehavior::solveNode(OZRigBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZRigBehavior::solveNode((std::mutex *)((char *)this - 536), a2, a3, a4, a5);
}

BOOL OZRigBehavior::canAddToChannelAfterMismatch(OZRigBehavior *this, OZChannelBase *a2)
{
  if (*((unsigned char *)this + 1337)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(OZRigBehavior *))(*(void *)this + 336))(this);
  if (!v5) {
    return 1;
  }
  if (!*(unsigned char *)(v5 + 1576)) {
    return 1;
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 165);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *v6;
  if (((*(void *)(*((void *)this + 165) + 8) - v7) & 0x7FFFFFFF8) == 0) {
    return 1;
  }
  uint64_t v8 = *(unsigned char **)v7;
  if (a2->var1 != *(OZFactory **)(*(void *)v7 + 8)) {
    return 0;
  }
  if ((v8[57] & 0x10) == 0 || (a2->var7 & 0x1000) == 0) {
    return 1;
  }
  long long v11 = (void *)v9[14];
  if (v11) {
    long long v11 = (void *)((v11[1] - *v11) >> 3);
  }
  int v12 = (void *)v10[14];
  if (v12) {
    int v12 = (void *)((v12[1] - *v12) >> 3);
  }
  return v11 == v12;
}

uint64_t OZRigBehavior::setWidget(OZRigBehavior *this, OZRigWidget *a2, double a3)
{
  LODWORD(a3) = *((_DWORD *)a2 + 20);
  return OZChannel::setValue((OZChannel *)((char *)this + 1000), MEMORY[0x1E4F1FA48], (double)*(unint64_t *)&a3, 0);
}

OZChannelBase *OZRigBehavior::createDefaultSnapshotHelper(OZRigBehavior *this, unsigned int a2, const OZChannelBase *a3)
{
  uint64_t ChanBase = a3;
  if (!a3) {
    uint64_t ChanBase = (const OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  }
  uint64_t v6 = (OZChannelBase *)(*((uint64_t (**)(const OZChannelBase *))ChanBase->var0 + 31))(ChanBase);
  OZChannelBase::setFlags(v6, ChanBase->var7 & 0xFFFFFFFFFFFFFFFELL);
  OZChannelBase::setID(v6, a2);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1208), v6);
  return v6;
}

const OZChannelBase *OZRigBehavior::copyTargetToSnapshot(OZRigBehavior *this, int a2)
{
  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
  uint64_t result = (const OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (result && Descendant)
  {
    uint64_t v5 = result;
    OZRigBehavior::copyScales(this, result, Descendant);
    uint64_t v6 = (uint64_t (*)(OZChannelBase *, const OZChannelBase *))*((void *)Descendant->var0 + 32);
    return (const OZChannelBase *)v6(Descendant, v5);
  }
  return result;
}

OZChannelInfo *OZRigBehavior::copyScales(OZRigBehavior *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    long long v9 = (uint64_t *)v7[14];
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*((void *)result + 14);
      uint64_t v11 = *v9;
      uint64_t v12 = v9[1];
      uint64_t v13 = *v10;
      uint64_t v14 = v10[1];
      BOOL v15 = v11 == v12 || v13 == v14;
      if (!v15)
      {
        uint64_t v16 = v11 + 8;
        uint64_t v17 = v13 + 8;
        do
        {
          uint64_t result = (OZChannelInfo *)OZRigBehavior::copyScales(this, *(const OZChannelBase **)(v16 - 8), *(OZChannelBase **)(v17 - 8));
          if (v16 == v12) {
            break;
          }
          v16 += 8;
          BOOL v15 = v17 == v14;
          v17 += 8;
        }
        while (!v15);
      }
    }
  }
  else
  {
    if (a3) {
    else
    }
      uint64_t v5 = 0;
    double v18 = *(double *)(v4[16] + 40);
    return OZChannel::setScale(v5, v18);
  }
  return result;
}

double OZRigBehavior::copySnapshotToTarget(OZRigBehavior *this, int a2)
{
  Descendant = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
  uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (Descendant && ChanBase)
  {
    return OZRigBehavior::copyValues(this, Descendant, ChanBase);
  }
  return result;
}

double OZRigBehavior::copyValues(OZRigBehavior *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    uint64_t v10 = (uint64_t *)v7[14];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)v8[14];
      uint64_t v12 = *v10;
      uint64_t v13 = v10[1];
      uint64_t v14 = *v11;
      uint64_t v15 = v11[1];
      BOOL v16 = v12 == v13 || v14 == v15;
      if (!v16)
      {
        uint64_t v17 = v12 + 8;
        uint64_t v18 = v14 + 8;
        do
        {
          OZRigBehavior::copyValues(this, *(const OZChannelBase **)(v17 - 8), *(OZChannelBase **)(v18 - 8));
          if (v17 == v13) {
            break;
          }
          v17 += 8;
          BOOL v16 = v18 == v15;
          v18 += 8;
        }
        while (!v16);
      }
    }
  }
  else
  {
    if (a3) {
    else
    }
      uint64_t v5 = 0;
    CurveInterface = (const void *)OZChannel::getCurveInterface(v4);
    if (CurveInterface) {
    else
    }
      char v20 = 0;
    char v21 = (void *)OZChannel::getCurveInterface(v5);
    if (v21) {
    *(void *)&double result = OZCurve::operator=((uint64_t)v21, (uint64_t)v20, v22).n128_u64[0];
    }
  }
  return result;
}

uint64_t OZRigBehavior::doesCreateAnimation(OZRigBehavior *this)
{
  uint64_t result = (uint64_t)OZRigBehavior::getWidget(this);
  if (result)
  {
    Widget = (void **)OZRigBehavior::getWidget(this);
    if ((*(uint64_t (**)(void *))(*Widget[136] + 560))(Widget[136]))
    {
      return 1;
    }
    else
    {
      uint64_t v4 = *(uint64_t (**)(void))(*((void *)this + 151) + 560);
      return v4();
    }
  }
  return result;
}

void *OZRigBehavior::DuplicateAffectingRigBehaviors(OZRigBehavior *this, OZObjectManipulator *a2, OZObjectManipulator *a3)
{
  unint64_t v5 = *(void *)((*(uint64_t (**)(OZRigBehavior *, OZObjectManipulator *, OZObjectManipulator *))(*(void *)this + 256))(this, a2, a3)+ 8);
  int32x4_t v21 = (int32x4_t)xmmword_1B837FF30;
  if ((OZFactory::isKindOfClass(v5, &v21) & 1) != 0
    || (unint64_t v6 = *(void *)((*(uint64_t (**)(OZRigBehavior *))(*(void *)this + 256))(this) + 8),
        int32x4_t v21 = (int32x4_t)xmmword_1B837FF40,
        uint64_t result = (void *)OZFactory::isKindOfClass(v6, &v21),
        result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(OZRigBehavior *))(*(void *)this + 232))(this);
    if (result)
    {
      uint64_t v8 = result;
      std::list<OZBehavior *>::list(&v21, (uint64_t)(result + 125));
      for (uint64_t i = (int32x4_t *)v21.i64[1]; i != &v21; uint64_t i = (int32x4_t *)i->i64[1])
      {
        uint64_t v10 = (void *)i[1].i64[0];
        unint64_t v11 = v10[1];
        long long v19 = xmmword_1B7E77B90;
        if (OZFactory::isKindOfClass(v11, (int32x4_t *)&v19))
        {
          if ((*(uint64_t (**)(void *, void, uint64_t))(v10[2] + 24))(v10 + 2, 0, 1))
          {
            if ((OZRigBehavior *)OZSingleChannelBehavior::getAffectedObject(v12) == this)
            {
              *((void *)&v19 + 1) = 0;
              uint64_t v20 = 0;
              *(void *)&long long v19 = (char *)&v19 + 8;
              unsigned int v18 = 0;
              uint64_t v13 = (*(uint64_t (**)(OZRigBehavior *))(*(void *)this + 256))(this);
              unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
              uint64_t v14 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
              int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 56))(v14);
              v22.var0 = (__CFString *)&v18;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)&v19, &v18, (uint64_t)&std::piecewise_construct, (unsigned int **)&v22)+ 8) = v15;
              BOOL v16 = (const void *)(*(uint64_t (**)(void *, OZSingleChannelBehavior *, uint64_t))(**((void **)v12 + 1) + 24))(*((void **)v12 + 1), v12, 2);
              if (v16) {
              else
              }
                uint64_t v17 = 0;
              (*(void (**)(void *, long long *))(*v17 + 552))(v17, &v19);
              (*(void (**)(void *, void *))(*v17 + 776))(v17, v8);
              PCURL::PCURL((PCURL *)&v22, @"Undo Duplicate");
              (*(void (**)(void *, PCString *, uint64_t))(v17[2] + 176))(v17 + 2, &v22, 1);
              PCString::~PCString(&v22);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v19, *((void **)&v19 + 1));
            }
          }
        }
      }
      return std::__list_imp<unsigned int>::clear(&v21);
    }
  }
  return result;
}

void sub_1B7C5D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  long long v9 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  PCString::~PCString((PCString *)(v5 - 88));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v9);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t OZRigBehavior::addToSceneNode(OZRigBehavior *this, OZSceneNode *a2)
{
  return OZSceneNode::insertBehaviorBefore(a2, this, 0);
}

uint64_t OZRigBehavior::getChannelForSnapshot(OZRigBehavior *this, int a2)
{
  return OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
}

void OZRigBehavior::sortSnapshotChannels(OZRigBehavior *this)
{
  uint64_t v2 = *((void *)this + 165);
  long long v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v8, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  unint64_t v3 = 126 - 2 * __clz((uint64_t)&v9[-v8] >> 3);
  uint64_t v11 = chanIDLessThan;
  if (v9 == (char *)v8) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>(v8, v9, (uint64_t (**)(uint64_t, uint64_t))&v11, v4, 1);
  uint64_t v5 = (OZChannelFolder *)((char *)this + 1208);
  OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 1208), 1);
  unint64_t v6 = (OZChannelBase **)v8;
  uint64_t v7 = v9;
  if ((char *)v8 != v9)
  {
    do
      OZChannelFolder::push_back(v5, *v6++);
    while (v6 != (OZChannelBase **)v7);
    unint64_t v6 = (OZChannelBase **)v8;
  }
  if (v6)
  {
    long long v9 = (char *)v6;
    operator delete(v6);
  }
}

void sub_1B7C5D39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL chanIDLessThan(const OZChannelBase *a1, const OZChannelBase *a2)
{
  return a1->var3 < a2->var3;
}

uint64_t OZSingleChannelBehavior::scbIsEvalCyclic(OZSingleChannelBehavior *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 640))();
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::scbIsEvalCyclic(OZSingleChannelBehavior *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 67) + 640))();
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::getBehavior(OZSingleChannelBehavior *this)
{
  return (uint64_t)this - 536;
}

void *std::list<OZBehavior *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    unint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      unint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B7C5D4BC(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,OZChannelBase**>(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
      uint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v11, v19, (unsigned int (**)(void))a3);
    uint64_t v11 = (char *)(v19 + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          void *v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *uint64_t v7 = *v4;
    *uint64_t v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      uint64_t *v13 = *v14;
      uint64_t *v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,OZChannelBase**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          uint64_t *v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        long long v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)long long v19 = v18;
        }
        else
        {
          *(void *)long long v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        void *v15 = v14;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void OZLinkChannelExpression::OZLinkChannelExpression(OZLinkChannelExpression *this, OZLinkBehavior *a2, const OZChannelRef *a3, int a4)
{
  *(void *)this = &unk_1F114A778;
  *((void *)this + 1) = a2;
  OZChannelRef::OZChannelRef((std::string *)((char *)this + 16), a3);
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 64));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 88));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 112));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (a4) {
    OZLinkChannelExpression::createParamChannels(this);
  }
}

void sub_1B7C5E4DC(_Unwind_Exception *a1)
{
  OZChannelRef::~OZChannelRef(v4);
  OZChannelRef::~OZChannelRef(v3);
  OZChannelRef::~OZChannelRef(v2);
  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::createParamChannels(OZLinkChannelExpression *this)
{
  PCSharedCount::PCSharedCount(&v3);
  SourceChannel = (const PCString *)OZLinkChannelExpression::getSourceChannel(this);
  if (SourceChannel) {
    PCString::set((PCString *)&v3, SourceChannel + 4);
  }
  else {
    PCString::set((PCString *)&v3, "source");
  }
  operator new();
}

void sub_1B7C5E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  PCString::~PCString(&a11);
  MEMORY[0x1BA9BFBA0](v14, 0x10E1C409BAC03F7);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::OZLinkChannelExpression(OZLinkChannelExpression *this, const OZLinkChannelExpression *a2, OZLinkBehavior *a3)
{
  *(void *)this = &unk_1F114A778;
  *((void *)this + 1) = a3;
  OZChannelRef::OZChannelRef((std::string *)((char *)this + 16), (const OZLinkChannelExpression *)((char *)a2 + 16));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 64));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 88));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 112));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  OZLinkChannelExpression::copyParamChannels(this, a2);
}

void sub_1B7C5EA0C(_Unwind_Exception *a1)
{
  OZChannelRef::~OZChannelRef(v4);
  OZChannelRef::~OZChannelRef(v3);
  OZChannelRef::~OZChannelRef(v2);
  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

std::string *OZLinkChannelExpression::copyParamChannels(OZLinkChannelExpression *this, const OZLinkChannelExpression *a2)
{
  if (*((void *)a2 + 5)) {
    operator new();
  }
  OZChannelRef::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  if (*((void *)a2 + 6)) {
    operator new();
  }
  OZChannelRef::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  if (*((void *)a2 + 7)) {
    operator new();
  }

  return OZChannelRef::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 112));
}

void sub_1B7C5ED04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::~OZLinkChannelExpression(OZLinkChannelExpression *this)
{
  *(void *)this = &unk_1F114A778;
  uint64_t v2 = (uint64_t **)*((void *)this + 1);
  if (v2) {
    OZLinkBehavior::deleteExpressionParamChannels(v2, (unint64_t)this, 0);
  }
  OZChannelRef::~OZChannelRef((void **)this + 14);
  OZChannelRef::~OZChannelRef((void **)this + 11);
  OZChannelRef::~OZChannelRef((void **)this + 8);
  OZChannelRef::~OZChannelRef((void **)this + 2);
}

{
  uint64_t vars8;

  OZLinkChannelExpression::~OZLinkChannelExpression(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLinkChannelExpression::getParamChannelRefs(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v4 = a1 + 64;
    uint64_t v6 = (uint64_t)(a2 + 2);
    unint64_t v5 = (unint64_t)a2[2];
    unint64_t v7 = a2[1];
    if ((unint64_t)v7 >= v5)
    {
      uint64_t v9 = ((char *)v7 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        goto LABEL_52;
      }
      uint64_t v10 = v5 - (void)*a2;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = v4;
      uint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)*a2;
      uint64_t v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *unint64_t v7 = v4;
      uint64_t v8 = v7 + 1;
    }
    a2[1] = v8;
    uint64_t v19 = a1 + 88;
    unint64_t v20 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v20)
    {
      uint64_t v22 = ((char *)v8 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_52;
      }
      uint64_t v23 = v20 - (void)*a2;
      uint64_t v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
        uint64_t v24 = v22 + 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v25);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = &v26[8 * v22];
      uint64_t v28 = &v26[8 * v25];
      *(void *)uint64_t v27 = v19;
      BOOL v21 = v27 + 8;
      uint64_t v30 = (char *)*a2;
      double v29 = (char *)a2[1];
      if (v29 != *a2)
      {
        do
        {
          uint64_t v31 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v27 - 1) = v31;
          v27 -= 8;
        }
        while (v29 != v30);
        double v29 = (char *)*a2;
      }
      *a2 = v27;
      a2[1] = v21;
      a2[2] = v28;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *uint64_t v8 = v19;
      BOOL v21 = v8 + 1;
    }
    a2[1] = v21;
    uint64_t v32 = a1 + 112;
    unint64_t v33 = (unint64_t)a2[2];
    if ((unint64_t)v21 < v33)
    {
      void *v21 = v32;
      long long v34 = v21 + 1;
LABEL_50:
      a2[1] = v34;
      return;
    }
    uint64_t v35 = ((char *)v21 - (unsigned char *)*a2) >> 3;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      uint64_t v36 = v33 - (void)*a2;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        CMTimeEpoch v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v38);
      }
      else {
        CMTimeEpoch v39 = 0;
      }
      CMTime v40 = &v39[8 * v35];
      CMTime v41 = &v39[8 * v38];
      *(void *)CMTime v40 = v32;
      long long v34 = v40 + 8;
      CMTime v43 = (char *)*a2;
      CMTime v42 = (char *)a2[1];
      if (v42 != *a2)
      {
        do
        {
          uint64_t v44 = *((void *)v42 - 1);
          v42 -= 8;
          *((void *)v40 - 1) = v44;
          v40 -= 8;
        }
        while (v42 != v43);
        CMTime v42 = (char *)*a2;
      }
      *a2 = v40;
      a2[1] = v34;
      a2[2] = v41;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_50;
    }
LABEL_52:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
}

uint64_t OZLinkChannelExpression::resolveChannelRefs(OZLinkChannelExpression *this)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)result + 312))(result);
    Channel = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 64), v4);
    if (Channel) {
    *((void *)this + 5) = Channel;
    }
    uint64_t v6 = *((void *)this + 6);
    unint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 1) + 312))(*((void *)this + 1));
    uint64_t v8 = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 88), v7);
    if (v8) {
    *((void *)this + 6) = v8;
    }
    uint64_t v9 = *((void *)this + 7);
    uint64_t v10 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 1) + 312))(*((void *)this + 1));
    uint64_t v11 = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 112), v10);
    if (v11) {
    *((void *)this + 7) = v11;
    }
    if (!v3)
    {
      unint64_t v12 = (OZChannelBase *)*((void *)this + 5);
      if (v12) {
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v12, 0);
      }
    }
    if (!v6)
    {
      uint64_t v13 = (OZChannelBase *)*((void *)this + 6);
      if (v13) {
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v13, 0);
      }
    }
    if (!v9)
    {
      uint64_t v14 = (OZChannelBase *)*((void *)this + 7);
      if (v14) {
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v14, 0);
      }
    }
    return *((void *)this + 5) && *((void *)this + 6) && *((void *)this + 7) != 0;
  }
  return result;
}

void *OZLinkChannelExpression::getSourceChannel(OZLinkChannelExpression *this)
{
  if (!(*(uint64_t (**)(void))(**((void **)this + 1) + 336))(*((void *)this + 1))) {
    return 0;
  }
  if (!OZChanObjectManipRef::getObject((OZChannelBase *)(*((void *)this + 1) + 1064))) {
    return 0;
  }
  uint64_t Object = OZChanObjectManipRef::getObject((OZChannelBase *)(*((void *)this + 1) + 1064));
  uint64_t v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)Object + 216))(Object);
  Channel = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 16), v3);
  if (!Channel) {
    return 0;
  }
}

void OZLinkChannelExpression::fixParamChannelNames(OZChannelBase **this)
{
  PCSharedCount::PCSharedCount(&v10);
  SourceChannel = (const PCString *)OZLinkChannelExpression::getSourceChannel((OZLinkChannelExpression *)this);
  if (SourceChannel) {
    PCString::set((PCString *)&v10, SourceChannel + 4);
  }
  else {
    PCString::set((PCString *)&v10, "source");
  }
  uint64_t v3 = this[5];
  if (v3)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, @"Link Behavior Value Offset");
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v3, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  uint64_t v4 = this[6];
  if (v4)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, @"Link Behavior Value Range Min");
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v4, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  unint64_t v5 = this[7];
  if (v5)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, @"Link Behavior Value Range Max");
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v5, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  PCString::~PCString((PCString *)&v10);
}

void sub_1B7C5F5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
}

uint64_t OZLinkChannelExpression::operator=(uint64_t a1, uint64_t a2)
{
  return a1;
}

std::string *OZLinkChannelExpression::copy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  OZChannelRef::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  OZChannelRef::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  OZChannelRef::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));

  return OZChannelRef::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
}

double OZLinkChannelExpression::getSourceSliderRange(OZLinkChannelExpression *this)
{
  SourceChannel = OZLinkChannelExpression::getSourceChannel(this);
  if (SourceChannel) {
    return (*(double (**)(void *))(*SourceChannel + 808))(SourceChannel)
  }
         - *(double *)(SourceChannel[16] + 16);
  else {
    return 0.0;
  }
}

void *OZLinkChannelExpression::getSourceValueRange(OZLinkChannelExpression *this)
{
  uint64_t result = OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    (*(void (**)(void, uint64_t *))(**(void **)(result[14] + 8) + 256))(*(void *)(result[14] + 8), &v3);
    uint64_t v3 = 0;
    return (void *)(*(uint64_t (**)(void))(**(void **)(v2[14] + 8) + 264))();
  }
  return result;
}

OZChannel *OZLinkChannelExpression::syncChannelRanges(OZLinkChannelExpression *this, int a2)
{
  uint64_t result = (OZChannel *)OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  {
    unint64_t v5 = result;
    OZLinkBehavior::getSourceChannelUUID(*((OZLinkBehavior **)this + 1), 1, (uint64_t)&v26);
    uint64_t result = (OZChannel *)*((void *)this + 5);
    if (result)
    {
      if (*((void *)this + 6) && *((void *)this + 7))
      {
        if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v26, (int32x4_t)xmmword_1B8378B30)))))
        {
          double v6 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
          PCString v7 = (OZChannel *)*((void *)this + 5);
          if (v6 >= 3.40282347e38)
          {
            OZChannel::setSliderMin(*((OZChannel **)this + 5), -100.0);
            uint64_t v11 = (OZChannel *)*((void *)this + 5);
            double v10 = 100.0;
          }
          else
          {
            double v8 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
            OZChannel::setSliderMin(v7, -v8);
            PCString v9 = (OZChannel *)*((void *)this + 5);
            (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
            uint64_t v11 = v9;
          }
        }
        else
        {
          OZChannel::setSliderMin(result, -6.28318531);
          uint64_t v11 = (OZChannel *)*((void *)this + 5);
          double v10 = 6.28318531;
        }
        OZChannel::setSliderMax(v11, v10);
        OZChannel::setDefaultValue(*((OZChannel **)this + 5), 0.0);
        OZChannel::setScale(*((OZChannel **)this + 5), *((double *)v5->var16 + 5));
        OZChannel::setCoarseDelta(*((OZChannel **)this + 5), *((double *)v5->var16 + 4));
        OZChannel::setFineDelta(*((OZChannel **)this + 5), *((double *)v5->var16 + 3));
        OZLinkChannelExpression::syncAutoShrinkScaleOffset(this);
        unint64_t v12 = (OZChannel *)*((void *)this + 6);
        double v27 = 0.0;
        (*(void (**)(void))(**((void **)v5->var14 + 1) + 264))();
        OZChannel::setMin(v12, v27);
        uint64_t v13 = (OZChannel *)*((void *)this + 6);
        double v27 = 0.0;
        (*(void (**)(void))(**((void **)v5->var14 + 1) + 256))();
        OZChannel::setMax(v13, v27);
        double v14 = *((double *)v5->var16 + 2);
        if (v14 <= 1.17549435e-38) {
          double v14 = -100.0;
        }
        OZChannel::setSliderMin(*((OZChannel **)this + 6), v14);
        double v15 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
        uint64_t v16 = (OZChannel *)*((void *)this + 6);
        if (v15 >= 3.40282347e38) {
          double v17 = 100.0;
        }
        else {
          (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
        }
        OZChannel::setSliderMax(v16, v17);
        OZChannel::setDefaultValue(*((OZChannel **)this + 6), *(double *)(*(void *)(*((void *)this + 6) + 128) + 16));
        OZChannel::setScale(*((OZChannel **)this + 6), *((double *)v5->var16 + 5));
        uint64_t v18 = (OZChannel *)*((void *)this + 7);
        double v27 = 0.0;
        (*(void (**)(void))(**((void **)v5->var14 + 1) + 264))();
        OZChannel::setMin(v18, v27);
        uint64_t v19 = (OZChannel *)*((void *)this + 7);
        double v27 = 0.0;
        (*(void (**)(void))(**((void **)v5->var14 + 1) + 256))();
        OZChannel::setMax(v19, v27);
        double v20 = *((double *)v5->var16 + 2);
        if (v20 <= 1.17549435e-38) {
          double v20 = -100.0;
        }
        OZChannel::setSliderMin(*((OZChannel **)this + 7), v20);
        double v21 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
        uint64_t v22 = (OZChannel *)*((void *)this + 7);
        if (v21 >= 3.40282347e38) {
          double v23 = 100.0;
        }
        else {
          (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
        }
        OZChannel::setSliderMax(v22, v23);
        uint64_t v24 = (OZChannel *)*((void *)this + 7);
        double v25 = (*((double (**)(OZChannel *))v24->var0 + 101))(v24);
        OZChannel::setDefaultValue(v24, v25);
        uint64_t result = (OZChannel *)OZChannel::setScale(*((OZChannel **)this + 7), *((double *)v5->var16 + 5));
        if (a2)
        {
          (*(void (**)(void, void))(**((void **)this + 5) + 288))(*((void *)this + 5), 0);
          (*(void (**)(void))(**((void **)this + 6) + 288))();
          return (OZChannel *)(*(uint64_t (**)(void))(**((void **)this + 7) + 288))();
        }
      }
    }
  }
  return result;
}

OZChannelInfo *OZLinkChannelExpression::syncAutoShrinkScaleOffset(OZLinkChannelExpression *this)
{
  uint64_t result = (OZChannelInfo *)OZChanObjectManipRef::getObject((OZChannelBase *)(*((void *)this + 1) + 1064));
  if (result)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(void *)((*(uint64_t (**)(OZChannelInfo *))(*(void *)result + 256))(result) + 8);
    long long v5 = xmmword_1B7E78220;
    uint64_t result = (OZChannelInfo *)OZFactory::isKindOfClass(v4, (int32x4_t *)&v5);
    if (result)
    {
      uint64_t result = (OZChannelInfo *)OZLinkChannelExpression::getSourceChannel(this);
      if ((OZChannelInfo *)((char *)v3 + 61248) == result)
      {
        OZChannel::setMin(*((OZChannel **)this + 5), 0.0);
        return OZChannel::setSliderMax(*((OZChannel **)this + 5), 1.0);
      }
    }
  }
  return result;
}

void *OZLinkChannelExpression::sourceIsBool(OZLinkChannelExpression *this)
{
  uint64_t result = OZLinkChannelExpression::getSourceChannel(this);
  if (result) {
  return result;
  }
}

void *OZLinkChannelExpression::sourceIsEnum(OZLinkChannelExpression *this)
{
  uint64_t result = OZLinkChannelExpression::getSourceChannel(this);
  if (result) {
  return result;
  }
}

BOOL OZLinkChannelExpression::isWithinLimits(OZLinkBehavior **this, const CMTime *a2)
{
  double v4 = 0.0;
  BOOL v3 = 1;
  OZLinkChannelExpression::solve(this, 0.0, a2, &v4, &v3);
  return v3;
}

void OZLinkChannelExpression::solve(OZLinkBehavior **this, double a2, const CMTime *a3, double *a4, BOOL *a5)
{
  if (!a4) {
    return;
  }
  OZLinkBehavior::getMixFactor(this[1], a3);
  double v11 = v10;
  if (v10 > -0.0000001 && v10 < 0.0000001)
  {
    if (a5) {
      *a5 = 1;
    }
LABEL_9:
    *a4 = a2;
    return;
  }
  SourceChannel = (OZChannel *)OZLinkChannelExpression::getSourceChannel((OZLinkChannelExpression *)this);
  if (!SourceChannel) {
    goto LABEL_9;
  }
  uint64_t v13 = SourceChannel;
  if ((OZLinkChannelExpression::sourceIsBool((OZLinkChannelExpression *)this) & 1) != 0
    || OZLinkChannelExpression::sourceIsEnum((OZLinkChannelExpression *)this))
  {
    goto LABEL_9;
  }
  double v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
  double v15 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2776), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::getValueAsDouble(v13, a3, 0.0);
  double v18 = v17;
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2520), v14, 0.0)) {
    goto LABEL_46;
  }
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2520), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 1u:
      goto LABEL_23;
    case 2u:
      uint64_t v19 = (OZChannel *)this[7];
      if (v19) {
        OZChannel::getValueAsDouble(v19, a3, 0.0);
      }
      else {
        double v20 = 1.0;
      }
      BOOL v27 = v18 <= v20;
      if (v18 > v20 && ValueAsInt == 1) {
        goto LABEL_37;
      }
      goto LABEL_45;
    case 3u:
      double v21 = (OZChannel *)this[7];
      if (v21) {
        OZChannel::getValueAsDouble(v21, a3, 0.0);
      }
      else {
        double v22 = 1.0;
      }
      if (v18 > v22)
      {
        if (ValueAsInt != 1) {
          goto LABEL_55;
        }
LABEL_37:
        uint64_t v28 = (OZChannel *)this[7];
        if (v28)
        {
LABEL_38:
          OZChannel::getValueAsDouble(v28, a3, 0.0);
          double v18 = v31;
          goto LABEL_46;
        }
        double v18 = 1.0;
        goto LABEL_46;
      }
LABEL_23:
      double v25 = (OZChannel *)this[6];
      if (v25) {
        OZChannel::getValueAsDouble(v25, a3, 0.0);
      }
      else {
        double v26 = 0.0;
      }
      BOOL v27 = v18 >= v26;
      if (v18 < v26 && ValueAsInt == 1)
      {
LABEL_28:
        uint64_t v28 = (OZChannel *)this[6];
        if (!v28)
        {
          double v18 = 0.0;
          goto LABEL_46;
        }
        goto LABEL_38;
      }
LABEL_45:
      if (v27)
      {
LABEL_46:
        long long v34 = (OZChannel *)this[5];
        if (v34)
        {
          OZChannel::getValueAsDouble(v34, a3, 0.0);
          double v15 = v35;
        }
        double v36 = v18 + v15;
        double InternalScale = OZLinkBehavior::getInternalScale(this[1]);
        OZChannel::getValueAsDouble((OZChannel *)((char *)this[1] + 1808), a3, 0.0);
        double v39 = v36 * (InternalScale * v38);
        int v40 = OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 1552), MEMORY[0x1E4F1FA48], 0.0);
        double v41 = v39 * a2;
        double v42 = v39 + a2;
        if (v40) {
          double v42 = v39;
        }
        if (v40 != 1) {
          double v41 = v42;
        }
        a2 = (1.0 - v11) * a2 + v11 * v41;
        BOOL v43 = 1;
        goto LABEL_53;
      }
LABEL_55:
      BOOL v43 = 0;
LABEL_53:
      *a4 = a2;
      if (a5) {
        *a5 = v43;
      }
      return;
    case 4u:
      double v23 = (OZChannel *)this[7];
      if (v23) {
        OZChannel::getValueAsDouble(v23, a3, 0.0);
      }
      else {
        double v24 = 1.0;
      }
      if (v18 > v24) {
        goto LABEL_46;
      }
      double v29 = (OZChannel *)this[6];
      if (v29) {
        OZChannel::getValueAsDouble(v29, a3, 0.0);
      }
      else {
        double v30 = 0.0;
      }
      BOOL v27 = v18 < v30;
      if (v18 < v30 || ValueAsInt != 1) {
        goto LABEL_45;
      }
      uint64_t v32 = (OZChannel *)this[7];
      if (v32) {
        OZChannel::getValueAsDouble(v32, a3, 0.0);
      }
      else {
        double v33 = 1.0;
      }
      double v44 = v33 - v18;
      CFStringRef v45 = (OZChannel *)this[6];
      if (v45) {
        OZChannel::getValueAsDouble(v45, a3, 0.0);
      }
      else {
        double v46 = 0.0;
      }
      if (v44 < v18 - v46) {
        goto LABEL_37;
      }
      goto LABEL_28;
    default:
      goto LABEL_46;
  }
}

void OZ3DEngineCore::getMotionLights(CMTime *a1@<X1>, OZChannel *a2@<X2>, OZElement *a3@<X3>, uint64_t a4@<X8>)
{
  if (a2)
  {
    double v8 = a2;
    while (1)
    {
      int ValueAsInt = OZChannel::getValueAsInt(v8 + 56, a1, 0.0);
      if (ValueAsInt == 1) {
        break;
      }
      if (ValueAsInt == 2)
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = &unk_1F10AD5F8;
        *(unsigned char *)(a4 + 24) = 0;
        return;
      }
      var6 = v8[6].var6;
      if (var6)
      {
        if (v8) {
          continue;
        }
      }
      break;
    }
  }
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F10AD5F8;
  *(unsigned char *)(a4 + 24) = 0;
  int v12 = *((_DWORD *)a3 + 3);
  if (v12 <= 0) {
    int v13 = 0;
  }
  else {
    int v13 = (2 * v12) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a4, v12, v13);
  if (*((int *)a3 + 3) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      LiLight::operator=(*(void *)(a4 + 16) + v14, *((void *)a3 + 2) + v14);
      ++v15;
      v14 += 944;
    }
    while (v15 < *((int *)a3 + 3));
  }
  *(unsigned char *)(a4 + 24) = *((unsigned char *)a3 + 24);
}

void sub_1B7C60490(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineCore::buildRenderGraph(uint64_t a1, const OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4, uint64_t a5, uint64_t a6, OZElement *a7)
{
  {
    MEMORY[0x1BA9BF8F0](&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
    __cxa_atexit(MEMORY[0x1E4FBA230], &OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m, &dword_1B73F3000);
  }
  std::recursive_mutex::lock(&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  double v11 = (const void *)*((void *)a7 + 120);
  BOOL v13 = v11
  uint64_t v14 = a7;
  while (1)
  {
    uint64_t v14 = (OZElement *)*((void *)v14 + 120);
    if (!v14) {
      break;
    }
    uint64_t v15 = *(void *)v14;
    if ((*(unsigned int (**)(OZElement *))(v15 + 416))(v14))
    {
      int v16 = 1;
      goto LABEL_12;
    }
  }
  int v16 = 0;
LABEL_12:
  int v17 = (*(uint64_t (**)(OZElement *, void))(*(void *)a7 + 1656))(a7, MEMORY[0x1E4F1FA48]);
  LiGraphBuilder::getCurrentInsertionGroup(a3, (PCSharedCount *)&v19);
  CMTimeValue value = v19.value;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v19.timescale);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v21, a4);
  if (value && *(unsigned char *)(*(uint64_t (**)(CMTimeValue))(*(void *)value + 248))(value))
  {
    v23[40] = 1;
    long long v24 = *(_OWORD *)((*(uint64_t (**)(CMTimeValue))(*(void *)value + 248))(value) + 4);
    int v25 = *(_DWORD *)((*(uint64_t (**)(CMTimeValue))(*(void *)value + 248))(value) + 20);
  }
  if (!(v17 | v16 & v13)) {
    operator new();
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v19, a2);
  char v20 = 0;
  LiGraphBuilder::partitionWorld((uint64_t)a3);
  OZElement::buildRenderGraph(a7, &v19, a3, (const OZRenderGraphState *)v21);
  LiGraphBuilder::partitionWorld((uint64_t)a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v19);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v23);
  std::__list_imp<unsigned int>::clear(v22);
  std::recursive_mutex::unlock(&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
}

void sub_1B7C60894(_Unwind_Exception *a1)
{
}

void OZ3DEngineCore::build3DEngineRenderGraph(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, CMTime *a6, OZChannel *a7)
{
  OZRenderState::OZRenderState(&v79, (const OZRenderState *)a2);
  *(void *)&v78[40] = 0x3FF0000000000000;
  *(void *)uint64_t v78 = 0x3FF0000000000000;
  *(void *)&v75[40] = 0x3FF0000000000000;
  *(void *)int v75 = 0x3FF0000000000000;
  memset(&v75[8], 0, 32);
  long long v76 = 0u;
  long long v77 = 0u;
  memset(&v78[8], 0, 32);
  if ((OZChannel *)v79.var5 == a7)
  {
    LiGraphBuilder::getCurrentLocalToWorld((LiGraphBuilder *)a3, (uint64_t)&v67);
    long long v77 = v71;
    *(_OWORD *)uint64_t v78 = v72;
    *(_OWORD *)&v78[16] = v73;
    *(_OWORD *)&v78[32] = v74;
    *(float64x2_t *)int v75 = v67;
    *(_OWORD *)&v75[16] = v68;
    *(_OWORD *)&v75[32] = v69;
    long long v76 = v70;
  }
  else
  {
    BOOL v13 = (OZTransformNode *)a7;
    do
    {
      if (!v13) {
        goto LABEL_8;
      }
      uint64_t v14 = (const void *)*((void *)v13 + 120);
      if (!v14) {
        goto LABEL_8;
      }
      if (!v15) {
        goto LABEL_8;
      }
      BOOL v13 = v15;
    }
    while (!(*(unsigned int (**)(OZTransformNode *))(*(void *)v15 + 1632))(v15));
    v79.var5 = v13;
    v79.var8 = 0;
LABEL_8:
    v79.var9 = 1;
    (*((void (**)(OZChannel *, unsigned char *, OZRenderState *))a7->var0 + 157))(a7, v75, &v79);
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    float32x4_t v17 = *(float32x4_t *)(a5 + 16 * i);
    double v18 = (float64x2_t *)((char *)&v66 + 32 * i);
    float64x2_t *v18 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
    v18[1] = vcvt_hight_f64_f32(v17);
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)v75, (long long *)&v66.value, (uint64_t)&v67);
  long long v77 = v71;
  *(_OWORD *)uint64_t v78 = v72;
  *(_OWORD *)&v78[16] = v73;
  *(_OWORD *)&v78[32] = v74;
  *(float64x2_t *)int v75 = v67;
  *(_OWORD *)&v75[16] = v68;
  *(_OWORD *)&v75[32] = v69;
  long long v76 = v70;
  if (*(void *)(a2 + 1296)) {
    uint64_t v19 = *(void *)(a2 + 1296);
  }
  else {
    uint64_t v19 = *(void *)(a2 + 1280);
  }
  double v20 = (*(double (**)(void))(*(void *)v19 + 688))();
  uint64_t v21 = 0;
  *(double *)&v75[24] = v20 * *(double *)&v75[24];
  do
  {
    v65[v21] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v75[32 * v21]), *(float64x2_t *)&v75[32 * v21 + 16]);
    ++v21;
  }
  while (v21 != 4);
  if (*(unsigned char *)(a2 + 242))
  {
    (*((void (**)(OZChannel *))a7->var0 + 34))(a7);
    uint64_t WorkingGamut = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    double v23 = *(void **)(a2 + 1296);
    if (!v23) {
      double v23 = *(void **)(a2 + 1280);
    }
    v79.var0.var0 = (int64_t)v23;
    if (v23) {
      long long v24 = (PCShared_base *)((char *)v23 + *(void *)(*v23 - 24));
    }
    else {
      long long v24 = 0;
    }
    PCSharedCount::PCSharedCount((PCSharedCount *)&v79.var0.var1, v24);
    LiGraphBuilder::prepare3DEngine(a3, WorkingGamut, &v79);
  }
  else
  {
    uint64_t v25 = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    v79.var0.var0 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v79.var0.var1);
    LiGraphBuilder::prepare3DEngine(a3, v25, &v79);
  }
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v79.var0.var1);
  CMTime v64 = *(CMTime *)a2;
  CMTime time = v64;
  Float64 Seconds = CMTimeGetSeconds(&time);
  CMTime v62 = *a6;
  double v27 = CMTimeGetSeconds(&v62);
  LiGraphBuilder::get3DEngineGeode((const PCSharedCount *)a3, (PCSharedCount *)&v79);
  if (!v79.var0.var0) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v79.var0.var0 + 160))(&lpsrc);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v79.var0.var1);
  if (lpsrc)
  {
    uint64_t v29 = (uint64_t)v28;
    if (v28)
    {
      int32x2_t v30 = vcvt_s32_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 324)));
      v28[25] = 0;
      v28[26] = v30;
      if (*(unsigned char *)(a2 + 202))
      {
        OZRenderParams::getResolution((OZRenderParams *)a2, (__n128 *)&v79);
        long long v31 = *(_OWORD *)&v79.var0.var0;
      }
      else
      {
        OZRenderParams::getPixelTransform((OZRenderParams *)a2, (uint64_t)&v79);
        memset(v75, 0, 24);
        float64x2_t v67 = 0uLL;
        *(void *)&long long v68 = 0;
        getScaleTranslate((float64x2_t *)&v79, (uint64_t)v75, &v67);
        long long v31 = *(_OWORD *)v75;
      }
      *(_OWORD *)(v29 + 264) = v31;
      *(Float64 *)(v29 + 280) = Seconds;
      uint64_t v32 = (OZScene *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
      uint64_t CustomEnvironmentMap = OZScene::getCustomEnvironmentMap(v32);
      if (!CustomEnvironmentMap)
      {
        long long v34 = (double *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
        if (v34[73] / 100.0 <= 0.0) {
          uint64_t CustomEnvironmentMap = 0;
        }
        else {
          uint64_t CustomEnvironmentMap = OZ3DEngineCore::getCachedEnvironmentMap((OZ3DEngineCore *)v34);
        }
      }
      *(void *)(v29 + 288) = CustomEnvironmentMap;
      *(double *)(v29 + 296) = *(double *)((*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7) + 584) / 100.0;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  OZ3DEngineCore::getMotionLights(&v64, a7, (OZElement *)(a3 + 112), (uint64_t)&v67);
  if (a7
  {
    double v36 = v35;
    (*(void (**)(void *__return_ptr, double, float, float, float, float, float))(*(void *)v35 + 2272))(v60, v27, a4[67], a4[68], a4[69], a4[70], a4[71]);
    uint64_t v37 = v60[0];
  }
  else
  {
    uint64_t v37 = 0;
    double v36 = 0;
    v60[0] = 0;
    v60[1] = 0;
  }
  *(unsigned char *)(v37 + 568) = OZChannel::getValueAsInt((OZChannel *)(v36 + 24080), MEMORY[0x1E4F1FA48], 0.0) != 0;
  var6 = a7[6].var6;
  if (var6)
  {
    if (v39)
    {
      if ((OZChannelBase::isEnabled((OZChannelBase *)(v39 + 20744), 1, 1) & 1) == 0)
      {
        OZRenderParams::getFFInputNode((void *)a2, 1u, &v59);
        Li3DEngineImageSource::setMatteNode(v29, &v59);
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
        }
        OZRenderParams::getFFInputNode((void *)a2, 2u, &v58);
        Li3DEngineImageSource::setDepthNode(v29, &v58);
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 24))(v58);
        }
        int v40 = (OZScene *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
        OZScene::setARFrameForObject(v40, (Li3DEngineImageSource *)v29);
      }
    }
  }
  *(_OWORD *)&v75[16] = xmmword_1B7E736F0;
  *(_OWORD *)&v75[32] = xmmword_1B7E736F0;
  *(_OWORD *)int v75 = xmmword_1B7E736F0;
  (*((void (**)(OZChannel *, unsigned char *, uint64_t))a7->var0 + 170))(a7, v75, a2);
  for (uint64_t j = 0; j != 4; ++j)
  {
    float32x4_t v42 = *(float32x4_t *)(a5 + 16 * j);
    BOOL v43 = (float64x2_t *)((char *)&v79 + 32 * j);
    *BOOL v43 = vcvtq_f64_f32(*(float32x2_t *)v42.f32);
    v43[1] = vcvt_hight_f64_f32(v42);
  }
  PCMatrix44Tmpl<double>::invert((double *)&v79.var0.var0, (double *)&v79.var0.var0, 0.0);
  int v44 = 0;
  double v45 = -1.0;
  double v46 = 1.0;
  double v47 = 1.0;
  double v48 = -1.0;
  double v49 = 1.0;
  double v50 = -1.0;
  while (1)
  {
    BOOL v51 = (CMTimeValue *)&v75[8];
    if (v44) {
      BOOL v51 = (CMTimeValue *)v75;
    }
    CMTimeValue v52 = *v51;
    int v53 = &v75[24];
    if ((v44 & 2) != 0) {
      int v53 = &v75[16];
    }
    uint64_t v54 = *(void *)v53;
    char v55 = (CMTimeEpoch *)&v75[40];
    if ((v44 & 4) != 0) {
      char v55 = (CMTimeEpoch *)&v75[32];
    }
    CMTimeEpoch v56 = *v55;
    v66.CMTimeValue value = v52;
    *(void *)&v66.timescale = v54;
    v66.CMTimeEpoch epoch = v56;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v79.var0.var0, (double *)&v66.value, (double *)&v66.value);
    if (v44)
    {
      if (v46 >= *(double *)&v66.value) {
        double v46 = *(double *)&v66.value;
      }
      if (v45 <= *(double *)&v66.value) {
        double v45 = *(double *)&v66.value;
      }
      if (v47 >= *(double *)&v66.timescale) {
        double v47 = *(double *)&v66.timescale;
      }
      if (v48 <= *(double *)&v66.timescale) {
        double v48 = *(double *)&v66.timescale;
      }
      if (v49 >= *(double *)&v66.epoch) {
        double v49 = *(double *)&v66.epoch;
      }
      if (v50 <= *(double *)&v66.epoch) {
        double v50 = *(double *)&v66.epoch;
      }
    }
    else
    {
      double v48 = *(double *)&v66.timescale;
      double v50 = *(double *)&v66.epoch;
      double v45 = *(double *)&v66.value;
      double v46 = *(double *)&v66.value;
      double v47 = *(double *)&v66.timescale;
      double v49 = *(double *)&v66.epoch;
    }
    if (++v44 == 8)
    {
      uint64_t v57 = (double *)v60[0];
      *(double *)(v60[0] + 120) = v46;
      v57[16] = v45;
      v57[17] = v47;
      v57[18] = v48;
      v57[19] = v49;
      v57[20] = v50;
      operator new();
    }
  }
}

void sub_1B7C613C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZ3DEngineCore::makeRenderImageSource()
{
  {
    {
      __cxa_atexit(MEMORY[0x1E4FBA268], &OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m, &dword_1B73F3000);
    }
  }
  std::mutex::lock(&OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  operator new();
}

void sub_1B7C61990(_Unwind_Exception *a1, uint64_t a2, PCSharedCount *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v8.var0 = va_arg(va1, PC_Sp_counted_base *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6C0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x620]);
  std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100]((LiGraphBuilder **)(v6 - 128), 0);
  PCSharedCount::~PCSharedCount(a3);
  std::mutex::unlock(&OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineCore::getEnvironmentMap(OZ3DEngineCore *this, OZScene *a2)
{
  if (*((double *)this + 73) / 100.0 <= 0.0) {
    return 0;
  }
  else {
    return OZ3DEngineCore::getCachedEnvironmentMap(this);
  }
}

double OZ3DEngineCore::getEnvironmentMapIntensity(OZ3DEngineCore *this, OZScene *a2)
{
  return *((double *)this + 73) / 100.0;
}

uint64_t Li3DEngineImageSource::setMatteNode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 232);
  uint64_t result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = *a2;
    }
    *(void *)(a1 + 232) = result;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v6();
    }
  }
  return result;
}

uint64_t Li3DEngineImageSource::setDepthNode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 224);
  uint64_t result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = *a2;
    }
    *(void *)(a1 + 224) = result;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v6();
    }
  }
  return result;
}

uint64_t OZ3DEngineCore::getCachedEnvironmentMap(OZ3DEngineCore *this)
{
  uint64_t v1 = OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap;
  if (!OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap)
  {
    uint64_t v2 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.ProVideoiOS"];
    if (!v2) {
      uint64_t v2 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.iMovie.ProVideoiOS"];
    }
    CFStringRef v3 = CFStringCreateWithCString(0, (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "resourcePath"), "stringByAppendingPathComponent:", @"SCNDefaultLighting.hdr"), "UTF8String"), 0x600u);
    CFURLRef v4 = CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 0);
    CFRelease(v3);
    PCLoadBitmap(v4, &v6);
    CFRelease(v4);
    if (v6) {
      CreateCGImageFromPCBitmap(&v6, 16);
    }
    uint64_t v1 = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap = 0;
  }
  return v1;
}

void sub_1B7C61CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

float OZMaterialLayerBase::calcTextureScale(OZMaterialLayerBase *this)
{
  uint64_t v1 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  TextureResolutiouint64_t n = (PCInfo *)OZPreferenceManager::getTextureResolution(v1);
  if (!TextureResolution)
  {
    if (PCInfo::texturesShouldUseQuarterRes(TextureResolution)) {
      LODWORD(TextureResolution) = 3;
    }
    else {
      LODWORD(TextureResolution) = 1;
    }
  }
  float result = 1.0;
  if (TextureResolution == 2) {
    float result = 0.5;
  }
  if (TextureResolution == 3) {
    return 0.25;
  }
  return result;
}

OZChannelBase *OZMaterialLayerBase::initBase(OZMaterialLayerBase *this)
{
  OZMaterialLayerBase::setLayerTypeStrings(this);
  OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
  (*(void (**)(OZMaterialLayerBase *))(*(void *)this + 128))(this);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)this, @"TXMaterialLayerFolderGroupController");
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)this, @"TXMaterialLayerFolderLabelController");
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 655360);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 936), 0x100000000, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 936), @"OZMaterialLayerSubtypeEnumController");

  return OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
}

void OZChannelStringEnum::~OZChannelStringEnum(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F114B650;
  this[2].var0 = (__CFString *)&unk_1F114B9C0;
  PCString::~PCString(this + 35);
  uint64_t v2 = this + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  OZChannelEnum::~OZChannelEnum(this);
}

{
  PCString *v2;

  this->var0 = (__CFString *)&unk_1F114B650;
  this[2].var0 = (__CFString *)&unk_1F114B9C0;
  PCString::~PCString(this + 35);
  uint64_t v2 = this + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  OZChannelEnum::~OZChannelEnum(this);
  MEMORY[0x1BA9BFBA0]();
}

void OZMaterialLayerBase::OZMaterialLayerBase(OZMaterialLayerBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v5 = &unk_1F114A7B0;
  *(void *)(v5 + 16) = &unk_1F114AB50;
  *(unsigned char *)(v5 + 128) = 0;
  PCURL::PCURL((PCURL *)&v7, @"Material Layer Selection Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Layer Selection");
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 136), &v7, &v6, (OZChannelFolder *)this, 1u, 0xAu, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Layer Subselection Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Layer Subselection");
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392), &v7, &v6, (OZChannelFolder *)this, 2u, 0xAu, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Layer Selection Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Layer Selection");
  OZChannelStringEnum::OZChannelStringEnum((OZMaterialLayerBase *)((char *)this + 648), &v7, &v6, (OZChannelFolder *)this, 3u, 2u);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Layer Subselection Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Layer Subselection");
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936), &v7, &v6, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  *((void *)this + 151) = 0;
  *((void *)this + 150) = 0;
  *((void *)this + 149) = (char *)this + 1200;
  *((_DWORD *)this + 304) = 0;
  OZMaterialLayerBase::initBase(this);
}

void sub_1B7C62138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  double v18 = v17;
  uint64_t v19 = v14;
  PCSpinLock::~PCSpinLock(v16);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v15, *v18);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannelStringEnum::~OZChannelStringEnum(v13);
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B7C62200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C62220()
{
}

void OZMaterialLayerBase::OZMaterialLayerBase(OZMaterialLayerBase *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F114A7B0;
  *(void *)(v5 + 16) = &unk_1F114AB50;
  *(unsigned char *)(v5 + 128) = 0;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 136), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392), (const OZChannelEnum *)&a2[3].var7, (OZChannelFolder *)this);
  OZChannelStringEnum::OZChannelStringEnum((OZMaterialLayerBase *)((char *)this + 648), (const OZChannelStringEnum *)&a2[5].var11, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936), (const OZChannelEnum *)&a2[8].var5, (OZChannelFolder *)this);
  *((void *)this + 151) = 0;
  *((void *)this + 150) = 0;
  *((void *)this + 149) = (char *)this + 1200;
  *((_DWORD *)this + 304) = 0;
  OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
}

void sub_1B7C62328(_Unwind_Exception *a1)
{
  PCString v9 = v8;
  uint64_t v10 = v5;
  PCSpinLock::~PCSpinLock(v9);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v7, *v10);
  OZChannelEnum::~OZChannelEnum(v6);
  OZChannelStringEnum::~OZChannelStringEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayerBase::setLayerTypeStrings(OZMaterialLayerBase *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZMaterialLayerBase *))(*(void *)this + 864))(this);
  if (v2)
  {
    CFStringRef v3 = (const void *)v2;
    CFURLRef v4 = (PCString *)((char *)this + 648);
    OZChannelEnum::clearStrings(v4);
    PCURL::PCURL((PCURL *)&v5, v3);
    OZChannelStringEnum::setStrings(v4, &v5, 1);
    PCString::~PCString(&v5);
  }
}

void sub_1B7C62424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZMaterialLayerBase::setLayerSubtypeStrings(PCString *this)
{
  uint64_t v2 = ((uint64_t (*)(PCString *))this->var0[27].info)(this);
  if (v2)
  {
    CFStringRef v3 = (const void *)v2;
    OZChannelEnum::clearStrings(this + 117);
    PCURL::PCURL((PCURL *)&v5, v3);
    OZChannelEnum::setStrings(this + 117, &v5, 1);
    PCString::~PCString(&v5);
    ((void (*)(PCString *__return_ptr, PCString *))this->var0[27].data)(&v5, this);
    OZChannelEnum::setImages((OZChannelEnum *)&this[117], &v5);
    PCString::~PCString(&v5);
  }
  return ((uint64_t (*)(PCString *))this->var0[24].data)(this);
}

void sub_1B7C62544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

OZChannelBase *OZMaterialLayerBase::showHideLayerSubtypeChannel(OZMaterialLayerBase *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZMaterialLayerBase *))(*(void *)this + 872))(this);
  CFStringRef v3 = (OZChannelBase *)((char *)this + 936);
  if (v2)
  {
    return OZChannelBase::resetFlag(v3, 0x400000, 0);
  }
  else
  {
    return OZChannelBase::setFlag(v3, 0x400000, 0);
  }
}

void OZMaterialLayerBase::~OZMaterialLayerBase(OZMaterialLayerBase *this)
{
  *(void *)this = &unk_1F114A7B0;
  *((void *)this + 2) = &unk_1F114AB50;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 304);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 1192, *((void **)this + 150));
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936));
  *((void *)this + 81) = &unk_1F114B650;
  *((void *)this + 83) = &unk_1F114B9C0;
  PCString::~PCString((PCString *)this + 116);
  uint64_t v2 = (void **)((char *)this + 904);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 81);
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

void OZMaterialLayerBase::collectInternalTexturesFromLayeredMaterial(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *OZMaterialLayerBase::removeThisFromBehaviors(OZChannelBase *this)
{
  float result = (void *)OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    CFStringRef v3 = (const void *)result[158];
    if (v3)
    {
      if (result
      {
        CFURLRef v4 = result + 125;
        for (uint64_t i = result[126]; (void *)i != v4; uint64_t i = *(void *)(i + 8))
          float result = (void *)(*(uint64_t (**)(void, OZChannelBase *))(**(void **)(i + 16) + 160))(*(void *)(i + 16), this);
      }
    }
  }
  return result;
}

uint64_t OZMaterialLayerBase::parseEnd(OZMaterialLayerBase *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 392), 2))
  {
    CFURLRef v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 648), v4, (double)ValueAsInt, 0);
    int v6 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 392), v4, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 936), v4, (double)v6, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 392), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 648), 0x400000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 0x400000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x80000);
  OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
  OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
  return v3;
}

uint64_t non-virtual thunk to'OZMaterialLayerBase::parseEnd(OZMaterialLayerBase *this, PCSerializerReadStream *a2)
{
  return OZMaterialLayerBase::parseEnd((OZMaterialLayerBase *)((char *)this - 16), a2);
}

uint64_t OZMaterialLayerBase::getDefaultSublayerType(OZMaterialLayerBase *this)
{
  return 0;
}

OZChannelBase *OZMaterialLayerBase::setLayerType(OZMaterialLayerBase *this, uint64_t a2)
{
  CFURLRef v4 = (char *)this + 648;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(char *, uint64_t, void, double))(*((void *)this + 81) + 712))(v4, v5, 0, (double)(int)a2);
  if (ValueAsInt != a2)
  {
    v7.n128_f64[0] = (double)(*(int (**)(OZMaterialLayerBase *, uint64_t))(*(void *)this + 904))(this, a2);
    (*(void (**)(char *, void, void, __n128))(*((void *)this + 117) + 712))((char *)this + 936, MEMORY[0x1E4F1FA48], 0, v7);
    OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  }

  return OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
}

OZChannelObjectRootBase *OZMaterialLayerBase::markFactoriesForSerialization(OZFactory **this, OZChannelFolder *a2)
{
  OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);

  return OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization((OZChannelObjectRootBase *)this, a2, v4);
}

OZChannelObjectRootBase *non-virtual thunk to'OZMaterialLayerBase::markFactoriesForSerialization(OZFactory **this, OZChannelFolder *a2)
{
  uint64_t v3 = (OZChannelObjectRootBase *)(this - 2);
  OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);

  return OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(v3, a2, v4);
}

uint64_t OZMaterialLayerBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  unint64_t var1 = this->var1;
  __n128 v7 = (const OZFactory *)OZFactory::fileRefID(var1, a2);
  OZFactory::setFileRefID(var1, v7);

  return OZChannelBase::writeHeader(this, a2, a3);
}

uint64_t non-virtual thunk to'OZMaterialLayerBase::writeHeader(OZMaterialLayerBase *this, OZFactory *a2, int a3)
{
  return OZMaterialLayerBase::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayerBase::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  OZChannelBase::writeFlags((uint64_t)this, a2, 1);

  return OZChannelFolder::writeBody(this, a2, 0, a4, 0);
}

uint64_t non-virtual thunk to'OZMaterialLayerBase::writeBody(OZMaterialLayerBase *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  int v6 = (OZChannelFolder *)((char *)this - 16);
  OZChannelBase::writeFlags((uint64_t)this - 16, a2, 1);

  return OZChannelFolder::writeBody(v6, a2, 0, a4, 0);
}

BOOL OZMaterialLayerBase::allowsAssignment(OZMaterialLayerBase *this, const OZChannelBase *a2)
{
  BOOL result = 0;
  if (a2)
  {
    unint64_t var1 = a2->var1;
    if (var1)
    {
      uint64_t v4 = *((void *)this + 1);
      if (v4)
      {
        int32x4_t v6 = *(int32x4_t *)(v4 + 8);
        if (OZFactory::isKindOfClass((unint64_t)var1, &v6)) {
          return 1;
        }
      }
    }
  }
  return result;
}

void *OwningMaterialLayerMapChannel(OZChannelFolder *a1)
{
  while (1)
  {
    a1 = (OZChannelFolder *)*((void *)a1 + 6);
    if (!a1) {
      break;
    }
    if (result) {
      return result;
    }
  }
  return 0;
}

void *OwningMaterialMapTransformChannel(OZChannelFolder *a1)
{
  while (1)
  {
    a1 = (OZChannelFolder *)*((void *)a1 + 6);
    if (!a1) {
      break;
    }
    if (result) {
      return result;
    }
  }
  return 0;
}

OZChannelBase *OZMaterialLayerBase::channelValueWillBeSet(OZChannelBase *this, OZChannelFolder *a2, const CMTime *a3, double a4)
{
  __n128 v7 = (OZChannelMaterialLayerMap *)OwningMaterialLayerMapChannel(a2);
  if (v7)
  {
    PCSharedCount v8 = v7;
    if ((OZChannelFolder *)((char *)v7 + 1968) == a2)
    {
      uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
      if (ObjectManipulator) {
        uint64_t v10 = (OZLayeredMaterial *)(ObjectManipulator - 16);
      }
      else {
        uint64_t v10 = 0;
      }
      OZChannelMaterialLayerMap::willSetSharedTransform(v8, a4, v10);
    }
  }
  BOOL result = (OZChannelBase *)OwningMaterialMapTransformChannel(a2);
  if (result)
  {
    uint64_t v12 = result;
    if (&result[1].var2 == (void ***)a2)
    {
      uint64_t v13 = OZChannelBase::getObjectManipulator(this);
      if (v13) {
        uint64_t v14 = (const PCString *)(v13 - 16);
      }
      else {
        uint64_t v14 = 0;
      }
      return (OZChannelBase *)OZChannelBase::setRangeName(v12, v14);
    }
  }
  return result;
}

uint64_t OZMaterialLayerBase::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  OZChannelFolder::resetToDefault(this, a2);

  return OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
}

void OZMaterialLayerBase::makeMaterialLayerSequenceChannelFolder(OZMaterialLayerBase *this)
{
}

void sub_1B7C62FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialLayerBase::getSequenceChannels(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator) {
    uint64_t v3 = ObjectManipulator - 16;
  }
  else {
    uint64_t v3 = 0;
  }

  return OZLayeredMaterial::getSequenceChannelsForMaterialLayer(v3, (uint64_t)this);
}

void OZMaterialLayerBase::getTextureTokensLock(OZMaterialLayerBase *this@<X0>, os_unfair_lock_s **a2@<X8>)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 1216);
  *a2 = v2;
  PCSpinLock::lock(v2);
}

void *OZMaterialLayerBase::findToken@<X0>(OZMaterialLayerBase *this@<X0>, const PCHash128 *a2@<X1>, void *a3@<X8>)
{
  BOOL result = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this + 1192, a2);
  if ((void *)((char *)this + 1200) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[7];
    *a3 = result[6];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void OZMaterialLayerBase::addToken(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t **)(a1 + 1192);
  long long v5 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  __n128 v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,std::weak_ptr<LiTextureStoreTokenImpl>>>(v3, (const PCHash128 *)&v5, (uint64_t)&v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B7C63110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AddGradientToMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v91 = v17;
  uint64_t v19 = v18;
  uint64_t v20 = v10;
  double v22 = v21;
  long long v24 = v23;
  uint64_t v25 = (const CMTime *)v9;
  v126[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  uint64_t v120 = 0x3FF0000000000000;
  uint64_t v117 = 0x3FF0000000000000;
  uint64_t v114 = 0x3FF0000000000000;
  uint64_t v111 = 0x3FF0000000000000;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  double v26 = (void *)(v10 + 576);
  int v27 = *(_DWORD *)(v10 + 588);
  if (*(_DWORD *)(v10 + 584) <= v27) {
    int v28 = (2 * (v27 + 1)) | 1;
  }
  else {
    int v28 = *(_DWORD *)(v10 + 584);
  }
  unint64_t v92 = v26;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v26, v27 + 1, v28);
  uint64_t v29 = *(void *)(v20 + 592) + 152 * *(int *)(v20 + 588);
  *(void *)(v29 - 152) = *(void *)(v19 + 80);
  ProShade::Value::set(v29 - 144, (const PCString *)3, 7, &v111);
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v20, *(const ProShade::SamplerNode **)(v19 + 16));
  int v109 = *(_DWORD *)(SamplerInfo + 324);
  char v110 = *(unsigned char *)(SamplerInfo + 328);
  char v31 = *(unsigned char *)(SamplerInfo + 329);
  __int16 v89 = *(_WORD *)(SamplerInfo + 330);
  __int16 v90 = *(_WORD *)(SamplerInfo + 338);
  BOOL v32 = v12 != 0;
  ProGL::GL::GL((ProGL::GL *)v108);
  if (OZChannel::getValueAsInt((OZChannel *)(v16 + 800), v25, 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1192), v25, 0.0);
    double v34 = v33;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1344), v25, 0.0);
    double v36 = v35;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1896), v25, 0.0);
    double v38 = v37;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 2048), v25, 0.0);
    double v40 = sqrt((v38 - v34) * (v38 - v34) + (v39 - v36) * (v39 - v36));
    double v41 = *(double *)(v14 + 24);
    double v42 = 512.0 / v40;
    if (v40 <= 512.0) {
      double v42 = 1.0;
    }
    double v88 = v42;
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v126);
    PCString::PCString((PCString *)v121, "OZMaterialLayer::gradient2d");
    PCHashWriteStream::writeValue(v126, (PCString *)v121);
    PCString::~PCString((PCString *)v121);
    OZChannelGradient::getGradientHash(v16);
    PCHashWriteStream::writeValue(v126, (const PCHash128 *)v121);
    Hash = (OZCacheManager *)PCHashWriteStream::getHash(v126);
    long long v107 = *(_OWORD *)Hash;
    int v44 = (PGTextureCache *)OZCacheManager::Instance(Hash);
    OZCacheManager::getTextureForKey(v44, v24, (const PCHash128 *)&v107, 0, v106);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v105);
    if (!v106[0]) {
      operator new();
    }
    PGTexture::getPGLTexture((uint64_t)v106[0], v121);
    float64x2_t v45 = *(float64x2_t *)v121;
    *(void *)&v121[8] = 0;
    *(void *)float32x4_t v121 = 0;
    double v46 = *(std::__shared_weak_count **)&v105.f64[1];
    float64x2_t v105 = v45;
    if (v46)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      if (*(void *)&v121[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v121[8]);
      }
    }
    v45.f64[0] = 0.0 - v34;
    *(void *)&v125[32] = 0x3FF0000000000000;
    uint64_t v124 = 0x3FF0000000000000;
    *(void *)&v121[40] = 0x3FF0000000000000;
    *(void *)float32x4_t v121 = 0x3FF0000000000000;
    memset(&v121[8], 0, 32);
    float64x2_t v122 = 0u;
    long long v123 = 0u;
    memset(v125, 0, 32);
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v121, v45, v41 * 0.5 - v36, 0.0);
    if (v88 != 1.0)
    {
      *(float64x2_t *)float32x4_t v121 = vmulq_n_f64(*(float64x2_t *)v121, v88);
      *(float64x2_t *)&v121[16] = vmulq_n_f64(*(float64x2_t *)&v121[16], v88);
      *(float64x2_t *)&v121[32] = vmulq_n_f64(*(float64x2_t *)&v121[32], v88);
      float64x2_t v122 = vmulq_n_f64(v122, v88);
    }
    int v76 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v76) {
      int v77 = (2 * (v76 + 1)) | 1;
    }
    else {
      int v77 = *(_DWORD *)(v20 + 584);
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v92, v76 + 1, v77);
    uint64_t v78 = *(void *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(void *)(v78 - 152) = *(void *)(v91 + 16);
    ProShade::Value::set(v78 - 144, (const PCString *)3, 7, v121);
    int v79 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v79) {
      int v80 = (2 * (v79 + 1)) | 1;
    }
    else {
      int v80 = *(_DWORD *)(v20 + 584);
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v92, v79 + 1, v80);
    uint64_t v81 = *(void *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(void *)(v81 - 152) = *(void *)(v19 + 48);
    long long v94 = 0uLL;
    *(int64x2_t *)unint64_t v95 = vdupq_n_s64(0x4090000000000000uLL);
    ProShade::Value::set(v81 - 144, (const PCString *)3, 4, &v94);
    ProShade::SamplerNode::setWrapMode(*(void *)(v19 + 16), 3);
    long long v94 = 0x3FF0000000000000uLL;
    *(_OWORD *)&v95[8] = xmmword_1B8382070;
    long long v96 = xmmword_1B7E733D0;
    *(void *)unint64_t v95 = 0;
    uint64_t v97 = 0x4080000000000000;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0x3FF0000000000000;
    long long v101 = 0u;
    long long v102 = 0u;
    uint64_t v103 = 0x3FF0000000000000;
    LiMaterial::setTexture((os_unfair_lock_s *)v20, v19, (uint64_t *)&v105, &v94);
    if (*(void *)&v105.f64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v105.f64[1]);
    }
    if (v106[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106[1]);
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v126);
    char v75 = 0;
    char v82 = 0;
    BOOL v32 = 0;
    char v31 = 1;
  }
  else
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v126);
    (*(void (**)(uint64_t, int8x8_t *, const CMTime *))(*(void *)v16 + 448))(v16, v126, v25);
    double v47 = (OZCacheManager *)PCHashWriteStream::getHash(v126);
    long long v94 = *(_OWORD *)v47;
    double v48 = (PGTextureCache *)OZCacheManager::Instance(v47);
    OZCacheManager::getTextureForKey(v48, v24, (const PCHash128 *)&v94, 0, v104);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v93);
    if (!v104[0])
    {
      OZChannelGradient::getGradient((uint64_t **)v16, v25, 1, a9, (uint64_t)v121, 0x100u, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
      ProGL::createTexture((ProGL *)v108, v51);
    }
    PGTexture::getPGLTexture((uint64_t)v104[0], v121);
    long long v49 = *(_OWORD *)v121;
    *(void *)&v121[8] = 0;
    *(void *)float32x4_t v121 = 0;
    double v50 = (std::__shared_weak_count *)*((void *)&v93[0] + 1);
    v93[0] = v49;
    if (v50)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      if (*(void *)&v121[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v121[8]);
      }
    }
    *(void *)&v125[32] = 0x3FF0000000000000;
    uint64_t v124 = 0x3FF0000000000000;
    *(void *)&v121[40] = 0x3FF0000000000000;
    *(void *)float32x4_t v121 = 0x3FF0000000000000;
    memset(&v121[8], 0, 32);
    float64x2_t v122 = 0u;
    long long v123 = 0u;
    memset(v125, 0, 32);
    LiMaterial::setTexture((os_unfair_lock_s *)v20, v19, (uint64_t *)v93, v121);
    int v52 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v52) {
      int v53 = (2 * (v52 + 1)) | 1;
    }
    else {
      int v53 = *(_DWORD *)(v20 + 584);
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v92, v52 + 1, v53);
    uint64_t v54 = *(void *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(void *)(v54 - 152) = *(void *)(v19 + 48);
    *(void *)&v121[8] = 0;
    *(void *)float32x4_t v121 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v121[16] = _Q0;
    ProShade::Value::set(v54 - 144, (const PCString *)3, 4, v121);
    *(void *)&v125[32] = 0x3FF0000000000000;
    uint64_t v124 = 0x3FF0000000000000;
    *(void *)&v121[40] = 0x3FF0000000000000;
    *(void *)float32x4_t v121 = 0x3FF0000000000000;
    memset(&v121[8], 0, 32);
    float64x2_t v122 = 0u;
    long long v123 = 0u;
    memset(v125, 0, 32);
    if (OZChannel::getValueAsInt((OZChannel *)(v16 + 2984), MEMORY[0x1E4F1FA48], 0.0) == 1)
    {
      double v60 = 1.0 / v22;
      float64x2_t v61 = *(float64x2_t *)v121;
      if (1.0 / v22 == 1.0)
      {
        float64x2_t v62 = *(float64x2_t *)&v121[16];
      }
      else
      {
        float64x2_t v61 = vmulq_n_f64(*(float64x2_t *)v121, v60);
        float64x2_t v62 = vmulq_n_f64(*(float64x2_t *)&v121[16], v60);
      }
      *(float64x2_t *)float32x4_t v121 = vaddq_f64(*(float64x2_t *)&v125[8], v61);
      *(float64x2_t *)&v121[16] = vaddq_f64(*(float64x2_t *)&v125[24], v62);
      char v75 = 1;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1192), v25, 0.0);
      double v64 = v63;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1344), v25, 0.0);
      double v66 = v65;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1896), v25, 0.0);
      double v68 = v67;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 2048), v25, 0.0);
      long double v69 = v68 - v64;
      double v71 = v70 - v66;
      double v72 = -atan2(v70 - v66, v69);
      v73.f64[0] = -v64;
      PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v121, v73, -v66, 0.0);
      PCMatrix44Tmpl<double>::leftRotate((double *)v121, 2, v72);
      double v74 = 1.0 / sqrt(v69 * v69 + v71 * v71);
      char v75 = 0;
      if (v74 != 1.0)
      {
        *(float64x2_t *)float32x4_t v121 = vmulq_n_f64(*(float64x2_t *)v121, v74);
        *(float64x2_t *)&v121[16] = vmulq_n_f64(*(float64x2_t *)&v121[16], v74);
      }
    }
    int v83 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v83) {
      int v84 = (2 * (v83 + 1)) | 1;
    }
    else {
      int v84 = *(_DWORD *)(v20 + 584);
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v92, v83 + 1, v84);
    uint64_t v85 = *(void *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(void *)(v85 - 152) = *(void *)(v91 + 16);
    ProShade::Value::set(v85 - 144, (const PCString *)3, 7, v121);
    ProShade::SamplerNode::setWrapMode(*(void *)(v19 + 16), 3);
    if (*((void *)&v93[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v93[0] + 1));
    }
    if (v104[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v104[1]);
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v126);
    char v82 = 1;
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v16 + 2728), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v87 = LiMaterial::obtainSamplerInfo((os_unfair_lock_s *)v20, *(const ProShade::SamplerNode **)(v19 + 16));
  *(_WORD *)(v87 + 316) = 1;
  *(unsigned char *)(v87 + 318) = v75;
  *(unsigned char *)(v87 + 319) = 0;
  *(_DWORD *)(v87 + 320) = 3;
  *(_DWORD *)(v87 + 324) = v109;
  *(unsigned char *)(v87 + 328) = v110;
  *(unsigned char *)(v87 + 329) = v31;
  *(_WORD *)(v87 + 330) = v89;
  *(_DWORD *)(v87 + 332) = ValueAsInt == 1;
  *(unsigned char *)(v87 + 336) = v82;
  *(unsigned char *)(v87 + 337) = v32;
  *(unsigned char *)(v87 + 338) = v90;
  *(unsigned char *)(v87 + 312) = 1;
  ProGL::GL::~GL((ProGL::GL *)v108);
}

void sub_1B7C641F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14)
{
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  if (STACK[0x318]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x318]);
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x13E8]);
  ProGL::GL::~GL((ProGL::GL *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1B7C644C4()
{
}

void AddTextureToMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v71 = v10;
  uint64_t v72 = v11;
  uint64_t v73 = v12;
  uint64_t v14 = v13;
  uint64_t v74 = v15;
  uint64_t v78 = v16;
  v123[520] = *MEMORY[0x1E4F143B8];
  char v75 = *(long long **)(v9 + 16);
  uint64_t v69 = *(void *)(v9 + 24);
  uint64_t v79 = v9;
  uint64_t v17 = *(os_unfair_lock_s **)v9;
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)v9, *(const ProShade::SamplerNode **)(v13 + 16));
  __int16 v19 = *(_WORD *)(SamplerInfo + 317);
  char v20 = *(unsigned char *)(SamplerInfo + 319);
  int v21 = *(_DWORD *)(SamplerInfo + 320);
  int v22 = *(_DWORD *)(SamplerInfo + 324);
  int v23 = *(unsigned __int8 *)(SamplerInfo + 328);
  char v119 = *(unsigned char *)(SamplerInfo + 331);
  __int16 v118 = *(_WORD *)(SamplerInfo + 329);
  int v77 = *(_DWORD *)(SamplerInfo + 332);
  char v24 = *(unsigned char *)(SamplerInfo + 336);
  char v25 = *(unsigned char *)(SamplerInfo + 337);
  int v26 = *(unsigned __int8 *)(SamplerInfo + 338);
  int v80 = v17;
  int v27 = *(const ProShade::SamplerNode **)(v14 + 16);
  char v117 = v119;
  __int16 v116 = v118;
  uint64_t v28 = LiMaterial::obtainSamplerInfo(v17, v27);
  *(unsigned char *)(v28 + 316) = 0;
  *(_WORD *)(v28 + 317) = v19;
  *(unsigned char *)(v28 + 319) = v20;
  *(_DWORD *)(v28 + 320) = v21;
  int v29 = v22;
  *(_DWORD *)(v28 + 324) = v22;
  int v30 = v23;
  *(unsigned char *)(v28 + 328) = v23;
  char v31 = v24;
  *(_WORD *)(v28 + 329) = v116;
  *(unsigned char *)(v28 + 331) = v117;
  *(_DWORD *)(v28 + 332) = v77;
  *(unsigned char *)(v28 + 336) = v24;
  *(unsigned char *)(v28 + 337) = v25;
  *(unsigned char *)(v28 + 338) = v26;
  *(unsigned char *)(v28 + 312) = 1;
  ImageNode = (OZImageNode *)OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(v78 + 136));
  if (ImageNode)
  {
    double v33 = ImageNode;
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v78 + 1968), MEMORY[0x1E4F1FA48], 0.0);
    long long v34 = *v75;
    v115.CMTimeEpoch epoch = *((void *)v75 + 2);
    *(_OWORD *)&v115.CMTimeValue value = v34;
    __n128 v113 = 0uLL;
    uint64_t v114 = 0;
    OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)v78, &v115, &v113);
    OZRenderParams::OZRenderParams((OZRenderParams *)v110, (const OZRenderParams *)v75);
    *(__n128 *)&v110[0]._pcColorDesc._colorSpaceRef._obuint64_t j = v113;
    uint64_t v112 = 0;
    *(void *)&v110[0]._pcColorDesc._toneMapMethod._gaiuint64_t n = v114;
    uint64_t v111 = 0;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v109, v33, (OZRenderParams *)v110);
    int v35 = v30;
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v123);
    v108[0] = v108;
    v108[1] = v108;
    v108[2] = 0;
    (*(void (**)(__n128 *__return_ptr, OZImageNode *, void *, FxColorDescription *, void *))(*(void *)v33 + 48))(&v107, v33, v123, v110, v108);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v122);
    PCHashWriteStream::setHash(v122, &v107);
    double v36 = (OZMaterialLayerBase *)OZRenderParams::setReducedResolutionOverride((uint64_t)v110, 1);
    float v37 = OZMaterialLayerBase::calcTextureScale(v36);
    PCHashWriteStream::writeValue((int8x8_t *)v122, v37);
    char v38 = OZChannel::getValueAsInt((OZChannel *)(v78 + 5744), &v115, 0.0) != 0;
    PCHashWriteStream::writeValue((int8x8_t *)v122, v38);
    if (v29)
    {
      PCHashWriteStream::writeValue((int8x8_t *)v122, v29);
      PCHashWriteStream::writeValue((int8x8_t *)v122, v35 != 0);
    }
    WorkingColorSpace = (PCColorSpaceCache *)OZRenderParams::getWorkingColorSpace(v110);
    if (v29)
    {
      if (v35) {
        double v40 = (PCColorSpaceHandle *)PCColorSpaceCache::cgsRGB(WorkingColorSpace);
      }
      else {
        double v40 = 0;
      }
    }
    else if (v26)
    {
      double v40 = 0;
    }
    else
    {
      double v40 = WorkingColorSpace;
    }
    PCColorSpaceHandle::getMD5(v40, (PCWorkingColorVector *)&v96);
    PCHashWriteStream::writeValue((int8x8_t *)v122, (const PCHash128 *)&v96);
    PCHashWriteStream::writeValue((int8x8_t *)v122, *((unsigned char *)v75 + 202));
    Hash = (OZCacheManager *)PCHashWriteStream::getHash((int8x8_t *)v122);
    long long v106 = *(_OWORD *)Hash;
    double v42 = (PGTextureCache *)OZCacheManager::Instance(Hash);
    uint64_t v105 = 0x3FF0000000000000;
    uint64_t v102 = 0x3FF0000000000000;
    uint64_t v99 = 0x3FF0000000000000;
    uint64_t v96 = 0x3FF0000000000000;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    OZRenderParams::getRenderGPU(*(OZRenderParams **)(v79 + 16), &v94);
    OZCacheManager::getTextureForKey(v42, &v94, (const PCHash128 *)&v106, &v96, &v92);
    __int16 v90 = 0;
    PCSharedCount::PCSharedCount(&v91);
    if (!v92)
    {
      (*(void (**)(unsigned char *__return_ptr, OZImageNode *, FxColorDescription *, uint64_t, void))(*(void *)v33 + 176))(v84, v33, v110, v69, 0);
      __int16 v90 = *(PC_Sp_counted_base **)v84;
      PCSharedCount::PCSharedCount(v120, (const PCSharedCount *)&v84[8]);
      PCSharedCount::operator=((uint64_t *)&v91, (uint64_t *)v120);
      PCSharedCount::~PCSharedCount(v120);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v84[8]);
    }
    char v76 = v35;
    char v43 = v38;
    if (ValueAsInt) {
      int v44 = (OZChannel *)(v74 + 896);
    }
    else {
      int v44 = (OZChannel *)(v78 + 2736);
    }
    int v45 = OZChannel::getValueAsInt(v44, MEMORY[0x1E4F1FA48], 0.0);
    int v46 = OZChannel::getValueAsInt((OZChannel *)(v78 + 1328), &v115, 0.0);
    v88[0] = 0;
    v88[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v89 = _Q0;
    (*(void (**)(OZImageNode *, void *, FxColorDescription *))(*(void *)v33 + 88))(v33, v88, v110);
    *(void *)&v87[40] = 0x3FF0000000000000;
    *(void *)uint64_t v87 = 0x3FF0000000000000;
    *(void *)&v84[40] = 0x3FF0000000000000;
    *(void *)int v84 = 0x3FF0000000000000;
    memset(&v84[8], 0, 32);
    long long v85 = 0u;
    long long v86 = 0u;
    memset(&v87[8], 0, 32);
    if (v84 != (unsigned char *)v73)
    {
      long long v52 = *(_OWORD *)(v73 + 80);
      long long v86 = *(_OWORD *)(v73 + 64);
      *(_OWORD *)uint64_t v87 = v52;
      long long v53 = *(_OWORD *)(v73 + 112);
      *(_OWORD *)&v87[16] = *(_OWORD *)(v73 + 96);
      *(_OWORD *)&v87[32] = v53;
      long long v54 = *(_OWORD *)(v73 + 16);
      *(_OWORD *)int v84 = *(_OWORD *)v73;
      *(_OWORD *)&v84[16] = v54;
      long long v55 = *(_OWORD *)(v73 + 48);
      *(_OWORD *)&v84[32] = *(_OWORD *)(v73 + 32);
      long long v85 = v55;
    }
    if (v92)
    {
      PGTexture::getPGLTexture((uint64_t)v92, v120);
      LiMaterial::setTexture(v80, v14, (uint64_t *)v120, &v96);
      if (v120[1].var0) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120[1].var0);
      }
      long long v83 = xmmword_1B837AB70;
      PGTexture::getTexCoords((uint64_t)v92, (float32x4_t *)&v83);
      float32x4_t v56 = (float32x4_t)v83;
      signed int os_unfair_lock_opaque = v80[147]._os_unfair_lock_opaque;
      if ((signed int)v80[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque) {
        int v58 = (2 * (os_unfair_lock_opaque + 1)) | 1;
      }
      else {
        int v58 = v80[146]._os_unfair_lock_opaque;
      }
      PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v80[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v58);
      uint64_t v59 = *(void *)&v80[148]._os_unfair_lock_opaque + 152 * (int)v80[147]._os_unfair_lock_opaque;
      *(void *)(v59 - 152) = *(void *)(v14 + 48);
      *(float64x2_t *)&v120[0].var0 = vcvtq_f64_f32(*(float32x2_t *)v56.f32);
      float64x2_t v121 = vcvtq_f64_f32(*(float32x2_t *)&v56.u32[2]);
      ProShade::Value::set(v59 - 144, (const PCString *)3, 4, v120);
      double v60 = *(OZMaterialStatistics **)(v79 + 128);
      PGTexture::getPGLTexture((uint64_t)v92, v120);
      OZMaterialStatistics::registerTexture(v60, (const ProGL::TextureHandle *)v120);
      if (v120[1].var0) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120[1].var0);
      }
    }
    else
    {
      v81.var0 = v90;
      PCSharedCount::PCSharedCount(&v82, &v91);
      LiMaterial::setTexture(v80, v14, &v81, v40, &v106, v37);
      PCSharedCount::~PCSharedCount(&v82);
    }
    uint64_t v61 = *(void *)(v14 + 16);
    if (!v61) {
      throw_PCNullPointerException(1);
    }
    ProShade::SamplerNode::setWrapMode(v61, v46);
    signed int v62 = v80[147]._os_unfair_lock_opaque;
    if ((signed int)v80[146]._os_unfair_lock_opaque <= v62) {
      int v63 = (2 * (v62 + 1)) | 1;
    }
    else {
      int v63 = v80[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v80[144]._os_unfair_lock_opaque, v62 + 1, v63);
    uint64_t v64 = *(void *)&v80[148]._os_unfair_lock_opaque + 152 * (int)v80[147]._os_unfair_lock_opaque;
    *(void *)(v64 - 152) = *(void *)(v14 + 80);
    ProShade::Value::set(v64 - 144, (const PCString *)3, 7, &v96);
    signed int v65 = v80[147]._os_unfair_lock_opaque;
    if ((signed int)v80[146]._os_unfair_lock_opaque <= v65) {
      int v66 = (2 * (v65 + 1)) | 1;
    }
    else {
      int v66 = v80[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v80[144]._os_unfair_lock_opaque, v65 + 1, v66);
    uint64_t v67 = *(void *)&v80[148]._os_unfair_lock_opaque + 152 * (int)v80[147]._os_unfair_lock_opaque;
    *(void *)(v67 - 152) = *(void *)(v72 + 16);
    ProShade::Value::set(v67 - 144, (const PCString *)3, 7, v84);
    uint64_t v68 = LiMaterial::obtainSamplerInfo(v80, *(const ProShade::SamplerNode **)(v14 + 16));
    *(unsigned char *)(v68 + 316) = 1;
    *(unsigned char *)(v68 + 317) = v45 != 2;
    *(unsigned char *)(v68 + 318) = v45 == 0;
    *(unsigned char *)(v68 + 319) = v43;
    *(_DWORD *)(v68 + 320) = v46;
    *(_DWORD *)(v68 + 324) = v29;
    *(unsigned char *)(v68 + 328) = v76;
    *(unsigned char *)(v68 + 331) = v119;
    *(_WORD *)(v68 + 329) = v118;
    *(_DWORD *)(v68 + 332) = v71;
    *(unsigned char *)(v68 + 336) = v31;
    *(unsigned char *)(v68 + 337) = a9 != 0;
    *(unsigned char *)(v68 + 338) = v26;
    *(unsigned char *)(v68 + 312) = 1;
    PCSharedCount::~PCSharedCount(&v91);
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    if (v95) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v95);
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v122);
    std::__list_imp<unsigned int>::clear(v108);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v123);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v109);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v110);
  }
}

void sub_1B7C64C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(v71);
  PCSharedCount::~PCSharedCount(a16);
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x858]);
  std::__list_imp<unsigned int>::clear(&a71);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x1898]);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x208]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

__n128 MaterialTextureTransformer::composeTextureMatrix@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  if (a1 != a3)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v6 = a3 + i;
      __n128 result = *(__n128 *)(a1 + i);
      long long v7 = *(_OWORD *)(a1 + i + 16);
      *(__n128 *)uint64_t v6 = result;
      *(_OWORD *)(v6 + 16) = v7;
    }
  }
  if (a2 == 1)
  {
    uint64_t v27 = 0x3FF0000000000000;
    uint64_t v24 = 0x3FF0000000000000;
    uint64_t v21 = 0x3FF0000000000000;
    uint64_t v18 = 0x3FF0000000000000;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    v16[0] = 0.0;
    v16[1] = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    long long v17 = _Q0;
    PCMatrix44Tmpl<double>::rotate((uint64_t)&v18, v16, 0, 3.14159265);
    PCMatrix44Tmpl<double>::operator*(a3, (long long *)&v18, (uint64_t)v16);
    if (v16 != (double *)a3)
    {
      for (uint64_t j = 0; j != 16; j += 4)
      {
        uint64_t v14 = a3 + j * 8;
        __n128 result = *(__n128 *)&v16[j];
        long long v15 = *(_OWORD *)&v16[j + 2];
        *(__n128 *)uint64_t v14 = result;
        *(_OWORD *)(v14 + 16) = v15;
      }
    }
  }
  return result;
}

void OZMaterialStatistics::registerTexture(OZMaterialStatistics *this, const ProGL::TextureHandle *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  v14[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v14);
  int Name = ProGL::TextureHandle::getName(v4);
  PCHashWriteStream::writeValue(v14, Name);
  Hash = PCHashWriteStream::getHash(v14);
  if (!std::__tree<PCHash128>::__count_unique<PCHash128>(v5 + 16, (const PCHash128 *)Hash))
  {
    std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)(v5 + 16), (const PCHash128 *)Hash, Hash);
    int v8 = *(_DWORD *)(v5 + 8) + (int)((double)(unint64_t)ProGL::TextureHandle::getSize(v4) * 0.000000953674316);
    ++*(_DWORD *)(v5 + 4);
    *(_DWORD *)(v5 + 8) = v8;
    if (v8 >= *(_DWORD *)(v5 + 12))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"OZMaterialStatistics(#textures:", 31);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", megs:", 7);
      int v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")  maxAvail:", 12);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
      exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v13, "exceeded texture memory available");
      PCException::PCException(exception, &v13);
    }
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v14);
}

void sub_1B7C6507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

double MaterialTextureTransformer::composeTextureTransform@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, (float64x2_t)COERCE_UNSIGNED_INT64(-*a1), -a1[1], 0.0);
  PCMatrix44Tmpl<double>::leftRotate((double *)a3, 2, -a4);
  double v7 = 1.0 / *a2;
  double v8 = 1.0 / a2[1];

  *(void *)&double result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v7, v8, 1.0);
  return result;
}

void MaterialTextureTransformer::composeTextureTransform(CMTime *this@<X0>, const CMTime *a2@<X1>, const OZChannel2D *a3@<X2>, const OZChannelRotation3D *a4@<X3>, uint64_t a5@<X8>)
{
  OZChannel::getValueAsDouble((OZChannel *)&a2[5].epoch, this, 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)&a2[12], this, 0.0);
  v19[0] = v12;
  v19[1] = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 440), this, 0.0);
  double v15 = v14;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a4 + 136), this, 0.0);
  v18[0] = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a4 + 288), this, 0.0);
  v18[1] = v17;
  MaterialTextureTransformer::composeTextureTransform(v19, v18, a5, v15);
}

double MaterialTextureTransformer::decomposeTextureTransform(long long *a1, double *a2, double *a3, float64x2_t *a4)
{
  memset(v31, 0, sizeof(v31));
  int v32 = 4;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  PCMatrix44Tmpl<double>::getTransformation(a1, (uint64_t)v31);
  __asm { FMOV            V1.2D, #1.0 }
  *a4 = vdivq_f64(_Q1, *(float64x2_t *)((char *)&v31[1] + 8));
  double v13 = -*(double *)&v34;
  *a3 = -*(double *)&v34;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v27 = 0x3FF0000000000000;
  uint64_t v24 = 0x3FF0000000000000;
  uint64_t v21 = 0x3FF0000000000000;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  double v15 = a4->f64[0];
  double v14 = a4->f64[1];
  if (a4->f64[0] != 1.0)
  {
    uint64_t v21 = *(void *)&a4->f64[0];
    *(double *)&long long v22 = v15 * 0.0;
    *((double *)&v22 + 1) = v15 * 0.0;
    *(double *)&long long v23 = v15 * 0.0;
  }
  if (v14 != 1.0)
  {
    *((double *)&v23 + 1) = v14 * 0.0;
    uint64_t v24 = *(void *)&v14;
    *(double *)&long long v25 = v14 * 0.0;
    *((double *)&v25 + 1) = v14 * 0.0;
  }
  PCMatrix44Tmpl<double>::leftRotate((double *)&v21, 2, v13);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v21, a1, (uint64_t)&v18);
  double result = -v19;
  double v17 = -v20;
  *a2 = -v19;
  a2[1] = v17;
  return result;
}

uint64_t MaterialTextureTransformer::setTextureTransformChannels(CMTime *a1, long long *a2, OZChannel2D *a3, uint64_t a4, OZChannel2D *a5)
{
  v12[0] = 0.0;
  v12[1] = 0.0;
  unint64_t v11 = 0;
  float64x2_t v10 = 0uLL;
  MaterialTextureTransformer::decomposeTextureTransform(a2, v12, (double *)&v11, &v10);
  return MaterialTextureTransformer::setTextureTransformChannels(a1, v12, &v11, v10.f64, a3, a4, a5);
}

uint64_t MaterialTextureTransformer::setTextureTransformChannels(CMTime *a1, double *a2, unint64_t *a3, double *a4, OZChannel2D *this, uint64_t a6, OZChannel2D *a7)
{
  OZChannel2D::setValue(this, a1, *a2, a2[1]);
  v12.n128_u64[0] = *a3;
  (*(void (**)(__n128))(*(void *)(a6 + 440) + 712))(v12);
  double v13 = *a4;
  double v14 = a4[1];

  return OZChannel2D::setValue(a7, a1, v13, v14);
}

void MaterialTextureTransformer::composeTextureTransform(const CMTime *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, uint64_t a10, unsigned char *a11, unsigned int *a12)
{
  uint64_t v18 = a2;
  if (!OZChannel::getValueAsInt((OZChannel *)(a2 + 128), MEMORY[0x1E4F1FA48], 0.0))
  {
    double v20 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1288), a1, 0.0);
    double v22 = v44;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1440), a1, 0.0);
    double v24 = v45;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 3480), a1, 0.0);
    double v26 = v46;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1992), a1, 0.0);
    double v48 = v47;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 2144), a1, 0.0);
    if (v49 >= 0.0 || v49 <= -0.001) {
      double v51 = v49;
    }
    else {
      double v51 = -0.001;
    }
    if (v49 >= 0.0 && v49 < 0.001) {
      double v33 = 0.001;
    }
    else {
      double v33 = v51;
    }
    if (v48 >= 0.0 || v48 <= -0.001) {
      double v54 = v48;
    }
    else {
      double v54 = -0.001;
    }
    if (v48 >= 0.0 && v48 < 0.001) {
      double v54 = 0.001;
    }
    double v77 = v54;
    float32x4_t v56 = (const CMTime *)MEMORY[0x1E4F1FA48];
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v18 + 384), MEMORY[0x1E4F1FA48], 0.0);
    int v57 = OZChannel::getValueAsInt((OZChannel *)(v18 + 2296), v56, 0.0);
    BOOL v40 = v57 != 0;
    double v76 = 0.0;
    double v41 = 0.0;
    if (!v57) {
      goto LABEL_54;
    }
    double v41 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(v18 + 2448), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 2736), a1, 0.0);
    double v76 = v58;
    char v43 = (OZChannel *)(v18 + 2888);
    goto LABEL_53;
  }
  if (!a3)
  {
    double v75 = 0.0;
    BOOL v40 = 0;
    double v24 = 0.0;
    double v22 = 0.0;
    double v26 = 0.0;
    double v76 = 0.0;
    double v77 = 1.0;
    double v20 = 0.0;
    double v33 = 1.0;
    goto LABEL_57;
  }
  double v20 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 2856), a1, 0.0);
  double v22 = v21;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3008), a1, 0.0);
  double v24 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 5048), a1, 0.0);
  double v26 = v25;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3560), a1, 0.0);
  double v28 = v27;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3712), a1, 0.0);
  if (v29 >= 0.0 || v29 <= -0.001) {
    double v31 = v29;
  }
  else {
    double v31 = -0.001;
  }
  if (v29 >= 0.0 && v29 < 0.001) {
    double v33 = 0.001;
  }
  else {
    double v33 = v31;
  }
  if (v28 >= 0.0 || v28 <= -0.001) {
    double v35 = v28;
  }
  else {
    double v35 = -0.001;
  }
  uint64_t v18 = a3 + 1568;
  if (v28 >= 0.0 && v28 < 0.001) {
    double v35 = 0.001;
  }
  double v77 = v35;
  float v37 = (const CMTime *)MEMORY[0x1E4F1FA48];
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a3 + 1952), MEMORY[0x1E4F1FA48], 0.0);
  int v39 = OZChannel::getValueAsInt((OZChannel *)(a3 + 3864), v37, 0.0);
  BOOL v40 = v39 != 0;
  double v76 = 0.0;
  double v41 = 0.0;
  if (v39)
  {
    double v41 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(a3 + 4016), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a3 + 4304), a1, 0.0);
    double v76 = v42;
    char v43 = (OZChannel *)(a3 + 4456);
LABEL_53:
    OZChannel::getValueAsDouble(v43, a1, 0.0);
    double v20 = v59;
  }
LABEL_54:
  OZChannelMaterialMapTransform::getPreviewScale((OZChannelMaterialMapTransform *)v18, a1, (uint64_t)v81);
  double v75 = v41;
  if (ValueAsInt <= 1) {
    *a12 = ValueAsInt;
  }
LABEL_57:
  double v60 = 0.0;
  double v61 = 0.0;
  double v62 = 0.0;
  if (a5 && a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a5 + 136), a1, (double)a8);
    double v61 = v63;
    OZChannel::getValueAsDouble((OZChannel *)(a5 + 288), a1, (double)a8);
    double v60 = 0.0;
    double v62 = v64;
  }
  double v78 = v61;
  if (a7 && a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 136), a1, (double)a8);
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 288), a1, (double)a8);
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 440), a1, (double)a8);
    double v60 = v65;
  }
  double v66 = 1.0;
  double v67 = 1.0;
  if (a6 && a4)
  {
    double v68 = v60;
    OZChannel::getValueAsDouble((OZChannel *)(a6 + 136), a1, (double)a8);
    double v67 = v69;
    OZChannel::getValueAsDouble((OZChannel *)(a6 + 288), a1, (double)a8);
    double v60 = v68;
  }
  if (v40)
  {
    double v70 = a9 / v75 * v76 * v77;
    double v33 = a9 / v75 * v20 * v33;
    double v22 = a9 / v75 * v22;
    double v24 = a9 / v75 * v24;
  }
  else
  {
    double v70 = v77;
  }
  v80[0] = v78 + v22;
  v80[1] = v62 + v24;
  v79[0] = v67 * v70;
  v79[1] = v66 * v33;
  MaterialTextureTransformer::composeTextureTransform(v80, v79, (uint64_t)v81, v26 + v60);
  if (v81 != a11)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v72 = &a11[i];
      long long v73 = *(_OWORD *)&v81[i + 16];
      _OWORD *v72 = *(_OWORD *)&v81[i];
      v72[1] = v73;
    }
  }
}

void OZMaterialStatistics::OZMaterialStatistics(OZMaterialStatistics *this)
{
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = (char *)this + 24;
}

uint64_t OZChannelEnumWithList_Factory::getInstance(OZChannelEnumWithList_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnumWithList_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelEnumWithList_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumWithList_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumWithList_Factory::_instance;
}

void OZChannelEnumWithList::OZChannelEnumWithList(OZChannelEnumWithList *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, 0, 0);
  *(void *)double v8 = &unk_1F114ABC0;
  *((void *)v8 + 2) = &unk_1F114AF30;
  *((void *)this + 1) = OZChannelEnumWithList_Factory::getInstance(v8);
}

void sub_1B7C65A4C(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList::clone(OZChannelEnumWithList *this)
{
}

void sub_1B7C65AEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelEnumWithListScope);
  OZChannel::writeBody(this, a2, a3);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  StringTablesMapLocuint64_t k = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock_shared(StringTablesMapLock);
  uint64_t StringTablesMap = OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  var0 = this[1].var0;
  if (var0 != (void **)(StringTablesMap + 8) && &v15 != (uint64_t *)(var0 + 5)) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v15, (PCString *)var0[5], (PCString *)var0[6], ((unsigned char *)var0[6] - (unsigned char *)var0[5]) >> 3);
  }
  PCSharedMutex::unlock_shared(StringTablesMapLock);
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  if (v15 != v16)
  {
    var2 = this[1].var2;
    __n128 v12 = *(void ***)&this[1].var3;
    if (var2 != v12)
    {
      double v13 = (void **)((char *)var2 + 4);
      do
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 170);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 200))(a2, 1, v9);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 2, *((unsigned int *)v13 - 1));
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        v9 += 8;
        if (v9 == v10) {
          break;
        }
        BOOL v14 = v13 == v12;
        double v13 = (void **)((char *)v13 + 4);
      }
      while (!v14);
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  uint64_t v18 = (void **)&v15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1B7C65CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  PCSharedMutex::unlock_shared(v12);
  a12 = &a9;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZChannelEnumWithList::writeBody(OZChannelEnumWithList *this, PCSerializerWriteStream *a2, int a3)
{
}

uint64_t OZChannelEnumWithList::parseBegin(PCString *this, PCSerializerReadStream *a2)
{
  this[22].var0 = this[21].var0;
  OZChannel::parseBegin((OZChannel *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelEnumWithListScope);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelEnumWithList::parseBegin(PCString *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelEnumWithList::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  double DefaultValue = OZChannel::getDefaultValue(this);
  var2 = (__int32 *)this[1].var2;
  uint64_t v6 = *(__int32 **)&this[1].var3;
  if (var2 != v6)
  {
    double v7 = wmemchr(var2, (int)DefaultValue, v6 - var2);
    double v8 = v7 ? v7 : v6;
    if (v6 == v8) {
      OZChannel::setDefaultValue(this, (double)*(int *)this[1].var2);
    }
  }

  return OZChannel::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZChannelEnumWithList::parseEnd(OZChannelEnumWithList *this, PCSerializerReadStream *a2)
{
  return OZChannelEnumWithList::parseEnd((OZChannel *)((char *)this - 16), a2);
}

uint64_t OZChannelEnumWithList::parseElement(OZChannelEnumWithList *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel::parseElement((OZChannel *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 170)
  {
    PCSharedCount::PCSharedCount(&v30);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v30))
    {
      int v29 = 0;
      if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v29))
      {
        memset(v28, 0, sizeof(v28));
        StringTablesMapLocuint64_t k = (std::mutex *)OZChannelEnum::getStringTablesMapLock(this);
        PCSharedMutex::lock_shared(StringTablesMapLock);
        uint64_t StringTablesMap = OZChannelEnum::getStringTablesMap(this);
        uint64_t v8 = *((void *)this + 19);
        if (v8 != StringTablesMap + 8 && v28 != (uint64_t *)(v8 + 40)) {
          std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)v28, *(PCString **)(v8 + 40), *(PCString **)(v8 + 48), (uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3);
        }
        PCSharedMutex::unlock_shared(StringTablesMapLock);
        if (!PCString::empty((PCString *)this + 20)) {
          PCString::append((PCString *)this + 20, ";");
        }
        PCString::append((PCString *)this + 20, (const PCString *)&v30);
        std::vector<PCString>::push_back[abi:ne180100](v28, (PCString *)&v30);
        uint64_t v9 = (std::mutex *)OZChannelEnum::getStringTablesMapLock(this);
        PCSharedMutex::lock(v9);
        uint64_t v10 = (const PCString *)OZChannelEnum::getStringTablesMap(this);
        *((void *)this + 19) = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(v10, (PCString *)this + 20);
        if (*((void *)this + 19) == OZChannelEnum::getStringTablesMap(this) + 8)
        {
          unint64_t v11 = (PCString *)OZChannelEnum::getStringTablesMap(this);
          __n128 v12 = (PCString *)OZChannelEnum::getStringTablesMap(this);
          std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v26, (const PCString *)this + 20, v28);
          *((void *)this + 19) = std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v11, v12 + 1, &v26, (uint64_t)&v26);
          double v31 = (void **)&v27;
          std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v31);
          PCString::~PCString(&v26);
        }
        PCSharedMutex::unlock(v9);
        unint64_t v13 = *((void *)this + 23);
        BOOL v14 = (char *)*((void *)this + 22);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = (char *)*((void *)this + 21);
          uint64_t v17 = (v14 - v16) >> 2;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = v13 - (void)v16;
          unint64_t v19 = (uint64_t)(v13 - (void)v16) >> 1;
          if (v19 <= v17 + 1) {
            unint64_t v19 = v17 + 1;
          }
          if (v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            double v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 184, v20);
            uint64_t v16 = (char *)*((void *)this + 21);
            BOOL v14 = (char *)*((void *)this + 22);
          }
          else
          {
            double v21 = 0;
          }
          double v22 = &v21[4 * v17];
          double v23 = &v21[4 * v20];
          *(_DWORD *)double v22 = v29;
          uint64_t v15 = v22 + 4;
          while (v14 != v16)
          {
            int v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((void *)this + 21) = v22;
          *((void *)this + 22) = v15;
          *((void *)this + 23) = v23;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_DWORD *)BOOL v14 = v29;
          uint64_t v15 = v14 + 4;
        }
        *((void *)this + 22) = v15;
        v26.var0 = (__CFString *)v28;
        std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      }
    }
    PCString::~PCString((PCString *)&v30);
  }
  return 1;
}

void sub_1B7C660C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  std::pair<PCString,std::vector<PCString>>::~pair((PCString *)&a9);
  PCSharedMutex::unlock(v17);
  a9 = &a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZChannelEnumWithList::parseElement(OZChannelEnumWithList *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZChannelEnumWithList::configureWithState(OZChannelEnumWithList *this, const __CFData *a2)
{
  uint64_t v4 = (const void *)(*(uint64_t (**)(OZChannelEnumWithList *))(*(void *)this + 248))(this);
  if (v4) {
  else
  }
    uint64_t v5 = 0;
  OZChannelBase::configureWithState(v5, a2);
  __int32 ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v5, MEMORY[0x1E4F1FA48], 0.0);
  double v7 = (__int32 *)*((void *)this + 22);
  uint64_t v8 = wmemchr(*((__int32 **)this + 21), ValueAsInt, ((uint64_t)v7 - *((void *)this + 21)) >> 2);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v7 != v9)
  {
    (*(void (**)(OZChannelEnumWithList *, void, void, double))(*(void *)this + 712))(this, MEMORY[0x1E4F1FA48], 0, (double)ValueAsInt);
    OZChannelBase::setFlags((OZChannelBase *)this, v5->var7);
LABEL_10:
    (*((void (**)(OZChannelBase *))v5->var0 + 1))(v5);
    return 1;
  }
  if (v5) {
    goto LABEL_10;
  }
  return 1;
}

void OZChannelEnumWithList::addString(PCString *this, PCString *a2, int a3)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  StringTablesMapLocuint64_t k = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock_shared(StringTablesMapLock);
  uint64_t StringTablesMap = OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  var0 = this[19].var0;
  if (var0 != (__CFString *)(StringTablesMap + 8) && &v28 != &var0[1].info) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v28, (PCString *)var0[1].info, (PCString *)var0[1].data, (uint64_t)&var0[1].data[-var0[1].info] >> 3);
  }
  PCSharedMutex::unlock_shared(StringTablesMapLock);
  if (!PCString::empty(this + 20)) {
    PCString::append(this + 20, ";");
  }
  PCString::append(this + 20, a2);
  std::vector<PCString>::push_back[abi:ne180100](&v28, a2);
  uint64_t v10 = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock(v10);
  unint64_t v11 = (const PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(v11, this + 20);
  if (this[19].var0 == (__CFString *)(OZChannelEnum::getStringTablesMap((OZChannelEnum *)this) + 8))
  {
    __n128 v12 = (PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
    unint64_t v13 = (PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v26, this + 20, &v28);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v12, v13 + 1, &v26, (uint64_t)&v26);
    double v31 = (void **)&v27;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v31);
    PCString::~PCString(&v26);
  }
  PCSharedMutex::unlock(v10);
  OZChannel::setSliderMax((OZChannel *)this, (double)(unint64_t)(((v29 - v28) >> 3) - 1));
  BOOL v14 = this[23].var0;
  uint64_t v15 = (char *)this[22].var0;
  if (v15 >= (char *)v14)
  {
    uint64_t v17 = this[21].var0;
    uint64_t v18 = (v15 - (char *)v17) >> 2;
    if ((unint64_t)(v18 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = (char *)v14 - (char *)v17;
    unint64_t v20 = ((char *)v14 - (char *)v17) >> 1;
    if (v20 <= v18 + 1) {
      unint64_t v20 = v18 + 1;
    }
    if (v19 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21)
    {
      double v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[23], v21);
      uint64_t v17 = this[21].var0;
      uint64_t v15 = (char *)this[22].var0;
    }
    else
    {
      double v22 = 0;
    }
    double v23 = (__CFString *)&v22[4 * v18];
    int v24 = (__CFString *)&v22[4 * v21];
    LODWORD(v23->isa) = a3;
    uint64_t v16 = (__CFString *)((char *)&v23->isa + 4);
    while (v15 != (char *)v17)
    {
      int v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      HIDWORD(v23[-1].length) = v25;
      double v23 = (__CFString *)((char *)v23 - 4);
    }
    this[21].var0 = v23;
    this[22].var0 = v16;
    this[23].var0 = v24;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v15 = a3;
    uint64_t v16 = (__CFString *)(v15 + 4);
  }
  this[22].var0 = v16;
  ++LODWORD(this[27].var0);
  v26.var0 = (__CFString *)&v28;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_1B7C66538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  PCSharedMutex::unlock(v13);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumWithList_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C665F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList_Factory::OZChannelEnumWithList_Factory(OZChannelEnumWithList_Factory *this)
{
  long long v3 = xmmword_1B8378BA0;
  long long v4 = xmmword_1B8380B60;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F114AFA0;
  *((void *)this + 16) = &unk_1F114B070;
}

void sub_1B7C666C4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList_Factory::create(OZChannelEnumWithList_Factory *this, const PCString *a2)
{
}

void sub_1B7C6677C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList_Factory::createCopy(OZChannelEnumWithList_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C66870(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList_Factory::createChannelCopy(OZChannelEnumWithList_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C66964(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZProjectPanelState::OZProjectPanelState(OZProjectPanelState *this)
{
  *(void *)this = &unk_1F114B0C8;
  char v2 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  *((unsigned char *)this + 8) = OZPreferenceManager::getLayersPreviewColumn(v2);
  *((unsigned char *)this + 9) = OZPreferenceManager::getLayersOpacityColumn(v2);
  *((unsigned char *)this + 10) = OZPreferenceManager::getLayersBlendColumn(v2);
  *((unsigned char *)this + 11) = OZPreferenceManager::getLayersDisplayMasks(v2);
  *((unsigned char *)this + 12) = OZPreferenceManager::getLayersDisplayBehaviors(v2);
  *((unsigned char *)this + 13) = OZPreferenceManager::getLayersDisplayEffects(v2);
  *((double *)this + 2) = OZPreferenceManager::getLayersVerticalZoom(v2);
  *((unsigned char *)this + 24) = OZPreferenceManager::getMediaPreviewColumn(v2);
  *((unsigned char *)this + 25) = OZPreferenceManager::getMediaTypeColumn(v2);
  *((unsigned char *)this + 26) = OZPreferenceManager::getMediaDurationColumn(v2);
  *((unsigned char *)this + 27) = OZPreferenceManager::getMediaInUseColumn(v2);
  *((unsigned char *)this + 28) = OZPreferenceManager::getMediaFrameSizeColumn(v2);
  *((unsigned char *)this + 29) = OZPreferenceManager::getMediaCompressorColumn(v2);
  *((unsigned char *)this + 30) = OZPreferenceManager::getMediaDepthColumn(v2);
  *((unsigned char *)this + 31) = OZPreferenceManager::getMediaFrameRateColumn(v2);
  *((unsigned char *)this + 32) = OZPreferenceManager::getMediaDataRateColumn(v2);
  *((unsigned char *)this + 33) = OZPreferenceManager::getMediaAudioRateColumn(v2);
  *((unsigned char *)this + 34) = OZPreferenceManager::getMediaAudioFormatColumn(v2);
  *((unsigned char *)this + 35) = OZPreferenceManager::getMediaFileSizeColumn(v2);
  *((unsigned char *)this + 36) = OZPreferenceManager::getMediaFileCreatedColumn(v2);
  *((unsigned char *)this + 37) = OZPreferenceManager::getMediaFileModifiedColumn(v2);
  *((double *)this + 5) = OZPreferenceManager::getMediaVerticalZoom(v2);
}

double OZProjectPanelState::OZProjectPanelState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F114B0C8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  uint64_t v2 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t OZProjectPanelState::writeHeader(OZProjectPanelState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectPanelStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 80);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZProjectPanelState::writeBody(OZProjectPanelState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectPanelStateScope);
  uint64_t v4 = *((unsigned __int8 *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned __int8 *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned __int8 *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v7 = *((unsigned __int8 *)this + 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *((unsigned __int8 *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v10 = *((double *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((unsigned __int8 *)this + 24);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = *((unsigned __int8 *)this + 25);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v13 = *((unsigned __int8 *)this + 26);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v14 = *((unsigned __int8 *)this + 27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = *((unsigned __int8 *)this + 28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v16 = *((unsigned __int8 *)this + 29);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v17 = *((unsigned __int8 *)this + 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v18 = *((unsigned __int8 *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v19 = *((unsigned __int8 *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v20 = *((unsigned __int8 *)this + 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v21 = *((unsigned __int8 *)this + 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 39);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v22 = *((unsigned __int8 *)this + 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v23 = *((unsigned __int8 *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v24 = *((unsigned __int8 *)this + 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v25 = *((double *)this + 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v25);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZProjectPanelState::parseBegin(OZProjectPanelState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZProjectPanelState::parseEnd(OZProjectPanelState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZProjectPanelState::parseElement(OZProjectPanelState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      long long v3 = (char *)this + 11;
      goto LABEL_25;
    case 2:
      long long v3 = (char *)this + 12;
      goto LABEL_25;
    case 3:
      long long v3 = (char *)this + 13;
      goto LABEL_25;
    case 4:
      uint64_t v4 = (char *)this + 16;
      goto LABEL_7;
    case 5:
      uint64_t v4 = (char *)this + 40;
LABEL_7:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 64))(a3, v4);
      return 0;
    case 0xA:
      long long v3 = (char *)this + 8;
      goto LABEL_25;
    case 0xB:
      long long v3 = (char *)this + 9;
      goto LABEL_25;
    case 0xC:
      long long v3 = (char *)this + 10;
      goto LABEL_25;
    case 0x1E:
      long long v3 = (char *)this + 24;
      goto LABEL_25;
    case 0x1F:
      long long v3 = (char *)this + 25;
      goto LABEL_25;
    case 0x20:
      long long v3 = (char *)this + 26;
      goto LABEL_25;
    case 0x21:
      long long v3 = (char *)this + 28;
      goto LABEL_25;
    case 0x22:
      long long v3 = (char *)this + 29;
      goto LABEL_25;
    case 0x23:
      long long v3 = (char *)this + 30;
      goto LABEL_25;
    case 0x24:
      long long v3 = (char *)this + 31;
      goto LABEL_25;
    case 0x25:
      long long v3 = (char *)this + 32;
      goto LABEL_25;
    case 0x26:
      long long v3 = (char *)this + 33;
      goto LABEL_25;
    case 0x27:
      long long v3 = (char *)this + 34;
      goto LABEL_25;
    case 0x28:
      long long v3 = (char *)this + 35;
      goto LABEL_25;
    case 0x29:
      long long v3 = (char *)this + 36;
      goto LABEL_25;
    case 0x2A:
      long long v3 = (char *)this + 37;
      goto LABEL_25;
    case 0x2B:
      long long v3 = (char *)this + 27;
LABEL_25:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, v3);
      break;
    default:
      return 0;
  }
  return 0;
}

void OZProjectPanelState::~OZProjectPanelState(OZProjectPanelState *this)
{
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChanSceneNodeRef_Factory::getInstance(this);
  OZChanObjectManipRef::OZChanObjectManipRef(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F114B138;
  *((void *)this + 2) = &unk_1F114B4B8;
  *(_WORD *)((char *)this + 155) = 0;
}

uint64_t OZChanSceneNodeRef_Factory::getInstance(OZChanSceneNodeRef_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanSceneNodeRef_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChanSceneNodeRef_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanSceneNodeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanSceneNodeRef_Factory::_instance;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = &unk_1F114B138;
  *(void *)(v6 + 16) = &unk_1F114B4B8;
  *(_WORD *)(v6 + 155) = 0;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F114B138;
  *(void *)(v4 + 16) = &unk_1F114B4B8;
  *(_WORD *)(v4 + 155) = 0;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v4 = &unk_1F114B138;
  *(void *)(v4 + 16) = &unk_1F114B4B8;
  *(_WORD *)(v4 + 155) = *(_WORD *)((char *)a2 + 155);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)v4);
}

void sub_1B7C67EF0(_Unwind_Exception *a1)
{
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanSceneNodeRef::setDependency(OZChannelBase *this)
{
  uint64_t result = OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 264))(result);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 256))(v3);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
    if (v4)
    {
      unsigned int v6 = result;
      uint64_t result = OZChanObjectManipRef::getObjectID((OZChannel *)this);
      if (result)
      {
        unsigned int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);
        return OZScene::addNodeDependency(v4, ObjectID, v6);
      }
    }
  }
  return result;
}

void non-virtual thunk to'OZChanSceneNodeRef::~OZChanSceneNodeRef(OZChanSceneNodeRef *this)
{
}

{
  uint64_t vars8;

  OZChanObjectManipRef::~OZChanObjectManipRef((OZChanSceneNodeRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanSceneNodeRef::~OZChanSceneNodeRef(OZChanSceneNodeRef *this)
{
  OZChanObjectManipRef::~OZChanObjectManipRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanSceneNodeRef::clone(OZChanSceneNodeRef *this)
{
}

void sub_1B7C680D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanSceneNodeRef::removeDependency(OZChannelBase *this)
{
  uint64_t result = (const void *)OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = (OZScene *)(*(uint64_t (**)(const void *))(*(void *)result + 264))(result);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 256))(v3);
    uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
    if (v4)
    {
      unsigned int v6 = result;
      uint64_t result = (const void *)OZChanObjectManipRef::getObjectID((OZChannel *)this);
      if (result)
      {
        unsigned int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);
        return OZScene::removeNodeDependency(v4, ObjectID, v6);
      }
    }
  }
  return result;
}

uint64_t OZChanSceneNodeRef::copy(OZChanSceneNodeRef *this, const OZChannelBase *a2, char a3)
{
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  if (a2)
  {
    if (v6) {
      *(_WORD *)((char *)this + 155) = *(_WORD *)(v6 + 155);
    }
  }
  OZChannel::copy((OZChannel *)this, a2, a3);

  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanSceneNodeRef::assign(OZChanSceneNodeRef *this, const OZChannelBase *a2)
{
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  if (a2)
  {
    if (v4) {
      *(_WORD *)((char *)this + 155) = *(_WORD *)(v4 + 155);
    }
  }
  OZChannel::assign((OZChannel *)this, a2);

  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanSceneNodeRef::setValue(OZChannelBase *this, const CMTime *a2, double a3, int a4)
{
  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::setValue((OZChannel *)this, MEMORY[0x1E4F1FA48], a3, a4);

  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanSceneNodeRef::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 155) = *(_WORD *)(a2 + 155);
  OZChannelBase::operator=(a1, a2);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)a1);
  return a1;
}

void *OZChanSceneNodeRef::getNode(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (OZScene *)v3;
  unsigned int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);

  return OZScene::getNode(v4, ObjectID);
}

uint64_t OZChanSceneNodeRef::setNode(OZChanSceneNodeRef *this, OZSceneNode *a2)
{
  if (a2) {
    a2 = (OZSceneNode *)*((unsigned int *)a2 + 20);
  }
  return (*(uint64_t (**)(OZChanSceneNodeRef *, OZSceneNode *, void))(*(void *)this + 864))(this, a2, 0);
}

uint64_t OZChanSceneNodeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  if (!OZChanObjectManipRef::canReferenceObject(this, a2)) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 232))(a2);
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  unsigned int v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 272))();
  if ((_DWORD *)v4 != v6 || (uint64_t v8 = BYTE4(this[1].var5), BYTE4(this[1].var5)))
  {
    uint64_t v8 = 1;
    if (!BYTE3(this[1].var5))
    {
      if (v7)
      {
        v16[0] = 0;
        v16[1] = 0;
        uint64_t v15 = (uint64_t *)v16;
        int v9 = v6[20];
        OZScene::getReferencedNodes(v7, *(_DWORD *)(v4 + 80), &v15);
        double v10 = v15;
        if (v15 != (uint64_t *)v16)
        {
          while (*((_DWORD *)v10 + 7) != v9)
          {
            uint64_t v11 = (uint64_t *)v10[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                uint64_t v11 = (uint64_t *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (uint64_t *)v10[2];
                BOOL v13 = *v12 == (void)v10;
                double v10 = v12;
              }
              while (!v13);
            }
            double v10 = v12;
            if (v12 == (uint64_t *)v16) {
              goto LABEL_14;
            }
          }
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v15, v16[0]);
          return 0;
        }
LABEL_14:
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v15, v16[0]);
        return 1;
      }
    }
  }
  return v8;
}

void sub_1B7C68634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t OZChanSceneNodeRef::setAllowsCyclicDependencies(uint64_t this, char a2)
{
  *(unsigned char *)(this + 155) = a2;
  return this;
}

uint64_t OZChanSceneNodeRef::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  OZChanSceneNodeRef::removeDependency(this);

  return OZChannel::parseBegin((OZChannel *)this, a2);
}

uint64_t non-virtual thunk to'OZChanSceneNodeRef::parseBegin(OZChanSceneNodeRef *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannel *)((char *)this - 16);
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)((char *)this - 16));

  return OZChannel::parseBegin(v3, a2);
}

uint64_t OZChanSceneNodeRef::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChanSceneNodeRef::parseEnd(OZChanSceneNodeRef *this, PCSerializerReadStream *a2)
{
  char v2 = (OZChannelBase *)((char *)this - 16);
  OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChanSceneNodeRef::setDependency(v2);
  return 1;
}

uint64_t OZChanSceneNodeRef::setObjectRef(OZChanSceneNodeRef *this, unsigned int *a2)
{
  if (a2) {
    a2 = (unsigned int *)a2[20];
  }
  return (*(uint64_t (**)(OZChanSceneNodeRef *, unsigned int *, void))(*(void *)this + 864))(this, a2, 0);
}

void std::__call_once_param<std::tuple<OZChanSceneNodeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C687C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanSceneNodeRef_Factory::OZChanSceneNodeRef_Factory(OZChanSceneNodeRef_Factory *this)
{
  long long v3 = xmmword_1B8381730;
  long long v4 = xmmword_1B8380D40;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F114B528;
  *((void *)this + 16) = &unk_1F114B5F8;
}

void sub_1B7C68890(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanSceneNodeRef_Factory::create(OZChanSceneNodeRef_Factory *this, const PCString *a2)
{
}

void sub_1B7C68944(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanSceneNodeRef_Factory::createCopy(OZChanSceneNodeRef_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C689FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanSceneNodeRef_Factory::createChannelCopy(OZChanSceneNodeRef_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C68AB4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelStringEnum_Factory::getInstance(OZChannelStringEnum_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelStringEnum_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelStringEnum_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelStringEnum_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelStringEnum_Factory::_instance;
}

uint64_t OZChannelStringEnum::initSaveStringsFromChannelStrings(OZChannelStringEnum *this)
{
  uint64_t result = OZChannelEnum::getNumberOfStrings(this);
  if (result)
  {
    unsigned int v3 = 0;
    do
    {
      String = (const PCString *)OZChannelEnum::getString(this, v3);
      PCString::PCString(&v6, String);
      PCString::PCString(&v5, &v6);
      std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 32, &v5);
      PCString::~PCString(&v5);
      PCString::~PCString(&v6);
      ++v3;
      uint64_t result = OZChannelEnum::getNumberOfStrings(this);
    }
    while (v3 < result);
  }
  return result;
}

void sub_1B7C68BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F114B650;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F114B9C0;
  v5[33].var0 = 0;
  v5[34].var0 = 0;
  v5[32].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 35);
  *((void *)this + 1) = OZChannelStringEnum_Factory::getInstance(v6);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B7C68C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  Instance = (OZFactory *)OZChannelStringEnum_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, 0, 0);
  *(void *)this = &unk_1F114B650;
  *((void *)this + 2) = &unk_1F114B9C0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 35);
  *((void *)this + 1) = OZChannelStringEnum_Factory::getInstance(v13);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B7C68DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, 0, 0);
  v8->var0 = (PC_Sp_counted_base *)&unk_1F114B650;
  v8[2].var0 = (PC_Sp_counted_base *)&unk_1F114B9C0;
  v8[33].var0 = 0;
  v8[34].var0 = 0;
  v8[32].var0 = 0;
  PCSharedCount::PCSharedCount(v8 + 35);
  *((void *)this + 1) = OZChannelStringEnum_Factory::getInstance(v9);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B7C68E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, PCString **a2, OZChannelFolder *a3)
{
  OZChannelEnum::OZChannelEnum(this, (const OZChannelEnum *)a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F114B650;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F114B9C0;
  v5[33].var0 = 0;
  v5[34].var0 = 0;
  uint64_t v6 = (uint64_t)&v5[32];
  v5[32].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 35);
  if (this != (OZChannelStringEnum *)a2) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>(v6, a2[32], a2[33], a2[33] - a2[32]);
  }
}

void sub_1B7C68F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString(v11);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::clone(OZChannelStringEnum *this)
{
}

void sub_1B7C68FE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

__CFString *OZChannelStringEnum::getObjCWrapperName(OZChannelStringEnum *this)
{
  return @"CHChannelEnum";
}

uint64_t OZChannelStringEnum::setStrings(PCString *this, PCString *a2, int a3)
{
  OZChannelEnum::setStrings(this, a2, a3);
  var0 = this[32].var0;
  for (uint64_t i = this[33].var0; i != var0; PCString::~PCString((PCString *)&i[-1].length))
    ;
  this[33].var0 = var0;

  return OZChannelStringEnum::initSaveStringsFromChannelStrings((OZChannelStringEnum *)this);
}

void OZChannelStringEnum::getSelectedSaveString(OZChannel *this@<X0>, void *a2@<X8>)
{
  unsigned int ValueAsUint = OZChannel::getValueAsUint(this, MEMORY[0x1E4F1FA48], 0.0);
  var13 = this[1].var13;
  if (ValueAsUint >= (unint64_t)((this[1].var14 - (OZChannelImpl *)var13) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else
  {
    CStr = PCString::createCStr((PCString *)var13 + ValueAsUint);
    std::string::basic_string[abi:ne180100]<0>(a2, CStr);
    free(CStr);
  }
}

OZFactories *OZChannelStringEnum::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t result = (OZFactories *)OZChannelBase::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    uint64_t Instance = OZFactories::getInstance(result);
    long long v7 = xmmword_1B8382120;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return (OZFactories *)OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

OZFactories *non-virtual thunk to'OZChannelStringEnum::markFactoriesForSerialization(OZChannelStringEnum *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelStringEnum::markFactoriesForSerialization((OZChannelBase *)((char *)this - 16), a2, a3);
}

void OZChannelStringEnum::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  if (!OZChannelBase::testFlag(this, 128)
    || ((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    OZChannelBase::writeBody(this, a2, a3);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelStringEnumScope);
    uint64_t v6 = *((void *)this[1].var0 + 1);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v6 + 16))(v6, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    OZChannelStringEnum::getSelectedSaveString((OZChannel *)this, __p);
    if (v9 >= 0) {
      long long v7 = __p;
    }
    else {
      long long v7 = (void **)__p[0];
    }
    PCString::PCString(&v10, (const char *)v7);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 170);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 1, &v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCSerializerWriteStream::popScope((uint64_t)a2);
    PCString::~PCString(&v10);
  }
}

void sub_1B7C69368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, PCString a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'OZChannelStringEnum::writeBody(OZChannelStringEnum *this, PCSerializerWriteStream *a2, int a3)
{
}

unint64_t OZChannelStringEnum::indexOfSaveString(OZChannelStringEnum *this, PCString *a2)
{
  int NumberOfStrings = OZChannelEnum::getNumberOfStrings(this);
  if (NumberOfStrings < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = 0;
  uint64_t v6 = NumberOfStrings;
  while (1)
  {
    uint64_t v7 = *((void *)this + 32);
    if (v5 >= (*((void *)this + 33) - v7) >> 3) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    PCString::PCString(&v10, (const PCString *)(v7 + 8 * v5));
    int v8 = PCString::compare(&v10, a2);
    PCString::~PCString(&v10);
    if (!v8) {
      break;
    }
    if (++v5 == v6) {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

void sub_1B7C69444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZChannelStringEnum::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelStringEnum::parseBegin(OZChannelStringEnum *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelStringEnum::parseElement(OZChannelStringEnum *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannel::parseElement((OZChannel *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 170)
  {
    PCSharedCount::PCSharedCount(&v7);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v7)) {
      PCString::set((PCString *)this + 35, (const PCString *)&v7);
    }
    PCString::~PCString((PCString *)&v7);
  }
  return 1;
}

void sub_1B7C6954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelStringEnum::parseElement(OZChannelStringEnum *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZChannelStringEnum::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannel::parseEnd(this, a2);
  OZChannelStringEnum::setValueFromParsedSaveString(this);
  return v3;
}

void OZChannelStringEnum::setValueFromParsedSaveString(OZChannel *this)
{
  p_var16 = (PCString *)&this[1].var16;
  if (!PCString::empty((PCString *)&this[1].var16))
  {
    unsigned int ValueAsUint = OZChannel::getValueAsUint(this, MEMORY[0x1E4F1FA48], 0.0);
    PCSharedCount::PCSharedCount(&v6);
    var13 = this[1].var13;
    if (ValueAsUint >= (unint64_t)((this[1].var14 - (OZChannelImpl *)var13) >> 3)) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    PCString::set((PCString *)&v6, (const PCString *)var13 + ValueAsUint);
    if (PCString::compare((PCString *)&v6, p_var16))
    {
      signed int Tag = OZChannelStringEnum::indexOfSaveString((OZChannelStringEnum *)this, p_var16);
      if ((Tag & 0x80000000) == 0)
      {
        if (*(void ***)&this[1].var3 != this[1].var2) {
          signed int Tag = OZChannelEnum::getTag((OZChannelEnum *)this, Tag);
        }
        (*((void (**)(OZChannel *, void, void, double))this->var0 + 89))(this, MEMORY[0x1E4F1FA48], 0, (double)Tag);
      }
    }
    PCString::~PCString((PCString *)&v6);
  }
}

void sub_1B7C696C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelStringEnum::parseEnd(OZChannelStringEnum *this, PCSerializerReadStream *a2)
{
  char v2 = (OZChannel *)((char *)this - 16);
  uint64_t v3 = OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChannelStringEnum::setValueFromParsedSaveString(v2);
  return v3;
}

void non-virtual thunk to'OZChannelStringEnum::~OZChannelStringEnum(PCString *this)
{
  char v2 = this - 2;
  this[-2].var0 = (__CFString *)&unk_1F114B650;
  this->var0 = (__CFString *)&unk_1F114B9C0;
  PCString::~PCString(this + 33);
  uint64_t v3 = this + 30;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  OZChannelEnum::~OZChannelEnum(v2);
}

{
  PCString *v2;
  PCString *v3;

  char v2 = this - 2;
  this[-2].var0 = (__CFString *)&unk_1F114B650;
  this->var0 = (__CFString *)&unk_1F114B9C0;
  PCString::~PCString(this + 33);
  uint64_t v3 = this + 30;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  OZChannelEnum::~OZChannelEnum(v2);
  MEMORY[0x1BA9BFBA0]();
}

void std::__call_once_param<std::tuple<OZChannelStringEnum_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C69950(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum_Factory::OZChannelStringEnum_Factory(OZChannelStringEnum_Factory *this)
{
  long long v3 = xmmword_1B8378BA0;
  long long v4 = xmmword_1B8382120;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F114BA30;
  *((void *)this + 16) = &unk_1F114BB00;
}

void sub_1B7C69A20(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum_Factory::create(OZChannelStringEnum_Factory *this, const PCString *a2)
{
}

void sub_1B7C69A94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum_Factory::createCopy(OZChannelStringEnum_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C69B4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum_Factory::createChannelCopy(OZChannelStringEnum_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C69C04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::OZChannelBehavior(OZChannelBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F114BB58;
  *(void *)(v5 + 16) = &unk_1F114BE08;
  *(void *)(v5 + 48) = &unk_1F114C060;
  *(void *)(v5 + 336) = &unk_1F114C0B8;
  *(void *)(v5 + 344) = v5 + 344;
  *(void *)(v5 + 352) = v5 + 344;
  *(void *)(v5 + 360) = 0;
  *(unsigned char *)(v5 + 368) = 0;
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0;
  *(void *)(v5 + 376) = v5 + 384;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 400));
  *((_WORD *)this + 252) = 256;
  *((void *)this + 64) = (char *)this + 512;
  *((void *)this + 65) = (char *)this + 512;
  *((void *)this + 66) = 0;
}

void sub_1B7C69D10(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *((void **)v1 + 48));
  std::__list_imp<unsigned int>::clear(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::OZChannelBehavior(OZChannelBehavior *this, const OZChannelBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F114BB58;
  *(void *)(v4 + 16) = &unk_1F114BE08;
  *(void *)(v4 + 48) = &unk_1F114C060;
  *(void *)(v4 + 336) = &unk_1F114C0B8;
  *(void *)(v4 + 344) = v4 + 344;
  *(void *)(v4 + 352) = v4 + 344;
  *(void *)(v4 + 360) = 0;
  *(unsigned char *)(v4 + 368) = 0;
  *(void *)(v4 + 384) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 376) = v4 + 384;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v4 + 400));
  *((_WORD *)this + 252) = 256;
  *((void *)this + 64) = (char *)this + 512;
  *((void *)this + 65) = (char *)this + 512;
  *((void *)this + 66) = 0;
}

void sub_1B7C69E24(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *((void **)v1 + 48));
  std::__list_imp<unsigned int>::clear(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::~OZChannelBehavior(OZChannelBehavior *this)
{
  *(void *)this = &unk_1F114BB58;
  *((void *)this + 2) = &unk_1F114BE08;
  *((void *)this + 6) = &unk_1F114C060;
  *((void *)this + 42) = &unk_1F114C0B8;
  if (*((unsigned char *)this + 368))
  {
    uint64_t Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(void *)(Scene + 1584));
      *((unsigned char *)this + 368) = 0;
    }
  }
  std::__list_imp<unsigned int>::clear((void *)this + 64);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 400));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  std::__list_imp<unsigned int>::clear((void *)this + 43);

  OZBehavior::~OZBehavior(this);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelBehavior::~OZChannelBehavior(OZChannelBehavior *this)
{
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *a2)
{
  *((void *)this + 41) = a2;
  if (!*((void *)this + 66)) {
    (*(void (**)(OZChannelBehavior *, char *))(*(void *)this + 520))(this, (char *)this + 512);
  }

  return OZChannelBehavior::addObserverIfNecessary((uint64_t)this);
}

uint64_t OZChannelBehavior::addObserverIfNecessary(uint64_t this)
{
  if (!*(unsigned char *)(this + 368))
  {
    uint64_t v1 = this;
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 656))(this);
    if ((this & 1) != 0 || *(void *)(v1 + 528))
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1);
      if (this)
      {
        this = (uint64_t)OZDocument::addCPPObserver(*(void *)(this + 1584), v1 + 336, 15000);
        *(unsigned char *)(v1 + 368) = 1;
      }
    }
  }
  return this;
}

uint64_t OZChannelBehavior::didAddSceneNodeToScene(OZChannelBehavior *this, OZScene *a2)
{
  if (!*((void *)this + 66)) {
    (*(void (**)(OZChannelBehavior *, char *))(*(void *)this + 520))(this, (char *)this + 512);
  }

  return OZChannelBehavior::addObserverIfNecessary((uint64_t)this);
}

uint64_t OZChannelBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  if (*(unsigned char *)(this + 368))
  {
    uint64_t v2 = this;
    this = (*(uint64_t (**)(uint64_t, OZScene *))(*(void *)this + 336))(this, a2);
    if (this)
    {
      this = OZDocument::removeCPPObserver(*(void *)(this + 1584));
      *(unsigned char *)(v2 + 368) = 0;
    }
  }
  return this;
}

uint64_t OZChannelBehavior::didInsert(OZChannelBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  (*(void (**)(OZChannelBehavior *, OZSceneNode *))(*(void *)this + 96))(this, a2);
  uint64_t v5 = *(uint64_t (**)(OZChannelBehavior *, OZBehavior *))(*(void *)this + 112);

  return v5(this, a3);
}

void OZChannelBehavior::removeNodesFromSingleChan(OZChannelBehavior *this, OZChannel *a2)
{
  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  BOOL v13 = &v13;
  uint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v4 = (const void **)__p;
  uint64_t v5 = v17;
  if (__p != v17)
  {
    uint64_t v6 = 0;
    PCSharedCount v7 = &v13;
    do
    {
      if (*v4)
      {
        if (v8)
        {
          char v9 = v8;
          if (v8[1] == this)
          {
            PCString v10 = operator new(0x18uLL);
            v10[1] = &v13;
            v10[2] = v9;
            *PCString v10 = v7;
            v7[1] = v10;
            ++v6;
            PCSharedCount v7 = v10;
            BOOL v13 = v10;
            uint64_t v15 = v6;
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    if (&v13 != v14)
    {
      uint64_t v11 = (char *)this + 344;
      uint64_t v12 = &v13;
      do
      {
        OZChannel::deleteCurveProcessingNode(a2, *(void **)(*v12 + 16));
        std::list<OZBehaviorCurveNode *>::remove((uint64_t)v11, (void *)(*v12 + 16));
        uint64_t v12 = (void *)*v12;
      }
      while (v12 != v14);
    }
  }
  std::__list_imp<unsigned int>::clear(&v13);
  if (__p)
  {
    uint64_t v17 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B7C6A43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZChannelBehavior::removeNodesFromChan(OZChannelBehavior *this, OZChannelBase *a2)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    if (v4)
    {
      for (uint64_t i = *v4; i != v4[1]; ++i)
      {
        uint64_t v6 = *i;
        OZChannelBehavior::removeNodesFromChan(this, v6);
      }
    }
  }
  else
  {
    OZChannelBehavior::removeNodesFromSingleChan(this, v3);
  }
}

void *OZChannelBehavior::removeNodesReferencingChan(OZChannelBehavior *this, OZChannelBase *lpsrc)
{
  uint64_t v20 = &v20;
  uint64_t v21 = &v20;
  uint64_t v22 = 0;
  if ((lpsrc->var7 & 0x1000) != 0)
  {
    uint64_t v11 = (void *)*((void *)this + 44);
    if (v11 != (void *)((char *)this + 344))
    {
      uint64_t v12 = v10;
      do
      {
        uint64_t v13 = v11[2];
        if (OZChannelBase::isDescendantOf(*(OZChannelBase **)(v13 + 16), v12))
        {
          uint64_t v14 = operator new(0x18uLL);
          v14[1] = &v20;
          void v14[2] = v13;
          uint64_t v15 = v20;
          void *v14 = v20;
          v15[1] = v14;
          uint64_t v20 = v14;
          ++v22;
        }
        uint64_t v11 = (void *)v11[1];
      }
      while (v11 != (void *)((char *)this + 344));
    }
  }
  else
  {
    uint64_t v4 = (char *)this + 344;
    uint64_t v5 = (char *)*((void *)this + 44);
    if (v5 != (char *)this + 344)
    {
      uint64_t v6 = 0;
      PCSharedCount v7 = &v20;
      do
      {
        uint64_t v8 = *((void *)v5 + 2);
        if (*(OZChannelBase **)(v8 + 16) == lpsrc)
        {
          char v9 = operator new(0x18uLL);
          v9[1] = &v20;
          void v9[2] = v8;
          *char v9 = v7;
          v7[1] = v9;
          ++v6;
          PCSharedCount v7 = v9;
          uint64_t v20 = v9;
          uint64_t v22 = v6;
        }
        uint64_t v5 = (char *)*((void *)v5 + 1);
      }
      while (v5 != v4);
    }
  }
  uint64_t v16 = v21;
  if (v21 != &v20)
  {
    uint64_t v17 = (char *)this + 344;
    do
    {
      uint64_t v19 = v16[2];
      std::list<OZBehaviorCurveNode *>::remove((uint64_t)v17, &v19);
      uint64_t v16 = (void *)v16[1];
    }
    while (v16 != &v20);
  }
  return std::__list_imp<unsigned int>::clear(&v20);
}

void sub_1B7C6A6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::willRemove(OZChannelBehavior *this)
{
  uint64_t v2 = (char *)this + 376;
  uint64_t v3 = (char *)*((void *)this + 47);
  uint64_t v4 = (char *)this + 384;
  if (v3 != (char *)this + 384)
  {
    do
    {
      OZChannelBehavior::removeNodesFromChan(this, *((OZChannelBase **)v3 + 4));
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((void **)this + 48));
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = v4;
  while (1)
  {
    uint64_t v8 = *((void *)this + 45);
    if (!v8) {
      break;
    }
    char v9 = (uint64_t *)*((void *)this + 44);
    uint64_t v10 = *v9;
    *(void *)(v10 + 8) = v9[1];
    *(void *)v9[1] = v10;
    *((void *)this + 45) = v8 - 1;
    operator delete(v9);
  }
  if (*((unsigned char *)this + 368))
  {
    uint64_t v11 = (*(uint64_t (**)(OZChannelBehavior *))(*(void *)this + 336))(this);
    if (v11)
    {
      OZDocument::removeCPPObserver(*(void *)(v11 + 1584));
      *((unsigned char *)this + 368) = 0;
    }
  }
  *((void *)this + 41) = 0;
}

void OZChannelBehavior::reorderCurveNode(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  BOOL v7 = (OZChannel *)a2[2];
  OZChannel::removeCurveProcessingNode(v7, a2);
  OZChannel::enumerateCurveProcessingNodes(v7, &__p);
  char v9 = (const void **)__p;
  uint64_t v8 = v18;
  if (__p != v18)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    while (1)
    {
      uint64_t v12 = *v9;
      if (!*v9) {
        break;
      }
      if (v13)
      {
        uint64_t v14 = v13[1];
      }
      else
      {
        uint64_t v16 = (void *)a3;
        while (v16 != *(void **)(a3 + 8))
        {
          uint64_t v16 = (void *)*v16;
          uint64_t v14 = v16[2];
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v14 + 8)+ 8), (int32x4_t)xmmword_1B837FC70)))) & 1) == 0)goto LABEL_6; {
        }
          }
        uint64_t v14 = 0;
      }
LABEL_6:
      if (v11 == a3) {
        goto LABEL_22;
      }
      uint64_t v15 = v11;
      while (*(void *)(v15 + 16) != v14)
      {
        uint64_t v15 = *(void *)(v15 + 8);
        if (v15 == a3) {
          goto LABEL_22;
        }
      }
      if (v15 == a3)
      {
LABEL_22:
        OZChannel::insertCurveProcessingNode(v7, a2, v10);
        goto LABEL_24;
      }
LABEL_19:
      ++v9;
      uint64_t v10 = (void *)v12;
      if (v9 == v8) {
        goto LABEL_23;
      }
    }
    uint64_t v12 = v10;
    goto LABEL_19;
  }
LABEL_23:
  OZChannel::appendCurveProcessingNode(v7, a2);
LABEL_24:
  if (__p)
  {
    uint64_t v18 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B7C6A9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelBehavior::reorderSingleChan(uint64_t a1, OZChannel *this, uint64_t a3, uint64_t *a4)
{
  OZChannel::enumerateCurveProcessingNodes(this, &__p);
  uint64_t v14 = &v14;
  uint64_t v15 = &v14;
  uint64_t v16 = 0;
  BOOL v7 = (void **)__p;
  uint64_t v8 = v18;
  if (__p != v18)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v14;
    do
    {
      uint64_t v11 = *v7;
      if (*v7)
      {
        if (v11)
        {
          uint64_t v12 = v11;
          if (v11[1] == a1)
          {
            uint64_t v11 = operator new(0x18uLL);
            v11[1] = &v14;
            v11[2] = v12;
            *uint64_t v11 = v10;
            v10[1] = v11;
            ++v9;
            uint64_t v10 = v11;
            uint64_t v14 = v11;
            uint64_t v16 = v9;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    if (&v14 != v15)
    {
      uint64_t v13 = &v14;
      do
      {
        OZChannelBehavior::reorderCurveNode((uint64_t)v11, *(void **)(*v13 + 16), a3, a4);
        uint64_t v13 = (void *)*v13;
      }
      while (v13 != v15);
    }
  }
  std::__list_imp<unsigned int>::clear(&v14);
  if (__p)
  {
    uint64_t v18 = (void **)__p;
    operator delete(__p);
  }
}

void sub_1B7C6AB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZChannelBehavior::reorderChan(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if ((a2[7] & 0x1000) != 0)
  {
    if (v8)
    {
      for (uint64_t i = *v8; i != v8[1]; ++i)
      {
        uint64_t v10 = *i;
        OZChannelBehavior::reorderChan(a1, v10, a3, a4);
      }
    }
  }
  else
  {
    OZChannelBehavior::reorderSingleChan(a1, v7, a3, a4);
  }
}

void OZChannelBehavior::didReorder(OZChannelBehavior *this, OZBehavior *a2)
{
  if (*((void *)this + 49))
  {
    uint64_t v3 = (*(uint64_t (**)(OZChannelBehavior *, OZBehavior *))(*(void *)this + 320))(this, a2);
    uint64_t v4 = v3 + 1000;
    uint64_t v5 = v3 + 1000;
    if (*(void *)(v3 + 1008) != v3 + 1000)
    {
      uint64_t v5 = *(void *)(v3 + 1008);
      while (*(OZChannelBehavior **)(v5 + 16) != this)
      {
        uint64_t v5 = *(void *)(v5 + 8);
        if (v5 == v4)
        {
          uint64_t v5 = v3 + 1000;
          break;
        }
      }
    }
    uint64_t v10 = *(void *)(v5 + 8);
    uint64_t v6 = (OZChannelBehavior *)*((void *)this + 47);
    if (v6 != (OZChannelBehavior *)((char *)this + 384))
    {
      do
      {
        OZChannelBehavior::reorderChan((uint64_t)this, *((void **)v6 + 4), v4, &v10);
        BOOL v7 = (OZChannelBehavior *)*((void *)v6 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            BOOL v7 = *(OZChannelBehavior **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (OZChannelBehavior *)*((void *)v6 + 2);
            BOOL v9 = *(void *)v8 == (void)v6;
            uint64_t v6 = v8;
          }
          while (!v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != (OZChannelBehavior *)((char *)this + 384));
    }
  }
}

void OZChannelBehavior::willDeleteMaterialLayer(OZChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  uint64_t v4 = ObjectManipulator - 16;
  if (!ObjectManipulator) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (OZObjectManipulator *)(v4 + 16);
  if (ObjectManipulator) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }

  OZChannelBehavior::willDeleteObject(this, v6);
}

void OZChannelBehavior::willDeleteObject(OZChannelBehavior *this, OZObjectManipulator *a2)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v14 = (uint64_t *)v15;
  uint64_t v2 = (char *)*((void *)this + 47);
  uint64_t v3 = (char *)this + 384;
  if (v2 != (char *)this + 384)
  {
    uint64_t v6 = (char *)this + 376;
    do
    {
      lpsrc = (OZChannelBase *)*((void *)v2 + 4);
      if ((OZObjectManipulator *)OZChannelBase::getObjectManipulator(lpsrc) == a2)
      {
        OZChannelBehavior::removeNodesFromChan(this, lpsrc);
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v14, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
        OZChannelBehavior::removeNodesReferencingChan(this, lpsrc);
      }
      BOOL v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
    uint64_t v10 = v14;
    if (v14 != (uint64_t *)v15)
    {
      do
      {
        lpsrc = (OZChannelBase *)v10[4];
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)v6, (unint64_t *)&lpsrc);
        uint64_t v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (uint64_t *)v10[2];
            BOOL v9 = *v12 == (void)v10;
            uint64_t v10 = v12;
          }
          while (!v9);
        }
        uint64_t v10 = v12;
      }
      while (v12 != (uint64_t *)v15);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1B7C6AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void OZChannelBehavior::willDeleteChannel(OZChannelBehavior *this, OZChannelBase *a2)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v14 = (uint64_t *)v15;
  uint64_t v2 = (char *)*((void *)this + 47);
  uint64_t v3 = (char *)this + 384;
  if (v2 != (char *)this + 384)
  {
    uint64_t v6 = (char *)this + 376;
    do
    {
      lpsrc = (OZChannelBase *)*((void *)v2 + 4);
      if (lpsrc == a2)
      {
        OZChannelBehavior::removeNodesFromChan(this, a2);
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v14, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
        OZChannelBehavior::removeNodesReferencingChan(this, lpsrc);
      }
      BOOL v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
    uint64_t v10 = v14;
    if (v14 != (uint64_t *)v15)
    {
      do
      {
        lpsrc = (OZChannelBase *)v10[4];
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)v6, (unint64_t *)&lpsrc);
        uint64_t v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (uint64_t *)v10[2];
            BOOL v9 = *v12 == (void)v10;
            uint64_t v10 = v12;
          }
          while (!v9);
        }
        uint64_t v10 = v12;
      }
      while (v12 != (uint64_t *)v15);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1B7C6B060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t OZChannelBehavior::affectsBehavior(OZChannelBehavior *this, OZBehavior *a2)
{
  uint64_t v2 = (char *)*((void *)this + 47);
  uint64_t v3 = (char *)this + 384;
  if (v2 == (char *)this + 384) {
    return 0;
  }
  while (1)
  {
    uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(*((OZChannelBase **)v2 + 4));
    if (ObjectManipulator) {
      break;
    }
    if (!a2) {
      return 1;
    }
LABEL_9:
    uint64_t v8 = (char *)*((void *)v2 + 1);
    if (v8)
    {
      do
      {
        BOOL v9 = v8;
        uint64_t v8 = *(char **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        BOOL v9 = (char *)*((void *)v2 + 2);
        BOOL v10 = *(void *)v9 == (void)v2;
        uint64_t v2 = v9;
      }
      while (!v10);
    }
    uint64_t v2 = v9;
    if (v9 == v3) {
      return 0;
    }
  }
  if (v6 != a2)
  {
    if (!v6) {
      goto LABEL_9;
    }
    if (!v7 || ((*(uint64_t (**)(void *, OZBehavior *))(*(void *)v7 + 624))(v7, a2) & 1) == 0) {
      goto LABEL_9;
    }
  }
  return 1;
}

void OZChannelBehavior::setAffectedChannel(OZChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t v4 = (uint64_t **)((char *)this + 376);
  uint64_t v5 = (char *)this + 384;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = v5;
  uint64_t v6 = a2;
  if (a2) {
    std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(v4, (unint64_t *)&v6, (uint64_t *)&v6);
  }
}

void OZChannelBehavior::clearChannels(OZChannelBehavior *this)
{
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = (char *)this + 384;
}

uint64_t *OZChannelBehavior::addAffectedChannel(uint64_t *this, OZChannelBase *a2)
{
  uint64_t v2 = a2;
  if (a2) {
    return std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)this + 47, (unint64_t *)&v2, (uint64_t *)&v2);
  }
  return this;
}

void *OZChannelBehavior::didAddCurveNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 344;
  uint64_t result = operator new(0x18uLL);
  result[1] = v4;
  result[2] = a2;
  uint64_t v6 = *(void *)(a1 + 344);
  *uint64_t result = v6;
  *(void *)(v6 + 8) = result;
  *(void *)(a1 + 344) = result;
  ++*(void *)(a1 + 360);
  return result;
}

OZChannelBehavior *OZChannelBehavior::GetSceneNodeFromChan(OZChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t v2 = this;
  if (this)
  {
    while (1)
    {
      if (v3) {
        break;
      }
      uint64_t v2 = (OZChannelBehavior *)*((void *)v2 + 6);
      if (!v2) {
        return v2;
      }
    }
    uint64_t v2 = (OZChannelBehavior *)*((void *)v3 + 32);
    if (v2 && *((void *)v2 + 120))
    {
      unint64_t v4 = *(void *)((*(uint64_t (**)(void))(*(void *)v2 + 664))(*((void *)v3 + 32)) + 8);
      long long v7 = xmmword_1B837FEB0;
      if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v7))
      {
        return (OZChannelBehavior *)*((void *)v2 + 120);
      }
      else
      {
        unint64_t v5 = *(void *)((*(uint64_t (**)(OZChannelBehavior *))(*(void *)v2 + 664))(v2) + 8);
        long long v7 = xmmword_1B8381360;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v7) && *(void *)(*((void *)v2 + 120) + 960)) {
          return *(OZChannelBehavior **)(*((void *)v2 + 120) + 960);
        }
      }
    }
  }
  return v2;
}

void OZChannelBehavior::getEvalDepChansForRef(int a1, void *lpsrc, uint64_t a3, uint64_t *a4)
{
  if (lpsrc)
  {
    if (a3)
    {
      {
        uint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 232))(a3);
        if (v6)
        {
          if (v7)
          {
            uint64_t v8 = v7;
            do
            {
              if (v9)
              {
                BOOL v10 = v9 + 1088;
                uint64_t v11 = operator new(0x18uLL);
                v11[1] = a4;
                v11[2] = v10;
                uint64_t v12 = *a4;
                *uint64_t v11 = *a4;
                *(void *)(v12 + 8) = v11;
                *a4 = (uint64_t)v11;
                ++a4[2];
              }
              uint64_t v8 = (void *)v8[120];
            }
            while (v8);
          }
        }
      }
    }
  }
}

void OZChannelBehavior::getEvalDepRefs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  OZChannelFolder::getAllDescendantsFlattened(v3, (void **)&v11, 0, 0);
  unint64_t v4 = v11;
  unint64_t v5 = v12;
  if (v11 != v12)
  {
    uint64_t v6 = v11;
    do
    {
      if (*v6)
      {
        if (v7)
        {
          uint64_t v8 = v7;
          BOOL v9 = operator new(0x18uLL);
          v9[1] = a2;
          void v9[2] = v8;
          uint64_t v10 = *a2;
          *BOOL v9 = *a2;
          *(void *)(v10 + 8) = v9;
          *a2 = (uint64_t)v9;
          ++a2[2];
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  if (v4)
  {
    uint64_t v12 = v4;
    operator delete(v4);
  }
}

void sub_1B7C6B714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  uint64_t v14 = (uint64_t)&v14;
  uint64_t v15 = &v14;
  uint64_t v16 = 0;
  (*((void (**)(char **, const OZChanObjectManipRef *, const OZObjectManipulator *, uint64_t *))*this + 66))(this, a2, a3, &v14);
  unint64_t v4 = this[47];
  unint64_t v5 = (char *)(this + 48);
  if (v4 != (char *)(this + 48))
  {
    do
    {
      for (uint64_t i = v15; i != &v14; uint64_t i = (uint64_t *)i[1])
      {
        v13[0] = v13;
        v13[1] = v13;
        v13[2] = 0;
        char IsChanAAffectedByChanB = OZBehavior::IsChanAAffectedByChanB((void *)i[2], *((void *)v4 + 4), (uint64_t)v13);
        std::__list_imp<unsigned int>::clear(v13);
        if (IsChanAAffectedByChanB)
        {
          uint64_t v11 = 0;
          goto LABEL_14;
        }
      }
      uint64_t v8 = (char *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (char *)*((void *)v4 + 2);
          BOOL v10 = *(void *)v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v9;
    }
    while (v9 != v5);
  }
  uint64_t v11 = 1;
LABEL_14:
  std::__list_imp<unsigned int>::clear(&v14);
  return v11;
}

void sub_1B7C6B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZChannelBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  return OZChannelBehavior::canChanRefBeSetTo(this - 2, a2, a3);
}

uint64_t OZChannelBehavior::isEvalCyclic(OZChannelBehavior *this)
{
  uint64_t v3 = (std::mutex *)((char *)this + 400);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 400));
  int v4 = *((unsigned __int8 *)this + 505);
  if (!*((unsigned char *)this + 505)) {
    char v1 = *((unsigned char *)this + 504) != 0;
  }
  PCSharedMutex::unlock_shared(v3);
  if (v4)
  {
    PCSharedMutex::lock(v3);
    *((unsigned char *)this + 505) = 0;
    unint64_t v5 = (OZChannelBehavior *)*((void *)this + 47);
    if (v5 == (OZChannelBehavior *)((char *)this + 384))
    {
LABEL_12:
      char v10 = 0;
      *((unsigned char *)this + 504) = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v6 = (void *)*((void *)v5 + 4);
        v12[0] = v12;
        v12[1] = v12;
        double v12[2] = 0;
        if (OZBehavior::isUltimatelyAffectedBy((uint64_t)this, v6, (uint64_t)v12)) {
          break;
        }
        std::__list_imp<unsigned int>::clear(v12);
        long long v7 = (OZChannelBehavior *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            long long v7 = *(OZChannelBehavior **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (OZChannelBehavior *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            unint64_t v5 = v8;
          }
          while (!v9);
        }
        unint64_t v5 = v8;
        if (v8 == (OZChannelBehavior *)((char *)this + 384)) {
          goto LABEL_12;
        }
      }
      char v10 = 1;
      *((unsigned char *)this + 504) = 1;
      std::__list_imp<unsigned int>::clear(v12);
      char v1 = 1;
    }
    PCSharedMutex::unlock(v3);
    v1 &= v10;
  }
  return v1 & 1;
}

void sub_1B7C6B998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::dirtyIsEvalCyclicCache(OZChannelBehavior *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 400);
  PCSharedMutex::lock((std::mutex *)((char *)this + 400));
  *((unsigned char *)this + 505) = 1;
  PCSharedMutex::unlock(v2);
}

void OZChannelBehavior::notify(OZChannelBehavior *this, char a2)
{
  if ((a2 & 0x10) != 0)
  {
    if (*((void *)this + 66)) {
      OZChannelBehavior::dirtyIsEvalCyclicCache(this);
    }
  }
}

void non-virtual thunk to'OZChannelBehavior::notify(OZChannelBehavior *this, char a2)
{
  if ((a2 & 0x10) != 0)
  {
    if (*((void *)this + 24)) {
      OZChannelBehavior::dirtyIsEvalCyclicCache((OZChannelBehavior *)((char *)this - 336));
    }
  }
}

double OZChannelBehavior::getChannelValueBeforeThis(OZChannelBehavior *this, OZChannel *a2, const CMTime *a3)
{
  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  if (__p == v23)
  {
    OZChannel::getValueAsDouble(a2, a3, 0.0);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(OZChannelBehavior *))(*(void *)this + 320))(this);
    uint64_t v7 = v6 + 1000;
    uint64_t v8 = *(void *)(v6 + 1008);
    uint64_t v20 = a3;
    if (v8 != v6 + 1000)
    {
      uint64_t v9 = *(void *)(v6 + 1008);
      while (*(OZChannelBehavior **)(v9 + 16) != this)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9 == v7) {
          goto LABEL_9;
        }
      }
      uint64_t v7 = v9;
    }
LABEL_9:
    uint64_t v12 = (const void **)__p;
    uint64_t v11 = v23;
    if (__p == v23)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v12;
        if (*v12)
        {
          if (v15)
          {
            uint64_t v16 = (OZChannelBehavior *)*((void *)v15 + 1);
            if (v16 == this) {
              break;
            }
            uint64_t v17 = v8;
            if (v8 != v7)
            {
              uint64_t v17 = v8;
              while (*(OZChannelBehavior **)(v17 + 16) != v16)
              {
                uint64_t v17 = *(void *)(v17 + 8);
                if (v17 == v7)
                {
                  uint64_t v17 = v7;
                  break;
                }
              }
            }
            if (v7 != v17) {
              break;
            }
          }
        }
        ++v12;
        uint64_t v14 = v13;
      }
      while (v12 != v11);
    }
    memset(&v21, 0, sizeof(v21));
    (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))a2->var0 + 41))(&v21, a2, v20);
    double CurveValueForNode = OZChannel::getCurveValueForNode(a2, &v21, v14, 0.0);
  }
  double v18 = CurveValueForNode;
  if (__p)
  {
    uint64_t v23 = (const void **)__p;
    operator delete(__p);
  }
  return v18;
}

void sub_1B7C6BC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZBehaviorCurveNode::OZBehaviorCurveNode(OZBehaviorCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZCurveNode::OZCurveNode(this);
  *unint64_t v5 = &unk_1F114C118;
  v5[1] = a2;
  v5[2] = a3;
}

void OZBehaviorCurveNode::OZBehaviorCurveNode(OZBehaviorCurveNode *this, const OZBehaviorCurveNode *a2)
{
  OZCurveNode::OZCurveNode(this);
  uint64_t v3 = *((void *)a2 + 1);
  *int v4 = &unk_1F114C118;
  v4[1] = v3;
}

void OZBehaviorCurveNode::~OZBehaviorCurveNode(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZBehaviorCurveNode::solveNode(OZBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 36);
  if (v2)
  {
    uint64_t v3 = (double *)*((void *)a2 + 19);
    int v4 = (double *)*((void *)a2 + 10);
    do
    {
      double v5 = *v4++;
      double result = v5;
      *v3++ = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 OZBehaviorCurveNode::getNeededRange(OZBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZBehaviorCurveNode::cloneNode(OZBehaviorCurveNode *this)
{
}

void sub_1B7C6BDF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZBehaviorCurveNode::compare(OZBehaviorCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

void OZCamera::OZCamera(OZCamera *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(void *)this = &unk_1F114C210;
  *((void *)this + 2) = &unk_1F114C7E0;
  *((void *)this + 6) = &unk_1F114CA38;
  *((void *)this + 816) = &unk_1F114CA90;
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Type Enum");
  PCURL::PCURL((PCURL *)&v43, @"Channel Camera Type Label");
  uint64_t Instance = (OZChannelImpl *)OZCamera::OZCamera_cameraTypeImpl::getInstance(v6);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 6552), 1u, &v44, &v43, (OZChannelFolder *)((char *)this + 448), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Angle Of View");
  uint64_t v9 = (OZCamera::OZCamera_angleOfViewInfo *)OZCamera::OZCamera_angleOfViewImpl::getInstance(v8);
  char v10 = (OZChannelInfo *)OZCamera::OZCamera_angleOfViewInfo::getInstance(v9);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 6808), 45.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xC9u, 0, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Near Plane");
  uint64_t v12 = (OZCamera::OZCamera_nearPlaneInfo *)OZCamera::OZCamera_nearPlaneImpl::getInstance(v11);
  uint64_t v13 = (OZChannelInfo *)OZCamera::OZCamera_nearPlaneInfo::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 6960), 10.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCAu, 0, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Far Plane");
  uint64_t v15 = (OZCamera::OZCamera_farPlaneInfo *)OZCamera::OZCamera_farPlaneImpl::getInstance(v14);
  uint64_t v16 = (OZChannelInfo *)OZCamera::OZCamera_farPlaneInfo::getInstance(v15);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7112), 10000.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCBu, 0, (OZChannelImpl *)v15, v16);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Near Fade");
  double v18 = (OZCamera::OZCamera_nearFadeInfo *)OZCamera::OZCamera_nearFadeImpl::getInstance(v17);
  uint64_t v19 = (OZChannelInfo *)OZCamera::OZCamera_nearFadeInfo::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7264), 10.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCCu, 0, (OZChannelImpl *)v18, v19);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Far Fade");
  CMTime v21 = (OZCamera::OZCamera_farFadeInfo *)OZCamera::OZCamera_farFadeImpl::getInstance(v20);
  uint64_t v22 = (OZChannelInfo *)OZCamera::OZCamera_farFadeInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7416), 100.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCDu, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Enable");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7568), &v44, (OZChannelFolder *)((char *)this + 448), 0xCEu, 0, 0);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera Aperture");
  uint64_t v24 = (OZCamera::OZCamera_apertureInfo *)OZCamera::OZCamera_apertureImpl::getInstance(v23);
  double v25 = (OZChannelInfo *)OZCamera::OZCamera_apertureInfo::getInstance(v24);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7696), 10.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xCFu, 0, (OZChannelImpl *)v24, v25);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Offset");
  uint64_t v27 = (OZChannelInfo *)OZCamera::OZCamera_dofOffsetInfo::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7848), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD0u, 0, 0, v27);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Near");
  uint64_t v29 = (OZCamera::OZCamera_dofNearInfo *)OZCamera::OZCamera_dofNearImpl::getInstance(v28);
  uint64_t v30 = (OZChannelInfo *)OZCamera::OZCamera_dofNearInfo::getInstance(v29);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 8000), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD1u, 0, (OZChannelImpl *)v29, v30);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Far");
  int v32 = (OZCamera::OZCamera_dofFarInfo *)OZCamera::OZCamera_dofFarImpl::getInstance(v31);
  double v33 = (OZChannelInfo *)OZCamera::OZCamera_dofFarInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 8152), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD2u, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Far Infinite");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8304), &v44, (OZChannelFolder *)((char *)this + 7568), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Filter Enum");
  PCURL::PCURL((PCURL *)&v43, @"Channel Camera DOF Filter Label");
  double v35 = (OZChannelImpl *)OZCamera::OZCamera_dofFilterImpl::getInstance(v34);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8456), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD4u, 0, v35, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Filter Shape Enum");
  PCURL::PCURL((PCURL *)&v43, @"Channel Camera DOF Filter Shape Label");
  float v37 = (OZChannelImpl *)OZCamera::OZCamera_dofFilterShapeImpl::getInstance(v36);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8712), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD5u, 0, v37, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Filter Sides");
  int v39 = (OZCamera::OZCamera_dofFilterSidesInfo *)OZCamera::OZCamera_dofFilterSidesImpl::getInstance(v38);
  BOOL v40 = (OZChannelInfo *)OZCamera::OZCamera_dofFilterSidesInfo::getInstance(v39);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)this + 59, 3, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD6u, 0, (OZChannelImpl *)v39, v40);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, @"Channel Camera DOF Depth Mode Enum");
  PCURL::PCURL((PCURL *)&v43, @"Channel Camera DOF Depth Mode Label");
  double v42 = (OZChannelImpl *)OZCamera::OZCamera_dofDepthModeImpl::getInstance(v41);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 9120), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD7u, 0, v42, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1952), 0.0);
  (*(void (**)(char *, void))(*((void *)this + 152) + 288))((char *)this + 1216, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 2, 0);
  (*(void (**)(char *))(*((void *)this + 629) + 128))((char *)this + 5032);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6960), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6960));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7112), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7112));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7264), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7264));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7416), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7416));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 4576), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4576), 0.01);
  OZChannel::setMin((OZChannel *)((char *)this + 4728), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4728), 0.01);
  OZChannel::setMin((OZChannel *)((char *)this + 4880), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4880), 0.01);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 7568), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 7568));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8968), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7848), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7848));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8000), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8000));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8152), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8152));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8304), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8304));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8456), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8456));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8712), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8712));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8968), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8968));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9120), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9120));
}

void sub_1B7C6C7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannel *a12, OZChannelEnum *a13, OZChannelBase *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannel *a18, OZChannel *a19, OZChannel *a20,PCString a21,PCString a22)
{
  PCString::~PCString(&a22);
  OZChannel::~OZChannel(v26);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelEnum::~OZChannelEnum(v24);
  OZChannelBool::~OZChannelBool(v28);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannel::~OZChannel(a11);
  OZChannelFolder::~OZChannelFolder(v27);
  OZChannel::~OZChannel(a18);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBase::setRangeName(a14, v30);
  OZTransformNode::~OZTransformNode(v22);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera(OZCamera *this, const OZCamera *a2, char a3)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(void *)this = &unk_1F114C210;
  *((void *)this + 2) = &unk_1F114C7E0;
  *((void *)this + 6) = &unk_1F114CA38;
  *((void *)this + 816) = &unk_1F114CA90;
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 6552), (const OZCamera *)((char *)a2 + 6552), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6808), (const OZChannelBase *)((char *)a2 + 6808), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 851) = &unk_1F1100CF0;
  *((void *)this + 853) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6960), (const OZChannelBase *)((char *)a2 + 6960), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 870) = &unk_1F1100CF0;
  *((void *)this + 872) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7112), (const OZChannelBase *)((char *)a2 + 7112), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 889) = &unk_1F1100CF0;
  *((void *)this + 891) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7264), (const OZChannelBase *)((char *)a2 + 7264), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 908) = &unk_1F1100CF0;
  *((void *)this + 910) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7416), (const OZChannelBase *)((char *)a2 + 7416), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 927) = &unk_1F1100CF0;
  *((void *)this + 929) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7568), (const OZChannelFolder *)((char *)a2 + 7568), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7696), (const OZChannelBase *)((char *)a2 + 7696), (OZChannelFolder *)((char *)this + 7568));
  *((void *)this + 962) = &unk_1F1100CF0;
  *((void *)this + 964) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7848), (const OZChannelBase *)((char *)a2 + 7848), (OZChannelFolder *)((char *)this + 7568));
  *((void *)this + 981) = &unk_1F1100CF0;
  *((void *)this + 983) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8000), (const OZChannelBase *)((char *)a2 + 8000), (OZChannelFolder *)((char *)this + 7568));
  *((void *)this + 1000) = &unk_1F1100CF0;
  *((void *)this + 1002) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8152), (const OZChannelBase *)((char *)a2 + 8152), (OZChannelFolder *)((char *)this + 7568));
  *((void *)this + 1019) = &unk_1F1100CF0;
  *((void *)this + 1021) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8304), (const OZChannelBase *)((char *)a2 + 8304), (OZChannelFolder *)((char *)this + 7568));
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8456), (const OZCamera *)((char *)a2 + 8456), (OZChannelFolder *)((char *)this + 7568));
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8712), (const OZCamera *)((char *)a2 + 8712), (OZChannelFolder *)((char *)this + 7568));
  OZChannel::OZChannel((OZChannel *)this + 59, (const OZChannelBase *)((char *)a2 + 8968), (OZChannelFolder *)((char *)this + 7568));
  *((void *)this + 1121) = &unk_1F1101490;
  *((void *)this + 1123) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 9120), (const OZCamera *)((char *)a2 + 9120), (OZChannelFolder *)((char *)this + 7568));
}

void sub_1B7C6CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannel *a10, OZChannel *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannelEnum *a15, OZChannelBase *a16)
{
  OZChannel::~OZChannel(v18);
  OZChannelEnum::~OZChannelEnum(v23);
  OZChannelEnum::~OZChannelEnum(v22);
  OZChannelBool::~OZChannelBool(v21);
  OZChannel::~OZChannel(v20);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(a9);
  OZChannelFolder::~OZChannelFolder(v24);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelBase::setRangeName(a16, v26);
  OZTransformNode::~OZTransformNode(v16);
  _Unwind_Resume(a1);
}

void sub_1B7C6D010()
{
}

void sub_1B7C6D018()
{
}

void sub_1B7C6D020()
{
}

void sub_1B7C6D028()
{
}

void sub_1B7C6D030()
{
}

void sub_1B7C6D038()
{
}

void sub_1B7C6D040()
{
}

void sub_1B7C6D048()
{
}

void sub_1B7C6D050()
{
}

void sub_1B7C6D058()
{
}

void sub_1B7C6D060()
{
}

void sub_1B7C6D068()
{
}

void OZCamera::~OZCamera(OZCamera *this)
{
  *(void *)this = &unk_1F114C210;
  *((void *)this + 2) = &unk_1F114C7E0;
  *((void *)this + 6) = &unk_1F114CA38;
  uint64_t v2 = (OZChannelBase *)((char *)this + 6528);
  *((void *)this + 816) = &unk_1F114CA90;
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 9120));
  OZChannel::~OZChannel((OZChannel *)this + 59);
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 8712));
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 8456));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8152));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7696));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6808));
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 6552));
  OZChannelBase::setRangeName(v2, v3);

  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

{
  uint64_t vars8;

  OZCamera::~OZCamera(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZCamera::~OZCamera(OZCamera *this)
{
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 48));
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZCamera::~OZCamera((OZCamera *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCamera::~OZCamera((OZCamera *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCamera::~OZCamera((OZCamera *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZCamera::operator=(uint64_t a1, const void *a2)
{
  OZTransformNode::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 6552, (uint64_t)v4 + 6552);
  OZChannelBase::operator=(a1 + 6808, (uint64_t)v5 + 6808);
  OZChannelBase::operator=(a1 + 6960, (uint64_t)v5 + 6960);
  OZChannelBase::operator=(a1 + 7112, (uint64_t)v5 + 7112);
  OZChannelBase::operator=(a1 + 7264, (uint64_t)v5 + 7264);
  OZChannelBase::operator=(a1 + 7416, (uint64_t)v5 + 7416);
  OZChannelFolder::operator=(a1 + 7568);
  OZChannelBase::operator=(a1 + 7696, (uint64_t)v5 + 7696);
  OZChannelBase::operator=(a1 + 7848, (uint64_t)v5 + 7848);
  OZChannelBase::operator=(a1 + 8000, (uint64_t)v5 + 8000);
  OZChannelBase::operator=(a1 + 8152, (uint64_t)v5 + 8152);
  OZChannelBase::operator=(a1 + 8304, (uint64_t)v5 + 8304);
  OZChannelBase::operator=(a1 + 8456, (uint64_t)v5 + 8456);
  OZChannelBase::operator=(a1 + 8712, (uint64_t)v5 + 8712);
  OZChannelBase::operator=(a1 + 8968, (uint64_t)v5 + 8968);

  return OZChannelBase::operator=(a1 + 9120, (uint64_t)v5 + 9120);
}

uint64_t OZCamera::canBeExported(OZCamera *this)
{
  return 1;
}

uint64_t OZCamera::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (BOOL v5 = *((_DWORD *)a2 + 27) > 0xAu) : (BOOL v5 = 1), !v5)) {
    (*(void (**)(void))(*((void *)this + 684) + 280))();
  }

  return OZTransformNode::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZCamera::parseEnd(OZCamera *this, PCSerializerReadStream *a2)
{
  return OZCamera::parseEnd((OZTransformNode *)((char *)this - 48), a2);
}

void OZCamera::channelValueWillBeSet(OZCamera *this, OZChannel *a2, CMTime *a3, double a4)
{
  unsigned int var3 = a2->var3;
  if (var3 == 213)
  {
    OZChannel::getValueAsDouble(a2, a3, 0.0);
    if (v9 == a4) {
      return;
    }
    BOOL v10 = a4 == 1.0;
  }
  else
  {
    if (var3 != 212)
    {
      if (var3 == 200)
      {
        OZChannel::getValueAsDouble(a2, a3, a4);
        if (v8 != a4)
        {
          CMTime v16 = *a3;
          OZCamera::cameraAtTime(this, &v16);
        }
      }
      return;
    }
    OZChannel::getValueAsDouble(a2, a3, 0.0);
    if (v11 == a4) {
      return;
    }
    if (a4 != 1.0)
    {
      if (v11 != 1.0) {
        return;
      }
      OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 0, 0);
      uint64_t v13 = (OZChannelBase *)((char *)this + 8968);
      int v12 = 0;
      goto LABEL_15;
    }
    OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 1, 0);
    BOOL v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 8712), a3, 0.0) == 1;
  }
  int v12 = v10;
  uint64_t v13 = (OZChannelBase *)((char *)this + 8968);
LABEL_15:
  OZChannelBase::enable(v13, v12, 0);
  uint64_t v14 = *((void *)this + 121);
  if (v14)
  {
    uint64_t v15 = *(OZDocument **)(v14 + 1584);
    OZDocument::postNotification(v15, 0x80000);
  }
}

void sub_1B7C6D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZCamera::cameraAtTime(OZCamera *this, CMTime *a2)
{
}

void sub_1B7C6DA14(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::eval(OZCamera *this, OZRenderParams *a2)
{
  return 0;
}

uint64_t OZCamera::getSolo(OZCamera *this)
{
  return 0;
}

void OZCamera::getLocalVolume(OZCamera *a1, uint64_t a2, CMTime *a3)
{
  CMTime v3 = *a3;
  OZCamera::cameraAtTime(a1, &v3);
}

void sub_1B7C6DB78(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void rayIntersectsGeometry()
{
}

void sub_1B7C6E238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void rayIntersectsFrustum(double a1, double a2, double a3, double a4, double a5)
{
  long double v9 = tan(a2 * 0.5 * 3.14159265 / 180.0);
  double v34 = -(v9 * a4);
  double v35 = -(v9 * a4 / a3);
  double v36 = a1 - a4;
  double v31 = v9 * a4;
  double v32 = v35;
  double v33 = a1 - a4;
  double v28 = v9 * a4;
  double v29 = v9 * a4 / a3;
  double v30 = a1 - a4;
  double v25 = v34;
  double v26 = v29;
  double v27 = a1 - a4;
  double v22 = -(v9 * a5);
  double v23 = -(v9 * a5 / a3);
  double v24 = a1 - a5;
  double v19 = v22;
  double v20 = v9 * a5 / a3;
  double v21 = a1 - a5;
  double v16 = v9 * a5;
  double v17 = v20;
  double v18 = a1 - a5;
  double v13 = v9 * a5;
  double v14 = v23;
  double v15 = a1 - a5;
  __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  operator new();
}

void sub_1B7C6F0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL LiTriangle3<double>::intersects(double **a1, uint64_t a2, float64x2_t *a3, double *a4)
{
  unsigned int v4 = a1[1];
  double v6 = **a1;
  double v5 = (*a1)[1];
  double v7 = *v4 - v6;
  double v8 = v4[1] - v5;
  double v9 = (*a1)[2];
  double v10 = v4[2] - v9;
  uint64_t v11 = a1[2];
  double v12 = *v11 - v6;
  double v13 = v11[1] - v5;
  double v14 = v11[2] - v9;
  double v16 = *(double *)(a2 + 24);
  double v15 = *(double *)(a2 + 32);
  double v17 = *(double *)(a2 + 40);
  double v18 = v15 * v14 - v13 * v17;
  double v19 = v12 * v17 - v14 * v16;
  double v20 = v13 * v16 - v12 * v15;
  double v21 = v10 * v20 + v7 * v18 + v8 * v19;
  if (v21 > -0.0000001 && v21 < 0.0000001) {
    return 0;
  }
  double v22 = *(double *)a2 - v6;
  double v23 = 1.0 / v21;
  double v24 = *(double *)(a2 + 8) - v5;
  double v25 = *(double *)(a2 + 16) - v9;
  double v26 = v23 * (v18 * v22 + v19 * v24 + v20 * v25);
  if (v26 < 0.0 || v26 > 1.0) {
    return 0;
  }
  double v28 = v10 * v24 - v8 * v25;
  double v29 = v7 * v25 - v10 * v22;
  double v30 = v8 * v22 - v7 * v24;
  double v31 = v23 * (v17 * v30 + v16 * v28 + v15 * v29);
  if (v31 < 0.0 || v26 + v31 > 1.0) {
    return 0;
  }
  double v34 = v23 * (v14 * v30 + v12 * v28 + v13 * v29);
  *a4 = v34;
  double v35 = v34 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
  *a3 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v34), *(float64x2_t *)a2);
  a3[1].f64[0] = v35;
  return *a4 > -0.00001;
}

uint64_t OZCamera::contains(OZCamera *this, const LiCamera *a2, const OZRenderState *a3)
{
  double v6 = (*(double (**)(const LiCamera *))(*(void *)a2 + 504))(a2);
  if (v6 <= -0.0000001 || v6 >= 0.0000001)
  {
    (*(void (**)(uint64_t *__return_ptr, const LiCamera *))(*(void *)a2 + 336))(&v10, a2);
    (*(void (**)(double *__return_ptr, const LiCamera *))(*(void *)a2 + 424))(v9, a2);
    PCMatrix44Tmpl<double>::transform<double>(v9, (double *)&v10, (double *)&v10);
    CMTime var0 = (CMTime)a3->var0;
    OZCamera::cameraAtTime(this, &var0);
  }
  return 0;
}

void sub_1B7C6F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,PCSharedCount a35)
{
}

uint64_t OZCamera::hitCheck(uint64_t a1, float32x2_t *a2, long long *a3, void *lpsrc, uint64_t a5, char a6)
{
  if ((a6 & 4) == 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 680))(a1) & 1) == 0)
  {
    if ((a6 & 2) == 0
      || (long long v17 = *a3,
          uint64_t v18 = *((void *)a3 + 2),
          (*(unsigned int (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 16) + 104))(a1 + 16, &v17, 1, 1, 1)))
    {
      if ((!lpsrc
      {
        float64x2_t v15 = vcvtq_f64_f32(*a2);
        uint64_t v16 = 0;
        (*(void (**)(void *__return_ptr, uint64_t, float64x2_t *, void *, long long *, void))(*(void *)a1 + 1384))(v14, a1, &v15, lpsrc, a3, 0);
        v13[1] = xmmword_1B7E736F0;
        v13[2] = xmmword_1B7E736F0;
        v13[0] = xmmword_1B7E736F0;
        (*(void (**)(uint64_t, _OWORD *, long long *))(*(void *)a1 + 1360))(a1, v13, a3);
        rayIntersectsGeometry();
      }
    }
  }
  return 0;
}

BOOL OZCamera::hitCheck(_DWORD *a1, double *a2, uint64_t a3, void *lpsrc)
{
  if (lpsrc)
  {
    if (v8)
    {
      if (a1[20] == v8[4]) {
        return 0;
      }
    }
  }
  if ((*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 1440))(a1, lpsrc, a3)) {
    return 0;
  }

  return OZTransformNode::hitCheck((uint64_t)a1, a2, a3, (const LiCamera *)lpsrc);
}

void OZCamera::projectPointToObject(OZCamera *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CMTime *a6)
{
  CMTime v6 = *a6;
  OZCamera::cameraAtTime(a1, &v6);
}

void sub_1B7C6FB98(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 120));
  _Unwind_Resume(a1);
}

void OZCamera::calcTranslationRelativeToCamera(OZCamera *a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5)
{
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v26 = 0x3FF0000000000000;
  uint64_t v23 = 0x3FF0000000000000;
  uint64_t v20 = 0x3FF0000000000000;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  (*(void (**)(OZCamera *, uint64_t *, CMTime *))(*(void *)a1 + 1256))(a1, &v20, a5);
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  double v7 = (const void *)*((void *)a1 + 120);
  if (v7)
  {
    if (v8) {
      (*(void (**)(void *, uint64_t *, CMTime *))(*(void *)v8 + 1264))(v8, &v10, a5);
    }
  }
  CMTime v9 = *a5;
  OZCamera::cameraAtTime(a1, &v9);
}

void sub_1B7C70198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,PCSharedCount a56)
{
}

void OZCamera::buildRenderGraph(OZCamera *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  (*(void (**)(OZCamera *))(*(void *)this + 272))(this);
  CMTime v6 = *a2;
  OZCamera::cameraAtTime(this, &v6);
}

void sub_1B7C703BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 56));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZCamera::buildRenderGraph(OZCamera *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

int32x2_t *OZCamera::getBounds(uint64_t a1, float64x2_t *a2)
{
  __n128 result = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if (result)
  {
    float64x2_t v4 = vcvtq_f64_f32(vcvt_f32_s32(result[43]));
    __asm { FMOV            V1.2D, #-0.5 }
    float64x2_t v10 = vmulq_f64(v4, _Q1);
  }
  else
  {
    float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    float64x2_t v10 = (float64x2_t)vdupq_n_s64(0xC049000000000000);
  }
  *a2 = v10;
  a2[1] = v4;
  return result;
}

int32x2_t *non-virtual thunk to'OZCamera::getBounds(uint64_t a1, float64x2_t *a2)
{
  return OZCamera::getBounds(a1 - 6528, a2);
}

void OZSceneCamera::OZSceneCamera(OZSceneCamera *this, OZScene *a2, int a3)
{
  *((unsigned char *)this + 64) = 1;
  *(void *)this = &unk_1F114CBA8;
  *((void *)this + 1) = a2;
  *((void *)this + 6) = &unk_1F114CEC0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 4) = a3;
  *((unsigned char *)this + 20) = 1;
}

uint64_t OZCamera::enable(OZCamera *this)
{
  uint64_t result = OZTransformNode::isInRootWorld((OZTransformNode *)this);
  if (result)
  {
    return OZObjectManipulator::enable((OZCamera *)((char *)this + 16));
  }
  return result;
}

void OZSceneCamera::~OZSceneCamera(OZSceneCamera *this)
{
  *((void *)this + 6) = &unk_1F1199AC8;
  *((unsigned char *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1F1199AC8;
  *((unsigned char *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZSceneCamera::~OZSceneCamera(OZSceneCamera *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 6) = &unk_1F1199AC8;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 6) = &unk_1F1199AC8;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZSceneCamera::isValid(OZSceneCamera *this)
{
  return *((_DWORD *)this + 4) && OZSceneCamera::getCameraNode(this) != 0;
}

void *OZSceneCamera::getCameraNode(OZSceneCamera *this)
{
  uint64_t v2 = (OZScene *)*((void *)this + 1);
  if (!v2) {
    return 0;
  }
  Node = OZScene::getNode(v2, *((_DWORD *)this + 4));
  if (!Node) {
    return 0;
  }
}

float64x2_t OZSceneCamera::getFilmback@<Q0>(OZSceneCamera *this@<X0>, _OWORD *a2@<X8>)
{
  result.f64[0] = 4.0;
  *a2 = xmmword_1B837B5A0;
  CMTime v3 = (int32x2_t *)*((void *)this + 1);
  if (v3)
  {
    float64x2_t result = vcvtq_f64_f32(vcvt_f32_s32(v3[43]));
    *a2 = result;
  }
  return result;
}

double OZSceneCamera::getParentAspectRatio(OZSceneCamera *this)
{
  CameraNode = OZSceneCamera::getCameraNode(this);
  uint64_t v2 = (const void *)CameraNode[120];
  if (!v2) {
    return *(double *)((*(uint64_t (**)(void *))(*CameraNode + 272))(CameraNode) + 384);
  }
  if (!v3) {
    return *(double *)((*(uint64_t (**)(void *))(*CameraNode + 272))(CameraNode) + 384);
  }
  float64x2_t v4 = *(void (**)(void))(*(void *)v3 + 1328);

  v4();
  return result;
}

double OZSceneCamera::getParentTransform@<D0>(OZSceneCamera *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  float64x2_t v4 = (_OWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 48) = 0u;
  uint64_t v5 = (_OWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 88) = 0u;
  CMTime v6 = (_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  CameraNode = OZSceneCamera::getCameraNode(this);
  if (!CameraNode)
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
    goto LABEL_8;
  }
  double v8 = CameraNode;
  CMTime v9 = (const void *)CameraNode[120];
  if (!v9
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
LABEL_8:
    double result = 0.0;
    *float64x2_t v4 = 0u;
    v4[1] = 0u;
    *uint64_t v5 = 0u;
    v5[1] = 0u;
    *CMTime v6 = 0u;
    v6[1] = 0u;
    return result;
  }
  long long v11 = v10;
  OZRenderState::OZRenderState(&v15);
  if (*((unsigned char *)this + 20))
  {
    OZScene::getCurrentTime(*((OZScene **)this + 1), &v13);
  }
  else
  {
    __n128 v13 = *(__n128 *)((char *)this + 24);
    int64_t v14 = *((void *)this + 5);
  }
  *(__n128 *)&v15.var0.CMTime var0 = v13;
  v15.var0.unsigned int var3 = v14;
  v15.var4 = 0;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(void *)v11 + 1256))(v11, a2, &v15);
  double result = 1.0 / (*(double (**)(void *))(*v8 + 1328))(v8);
  if (result != 1.0)
  {
    *(double *)a2 = result * *(double *)a2;
    *(double *)(a2 + 32) = result * *(double *)(a2 + 32);
    *(double *)(a2 + 64) = result * *(double *)(a2 + 64);
    double result = result * *(double *)(a2 + 96);
    *(double *)(a2 + 96) = result;
  }
  return result;
}

double OZSceneCamera::getTranslation(uint64_t a1, uint64_t a2)
{
  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    uint64_t v6 = (uint64_t)CameraNode;
    memset(&v9, 0, sizeof(v9));
    if (*(unsigned char *)(a1 + 20)) {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v9);
    }
    else {
      CMTime v9 = *(CMTime *)(a1 + 24);
    }
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    OZTransformNode::getTranslation(v6, &v7, &v9);
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    double result = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1) * *(double *)a2;
    *(double *)a2 = result;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

double OZSceneCamera::getPivot(uint64_t a1, uint64_t a2)
{
  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    uint64_t v6 = (uint64_t)CameraNode;
    memset(&v9, 0, sizeof(v9));
    if (*(unsigned char *)(a1 + 20)) {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v9);
    }
    else {
      CMTime v9 = *(CMTime *)(a1 + 24);
    }
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    OZTransformNode::getPivot(v6, &v7, &v9);
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    double result = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1) * *(double *)a2;
    *(double *)a2 = result;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

OZTransformNode *OZSceneCamera::setPivot(uint64_t a1, double *a2)
{
  double result = (OZTransformNode *)OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    uint64_t v5 = result;
    memset(&v8, 0, sizeof(v8));
    if (*(unsigned char *)(a1 + 20)) {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v8);
    }
    else {
      CMTime v8 = *(CMTime *)(a1 + 24);
    }
    double v6 = *a2;
    double ParentAspectRatio = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1);
    return (OZTransformNode *)OZTransformNode::setPivot(v5, v6 / ParentAspectRatio, a2[1], a2[2], &v8);
  }
  return result;
}

OZTransformNode *OZSceneCamera::setTranslation(uint64_t a1, double *a2)
{
  double result = (OZTransformNode *)OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    uint64_t v5 = result;
    double v7 = *a2;
    double v6 = a2[1];
    double v8 = a2[2];
    memset(&v13, 0, sizeof(v13));
    double v9 = v7 / OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1);
    if (*(unsigned char *)(a1 + 20)) {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v13);
    }
    else {
      CMTime v13 = *(CMTime *)(a1 + 24);
    }
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    OZTransformNode::getTranslation((uint64_t)v5, &v10, &v13);
    return (OZTransformNode *)OZTransformNode::offsetTranslation(v5, v9 - v10, v6 - v11, v8 - v12, &v13, 1);
  }
  return result;
}

double OZSceneCamera::getRotation(uint64_t a1, double *a2)
{
  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    double v6 = CameraNode;
    memset(&v7, 0, sizeof(v7));
    if (*(unsigned char *)(a1 + 20)) {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v7);
    }
    else {
      CMTime v7 = *(CMTime *)(a1 + 24);
    }
    return OZChannelRotation3D::getValueAsQuatd((uint64_t)v6 + 2104, a2, &v7, 0.0);
  }
  return result;
}

void *OZSceneCamera::setRotation(uint64_t a1, double *a2)
{
  double result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    uint64_t v5 = result;
    __n128 v30 = 0uLL;
    uint64_t v31 = 0;
    if (*(unsigned char *)(a1 + 20))
    {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), &v30);
    }
    else
    {
      __n128 v30 = *(__n128 *)(a1 + 24);
      uint64_t v31 = *(void *)(a1 + 40);
    }
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v26 = 0x3FF0000000000000;
    uint64_t v23 = 0x3FF0000000000000;
    uint64_t v20 = 0x3FF0000000000000;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    PCMatrix44Tmpl<double>::rightRotate((uint64_t)&v20, a2);
    memset(v15, 0, sizeof(v15));
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
    int v16 = 4;
    Transformatiouint64_t n = PCMatrix44Tmpl<double>::getTransformation((long long *)&v20, (uint64_t)v15);
    _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZCamera.cpp", 1272, v7, v8, v9, v10, v11);
    v12.n128_u64[0] = v17;
    (*(void (**)(__n128))(v5[280] + 720))(v12);
    v13.n128_u64[0] = *((void *)&v17 + 1);
    (*(void (**)(__n128))(v5[299] + 720))(v13);
    v14.n128_u64[0] = v18;
    return (void *)(*(uint64_t (**)(__n128))(v5[318] + 720))(v14);
  }
  return result;
}

void *OZSceneCamera::setEulerRotation(uint64_t a1, uint64_t a2)
{
  double result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    uint64_t v5 = result;
    __n128 v8 = 0uLL;
    uint64_t v9 = 0;
    if (*(unsigned char *)(a1 + 20))
    {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), &v8);
    }
    else
    {
      __n128 v8 = *(__n128 *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 40);
    }
    (*(void (**)(void *, __n128 *, double))(v5[280] + 720))(v5 + 280, &v8, *(double *)a2);
    v6.n128_u64[0] = *(void *)(a2 + 8);
    (*(void (**)(__n128))(v5[299] + 720))(v6);
    v7.n128_u64[0] = *(void *)(a2 + 16);
    return (void *)(*(uint64_t (**)(__n128))(v5[318] + 720))(v7);
  }
  return result;
}

uint64_t OZSceneCamera::setEulerRotation(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v42 = *a3;
  uint64_t v43 = *((void *)a3 + 2);
  double v39 = 0.0;
  double v40 = 0.0;
  double v41 = 0.0;
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  double v29 = 1.0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 424))(v28);
  long long v24 = v28[4];
  long long v25 = v28[5];
  long long v26 = v28[6];
  long long v27 = v28[7];
  long long v20 = v28[0];
  long long v21 = v28[1];
  long long v22 = v28[2];
  long long v23 = v28[3];
  (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v19, a1);
  for (uint64_t i = 0; i != 128; i += 32)
  {
    __n128 v7 = (_OWORD *)((char *)&v29 + i);
    long long v8 = *(_OWORD *)((char *)&v19 + i + 16);
    *__n128 v7 = *(_OWORD *)((char *)&v19 + i);
    v7[1] = v8;
  }
  PCMatrix44Tmpl<double>::invert((double *)&v20, (double *)&v20, 0.0);
  PCMatrix44Tmpl<double>::transform<double>(&v29, (double *)&v42, (double *)&v42);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 400))(a1, a2);
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  (*(void (**)(double *__return_ptr, uint64_t, double, double, double))(*(void *)a1 + 16))(&v19, a1, 0.0, 0.0, 0.0);
  PCMatrix44Tmpl<double>::transform<double>(&v19, (double *)&v42, &v16);
  double v9 = *(double *)a3 - v16;
  double v10 = *((double *)a3 + 1) - v17;
  double v11 = *((double *)a3 + 2) - v18;
  double v12 = v9 * *(double *)&v20 + v10 * *((double *)&v20 + 1) + v11 * *(double *)&v21;
  double v13 = v9 * *(double *)&v22 + v10 * *((double *)&v22 + 1) + v11 * *(double *)&v23;
  double v14 = v9 * *(double *)&v24 + v10 * *((double *)&v24 + 1) + v11 * *(double *)&v25;
  (*(void (**)(uint64_t, double *))(*(void *)a1 + 440))(a1, &v39);
  double v39 = v12 + v39;
  double v40 = v13 + v40;
  double v41 = v14 + v41;
  return (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 448))(a1, &v39);
}

void sub_1B7C71448(void *a1)
{
}

void OZSceneCamera::getEulerRotation(OZSceneCamera *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    float64x2_t v4 = CameraNode;
    memset(&v9, 0, sizeof(v9));
    uint64_t v5 = (OZScene *)(*(uint64_t (**)(char *))(*(void *)CameraNode + 272))(CameraNode);
    OZScene::getCurrentTime(v5, (__n128 *)&v9);
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2240), &v9, 0.0);
    *a2 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2392), &v9, 0.0);
    a2[1] = v7;
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2544), &v9, 0.0);
    a2[2] = v8;
  }
}

void OZSceneCamera::getScale(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 4880), &v4, 0.0);
  }
}

void *OZSceneCamera::setScale(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = result;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    (*(void (**)(void *, __n128 *, void, double))(v5[572] + 712))(v5 + 572, &v6, 0, a2);
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    (*(void (**)(void *, __n128 *, void, double))(v5[591] + 712))(v5 + 591, &v6, 0, a2);
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(void *, __n128 *, void, double))(v5[610] + 712))(v5 + 610, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getAngleOfView(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 6808), &v4, 0.0);
  }
}

void *OZSceneCamera::setAngleOfView(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    __n128 v6 = 0uLL;
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, void, double))(*(void *)(v5 + 6808) + 712))(v5 + 6808, &v6, 0, a2);
  }
  return result;
}

uint64_t OZSceneCamera::getNiceAngleOfView(OZSceneCamera *this)
{
  return 1;
}

void OZSceneCamera::getNearPlane(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 6960), &v4, 0.0);
  }
}

void *OZSceneCamera::setNearPlane(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    __n128 v6 = 0uLL;
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, void, double))(*(void *)(v5 + 6960) + 712))(v5 + 6960, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getNearPlaneFade(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7264), &v4, 0.0);
  }
}

void *OZSceneCamera::setNearPlaneFade(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    __n128 v6 = 0uLL;
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, void, double))(*(void *)(v5 + 7264) + 712))(v5 + 7264, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getFarPlane(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7112), &v4, 0.0);
  }
}

void *OZSceneCamera::setFarPlane(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    __n128 v6 = 0uLL;
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, void, double))(*(void *)(v5 + 7112) + 712))(v5 + 7112, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getFarPlaneFade(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    CMTime v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((unsigned char *)this + 20)) {
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    }
    else {
      CMTime v4 = *(CMTime *)((unsigned char *)this + 1);
    }
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7416), &v4, 0.0);
  }
}

void *OZSceneCamera::setFarPlaneFade(OZSceneCamera *this, double a2)
{
  double result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    __n128 v6 = 0uLL;
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      __n128 v6 = *(__n128 *)((char *)this + 24);
      uint64_t v7 = *((void *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, void, double))(*(void *)(v5 + 7416) + 712))(v5 + 7416, &v6, 0, a2);
  }
  return result;
}

uint64_t OZSceneCamera::getNearFadePoints()
{
  return 0;
}

uint64_t OZSceneCamera::getFarFadePoints()
{
  return 0;
}

BOOL OZSceneCamera::getFarCrop(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (!CameraNode) {
    return 1;
  }
  CMTime v3 = CameraNode;
  CMTime v4 = (OZChannel *)(CameraNode + 7112);
  memset(&v9, 0, sizeof(v9));
  if (*((unsigned char *)this + 20)) {
    OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v9);
  }
  else {
    CMTime v9 = *(CMTime *)((unsigned char *)this + 1);
  }
  OZChannel::getValueAsDouble(v4, &v9, 0.0);
  double v7 = v6;
  double v10 = 0.0;
  (*(void (**)(void, double *, uint64_t))(**(void **)(*((void *)v3 + 903) + 8) + 256))(*(void *)(*((void *)v3 + 903) + 8), &v10, v8);
  return v7 < v10;
}

uint64_t OZSceneCamera::getCameraModel(OZSceneCamera *this)
{
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (!CameraNode) {
    return 1;
  }
  CMTime v3 = CameraNode;
  memset(&v5, 0, sizeof(v5));
  if (*((unsigned char *)this + 20)) {
    OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v5);
  }
  else {
    CMTime v5 = *(CMTime *)((unsigned char *)this + 1);
  }
  return OZChannel::getValueAsInt((OZChannel *)(v3 + 6552), &v5, 0.0);
}

void *OZSceneCamera::setCameraModel(uint64_t a1, unsigned int a2)
{
  double result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    CMTime v5 = result;
    __n128 v7 = 0uLL;
    uint64_t v8 = 0;
    if (*(unsigned char *)(a1 + 20))
    {
      __n128 CurrentTime = OZScene::getCurrentTime((OZScene *)*(void *)(a1 + 8), &v7);
    }
    else
    {
      __n128 CurrentTime = *(__n128 *)(a1 + 24);
      __n128 v7 = CurrentTime;
      uint64_t v8 = *(void *)(a1 + 40);
    }
    double result = (void *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 632))(a1, CurrentTime);
    if (result != a2) {
      return (void *)(*(uint64_t (**)(void *, __n128 *, void, double))(v5[819] + 712))(v5 + 819, &v7, 0, (double)a2);
    }
  }
  return result;
}

uint64_t OZSceneCamera::getRotationOrder(OZSceneCamera *this)
{
  return 5;
}

uint64_t OZSceneCamera::getCrop(OZSceneCamera *this)
{
  return 1;
}

double OZSceneCamera::getPixelAspectRatio(OZSceneCamera *this)
{
  return *(double *)(*((void *)this + 1) + 384);
}

uint64_t OZCamera::OZCamera_cameraTypeImpl::getInstance(OZCamera::OZCamera_cameraTypeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::OZCamera_cameraTypeImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::OZCamera_cameraTypeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_cameraTypeImpl::_OZCamera_cameraType;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_cameraTypeImpl::_OZCamera_cameraType) {
    operator new();
  }
}

void sub_1B7C72058(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_cameraTypeImpl::OZCamera_cameraTypeImpl(OZCamera::OZCamera_cameraTypeImpl *this)
{
}

void sub_1B7C7212C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_angleOfViewImpl::getInstance(OZCamera::OZCamera_angleOfViewImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::OZCamera_angleOfViewImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::OZCamera_angleOfViewImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_angleOfViewImpl::_OZCamera_angleOfView;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_angleOfViewImpl::_OZCamera_angleOfView) {
    operator new();
  }
}

void sub_1B7C72208(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_angleOfViewImpl::OZCamera_angleOfViewImpl(OZCamera::OZCamera_angleOfViewImpl *this)
{
}

void sub_1B7C722EC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_angleOfViewInfo::getInstance(OZCamera::OZCamera_angleOfViewInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::OZCamera_angleOfViewInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::OZCamera_angleOfViewInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_angleOfViewInfo::_OZCamera_angleOfViewInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_angleOfViewInfo::_OZCamera_angleOfViewInfo) {
    operator new();
  }
}

void sub_1B7C723C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZCamera::OZCamera_angleOfViewInfo::OZCamera_angleOfViewInfo(OZChannelInfo *this)
{
  OZChannelInfo::OZChannelInfo(this, 0.0, 165.0, 1.0, 0.01, 1.0, "°");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F114D4D0;
  *((void *)this + 10) = &unk_1F114D4F0;
  return this;
}

void sub_1B7C7247C(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearPlaneImpl::getInstance(OZCamera::OZCamera_nearPlaneImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::OZCamera_nearPlaneImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::OZCamera_nearPlaneImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearPlaneImpl::_OZCamera_nearPlane;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_nearPlaneImpl::_OZCamera_nearPlane) {
    operator new();
  }
}

void sub_1B7C72548(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_nearPlaneImpl::OZCamera_nearPlaneImpl(OZCamera::OZCamera_nearPlaneImpl *this)
{
}

void sub_1B7C72620(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearPlaneInfo::getInstance(OZCamera::OZCamera_nearPlaneInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::OZCamera_nearPlaneInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::OZCamera_nearPlaneInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearPlaneInfo::_OZCamera_nearPlaneInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_nearPlaneInfo::_OZCamera_nearPlaneInfo) {
    operator new();
  }
}

void sub_1B7C726FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearPlaneInfo *OZCamera::OZCamera_nearPlaneInfo::OZCamera_nearPlaneInfo(OZCamera::OZCamera_nearPlaneInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearPlaneInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D5C0;
  *((void *)this + 10) = &unk_1F114D5E0;
  return this;
}

void sub_1B7C727D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farPlaneImpl::getInstance(OZCamera::OZCamera_farPlaneImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_farPlaneImpl::getInstance(void)::OZCamera_farPlaneImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_farPlaneImpl::getInstance(void)::OZCamera_farPlaneImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farPlaneImpl::_OZCamera_farPlane;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_farPlaneImpl::_OZCamera_farPlane) {
    operator new();
  }
}

void sub_1B7C728AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_farPlaneImpl::OZCamera_farPlaneImpl(OZCamera::OZCamera_farPlaneImpl *this)
{
}

void sub_1B7C72990(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farPlaneInfo::getInstance(OZCamera::OZCamera_farPlaneInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_farPlaneInfo::getInstance(void)::OZCamera_farPlaneInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_farPlaneInfo::getInstance(void)::OZCamera_farPlaneInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farPlaneInfo::_OZCamera_farPlaneInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_farPlaneInfo::_OZCamera_farPlaneInfo) {
    operator new();
  }
}

void sub_1B7C72A6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farPlaneInfo *OZCamera::OZCamera_farPlaneInfo::OZCamera_farPlaneInfo(OZCamera::OZCamera_farPlaneInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 100.0, 20000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farPlaneInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D6B0;
  *((void *)this + 10) = &unk_1F114D6D0;
  return this;
}

void sub_1B7C72B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearFadeImpl::getInstance(OZCamera::OZCamera_nearFadeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_nearFadeImpl::getInstance(void)::OZCamera_nearFadeImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_nearFadeImpl::getInstance(void)::OZCamera_nearFadeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearFadeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearFadeImpl::_OZCamera_nearFade;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearFadeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_nearFadeImpl::_OZCamera_nearFade) {
    operator new();
  }
}

void sub_1B7C72C20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_nearFadeImpl::OZCamera_nearFadeImpl(OZCamera::OZCamera_nearFadeImpl *this)
{
}

void sub_1B7C72CF4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearFadeInfo::getInstance(OZCamera::OZCamera_nearFadeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_nearFadeInfo::getInstance(void)::OZCamera_nearFadeInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_nearFadeInfo::getInstance(void)::OZCamera_nearFadeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearFadeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearFadeInfo::_OZCamera_nearFadeInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearFadeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_nearFadeInfo::_OZCamera_nearFadeInfo) {
    operator new();
  }
}

void sub_1B7C72DD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearFadeInfo *OZCamera::OZCamera_nearFadeInfo::OZCamera_nearFadeInfo(OZCamera::OZCamera_nearFadeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearFadeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D7A0;
  *((void *)this + 10) = &unk_1F114D7C0;
  return this;
}

void sub_1B7C72EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farFadeImpl::getInstance(OZCamera::OZCamera_farFadeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_farFadeImpl::getInstance(void)::OZCamera_farFadeImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_farFadeImpl::getInstance(void)::OZCamera_farFadeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farFadeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farFadeImpl::_OZCamera_farFade;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farFadeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_farFadeImpl::_OZCamera_farFade) {
    operator new();
  }
}

void sub_1B7C72F80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_farFadeImpl::OZCamera_farFadeImpl(OZCamera::OZCamera_farFadeImpl *this)
{
}

void sub_1B7C73064(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farFadeInfo::getInstance(OZCamera::OZCamera_farFadeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_farFadeInfo::getInstance(void)::OZCamera_farFadeInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_farFadeInfo::getInstance(void)::OZCamera_farFadeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farFadeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farFadeInfo::_OZCamera_farFadeInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farFadeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_farFadeInfo::_OZCamera_farFadeInfo) {
    operator new();
  }
}

void sub_1B7C73140(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farFadeInfo *OZCamera::OZCamera_farFadeInfo::OZCamera_farFadeInfo(OZCamera::OZCamera_farFadeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farFadeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D890;
  *((void *)this + 10) = &unk_1F114D8B0;
  return this;
}

void sub_1B7C73214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_apertureImpl::getInstance(OZCamera::OZCamera_apertureImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_apertureImpl::getInstance(void)::OZCamera_apertureImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_apertureImpl::getInstance(void)::OZCamera_apertureImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_apertureImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_apertureImpl::_OZCamera_aperture;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_apertureImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_apertureImpl::_OZCamera_aperture) {
    operator new();
  }
}

void sub_1B7C732F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_apertureImpl::OZCamera_apertureImpl(OZCamera::OZCamera_apertureImpl *this)
{
}

void sub_1B7C733C4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_apertureInfo::getInstance(OZCamera::OZCamera_apertureInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_apertureInfo::getInstance(void)::OZCamera_apertureInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_apertureInfo::getInstance(void)::OZCamera_apertureInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_apertureInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_apertureInfo::_OZCamera_apertureInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_apertureInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_apertureInfo::_OZCamera_apertureInfo) {
    operator new();
  }
}

void sub_1B7C734A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_apertureInfo *OZCamera::OZCamera_apertureInfo::OZCamera_apertureInfo(OZCamera::OZCamera_apertureInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_apertureInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D980;
  *((void *)this + 10) = &unk_1F114D9A0;
  return this;
}

void sub_1B7C73574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofOffsetInfo::getInstance(OZCamera::OZCamera_dofOffsetInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::OZCamera_dofOffsetInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::OZCamera_dofOffsetInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofOffsetInfo::_OZCamera_dofOffsetInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofOffsetInfo::_OZCamera_dofOffsetInfo) {
    operator new();
  }
}

void sub_1B7C73650(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofOffsetInfo *OZCamera::OZCamera_dofOffsetInfo::OZCamera_dofOffsetInfo(OZCamera::OZCamera_dofOffsetInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1000.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofOffsetInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114D9F8;
  *((void *)this + 10) = &unk_1F114DA18;
  return this;
}

void sub_1B7C73728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofNearImpl::getInstance(OZCamera::OZCamera_dofNearImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofNearImpl::getInstance(void)::OZCamera_dofNearImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofNearImpl::getInstance(void)::OZCamera_dofNearImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofNearImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofNearImpl::_OZCamera_dofNear;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofNearImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofNearImpl::_OZCamera_dofNear) {
    operator new();
  }
}

void sub_1B7C73804(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofNearImpl::OZCamera_dofNearImpl(OZCamera::OZCamera_dofNearImpl *this)
{
}

void sub_1B7C738D8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofNearInfo::getInstance(OZCamera::OZCamera_dofNearInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofNearInfo::getInstance(void)::OZCamera_dofNearInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofNearInfo::getInstance(void)::OZCamera_dofNearInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofNearInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofNearInfo::_OZCamera_dofNearInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofNearInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofNearInfo::_OZCamera_dofNearInfo) {
    operator new();
  }
}

void sub_1B7C739B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofNearInfo *OZCamera::OZCamera_dofNearInfo::OZCamera_dofNearInfo(OZCamera::OZCamera_dofNearInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofNearInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114DAE8;
  *((void *)this + 10) = &unk_1F114DB08;
  return this;
}

void sub_1B7C73A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFarImpl::getInstance(OZCamera::OZCamera_dofFarImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFarImpl::getInstance(void)::OZCamera_dofFarImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFarImpl::getInstance(void)::OZCamera_dofFarImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFarImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFarImpl::_OZCamera_dofFar;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFarImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFarImpl::_OZCamera_dofFar) {
    operator new();
  }
}

void sub_1B7C73B64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofFarImpl::OZCamera_dofFarImpl(OZCamera::OZCamera_dofFarImpl *this)
{
}

void sub_1B7C73C38(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFarInfo::getInstance(OZCamera::OZCamera_dofFarInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFarInfo::getInstance(void)::OZCamera_dofFarInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFarInfo::getInstance(void)::OZCamera_dofFarInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFarInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFarInfo::_OZCamera_dofFarInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFarInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFarInfo::_OZCamera_dofFarInfo) {
    operator new();
  }
}

void sub_1B7C73D14(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFarInfo *OZCamera::OZCamera_dofFarInfo::OZCamera_dofFarInfo(OZCamera::OZCamera_dofFarInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFarInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114DBD8;
  *((void *)this + 10) = &unk_1F114DBF8;
  return this;
}

void sub_1B7C73DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterImpl::getInstance(OZCamera::OZCamera_dofFilterImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFilterImpl::getInstance(void)::OZCamera_dofFilterImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFilterImpl::getInstance(void)::OZCamera_dofFilterImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterImpl::_OZCamera_dofFilter;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFilterImpl::_OZCamera_dofFilter) {
    operator new();
  }
}

void sub_1B7C73EC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofFilterImpl::OZCamera_dofFilterImpl(OZCamera::OZCamera_dofFilterImpl *this)
{
}

void sub_1B7C73F98(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterShapeImpl::getInstance(OZCamera::OZCamera_dofFilterShapeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::OZCamera_dofFilterShapeImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::OZCamera_dofFilterShapeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterShapeImpl::_OZCamera_dofFilterShape;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFilterShapeImpl::_OZCamera_dofFilterShape) {
    operator new();
  }
}

void sub_1B7C74074(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofFilterShapeImpl::OZCamera_dofFilterShapeImpl(OZCamera::OZCamera_dofFilterShapeImpl *this)
{
}

void sub_1B7C74148(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterSidesImpl::getInstance(OZCamera::OZCamera_dofFilterSidesImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::OZCamera_dofFilterSidesImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::OZCamera_dofFilterSidesImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterSidesImpl::_OZCamera_dofFilterSides;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFilterSidesImpl::_OZCamera_dofFilterSides) {
    operator new();
  }
}

void sub_1B7C74224(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofFilterSidesImpl::OZCamera_dofFilterSidesImpl(OZChannelUint32 *this)
{
}

void sub_1B7C742F4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterSidesInfo::getInstance(OZCamera::OZCamera_dofFilterSidesInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::OZCamera_dofFilterSidesInfo_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::OZCamera_dofFilterSidesInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterSidesInfo::_OZCamera_dofFilterSidesInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofFilterSidesInfo::_OZCamera_dofFilterSidesInfo) {
    operator new();
  }
}

void sub_1B7C743D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFilterSidesInfo *OZCamera::OZCamera_dofFilterSidesInfo::OZCamera_dofFilterSidesInfo(OZCamera::OZCamera_dofFilterSidesInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 3.0, 16.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFilterSidesInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F114DDB8;
  *((void *)this + 10) = &unk_1F114DDD8;
  return this;
}

void sub_1B7C7449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofDepthModeImpl::getInstance(OZCamera::OZCamera_dofDepthModeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::OZCamera_dofDepthModeImpl_once, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::OZCamera_dofDepthModeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofDepthModeImpl::_OZCamera_dofDepthMode;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZCamera::OZCamera_dofDepthModeImpl::_OZCamera_dofDepthMode) {
    operator new();
  }
}

void sub_1B7C74578(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera_dofDepthModeImpl::OZCamera_dofDepthModeImpl(OZCamera::OZCamera_dofDepthModeImpl *this)
{
}

void sub_1B7C7464C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v10 = (uint64_t *)result;
LABEL_2:
  double v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    double v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *((void *)a2 - 1);
          uint64_t v23 = *v11;
          if (*(double *)(v22 + 24) < *(double *)(*v11 + 24))
          {
            *double v11 = v22;
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, v11 + 1, (uint64_t *)a2 - 1);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,RayHit **>((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, &v11[v15 >> 1], (uint64_t *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11 + 1, v17 - 1, (uint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v17 - 1, v17, &v11[v16 + 1]);
      uint64_t v18 = *v11;
      *double v11 = *v17;
      *double v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(&v11[v15 >> 1], v11, (uint64_t *)a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(double *)(*(v11 - 1) + 24) >= *(double *)(*v11 + 24))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(v11, (uint64_t *)a2);
      double v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    double v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, v19);
    double v11 = v19 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v19 + 1, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,false>(v10, v19, a3, -v13, a5 & 1);
      double v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v11, (uint64_t *)a2);
  }
  else if (v11 != (uint64_t *)a2)
  {
    while (v10 + 1 != (uint64_t *)a2)
    {
      uint64_t v26 = *v10;
      uint64_t v25 = v10[1];
      long long v24 = ++v10;
      double v27 = *(double *)(v25 + 24);
      if (v27 < *(double *)(v26 + 24))
      {
        do
        {
          uint64_t *v24 = v26;
          uint64_t v26 = *(v24 - 2);
          --v24;
        }
        while (v27 < *(double *)(v26 + 24));
        uint64_t *v24 = v25;
      }
    }
  }
  return result;
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      CMTime v4 = result;
      do
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        CMTime v4 = v2;
        double v7 = *(double *)(v5 + 24);
        if (v7 < *(double *)(v6 + 24))
        {
          uint64_t v8 = v3;
          while (1)
          {
            *(uint64_t *)((char *)result + v8 + 8) = v6;
            if (!v8) {
              break;
            }
            uint64_t v6 = *(uint64_t *)((char *)result + v8 - 8);
            v8 -= 8;
            if (v7 >= *(double *)(v6 + 24))
            {
              CMTime v9 = (uint64_t *)((char *)result + v8 + 8);
              goto LABEL_10;
            }
          }
          CMTime v9 = result;
LABEL_10:
          *CMTime v9 = v5;
        }
        char v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  double v5 = *(double *)(*a2 + 24);
  double v6 = *(double *)(*a1 + 24);
  uint64_t v7 = *a3;
  double v8 = *(double *)(*a3 + 24);
  if (v5 < v6)
  {
    if (v8 < v5)
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*(double *)(*a3 + 24) >= v6) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v8 < v5)
  {
    *a2 = v7;
    *a3 = v3;
    uint64_t v9 = *a1;
    if (*(double *)(*a2 + 24) >= *(double *)(*a1 + 24)) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v9;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  double v3 = *(double *)(*a1 + 24);
  if (v3 >= *(double *)(*(a2 - 1) + 24))
  {
    double v6 = a1 + 1;
    do
    {
      uint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      ++v6;
    }
    while (v3 >= *(double *)(*v4 + 24));
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = v4[1];
      ++v4;
    }
    while (v3 >= *(double *)(v5 + 24));
  }
  if (v4 < a2)
  {
    do
      uint64_t v7 = *--a2;
    while (v3 < *(double *)(v7 + 24));
  }
  if (v4 < a2)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = *a2;
    do
    {
      *uint64_t v4 = v9;
      *a2 = v8;
      do
      {
        uint64_t v10 = v4[1];
        ++v4;
        uint64_t v8 = v10;
      }
      while (v3 >= *(double *)(v10 + 24));
      do
      {
        uint64_t v11 = *--a2;
        uint64_t v9 = v11;
      }
      while (v3 < *(double *)(v11 + 24));
    }
    while (v4 < a2);
  }
  if (v4 - 1 != a1) {
    *a1 = *(v4 - 1);
  }
  *(v4 - 1) = v2;
  return v4;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(void *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  double v4 = *(double *)(*a1 + 24);
  do
    uint64_t v5 = a1[++v2];
  while (*(double *)(v5 + 24) < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  uint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      uint64_t v9 = *--a2;
    }
    while (*(double *)(v9 + 24) >= v4);
  }
  else
  {
    do
      uint64_t v8 = *--a2;
    while (*(double *)(v8 + 24) >= v4);
  }
  if (v6 < (unint64_t)a2)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      *uint64_t v11 = v10;
      *uint64_t v12 = v5;
      do
      {
        uint64_t v13 = v11[1];
        ++v11;
        uint64_t v5 = v13;
      }
      while (*(double *)(v13 + 24) < v4);
      do
      {
        uint64_t v14 = *--v12;
        uint64_t v10 = v14;
      }
      while (*(double *)(v14 + 24) >= v4);
    }
    while (v11 < v12);
    uint64_t v7 = v11 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *uint64_t v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(double *)(v6 + 24) < *(double *)(*a1 + 24))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    double v14 = *(double *)(*v9 + 24);
    if (v14 < *(double *)(*v8 + 24))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(double *)(v13 + 24))
        {
          double v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      double v17 = a1;
LABEL_12:
      *double v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(double *)(*a4 + 24) < *(double *)(*a3 + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(double *)(*a3 + 24) < *(double *)(*a2 + 24))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(double *)(*a2 + 24) < *(double *)(*a1 + 24))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (*(double *)(*a5 + 24) < *(double *)(*a4 + 24))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *a3;
    if (*(double *)(*a4 + 24) < *(double *)(*a3 + 24))
    {
      *a3 = *a4;
      *a4 = v12;
      uint64_t v13 = *a2;
      if (*(double *)(*a3 + 24) < *(double *)(*a2 + 24))
      {
        *a2 = *a3;
        *a3 = v13;
        uint64_t v14 = *a1;
        if (*(double *)(*a2 + 24) < *(double *)(*a1 + 24))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,RayHit **>(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(double *)(*(void *)v14 + 24) < *(double *)(*(void *)a1 + 24))
        {
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        double v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 8 * v17 + 8;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *(double *)(*(void *)v19 + 24) < *(double *)(*((void *)v19 + 1) + 24))
          {
            v19 += 8;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(void *)double v19 = v18;
        }
        else
        {
          *(void *)double v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (void *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *(double *)(*v8 + 24) < *(double *)(v8[1] + 24))
      {
        ++v8;
        uint64_t v7 = v9;
      }
      uint64_t v10 = *v8;
      uint64_t v11 = *a4;
      double v12 = *(double *)(*a4 + 24);
      if (*(double *)(*v8 + 24) >= v12)
      {
        do
        {
          uint64_t v13 = v8;
          *a4 = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 8 * v7);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(double *)(*v8 + 24) < *(double *)(v8[1] + 24))
          {
            ++v8;
            uint64_t v7 = v15;
          }
          uint64_t v10 = *v8;
          a4 = v13;
        }
        while (*(double *)(*v8 + 24) >= v12);
        void *v13 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    int64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    double v10 = *(double *)(v9 + 24);
    if (*(double *)(*v5 + 24) < v10)
    {
      do
      {
        uint64_t v11 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        int64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v11;
      }
      while (*(double *)(*v5 + 24) < v10);
      *uint64_t v11 = v8;
    }
  }
  return result;
}

uint64_t localizedString(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.ozone.framework"];

  return [v4 localizedStringForKey:a1 value:@"** Invalid **" table:a2];
}

void *OZApplication::getCurrentDoc(OZApplication *this)
{
  perThreadDocument();
  uint64_t result = pthread_getspecific(perThreadDocument(void)::result);
  if (!result) {
    return (void *)*((void *)this + 1);
  }
  return result;
}

OZDocument *OZApplication::setCurrentDoc(OZApplication *this, OZDocument *a2)
{
  perThreadDocument();
  uint64_t result = (OZDocument *)pthread_getspecific(perThreadDocument(void)::result);
  if (result) {
    BOOL v5 = result == a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (!result && *((OZDocument **)this + 1) != a2) {
      *((void *)this + 1) = a2;
    }
  }
  else
  {
    perThreadDocument();
    pthread_key_t v6 = perThreadDocument(void)::result;
    return (OZDocument *)pthread_setspecific(v6, a2);
  }
  return result;
}

uint64_t OZApplication::setPerThreadCurrentDoc(OZApplication *this, OZDocument *a2)
{
  perThreadDocument();
  pthread_key_t v3 = perThreadDocument(void)::result;

  return pthread_setspecific(v3, a2);
}

uint64_t OZApplication::documentWillDie(uint64_t this, OZDocument *a2)
{
  if (*(OZDocument **)(this + 8) == a2) {
    *(void *)(this + 8) = 0;
  }
  return this;
}

void perThreadDocument(void)
{
  {
    pthread_key_create((pthread_key_t *)&perThreadDocument(void)::result, (void (__cdecl *)(void *))PCThreadSpecific<OZDocument>::destroy);
  }
}

void sub_1B7C754E0(_Unwind_Exception *a1)
{
}

uint64_t PCThreadSpecific<OZDocument>::destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void OZMaterialCompoundLayer::OZMaterialCompoundLayer(OZMaterialCompoundLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZMaterialLayerBase::OZMaterialLayerBase(this, a2, a3, a4);
  *BOOL v5 = &unk_1F114DEA8;
  v5[2] = &unk_1F114E308;
  PCURL::PCURL((PCURL *)&v7, @"Material Compound Scale");
  OZChannelScale::OZChannelScale((OZMaterialCompoundLayer *)((char *)this + 1224), &v7, (OZChannelFolder *)this, 0x64u, 2u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Compound Translate");
  OZChannelPosition::OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664), &v7, (OZChannelFolder *)this, 0x65u, 2u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Compound Rotate");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 2368), &v7, (OZChannelFolder *)this, 0x66u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Image Placement Mode Enum");
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Placement Mode Label");
  OZChannelEnum::OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520), 0, &v7, &v6, (OZChannelFolder *)this, 0x67u, 2, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Transform Label");
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776), &v7, (OZChannelFolder *)this, 0xC8u, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B7C7573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannel::~OZChannel(v15);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannel2D::~OZChannel2D(v13);
  OZMaterialLayerBase::~OZMaterialLayerBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B7C757A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C757B8()
{
}

void sub_1B7C757C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C757D0()
{
}

void sub_1B7C757D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C757E8()
{
}

void OZMaterialCompoundLayer::OZMaterialCompoundLayer(OZMaterialCompoundLayer *this, const OZMaterialCompoundLayer *a2, OZChannelFolder *a3)
{
  OZMaterialLayerBase::OZMaterialLayerBase(this, (const OZChannelBase *)a2, a3);
  *BOOL v5 = &unk_1F114DEA8;
  v5[2] = &unk_1F114E308;
  OZChannelScale::OZChannelScale((OZChannelScale *)(v5 + 153), (const OZMaterialCompoundLayer *)((char *)a2 + 1224), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664), (const OZMaterialCompoundLayer *)((char *)a2 + 1664), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2368), (const OZChannelBase *)((char *)a2 + 2368), (OZChannelFolder *)this);
  *((void *)this + 296) = &unk_1F11010C0;
  *((void *)this + 298) = &unk_1F1101420;
  OZChannelEnum::OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520), (const OZMaterialCompoundLayer *)((char *)a2 + 2520), (OZChannelFolder *)this);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776), (const OZMaterialCompoundLayer *)((char *)a2 + 2776), (OZChannelFolder *)this);
}

void sub_1B7C75904(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannel::~OZChannel(v4);
  OZChannelPosition::~OZChannelPosition(v3);
  OZChannel2D::~OZChannel2D(v2);
  OZMaterialLayerBase::~OZMaterialLayerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialCompoundLayer::parseEnd(OZMaterialCompoundLayer *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZMaterialLayerBase::parseEnd(this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 1224), 2))
  {
    (*(void (**)(char *, char *, void))(*((void *)this + 596) + 232))((char *)this + 4768, (char *)this + 1360, 0);
    (*(void (**)(char *, char *, void))(*((void *)this + 615) + 232))((char *)this + 4920, (char *)this + 1512, 0);
    (*(void (**)(char *, char *, void))(*((void *)this + 491) + 232))((char *)this + 3928, (char *)this + 1664, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3928), 4096, 0);
    (*(void (**)(char *, char *, void))(*((void *)this + 782) + 232))((char *)this + 6256, (char *)this + 2368, 0);
    (*(void (**)(char *, char *, void))(*((void *)this + 459) + 232))((char *)this + 3672, (char *)this + 2520, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1224), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1224), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1664), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1664), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2368), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2368), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2520), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2520), 0x400000, 0);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZMaterialCompoundLayer::parseEnd(OZMaterialCompoundLayer *this, PCSerializerReadStream *a2)
{
  return OZMaterialCompoundLayer::parseEnd((OZMaterialCompoundLayer *)((char *)this - 16), a2);
}

OZChannelBase *showHideParam(OZChannelBase *a1, int a2)
{
  if (a2) {
    return OZChannelBase::resetFlag(a1, 0x400000, 0);
  }
  else {
    return OZChannelBase::setFlag(a1, 0x400000, 0);
  }
}

BOOL OZMaterialCompoundLayer::isAnySharedTransformEnabled(OZMaterialCompoundLayer *this)
{
  return !OZChannelBase::testFlag((OZChannelBase *)((char *)this + 2776), 0x400000)
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

OZChannelBase *OZMaterialCompoundLayer::updateLocalTransformVisibility(OZMaterialCompoundLayer *this)
{
  return OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility((OZMaterialCompoundLayer *)((char *)this + 2776));
}

OZChannelBase *OZMaterialCompoundLayer::setTransformValuesAsDefaults(OZMaterialCompoundLayer *this)
{
  return OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault((OZChannelBase *)((char *)this + 2776));
}

void OZMaterialCompoundLayer::setSubtypeTags(OZMaterialCompoundLayer *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, void))(*(void *)this + 952))(this, MEMORY[0x1E4F1FA48]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v20 objects:v27 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v21 != v3) {
          objc_enumerationMutation(v1);
        }
        BOOL v5 = (void *)[*(id *)(*((void *)&v20 + 1) + 8 * i) objectForKey:@"tag"];
        if (!v5)
        {
          uint64_t v25 = (char *)__p;
          goto LABEL_27;
        }
        int v6 = [v5 intValue];
        int v7 = v6;
        uint64_t v8 = v25;
        if (v25 >= v26)
        {
          double v10 = (char *)__p;
          uint64_t v11 = (v25 - (unsigned char *)__p) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v26 - (unsigned char *)__p;
          if ((v26 - (unsigned char *)__p) >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v26, v14);
            double v10 = (char *)__p;
            uint64_t v8 = v25;
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[4 * v11];
          *(_DWORD *)uint64_t v16 = v7;
          uint64_t v9 = v16 + 4;
          while (v8 != v10)
          {
            int v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          __p = v16;
          uint64_t v25 = v9;
          uint64_t v26 = &v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v25 = v6;
          uint64_t v9 = v8 + 4;
        }
        uint64_t v25 = v9;
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v20 objects:v27 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_27:
  uint64_t v18 = v25;
  if (v25 != __p)
  {
    OZChannelEnum::setTags((OZMaterialCompoundLayer *)((char *)this + 936), (char *)__p, (unint64_t)(v25 - (unsigned char *)__p) >> 2);
    uint64_t v18 = (char *)__p;
  }
  if (v18)
  {
    uint64_t v25 = v18;
    operator delete(v18);
  }
}

void sub_1B7C75E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL OZMaterialCompoundLayer::getShouldRotateSide(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E4F1FA48], 0.0))
  {
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    uint64_t v5 = ObjectManipulator - 16;
    if (!ObjectManipulator) {
      uint64_t v5 = 0;
    }
    int v6 = (OZChannel *)(v5 + 2464);
  }
  else
  {
    int v6 = (OZChannel *)((char *)this + 3672);
  }
  return OZChannel::getValueAsInt(v6, a2, 0.0) == 0;
}

BOOL OZMaterialCompoundLayer::getUseTriplanarMapping(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E4F1FA48], 0.0))
  {
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    uint64_t v5 = ObjectManipulator - 16;
    if (!ObjectManipulator) {
      uint64_t v5 = 0;
    }
    int v6 = (OZChannel *)(v5 + 2464);
  }
  else
  {
    int v6 = (OZChannel *)((char *)this + 3672);
  }
  return OZChannel::getValueAsInt(v6, a2, 0.0) != 2;
}

void *OZMaterialCompoundLayer::setUpTexture(uint64_t a1, float *a2, uint64_t *a3, unsigned int a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10, const void *a11, int a12)
{
  uint64_t v16 = *(void *)a2;
  int v17 = *(_DWORD *)(*(void *)a2 + 588);
  if (*(_DWORD *)(*(void *)a2 + 584) <= v17) {
    int v18 = (2 * (v17 + 1)) | 1;
  }
  else {
    int v18 = *(_DWORD *)(*(void *)a2 + 584);
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((void *)(*(void *)a2 + 576), v17 + 1, v18);
  uint64_t v19 = *(void *)(v16 + 592) + 152 * *(int *)(v16 + 588);
  *(void *)(v19 - 152) = *(void *)(a8 + 16);
  ProShade::Value::set(v19 - 144, (const PCString *)3, 7, a11);
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v16, *(const ProShade::SamplerNode **)(a7 + 16));
  int v21 = *(_DWORD *)(SamplerInfo + 328);
  int v22 = *(_DWORD *)(SamplerInfo + 336);
  uint64_t v23 = LiMaterial::obtainSamplerInfo((os_unfair_lock_s *)v16, *(const ProShade::SamplerNode **)(a7 + 16));
  *(unsigned char *)(v23 + 316) = 1;
  *(unsigned char *)(v23 + 317) = a10;
  *(unsigned char *)(v23 + 318) = a9;
  *(unsigned char *)(v23 + 319) = 0;
  *(void *)(v23 + 320) = 1;
  *(_DWORD *)(v23 + 328) = v21;
  *(_DWORD *)(v23 + 332) = a12;
  *(unsigned char *)(v23 + 338) = BYTE2(v22);
  *(_WORD *)(v23 + 336) = v22;
  *(unsigned char *)(v23 + 312) = 1;
  v24.f64[0] = a2[31];

  return OZMaterialCompoundLayer::setUpSampler(v24, v23, (uint64_t *)a2, a3, a7, a4, a5, a6);
}

void *OZMaterialCompoundLayer::setUpSampler(float64x2_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int a6, unsigned int a7, char a8)
{
  uint64_t v13 = *a3;
  uint64_t v34 = 0x3FF0000000000000;
  unint64_t v31 = 0x3FF0000000000000;
  unint64_t v28 = 0x3FF0000000000000;
  unint64_t v25 = 0x3FF0000000000000;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  if (a1.f64[0] != 1.0)
  {
    unint64_t v25 = *(void *)&a1.f64[0];
    *(double *)&long long v26 = a1.f64[0] * 0.0;
    *((double *)&v26 + 1) = a1.f64[0] * 0.0;
    *(double *)&long long v27 = a1.f64[0] * 0.0;
    *((double *)&v27 + 1) = a1.f64[0] * 0.0;
    unint64_t v28 = *(void *)&a1.f64[0];
    *(double *)&long long v29 = a1.f64[0] * 0.0;
    *((double *)&v29 + 1) = a1.f64[0] * 0.0;
    *(double *)&long long v30 = a1.f64[0] * 0.0;
    *((double *)&v30 + 1) = a1.f64[0] * 0.0;
    unint64_t v31 = *(void *)&a1.f64[0];
    *(double *)&long long v32 = a1.f64[0] * 0.0;
  }
  double v14 = (double)a6;
  a1.f64[0] = (double)a6 * 0.5;
  double v15 = (double)a7;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v25, a1, (double)a7 * 0.5, 0.0);
  LiMaterial::setTexture((os_unfair_lock_s *)v13, a5, a4, a8, (uint64_t)&v25);
  float v16 = v14 * -0.5;
  float v17 = v15 * -0.5;
  int v18 = *(_DWORD *)(v13 + 588);
  if (*(_DWORD *)(v13 + 584) <= v18) {
    int v19 = (2 * (v18 + 1)) | 1;
  }
  else {
    int v19 = *(_DWORD *)(v13 + 584);
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((void *)(v13 + 576), v18 + 1, v19);
  uint64_t v20 = *(void *)(v13 + 592) + 152 * *(int *)(v13 + 588);
  *(void *)(v20 - 152) = *(void *)(a5 + 48);
  v35[0] = v16;
  v35[1] = v17;
  v35[2] = (float)a6;
  v35[3] = (float)a7;
  ProShade::Value::set(v20 - 144, (const PCString *)3, 4, v35);
  int v21 = *(_DWORD *)(v13 + 588);
  if (*(_DWORD *)(v13 + 584) <= v21) {
    int v22 = (2 * (v21 + 1)) | 1;
  }
  else {
    int v22 = *(_DWORD *)(v13 + 584);
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((void *)(v13 + 576), v21 + 1, v22);
  uint64_t v23 = *(void *)(v13 + 592) + 152 * *(int *)(v13 + 588);
  *(void *)(v23 - 152) = *(void *)(a5 + 80);
  return ProShade::Value::set(v23 - 144, (const PCString *)3, 7, &v25);
}

void OZMaterialCompoundLayer::createDiffuseGradientLayer()
{
}

void sub_1B7C7648C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZMaterialCompoundLayer::createDiffuseLayer()
{
}

void sub_1B7C769E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,uint64_t a33,uint64_t a34,CGColorSpace *a35)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  PCSharedCount::~PCSharedCount(v35);
  _Unwind_Resume(a1);
}

double OZMaterialCompoundLayer::getTextureTransform(OZChannelBase *a1, uint64_t a2, const CMTime *a3, float64x2_t *a4, unsigned int *a5, float a6)
{
  uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
  if (ObjectManipulator) {
  else
  }
    uint64_t v13 = 0;
  uint64_t SequenceChannels = OZMaterialLayerBase::getSequenceChannels(a1);
  BOOL v15 = *(double *)(a2 + 104) != -1.0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)SequenceChannels + 736))(SequenceChannels);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)SequenceChannels + 744))(SequenceChannels);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)SequenceChannels + 752))(SequenceChannels);
  LOBYTE(v20) = *(unsigned char *)(a2 + 120);
  MaterialTextureTransformer::composeTextureTransform(a3, (uint64_t)&a1[24].var11, (uint64_t)v13, v15, v16, v17, v18, (int)*(double *)(a2 + 104), *(double *)(a2 + 40), v20, a4, a5);

  *(void *)&double result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftScale(a4, a6, a6, 1.0);
  return result;
}

void OZMaterialCompoundLayer::createBumpLayer()
{
}

void sub_1B7C77488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_unfair_lock_s *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  PCURL::~PCURL((PCURL *)&a26);
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void OZMaterialCompoundLayer::createAbsorbLayer()
{
}

void sub_1B7C779B8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZMaterialCompoundLayer::createSpecularLayer()
{
}

void sub_1B7C77DB0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t SpecularMaterialLayer::ReplaceSpecularColor::ReplaceSpecularColor(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = &unk_1F1199AC8;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  uint64_t v2 = off_1F1122CF0;
  uint64_t v3 = off_1F1122CF8;
  *(void *)double result = off_1F1122CF8;
  unint64_t v4 = off_1F1122D08;
  *(void *)((char *)*(v3 - 3) + result) = off_1F1122D00;
  *(void *)double result = v2;
  *(void *)(result + *(v2 - 3)) = v4;
  *(void *)double result = &unk_1F1122C88;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = &unk_1F1122CD0;
  return result;
}

uint64_t OZMaterialCompoundLayer::getColorChannel(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  return 0;
}

double OZMaterialCompoundLayer::getOpacity()
{
  return 1.0;
}

uint64_t OZMaterialCompoundLayer::appendDiffuseLayer(OZMaterialCompoundLayer *a1, const char *a2, const CMTime *a3, NSDictionary *a4)
{
  uint64_t v8 = OZGetImageAsset(a4, a2);
  id v9 = [(NSDictionary *)a4 objectForKey:@"blend mode"];
  id v10 = [(NSDictionary *)a4 objectForKey:@"scale"];
  if (v10)
  {
    [v10 doubleValue];
    float v12 = v11;
  }
  else
  {
    float v12 = 1.0;
  }
  id v13 = [(NSDictionary *)a4 objectForKey:@"brightness"];
  if (v13)
  {
    [v13 doubleValue];
    double v15 = v14;
    if (!v9) {
      goto LABEL_9;
    }
  }
  else
  {
    double v15 = 1.0;
    if (!v9)
    {
LABEL_9:
      uint64_t v16 = 2;
      goto LABEL_10;
    }
  }
  if ([v9 isEqualToString:@"over"]) {
    goto LABEL_9;
  }
  if ([v9 isEqualToString:@"multiply"])
  {
    uint64_t v16 = 5;
  }
  else if ([v9 isEqualToString:@"simple multiply"])
  {
    uint64_t v16 = 6;
  }
  else if ([v9 isEqualToString:@"over white multiply"])
  {
    uint64_t v16 = 7;
  }
  else if ([v9 isEqualToString:@"over black screen"])
  {
    uint64_t v16 = 8;
  }
  else
  {
    uint64_t v16 = 2;
  }
LABEL_10:
  id v17 = [(NSDictionary *)a4 objectForKey:@"rotate side"];
  if (v17 && [v17 BOOLValue]) {
    BOOL ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  }
  else {
    BOOL ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  }
  double v19 = (*(double (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(void *)a1 + 1008))(a1, a4, a3, a2);
  uint64_t v20 = (*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(void *)a1 + 1000))(a1, a3);
  uint64_t v21 = (*(uint64_t (**)(OZMaterialCompoundLayer *))(*(void *)a1 + 1024))(a1);
  int v22 = *(uint64_t (**)(OZMaterialCompoundLayer *, const char *, const CMTime *, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, __n128, __n128, __n128))(*(void *)a1 + 1040);
  v23.n128_f64[0] = v19;
  v24.n128_f32[0] = v12;
  v25.n128_f64[0] = v15;

  return v22(a1, a2, a3, v20, v21, v8, v16, ShouldRotateSide, v23, v24, v25);
}

uint64_t OZMaterialCompoundLayer::getGradientChannel(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  return 0;
}

uint64_t OZMaterialCompoundLayer::getMetalShinyPercentChannel(OZMaterialCompoundLayer *this)
{
  return 0;
}

double OZMaterialCompoundLayer::getSpecularShininess(OZMaterialCompoundLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 0.75;
}

double OZMaterialCompoundLayer::getSpecularIntensity(OZMaterialCompoundLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 1.0;
}

void OZMaterialCompoundLayer::appendSpecularLayer(OZMaterialCompoundLayer *a1, uint64_t a2, const CMTime *a3, void *a4)
{
  uint64_t v8 = (void *)[a4 objectForKey:@"viewDependent"];
  double v9 = (*(double (**)(OZMaterialCompoundLayer *, void *, const CMTime *))(*(void *)a1 + 984))(a1, a4, a3);
  id v10 = (void *)[a4 objectForKey:@"specular intensity"];
  if (v10)
  {
    [v10 doubleValue];
    double v9 = v11;
  }
  double v12 = (*(double (**)(OZMaterialCompoundLayer *, void *, const CMTime *))(*(void *)a1 + 976))(a1, a4, a3);
  id v13 = (void *)[a4 objectForKey:@"specular shininess"];
  if (v13)
  {
    [v13 doubleValue];
    double v12 = v14;
  }
  double v15 = (void *)[a4 objectForKey:@"metallic"];
  if (v15)
  {
    [v15 doubleValue];
    uint64_t v17 = v16;
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v17 = 0x3FC999999999999ALL;
  if (v8) {
LABEL_7:
  }
    uint64_t v8 = (void *)[v8 BOOLValue];
LABEL_8:
  uint64_t v18 = (void *)[a4 objectForKey:@"scale"];
  if (v18)
  {
    [v18 doubleValue];
    double v20 = v19;
  }
  else
  {
    double v20 = 1.0;
  }
  uint64_t v21 = (void *)[a4 objectForKey:@"shininess uses intensity"];
  if (v21) {
    int v22 = [v21 BOOLValue];
  }
  else {
    int v22 = 0;
  }
  __n128 v23 = (void *)[a4 objectForKey:@"rotate side"];
  if (!v23 || ![v23 BOOLValue])
  {
    BOOL ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  BOOL ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  if (v8)
  {
LABEL_21:
    __n128 v25 = (OZChannel *)(*(uint64_t (**)(OZMaterialCompoundLayer *))(*(void *)a1 + 1016))(a1);
    OZChannel::getValueAsDouble(v25, a3, 0.0);
    double v12 = v26;
  }
LABEL_22:
  uint64_t v27 = (*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(void *)a1 + 992))(a1, a3);
  (*(void (**)(PCSharedCount *__return_ptr, OZMaterialCompoundLayer *, uint64_t, const CMTime *, uint64_t, void *, BOOL, double, double))(*(void *)a1 + 1056))(&v116, a1, a2, a3, v27, v8, ShouldRotateSide, v9, v12);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v100, &v116);
  unint64_t v28 = (void *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, (uint64_t)&v100);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v101);
  long long v29 = *(os_unfair_lock_s **)a2;
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  signed int os_unfair_lock_opaque = v29[147]._os_unfair_lock_opaque;
  if ((signed int)v29[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque) {
    int v31 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  }
  else {
    int v31 = v29[146]._os_unfair_lock_opaque;
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v29[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v31);
  uint64_t v32 = *(void *)&v29[148]._os_unfair_lock_opaque + 152 * (int)v29[147]._os_unfair_lock_opaque;
  *(void *)(v32 - 152) = v28[34];
  v100.CMTime var0 = (PC_Sp_counted_base *)v17;
  ProShade::Value::set(v32 - 144, (const PCString *)3, 1, &v100);
  long long v33 = (void *)[a4 objectForKey:@"anisotropic"];
  if (v33) {
    int v34 = [v33 BOOLValue];
  }
  else {
    int v34 = 0;
  }
  if (!v116.var0) {
    throw_PCNullPointerException(1);
  }
  if (v34) {
    int v35 = 0;
  }
  else {
    int v35 = 3;
  }
  *((_DWORD *)v116.var0 + 16) = v35;
  if (v34)
  {
    long long v36 = (void *)[a4 objectForKey:@"grooviness"];
    if (v36)
    {
      [v36 doubleValue];
      uint64_t v38 = v37;
    }
    else
    {
      uint64_t v38 = 0;
    }
    float64x2_t v118 = 0uLL;
    v119.f64[0] = 0.0;
    uint64_t v109 = 0x3FF0000000000000;
    uint64_t v106 = 0x3FF0000000000000;
    uint64_t v103 = 0x3FF0000000000000;
    v100.CMTime var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    v113[1] = 0.0;
    v113[2] = 0.0;
    v113[0] = 1.0;
    CMTime v115 = 0;
    long long v114 = 0uLL;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v100, v113, (double *)&v114);
    long long v98 = v114;
    uint64_t v99 = v115;
    double v39 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v40 = v39[147]._os_unfair_lock_opaque;
    if ((signed int)v39[146]._os_unfair_lock_opaque <= v40) {
      int v41 = (2 * (v40 + 1)) | 1;
    }
    else {
      int v41 = v39[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v39[144]._os_unfair_lock_opaque, v40 + 1, v41);
    uint64_t v42 = *(void *)&v39[148]._os_unfair_lock_opaque + 152 * (int)v39[147]._os_unfair_lock_opaque;
    *(void *)(v42 - 152) = v28[206];
    ProShade::Value::set(v42 - 144, (const PCString *)3, 3, &v98);
    uint64_t v43 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v44 = v43[147]._os_unfair_lock_opaque;
    if ((signed int)v43[146]._os_unfair_lock_opaque <= v44) {
      int v45 = (2 * (v44 + 1)) | 1;
    }
    else {
      int v45 = v43[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v43[144]._os_unfair_lock_opaque, v44 + 1, v45);
    uint64_t v46 = *(void *)&v43[148]._os_unfair_lock_opaque + 152 * (int)v43[147]._os_unfair_lock_opaque;
    *(void *)(v46 - 152) = v28[202];
    ProShade::Value::set(v46 - 144, (const PCString *)3, 3, &v118);
    double v47 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v48 = v47[147]._os_unfair_lock_opaque;
    if ((signed int)v47[146]._os_unfair_lock_opaque <= v48) {
      int v49 = (2 * (v48 + 1)) | 1;
    }
    else {
      int v49 = v47[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v47[144]._os_unfair_lock_opaque, v48 + 1, v49);
    uint64_t v50 = *(void *)&v47[148]._os_unfair_lock_opaque + 152 * (int)v47[147]._os_unfair_lock_opaque;
    *(void *)(v50 - 152) = v28[210];
    *(void *)&long long v114 = v38;
    ProShade::Value::set(v50 - 144, (const PCString *)3, 1, &v114);
  }
  float v51 = v20;
  uint64_t v109 = 0x3FF0000000000000;
  uint64_t v106 = 0x3FF0000000000000;
  uint64_t v103 = 0x3FF0000000000000;
  v100.CMTime var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  OZMaterialCompoundLayer::getTextureTransform((OZChannelBase *)a1, a2, a3, (float64x2_t *)&v100, &v110, v51);
  BOOL v111 = ShouldRotateSide;
  BOOL UseTriplanarMapping = OZMaterialCompoundLayer::getUseTriplanarMapping(a1, a3);
  if (OZGetSpecularIntensityAsset(a4, v52))
  {
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v98, &v116);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v98 + 1);
    double v54 = (void *)[a4 objectForKey:@"specular intensity black point"];
    if (v54)
    {
      [v54 doubleValue];
      uint64_t v56 = v55;
    }
    else
    {
      uint64_t v56 = 0;
    }
    int v57 = objc_msgSend(a4, "objectForKey:", @"specular intensity white point", (void)v98);
    if (v57)
    {
      [v57 doubleValue];
      double v59 = v58;
    }
    else
    {
      double v59 = 1.0;
    }
    double v60 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v61 = v60[147]._os_unfair_lock_opaque;
    if ((signed int)v60[146]._os_unfair_lock_opaque <= v61) {
      int v62 = (2 * (v61 + 1)) | 1;
    }
    else {
      int v62 = v60[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v60[144]._os_unfair_lock_opaque, v61 + 1, v62);
    uint64_t v63 = *(void *)&v60[148]._os_unfair_lock_opaque + 152 * (int)v60[147]._os_unfair_lock_opaque;
    *(void *)(v63 - 152) = v28[138];
    *(void *)&long long v98 = v56;
    ProShade::Value::set(v63 - 144, (const PCString *)3, 1, &v98);
    double v64 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v65 = v64[147]._os_unfair_lock_opaque;
    if ((signed int)v64[146]._os_unfair_lock_opaque <= v65) {
      int v66 = (2 * (v65 + 1)) | 1;
    }
    else {
      int v66 = v64[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v64[144]._os_unfair_lock_opaque, v65 + 1, v66);
    uint64_t v67 = *(void *)&v64[148]._os_unfair_lock_opaque + 152 * (int)v64[147]._os_unfair_lock_opaque;
    *(void *)(v67 - 152) = v28[142];
    *(double *)&long long v98 = v59;
    ProShade::Value::set(v67 - 144, (const PCString *)3, 1, &v98);
    double v68 = *(os_unfair_lock_s **)a2;
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    signed int v69 = v68[147]._os_unfair_lock_opaque;
    if ((signed int)v68[146]._os_unfair_lock_opaque <= v69) {
      int v70 = (2 * (v69 + 1)) | 1;
    }
    else {
      int v70 = v68[146]._os_unfair_lock_opaque;
    }
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v68[144]._os_unfair_lock_opaque, v69 + 1, v70);
    uint64_t v71 = *(void *)&v68[148]._os_unfair_lock_opaque + 152 * (int)v68[147]._os_unfair_lock_opaque;
    *(void *)(v71 - 152) = v28[26];
    *(double *)&long long v98 = v9;
    ProShade::Value::set(v71 - 144, (const PCString *)3, 1, &v98);
  }
  if (v22)
  {
    if (!v116.var0) {
      throw_PCNullPointerException(1);
    }
    *((unsigned char *)v116.var0 + 69) = 1;
  }
  else
  {
    OZGetSpecularShininessAsset(a4, v53);
  }
  uint64_t v72 = objc_msgSend(a4, "objectForKey:", @"specular shininess black point", (void)v98);
  if (v72)
  {
    [v72 doubleValue];
    uint64_t v74 = v73;
  }
  else
  {
    uint64_t v74 = 0;
  }
  double v75 = (void *)[a4 objectForKey:@"specular shininess white point"];
  if (v75)
  {
    [v75 doubleValue];
    double v77 = v76;
  }
  else
  {
    double v77 = 1.0;
  }
  double v78 = *(os_unfair_lock_s **)a2;
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  signed int v79 = v78[147]._os_unfair_lock_opaque;
  if ((signed int)v78[146]._os_unfair_lock_opaque <= v79) {
    int v80 = (2 * (v79 + 1)) | 1;
  }
  else {
    int v80 = v78[146]._os_unfair_lock_opaque;
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v78[144]._os_unfair_lock_opaque, v79 + 1, v80);
  uint64_t v81 = *(void *)&v78[148]._os_unfair_lock_opaque + 152 * (int)v78[147]._os_unfair_lock_opaque;
  *(void *)(v81 - 152) = v28[118];
  *(void *)&long long v98 = v74;
  ProShade::Value::set(v81 - 144, (const PCString *)3, 1, &v98);
  PCSharedCount v82 = *(os_unfair_lock_s **)a2;
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  signed int v83 = v82[147]._os_unfair_lock_opaque;
  if ((signed int)v82[146]._os_unfair_lock_opaque <= v83) {
    int v84 = (2 * (v83 + 1)) | 1;
  }
  else {
    int v84 = v82[146]._os_unfair_lock_opaque;
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v82[144]._os_unfair_lock_opaque, v83 + 1, v84);
  uint64_t v85 = *(void *)&v82[148]._os_unfair_lock_opaque + 152 * (int)v82[147]._os_unfair_lock_opaque;
  *(void *)(v85 - 152) = v28[122];
  *(double *)&long long v98 = v77;
  ProShade::Value::set(v85 - 144, (const PCString *)3, 1, &v98);
  long long v86 = *(os_unfair_lock_s **)a2;
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  signed int v87 = v86[147]._os_unfair_lock_opaque;
  if ((signed int)v86[146]._os_unfair_lock_opaque <= v87) {
    int v88 = (2 * (v87 + 1)) | 1;
  }
  else {
    int v88 = v86[146]._os_unfair_lock_opaque;
  }
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v86[144]._os_unfair_lock_opaque, v87 + 1, v88);
  uint64_t v89 = *(void *)&v86[148]._os_unfair_lock_opaque + 152 * (int)v86[147]._os_unfair_lock_opaque;
  *(void *)(v89 - 152) = v28[30];
  *(double *)&long long v98 = v12;
  ProShade::Value::set(v89 - 144, (const PCString *)3, 1, &v98);
  __int16 v90 = (void *)[a4 objectForKey:@"color model"];
  PCSharedCount v91 = v90;
  if (v90)
  {
    if (([v90 isEqualToString:@"surface"] & 1) == 0)
    {
      if ([v91 isEqualToString:@"solid"])
      {
        WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
        PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v98, 1.0, 1.0, 1.0, 1.0, WorkingColorSpace);
        int v93 = *(os_unfair_lock_s **)a2;
        if (!*(void *)a2) {
          throw_PCNullPointerException(1);
        }
        long long v94 = v98;
        signed int v95 = v93[147]._os_unfair_lock_opaque;
        if ((signed int)v93[146]._os_unfair_lock_opaque <= v95) {
          int v96 = (2 * (v95 + 1)) | 1;
        }
        else {
          int v96 = v93[146]._os_unfair_lock_opaque;
        }
        PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v93[144]._os_unfair_lock_opaque, v95 + 1, v96);
        uint64_t v97 = *(void *)&v93[148]._os_unfair_lock_opaque + 152 * (int)v93[147]._os_unfair_lock_opaque;
        *(void *)(v97 - 152) = v28[2];
        float64x2_t v118 = vcvtq_f64_f32(*(float32x2_t *)&v94);
        float64x2_t v119 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v94 + 8));
        ProShade::Value::set(v97 - 144, (const PCString *)3, 4, &v118);
        PCCFRef<CGColorSpace *>::~PCCFRef(&v99);
      }
      else
      {
        [v91 isEqualToString:@"image"];
      }
    }
    operator new();
  }
  PCSharedCount::~PCSharedCount(&v117);
}

void sub_1B7C78D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v3 - 152));
  _Unwind_Resume(a1);
}

double OZMaterialCompoundLayer::getBumpGain()
{
  return 1.0;
}

uint64_t OZMaterialCompoundLayer::getBumpInvert()
{
  return 0;
}

void OZMaterialCompoundLayer::appendBumpLayer(OZMaterialCompoundLayer *a1, const char *a2, const CMTime *a3, NSDictionary *a4)
{
  uint64_t v8 = OZGetImageAsset(a4, a2);
  id v9 = [(NSDictionary *)a4 objectForKey:@"inserts"];
  id v10 = [(NSDictionary *)a4 objectForKey:@"scale"];
  if (v10)
  {
    [v10 doubleValue];
    float v12 = v11;
  }
  else
  {
    float v12 = 1.0;
  }
  int v13 = objc_msgSend(-[NSDictionary objectForKey:](a4, "objectForKey:", @"map type"), "isEqualToString:", @"normal map");
  id v14 = [(NSDictionary *)a4 objectForKey:@"rotate side"];
  if (v14 && [v14 BOOLValue]) {
    BOOL ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  }
  else {
    BOOL ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  }
  double v16 = (*(double (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(void *)a1 + 960))(a1, a4, a3, a2);
  uint64_t v17 = (*(uint64_t (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(void *)a1 + 968))(a1, a4, a3, a2);
  (*(void (**)(uint64_t *__return_ptr, OZMaterialCompoundLayer *, const char *, const CMTime *, uint64_t, uint64_t, id, BOOL, void, double, float))(*(void *)a1 + 1088))(&v18, a1, a2, a3, v17, v8, v9, ShouldRotateSide, v13 ^ 1u, v16, v12);
  PCSharedCount::~PCSharedCount(&v19);
}

uint64_t OZMaterialCompoundLayer::appendAbsorbLayer(uint64_t a1, const char *a2, uint64_t a3, NSDictionary *a4)
{
  uint64_t v8 = OZGetImageAsset(a4, a2);
  id v9 = [(NSDictionary *)a4 objectForKey:@"scale"];
  if (v9)
  {
    [v9 doubleValue];
    float v11 = v10;
  }
  else
  {
    float v11 = 1.0;
  }
  id v12 = [(NSDictionary *)a4 objectForKey:@"black point"];
  if (v12)
  {
    [v12 doubleValue];
    float v14 = v13;
  }
  else
  {
    float v14 = 0.0;
  }
  id v15 = [(NSDictionary *)a4 objectForKey:@"white point"];
  if (v15)
  {
    [v15 doubleValue];
    v19.n128_f32[0] = v16.n128_f64[0];
  }
  else
  {
    v19.n128_u32[0] = 1.0;
  }
  double v20 = *(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 1096);
  v17.n128_u32[0] = 1.0;
  v16.n128_f32[0] = v11;
  v18.n128_f32[0] = v14;

  return v20(a1, a2, a3, v8, v16, v17, v18, v19);
}

uint64_t OZMaterialCompoundLayer::getCurrentLayers(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), a2, 0.0);
  uint64_t v5 = *((void *)this + 139);
  uint64_t v6 = *((void *)this + 138);
  int v7 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(void *)this + 952))(this, a2);
  uint64_t v8 = v7;
  if (v5 == v6)
  {
    if ([v7 count] > (unint64_t)ValueAsInt)
    {
LABEL_13:
      if (ValueAsInt != -1) {
        return objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", ValueAsInt), "objectForKey:", @"layers");
      }
    }
    return 0;
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t result = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (result)
    {
      uint64_t v10 = result;
      int v11 = 0;
      uint64_t v12 = *(void *)v16;
      while (2)
      {
        uint64_t v13 = 0;
        int v14 = v11 + v10;
        do
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(v8);
          }
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * v13), "objectForKey:", @"tag"), "intValue") == ValueAsInt)
          {
            int ValueAsInt = v11 + v13;
            goto LABEL_13;
          }
          ++v13;
        }
        while (v10 != v13);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        uint64_t result = 0;
        int v11 = v14;
        if (v10) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t OZMaterialCompoundLayer::collectInternalTexturesFromLayeredMaterial@<X0>(OZMaterialCompoundLayer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, void))(*(void *)this + 944))(this, MEMORY[0x1E4F1FA48]);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t result = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v19;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = OZCreateURLForAssetLayer(*(NSDictionary **)(*((void *)&v18 + 1) + 8 * v7));
        if (v8)
        {
          id v23 = v8;
          uint64_t v10 = (void *)a2[1];
          unint64_t v9 = a2[2];
          if ((unint64_t)v10 >= v9)
          {
            uint64_t v12 = ((uint64_t)v10 - *a2) >> 3;
            if ((unint64_t)(v12 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v13 = v9 - *a2;
            uint64_t v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
              uint64_t v14 = v12 + 1;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            v22[4] = a2 + 2;
            if (v15)
            {
              long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v15);
              id v8 = v23;
            }
            else
            {
              long long v16 = 0;
            }
            long long v17 = &v16[8 * v12];
            v22[0] = v16;
            v22[1] = v17;
            v22[3] = &v16[8 * v15];
            *(void *)long long v17 = v8;
            id v23 = 0;
            v22[2] = v17 + 8;
            std::vector<PCNSRef<NSURL *>>::__swap_out_circular_buffer(a2, v22);
            int v11 = (void *)a2[1];
            std::__split_buffer<PCNSRef<NSURL *>>::~__split_buffer((uint64_t)v22);
          }
          else
          {
            *uint64_t v10 = v8;
            int v11 = v10 + 1;
            id v23 = 0;
            a2[1] = (uint64_t)v11;
          }
          a2[1] = (uint64_t)v11;
          ProCore_Impl::PCNSRefImpl::release(&v23);
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B7C794A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialCompoundLayer::appendLayersToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(long long **)(a2 + 16);
  uint64_t v3 = *((void *)v2 + 2);
  long long v5 = *v2;
  uint64_t v6 = v3;
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 944))(a1, &v5);
}

uint64_t std::vector<PCNSRef<NSURL *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 8);
      v9 -= 8;
      *(void *)(v7 - 8) = v10;
      ProCore_Impl::PCNSRefImpl::retain((id *)(v7 - 8));
      uint64_t v7 = *((void *)&v16 + 1) - 8;
      *((void *)&v16 + 1) -= 8;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B7C79688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

id *std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

id *std::__allocator_destroy[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(id **)(a2 + 32); result != *(id **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    ProCore_Impl::PCNSRefImpl::release(result);
    uint64_t result = (id *)(*(void *)(a2 + 32) + 8);
  }
  return result;
}

uint64_t std::__split_buffer<PCNSRef<NSURL *>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<PCNSRef<NSURL *>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 8;
    ProCore_Impl::PCNSRefImpl::release((id *)(v4 - 8));
  }
}

void OZStyle::OZStyle(OZStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  *(void *)this = &unk_1F1139198;
  *((void *)this + 1) = a2;
  uint64_t v7 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZStyle *)((char *)this + 32));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)this = &unk_1F114E378;
  *((void *)this + 2) = &unk_1F114E4A0;
  *((void *)this + 6) = &unk_1F114E6F8;
  OZChannelObjectRoot::OZChannelObjectRoot((OZStyle *)((char *)this + 72), a3, 0, a4, 0x20u);
  PCURL::PCURL((PCURL *)&v8, @"Material Randomize Seed Channel");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 328), (const PCString *)&v8, (OZChannelFolder *)((char *)this + 72), 0x12Du, 0, 0, 0);
  PCString::~PCString((PCString *)&v8);
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 35) = v7;
  long long v8 = *MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v10 = v8;
  uint64_t v11 = v9;
  OZChannelObjectRootBase::setTimeExtent((OZStyle *)((char *)this + 72), (const PCTimeRange *)&v8, 0);
}

void sub_1B7C799AC(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[61] = v7;
    operator delete(v7);
  }
  OZChannel::~OZChannel(v4);
  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  long long v8 = (std::__shared_weak_count *)v1[8];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  v1[2] = &unk_1F1138080;
  uint64_t v9 = v1[3];
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    v1[3] = 0;
  }
  _Unwind_Resume(a1);
}

void OZStyle::OZStyle(OZStyle *this, const OZStyle *a2, char a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)this = &unk_1F1139198;
  *((void *)this + 1) = v6;
  uint64_t v7 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZStyle *)((char *)this + 32));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)this = &unk_1F114E378;
  *((void *)this + 2) = &unk_1F114E4A0;
  *((void *)this + 6) = &unk_1F114E6F8;
  OZChannelObjectRoot::OZChannelObjectRoot((OZStyle *)((char *)this + 72), (const OZStyle *)((char *)a2 + 72), 0);
  OZChannel::OZChannel((OZChannel *)((char *)this + 328), (const OZChannelBase *)((char *)a2 + 328), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 41) = &unk_1F1102B70;
  *((void *)this + 43) = &unk_1F1102ED0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 63) = *((void *)a2 + 63);
  *((void *)this + 35) = v7;
  if ((a3 & 2) != 0)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v8);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 72), NextUniqueID);
  }
}

void sub_1B7C79BAC(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  if (*v3)
  {
    v1[61] = v6;
    operator delete(v6);
  }
  OZChannel::~OZChannel(v4);
  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  uint64_t v7 = (std::__shared_weak_count *)v1[8];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  v1[2] = &unk_1F1138080;
  uint64_t v8 = v1[3];
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    v1[3] = 0;
  }
  _Unwind_Resume(a1);
}

void OZStyle::OZStyle(OZStyle *this, const OZStyle *a2, OZSceneNode *a3, char a4)
{
  OZStyle::OZStyle(this, a2, a4);
  *(void *)(v5 + 504) = a3;
}

void OZStyle::~OZStyle(OZStyle *this)
{
  *(void *)this = &unk_1F114E378;
  *((void *)this + 2) = &unk_1F114E4A0;
  *((void *)this + 6) = &unk_1F114E6F8;
  uint64_t v2 = (void *)*((void *)this + 60);
  if (v2)
  {
    *((void *)this + 61) = v2;
    operator delete(v2);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 328));
  OZChannelObjectRoot::~OZChannelObjectRoot((OZStyle *)((char *)this + 72));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 2) = &unk_1F1138080;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *((void *)this + 3) = 0;
  }
}

uint64_t OZStyle::deleteThis(OZStyle *this, OZChannelBase *a2)
{
  return (*(uint64_t (**)(void, OZChannelBase *))(**((void **)this + 63) + 608))(*((void *)this + 63), a2);
}

uint64_t non-virtual thunk to'OZStyle::deleteThis(OZStyle *this, OZChannelBase *a2)
{
  return (*(uint64_t (**)(void, OZChannelBase *))(**((void **)this + 61) + 608))(*((void *)this + 61), a2);
}

uint64_t OZStyle::getScene(OZStyle *this)
{
  uint64_t result = *((void *)this + 63);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZStyle::getScene(OZStyle *this)
{
  uint64_t result = *((void *)this + 61);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

uint64_t OZStyle::setSceneNode(uint64_t this, OZSceneNode *a2)
{
  *(void *)(this + 504) = a2;
  return this;
}

void OZStyle::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void non-virtual thunk to'OZStyle::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void *OZStyle::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 72), a2);
}

void *non-virtual thunk to'OZStyle::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 56), a2);
}

uint64_t OZStyle::getPasteEntry(OZStyle *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZStyle::getPasteEntry(OZStyle *this, OZChannelBase *a2)
{
  return 0;
}

OZScene *OZStyle::registerAllMaterials(OZScene *this)
{
  uint64_t v1 = (OZMaterialBase **)*((void *)this + 60);
  uint64_t v2 = (OZMaterialBase **)*((void *)this + 61);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v1++;
      this = OZStyle::registerMaterial(v3, v4);
    }
    while (v1 != v2);
  }
  return this;
}

OZScene *OZStyle::registerMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t result = (OZScene *)(*(uint64_t (**)(OZStyle *))(*(void *)this + 128))(this);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    if (a2) {
      uint64_t v6 = (OZMaterialBase *)((char *)a2 + 16);
    }
    else {
      uint64_t v6 = 0;
    }
    OZScene::registerObject(result, v6);
    unsigned int v7 = *((_DWORD *)a2 + 44);
    unsigned int v8 = *((_DWORD *)this + 24);
    return (OZScene *)OZScene::addNodeDependency(v5, v7, v8);
  }
  return result;
}

void OZStyle::unregisterAllMaterials(OZStyle *this)
{
  uint64_t v1 = (OZMaterialBase **)*((void *)this + 60);
  uint64_t v2 = (OZMaterialBase **)*((void *)this + 61);
  while (v1 != v2)
  {
    uint64_t v4 = *v1++;
    OZStyle::unregisterMaterial(this, v4);
  }
}

void OZStyle::unregisterMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t v3 = (OZScene *)(*(uint64_t (**)(OZStyle *))(*(void *)this + 128))(this);
  if (v3)
  {
    uint64_t v4 = v3;
    if (a2) {
      uint64_t v5 = (OZMaterialBase *)((char *)a2 + 16);
    }
    else {
      uint64_t v5 = 0;
    }
    OZScene::unregisterObject(v3, v5);
    unsigned int v6 = *((_DWORD *)a2 + 44);
    OZScene::removeAllDependencies(v4, v6);
  }
}

uint64_t OZStyle::addMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)a2 + 208))(a2);
  OZChannelBase::setFlag(v4, 8, 0);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)a2 + 208))(a2);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 72), v5);
  unsigned int v6 = (OZChannelObjectRootBase *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)a2 + 208))(a2);
  uint64_t v7 = *(void *)(*(uint64_t (**)(OZStyle *))(*(void *)this + 112))(this);
  (*(void (**)(CMTime *__return_ptr))(v7 + 712))(v25);
  OZChannelObjectRootBase::setTimeExtent(v6, (const PCTimeRange *)v25, 1);
  unsigned int v8 = (__n128 *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)a2 + 208))(a2);
  uint64_t v9 = *(void *)(*(uint64_t (**)(OZStyle *))(*(void *)this + 112))(this);
  (*(void (**)(CMTime *__return_ptr))(v9 + 320))(v25);
  OZChannelObjectRootBase::setTimeOffset(v8, v25, 1);
  uint64_t v11 = (void *)*((void *)this + 61);
  unint64_t v10 = *((void *)this + 62);
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = *((void *)this + 60);
    uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v10 - v13;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 496, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[8 * v14];
    long long v20 = &v18[8 * v17];
    *(void *)uint64_t v19 = a2;
    uint64_t v12 = v19 + 8;
    int v22 = (char *)*((void *)this + 60);
    long long v21 = (char *)*((void *)this + 61);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      long long v21 = (char *)*((void *)this + 60);
    }
    *((void *)this + 60) = v19;
    *((void *)this + 61) = v12;
    *((void *)this + 62) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *uint64_t v11 = a2;
    uint64_t v12 = v11 + 1;
  }
  *((void *)this + 61) = v12;
  OZMaterialBase::setOwner((uint64_t)a2, (OZStyle *)((char *)this + 16));
  return (*(uint64_t (**)(char *))(*((void *)this + 2) + 424))((char *)this + 16);
}

uint64_t OZStyle::removeMaterialAtIndex(OZStyle *this, unsigned int a2)
{
  uint64_t v3 = (void **)(*((void *)this + 60) + 8 * a2);
  uint64_t v4 = (uint64_t)*v3;
  OZMaterialBase::removeThisFromBehaviors(*v3);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 208))(v4);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 72), v5);
  unsigned int v6 = (char *)*((void *)this + 61);
  int64_t v7 = v6 - (char *)(v3 + 1);
  if (v6 != (char *)(v3 + 1)) {
    memmove(v3, v3 + 1, v6 - (char *)(v3 + 1));
  }
  *((void *)this + 61) = (char *)v3 + v7;
  unsigned int v8 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v8(v4);
}

uint64_t OZStyle::didDeleteMaterialWithFacetAssignment(OZStyle *this, int a2)
{
  uint64_t v2 = (OZChannel *)(**((void **)this + 60) + 568);
  uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  double v4 = (double)(OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) | a2);

  return OZChannel::setValue(v2, v3, v4, 0);
}

uint64_t OZStyle::didSetFacetAssignmentForMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v5 = (OZMaterialBase **)*((void *)this + 60);
  unsigned int v6 = (OZMaterialBase **)*((void *)this + 61);
  if (v5 != v6)
  {
    int v7 = ~result;
    unsigned int v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v9 = *v5;
      if (*v5 != a2)
      {
        unint64_t v10 = (OZChannel *)((char *)v9 + 568);
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v9 + 568), v8, 0.0);
        uint64_t result = OZChannel::setValue(v10, v8, (double)(ValueAsInt & v7), 0);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t OZStyle::setNameOfMaterial(OZStyle *this, const PCString *a2, OZMaterialBase *a3)
{
  uint64_t v3 = (OZMaterialBase **)*((void *)this + 60);
  double v4 = (OZMaterialBase **)*((void *)this + 61);
  if (v3 == v4)
  {
LABEL_5:
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v6 = 0;
    while (*v3 != a3)
    {
      ++v3;
      uint64_t v6 = (v6 + 1);
      if (v3 == v4) {
        goto LABEL_5;
      }
    }
  }
  return (*(uint64_t (**)(void, const PCString *, uint64_t))(**((void **)this + 63) + 1192))(*((void *)this + 63), a2, v6);
}

uint64_t non-virtual thunk to'OZStyle::setNameOfMaterial(OZStyle *this, const PCString *a2, OZMaterialBase *a3)
{
  return OZStyle::setNameOfMaterial((OZStyle *)((char *)this - 16), a2, a3);
}

OZChannelBase *OZStyle::assignUniqueIDsToAllMaterials(OZChannelBase *this)
{
  CMTime var0 = this[4].var4.var0;
  var5 = this[4].var5;
  while (var0 != (__CFString *)var5)
  {
    OZChannelBase::updateIDGenerator((OZChannelBase *)(*((_DWORD *)var0->isa + 44) + 1));
    isa = var0->isa;
    CMTime var0 = (__CFString *)((char *)var0 + 8);
    double v4 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)isa + 208))(isa);
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v4);
    this = OZChannelBase::setID(v4, NextUniqueID);
  }
  return this;
}

uint64_t OZStyle::selectMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t v2 = (OZMaterialBase **)*((void *)this + 60);
  uint64_t v3 = (OZMaterialBase **)*((void *)this + 61);
  if (v2 != v3)
  {
    int v5 = 0;
    do
    {
      if (*v2 == a2) {
        break;
      }
      ++v2;
      ++v5;
    }
    while (v2 != v3);
  }
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 63) + 16) + 536))();
}

uint64_t non-virtual thunk to'OZStyle::selectMaterial(OZStyle *this, OZMaterialBase *a2)
{
  return OZStyle::selectMaterial((OZStyle *)((char *)this - 16), a2);
}

uint64_t OZStyle::selectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v3 = *(uint64_t **)(this + 480);
  uint64_t v2 = *(uint64_t **)(this + 488);
  unint64_t v4 = a2;
  if (a2 < (unint64_t)(v2 - v3))
  {
    uint64_t v5 = this;
    if (v3 == v2)
    {
      uint64_t v7 = *(void *)(this + 488);
    }
    else
    {
      do
      {
        uint64_t v6 = *v3++;
        (*(void (**)(uint64_t))(*(void *)v6 + 168))(v6);
      }
      while (v3 != v2);
      uint64_t v2 = *(uint64_t **)(v5 + 480);
      uint64_t v7 = *(void *)(v5 + 488);
    }
    if (v4 >= (v7 - (uint64_t)v2) >> 3) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    unsigned int v8 = *(uint64_t (**)(void))(*(void *)v2[v4] + 160);
    return v8();
  }
  return this;
}

uint64_t non-virtual thunk to'OZStyle::selectMaterialAtIndex(OZStyle *this, unsigned int a2)
{
  return OZStyle::selectMaterialAtIndex((uint64_t)this - 16, a2);
}

uint64_t OZStyle::deselectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 480);
  if (a2 < (unint64_t)((*(void *)(this + 488) - v2) >> 3)) {
    return (*(uint64_t (**)(void))(**(void **)(v2 + 8 * a2) + 168))();
  }
  return this;
}

uint64_t non-virtual thunk to'OZStyle::deselectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 464);
  if (a2 < (unint64_t)((*(void *)(this + 472) - v2) >> 3)) {
    return (*(uint64_t (**)(void))(**(void **)(v2 + 8 * a2) + 168))();
  }
  return this;
}

uint64_t OZStyle::sharesSimilarMaterials(OZStyle *this, const OZStyle *a2)
{
  uint64_t v3 = *((void *)this + 60);
  uint64_t v2 = *((void *)this + 61);
  unint64_t v4 = (v2 - v3) >> 3;
  if (v4 != (uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 3) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  unint64_t v7 = 0;
  unsigned int v8 = 1;
  do
  {
    uint64_t v9 = *((void *)this + 60);
    if (v7 >= (*((void *)this + 61) - v9) >> 3) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v10 = *((void *)a2 + 60);
    if (v7 >= (*((void *)a2 + 61) - v10) >> 3) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v9 + 8 * v7) + 176))(*(void *)(v9 + 8 * v7), *(void *)(v10 + 8 * v7));
    unint64_t v7 = v8++;
    if (result) {
      BOOL v12 = v4 > v7;
    }
    else {
      BOOL v12 = 0;
    }
  }
  while (v12);
  return result;
}

uint64_t OZStyle::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZStyleScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 77);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 104);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 24));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZStyle::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZStyle::writeHeader(this - 6, a2);
}

uint64_t OZStyle::writeBody(uint64_t **this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZStyleScope);
  OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)(this + 9), a2, 0, 1, a5);
  if (((uint64_t (*)(uint64_t **))(*this)[34])(this))
  {
    uint64_t v8 = ((uint64_t (*)(uint64_t **))(*this)[34])(this);
    if (OZChannel::getValueAsInt((OZChannel *)(v8 + 8232), MEMORY[0x1E4F1FA48], 0.0))
    {
      uint64_t v9 = this[60];
      uint64_t v10 = this[61];
      while (v9 != v10)
      {
        uint64_t v11 = *v9++;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)(v11 + 48) + 16))(v11 + 48, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)(v11 + 48)
                                                                                             + 24))(v11 + 48, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZStyle::writeBody(uint64_t **this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZStyle::writeBody(this - 6, a2, 0, 0, a5);
}

unsigned char *OZStyle::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  uint64_t result = OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  uint64_t v6 = this[60];
  uint64_t v5 = this[61];
  while (v6 != v5)
  {
    uint64_t v7 = *(void *)v6;
    uint64_t v6 = (OZFactory *)((char *)v6 + 8);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v7 + 264))(v7, a2, 0);
  }
  return result;
}

unsigned char *non-virtual thunk to'OZStyle::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZStyle::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZStyle::parseBegin(OZStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZStyle::parseBegin(OZStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZStyle::parseEnd(OZStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZStyle::parseEnd(OZStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZStyle::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t non-virtual thunk to'OZStyle::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZCanvasState::OZCanvasState(OZCanvasState *this)
{
  *(void *)this = &unk_1F114E7B8;
  *((void *)this + 1) = 1;
}

void OZCanvasState::OZCanvasState(OZCanvasState *this, const OZCanvasState *a2)
{
  *(void *)this = &unk_1F114E7B8;
  *((void *)this + 1) = *((void *)a2 + 1);
}

uint64_t OZCanvasState::writeHeader(OZCanvasState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCanvasStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 84);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZCanvasState::writeBody(OZCanvasState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCanvasStateScope);
  uint64_t v4 = *((unsigned int *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZCanvasState::parseBegin(OZCanvasState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZCanvasState::parseEnd(OZCanvasState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZCanvasState::parseElement(OZCanvasState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6 = 0;
  int v4 = *((_DWORD *)a3 + 2);
  if (v4 == 2)
  {
    (*(void (**)(PCStreamElement *, int *))(*(void *)a3 + 32))(a3, &v6);
    *((_DWORD *)this + 3) = v6;
  }
  else if (v4 == 1)
  {
    (*(void (**)(PCStreamElement *, int *))(*(void *)a3 + 32))(a3, &v6);
    *((_DWORD *)this + 2) = v6;
  }
  return 0;
}

uint64_t OZFootage::fileSize(OZFootage *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  (*(void (**)(const __CFURL **__return_ptr, OZFootage *))(*(void *)this + 1232))(&v16, this);
  int isSequence = PCURL::isSequence(&v16);
  PCURL::~PCURL((PCURL *)&v16);
  if (!isSequence) {
    return OZSceneNodeFile::fileSize(this);
  }
  (*(void (**)(const __CFURL **__return_ptr, OZFootage *))(*(void *)this + 1232))(&v16, this);
  PCURL::getPathAsFileSystemString(&v16, (PCURL *)&v15);
  int SequenceStart = PCURL::getSequenceStart(&v16);
  int SequenceEnd = PCURL::getSequenceEnd(&v16);
  int v6 = SequenceEnd - SequenceStart;
  if (SequenceEnd >= SequenceStart)
  {
    int v8 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = *MEMORY[0x1E4F28390];
    int v10 = v6 + 1;
    do
    {
      URLforIndex = (const __CFURL **)PCURL::getURLforIndex(&v16, v8);
      if (URLforIndex)
      {
        PCURL::getAsFileSystemString(URLforIndex, &v14);
        uint64_t v12 = [(__CFString *)PCString::ns_str(&v14) stringByResolvingSymlinksInPath];
        PCString::~PCString(&v14);
        v7 += objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "attributesOfItemAtPath:error:", v12, 0), "objectForKey:", v9), "unsignedLongLongValue");
      }
      ++v8;
    }
    while (v10 != v8);
  }
  else
  {
    uint64_t v7 = 0;
  }
  PCString::~PCString(&v15);
  PCURL::~PCURL((PCURL *)&v16);
  return v7;
}

void sub_1B7C7B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, char a12)
{
}

OZChannelBase *OZFootage::isCinematographyAvailable(OZFootage *this, const PCString *a2)
{
  uint64_t result = (OZChannelBase *)*((void *)this + 1009);
  if (result)
  {
    uint64_t v4 = OZChannelBase::setRangeName(result, a2);
    int v5 = *(_DWORD *)(v4 + 928);
    uint64_t result = (OZChannelBase *)(v5 != 0);
    int v6 = *(unsigned __int8 *)(v4 + 644);
    if (v5 && v6 == 0)
    {
      int v8 = (OZChannel *)((char *)this + 7920);
      if (!OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0)) {
        OZChannel::setValue(v8, MEMORY[0x1E4F1FA48], 1.0, 0);
      }
      return 0;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetRetimeFrameChannel(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 48))(v2, this);
    if (result) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  return result;
}

BOOL OZRetimingUtil::CanRetimeSimple(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (!(*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 24))(v2, this))
  {
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  uint64_t v4 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (!(*(uint64_t (**)(void *, OZRetimingUtil *))(*v4 + 64))(v4, this))
  {
    uint64_t v4 = (void *)v4[1];
    if (!v4) {
      return 0;
    }
  }
  int v6 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(void *, OZRetimingUtil *))(*v6 + 72))(v6, this);
      if (v7) {
        break;
      }
      int v6 = (void *)v6[1];
      if (!v6) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v7 = 0;
  }
  return v7 != 0;
}

BOOL OZRetimingUtil::CanRetimeFull(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(this, a2);
  BOOL result = 0;
  if (CanRetimeSimple)
  {
    int v5 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (!(*(uint64_t (**)(void *, OZRetimingUtil *))(*v5 + 40))(v5, this))
      {
        int v5 = (void *)v5[1];
        if (!v5) {
          return 0;
        }
      }
      int v6 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
        return 0;
      }
      while (!(*(uint64_t (**)(void *, OZRetimingUtil *))(*v6 + 32))(v6, this))
      {
        int v6 = (void *)v6[1];
        if (!v6) {
          return 0;
        }
      }
      uint64_t v7 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void *, OZRetimingUtil *))(*v7 + 80))(v7, this);
          if (v8) {
            break;
          }
          uint64_t v7 = (void *)v7[1];
          if (!v7) {
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        uint64_t v8 = 0;
      }
      return v8 != 0;
    }
  }
  return result;
}

BOOL OZRetimingUtil::CanRetimeFull(OZRetimingUtil *this, OZSceneNode *a2)
{
  uint64_t v2 = (OZRetimingUtil *)(*(uint64_t (**)(OZRetimingUtil *, OZSceneNode *))(*(void *)this + 640))(this, a2);

  return OZRetimingUtil::CanRetimeFull(v2, v3);
}

void anonymous namespace'::GetRawMinOffset(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
    || (uint64_t v7 = OZChannelBase::getObjectManipulator(this),
        ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 288))(v7) & 2) != 0))
  {
    uint64_t v11 = MEMORY[0x1E4F1FA08];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1FA08];
    uint64_t v10 = *(void *)(v11 + 16);
  }
  else
  {
    __n128 v14 = 0uLL;
    CMTimeEpoch v15 = 0;
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
    CMTime v17 = *(CMTime *)a2;
    *(__n128 *)&v16.CMTimeValue value = v14;
    v16.CMTimeEpoch epoch = v15;
    PC_CMTimeCeilingToSampleDuration(&v17, &v16, (uint64_t)&v12);
    *(_OWORD *)a3 = v12;
    uint64_t v10 = v13;
  }
  *(void *)(a3 + 16) = v10;
}

__n128 anonymous namespace'::GetRawMaxOffset@<Q0>(CMTime *a1@<X0>, OZChannelBase *a2@<X1>, CMTime *a3@<X2>, int a4@<W3>, CMTime *a5@<X8>)
{
  memset(&v24, 0, sizeof(v24));
  CMTime time1 = *a1;
  CMTime time2 = a1[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v24);
  {
    CMTime time1 = *a3;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v25);
    CMTime time1 = v24;
    CMTime time2 = v25;
    int32_t v12 = CMTimeCompare(&time1, &time2);
    uint64_t v13 = &v24;
    if (v12 > 0) {
      uint64_t v13 = &v25;
    }
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&v13->value;
    CMTimeEpoch epoch = v13->epoch;
  }
  else
  {
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&v24.value;
    CMTimeEpoch epoch = v24.epoch;
  }
  a5->CMTimeEpoch epoch = epoch;
  __n128 v22 = 0uLL;
  CMTimeEpoch v23 = 0;
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(a2);
  CMTime time2 = *a5;
  *(__n128 *)&v25.CMTimeValue value = v22;
  v25.CMTimeEpoch epoch = v23;
  PC_CMTimeSaferSubtract(&time2, &v25, (uint64_t)&time1);
  result.n128_u64[0] = time1.value;
  *a5 = time1;
  if (a4 == 1)
  {
    uint64_t v18 = OZChannelBase::getObjectManipulator(a2);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 264))(v18);
    if (v19)
    {
      CMTime time1 = *(CMTime *)(v19 + 1352);
      CMTime time2 = *(CMTime *)(v19 + 1376);
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v21);
      CMTime time1 = v21;
      *(__n128 *)&time2.CMTimeValue value = v22;
      time2.CMTimeEpoch epoch = v23;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
      CMTime time1 = *a5;
      CMTime time2 = v25;
      if (CMTimeCompare(&time1, &time2) <= 0) {
        long long v20 = (__n128 *)a5;
      }
      else {
        long long v20 = (__n128 *)&v25;
      }
      __n128 result = *v20;
      a5->CMTimeEpoch epoch = v20[1].n128_i64[0];
      *(__n128 *)&a5->CMTimeValue value = result;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetTimeRemap(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 40))(v2, this);
    if (v4) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  int v6 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::getValueAsInt(v4, v6, 0.0);
}

uint64_t anonymous namespace'::PreserveLoopOffset(OZChannelBase *this, CMTime *a2, CMTime *a3, const CMTime *a4)
{
  (*((void (**)(void *__return_ptr))this->var0 + 89))(v25);
  memset(&v24, 0, sizeof(v24));
  OZRetimingUtil::GetMaxLoopOffset(this, (uint64_t)&v24);
  if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)this, v7))
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    int32_t v8 = CMTimeCompare(&time1, &time2);
    uint64_t v9 = a3;
    if ((v8 & 0x80000000) == 0)
    {
      CMTime time1 = *a2;
      CMTime time2 = v24;
      int32_t v10 = CMTimeCompare(&time1, &time2);
      uint64_t v9 = &v24;
      if (v10 <= 0) {
        uint64_t v9 = a2;
      }
    }
    CMTime time1 = *v9;
    CMTime time2 = *a3;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v22);
    *(_OWORD *)&a2->CMTimeValue value = v22;
    CMTimeEpoch epoch = v23;
  }
  else
  {
    *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&v24.value;
    CMTimeEpoch epoch = v24.epoch;
  }
  a2->CMTimeEpoch epoch = epoch;
  CMTime time1 = v26;
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  double v13 = RetimingMath::figToFrames((RetimingMath *)&v22, a3, v12);
  __n128 v14 = (uint64_t **)&OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  do
  {
    CMTimeEpoch v15 = *v14;
    uint64_t v16 = **v14;
    __n128 v14 = (uint64_t **)(*v14 + 1);
    uint64_t v17 = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v16 + 72))(v15, this);
  }
  while (!v17);
  (*(void (**)(uint64_t, void, void, double))(*(void *)v17 + 712))(v17, MEMORY[0x1E4F1FA48], 0, v13);
  double TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)this, v18);
}

double OZRetimingUtil::GetMinEnd@<D0>(OZChannelBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*((void (**)(CMTime *__return_ptr))a1->var0 + 89))(v13);
  CMTime v11 = v13[0];
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))a1->var0 + 89))(v13, a1);
  v13[0] = v11;
  PC_CMTimeSaferAdd(v13, &v14, (uint64_t)&v12);
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(a1);
  v13[0] = v12;
  *(__n128 *)&v14.CMTimeValue value = v9;
  v14.CMTimeEpoch epoch = v10;
  return PC_CMTimeSaferSubtract(v13, &v14, a3);
}

double OZRetimingUtil::GetMaxEnd@<D0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CMTime time1 = *(CMTime *)a3;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (CMTimeCompare(&time1, &time2))
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&time1, this);
    CMTime v10 = time1;
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
    CMTime time1 = v10;
    *(__n128 *)&time2.CMTimeValue value = v8;
    time2.CMTimeEpoch epoch = v9;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    CMTime time2 = *(CMTime *)a3;
    CMTime v13 = v11;
    PC_CMTimeSaferAdd(&time2, &v13, (uint64_t)&time1);
    double result = *(double *)&time1.value;
    *(CMTime *)a3 = time1;
  }
  return result;
}

uint64_t OZRetimingUtil::SetEnd(void *a1, CMTime *a2, uint64_t a3)
{
  int v5 = (void *)*a1;
  uint64_t result = (uint64_t)(a1 + 1);
  uint64_t v4 = v5;
  unint64_t v28 = (void *)result;
  if (v5 != (void *)result)
  {
    do
    {
      uint64_t v7 = (OZRetimingUtil *)v4[4];
      (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)v7 + 712))(v36, v7);
      BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(v7, v8);
      if (OZRetimingUtil::GetTimeRemap(v7, v10)) {
        BOOL CanRetimeSimple = 0;
      }
      CMTime v35 = *(CMTime *)((unsigned char *)v4 + 5);
      memset(&v34, 0, sizeof(v34));
      OZRetimingUtil::GetMinEnd((OZChannelBase *)v7, 1, (uint64_t)&v34);
      memset(&v33, 0, sizeof(v33));
      OZRetimingUtil::GetMaxEnd((OZChannelBase *)v7, v11, (uint64_t)&v33);
      uint64_t v12 = a3;
      if (a3)
      {
        CMTime v14 = (OZChannelBase **)v4[18];
        CMTime v13 = (OZChannelBase **)v4[19];
        while (v14 != v13)
        {
          OZRetimingUtil::GetMinEnd(*v14, 1, (uint64_t)&v38);
          CMTime time1 = v34;
          CMTime time2 = v38;
          if (CMTimeCompare(&time1, &time2) >= 0) {
            uint64_t v16 = &v34;
          }
          else {
            uint64_t v16 = &v38;
          }
          long long v17 = *(_OWORD *)&v16->value;
          v34.CMTimeEpoch epoch = v16->epoch;
          *(_OWORD *)&v34.CMTimeValue value = v17;
          uint64_t v18 = *v14++;
          OZRetimingUtil::GetMaxEnd(v18, v15, (uint64_t)&v38);
          CMTime time1 = v33;
          CMTime time2 = v38;
          if (CMTimeCompare(&time1, &time2) <= 0) {
            uint64_t v19 = &v33;
          }
          else {
            uint64_t v19 = &v38;
          }
          long long v20 = *(_OWORD *)&v19->value;
          v33.CMTimeEpoch epoch = v19->epoch;
          *(_OWORD *)&v33.CMTimeValue value = v20;
        }
      }
      memset(&v32, 0, sizeof(v32));
      uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator((OZChannelBase *)v7);
      CMTime time1 = *a2;
      CMTime time2 = v32;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v38);
      CMTime time1 = v38;
      CMTime time2 = v34;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeEpoch v23 = &v34;
      }
      else
      {
        CMTime time1 = v38;
        CMTime time2 = v33;
        if (CMTimeCompare(&time1, &time2) <= 0) {
          CMTimeEpoch v23 = &v38;
        }
        else {
          CMTimeEpoch v23 = &v33;
        }
      }
      a3 = v12;
      CMTime v31 = *v23;
      CMTime time2 = v36[0];
      CMTime time1 = v31;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v37);
      CMTime time1 = v37;
      CMTime time2 = v32;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v38);
      v36[1] = v38;
      OZChannelObjectRootBase::setTimeExtent(v7, (const PCTimeRange *)v36, 0);
      OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)v7, 0, 1, 1, 1, 1);
      if (CanRetimeSimple)
      {
        CMTime v30 = v35;
      }
      CMTime v25 = (void *)v4[1];
      if (v25)
      {
        do
        {
          CMTime v26 = v25;
          CMTime v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          CMTime v26 = (void *)v4[2];
          BOOL v27 = *v26 == (void)v4;
          uint64_t v4 = v26;
        }
        while (!v27);
      }
      uint64_t v4 = v26;
    }
    while (v26 != v28);
  }
  return result;
}

void anonymous namespace'::SetChildRootEnds(OZChannelBase ***a1, CMTime *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if ((OZChannelBase::isLocked(*v3, 1) & 1) == 0)
      {
        (*((void (**)(CMTime *__return_ptr))(*v3)->var0 + 89))(&v29);
        CMTime time1 = v29;
        CMTime time2 = *a2;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          __n128 v27 = 0uLL;
          CMTimeEpoch v28 = 0;
          uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(*v3);
          CMTime v26 = v30;
          CMTime v33 = v29;
          CMTime time1 = v29;
          CMTime time2 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v33, (uint64_t)&v31);
          CMTime time2 = v31;
          *(__n128 *)&v33.CMTimeValue value = v27;
          v33.CMTimeEpoch epoch = v28;
          PC_CMTimeSaferAdd(&time2, &v33, (uint64_t)&v32);
          CMTime v26 = v32;
          if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)*v3, v9))
          {
            memset(&time2, 0, sizeof(time2));
            *(void *)&v33.timescale = 0;
            v33.CMTimeEpoch epoch = 0;
            v33.CMTimeValue value = (CMTimeValue)&v33.timescale;
            CMTime v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&time2.epoch, 1uLL);
            *CMTime v10 = *v3;
            uint64_t v12 = v10 + 1;
            CMTimeValue value = time2.value;
            CMTime v13 = *(char **)&time2.timescale;
            CMTimeValue v15 = (CMTimeValue)v10;
            if (*(void *)&time2.timescale != time2.value)
            {
              do
              {
                uint64_t v16 = *((void *)v13 - 1);
                v13 -= 8;
                *(void *)(v15 - 8) = v16;
                v15 -= 8;
              }
              while (v13 != (char *)value);
              CMTime v13 = (char *)time2.value;
            }
            time2.CMTimeValue value = v15;
            *(void *)&time2.timescale = v10 + 1;
            time2.CMTimeEpoch epoch = (CMTimeEpoch)&v10[v11];
            if (v13) {
              operator delete(v13);
            }
            *(void *)&time2.timescale = v12;
            OZRetimingUtil::GetRootSetForSetEnd((const void ***)&time2, (uint64_t)&v33, 0);
            OZRetimingUtil::SetEnd(&v33, a2, a3);
            std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v33, *(void **)&v33.timescale);
            if (time2.value)
            {
              *(void *)&time2.timescale = time2.value;
              operator delete((void *)time2.value);
            }
          }
          else
          {
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)*v3, (const PCTimeRange *)&time1, 0);
            OZChannelObjectRoot::recomputeTimeRangeFromChildren(*v3, 0, 0, 1, 1, 1);
            {
              uint64_t v18 = (const void *)OZChannelBase::getObjectManipulator(*v3);
              if (v18) {
              else
              }
                unint64_t v19 = 0;
              uint64_t v20 = OZChannelBase::getObjectManipulator(*v3);
              if (v20) {
              if (v19 | v20)
              }
              {
                CMTime v21 = *v3;
                CMTime time2 = v29;
                CMTime v33 = time1;
                CMTime v32 = v26;
                CMTime v31 = v30;
                operator/((long long *)&v32.value, (uint64_t)&v31, (uint64_t)&time);
                double Seconds = CMTimeGetSeconds(&time);
              }
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1B7C7C4DC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(v1 - 160, *(void **)(v1 - 152));
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void OZRetimingUtil::GetRootSetForSetEnd(const void ***a1, uint64_t a2, int a3)
{
  int v6 = (void *)(a2 + 8);
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a2, *(void **)(a2 + 8));
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = 0;
  *int v6 = 0;
  __n128 v8 = *a1;
  uint64_t v7 = a1[1];
  while (v8 != v7)
  {
    CMTimeEpoch v9 = *v8;
    if (a3) {
    else
    }
    ++v8;
  }
}

void anonymous namespace'::CollectRoots<anonymous namespace'::TruePred,anonymous namespace'::SameEndPred>(const void *a1, uint64_t **a2)
{
  uint64_t v12 = 0;
  CMTime v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  if (v12 != v13)
  {
    do
    {
      *(void *)&long long v8 = v3;
      int v5 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(a2, v3, (uint64_t)&std::piecewise_construct, (void **)&v8);
      (*(void (**)(long long *__return_ptr))(*(void *)*v3 + 320))(&v8);
      *(_OWORD *)(v5 + 11) = v8;
      v5[13] = v9;
      (*(void (**)(long long *__return_ptr))(*(void *)*v3 + 712))(&v8);
      if (v5 + 5 != (uint64_t **)&v8)
      {
        v5[7] = v9;
        *(_OWORD *)(v5 + 5) = v8;
        *((_OWORD *)v5 + 4) = v10;
        v5[10] = v11;
      }
      *(_OWORD *)(v5 + 15) = v8;
      v5[17] = v9;
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = v12;
  }
  if (v3)
  {
    CMTime v13 = v3;
    operator delete(v3);
  }
}

void sub_1B7C7C710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::CollectRoots<anonymous namespace'::SameEndPred,anonymous namespace'::SameEndPred>(const void *a1, uint64_t **a2)
{
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if (a1)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, 1uLL);
      uint64_t v7 = (char *)&v5[v6];
      *int v5 = (uint64_t)v4;
      long long v8 = v5 + 1;
      long long v10 = v41;
      CMTimeEpoch v9 = v42;
      if (v42 != v41)
      {
        do
        {
          uint64_t v11 = *--v9;
          *--int v5 = v11;
        }
        while (v9 != v10);
        CMTimeEpoch v9 = v41;
      }
      int v41 = v5;
      uint64_t v42 = v8;
      uint64_t v43 = v7;
      if (v9) {
        operator delete(v9);
      }
      uint64_t v42 = v8;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v4, 0x4000))
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v4);
        if (ObjectManipulator)
        {
          if (v13)
          {
            uint64_t v14 = v13;
            CMTimeValue v15 = (OZScene *)(*(uint64_t (**)(void *))(*(void *)v13 + 272))(v13);
            if (v15)
            {
              uint64_t v16 = (unsigned int *)*((void *)v14 + 133);
              for (uint64_t i = (unsigned int *)*((void *)v14 + 132); i != v16; ++i)
              {
                Node = OZScene::getNode(v15, *i);
                unint64_t v19 = Node;
                if (Node)
                {
                  uint64_t v20 = (OZChannelFolder *)(*(uint64_t (**)(void *))(*Node + 640))(Node);
                  if (OZChannelFolder::testFoldFlag(v20, 0x4000)
                    && ((*(uint64_t (**)(void *, uint64_t))(v19[2] + 56))(v19 + 2, 1) & 1) == 0)
                  {
                    uint64_t v21 = (*(uint64_t (**)(void *))(*v19 + 640))(v19);
                    {
                      long long v22 = v42;
                      if (v42 >= (uint64_t *)v43)
                      {
                        uint64_t v24 = v42 - v41;
                        if ((unint64_t)(v24 + 1) >> 61) {
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v25 = (v43 - (char *)v41) >> 2;
                        if (v25 <= v24 + 1) {
                          unint64_t v25 = v24 + 1;
                        }
                        if ((unint64_t)(v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v26 = v25;
                        }
                        if (v26) {
                          __n128 v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, v26);
                        }
                        else {
                          __n128 v27 = 0;
                        }
                        CMTimeEpoch v28 = (uint64_t *)&v27[8 * v24];
                        *CMTimeEpoch v28 = v21;
                        CMTimeEpoch v23 = v28 + 1;
                        CMTime v30 = v41;
                        CMTime v29 = v42;
                        if (v42 != v41)
                        {
                          do
                          {
                            uint64_t v31 = *--v29;
                            *--CMTimeEpoch v28 = v31;
                          }
                          while (v29 != v30);
                          CMTime v29 = v41;
                        }
                        int v41 = v28;
                        uint64_t v42 = v23;
                        uint64_t v43 = &v27[8 * v26];
                        if (v29) {
                          operator delete(v29);
                        }
                      }
                      else
                      {
                        *uint64_t v42 = v21;
                        CMTimeEpoch v23 = v22 + 1;
                      }
                      uint64_t v42 = v23;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  CMTime v32 = (unint64_t *)v41;
  CMTime v33 = (unint64_t *)v42;
  if (v41 != v42)
  {
    do
    {
      *(void *)&long long v37 = v32;
      CMTime v34 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(a2, v32, (uint64_t)&std::piecewise_construct, (void **)&v37);
      (*(void (**)(long long *__return_ptr))(*(void *)*v32 + 320))(&v37);
      *(_OWORD *)(v34 + 11) = v37;
      v34[13] = v38;
      (*(void (**)(long long *__return_ptr))(*(void *)*v32 + 712))(&v37);
      if (v34 + 5 != (uint64_t **)&v37)
      {
        v34[7] = v38;
        *(_OWORD *)(v34 + 5) = v37;
        *((_OWORD *)v34 + 4) = v39;
        v34[10] = v40;
      }
      *(_OWORD *)(v34 + 15) = v37;
      v34[17] = v38;
      ++v32;
    }
    while (v32 != v33);
    CMTime v32 = (unint64_t *)v41;
  }
  if (v32)
  {
    uint64_t v42 = (uint64_t *)v32;
    operator delete(v32);
  }
}

void sub_1B7C7CBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 anonymous namespace'::GetRawMinDuration@<Q0>(OZChannelBase *this@<X1>, CMTime *a2@<X0>, int a3@<W2>, CMTime *a4@<X8>)
{
  __n128 v18 = 0uLL;
  CMTimeEpoch v19 = 0;
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
  CMTime time1 = a2[1];
  long long v10 = (__n128 *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2)) {
    uint64_t v11 = &v18;
  }
  else {
    uint64_t v11 = v10;
  }
  __n128 result = *v11;
  *(__n128 *)&a4->CMTimeValue value = *v11;
  a4->CMTimeEpoch epoch = v11[1].n128_i64[0];
  if (a3 == 1)
  {
    uint64_t v13 = OZChannelBase::getObjectManipulator(this);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 264))(v13);
    if (v14)
    {
      CMTime time1 = *(CMTime *)(v14 + 1352);
      CMTime time2 = *a2;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
      CMTime time1 = v16;
      *(__n128 *)&time2.CMTimeValue value = v18;
      time2.CMTimeEpoch epoch = v19;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
      CMTime time1 = *a4;
      CMTime time2 = v17;
      if (CMTimeCompare(&time1, &time2) >= 0) {
        CMTimeValue v15 = (__n128 *)a4;
      }
      else {
        CMTimeValue v15 = (__n128 *)&v17;
      }
      __n128 result = *v15;
      a4->CMTimeEpoch epoch = v15[1].n128_i64[0];
      *(__n128 *)&a4->CMTimeValue value = result;
    }
  }
  return result;
}

void anonymous namespace'::GetRawMaxDuration(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  {
    memset(&v19, 0, sizeof(v19));
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
    memset(v18, 0, sizeof(v18));
    uint64_t v7 = *(void *)OZChannelBase::getObjectManipulator(this);
    (*(void (**)(void *__return_ptr))(v7 + 280))(v18);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v14, this);
    v13[0] = v14;
    v10.n128_f64[0] = PC_CMTimeSaferAdd(v13, &v21, (uint64_t)&v15);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 89))(v13, this, v10);
    CMTime v20 = v13[0];
    CMTime v21 = v15;
    PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v16);
    *(_OWORD *)a3 = v16;
    uint64_t v11 = v17;
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1FA10];
    uint64_t v11 = *(void *)(v12 + 16);
  }
  *(void *)(a3 + 16) = v11;
}

void OZRetimingUtil::SetTimeOffsetAndExtentInteractive(OZChannelBase *this, CMTime *a2, CMTime *a3, CMTime *a4, const CMTime *a5)
{
  memset(&v35, 0, sizeof(v35));
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v35);
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v33, this);
  CMTime time1 = *a2;
  CMTime time2 = v35;
  if (CMTimeCompare(&time1, &time2)
    || (time1 = *a3, CMTime time2 = v33, CMTimeCompare(&time1, &time2))
    || (time1 = a3[1], CMTime time2 = v34, CMTimeCompare(&time1, &time2)))
  {
    CMTime time1 = v34;
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&v32, 0, sizeof(v32));
      __n128 v10 = &v32;
      memset(&v31, 0, sizeof(v31));
      memset(&v30, 0, sizeof(v30));
      memset(&v29, 0, sizeof(v29));
      memset(&v28, 0, sizeof(v28));
      CMTime time1 = *a3;
      CMTime time2 = v30;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
      CMTime time1 = v37;
      CMTime time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      memset(&v27, 0, sizeof(v27));
      CMTime time1 = *a3;
      CMTime time2 = v29;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
      CMTime time1 = v37;
      CMTime time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v9;
      CMTimeEpoch v12 = *(void *)(v9 + 16);
      *(_OWORD *)&v26.CMTimeValue value = *(_OWORD *)&time1.value;
      time1.CMTimeEpoch epoch = v12;
      v26.CMTimeEpoch epoch = v12;
      CMTime v23 = *a3;
      CMTime time2 = *a3;
      CMTime v37 = v32;
      if ((CMTimeCompare(&time2, &v37) & 0x80000000) == 0)
      {
        CMTime time2 = v23;
        CMTime v37 = v31;
        if (CMTimeCompare(&time2, &v37) <= 0) {
          __n128 v10 = &v23;
        }
        else {
          __n128 v10 = &v31;
        }
      }
      CMTime v24 = *v10;
      CMTime time2 = *a3;
      CMTime v37 = a3[1];
      PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v36);
      CMTime time2 = v36;
      CMTime v37 = *a4;
      PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v22);
      CMTime time2 = v22;
      CMTime v37 = v28;
      if (CMTimeCompare(&time2, &v37) < 0)
      {
        CMTime v14 = &v28;
      }
      else
      {
        CMTime time2 = v22;
        CMTime v37 = v27;
        int32_t v13 = CMTimeCompare(&time2, &v37);
        CMTime v14 = &v27;
        if (v13 <= 0) {
          CMTime v14 = &v22;
        }
      }
      CMTime time2 = *v14;
      CMTime time1 = v24;
      CMTime v37 = v24;
      PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v36);
      CMTime time2 = v36;
      CMTime v37 = *a4;
      PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v26);
      CMTime time2 = *a2;
      CMTime v37 = v35;
      if (CMTimeCompare(&time2, &v37)
        || (time2 = v33, CMTime v37 = time1, CMTimeCompare(&time2, &v37))
        || (time2 = v34, CMTime v37 = v26, CMTimeCompare(&time2, &v37)))
      {
        BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v16);
        int TimeRemap = OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v18);
        CMTime v36 = *(CMTime *)v9;
        if (!CanRetimeSimple || TimeRemap)
        {
          OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 0, 1, 1, 1, 1);
        }
        else
        {
          OZRetimingUtil::GetLoopOffset(this, &time2);
          CMTime v37 = v33;
          PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v24);
          CMTime time2 = v24;
          CMTime v37 = v35;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v36);
          OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 0, 1, 1, 1, 1);
          CMTime time2 = time1;
          CMTime v37 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v24);
          CMTime time2 = v36;
          CMTime v37 = v24;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v21);
        }
      }
    }
    else
    {
      OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)a3, 0);
      OZRetimingUtil::SetDefaultRetimingState(this, v15);
    }
  }
}

void OZRetimingUtil::SetDefaultRetimingState(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    long long v8 = 0;
    uint64_t v7 = 0;
    int v5 = 0;
    uint64_t v4 = 0;
LABEL_30:
    uint64_t v6 = 0;
    goto LABEL_31;
  }
  do
  {
    uint64_t v4 = (*(uint64_t (**)(void *, OZChannelBase *))(*v3 + 24))(v3, this);
    if (v4) {
      break;
    }
    uint64_t v3 = (void *)v3[1];
  }
  while (v3);
  int v5 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    long long v8 = 0;
    uint64_t v7 = 0;
    uint64_t v3 = 0;
    goto LABEL_30;
  }
  do
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void *, OZChannelBase *))(*v5 + 32))(v5, this);
    if (v3) {
      break;
    }
    int v5 = (void *)v5[1];
  }
  while (v5);
  uint64_t v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    long long v8 = 0;
    uint64_t v7 = 0;
    int v5 = 0;
LABEL_31:
    uint64_t v9 = 0;
    goto LABEL_32;
  }
  do
  {
    int v5 = (void *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 5))(v6, this);
    if (v5) {
      break;
    }
    uint64_t v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  uint64_t v7 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    long long v8 = 0;
    goto LABEL_30;
  }
  do
  {
    uint64_t v6 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v7->var0 + 6))(v7, this);
    if (v6) {
      break;
    }
    uint64_t v7 = (OZChannel *)v7->var1;
  }
  while (v7);
  long long v8 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    uint64_t v7 = 0;
    goto LABEL_31;
  }
  do
  {
    uint64_t v7 = (OZChannel *)(*(uint64_t (**)(void *, OZChannelBase *))(*v8 + 56))(v8, this);
    if (v7) {
      break;
    }
    long long v8 = (void *)v8[1];
  }
  while (v8);
  long long v8 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    goto LABEL_31;
  }
  do
  {
    uint64_t v9 = (*(uint64_t (**)(void *, OZChannelBase *))(*v8 + 64))(v8, this);
    if (v9) {
      break;
    }
    long long v8 = (void *)v8[1];
  }
  while (v8);
  __n128 v10 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    long long v8 = 0;
    goto LABEL_33;
  }
  do
  {
    long long v8 = (void *)(*(uint64_t (**)(void *, OZChannelBase *))(*v10 + 72))(v10, this);
    if (v8) {
      break;
    }
    __n128 v10 = (void *)v10[1];
  }
  while (v10);
  uint64_t v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
LABEL_32:
    __n128 v10 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v12 = (*(uint64_t (**)(void *, OZChannelBase *))(*v11 + 80))(v11, this);
    if (v12) {
      break;
    }
    uint64_t v11 = (void *)v11[1];
    if (!v11) {
      goto LABEL_32;
    }
  }
  __n128 v10 = (void *)v12;
LABEL_33:
  memset(&v35, 0, sizeof(v35));
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
  if (v6)
  {
    uint64_t v17 = OZChannelBase::getObjectManipulator(this);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 264))(v17);
    if (v18)
    {
      CMTime v19 = *(OZChannelBase **)(v18 + 1504);
      if (v19) {
        OZChannelBase::setRangeName(v19, (const PCString *)1);
      }
    }
    (*((void (**)(OZChannel *, uint64_t))v6->var0 + 58))(v6, 1);
    OZChannel::deleteAllKeyframes(v6, MEMORY[0x1E4F1FA48]);
    memset(&v34, 0, sizeof(v34));
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v34, this);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v32, this);
    memset(&v31, 0, sizeof(v31));
    v37[0] = v32;
    CMTime v36 = v34;
    PC_CMTimeSaferSubtract(v37, &v36, (uint64_t)&v31);
    v37[0] = v32;
    CMTime v36 = v34;
    PC_CMTimeSaferSubtract(v37, &v36, (uint64_t)&v30);
    Float64 v21 = RetimingMath::figToFrames((RetimingMath *)&v30, &v35, v20);
    CMTime v30 = v33;
    v37[0] = v31;
    double v22 = v21 + 1.0;
    memset(&v29, 0, sizeof(v29));
    CMTime v36 = v33;
    PC_CMTimeSaferAdd(v37, &v36, (uint64_t)&v29);
    double v24 = v22 + RetimingMath::figToFrames((RetimingMath *)&v30, &v35, v23);
    OZChannel::setKeyframe(v6, &v31, v22, 1);
    OZChannel::setKeyframe(v6, &v29, v24, 1);
    Keyframe = (void *)OZChannel::getKeyframe(v6, &v31);
    OZChannel::smoothKeyframe(v6, Keyframe);
    CMTime v26 = (void *)OZChannel::getKeyframe(v6, &v29);
    OZChannel::smoothKeyframe(v6, v26);
    OZChannel::setUseRetimingExtrapolation(v6, 1);
    (*((void (**)(OZChannel *, void, void))v6->var0 + 48))(v6, 0, 0);
  }
  if (v4) {
    (*(void (**)(uint64_t, void, void, double))(*(void *)v4 + 712))(v4, MEMORY[0x1E4F1FA48], 0, 1.0);
  }
  if (v3) {
    (*(void (**)(void *, void, void, double))(*v3 + 712))(v3, MEMORY[0x1E4F1FA48], 0, 0.0);
  }
  if (v5) {
    (*(void (**)(void *, void, void, double))(*v5 + 712))(v5, MEMORY[0x1E4F1FA48], 0, 0.0);
  }
  if (v7) {
    OZRetimingUtil::CopyChannelKeyframes(v6, v7, v15);
  }
  if (v9) {
    (*(void (**)(uint64_t, void, void, double))(*(void *)v9 + 712))(v9, MEMORY[0x1E4F1FA48], 0, 0.0);
  }
  if (v8) {
    (*(void (**)(void *, void, void, double))(*v8 + 712))(v8, MEMORY[0x1E4F1FA48], 0, 0.0);
  }
  if (v10)
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 89))(&v32, this, FrameDuration);
    v37[0] = v33;
    v28.n128_f64[0] = RetimingMath::figToFrames((RetimingMath *)v37, &v35, v27);
    (*(void (**)(void *, void, void, __n128))(*v10 + 712))(v10, MEMORY[0x1E4F1FA48], 0, v28);
  }
}

double OZRetimingUtil::GetLoopOffset@<D0>(OZChannelBase *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*((void (**)(long long *__return_ptr))this->var0 + 89))(&v10);
  *(_OWORD *)a2 = v12;
  a2[2] = v13;
  if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v5)
    && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v6))
  {
    if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)this, v8))
    {
      OZRetimingUtil::GetLoopDuration(this, (uint64_t)&v9);
      CMTime v15 = *(CMTime *)a2;
      CMTime v14 = v9;
      PC_CMTimeSaferSubtract(&v15, &v14, (uint64_t)&v10);
      double result = *(double *)&v10;
      *(_OWORD *)a2 = v10;
      a2[2] = v11;
    }
  }
  return result;
}

void OZRetimingUtil::SetTimeOffsetAndExtent(OZChannelBase *this, CMTime *a2, CMTime *a3, CMTime *a4, const CMTime *a5)
{
  memset(&v37, 0, sizeof(v37));
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v37);
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v35, this);
  CMTime time1 = *a2;
  CMTime time2 = v37;
  if (CMTimeCompare(&time1, &time2)
    || (time1 = *a3, CMTime time2 = v35, CMTimeCompare(&time1, &time2))
    || (time1 = a3[1], CMTime time2 = v36, CMTimeCompare(&time1, &time2)))
  {
    CMTime time1 = v36;
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&v34, 0, sizeof(v34));
      long long v10 = &v34;
      memset(&v33, 0, sizeof(v33));
      memset(&v32, 0, sizeof(v32));
      memset(&v31, 0, sizeof(v31));
      memset(&v30, 0, sizeof(v30));
      CMTime time1 = *a3;
      CMTime time2 = v32;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
      CMTime time1 = v39;
      CMTime time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
      memset(&v29, 0, sizeof(v29));
      CMTime time1 = *a3;
      CMTime time2 = v31;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
      CMTime time1 = v39;
      CMTime time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v9;
      CMTimeEpoch v12 = *(void *)(v9 + 16);
      *(_OWORD *)&v28.CMTimeValue value = *(_OWORD *)&time1.value;
      time1.CMTimeEpoch epoch = v12;
      v28.CMTimeEpoch epoch = v12;
      CMTime v25 = *a3;
      CMTime time2 = *a3;
      CMTime v39 = v34;
      if ((CMTimeCompare(&time2, &v39) & 0x80000000) == 0)
      {
        CMTime time2 = v25;
        CMTime v39 = v33;
        if (CMTimeCompare(&time2, &v39) <= 0) {
          long long v10 = &v25;
        }
        else {
          long long v10 = &v33;
        }
      }
      CMTime v26 = *v10;
      CMTime time2 = *a3;
      CMTime v39 = a3[1];
      PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v38);
      CMTime time2 = v38;
      CMTime v39 = *a4;
      PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v24);
      CMTime time2 = v24;
      CMTime v39 = v30;
      if (CMTimeCompare(&time2, &v39) < 0)
      {
        CMTime v14 = &v30;
      }
      else
      {
        CMTime time2 = v24;
        CMTime v39 = v29;
        int32_t v13 = CMTimeCompare(&time2, &v39);
        CMTime v14 = &v29;
        if (v13 <= 0) {
          CMTime v14 = &v24;
        }
      }
      CMTime time2 = *v14;
      CMTime time1 = v26;
      CMTime v39 = v26;
      PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v38);
      CMTime time2 = v38;
      CMTime v39 = *a4;
      PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v28);
      CMTime time2 = *a2;
      CMTime v39 = v37;
      if (CMTimeCompare(&time2, &v39)
        || (time2 = v35, CMTime v39 = time1, CMTimeCompare(&time2, &v39))
        || (time2 = v36, CMTime v39 = v28, CMTimeCompare(&time2, &v39)))
      {
        BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v16);
        int TimeRemap = OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v18);
        CMTime v38 = *(CMTime *)v9;
        if (!CanRetimeSimple || TimeRemap)
        {
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 1, 1, 0, 1, 1);
        }
        else
        {
          OZRetimingUtil::GetLoopOffset(this, &time2);
          CMTime v39 = v35;
          PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v38);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 1, 1, 0, 1, 1);
          CMTime v39 = time1;
          CMTime time2 = v38;
          PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v23);
        }
      }
    }
    else
    {
      OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)a3, 0);
      OZRetimingUtil::SetDefaultRetimingState(this, v15);
    }
  }
}

double anonymous namespace'::MoveTimeOffset(OZChannelBase *this, const CMTime *a2, const CMTime *a3)
{
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v11);
  CMTime time1 = *a2;
  CMTime time2 = v11;
  if (CMTimeCompare(&time1, &time2))
  {
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
    if (v7)
    {
      long long v8 = *(OZChannelBase **)(v7 + 1504);
      if (v8) {
        OZChannelBase::setRangeName(v8, (const PCString *)1);
      }
    }
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v10, this);
    CMTime time1 = v10;
    CMTime time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    *(void *)&double result = OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0).n128_u64[0];
  }
  return result;
}

void OZRetimingUtil::SetTimeExtent(OZChannelBase *this, CMTime *a2, CMTime *a3, const CMTime *a4)
{
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v8);
  OZRetimingUtil::SetTimeOffsetAndExtentInteractive(this, &v8, a2, a3, v7);
}

double OZRetimingUtil::GetTimeScale(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  if (!OZRetimingUtil::CanRetimeSimple(this, a2)) {
    return 1.0;
  }
  uint64_t v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      uint64_t v4 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v3 + 24))(v3, this);
      if (v4) {
        break;
      }
      uint64_t v3 = (void *)v3[1];
      if (!v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  int v5 = (const CMTime *)MEMORY[0x1E4F1FA48];

  OZChannel::getValueAsDouble(v4, v5, 0.0);
  return result;
}

void OZRetimingUtil::CopyChannelKeyframes(OZChannel *this, OZChannel *a2, OZChannelDouble *a3)
{
  if (this)
  {
    (*((void (**)(OZChannel *, uint64_t, OZChannelDouble *))a2->var0 + 58))(a2, 1, a3);
    double v5 = *((double *)this->var16 + 5);
    OZChannel::getKeyframes(this, 0, &v19);
    OZChannel::deleteAllKeyframes(a2, MEMORY[0x1E4F1FA48]);
    Extrapolatiouint64_t n = OZChannel::getExtrapolation(this, 0);
    (*((void (**)(OZChannel *, uint64_t, void))a2->var0 + 48))(a2, Extrapolation, 0);
    uint64_t v7 = v19;
    if (v20 == v19)
    {
      OZChannel::getValueAsDouble(this, MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setInitialValue(a2, v5 * v12 / *((double *)a2->var16 + 5), 0);
      uint64_t v7 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_6;
    }
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      double v16 = 0.0;
      double v17 = 0.0;
      double v14 = 0.0;
      double v15 = 0.0;
      double v13 = 0.0;
      OZChannel::getKeyframe(this, v7[v8], &v18, &v17);
      OZChannel::getKeyframeInputTangents(this, v19[v8], &v16, &v15, 0);
      OZChannel::getKeyframeOutputTangents(this, v19[v8], &v14, &v13, 0);
      OZChannel::getKeyframeInterpolation(this, v19[v8]);
      OZChannel::getKeyframeFlags(this, v19[v8]);
      OZChannel::getKeyframeEnabled(this, v19[v8]);
      double v17 = v5 * v17;
      double v15 = v5 * v15;
      double v13 = v5 * v13;
      double v10 = *((double *)a2->var16 + 5);
      OZChannel::setKeyframe(a2, &v18, v17 / v10, 0);
      Keyframe = (void *)OZChannel::getKeyframe(a2, &v18);
      OZChannel::setKeyframeFlags(a2, Keyframe);
      OZChannel::setKeyframeEnabled(a2, Keyframe);
      OZChannel::setKeyframeInterpolation(a2, Keyframe);
      OZChannel::setKeyframeInputTangents(a2, Keyframe, v16, v15 / v10, 0);
      OZChannel::setKeyframeOutputTangents(a2, Keyframe, v14, v13 / v10, 0);
      unint64_t v8 = v9;
      uint64_t v7 = v19;
      ++v9;
    }
    while (v8 < v20 - v19);
    if (v19)
    {
LABEL_6:
      CMTime v20 = v7;
      operator delete(v7);
    }
  }
}

void sub_1B7C7EA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::GetAdjustedNaturalDuration@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr, uint64_t))(*(void *)ObjectManipulator + 280))(&v10, ObjectManipulator);
    *(_OWORD *)a2 = v10;
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA10];
    uint64_t v8 = *(void *)(v9 + 16);
  }
  *(void *)(a2 + 16) = v8;
  return result;
}

uint64_t OZRetimingUtil::GetEndCondition(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 64))(v2, this);
    if (v4) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::getValueAsInt(v4, v6, 0.0);
}

uint64_t anonymous namespace'::BuildConstantRetimingCurve(OZChannelBase *this, OZChannelObjectRoot *a2, const CMTime *a3, double a4, const CMTime *a5)
{
  uint64_t v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      uint64_t v10 = (*(uint64_t (**)(void *, OZChannelBase *, const CMTime *, const CMTime *))(*v9 + 48))(v9, this, a3, a5);
      if (v10) {
        break;
      }
      uint64_t v9 = (void *)v9[1];
      if (!v9) {
        goto LABEL_4;
      }
    }
    uint64_t v11 = (OZChannel *)v10;
  }
  else
  {
LABEL_4:
    uint64_t v11 = 0;
  }
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *, OZChannelObjectRoot *, const CMTime *, const CMTime *))this->var0
   + 89))(&v26, this, a2, a3, a5);
  uint64_t v12 = *(void *)OZChannelBase::getObjectManipulator(this);
  uint64_t v13 = (*(uint64_t (**)(void))(v12 + 264))();
  if (v13)
  {
    double v14 = *(OZChannelBase **)(v13 + 1504);
    if (v14) {
      OZChannelBase::setRangeName(v14, (const PCString *)1);
    }
  }
  (*((void (**)(OZChannel *, uint64_t))v11->var0 + 58))(v11, 1);
  OZChannel::deleteAllKeyframes(v11, MEMORY[0x1E4F1FA48]);
  memset(&v25, 0, sizeof(v25));
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v25, this);
  memset(&v24, 0, sizeof(v24));
  CMTime v28 = v26;
  CMTime v27 = v25;
  PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v24);
  CMTime v28 = v26;
  CMTime v27 = v25;
  PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v23);
  double v16 = (double)(int)vcvtmd_s64_f64(RetimingMath::figToFrames((RetimingMath *)&v23, a3, v15) * a4 + 0.5 + 0.0000001)
      + 1.0;
  memset(&v23, 0, sizeof(v23));
  CMTime v28 = v24;
  CMTime v27 = *(CMTime *)a2;
  PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v23);
  double v18 = v16 + RetimingMath::figToFrames(a2, a3, v17) * a4;
  OZChannel::setKeyframe(v11, &v24, v16, 1);
  OZChannel::setKeyframe(v11, &v23, v18, 1);
  Keyframe = (void *)OZChannel::getKeyframe(v11, &v24);
  OZChannel::smoothKeyframe(v11, Keyframe);
  CMTime v20 = (void *)OZChannel::getKeyframe(v11, &v23);
  OZChannel::smoothKeyframe(v11, v20);
}

void anonymous namespace'::SetChildRootExtents(OZRetimingUtil ***a1, CMTime *a2, CMTime *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v7 = a2 + 1;
    do
    {
      if ((OZChannelBase::isLocked((OZChannelBase *)*v3, 1) & 1) == 0)
      {
        (*(void (**)(CMTime *__return_ptr))(*(void *)*v3 + 712))(&v25);
        BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(*v3, v8);
        uint64_t v10 = *v3;
        if (CanRetimeSimple)
        {
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)v10 + 320))(&v28, *v3);
          OZRetimingUtil::SetTimeOffsetAndExtentInteractive((OZChannelBase *)v10, &v28, a2, a3, v11);
        }
        else
        {
          OZChannelObjectRootBase::setTimeExtent(*v3, (const PCTimeRange *)a2, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)*v3, 0, 0, 1, 1, 1);
          {
            uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator((OZChannelBase *)*v3);
            if (ObjectManipulator) {
            else
            }
              unint64_t v14 = 0;
            uint64_t v15 = OZChannelBase::getObjectManipulator((OZChannelBase *)*v3);
            if (v15) {
            if (v14 | v15)
            }
            {
              double v16 = *v3;
              CMTime v28 = v25;
              CMTime v24 = *a2;
              long long v21 = *(_OWORD *)&v7->value;
              CMTimeEpoch epoch = v7->epoch;
              long long v19 = v26;
              uint64_t v20 = v27;
              operator/(&v21, (uint64_t)&v19, (uint64_t)&time);
              double Seconds = CMTimeGetSeconds(&time);
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t anonymous namespace'::ScaleKeyframesRecursive(OZChannelBase *this, OZChannelFolder *a2, const CMTime *a3, const CMTime *a4, double a5)
{
  uint64_t result = OZChannelBase::isLocked(this, 1);
  if ((result & 1) == 0)
  {
    CMTime var0 = this[1].var0;
    if (var0)
    {
      uint64_t v12 = (const void **)*var0;
      uint64_t v11 = (const void **)var0[1];
      if (*var0 != v11)
      {
        do
        {
          uint64_t v13 = *v12;
          if (*v12)
          {
            if (v14)
            {
              uint64_t v15 = v14;
              uint64_t result = OZChannelBase::isLocked(v14, 1);
              if ((result & 1) == 0)
              {
                uint64_t result = OZChannelBase::testFlag(v15, 0x20000);
                if ((result & 1) == 0)
                {
                  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v15->var0 + 40))(&v18, v15);
                  CMTime v21 = *(CMTime *)a2;
                  CMTime v20 = v18;
                  PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v19);
                  operator*(&v19, &v21, -1.0);
                  OZChannel::linearTimeWarp((OZChannel *)v15, 1.0, &v21);
                  OZChannel::linearTimeWarp((OZChannel *)v15, a5, MEMORY[0x1E4F1FA48]);
                  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v15->var0 + 40))(&v18, v15);
                  CMTime v21 = *a3;
                  CMTime v20 = v18;
                  PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v19);
                  uint64_t result = OZChannel::linearTimeWarp((OZChannel *)v15, 1.0, &v19);
                }
              }
            }
            else
            {
              if (result)
              {
                double v16 = (OZChannelFolder *)result;
                {
                  uint64_t result = OZChannelFolder::testFoldFlag(v16, 0x200000);
                  if ((result & 1) == 0) {
                }
                  }
              }
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
  }
  return result;
}

BOOL OZRetimingUtil::IsReversed(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 32))(v2, this);
    if (v4) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  return OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0) != 0;
}

OZChannel *OZRetimingUtil::SetReverse(OZChannel *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    unsigned int v3 = a2;
    uint64_t v4 = this;
    while (1)
    {
      this = (OZChannel *)(*(uint64_t (**)(void *, OZChannel *))(*v2 + 32))(v2, v4);
      if (this) {
        break;
      }
      uint64_t v2 = (void *)v2[1];
      if (!v2) {
        return this;
      }
    }
    double v5 = this;
    this = (OZChannel *)OZChannel::getValueAsInt(this, MEMORY[0x1E4F1FA48], 0.0);
    if ((((this == 0) ^ v3) & 1) == 0)
    {
      uint64_t v7 = MEMORY[0x1E4F1FA48];
      uint64_t v8 = (uint64_t (*)(OZChannel *, uint64_t, void, __n128))*((void *)v5->var0 + 89);
      v6.n128_f64[0] = (double)v3;
      return (OZChannel *)v8(v5, v7, 0, v6);
    }
  }
  return this;
}

void OZRetimingUtil::SetEndCondition(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  uint64_t v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    int v3 = (int)a2;
    while (1)
    {
      double v5 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v2 + 64))(v2, this);
      if (v5) {
        break;
      }
      uint64_t v2 = (void *)v2[1];
      if (!v2) {
        return;
      }
    }
    if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0) != v3)
    {
      v34[0] = 0;
      v34[1] = 0;
      CMTime v33 = (uint64_t *)v34;
      uint64_t v7 = v33;
      if (v33 != (uint64_t *)v34)
      {
        double v8 = (double)v3;
        uint64_t v9 = MEMORY[0x1E4F1FA48];
        do
        {
          uint64_t v10 = (OZChannelBase *)v7[4];
          if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)v10, v6))
          {
            uint64_t v11 = &OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
            do
            {
              uint64_t v12 = *v11;
              uint64_t v13 = (*(uint64_t (**)(void, OZChannelBase *))(*(void *)*v11 + 64))(*v11, v10);
              uint64_t v11 = (void *)(v12 + 8);
            }
            while (!v13);
            (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)v13 + 712))(v13, v9, 0, v8);
            if (!OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)v10, v14))
            {
              uint64_t v15 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
              if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
              {
                while (1)
                {
                  double v16 = (OZChannel *)(*(uint64_t (**)(void *, OZChannelBase *))(*v15 + 48))(v15, v10);
                  if (v16) {
                    break;
                  }
                  uint64_t v15 = (void *)v15[1];
                  if (!v15) {
                    goto LABEL_16;
                  }
                }
              }
              else
              {
LABEL_16:
                double v16 = 0;
              }
              memset(&v32, 0, sizeof(v32));
              memset(&v31, 0, sizeof(v31));
              uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(v10);
              memset(&v30[1], 0, sizeof(CMTime));
              (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))v10->var0 + 89))(&time1, v10, FrameDuration);
              memset(&v38, 0, sizeof(v38));
              operator*(&v31, &v38, 0.5);
              CMTime time1 = v32;
              CMTime time2 = v38;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
              CMTime time1 = v37;
              CMTime time2 = v31;
              PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v29);
              CMTime time1 = v30[0];
              CMTime time2 = v29;
              int32_t v20 = CMTimeCompare(&time1, &time2);
              double v22 = v30;
              if (v20 < 0) {
                double v22 = &v29;
              }
              v30[1] = *v22;
              if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)v10, v21))
              {
                OZRetimingUtil::GetLoopDuration(v10, (uint64_t)&v37);
                CMTime time2 = v30[1];
                CMTime v38 = v37;
                PC_CMTimeSaferAdd(&time2, &v38, (uint64_t)&time1);
                v30[1] = time1;
              }
              (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v10->var0 + 89))(&time1, v10);
              CMTime v36 = v30[1];
              OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v10, (const PCTimeRange *)&time1, 0);
              OZChannelObjectRoot::recomputeTimeRangeFromChildren(v10, 0, 1, 1, 1, 1);
              double TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)v10, v23);
              CMTime time2 = time1;
              CMTime v38 = v36;
              PC_CMTimeSaferAdd(&time2, &v38, (uint64_t)&v37);
              CMTime time2 = v37;
              CMTime v38 = v31;
              PC_CMTimeSaferSubtract(&time2, &v38, (uint64_t)v30);
            }
          }
          long long v26 = (uint64_t *)v7[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              long long v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (uint64_t *)v7[2];
              BOOL v28 = *v27 == (void)v7;
              uint64_t v7 = v27;
            }
            while (!v28);
          }
          uint64_t v7 = v27;
        }
        while (v27 != (uint64_t *)v34);
      }
      std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v33, v34[0]);
    }
  }
}

void sub_1B7C7F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
}

__n128 anonymous namespace'::GetDurationFromRetimingChannel@<Q0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  double v8 = 0.0;
  if (OZChannel::getFirstKeyframe(this, &v10, &v8)
    && OZChannel::getLastKeyframe(this, &v9, (double *)&v7))
  {
    CMTime v12 = v9;
    CMTime v11 = v10;
    result.n128_f64[0] = PC_CMTimeSaferSubtract(&v12, &v11, a2);
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
  }
  return result;
}

OZChannelBase *OZRetimingUtil::GetLoopDuration@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    double v5 = this;
    while (1)
    {
      this = (OZChannelBase *)(*(uint64_t (**)(void *, OZChannelBase *))(*v4 + 72))(v4, v5);
      if (this) {
        break;
      }
      uint64_t v4 = (void *)v4[1];
      if (!v4) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = (OZChannel *)this;
    __n128 v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(v5);
    OZChannel::getValueAsDouble(v7, MEMORY[0x1E4F1FA48], 0.0);
    return (OZChannelBase *)RetimingMath::framesToFig((RetimingMath *)&v12, v11, v10);
  }
  else
  {
LABEL_5:
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
  }
  return this;
}

uint64_t anonymous namespace'::SetConstantRetimingCurveExtrapolation(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  int v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      uint64_t v4 = (*(uint64_t (**)(void *, _anonymous_namespace_ *))(*v3 + 48))(v3, this);
      if (v4) {
        break;
      }
      int v3 = (void *)v3[1];
      if (!v3) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = v4;
  }
  else
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  uint64_t result = OZRetimingUtil::GetEndCondition(this, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 384);
      return v7(v5, 1, 0);
    case 1:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v14);
      CMTime time1 = v14;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      int32_t v8 = CMTimeCompare(&time1, &time2);
      CMTime v9 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 384);
      if (!v8) {
        goto LABEL_16;
      }
      uint64_t v10 = v5;
      uint64_t v11 = 3;
      goto LABEL_17;
    case 2:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v14);
      CMTime time1 = v14;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      int32_t v12 = CMTimeCompare(&time1, &time2);
      CMTime v9 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 384);
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v10 = v5;
      uint64_t v11 = 2;
      goto LABEL_17;
    case 3:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v14);
      CMTime time1 = v14;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      int32_t v13 = CMTimeCompare(&time1, &time2);
      CMTime v9 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 384);
      if (v13)
      {
        uint64_t v10 = v5;
        uint64_t v11 = 0;
      }
      else
      {
LABEL_16:
        uint64_t v10 = v5;
        uint64_t v11 = 1;
      }
LABEL_17:
      uint64_t result = v9(v10, v11, 0);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OZRetimingUtil::GetMaxLoopOffset@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  (*((void (**)(CMTime *__return_ptr))this->var0 + 89))(&time1);
  CMTime v17 = v19;
  if (result
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 89))(&time1, this, PotentialLoopOffset);
    CMTime v13 = time1;
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v12, this);
    CMTime time1 = v13;
    CMTime time2 = v12;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    CMTime time1 = v15;
    CMTime time2 = v14;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    CMTime time1 = v17;
    CMTime time2 = v16;
    uint64_t result = CMTimeCompare(&time1, &time2);
    uint64_t v10 = &v17;
    if ((int)result > 0) {
      uint64_t v10 = &v16;
    }
    *(_OWORD *)a2 = *(_OWORD *)&v10->value;
    CMTimeEpoch epoch = v10->epoch;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v17.value;
    CMTimeEpoch epoch = v17.epoch;
  }
  *(void *)(a2 + 16) = epoch;
  return result;
}

__n128 anonymous namespace'::GetPotentialLoopOffset@<Q0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  {
    memset(&v13, 0, sizeof(v13));
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
    memset(v12, 0, sizeof(v12));
    uint64_t v7 = *(void *)OZChannelBase::getObjectManipulator(this);
    (*(void (**)(void *__return_ptr))(v7 + 280))(v12);
    double TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)this, v8);
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4F1FA10];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA10];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1FA10];
    *(void *)(a3 + 16) = *(void *)(v11 + 16);
  }
  return result;
}

void OZRetimingUtil::SetLoopOffset(OZChannelBase *this, CMTime *a2, const CMTime *a3)
{
  CMTime v29 = 0;
  CMTime v30 = 0;
  uint64_t v31 = 0;
  memset(&v28, 0, sizeof(v28));
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
  int32_t v8 = v29;
  CMTime v9 = v30;
  if (v29 != v30)
  {
    uint64_t v10 = MEMORY[0x1E4F1FA48];
    do
    {
      if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)*v8, v7)
        && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)*v8, v7)
        && OZRetimingUtil::GetEndCondition((OZRetimingUtil *)*v8, v7))
      {
        (*((void (**)(void *__return_ptr))(*v8)->var0 + 89))(v26);
        memset(&v25, 0, sizeof(v25));
        OZRetimingUtil::GetMaxLoopOffset(*v8, (uint64_t)&v25);
        memset(&v24, 0, sizeof(v24));
        CMTime time1 = *a2;
        CMTime time2 = v28;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          CMTime v12 = &v28;
        }
        else
        {
          CMTime time1 = *a2;
          CMTime time2 = v25;
          int32_t v11 = CMTimeCompare(&time1, &time2);
          CMTime v12 = &v25;
          if (v11 <= 0) {
            CMTime v12 = a2;
          }
        }
        CMTime time1 = *v12;
        CMTime time2 = v28;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v24);
        OZRetimingUtil::GetLoopOffset(*v8, &v23);
        CMTime time1 = v24;
        CMTime time2 = v23;
        if (CMTimeCompare(&time1, &time2))
        {
          memset(&v23, 0, sizeof(v23));
          CMTime time1 = v27;
          CMTime time2 = v24;
          v14.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
          CMTime v15 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
          if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
          {
            CMTime v16 = *v8;
            while (1)
            {
              uint64_t v17 = (*(uint64_t (**)(void *, OZChannelBase *, __n128))(*v15 + 72))(v15, v16, v14);
              if (v17) {
                break;
              }
              CMTime v15 = (void *)v15[1];
              if (!v15) {
                goto LABEL_18;
              }
            }
          }
          else
          {
LABEL_18:
            uint64_t v17 = 0;
          }
          Float64 v18 = RetimingMath::figToFrames((RetimingMath *)&v23, &v28, v13);
          (*(void (**)(uint64_t, uint64_t, void, Float64))(*(void *)v17 + 712))(v17, v10, 0, v18);
          CMTime v19 = *v8;
          double TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)*v8, v20);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    int32_t v8 = v29;
  }
  if (v8)
  {
    CMTime v30 = v8;
    operator delete(v8);
  }
}

void sub_1B7C803CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::CollectLinkedRoots<anonymous namespace'::TruePred>(const void *a1, void **a2)
{
  if (a1)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      unint64_t v5 = (unint64_t)a2[2];
      uint64_t v6 = (OZChannelBase **)a2[1];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
LABEL_47:
        }
          std::vector<double>::__throw_length_error[abi:ne180100]();
        uint64_t v9 = v5 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          CMTime v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        }
        else {
          CMTime v12 = 0;
        }
        CMTime v13 = (OZChannelBase **)&v12[8 * v8];
        __n128 v14 = &v12[8 * v11];
        const CMTime *v13 = v4;
        uint64_t v7 = v13 + 1;
        CMTime v16 = (char *)*a2;
        CMTime v15 = (char *)a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = (OZChannelBase *)*((void *)v15 - 1);
            v15 -= 8;
            *--CMTime v13 = v17;
          }
          while (v15 != v16);
          CMTime v15 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = v14;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v6 = v3;
        uint64_t v7 = v6 + 1;
      }
      a2[1] = v7;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v4, 0x4000))
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v4);
        if (ObjectManipulator)
        {
          if (v19)
          {
            int32_t v20 = v19;
            uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v19 + 272))(v19);
            if (v21)
            {
              double v22 = (unsigned int *)*((void *)v20 + 133);
              CMTime v23 = (unsigned int *)*((void *)v20 + 132);
              if (v23 != v22)
              {
                CMTime v24 = (OZScene *)v21;
                do
                {
                  Node = OZScene::getNode(v24, *v23);
                  if (Node)
                  {
                    long long v26 = Node;
                    CMTime v27 = (OZChannelFolder *)(*(uint64_t (**)(void *))(*Node + 640))(Node);
                    if (OZChannelFolder::testFoldFlag(v27, 0x4000)
                      && ((*(uint64_t (**)(void *, uint64_t))(v26[2] + 56))(v26 + 2, 1) & 1) == 0)
                    {
                      uint64_t v28 = (*(uint64_t (**)(void *))(*v26 + 640))(v26);
                      uint64_t v29 = v28;
                      uint64_t v31 = (uint64_t *)a2[1];
                      unint64_t v30 = (unint64_t)a2[2];
                      if ((unint64_t)v31 >= v30)
                      {
                        uint64_t v33 = ((char *)v31 - (unsigned char *)*a2) >> 3;
                        if ((unint64_t)(v33 + 1) >> 61) {
                          goto LABEL_47;
                        }
                        uint64_t v34 = v30 - (void)*a2;
                        uint64_t v35 = v34 >> 2;
                        if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
                          uint64_t v35 = v33 + 1;
                        }
                        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v36 = v35;
                        }
                        if (v36) {
                          CMTime v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v36);
                        }
                        else {
                          CMTime v37 = 0;
                        }
                        CMTime v38 = (uint64_t *)&v37[8 * v33];
                        *CMTime v38 = v29;
                        CMTime v32 = v38 + 1;
                        signed int v40 = (char *)*a2;
                        CMTime v39 = (char *)a2[1];
                        if (v39 != *a2)
                        {
                          do
                          {
                            uint64_t v41 = *((void *)v39 - 1);
                            v39 -= 8;
                            *--CMTime v38 = v41;
                          }
                          while (v39 != v40);
                          CMTime v39 = (char *)*a2;
                        }
                        *a2 = v38;
                        a2[1] = v32;
                        a2[2] = &v37[8 * v36];
                        if (v39) {
                          operator delete(v39);
                        }
                      }
                      else
                      {
                        uint64_t *v31 = v28;
                        CMTime v32 = v31 + 1;
                      }
                      a2[1] = v32;
                    }
                  }
                  ++v23;
                }
                while (v23 != v22);
              }
            }
          }
        }
      }
    }
  }
}

void OZRetimingUtil::RemapTimeValue(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t *a3@<X8>)
{
  if (OZRetimingUtil::CanRetimeFull((OZRetimingUtil *)this, a2))
  {
    memset(&v28, 0, sizeof(v28));
    uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
    double v10 = RetimingMath::figToFrames(a2, &v28, v9);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v29, this);
    CMTime v32 = v29;
    double v12 = RetimingMath::figToFrames((RetimingMath *)&v32, &v28, v11);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v29, this);
    CMTime v32 = v29;
    CMTime v31 = v30;
    PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)v27);
    double v14 = RetimingMath::figToFrames((RetimingMath *)v27, &v28, v13);
    if (!OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v15))
    {
      BOOL IsReversed = OZRetimingUtil::IsReversed((OZRetimingUtil *)this, v16);
      if (IsReversed) {
        double v10 = RetimingMath::reverse((RetimingMath *)IsReversed, v10, v12, v14);
      }
    }
    Float64 v18 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (1)
      {
        uint64_t v19 = (*(uint64_t (**)(void *, OZChannelBase *))(*v18 + 48))(v18, this);
        if (v19) {
          break;
        }
        Float64 v18 = (void *)v18[1];
        if (!v18) {
          goto LABEL_8;
        }
      }
      int32_t v20 = (OZChannel *)v19;
    }
    else
    {
LABEL_8:
      int32_t v20 = 0;
    }
    memset(&v29, 0, sizeof(v29));
    RetimingMath::framesToFig(&v29.value, (RetimingMath *)&v28, v10, (const CMTime *)v16);
    OZChannel::getValueAsDouble(v20, &v29, 0.0);
    double v23 = v22 + -1.0;
    double v24 = round(v23 + v23);
    double v25 = vabdd_f64(v24, v23 + v23);
    double v26 = v24 * 0.5;
    if (v25 <= 0.0009765625) {
      double v23 = v26;
    }
    RetimingMath::framesToFig(a3, (RetimingMath *)&v28, v23, v21);
  }
  else
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v29, this);
    CMTime v31 = v29;
    CMTime v32 = *(CMTime *)a2;
    PC_CMTimeSaferSubtract(&v32, &v31, (uint64_t)a3);
  }
}

BOOL anonymous namespace'::HasNaturalDuration(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 288))(ObjectManipulator);
  BOOL result = 0;
  if (v4)
  {
    if (v3)
    {
      (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)ObjectManipulator + 280))(&v8, ObjectManipulator);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v6);
      CMTime time1 = v8;
      *(__n128 *)&time2.CMTimeValue value = v6;
      time2.CMTimeEpoch epoch = v7;
      return CMTimeCompare(&time1, &time2) > 0;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::IsUsingRetimingBehaviors(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t ObjectManipulator = (char *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator) {
  if ((ObjectManipulator[1024] & 2) != 0)
  }
    return 0;
  uint64_t v3 = ObjectManipulator + 1000;
  char v4 = (char *)*((void *)ObjectManipulator + 126);
  if (v4 == ObjectManipulator + 1000) {
    return 0;
  }
  while (1)
  {
    unint64_t v5 = (const void *)*((void *)v4 + 2);
    if (v5)
    {
      if (v6)
      {
        if (v6[544]) {
          break;
        }
      }
    }
    char v4 = (char *)*((void *)v4 + 1);
    if (v4 == v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t OZRetimingUtil::IsAtDefaultRetimingState(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t v3 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    __n128 v6 = 0;
    unint64_t v5 = 0;
    char v4 = 0;
LABEL_23:
    CMTimeEpoch v7 = 0;
    goto LABEL_24;
  }
  do
  {
    char v4 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v3->var0 + 3))(v3, this);
    if (v4) {
      break;
    }
    uint64_t v3 = (OZChannel *)v3->var1;
  }
  while (v3);
  unint64_t v5 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    __n128 v6 = 0;
    uint64_t v3 = 0;
    goto LABEL_23;
  }
  do
  {
    uint64_t v3 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v5->var0 + 4))(v5, this);
    if (v3) {
      break;
    }
    unint64_t v5 = (OZChannel *)v5->var1;
  }
  while (v5);
  __n128 v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    unint64_t v5 = 0;
    goto LABEL_23;
  }
  do
  {
    unint64_t v5 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 5))(v6, this);
    if (v5) {
      break;
    }
    __n128 v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  __n128 v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead) {
    goto LABEL_23;
  }
  do
  {
    CMTimeEpoch v7 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 6))(v6, this);
    if (v7) {
      break;
    }
    __n128 v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  CMTime v8 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    __n128 v6 = 0;
    goto LABEL_25;
  }
  do
  {
    __n128 v6 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v8->var0 + 8))(v8, this);
    if (v6) {
      break;
    }
    CMTime v8 = (OZChannel *)v8->var1;
  }
  while (v8);
  uint64_t v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
LABEL_24:
    CMTime v8 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = (*(uint64_t (**)(void *, OZChannelBase *))(*v9 + 72))(v9, this);
    if (v10) {
      break;
    }
    uint64_t v9 = (void *)v9[1];
    if (!v9) {
      goto LABEL_24;
    }
  }
  CMTime v8 = (OZChannel *)v10;
LABEL_25:
  memset(&v33, 0, sizeof(v33));
  uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator(this);
  if (v7)
  {
    memset(&v32, 0, sizeof(v32));
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 40))(&v32, this, FrameDuration);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v30, this);
    if ((*((unsigned int (**)(OZChannel *))v7->var0 + 104))(v7) != 2) {
      return 0;
    }
    if (!OZChannel::useRetimingExtrapolation(v7)) {
      return 0;
    }
    double v29 = 0.0;
    memset(&v28, 0, sizeof(v28));
    CMTime v35 = v30;
    CMTime v34 = v32;
    PC_CMTimeSaferSubtract(&v35, &v34, (uint64_t)&v28);
    CMTime v35 = v30;
    CMTime v34 = v32;
    PC_CMTimeSaferSubtract(&v35, &v34, (uint64_t)&v27);
    double v15 = RetimingMath::figToFrames((RetimingMath *)&v27, &v33, v14);
    Keyframe = (void *)OZChannel::getKeyframe(v7, &v28);
    if (!Keyframe) {
      return 0;
    }
    uint64_t v17 = Keyframe;
    double v18 = v15 + 1.0;
    OZChannel::getKeyframe(v7, Keyframe, 0, &v29);
    if (vabdd_f64(v29, v15 + 1.0) >= 0.0000001) {
      return 0;
    }
    if (!OZChannel::isSmoothKeyframe(v7, v17)) {
      return 0;
    }
    CMTime v27 = v31;
    memset(&v26, 0, sizeof(v26));
    CMTime v35 = v28;
    CMTime v34 = v31;
    PC_CMTimeSaferAdd(&v35, &v34, (uint64_t)&v26);
    double v20 = RetimingMath::figToFrames((RetimingMath *)&v27, &v33, v19);
    uint64_t v21 = (void *)OZChannel::getKeyframe(v7, &v26);
    if (!v21) {
      return 0;
    }
    double v22 = v21;
    OZChannel::getKeyframe(v7, v21, 0, &v29);
    if (vabdd_f64(v29, v18 + v20) >= 0.0000001 || !OZChannel::isSmoothKeyframe(v7, v22)) {
      return 0;
    }
  }
  if (v4)
  {
    OZChannel::getValueAsDouble(v4, MEMORY[0x1E4F1FA48], 0.0);
    if (fabs(v23 + -1.0) >= 0.0000001) {
      return 0;
    }
  }
  if (v3 && OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0)) {
    return 0;
  }
  if (v5 && OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0)) {
    return 0;
  }
  if (v6 && OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0)) {
    return 0;
  }
  if (v8 && (OZChannel::getValueAsDouble(v8, MEMORY[0x1E4F1FA48], 0.0), fabs(v24) >= 0.0000001)) {
    return 0;
  }
  else {
    return 1;
  }
}

void OZRetimingUtil::FixForRemovedBehavior(OZChannelBase *this, CMTime *a2, const CMTime *a3)
{
  (*((void (**)(CMTime *__return_ptr))this->var0 + 89))(&v63);
  memset(&v62, 0, sizeof(v62));
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v62, this);
  memset(&v61, 0, sizeof(v61));
  memset(&v60, 0, sizeof(v60));
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  CMTime time1 = v63;
  CMTime time2 = v59;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
  CMTime time1 = v70;
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v57);
  memset(&v56, 0, sizeof(v56));
  CMTime time1 = v63;
  CMTime time2 = v58;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
  CMTime time1 = v70;
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v56);
  CMTime time1 = v61;
  CMTime time2 = v60;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
    CMTime time1 = v57;
    CMTime time2 = v56;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      CMTime v54 = v56;
      CMTime v55 = v56;
      goto LABEL_6;
    }
    CMTime v70 = v63;
    CMTime time1 = v63;
    CMTime time2 = v61;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      int v45 = &v61;
    }
    else
    {
      CMTime time1 = v70;
      CMTime time2 = v60;
      int32_t v44 = CMTimeCompare(&time1, &time2);
      int v45 = &v70;
      if (v44 > 0) {
        int v45 = &v60;
      }
    }
    CMTime v55 = *v45;
    CMTime time1 = v63;
    CMTime time2 = v64;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
    CMTime time1 = v70;
    CMTime time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v66);
    CMTime time1 = v66;
    CMTime time2 = v57;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      double v47 = &v57;
    }
    else
    {
      CMTime time1 = v66;
      CMTime time2 = v56;
      int32_t v46 = CMTimeCompare(&time1, &time2);
      double v47 = &v56;
      if (v46 <= 0) {
        double v47 = &v66;
      }
    }
    *(_OWORD *)&v54.CMTimeValue value = *(_OWORD *)&v47->value;
    CMTimeEpoch epoch = v47->epoch;
  }
  else
  {
    CMTime v55 = v61;
    CMTimeEpoch epoch = v61.epoch;
    *(_OWORD *)&v54.CMTimeValue value = *(_OWORD *)&v61.value;
  }
  v54.CMTimeEpoch epoch = epoch;
LABEL_6:
  CMTime time2 = v55;
  CMTime time1 = v54;
  CMTime v70 = v55;
  PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v65);
  CMTime time1 = v65;
  CMTime v70 = *a2;
  PC_CMTimeSaferAdd(&time1, &v70, (uint64_t)&v66);
  CMTime v53 = v66;
  CMTime time1 = v63;
  CMTime v70 = time2;
  if (CMTimeCompare(&time1, &v70) || (time1 = v64, CMTime v70 = v53, CMTimeCompare(&time1, &v70)))
  {
    *(void *)&v66.timescale = 0;
    v66.CMTimeEpoch epoch = 0;
    v66.CMTimeValue value = (CMTimeValue)&v66.timescale;
    memset(&v70, 0, sizeof(v70));
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = operator new(8uLL);
      *uint64_t v10 = v9;
      *(void *)&v70.timescale = v10 + 1;
      v70.CMTimeEpoch epoch = (CMTimeEpoch)(v10 + 1);
      v70.CMTimeValue value = (CMTimeValue)v10;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v9, 0x4000))
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v9);
        if (ObjectManipulator)
        {
          if (v12)
          {
            CMTime v13 = v12;
            double v14 = (OZScene *)(*(uint64_t (**)(void *))(*(void *)v12 + 272))(v12);
            if (v14)
            {
              double v15 = (unsigned int *)*((void *)v13 + 133);
              for (uint64_t i = (unsigned int *)*((void *)v13 + 132); i != v15; ++i)
              {
                Node = OZScene::getNode(v14, *i);
                double v18 = Node;
                if (Node)
                {
                  uint64_t v19 = (OZChannelFolder *)(*(uint64_t (**)(void *))(*Node + 640))(Node);
                  if (OZChannelFolder::testFoldFlag(v19, 0x4000)
                    && ((*(uint64_t (**)(void *, uint64_t))(v18[2] + 56))(v18 + 2, 1) & 1) == 0)
                  {
                    uint64_t v20 = (*(uint64_t (**)(void *))(*v18 + 640))(v18);
                    {
                      uint64_t v21 = *(void *)&v70.timescale;
                      if (*(void *)&v70.timescale >= v70.epoch)
                      {
                        CMTimeValue v23 = (*(void *)&v70.timescale - v70.value) >> 3;
                        if ((unint64_t)(v23 + 1) >> 61) {
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v24 = (v70.epoch - v70.value) >> 2;
                        if (v24 <= v23 + 1) {
                          unint64_t v24 = v23 + 1;
                        }
                        if (v70.epoch - v70.value >= 0x7FFFFFFFFFFFFFF8uLL) {
                          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v8 = v24;
                        }
                        if (v8) {
                          double v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v70.epoch, v8);
                        }
                        else {
                          double v25 = 0;
                        }
                        CMTime v26 = (uint64_t *)&v25[8 * v23];
                        *CMTime v26 = v20;
                        double v22 = v26 + 1;
                        CMTimeValue value = v70.value;
                        CMTime v27 = *(char **)&v70.timescale;
                        if (*(void *)&v70.timescale != v70.value)
                        {
                          do
                          {
                            uint64_t v29 = *((void *)v27 - 1);
                            v27 -= 8;
                            *--CMTime v26 = v29;
                          }
                          while (v27 != (char *)value);
                          CMTime v27 = (char *)v70.value;
                        }
                        v70.CMTimeValue value = (CMTimeValue)v26;
                        *(void *)&v70.timescale = v22;
                        v70.CMTimeEpoch epoch = (CMTimeEpoch)&v25[8 * v8];
                        if (v27) {
                          operator delete(v27);
                        }
                      }
                      else
                      {
                        **(void **)&v70.timescale = v20;
                        double v22 = (void *)(v21 + 8);
                      }
                      *(void *)&v70.timescale = v22;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    CMTime v30 = (unint64_t *)v70.value;
    CMTime v31 = *(unint64_t **)&v70.timescale;
    if (v70.value != *(void *)&v70.timescale)
    {
      do
      {
        time1.CMTimeValue value = (CMTimeValue)v30;
        CMTime v32 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>((uint64_t **)&v66, v30, (uint64_t)&std::piecewise_construct, &time1);
        (*(void (**)(CMTime *__return_ptr))(*(void *)*v30 + 320))(&time1);
        *(CMTime *)(v32 + 11) = time1;
        (*(void (**)(CMTime *__return_ptr))(*(void *)*v30 + 712))(&time1);
        if (v32 + 5 != (uint64_t **)&time1)
        {
          *(CMTime *)(v32 + 5) = time1;
          *((_OWORD *)v32 + 4) = v68;
          v32[10] = v69;
        }
        *((CMTime *)v32 + 5) = time1;
        ++v30;
      }
      while (v30 != v31);
      CMTime v30 = (unint64_t *)v70.value;
    }
    if (v30)
    {
      *(void *)&v70.timescale = v30;
      operator delete(v30);
    }
    CMTimeValue v35 = v66.value;
    if ((CMTimeScale *)v66.value != &v66.timescale)
    {
      unint64_t v36 = (CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        CMTime v37 = *(OZRetimingUtil **)(v35 + 32);
        BOOL CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(v37, (OZChannelObjectRoot *)v8);
        if (OZRetimingUtil::GetTimeRemap(v37, v39)) {
          BOOL CanRetimeSimple = 0;
        }
        CMTime v65 = *v36;
        if (CanRetimeSimple)
        {
          OZRetimingUtil::GetLoopOffset((OZChannelBase *)v37, &v49);
          CMTime v70 = v63;
          CMTime time1 = v49;
          PC_CMTimeSaferAdd(&time1, &v70, (uint64_t)&v50);
          CMTime time1 = v50;
          CMTime v70 = v62;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v51);
          CMTime v65 = v51;
        }
        OZChannelObjectRootBase::setTimeExtent(v37, (const PCTimeRange *)&time2, 0);
        OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)v37, 0, 1, 1, 1, 1);
        if (CanRetimeSimple)
        {
          CMTime v70 = time2;
          CMTime time1 = v65;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v51);
          CMTime time1 = v51;
          CMTime v70 = v62;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v48);
        }
        uint64_t v41 = *(CMTime **)(v35 + 8);
        if (v41)
        {
          do
          {
            uint64_t v42 = v41;
            uint64_t v41 = (CMTime *)v41->value;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = *(CMTime **)(v35 + 16);
            BOOL v43 = v42->value == v35;
            CMTimeValue v35 = (CMTimeValue)v42;
          }
          while (!v43);
        }
        CMTimeValue v35 = (CMTimeValue)v42;
      }
      while (v42 != (CMTime *)&v66.timescale);
    }
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v66, *(void **)&v66.timescale);
  }
}

void sub_1B7C81BE4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(v1 - 200, *(void **)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t OZRetimingUtil::FixLoadedRetimingState(OZRetimingUtil *this, OZChannelObjectRoot *a2, const CMTime *a3)
{
  uint64_t result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if (result)
  {
    uint64_t result = OZRetimingUtil::GetTimeRemap(this, v6);
    int v7 = result;
    if (!result)
    {
      OZRetimingUtil::GetLoopOffset((OZChannelBase *)this, &v36);
      uint64_t v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
      {
        while (1)
        {
          uint64_t v10 = (OZChannel *)(*(uint64_t (**)(void *, OZRetimingUtil *))(*v9 + 48))(v9, this);
          if (v10) {
            break;
          }
          uint64_t v9 = (void *)v9[1];
          if (!v9) {
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        uint64_t v10 = 0;
      }
      uint64_t result = OZChannel::setUseRetimingExtrapolation(v10, 1);
    }
    unint64_t v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (1)
      {
        uint64_t result = (*(uint64_t (**)(void *, OZRetimingUtil *))(*v11 + 80))(v11, this);
        if (result) {
          break;
        }
        unint64_t v11 = (void *)v11[1];
        if (!v11) {
          return result;
        }
      }
      uint64_t v12 = result;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 496))(result, 1);
      if ((result & 1) == 0)
      {
        memset(&v35, 0, sizeof(v35));
        memset(&v34, 0, sizeof(v34));
        uint64_t ObjectManipulator = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
        CMTime time1 = v35;
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        if (CMTimeCompare(&time1, &time2))
        {
          memset(&v33, 0, sizeof(v33));
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)this + 712))(&time1, this);
          __n128 v39 = *(__n128 *)&time1.value;
          CMTimeEpoch epoch = time1.epoch;
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)this + 320))(&v32, this);
          *(__n128 *)&time2.CMTimeValue value = v39;
          time2.CMTimeEpoch epoch = epoch;
          CMTime v41 = v32;
          PC_CMTimeSaferSubtract(&time2, &v41, (uint64_t)&v33);
          memset(&v32, 0, sizeof(v32));
          CMTime time1 = v35;
          CMTime time2 = v33;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
          if (!v7)
          {
            CMTime v27 = &v32;
            goto LABEL_27;
          }
          memset(&v31, 0, sizeof(v31));
          double TimeScale = OZRetimingUtil::GetTimeScale(this, v15);
          v18.n128_f64[0] = operator/((long long *)&v32.value, (uint64_t)&v31, TimeScale);
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *, __n128))(*(void *)this + 712))(&time1, this, v18);
          memset(&v41, 0, sizeof(v41));
          operator*(&v34, &v41, 0.5);
          CMTime time1 = v31;
          CMTime time2 = v41;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
          *(__n128 *)&time1.CMTimeValue value = v39;
          time1.CMTimeEpoch epoch = epoch;
          CMTime time2 = v34;
          PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v29);
          CMTime time1 = v30;
          CMTime time2 = v29;
          if (CMTimeCompare(&time1, &time2) >= 0) {
            uint64_t v20 = &v30;
          }
          else {
            uint64_t v20 = &v29;
          }
          CMTime v41 = *v20;
          if (OZRetimingUtil::GetEndCondition(this, v19))
          {
            OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v39);
            CMTime time1 = v41;
            *(__n128 *)&time2.CMTimeValue value = v39;
            time2.CMTimeEpoch epoch = epoch;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
          }
        }
        else
        {
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)this + 712))(&time1, this);
          CMTime v41 = v38;
          if (v7 == 1 && OZRetimingUtil::GetEndCondition(this, v21))
          {
            __n128 v39 = 0uLL;
            CMTimeEpoch epoch = 0;
            double v22 = (_anonymous_namespace_ *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
            OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v32);
            CMTime time1 = v32;
            *(__n128 *)&time2.CMTimeValue value = v39;
            time2.CMTimeEpoch epoch = epoch;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v33);
            CMTime time1 = v41;
            CMTime time2 = v33;
            int32_t v24 = CMTimeCompare(&time1, &time2);
            double v25 = &v41;
            if (v24 < 0) {
              double v25 = &v33;
            }
            long long v26 = *(_OWORD *)&v25->value;
            v41.CMTimeEpoch epoch = v25->epoch;
            *(_OWORD *)&v41.CMTimeValue value = v26;
          }
        }
        CMTime v27 = &v41;
LABEL_27:
        Float64 v28 = RetimingMath::figToFrames((RetimingMath *)v27, &v34, v16);
        return (*(uint64_t (**)(uint64_t, void, void, Float64))(*(void *)v12 + 712))(v12, MEMORY[0x1E4F1FA48], 0, v28);
      }
    }
  }
  return result;
}

uint64_t OZRetimingUtil::FixLoopOffset(OZRetimingUtil *this, OZChannelObjectRoot *a2, const CMTime *a3)
{
  uint64_t result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if (result)
  {
    uint64_t result = OZRetimingUtil::GetTimeRemap(this, v6);
    if (!result)
    {
      uint64_t result = OZRetimingUtil::GetEndCondition(this, v7);
      if (result)
      {
        (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(void *)this + 712))(&time1, this);
        CMTime v19 = v18;
        memset(&v16, 0, sizeof(v16));
        OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v16);
        CMTime time1 = v19;
        CMTime time2 = *(CMTime *)a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
        CMTime time1 = v16;
        CMTime time2 = v15;
        uint64_t result = CMTimeCompare(&time1, &time2);
        if ((int)result >= 1)
        {
          CMTime time1 = v19;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
          CMTime v16 = v15;
          CMTime time1 = v15;
          uint64_t v9 = (CMTime *)MEMORY[0x1E4F1FA48];
          CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          if (CMTimeCompare(&time1, &time2) < 0) {
            CMTime v16 = *v9;
          }
          unint64_t v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
          if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
          {
            while (1)
            {
              uint64_t v12 = (*(uint64_t (**)(void *, OZRetimingUtil *))(*v11 + 72))(v11, this);
              if (v12) {
                break;
              }
              unint64_t v11 = (void *)v11[1];
              if (!v11) {
                goto LABEL_11;
              }
            }
            uint64_t v13 = v12;
          }
          else
          {
LABEL_11:
            uint64_t v13 = 0;
          }
          Float64 v14 = RetimingMath::figToFrames((RetimingMath *)&v16, (const CMTime *)a2, v10);
          return (*(uint64_t (**)(uint64_t, void, void, Float64))(*(void *)v13 + 712))(v13, MEMORY[0x1E4F1FA48], 0, v14);
        }
      }
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetRetimeNaturalDurationFlags(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  if (!OZRetimingUtil::CanRetimeSimple(this, a2)) {
    return 0;
  }
  BOOL CanRetimeFull = OZRetimingUtil::CanRetimeFull(this, v3);
  unsigned int v7 = 4 * (OZRetimingUtil::GetEndCondition(this, v5) != 0);
  uint64_t v8 = v7;
  if (CanRetimeFull)
  {
    uint64_t v8 = 6;
    if (OZRetimingUtil::GetTimeRemap(this, v6) != 1)
    {
      if (OZRetimingUtil::IsUsingRetimingBehaviors((OZChannelBase *)this, v9)) {
        return 6;
      }
      else {
        return v7;
      }
    }
  }
  return v8;
}

uint64_t OZRetimingUtil::RetimingExaminer::RetimingExaminer(uint64_t this)
{
  uint64_t v1 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  *(void *)(this + 8) = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  *(void *)(this + 16) = 0;
  if (v1) {
    v1[2] = this;
  }
  OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)this;
  *(void *)this = &unk_1F114E828;
  return this;
}

void OZRetimingUtil::RetimingExaminer::~RetimingExaminer(OZRetimingUtil::RetimingExaminer *this)
{
  *(void *)this = &unk_1F114E8B8;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    *(void *)(v1 + 8) = v2;
    uint64_t v2 = *((void *)this + 1);
    if (!v2) {
      return;
    }
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((void *)this + 1);
    if (!v2) {
      return;
    }
  }
  *(void *)(v2 + 16) = v1;
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)this = &unk_1F114E8B8;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    *(void *)(v1 + 8) = v2;
    uint64_t v2 = *((void *)this + 1);
    if (!v2) {
      return;
    }
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((void *)this + 1);
    if (!v2) {
      return;
    }
  }
  *(void *)(v2 + 16) = v1;
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)this = &unk_1F114E8B8;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    *(void *)(v1 + 8) = v2;
    uint64_t v2 = *((void *)this + 1);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((void *)this + 1);
    if (!v2) {
      goto LABEL_6;
    }
  }
  *(void *)(v2 + 16) = v1;
LABEL_6:
  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimingGroupChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeScaleChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeReverseChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeRemapChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getRetimeFrameChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getRetimeFrameCacheChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getEndConditionChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getLoopDurationChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getDurationCacheChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

BOOL anonymous namespace'::HasEndCondition(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  BOOL result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if (result) {
    return !OZRetimingUtil::GetTimeRemap(this, v4)
  }
        && OZRetimingUtil::GetEndCondition(this, v5) != 0;
  return result;
}

uint64_t anonymous namespace'::EditableRoot(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  if (OZChannelBase::isLocked(this, 1)) {
    return 0;
  }
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  unint64_t v5 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator) + 8);
  long long v8 = xmmword_1B7E78280;
  int isKindOfClass = OZFactory::isKindOfClass(v5, (int32x4_t *)&v8);
  BOOL v7 = !OZChannelBase::testFlag(this, 2)
    && !OZChannelBase::testFlag(this, 0x10000)
    && !OZChannelBase::testFlag(this, 32);
  return isKindOfClass | v7;
}

uint64_t anonymous namespace'::ScaleKeyframes(OZChannelBase *this, OZChannelObjectRoot *a2, const CMTime *a3, const CMTime *a4, double a5)
{
  if (result)
  {
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
    if (v11)
    {
      uint64_t v13 = *(OZChannelBase **)(v11 + 1504);
      if (v13) {
        OZChannelBase::setRangeName(v13, (const PCString *)1);
      }
    }
  }
  return result;
}

__n128 anonymous namespace'::GetFrameDuration@<Q0>(_anonymous_namespace_ *this@<X0>, OZObjectManipulator *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_ *, OZObjectManipulator *))(*(void *)this + 264))(this, a2);
  if (v4)
  {
    unint64_t v5 = (OZSceneSettings *)(v4 + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v5, a3).n128_u64[0];
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a3 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a3[1].n128_u64[0] = *(void *)(v7 + 16);
  }
  return result;
}

BOOL anonymous namespace'::HasNaturalDurationAndHardOutPoint(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  if (result)
  {
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    return ((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 288))(ObjectManipulator) & 4) == 0;
  }
  return result;
}

double anonymous namespace'::SafeGetTimeScale(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  if (!OZRetimingUtil::CanRetimeSimple(this, a2) || OZRetimingUtil::GetTimeRemap(this, v3)) {
    return 1.0;
  }

  return OZRetimingUtil::GetTimeScale(this, v4);
}

__n128 anonymous namespace'::ScaleNaturalDuration@<Q0>(_anonymous_namespace_ *this@<X0>, CMTime *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  operator/((long long *)this, (uint64_t)&v9, a3);
  memset(&v12, 0, sizeof(v12));
  operator*(a2, &v12, 0.5);
  CMTime time1 = v9;
  CMTime time2 = v12;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v11);
  CMTime time1 = v11;
  CMTime time2 = *a2;
  PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v10);
  CMTime time1 = *a2;
  CMTime time2 = v10;
  if (CMTimeCompare(&time1, &time2) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = &v10;
  }
  __n128 result = *(__n128 *)&v7->value;
  *(_OWORD *)a4 = *(_OWORD *)&v7->value;
  *(void *)(a4 + 16) = v7->epoch;
  return result;
}

void anonymous namespace'::OffsetKeyframesAndMarkers(_anonymous_namespace_ *this, CMTime *a2, const CMTime *a3)
{
  uint64_t v5 = *((void *)this + 14);
  if (!v5) {
    goto LABEL_12;
  }
  __n128 v6 = *(const void ***)v5;
  unint64_t v7 = *(void *)(v5 + 8);
  if (*(void *)v5 >= v7) {
    goto LABEL_12;
  }
  do
  {
    long long v8 = *v6;
    if (*v6)
    {
      if (v9)
      {
        CMTime v10 = (OZChannel *)v9;
        if (!OZChannelBase::testFlag(v9, 0x20000))
        {
          (*((void (**)(OZChannel *, uint64_t))v10->var0 + 58))(v10, 1);
          OZChannel::linearTimeWarp(v10, 1.0, a2);
        }
      }
      else
      {
        if (v11)
        {
          CMTime v12 = v11;
        }
      }
    }
    ++v6;
  }
  while ((unint64_t)v6 < v7);
  if (this)
  {
LABEL_12:
    if (v14)
    {
      uint64_t v15 = v14[27];
      if (v15)
      {
        v26[0] = 0;
        v26[1] = 0;
        double v25 = (uint64_t *)v26;
        CMTime v18 = *(uint64_t **)(v15 + 8);
        CMTime v16 = (uint64_t *)(v15 + 8);
        uint64_t v17 = v18;
        if (v18 != v16 + 1)
        {
          do
          {
            OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v23, (const OZTimeMarker *)(v17 + 4));
            CMTime v28 = v24;
            CMTime v27 = *a2;
            PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v22);
            CMTime v24 = v22;
            std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(&v25, (uint64_t)&v23, (const OZTimeMarker *)&v23);
            OZTimeMarker::~OZTimeMarker(&v23);
            CMTime v19 = (uint64_t *)v17[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                CMTime v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = (uint64_t *)v17[2];
                BOOL v21 = *v20 == (void)v17;
                uint64_t v17 = v20;
              }
              while (!v21);
            }
            uint64_t v17 = v20;
          }
          while (v20 != v16 + 1);
        }
        std::__tree<OZTimeMarker>::swap(v16, (uint64_t)&v25);
        std::__tree<OZGuide>::destroy((uint64_t)&v25, v26[0]);
      }
    }
  }
}

void sub_1B7C82C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23)
{
}

uint64_t *std::__tree<OZTimeMarker>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    __n128 result = (uint64_t *)(*v3 + 16);
  }
  *__n128 result = (uint64_t)v3;
  __n128 v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    __n128 v6 = (void *)a2;
  }
  *__n128 v6 = a2 + 8;
  return result;
}

double anonymous namespace'::SafeGetLoopOffset@<D0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, void *a3@<X8>)
{
  if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, a2)
    && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v5))
  {
    return OZRetimingUtil::GetLoopOffset(this, a3);
  }
  else
  {
    (*((void (**)(void *__return_ptr, OZChannelBase *))this->var0 + 89))(v7, this);
    double result = *(double *)&v8;
    *(_OWORD *)a3 = v8;
    a3[2] = v9;
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  __n128 v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        __n128 v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      __n128 v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    CMTime v11 = (char *)operator new(0xA8uLL);
    *((void *)v11 + 4) = **a4;
    CMTime v12 = (long long *)MEMORY[0x1E4F1FA48];
    uint64_t v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *((void *)v11 + 7) = v13;
    long long v14 = *v12;
    *(_OWORD *)(v11 + 40) = *v12;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((void *)v11 + 10) = v13;
    *((_OWORD *)v11 + 4) = v14;
    *((void *)v11 + 17) = 0;
    *((void *)v11 + 18) = 0;
    *((void *)v11 + 19) = 0;
    *((void *)v11 + 20) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *anonymous namespace'::CollectDependentRootsOf<anonymous namespace'::SameEndPred>(void *result, uint64_t a2, void **a3)
{
  uint64_t v3 = *(void ****)(a2 + 112);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      uint64_t v7 = (uint64_t)result;
      uint64_t v24 = (uint64_t)(a3 + 2);
      do
      {
        double result = *v4;
        if (*v4)
        {
          if (result)
          {
            unint64_t v8 = result;
            if (v9)
            {
              uint64_t v11 = (uint64_t)v9;
              {
                {
                  uint64_t v13 = (uint64_t *)a3[1];
                  unint64_t v12 = (unint64_t)a3[2];
                  if ((unint64_t)v13 >= v12)
                  {
                    uint64_t v15 = ((char *)v13 - (unsigned char *)*a3) >> 3;
                    if ((unint64_t)(v15 + 1) >> 61) {
                      std::vector<double>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v16 = v12 - (void)*a3;
                    uint64_t v17 = v16 >> 2;
                    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
                      uint64_t v17 = v15 + 1;
                    }
                    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v18 = v17;
                    }
                    if (v18) {
                      CMTime v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v24, v18);
                    }
                    else {
                      CMTime v19 = 0;
                    }
                    uint64_t v20 = (uint64_t *)&v19[8 * v15];
                    uint64_t *v20 = v11;
                    long long v14 = v20 + 1;
                    CMTime v22 = (char *)*a3;
                    BOOL v21 = (char *)a3[1];
                    if (v21 != *a3)
                    {
                      do
                      {
                        uint64_t v23 = *((void *)v21 - 1);
                        v21 -= 8;
                        *--uint64_t v20 = v23;
                      }
                      while (v21 != v22);
                      BOOL v21 = (char *)*a3;
                    }
                    *a3 = v20;
                    a3[1] = v14;
                    a3[2] = &v19[8 * v18];
                    if (v21) {
                      operator delete(v21);
                    }
                  }
                  else
                  {
                    uint64_t *v13 = v11;
                    long long v14 = v13 + 1;
                  }
                  a3[1] = v14;
                }
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

BOOL anonymous namespace'::SameEndPred::operator()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)a1 + 712))(v7);
  v5[0] = v7[0];
  CMTime time1 = v7[1];
  v3.n128_f64[0] = PC_CMTimeSaferAdd(v5, &time1, (uint64_t)&v8);
  (*(void (**)(CMTime *__return_ptr, uint64_t, __n128))(*(void *)a2 + 712))(v5, a2, v3);
  CMTime time1 = v5[0];
  CMTime time2 = v5[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v6);
  CMTime time1 = v8;
  CMTime time2 = v6;
  return CMTimeCompare(&time1, &time2) == 0;
}

void *anonymous namespace'::CollectDependentRootsOf<anonymous namespace'::SameTimeExtentPred>(void *result, uint64_t a2, void **a3)
{
  __n128 v3 = *(void ****)(a2 + 112);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      uint64_t v7 = (uint64_t)result;
      uint64_t v24 = (uint64_t)(a3 + 2);
      do
      {
        double result = *v4;
        if (*v4)
        {
          if (result)
          {
            CMTime v8 = result;
            if (v9)
            {
              uint64_t v11 = (uint64_t)v9;
              {
                {
                  uint64_t v13 = (uint64_t *)a3[1];
                  unint64_t v12 = (unint64_t)a3[2];
                  if ((unint64_t)v13 >= v12)
                  {
                    uint64_t v15 = ((char *)v13 - (unsigned char *)*a3) >> 3;
                    if ((unint64_t)(v15 + 1) >> 61) {
                      std::vector<double>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v16 = v12 - (void)*a3;
                    uint64_t v17 = v16 >> 2;
                    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
                      uint64_t v17 = v15 + 1;
                    }
                    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v18 = v17;
                    }
                    if (v18) {
                      CMTime v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v24, v18);
                    }
                    else {
                      CMTime v19 = 0;
                    }
                    uint64_t v20 = (uint64_t *)&v19[8 * v15];
                    uint64_t *v20 = v11;
                    long long v14 = v20 + 1;
                    CMTime v22 = (char *)*a3;
                    BOOL v21 = (char *)a3[1];
                    if (v21 != *a3)
                    {
                      do
                      {
                        uint64_t v23 = *((void *)v21 - 1);
                        v21 -= 8;
                        *--uint64_t v20 = v23;
                      }
                      while (v21 != v22);
                      BOOL v21 = (char *)*a3;
                    }
                    *a3 = v20;
                    a3[1] = v14;
                    a3[2] = &v19[8 * v18];
                    if (v21) {
                      operator delete(v21);
                    }
                  }
                  else
                  {
                    uint64_t *v13 = v11;
                    long long v14 = v13 + 1;
                  }
                  a3[1] = v14;
                }
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

BOOL anonymous namespace'::SameTimeExtentPred::operator()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)a1 + 712))(v5);
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)a2 + 712))(v4, a2);
  CMTime time1 = v5[0];
  CMTime time2 = v4[0];
  if (CMTimeCompare(&time1, &time2)) {
    return 0;
  }
  CMTime time1 = v5[1];
  CMTime time2 = v4[1];
  return CMTimeCompare(&time1, &time2) == 0;
}

void OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::~StaticListNode(void *a1)
{
  *a1 = &unk_1F114E8B8;
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1)
  {
    *(void *)(v1 + 8) = v2;
    uint64_t v2 = a1[1];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)a1[1];
    if (!v2) {
      goto LABEL_6;
    }
  }
  *(void *)(v2 + 16) = v1;
LABEL_6:
  JUMPOUT(0x1BA9BFBA0);
}

void OZRotoshape::OZRotoshape(OZRotoshape *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F114E8D8;
  *(void *)(v5 + 200) = &unk_1F114EB70;
  *(void *)(v5 + 216) = &unk_1F114F448;
  *(void *)(v5 + 248) = &unk_1F114F6A0;
  *(void *)(v5 + 6728) = &unk_1F114F6F8;
  OZMoShape::OZMoShape((OZMoShape *)(v5 + 18976), this, (OZChannelFolder *)(v5 + 256), (OZChannelFolder *)(v5 + 648), 0x161u);
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 38128);
  *((void *)this + 4765) = 0;
  *((unsigned char *)this + 38114) = 0;
  *((_WORD *)this + 19056) = 0;
  *((unsigned char *)this + 38098) = 0;
  *((_WORD *)this + 19048) = 0;
  *((void *)this + 4763) = 0x4014000000000000;
}

void sub_1B7C8363C(_Unwind_Exception *a1)
{
  OZMoShape::~OZMoShape(v2);
  OZLockingElement::~OZLockingElement(v1);
  _Unwind_Resume(a1);
}

void OZLockingElement::~OZLockingElement(OZLockingElement *this)
{
  *(void *)this = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

void OZRotoshape::OZRotoshape(OZRotoshape *this, const OZRotoshape *a2, uint64_t a3)
{
  unsigned int v3 = a3;
  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *(void *)uint64_t v6 = &unk_1F114E8D8;
  *(void *)(v6 + 200) = &unk_1F114EB70;
  *(void *)(v6 + 216) = &unk_1F114F448;
  *(void *)(v6 + 248) = &unk_1F114F6A0;
  *(void *)(v6 + 6728) = &unk_1F114F6F8;
  OZMoShape::OZMoShape((OZMoShape *)(v6 + 18976), (const OZRotoshape *)((char *)a2 + 18976), this, (OZChannelFolder *)(v6 + 256), (OZChannelFolder *)(v6 + 648), 0x161u, v3);
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 38128);
  *((void *)this + 4765) = 0;
  *((unsigned char *)this + 38114) = 0;
  *((_WORD *)this + 19056) = 0;
  *((unsigned char *)this + 38096) = *((unsigned char *)a2 + 38096);
  *(_WORD *)((char *)this + 38097) = *(_WORD *)((char *)a2 + 38097);
  *((void *)this + 4763) = *((void *)a2 + 4763);
}

void sub_1B7C83800(_Unwind_Exception *a1)
{
  OZMoShape::~OZMoShape(v2);
  OZLockingElement::~OZLockingElement(v1);
  _Unwind_Resume(a1);
}

void OZRotoshape::~OZRotoshape(OZRotoshape *this)
{
  *(void *)this = &unk_1F114E8D8;
  uint64_t v2 = (OZElement *)((char *)this + 200);
  *((void *)this + 25) = &unk_1F114EB70;
  *((void *)this + 27) = &unk_1F114F448;
  *((void *)this + 31) = &unk_1F114F6A0;
  *((void *)this + 841) = &unk_1F114F6F8;
  unsigned int v3 = (OZRotoshape *)((char *)this + 18976);
  OZMoShape::resetParticlePaint((OZRotoshape *)((char *)this + 18976));
  OZValueCache<OZBoundsCacheItem>::~OZValueCache((uint64_t)this + 38128);
  OZMoShape::~OZMoShape(v3);
  OZElement::~OZElement(v2);
  *(void *)this = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

{
  uint64_t vars8;

  OZRotoshape::~OZRotoshape(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRotoshape::~OZRotoshape(OZRotoshape *this)
{
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 216));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 248));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 6728));
}

{
  uint64_t vars8;

  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

double OZRotoshape::operator=(uint64_t a1, const void *a2)
{
  OZElement::operator=(a1 + 200, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4 + 38096;
  OZMoShape::operator=(a1 + 18976, (uint64_t)(v4 + 18976));
  *(void *)(a1 + 38120) = 0;
  *(unsigned char *)(a1 + 38114) = 0;
  *(_WORD *)(a1 + 38112) = 0;
  *(unsigned char *)(a1 + 38096) = *v5;
  *(_WORD *)(a1 + 38097) = *(_WORD *)(v5 + 1);
  double result = *((double *)v5 + 1);
  *(double *)(a1 + 38104) = result;
  return result;
}

double non-virtual thunk to'OZRotoshape::operator=(uint64_t a1, const void *a2)
{
  return OZRotoshape::operator=(a1 - 200, a2);
}

void OZRotoshape::applyStyle(OZRotoshape *this, const OZRotoshape *a2)
{
  uint64_t v4 = (unsigned __int8 *)a2 + 38096;
  uint64_t v5 = (char *)this + 38096;
  uint64_t v6 = *(void *)this;
  if ((*((unsigned char *)a2 + 1224) & 8) != 0) {
    (*(void (**)(OZRotoshape *))(v6 + 432))(this);
  }
  else {
    (*(void (**)(OZRotoshape *))(v6 + 440))(this);
  }
  OZMoShape::applyStyle((OZRotoshape *)((char *)this + 18976), (const OZRotoshape *)((char *)a2 + 18976));
  *(_WORD *)(v5 + 17) = 0;
  *((void *)v5 + 3) = 0;
  CMTime v5[2] = v4[2];
  *(_WORD *)uint64_t v5 = *v4;
}

uint64_t OZRotoshape::isSimulationGroup(OZRotoshape *this)
{
  uint64_t v2 = *((void *)this + 4733);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E4F1FA48], 0.0);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1)) {
    return 0;
  }
  if ((ValueAsInt - 1) > 1 || v2 == 0) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 152);

  return v6(v2);
}

uint64_t non-virtual thunk to'OZRotoshape::isSimulationGroup(OZRotoshape *this)
{
  return OZRotoshape::isSimulationGroup((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::acceptsShapeMasks(OZRotoshape *this)
{
  OZRenderState::OZRenderState(&v11);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  CMTime var0 = (CMTime)v11.var0;
  BOOL var10 = v11.var10;
  BOOL var16 = v11.var16;
  long long v8 = *(_OWORD *)&v11.var1;
  int v9 = 1;
  int shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  uint64_t v3 = *((void *)this + 4733);
  if (v3) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
  return shouldDrawParticles & v3 ^ 1;
}

void sub_1B7C83DC4(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::acceptsShapeMasks(OZRotoshape *this)
{
  return OZRotoshape::acceptsShapeMasks((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::restrictImageMaskToStencil(OZRotoshape *this)
{
  OZRenderState::OZRenderState(&v11);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  CMTime var0 = (CMTime)v11.var0;
  BOOL var10 = v11.var10;
  BOOL var16 = v11.var16;
  long long v8 = *(_OWORD *)&v11.var1;
  int v9 = 1;
  int shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  uint64_t v3 = *((void *)this + 4733);
  if (v3) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
  return shouldDrawParticles & v3;
}

void sub_1B7C83EA8(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::restrictImageMaskToStencil(OZRotoshape *this)
{
  return OZRotoshape::restrictImageMaskToStencil((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::setScene(OZRotoshape *this, OZScene *a2)
{
  OZSceneNode::setScene((void *)this + 25, (uint64_t)a2);
  uint64_t result = *((void *)this + 4732);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 280);
    return v4();
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::setScene(OZRotoshape *this, OZScene *a2)
{
  return OZRotoshape::setScene((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::setIsMask(OZRotoshape *this)
{
  OZElement::setIsMask((OZElement *)((char *)this + 200));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7032), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8432), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2152), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17720), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2440), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2592), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2896), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5080), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6408), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8584), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10136), 2, 0);

  return OZShape::setIsMask((OZRotoshape *)((char *)this + 18976));
}

uint64_t non-virtual thunk to'OZRotoshape::setIsMask(OZRotoshape *this)
{
  return OZRotoshape::setIsMask((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::clearIsMask(OZRotoshape *this)
{
  OZElement::clearIsMask((OZElement *)((char *)this + 200));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7032), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8432), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2152), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 17720), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2440), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2592), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2896), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5080), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6408), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8584), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10136), 2, 0);

  return OZShape::clearIsMask((OZRotoshape *)((char *)this + 18976));
}

uint64_t non-virtual thunk to'OZRotoshape::clearIsMask(OZRotoshape *this)
{
  return OZRotoshape::clearIsMask((OZRotoshape *)((char *)this - 200));
}

__n128 OZRotoshape::getNaturalDuration@<Q0>(OZRotoshape *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    uint64_t v4 = (OZSceneSettings *)((*(uint64_t (**)(char *))(*(void *)v3 + 272))(v3) + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZRotoshape::getNaturalDuration@<D0>(OZRotoshape *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = OZRotoshape::getNaturalDuration((OZRotoshape *)((char *)this - 216), a2).n128_u64[0];
  return result;
}

uint64_t OZRotoshape::getNaturalDurationFlags(OZRotoshape *this)
{
  return 6;
}

uint64_t non-virtual thunk to'OZRotoshape::getNaturalDurationFlags(OZRotoshape *this)
{
  return 6;
}

uint64_t OZRotoshape::isFourCornerPinned(OZRotoshape *this)
{
  uint64_t v2 = *((void *)this + 4733);
  if (v2) {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) ^ 1;
  }
  else {
    int v3 = 1;
  }
  return OZElement::isFourCornerPinned((OZElement *)((char *)this + 200)) & v3;
}

uint64_t non-virtual thunk to'OZRotoshape::isFourCornerPinned(OZRotoshape *this)
{
  return OZRotoshape::isFourCornerPinned((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::isCropped(OZRotoshape *this)
{
  uint64_t v2 = *((void *)this + 4733);
  if (v2) {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) ^ 1;
  }
  else {
    int v3 = 1;
  }
  return OZElement::isCropped((OZElement *)((char *)this + 200)) & v3;
}

uint64_t non-virtual thunk to'OZRotoshape::isCropped(OZRotoshape *this)
{
  return OZRotoshape::isCropped((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::isDropShadowEnabled(OZRotoshape *this)
{
  uint64_t v2 = *((void *)this + 4733);
  if (v2) {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) ^ 1;
  }
  else {
    int v3 = 1;
  }
  return OZElement::isDropShadowEnabled((OZElement *)((char *)this + 200)) & v3;
}

uint64_t non-virtual thunk to'OZRotoshape::isDropShadowEnabled(OZRotoshape *this)
{
  return OZRotoshape::isDropShadowEnabled((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::canReflect(OZRotoshape *this)
{
  OZRenderState::OZRenderState(&v12);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  CMTime var0 = (CMTime)v12.var0;
  BOOL var10 = v12.var10;
  BOOL var16 = v12.var16;
  long long v9 = *(_OWORD *)&v12.var1;
  int v10 = 1;
  int shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  uint64_t v3 = *((void *)this + 4733);
  if (v3) {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
  else {
    int v4 = 0;
  }
  return OZElement::canReflect((OZElement *)((char *)this + 200)) & (shouldDrawParticles & v4 ^ 1u);
}

void sub_1B7C844AC(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::canReflect(OZRotoshape *this)
{
  return OZRotoshape::canReflect((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::enable(OZRotoshape *this)
{
  if ((*((unsigned char *)this + 1224) & 8) == 0 {
    || (uint64_t v2 = (const void *)*((void *)this + 145)) == 0
  }
  {
    return OZObjectManipulator::enable((OZRotoshape *)((char *)this + 216));
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::enable(OZRotoshape *this)
{
  return OZRotoshape::enable((OZRotoshape *)((char *)this - 216));
}

uint64_t OZRotoshape::bakeChannels(OZRotoshape *this, const PCTimeRange *a2, const CMTime *a3)
{
  OZSceneNode::bakeChannels((OZRotoshape *)((char *)this + 200), a2, a3);
  (*(void (**)(void))(*((void *)this + 4713) + 368))();
  int v4 = *(uint64_t (**)(void))(*((void *)this + 2398) + 920);

  return v4();
}

uint64_t non-virtual thunk to'OZRotoshape::bakeChannels(OZRotoshape *this, const PCTimeRange *a2, const CMTime *a3)
{
  return OZRotoshape::bakeChannels((OZRotoshape *)((char *)this - 200), a2, a3);
}

uint64_t OZRotoshape::isActiveAtTime(OZRotoshape *this, CMTime *a2, int a3, int a4, int a5)
{
  int v5 = a4;
  if ((*((unsigned char *)this + 1224) & 8) == 0)
  {
    long long v8 = (OZRotoshape *)((char *)this + 216);
    CMTime v14 = *a2;
    long long v9 = &v14;
    int v10 = 1;
    return OZObjectManipulator::isActiveAtTime(v8, v9, a3, a4, v10);
  }
  uint64_t v12 = *((void *)this + 145);
  if (v12 && (*(unsigned char *)(v12 + 1024) & 4) != 0) {
    return 0;
  }
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
  if (result)
  {
    long long v8 = (OZRotoshape *)((char *)this + 216);
    CMTime v15 = *a2;
    long long v9 = &v15;
    a3 = 0;
    a4 = v5;
    int v10 = a5;
    return OZObjectManipulator::isActiveAtTime(v8, v9, a3, a4, v10);
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::isActiveAtTime(OZRotoshape *this, CMTime *a2, int a3, int a4, int a5)
{
  return OZRotoshape::isActiveAtTime((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5);
}

uint64_t OZRotoshape::isActiveInTimeRange(OZRotoshape *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  if ((*((unsigned char *)this + 1224) & 8) != 0)
  {
    uint64_t v11 = *((void *)this + 145);
    if (v11 && (*(unsigned char *)(v11 + 1024) & 4) != 0)
    {
      return 0;
    }
    else
    {
      CMTime v12 = *(CMTime *)a2;
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), &v12, 0.0);
      if (result) {
        return OZObjectManipulator::isActiveInTimeRange((OZRotoshape *)((char *)this + 216), a2, 0, a4, a5);
      }
    }
  }
  else
  {
    long long v8 = (OZRotoshape *)((char *)this + 216);
    return OZObjectManipulator::isActiveInTimeRange(v8, a2, a3, a4, 1);
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::isActiveInTimeRange(OZRotoshape *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  return OZRotoshape::isActiveInTimeRange((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5);
}

void OZRotoshape::setTimeOffset(__n128 *this, CMTime *a2, char a3)
{
  CMTime v10 = *a2;
  __n128 v5 = OZChannelObjectRootBase::setTimeOffset(this + 16, &v10, a3);
  if (this[2366].n128_u64[0])
  {
    unint64_t v7 = this[12].n128_u64[1];
    uint64_t v6 = &this[12].n128_i8[8];
    (*(void (**)(void *__return_ptr, __int8 *, __n128))(v7 + 1128))(v9, v6, v5);
    CMTime v8 = *a2;
    OZMoShape::initPPaintTime((void *)v6 + 2347, &v8, (const PCTimeRange *)v9);
  }
}

void non-virtual thunk to'OZRotoshape::setTimeOffset(OZRotoshape *this, CMTime *a2, char a3)
{
}

void *OZRotoshape::setTimeExtent(OZRotoshape *this, const PCTimeRange *a2, int a3)
{
  uint64_t result = (void *)OZChannelObjectRootBase::setTimeExtent((OZRotoshape *)((char *)this + 256), a2, a3);
  if (*((void *)this + 4732))
  {
    CMTime v6 = *(CMTime *)a2;
    return OZMoShape::initPPaintTime((void *)this + 2372, &v6, a2);
  }
  return result;
}

void *non-virtual thunk to'OZRotoshape::setTimeExtent(OZRotoshape *this, const PCTimeRange *a2, int a3)
{
  return OZRotoshape::setTimeExtent((OZRotoshape *)((char *)this - 200), a2, a3);
}

void OZRotoshape::dirty(OZRotoshape *this)
{
  OZElement::dirty((OZElement *)((char *)this + 200));

  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 38128);
}

void non-virtual thunk to'OZRotoshape::dirty(OZElement *this)
{
  OZElement::dirty(this);

  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 37928);
}

void non-virtual thunk to'OZRotoshape::dirty(OZRotoshape *this)
{
  OZElement::dirty((OZElement *)((char *)this - 16));

  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 37912);
}

uint64_t OZRotoshape::didCreateCopyForCopyOnWrite(OZRotoshape *this)
{
  uint64_t result = *((void *)this + 4732);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 920))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::didCreateCopyForCopyOnWrite(OZRotoshape *this)
{
  uint64_t result = *((void *)this + 4707);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 920))();
  }
  return result;
}

void OZRotoshape::didAddToScene(OZRotoshape *this, OZScene *a2)
{
  uint64_t v3 = (char *)this + 37856;
  OZTransformNode::didAddToScene((OZTransformNode *)((char *)this + 200), a2);
  if (!v3[242] && !*((unsigned char *)a2 + 1576))
  {
    int v4 = *(OZSceneNode **)v3;
    if (*(void *)v3)
    {
      OZScene::registerNode(a2, v4);
    }
  }
}

void non-virtual thunk to'OZRotoshape::didAddToScene(OZRotoshape *this, OZScene *a2)
{
}

CGColorSpace **OZRotoshape::didFinishLoadingIntoScene(OZRotoshape *this)
{
  uint64_t v2 = (char *)this + 38098;
  uint64_t result = (CGColorSpace **)OZElement::didFinishLoadingIntoScene((OZElement *)((char *)this + 200));
  if (*v2)
  {
    OZMoShape::completeLoading((OZRotoshape *)((char *)this + 18976), *(double *)(v2 + 6));
    uint64_t result = OZRotoshape::completeLoading(this);
    *uint64_t v2 = 0;
  }
  return result;
}

CGColorSpace **non-virtual thunk to'OZRotoshape::didFinishLoadingIntoScene(OZRotoshape *this)
{
  return OZRotoshape::didFinishLoadingIntoScene((OZRotoshape *)((char *)this - 200));
}

{
  return OZRotoshape::didFinishLoadingIntoScene((OZRotoshape *)((char *)this - 216));
}

OZScene *OZRotoshape::willRemoveFromScene(OZRotoshape *this, OZScene *a2)
{
  uint64_t result = (OZScene *)OZLockingElement::willRemoveFromScene(this, a2);
  __n128 v5 = (void *)*((void *)this + 4732);
  if (v5)
  {
    if (*((unsigned char *)a2 + 1848))
    {
      if (v6) {
        OZLocking::reset(v6);
      }
    }
    OZScene::unregisterNode(a2, (OZSceneNode *)v5);
    return OZScene::removeAllDependencies(a2, (OZSceneNode *)v5);
  }
  return result;
}

OZScene *non-virtual thunk to'OZRotoshape::willRemoveFromScene(OZRotoshape *this, OZScene *a2)
{
  return OZRotoshape::willRemoveFromScene((OZRotoshape *)((char *)this - 200), a2);
}

BOOL OZRotoshape::shouldDrawGradientOSC(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 144, MEMORY[0x1E4F1FA48], 0.0) == 1;
}

BOOL non-virtual thunk to'OZRotoshape::shouldDrawGradientOSC(OZRotoshape *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 21672), MEMORY[0x1E4F1FA48], 0.0) == 1;
}

void OZRotoshape::getIconName(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  if ((*((unsigned char *)this + 1224) & 8) != 0)
  {
    CMTime v6 = (OZChannel *)((char *)this + 20048);
    __n128 v5 = @"M_LayersList_ObjectIconColor-ShapeMask";
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      goto LABEL_13;
    }
    int ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0);
    CMTime v8 = @"M_LayersList_ObjectIconColor-SplineShapeMask";
  }
  else
  {
    if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) == 0
      && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
    {
      int v4 = (OZChannel *)((char *)this + 20048);
      if (OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0) != 4) {
        OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0);
      }
      __n128 v5 = @"M_LayersList_ObjectIconColor-PaintShape";
      goto LABEL_13;
    }
    long long v9 = (OZChannel *)((char *)this + 20048);
    int v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0);
    __n128 v5 = @"M_LayersList_ObjectIconColor-Shape";
    if (v10 == 4) {
      goto LABEL_13;
    }
    int ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E4F1FA48], 0.0);
    CMTime v8 = @"M_LayersList_ObjectIconColor-SplineShape";
  }
  if (ValueAsInt != 5) {
    __n128 v5 = v8;
  }
LABEL_13:

  PCURL::PCURL(a2, v5);
}

void non-virtual thunk to'OZRotoshape::getIconName(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
}

void OZRotoshape::getIconNameBW(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  if ((*((unsigned char *)this + 1224) & 8) != 0)
  {
    CMTime v6 = (OZChannel *)((char *)this + 20048);
    __n128 v5 = @"M_LayersList_ObjectIconGrey-ShapeMask";
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      goto LABEL_13;
    }
    int ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0);
    CMTime v8 = @"M_LayersList_ObjectIconGrey-SplineShapeMask";
  }
  else
  {
    if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) == 0
      && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
    {
      int v4 = (OZChannel *)((char *)this + 20048);
      if (OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0) != 4) {
        OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0);
      }
      __n128 v5 = @"M_LayersList_ObjectIconGrey-PaintShape";
      goto LABEL_13;
    }
    long long v9 = (OZChannel *)((char *)this + 20048);
    int v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0);
    __n128 v5 = @"M_LayersList_ObjectIconGrey-Shape";
    if (v10 == 4) {
      goto LABEL_13;
    }
    int ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E4F1FA48], 0.0);
    CMTime v8 = @"M_LayersList_ObjectIconGrey-SplineShape";
  }
  if (ValueAsInt != 5) {
    __n128 v5 = v8;
  }
LABEL_13:

  PCURL::PCURL(a2, v5);
}

void non-virtual thunk to'OZRotoshape::getIconNameBW(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
}

uint64_t OZRotoshape::getIconID(OZRotoshape *this)
{
  if ((*((unsigned char *)this + 1224) & 8) != 0)
  {
    int v4 = (OZChannel *)((char *)this + 20048);
    uint64_t v3 = 36;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      return v3;
    }
    BOOL v5 = OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0) == 5;
    unsigned int v6 = 15;
    goto LABEL_11;
  }
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) != 0
    || !OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
  {
    unint64_t v7 = (OZChannel *)((char *)this + 20048);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v3 = 35;
    if (ValueAsInt == 4) {
      return v3;
    }
    BOOL v5 = OZChannel::getValueAsInt(v7, MEMORY[0x1E4F1FA48], 0.0) == 5;
    unsigned int v6 = 14;
LABEL_11:
    if (v5) {
      return v3;
    }
    else {
      return v6;
    }
  }
  uint64_t v2 = (OZChannel *)((char *)this + 20048);
  if (OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) != 4) {
    OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0);
  }
  return 9;
}

uint64_t non-virtual thunk to'OZRotoshape::getIconID(OZRotoshape *this)
{
  return OZRotoshape::getIconID((OZRotoshape *)((char *)this - 200));
}

void OZRotoshape::description(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  if ((*((_DWORD *)this + 306) & 8) != 0) {
    uint64_t v2 = @"Rotoshape Mask Short Desc";
  }
  else {
    uint64_t v2 = @"Rotoshape Short Desc";
  }
  PCURL::PCURL(a2, v2);
}

void non-virtual thunk to'OZRotoshape::description(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  if ((*((_DWORD *)this + 256) & 8) != 0) {
    uint64_t v2 = @"Rotoshape Mask Short Desc";
  }
  else {
    uint64_t v2 = @"Rotoshape Short Desc";
  }
  PCURL::PCURL(a2, v2);
}

uint64_t *OZRotoshape::getLockDependencies(unint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  OZLockingElement::getLockDependencies(a1, a2, a3, a4);
  uint64_t result = *(uint64_t **)(a1 + 37856);
  if (result)
  {
    if (result)
    {
      unint64_t v7 = (unint64_t)result;
      PCDirectedGraph<OZLocking *>::addEdge(a3, a1, (uint64_t)result);
      return PCDirectedGraph<OZLocking *>::addEdge(a3, v7, a1);
    }
  }
  return result;
}

uint64_t OZRotoshape::acquireObjectLock(OZRotoshape *this)
{
  uint64_t v1 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));

  return PCMutex::lock(v1);
}

uint64_t OZRotoshape::releaseObjectLock(OZRotoshape *this)
{
  uint64_t v1 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));

  return PCMutex::unlock(v1);
}

uint64_t OZRotoshape::setDefaultTranslation(OZRotoshape *this, double a2, double a3, double a4)
{
  (*(void (**)(void))(*((void *)this + 2612) + 712))();
  (*(void (**)(double))(*((void *)this + 2631) + 712))(a3);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1552), a2);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1704), a3);

  return OZChannel::setDefaultValue((OZChannel *)((char *)this + 2152), a4);
}

uint64_t OZRotoshape::getLock(OZRotoshape *this)
{
  return ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
}

uint64_t non-virtual thunk to'OZRotoshape::setDefaultTranslation(OZRotoshape *this, double a2, double a3, double a4)
{
  return OZRotoshape::setDefaultTranslation((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

void OZGroup::OZGroup(OZGroup *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *BOOL v5 = &unk_1F114F800;
  CMTime v5[2] = &unk_1F1150140;
  v5[6] = &unk_1F1150398;
  v5[816] = &unk_1F11503F0;
  v5[2347] = v5 + 2347;
  v5[2348] = v5 + 2347;
  v5[2349] = 0;
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Members");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18800), &v20, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Dimension Type Enum");
  PCURL::PCURL((PCURL *)&v19, @"Channel Group Dimension Type");
  uint64_t Instance = (OZChannelImpl *)OZGroup::OZGroup_dimensionTypeImpl::getInstance(v6);
  OZChannelEnumDimension::OZChannelEnumDimension((OZGroup *)((char *)this + 18928), 0, &v20, &v19, (OZChannelFolder *)((char *)this + 448), 0x133u, 0, Instance);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Fixed Resolution");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19184), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Du, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Fixed Width");
  long long v9 = (OZGroup::OZGroup_fixedWidthInfo *)OZGroup::OZGroup_fixedWidthImpl::getInstance(v8);
  int v10 = (OZChannelInfo *)OZGroup::OZGroup_fixedWidthInfo::getInstance(v9);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19336), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Eu, 0, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Fixed Height");
  CMTime v12 = (OZGroup::OZGroup_fixedHeightInfo *)OZGroup::OZGroup_fixedHeightImpl::getInstance(v11);
  uint64_t v13 = (OZChannelInfo *)OZGroup::OZGroup_fixedHeightInfo::getInstance(v12);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19488), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Fu, 0, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Is Flattened");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19640), 0, &v20, (OZChannelFolder *)((char *)this + 448), 0x137u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Is Layer Order");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19792), &v20, (OZChannelFolder *)((char *)this + 448), 0x131u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Channel Group Freeze Action");
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 19944), (void (*)(void *))OZGroup::freezeCallbackStub, this, &v20, (OZChannelFolder *)((char *)this + 448), 0x136u, 0xAu);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Aperture Width");
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20136), &v20, (OZChannelFolder *)((char *)this + 448), 0x138u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group Aperture Height");
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20288), &v20, (OZChannelFolder *)((char *)this + 448), 0x139u, 0, 0, 0);
  PCString::~PCString(&v20);
  CMTime v14 = (OZGroup::OZGroup_versionImpl *)PCString::PCString(&v20, "Hidden Channel");
  CMTime v15 = (OZChannelImpl *)OZGroup::OZGroup_versionImpl::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20440), 5, &v20, (OZChannelFolder *)((char *)this + 448), 0x13Au, 2, v15, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, @"Channel Group New Fixed Res Behavior");
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20592), 1, &v20, (OZChannelFolder *)((char *)this + 448), 0x13Bu, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Host 3D Engine World");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), &v20, (OZChannelFolder *)((char *)this + 448), 0x13Cu, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "People Occlusion");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20872), 1, &v20, (OZChannelFolder *)((char *)this + 20744), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 21024), &v20, (OZChannelFolder *)((char *)this + 20744), 0x13Eu, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Gravity (m/s)");
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 21152), 9.8, &v20, (OZChannelFolder *)((char *)this + 21024), 0x13Fu, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Depth Map");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZGroup *)((char *)this + 21304), &v20, (OZChannelFolder *)((char *)this + 20744), 0x140u, 0);
  PCString::~PCString(&v20);
  *((unsigned char *)this + 22888) = 1;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18800), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20136), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20136));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20288), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20288));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20592), 4259872, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20592));
  uint64_t v16 = (PCString *)PCBlend::modeMenuString((PCBlend *)1);
  OZChannelEnum::setStrings((const PCString *)this + 854, v16, 1);
  LODWORD(v20.var0) = 0;
  LayerBlendModes = (char *)PCBlend::getLayerBlendModes((PCBlend *)&v20, v17);
  OZChannelEnum::setTags((OZGroup *)((char *)this + 6832), LayerBlendModes, (int)v20.var0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 6832), 34.0);
  OZChannelBase::reset((OZChannelBase *)this + 61, 0);
  (*(void (**)(OZGroup *, uint64_t))(*(void *)this + 1704))(this, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6680), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6680));
  OZChannelBase::setFlag((OZChannelBase *)this + 61, 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 61);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17520), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 17520));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12672), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8232), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8232));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19184), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19184));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 20744), 0x20000);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 20744), 0, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 20744));
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 21152), 9.8);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21152), -100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21152), 100.0);
  *((void *)this + 2862) = 0;
}

void sub_1B7C85B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannel *a11, OZChannelButton *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannel *a15, OZChannel *a16, PCString *a17, void *a18, OZChannelFolder *a19, OZChannelBool *a20,PCString a21,PCString a22)
{
  PCString::~PCString(&a22);
  OZChannel::~OZChannel(v28);
  OZChannelFolder::~OZChannelFolder(v23);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v27);
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannelButton::~OZChannelButton(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelBool::~OZChannelBool(a20);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelFolder::~OZChannelFolder(a19);
  std::__list_imp<unsigned int>::clear(a18);
  OZElement::~OZElement(v22);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup(OZGroup *this, const OZGroup *a2, uint64_t a3)
{
  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *unsigned int v6 = &unk_1F114F800;
  _OWORD v6[2] = &unk_1F1150140;
  v6[6] = &unk_1F1150398;
  v6[816] = &unk_1F11503F0;
  v6[2347] = v6 + 2347;
  signed int v40 = v6 + 2347;
  v6[2348] = v6 + 2347;
  v6[2349] = 0;
  PCURL::PCURL((PCURL *)&v42, @"Channel Group Members");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18800), &v42, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0);
  PCString::~PCString(&v42);
  OZChannelEnum::OZChannelEnum((OZGroup *)((char *)this + 18928), (const OZGroup *)((char *)a2 + 18928), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 2366) = &unk_1F11507B0;
  *((void *)this + 2368) = &unk_1F1150B20;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19184), (const OZChannelBase *)((char *)a2 + 19184), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19336), (const OZChannelBase *)((char *)a2 + 19336), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 2417) = &unk_1F1101490;
  *((void *)this + 2419) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19488), (const OZChannelBase *)a2 + 174, (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 2436) = &unk_1F1101490;
  *((void *)this + 2438) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19640), (const OZChannelBase *)((char *)a2 + 19640), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19792), (const OZChannelBase *)((char *)a2 + 19792), (OZChannelFolder *)((char *)this + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 19944), (const OZChannelButton *)((char *)a2 + 19944), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 20136), (const OZChannelBase *)((char *)a2 + 20136), (OZChannelFolder *)((char *)this + 448));
  uint64_t v39 = v7;
  *((void *)this + 2517) = &unk_1F1100CF0;
  *((void *)this + 2519) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20288), (const OZChannelBase *)((char *)a2 + 20288), (OZChannelFolder *)((char *)this + 448));
  uint64_t v38 = v8;
  *((void *)this + 2536) = &unk_1F1100CF0;
  *((void *)this + 2538) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20440), (const OZChannelBase *)((char *)a2 + 20440), (OZChannelFolder *)((char *)this + 448));
  uint64_t v37 = v9;
  *((void *)this + 2555) = &unk_1F1100CF0;
  *((void *)this + 2557) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20592), (const OZChannelBase *)((char *)a2 + 20592), (OZChannelFolder *)((char *)this + 448));
  uint64_t v36 = v10;
  *((void *)this + 2574) = &unk_1F1100CF0;
  *((void *)this + 2576) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), (const OZChannelFolder *)((char *)a2 + 20744), (OZChannelFolder *)((char *)this + 448));
  CMTime v35 = (char *)this + 20872;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20872), (const OZChannelBase *)((char *)a2 + 20872), (OZChannelFolder *)((char *)this + 20744));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 21024), (const OZChannelFolder *)((char *)a2 + 21024), (OZChannelFolder *)((char *)this + 20744));
  CMTime v34 = (char *)this + 21024;
  OZChannel::OZChannel((OZChannel *)((char *)this + 21152), (const OZChannelBase *)((char *)a2 + 21152), (OZChannelFolder *)((char *)this + 21024));
  *((void *)this + 2644) = &unk_1F1100CF0;
  *((void *)this + 2646) = &unk_1F1101050;
  CMTime v33 = (char *)this + 21304;
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZGroup *)((char *)this + 21304), (const OZGroup *)((char *)a2 + 21304), (OZChannelFolder *)((char *)this + 20744));
  *((_WORD *)this + 11444) = *((_WORD *)a2 + 11444);
  uint64_t v11 = (PCString *)PCBlend::modeMenuString((PCBlend *)1);
  OZChannelEnum::setStrings((const PCString *)this + 854, v11, 1);
  int v41 = 0;
  LayerBlendModes = (char *)PCBlend::getLayerBlendModes((PCBlend *)&v41, v12);
  OZChannelEnum::setTags((OZGroup *)((char *)this + 6832), LayerBlendModes, v41);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 19944), this);
  if ((a3 & 1) == 0)
  {
    BOOL v21 = (char *)a2 + 18776;
    if ((const OZGroup *)((char *)a2 + 18776) != *((const OZGroup **)a2 + 2348))
    {
      do
      {
        uint64_t v22 = *(void *)(*(void *)v21 + 16);
        char v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 16) + 96))(v22 + 16, v14, v15, v16, v17, v18, v19, v20, v33, v34, v35, v36, v37, v38, v39);
        if ((a3 & 0x50) != 0) {
          char v24 = 1;
        }
        else {
          char v24 = v23;
        }
        if (v24)
        {
          double v25 = (const void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v22 + 8) + 24))(*(void *)(v22 + 8), v22, a3);
          if (v25)
          {
            if (v26)
            {
              CMTime v27 = (OZSceneNode *)v26;
              if ((a3 & 8) == 0)
              {
                OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v26 + 16));
                CMTime v28 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v27 + 640))(v27);
                OZChannelBase::setNameUnset(v28, 1);
              }
              CMTime v29 = operator new(0x18uLL);
              CMTime v30 = (void *)*((void *)this + 2348);
              *CMTime v29 = v40;
              v29[1] = v30;
              v29[2] = v27;
              void *v30 = v29;
              *((void *)this + 2348) = v29;
              ++*((void *)this + 2349);
              CMTime v31 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v27 + 640))(v27);
              OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v31);
              (*(void (**)(OZSceneNode *, OZGroup *))(*(void *)v27 + 256))(v27, this);
              CMTime v32 = (OZScene *)*((void *)this + 121);
              if (v32)
              {
                OZScene::registerNode(v32, v27);
                OZScene::addAllDependencies(*((void *)this + 121), v27);
              }
            }
          }
        }
        BOOL v21 = *(char **)v21;
      }
      while (v21 != *((char **)a2 + 2348));
    }
  }
  (*(void (**)(OZGroup *, uint64_t))(*(void *)this + 1704))(this, 1);
  *((void *)this + 2862) = 0;
}

void sub_1B7C8652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelImageWithOptions *a9, OZChannelFolder *a10, OZChannelBool *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannelButton *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannel *a19, OZChannel *a20,OZChannelBool *a21,PCString *a22,OZChannelFolder *a23)
{
  OZChannel::~OZChannel(v24);
  OZChannelFolder::~OZChannelFolder(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelFolder::~OZChannelFolder(v25);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannelButton::~OZChannelButton(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannelBool::~OZChannelBool(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelFolder::~OZChannelFolder(a23);
  std::__list_imp<unsigned int>::clear(*(void **)(v26 - 112));
  OZElement::~OZElement(v23);
  _Unwind_Resume(a1);
}

void OZGroup::~OZGroup(OZGroup *this)
{
  *(void *)this = &unk_1F114F800;
  *((void *)this + 2) = &unk_1F1150140;
  *((void *)this + 6) = &unk_1F1150398;
  *((void *)this + 816) = &unk_1F11503F0;
  for (uint64_t i = *((void *)this + 2349); i; uint64_t i = *((void *)this + 2349))
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 2348);
    int v4 = (OZSceneNode *)v3[2];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    *((void *)this + 2349) = i - 1;
    operator delete(v3);
    unsigned int v6 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v4 + 640))(v4);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v6);
    uint64_t v7 = (OZScene *)*((void *)this + 121);
    if (v7)
    {
      OZScene::unregisterNode(v7, v4);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v4);
    }
    (*(void (**)(OZSceneNode *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v8 = *((void *)this + 2862);
  if (v8)
  {
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(v8 + 144, *(PCSharedCount **)(v8 + 152));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v8 + 120, *(void **)(v8 + 128));
    ProCore_Impl::PCNSRefImpl::release((id *)(v8 + 112));
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(v8 + 80, *(id **)(v8 + 88));
    ProCore_Impl::PCNSRefImpl::release((id *)(v8 + 64));
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v8);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 2862) = 0;
  }
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZGroup *)((char *)this + 21304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21152));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 21024));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20872));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 20744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20136));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 19944));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19792));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19336));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19184));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2366);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18800));
  std::__list_imp<unsigned int>::clear((void *)this + 2347);

  OZElement::~OZElement((OZElement *)this);
}

{
  uint64_t vars8;

  OZGroup::~OZGroup(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGroup::~OZGroup(OZGroup *this)
{
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 48));
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZGroup *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZGroup *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZGroup *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZGroup::canDelete(OZGroup *this)
{
  if ((*(uint64_t (**)(void))(*((void *)this + 2) + 56))()) {
    return 0;
  }
  uint64_t v2 = 1;
  if ((OZGroup::hasUnlockedDescendant(this, 1) & 1) == 0) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 960))(this) ^ 1;
  }
  return v2;
}

uint64_t OZGroup::hasUnlockedDescendant(OZGroup *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  if (v4 == v5) {
    return 0;
  }
  uint64_t v6 = v5;
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *(void **)(v4 + 16);
      if (v7)
      {
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      if (((*(uint64_t (**)(void *, uint64_t))(v7[2] + 56))(v7 + 2, 1) & 1) == 0) {
        break;
      }
LABEL_11:
      if (v8) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v6) {
        return 0;
      }
    }
    if (!v8 || (OZGroup::hasLockedDescendant(v8, 1) & 1) == 0) {
      break;
    }
LABEL_12:
    if ((a2 & (*(unsigned int (**)(OZGroup *))(*(void *)v8 + 960))(v8) & 1) == 0) {
      goto LABEL_13;
    }
    uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)v8 + 1024))(v8);
    uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)v8 + 1032))(v8);
    uint64_t result = 0;
    a2 = 1;
    if (v4 == v6) {
      return result;
    }
  }
  if (v9 && OZImageElement::isLockedDropZone(v9)) {
    goto LABEL_11;
  }
  return 1;
}

uint64_t non-virtual thunk to'OZGroup::canDelete(OZGroup *this)
{
  return OZGroup::canDelete((OZGroup *)((char *)this - 16));
}

void OZGroup::getIconName(OZGroup *this@<X0>, PCURL *a2@<X8>)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2)
  {
    uint64_t v4 = @"M_LayersList_ObjectIconColor-360Group";
  }
  else
  {
    int v5 = (*(uint64_t (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]);
    int v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
    if (v5)
    {
      uint64_t v7 = @"M_LayersList_ObjectIconColor-3DGroupRasterized";
      uint64_t v8 = @"M_LayersList_ObjectIconColor-2DGroupRasterized";
    }
    else
    {
      uint64_t v7 = @"M_LayersList_ObjectIconColor-3DGroup";
      uint64_t v8 = @"M_LayersList_ObjectIconColor-2DGroup";
    }
    if (v6) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = v8;
    }
  }

  PCURL::PCURL(a2, v4);
}

BOOL OZGroup::is360Group(OZGroup *this)
{
  return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2;
}

void OZGroup::getIconNameBW(OZGroup *this@<X0>, PCURL *a2@<X8>)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2)
  {
    uint64_t v4 = @"M_LayersList_ObjectIconGrey-360Group";
  }
  else
  {
    int v5 = (*(uint64_t (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]);
    int v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
    if (v5)
    {
      uint64_t v7 = @"M_LayersList_ObjectIconGrey-3DGroupRasterized";
      uint64_t v8 = @"M_LayersList_ObjectIconGrey-2DGroupRasterized";
    }
    else
    {
      uint64_t v7 = @"M_LayersList_ObjectIconGrey-3DGroup";
      uint64_t v8 = @"M_LayersList_ObjectIconGrey-2DGroup";
    }
    if (v6) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = v8;
    }
  }

  PCURL::PCURL(a2, v4);
}

uint64_t OZGroup::getIconID(OZGroup *this)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]);
  int v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if (!v3) {
    return v4 == 0;
  }
  if (v4) {
    return 26;
  }
  return 27;
}

__n128 OZGroup::getNaturalDuration@<Q0>(OZGroup *this@<X0>, __n128 *a2@<X8>)
{
  if ((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this))
  {
    int v4 = (OZSceneSettings *)((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this) + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZGroup::getNaturalDuration@<D0>(OZGroup *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = OZGroup::getNaturalDuration((OZGroup *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

BOOL OZGroup::isFreezable(OZGroup *this)
{
  uint64_t v2 = *((void *)this + 120);
  return (!v2 || ((*(uint64_t (**)(void))(*(void *)(v2 + 16) + 56))() & 1) == 0)
      && (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 0;
}

void OZGroup::freezeCallback(OZGroup *this)
{
  if (((*(uint64_t (**)(OZGroup *))(*(void *)this + 800))(this) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(void *)this + 792))(this))
  {
    if (*((void *)this + 121))
    {
      v4[0] = 0;
      v4[1] = 0;
      v3.CMTime var0 = (__CFString *)v4;
      unsigned int v2 = *((_DWORD *)this + 20);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)&v3, &v2, &v2);
      OZChannelBase::setRangeName(*((OZChannelBase **)this + 121), &v3);
      OZDocument::postNotification(*(OZDocument **)(*((void *)this + 121) + 1584), 136);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v3, v4[0]);
    }
  }
}

void sub_1B7C87320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void OZGroup::copyLinkedIDs(OZGroup *this, const OZSceneNode *a2, uint64_t a3)
{
  OZSceneNode::copyLinkedIDs(this, a2);
  if ((a3 & 1) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
    for (uint64_t i = (*(uint64_t (**)(const OZSceneNode *))(*(void *)a2 + 1024))(a2);
          v6 != (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this)
       && i != (*(uint64_t (**)(const OZSceneNode *))(*(void *)a2 + 1032))(a2);
          uint64_t i = *(void *)(i + 8))
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(v6 + 16) + 216))(*(void *)(v6 + 16), *(void *)(i + 16), a3);
      uint64_t v6 = *(void *)(v6 + 8);
    }
  }
}

void OZGroup::copyLinkedObjects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OZSceneNode::copyLinkedObjects(a1, a2, a3, a5 != 0, 0, a6, a7, a8);
}

CGColorSpace **OZGroup::getOriginalBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1440))(a1))
  {
    FreezeFootage = OZElement::getFreezeFootage((OZElement *)a1);
    v34[0] = 0;
    v34[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v34[2] = _Q0;
    *(_OWORD *)&v42.var0.CMTime var0 = xmmword_1B7E74760;
    v42.var0.int64_t var3 = 0x3FF0000000000000;
    memset(&v42.var1, 0, 24);
    *(void *)&v42.var4 = 0x3FF0000000000000;
    memset(&v42.var5, 0, 24);
    HIDWORD(v42.var7.var0[1][0]) = 0;
    v42.var7.var0[0][3] = 0.0;
    *(_OWORD *)&v42.var7.var0[0][1] = 0x3FF0000000000000uLL;
    LOBYTE(v42.var7.var0[1][0]) = 0;
    *(_OWORD *)&v42.var7.var0[1][1] = *MEMORY[0x1E4F1FA48];
    v42.var7.var0[1][3] = *(double *)(MEMORY[0x1E4F1FA48] + 16);
    v42.var7.var0[2][0] = 0.0;
    LOWORD(v42.var7.var0[2][1]) = 0;
    v42.var7.var0[2][2] = 0.0;
    LOWORD(v42.var7.var0[2][3]) = 0;
    *(void *)((char *)&v42.var7.var0[2][3] + 4) = 0x100000000;
    BYTE4(v42.var7.var0[3][0]) = 0;
    *(_OWORD *)&v42.var7.var0[3][1] = 0uLL;
    LOWORD(v42.var7.var0[3][3]) = 768;
    *(void *)&v42.var8 = 0x408F400000000000;
    LOBYTE(v42.var14) = 0;
    HIDWORD(v42.var14) = 0;
    LOBYTE(v42.var15) = 0;
    *(void *)&v42.BOOL var16 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v42.var18 = _Q0;
    (*(void (**)(void))(*(void *)FreezeFootage + 1568))();
    long long v12 = *(_OWORD *)&v34[2];
    __asm { FMOV            V1.2D, #-0.5 }
    *(float64x2_t *)a2 = vmulq_f64(*(float64x2_t *)&v34[2], _Q1);
    *(_OWORD *)(a2 + 16) = v12;
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v42.var7.var0[3][2]);
    return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v42.var7.var0[3][1]);
  }
  else if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E4F1FA48], 0.0) {
         && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1640))(a1))
  }
  {
    char v23 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E4F1FA48], 0.0);
    double result = (CGColorSpace **)OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v23, 0.0);
    if (ValueAsInt >= 0) {
      int v25 = ValueAsInt;
    }
    else {
      int v25 = ValueAsInt + 1;
    }
    double v26 = (double)-(v25 >> 1);
    if ((int)result >= 0) {
      int v27 = (int)result;
    }
    else {
      int v27 = result + 1;
    }
    *(double *)a2 = v26;
    *(double *)(a2 + 8) = (double)-(v27 >> 1);
    *(double *)(a2 + 16) = (double)ValueAsInt;
    *(double *)(a2 + 24) = (double)(int)result;
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v28 = _Q0;
    *(float64x2_t *)(a2 + 16) = _Q0;
    OZRenderState::OZRenderState(&v42, a3);
    v42.var4 = 1;
    v42.BOOL var16 = 0;
    uint64_t v41 = 0x3FF0000000000000;
    uint64_t v38 = 0x3FF0000000000000;
    uint64_t v35 = 0x3FF0000000000000;
    v34[0] = 0x3FF0000000000000;
    memset(&v34[1], 0, 32);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    (*(void (**)(uint64_t, void *, const OZRenderState *))(*(void *)a1 + 1272))(a1, v34, a3);
    OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v32);
    if (v32[0] != v32[2])
    {
      uint64_t v16 = *(const void **)(v32[0] + 16);
      if (v16)
      {
        if (v17)
        {
          uint64_t v18 = v17;
          do
          {
            int64_t var3 = a3->var0.var3;
            long long v30 = *(_OWORD *)&a3->var0.var0;
            if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*((void *)v18 + 2)
                                                                                               + 104))((uint64_t)v18 + 16, &v30, 0, 1, 1))
            {
              OZElement::getOpacity(v18, (const CMTime *)a3, 0);
              if (v19 <= -0.0000001 || (v19 < 0.0000001 ? (_ZF = !a3->var24) : (_ZF = 0), !_ZF))
              {
                v29[0] = 0uLL;
                v29[1] = v28;
                (*(void (**)(OZElement *, float64x2_t *, void *, OZRenderState *))(*(void *)v18 + 1528))(v18, v29, v34, &v42);
                PCRect<double>::operator|=((float64x2_t *)a2, v29);
              }
            }
            BOOL v21 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v32);
            if (*v21 == v21[2]) {
              break;
            }
            uint64_t v22 = *(const void **)(*v21 + 16);
            if (!v22) {
              break;
            }
          }
          while (v18);
        }
      }
    }
    if (a3->var27) {
      OZElement::expandBoundsToIncludeDropShadow(a1, (float64x2_t *)a2, (const CMTime *)a3);
    }
    return (CGColorSpace **)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v33);
  }
  return result;
}

void sub_1B7C87AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *OZSceneNode::begin_t<OZElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((void *)v4 != result)
  {
    uint64_t v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C87C40(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t a3, long long *a4)
{
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v26 = _Q0;
  a2[1] = _Q0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E4F1FA48], 0.0)
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1640))(a1)
    && OZChannel::getValueAsInt((OZChannel *)(a1 + 20592), MEMORY[0x1E4F1FA48], 0.0))
  {
    uint64_t v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E4F1FA48], 0.0);
    int v15 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v13, 0.0);
    if (ValueAsInt >= 0) {
      int v16 = ValueAsInt;
    }
    else {
      int v16 = ValueAsInt + 1;
    }
    double v17 = (double)-(v16 >> 1);
    if (v15 >= 0) {
      int v18 = v15;
    }
    else {
      int v18 = v15 + 1;
    }
    a2->f64[0] = v17;
    a2->f64[1] = (double)-(v18 >> 1);
    a2[1].f64[0] = (double)ValueAsInt;
    a2[1].f64[1] = (double)v15;
  }
  else
  {
    uint64_t v42 = 0x3FF0000000000000;
    uint64_t v39 = 0x3FF0000000000000;
    uint64_t v36 = 0x3FF0000000000000;
    uint64_t v33 = 0x3FF0000000000000;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)a1 + 1256))(a1, &v33, a4);
    OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v31);
    if (v31[0] != v31[2])
    {
      double v19 = *(const void **)(v31[0] + 16);
      if (v19)
      {
        if (v20)
        {
          BOOL v21 = v20;
          do
          {
            uint64_t v30 = *((void *)a4 + 2);
            long long v29 = *a4;
            if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*((void *)v21 + 2)
                                                                                               + 104))((uint64_t)v21 + 16, &v29, 0, 1, 1))
            {
              OZElement::getOpacity(v21, (const CMTime *)a4, 0);
              if (v22 <= -0.0000001 || v22 >= 0.0000001)
              {
                v28[0] = 0uLL;
                v28[1] = v26;
                PCMatrix44Tmpl<double>::operator*(a3, (long long *)&v33, (uint64_t)v27);
                (*(void (**)(OZElement *, float64x2_t *, unsigned char *, long long *))(*(void *)v21 + 1528))(v21, v28, v27, a4);
                PCRect<double>::operator|=(a2, v28);
              }
            }
            char v23 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v31);
            if (*v23 == v23[2]) {
              break;
            }
            char v24 = *(const void **)(*v23 + 16);
            if (!v24) {
              break;
            }
          }
          while (v21);
        }
      }
    }
    if (*((unsigned char *)a4 + 241)) {
      OZElement::expandBoundsToIncludeDropShadow(a1, a2, (const CMTime *)a4);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v32);
  }
  return 1;
}

void sub_1B7C87FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

int8x16_t OZGroup::getImageBoundsWithEffectsAndCrop(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void *, void))(*a1 + 1656))(a1, MEMORY[0x1E4F1FA48]);
  uint64_t v7 = *a1;
  if (v6)
  {
    if ((*(uint64_t (**)(void *))(v7 + 416))(a1)) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1[123] + 16) + 80))(*(void *)(a1[123] + 16), a2, a3);
    }
    else {
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 1520))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t))(v7 + 1520))(a1, a2, a3);
  }
  result.i64[0] = *(void *)(a2 + 16);
  if (*(double *)result.i64 >= 0.0)
  {
    result.i64[0] = *(void *)(a2 + 24);
    if (*(double *)result.i64 >= 0.0)
    {
      float64_t v25 = 0.0;
      float64_t v26 = 0.0;
      float64_t v23 = 0.0;
      float64_t v24 = 0.0;
      float64x2_t v9 = 0uLL;
      if (*(unsigned char *)(a3 + 232))
      {
        int v10 = (*(uint64_t (**)(void *))(*a1 + 1608))(a1);
        float64x2_t v9 = 0uLL;
        float64x2_t v11 = 0uLL;
        if (v10)
        {
          OZChannelCrop::getValue((OZChannelCrop *)(a1 + 2190), (const CMTime *)a3, &v26, &v25, &v24, &v23, 0.0);
          v13.f64[0] = v25;
          v12.f64[0] = v26;
          v12.f64[1] = v24;
          __asm { FMOV            V2.2D, #0.5 }
          float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          *(int32x2_t *)&v12.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v12, _Q2), v19))));
          v13.f64[1] = v23;
          *(int32x2_t *)&v13.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v13, _Q2), v19))));
          v20.i64[0] = SLODWORD(v13.f64[0]);
          v20.i64[1] = SHIDWORD(v13.f64[0]);
          float64x2_t v9 = vcvtq_f64_s64(v20);
          v20.i64[0] = SLODWORD(v12.f64[0]);
          v20.i64[1] = SHIDWORD(v12.f64[0]);
          float64x2_t v11 = vcvtq_f64_s64(v20);
        }
      }
      else
      {
        float64x2_t v11 = 0uLL;
      }
      double v21 = *(double *)(a2 + 8);
      *(double *)a2 = v11.f64[0] + *(double *)a2;
      *(double *)(a2 + 8) = v11.f64[1] + v21;
      int8x16_t v22 = (int8x16_t)vsubq_f64(*(float64x2_t *)(a2 + 16), vaddq_f64(v9, v11));
      int8x16_t result = vbicq_s8(v22, (int8x16_t)vcltzq_f64((float64x2_t)v22));
      *(int8x16_t *)(a2 + 16) = result;
    }
  }
  return result;
}

void OZGroup::getFourCornerPointsInObjectSpace(uint64_t a1, const OZRenderState *a2, double *a3, double *a4, float64x2_t *a5, double *a6)
{
  long long v12 = *(_OWORD *)&a2->var0.var0;
  v41.CMTimeEpoch epoch = a2->var0.var3;
  float64x2_t v39 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  float64x2_t v40 = _Q1;
  *(_OWORD *)&v41.CMTimeValue value = v12;
  OZRenderState::OZRenderState(&v38, a2);
  v38.var19 = 1;
  (*(void (**)(uint64_t, float64x2_t *, OZRenderState *))(*(void *)a1 + 1560))(a1, &v39, &v38);
  if (a2->var19)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v41, 0.0);
    double v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v41, 0.0);
    double v20 = v39.f64[1];
    *a3 = v19 + v39.f64[0];
    a3[1] = v21 + v20;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v41, 0.0);
    double v23 = v22;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v41, 0.0);
    double v24 = v39.f64[1];
    *a4 = v23 + v39.f64[0] + v40.f64[0];
    a4[1] = v25 + v24;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v41, 0.0);
    float64_t v37 = v26;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v41, 0.0);
    v27.f64[0] = v37;
    v27.f64[1] = v28;
    *a5 = vaddq_f64(v27, vaddq_f64(v39, v40));
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v41, 0.0);
    double v30 = v29;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v41, 0.0);
    double v31 = v30 + v39.f64[0];
    double v33 = v32 + v39.f64[1] + v40.f64[1];
  }
  else
  {
    double v34 = v39.f64[1];
    double v31 = v39.f64[0];
    *a3 = v39.f64[0];
    a3[1] = v34;
    double v35 = v40.f64[1];
    double v36 = v31 + v40.f64[0];
    *a4 = v31 + v40.f64[0];
    a4[1] = v34;
    double v33 = v34 + v35;
    a5->f64[0] = v36;
    a5->f64[1] = v33;
  }
  *a6 = v31;
  a6[1] = v33;
}

uint64_t OZGroup::getDocumentSpaceBoundary(uint64_t a1, double *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
    if (v6 != v7)
    {
      uint64_t v8 = v7;
      do
      {
        float64x2_t v9 = *(const void **)(v6 + 16);
        if (v9)
        {
          if (v10)
          {
            long long v24 = xmmword_1B7E736F0;
            long long v25 = xmmword_1B7E736F0;
            long long v23 = xmmword_1B7E736F0;
            (*(void (**)(void *, long long *, uint64_t))(*(void *)v10 + 1536))(v10, &v23, a3);
            double v11 = *a2;
            double v12 = a2[1];
            if (*a2 <= v12 && (v14 = a2[2], v13 = a2[3], v14 <= v13) && (double v16 = a2[4], v15 = a2[5], v16 <= v15))
            {
              if (*(double *)&v23 <= *((double *)&v23 + 1))
              {
                long long v18 = v24;
                if (*(double *)&v24 <= *((double *)&v24 + 1))
                {
                  long long v19 = v25;
                  if (*(double *)&v25 <= *((double *)&v25 + 1))
                  {
                    if (v11 >= *(double *)&v23) {
                      double v11 = *(double *)&v23;
                    }
                    if (v12 <= *((double *)&v23 + 1)) {
                      double v12 = *((double *)&v23 + 1);
                    }
                    *a2 = v11;
                    a2[1] = v12;
                    if (v14 >= *(double *)&v18) {
                      double v20 = *(double *)&v18;
                    }
                    else {
                      double v20 = v14;
                    }
                    if (v13 <= *((double *)&v18 + 1)) {
                      double v13 = *((double *)&v18 + 1);
                    }
                    a2[2] = v20;
                    a2[3] = v13;
                    if (v16 >= *(double *)&v19) {
                      double v21 = *(double *)&v19;
                    }
                    else {
                      double v21 = v16;
                    }
                    if (v15 <= *((double *)&v19 + 1)) {
                      double v15 = *((double *)&v19 + 1);
                    }
                    a2[4] = v21;
                    a2[5] = v15;
                  }
                }
              }
            }
            else
            {
              long long v17 = v24;
              *(_OWORD *)a2 = v23;
              *((_OWORD *)a2 + 1) = v17;
              *((_OWORD *)a2 + 2) = v25;
            }
          }
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v8);
    }
  }
  return 1;
}

void *OZGroup::getLocalVolume(uint64_t a1, double *a2, const OZRenderState *a3)
{
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E4F1FA48], 0.0)
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1640))(a1))
  {
    double v33 = (const CMTime *)MEMORY[0x1E4F1FA48];
    signed int v34 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E4F1FA48], 0.0) >> 1;
    int8x16_t result = (void *)OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v33, 0.0);
    *a2 = (double)-v34;
    a2[1] = (double)v34;
    a2[2] = (double)-(result >> 1);
    a2[3] = (double)(result >> 1);
    a2[4] = 0.0;
    a2[5] = 0.0;
  }
  else
  {
    int8x16_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 960))(a1);
    if (result)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
      int8x16_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
      if ((void *)v7 != result)
      {
        uint64_t v8 = result;
        do
        {
          int8x16_t result = *(void **)(v7 + 16);
          if (result)
          {
            if (result)
            {
              float64x2_t v9 = result;
              if (!a3->var23
                || (int64_t var3 = a3->var0.var3,
                    v58[1] = *(_OWORD *)&a3->var0.var0,
                    int8x16_t result = (void *)(*(uint64_t (**)(void))(result[2] + 104))(),
                    result))
              {
                long long v57 = xmmword_1B7E736F0;
                v58[0] = xmmword_1B7E736F0;
                long long v56 = xmmword_1B7E736F0;
                (*(void (**)(void *, long long *, const OZRenderState *))(*v9 + 1360))(v9, &v56, a3);
                uint64_t v55 = 0x3FF0000000000000;
                uint64_t v52 = 0x3FF0000000000000;
                uint64_t v49 = 0x3FF0000000000000;
                uint64_t v46 = 0x3FF0000000000000;
                long long v47 = 0u;
                long long v48 = 0u;
                long long v50 = 0u;
                long long v51 = 0u;
                long long v53 = 0u;
                long long v54 = 0u;
                OZRenderState::OZRenderState(&v45, a3);
                v45.var4 = 1;
                (*(void (**)(void *, uint64_t *, OZRenderState *))(*v9 + 1256))(v9, &v46, &v45);
                uint64_t v44 = 0x3FF0000000000000;
                uint64_t v41 = 0x3FF0000000000000;
                uint64_t v38 = 0x3FF0000000000000;
                uint64_t v35 = 0x3FF0000000000000;
                long long v36 = 0u;
                long long v37 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v42 = 0u;
                long long v43 = 0u;
                (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(void *)a1 + 1272))(a1, &v35, &v45);
                PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v35);
                int v10 = 0;
                double v11 = -1.0;
                double v12 = 1.0;
                double v13 = 1.0;
                double v14 = -1.0;
                double v15 = 1.0;
                double v16 = -1.0;
                do
                {
                  long long v17 = (long long *)((char *)&v56 + 8);
                  if (v10) {
                    long long v17 = &v56;
                  }
                  double v18 = *(double *)v17;
                  long long v19 = (long long *)((char *)&v57 + 8);
                  if ((v10 & 2) != 0) {
                    long long v19 = &v57;
                  }
                  double v20 = *(double *)v19;
                  double v21 = (double *)v58 + 1;
                  if ((v10 & 4) != 0) {
                    double v21 = (double *)v58;
                  }
                  double v22 = *v21;
                  double v60 = v18;
                  double v61 = v20;
                  double v62 = v22;
                  int8x16_t result = PCMatrix44Tmpl<double>::transform<double>((double *)&v46, &v60, &v60);
                  if (v10)
                  {
                    if (v12 >= v60) {
                      double v12 = v60;
                    }
                    if (v11 <= v60) {
                      double v11 = v60;
                    }
                    if (v13 >= v61) {
                      double v13 = v61;
                    }
                    if (v14 <= v61) {
                      double v14 = v61;
                    }
                    if (v15 >= v62) {
                      double v15 = v62;
                    }
                    if (v16 <= v62) {
                      double v16 = v62;
                    }
                  }
                  else
                  {
                    double v14 = v61;
                    double v16 = v62;
                    double v11 = v60;
                    double v12 = v60;
                    double v13 = v61;
                    double v15 = v62;
                  }
                  ++v10;
                }
                while (v10 != 8);
                double v23 = *a2;
                double v24 = a2[1];
                if (*a2 <= v24 && (v26 = a2[2], double v25 = a2[3], v26 <= v25) && (v28 = a2[4], v27 = a2[5], v28 <= v27))
                {
                  if (v12 > v11 || v13 > v14 || v15 > v16) {
                    goto LABEL_38;
                  }
                  if (v23 >= v12) {
                    double v23 = v12;
                  }
                  if (v24 <= v11) {
                    double v24 = v11;
                  }
                  *a2 = v23;
                  a2[1] = v24;
                  if (v26 >= v13) {
                    double v31 = v13;
                  }
                  else {
                    double v31 = v26;
                  }
                  if (v25 <= v14) {
                    double v25 = v14;
                  }
                  a2[2] = v31;
                  a2[3] = v25;
                  if (v28 >= v15) {
                    double v32 = v15;
                  }
                  else {
                    double v32 = v28;
                  }
                  a2[4] = v32;
                  if (v27 > v16) {
                    double v16 = v27;
                  }
                }
                else
                {
                  *a2 = v12;
                  a2[1] = v11;
                  a2[2] = v13;
                  a2[3] = v14;
                  a2[4] = v15;
                }
                a2[5] = v16;
              }
            }
          }
LABEL_38:
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while ((void *)v7 != v8);
      }
    }
  }
  return result;
}

void OZGroup::drawGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp");

  pcAbortImpl();
}

uint64_t OZGroup::gatherWorldLights@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = &unk_1F10AD5F8;
  *(unsigned char *)(a3 + 24) = 0;
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v29);
  uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v7 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v27, 0, sizeof(v27));
  int v28 = 1065353216;
  uint64_t v23 = v7;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  char v26 = 0;
  while (v29[0] != v23)
  {
    if (v29[0] == v29[2])
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = *(void **)(v29[0] + 16);
      if (v8) {
    }
      }
    OZLight::buildLiLight((OZLight *)v8, a2, (uint64_t)v21);
    LiLightSet::add(a3, (const LiLight *)v21);
    LiLight::~LiLight(v21);
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v29);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v21);
  uint64_t v9 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v10 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  double v15 = (PC_Sp_counted_base *)v10;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  char v18 = 0;
  while (v21[0].var0 != v15)
  {
    if (v21[0].var0 != v21[2].var0)
    {
      double v11 = (const void *)*((void *)v21[0].var0 + 2);
      if (v11)
      {
        if (v12)
        {
          OZGroup::returnGroupLights(v12, a2, (uint64_t)v14);
          LiLightSet::add(a3, (uint64_t)v14);
          PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v14);
        }
      }
    }
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v27);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
}

void sub_1B7C88F14(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3 - 104);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::returnGroupLights@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)&v33[40] = *(_OWORD *)&a2->var0.var0;
  int64_t var3 = a2->var0.var3;
  int v6 = (*(uint64_t (**)(void))(*((void *)this + 2) + 104))();
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = &unk_1F10AD5F8;
  *(unsigned char *)(a3 + 24) = 0;
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1424))(this);
  if ((result & 1) == 0)
  {
    OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v32);
    uint64_t v8 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
    uint64_t v9 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
    memset(v30, 0, sizeof(v30));
    int v31 = 1065353216;
    uint64_t v26 = v9;
    uint64_t v27 = v8;
    uint64_t v28 = v9;
    char v29 = 0;
    if (v32[0] == v9) {
      int v10 = 1;
    }
    else {
      int v10 = v6;
    }
    if (v10 == 1)
    {
      while (v32[0] != v26)
      {
        if (v32[0] != v32[2])
        {
          double v11 = *(const void **)(v32[0] + 16);
          if (v11)
          {
            if (v12)
            {
              OZLight::buildLiLight(v12, a2, (uint64_t)v24);
              LiLightSet::add(a3, (const LiLight *)v24);
              LiLight::~LiLight(v24);
            }
          }
        }
        OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v32);
      }
      OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v24);
      uint64_t v13 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
      uint64_t v14 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
      memset(v22, 0, sizeof(v22));
      int v23 = 1065353216;
      char v18 = (PC_Sp_counted_base *)v14;
      uint64_t v19 = v13;
      uint64_t v20 = v14;
      char v21 = 0;
      while (v24[0].var0 != v18)
      {
        if (v24[0].var0 != v24[2].var0)
        {
          double v15 = (const void *)*((void *)v24[0].var0 + 2);
          if (v15)
          {
            if (v16)
            {
              OZGroup::returnGroupLights(v17, v16, a2);
              LiLightSet::add(a3, (uint64_t)v17);
              PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v17);
            }
          }
        }
        OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v24);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
    }
    else
    {
      *(unsigned char *)(a3 + 24) = 1;
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
    return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v33);
  }
  return result;
}

void sub_1B7C89340(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3 - 136);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void *OZSceneNode::begin_t<OZLight,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((void *)v4 != result)
  {
    int v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C894D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZSceneNode::begin_t<OZGroup,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((void *)v4 != result)
  {
    int v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C895F8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator*(void *a1)
{
  if (*a1 == a1[2]) {
    return 0;
  }
  uint64_t v1 = *(const void **)(*a1 + 16);
  if (!v1) {
    return 0;
  }
  else {
}
  }

void OZGroup::addPostEffects(uint64_t a1@<X0>, uint64_t a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  if (a3->var0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1640))(a1) == 2)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
      int v9 = *(_DWORD *)(v8 + 344);
      int v41 = *(_DWORD *)(v8 + 348);
      int v42 = v9;
      int v10 = (LiEquirectProject *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1064))(a1);
      char v40 = (char)v10;
      if (!*(unsigned char *)(a2 + 242))
      {
        uint64_t v19 = *(void *)(a2 + 1280);
        long long v37 = xmmword_1B7E736B0;
        long long v38 = xmmword_1B7E736B0;
        int v39 = 1065353216;
        if (v19)
        {
          double v20 = (*(double (**)(uint64_t))(*(void *)v19 + 504))(v19);
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v19 + 16))(v36, v19);
          long long v31 = 0u;
          long long v32 = 0u;
          long long v30 = 0u;
          int v33 = 4;
          memset(v34, 0, sizeof(v34));
          uint64_t v35 = 0;
          PCMatrix44Tmpl<double>::getTransformation(v36, (uint64_t)&v30);
          v34[0] = vnegq_f64(v34[0]);
          PCMatrix44Tmpl<double>::setTransformation((uint64_t)v36, (double *)&v30);
          uint64_t v21 = 0;
          int v23 = &v37;
          uint64_t v24 = v36;
          do
          {
            for (uint64_t i = 0; i != 3; ++i)
            {
              float v26 = *((double *)v24 + i);
              *((float *)v23 + i) = v26;
            }
            ++v21;
            int v23 = (long long *)((char *)v23 + 12);
            v24 += 2;
          }
          while (v21 != 3);
          float v22 = v20;
          double v27 = v22 * 3.14159265;
          int v9 = v42;
        }
        else
        {
          double v27 = 282.743339;
        }
        float v28 = (float)v9;
        if (*(unsigned char *)(a2 + 202)) {
          float v28 = (float)*(unsigned int *)(a2 + 324);
        }
        float v29 = v27 / 180.0;
        LODWORD(v30) = LiEquirectProject::computeDistanceToImagePlane(v10, v28, v29);
        PCMakePtr<LiEquirectProject,PCPtr<LiImageSource> const&,int const&,int const&,float const&,PCMatrix33Tmpl<float> &,BOOL &>();
      }
      long long v37 = xmmword_1B7E736B0;
      long long v38 = xmmword_1B7E736B0;
      int v39 = 1065353216;
      if (*(void *)(a2 + 1296)) {
        uint64_t v11 = *(void *)(a2 + 1296);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 1280);
      }
      if (v11)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v11 + 16))(v36);
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        int v33 = 4;
        memset(v34, 0, sizeof(v34));
        uint64_t v35 = 0;
        PCMatrix44Tmpl<double>::getTransformation(v36, (uint64_t)&v30);
        *(float64x2_t *)((char *)v34 + 8) = vnegq_f64(*(float64x2_t *)((char *)v34 + 8));
        PCMatrix44Tmpl<double>::setTransformation((uint64_t)v36, (double *)&v30);
        uint64_t v12 = 0;
        uint64_t v13 = &v37;
        uint64_t v14 = v36;
        do
        {
          for (uint64_t j = 0; j != 3; ++j)
          {
            float v16 = *((double *)v14 + j);
            *((float *)v13 + j) = v16;
          }
          ++v12;
          uint64_t v13 = (long long *)((char *)v13 + 12);
          v14 += 2;
        }
        while (v12 != 3);
      }
      if (!PCMatrix33Tmpl<float>::isIdentity((float *)&v37)) {
        PCMakePtr<LiEquirectReorient,PCPtr<LiImageSource> const&,int const&,int const&,PCMatrix33Tmpl<float> &,BOOL &>();
      }
      a4->CMTime var0 = a3->var0;
      PCSharedCount::PCSharedCount(a4 + 1, a3 + 1);
      return;
    }
    a4->CMTime var0 = a3->var0;
    char v18 = a4 + 1;
    uint64_t v17 = a3 + 1;
  }
  else
  {
    a4->CMTime var0 = 0;
    uint64_t v17 = a3 + 1;
    char v18 = a4 + 1;
  }

  PCSharedCount::PCSharedCount(v18, v17);
}

void sub_1B7C89A70(_Unwind_Exception *exception_object)
{
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, double *a2)
{
  return PCMatrix44Tmpl<double>::setTransformation(a1, 0, 4, *a2, a2[1], a2[2], a2[7], a2[8], a2[9], a2[3], a2[4], a2[5], a2[10], a2[11], 0.0, 0.0, 0.0, 1.0);
}

BOOL PCMatrix33Tmpl<float>::isIdentity(float *a1)
{
  return fabsf(*a1 + -1.0) < 0.00001
      && fabsf(a1[1]) < 0.00001
      && fabsf(a1[2]) < 0.00001
      && fabsf(a1[3]) < 0.00001
      && fabsf(a1[4] + -1.0) < 0.00001
      && fabsf(a1[5]) < 0.00001
      && fabsf(a1[6]) < 0.00001
      && fabsf(a1[7]) < 0.00001
      && fabsf(a1[8] + -1.0) < 0.00001;
}

void PCMakePtr<LiEquirectReorient,PCPtr<LiImageSource> const&,int const&,int const&,PCMatrix33Tmpl<float> &,BOOL &>()
{
}

void sub_1B7C89C6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40C56E03D1);
  _Unwind_Resume(a1);
}

void PCMakePtr<LiEquirectProject,PCPtr<LiImageSource> const&,int const&,int const&,float const&,PCMatrix33Tmpl<float> &,BOOL &>()
{
}

void sub_1B7C89D48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408093706CLL);
  _Unwind_Resume(a1);
}

void *OZGroup::buildRenderGraph(OZElement *this, OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  if ((OZElement::shouldCacheRenders(this) & 1) == 0 && OZElement::isCachedRenderDirty(this))
  {
    uint64_t v30 = 0;
    long long v31 = 0;
    OZElement::setCachedTexture((uint64_t)this, &v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    uint64_t v29 = 0;
    OZElement::setCachedMetalTexture((uint64_t)this, &v29);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
  }
  if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1440))(this)) {
    return (void *)(*(uint64_t (**)(OZElement *, OZRenderParams *, LiGraphBuilder *))(*(void *)this
  }
                                                                                                + 1976))(this, a2, a3);
  if (OZElement::shouldCacheRenders(this)) {
    operator new();
  }
  if (((*(uint64_t (**)(OZElement *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]) & 1) != 0
    || (*(unsigned int (**)(OZElement *))(*(void *)this + 1640))(this) == 2)
  {
    Resolutiouint64_t n = OZRenderParams::getResolution(a2, &v28);
    if ((*(unsigned int (**)(OZElement *, __n128))(*(void *)this + 1640))(this, Resolution) == 2
      && *((unsigned char *)a2 + 242) == 0)
    {
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)&v25.CMTimeValue value = _Q0;
      v10.n128_f64[0] = OZRenderParams::setResolution(a2, &v25);
    }
    int v16 = (*(uint64_t (**)(OZElement *, OZRenderParams *, __n128))(*(void *)this + 2072))(this, a2, v10);
    if (!v16) {
      LiGraphBuilder::partitionWorld((uint64_t)a3);
    }
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v25, a4);
    LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)v24);
    for (uint64_t i = 0; i != 16; i += 4)
    {
      char v18 = (char *)&v25 + i * 8;
      long long v19 = *(_OWORD *)&v24[i + 2];
      *((_OWORD *)v18 + 6) = *(_OWORD *)&v24[i];
      *((_OWORD *)v18 + 7) = v19;
    }
    OZElement::buildRenderGraph(this, (CMTime *)a2, a3, (const OZRenderGraphState *)&v25);
    if (!v16) {
      LiGraphBuilder::partitionWorld((uint64_t)a3);
    }
    OZRenderParams::setResolution(a2, &v28);
  }
  else
  {
    if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1640))(this) == 1
      && OZGroup::isLayerOrder((OZGroup *)this)
      && (OZGroup::isFlattened((OZGroup *)this, (const OZRenderState *)a2) & 1) == 0)
    {
      LiGraphBuilder::partitionWorld((uint64_t)a3);
      int v20 = 1;
    }
    else
    {
      int v20 = 0;
    }
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v25, a4);
    LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)v24);
    for (uint64_t j = 0; j != 16; j += 4)
    {
      float v22 = (char *)&v25 + j * 8;
      long long v23 = *(_OWORD *)&v24[j + 2];
      *((_OWORD *)v22 + 6) = *(_OWORD *)&v24[j];
      *((_OWORD *)v22 + 7) = v23;
    }
    (*(void (**)(OZElement *, OZRenderParams *, LiGraphBuilder *, CMTime *, void))(*(void *)this + 1952))(this, a2, a3, &v25, 0);
    if (v20) {
      LiGraphBuilder::partitionWorld((uint64_t)a3);
    }
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v27);
  return std::__list_imp<unsigned int>::clear(v26);
}

void sub_1B7C8A4D8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 104));
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 168));
  PCSharedCount::~PCSharedCount(v3);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL OZGroup::isLayerOrder(OZGroup *this)
{
  return ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this) & 0xFFFFFFFD) == 0
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19792), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t OZGroup::isFlattened(OZGroup *this, const OZRenderState *a2)
{
  if (!(*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this)) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
  if (!result) {
    return result;
  }
  if ((OZGroup *)a2->var17 != this
    || ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1864))(this) & 1) != 0
    || ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1608))(this) & 1) != 0)
  {
    return 1;
  }
  uint64_t v5 = *(uint64_t (**)(OZGroup *))(*(void *)this + 1624);

  return v5(this);
}

void *non-virtual thunk to'OZGroup::buildRenderGraph(OZGroup *this, OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  return OZGroup::buildRenderGraph((OZElement *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZGroup::shouldDepthClip(OZGroup *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1632))();
}

BOOL OZGroup::doesTransformFromLocalToScreenSpace(OZGroup *this, const OZRenderParams *a2)
{
  int v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 2072))(this);
  if ((*(unsigned int (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48])) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return 1;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2) {
    return *((unsigned char *)a2 + 242) == 0;
  }
  return 0;
}

uint64_t OZGroup::shouldBeAppliedToChildrenAtTime(OZElement *this, OZEffect *a2, CMTime *a3)
{
  int v6 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1640))(this);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20440), MEMORY[0x1E4F1FA48], 0.0);
  if (v7 >= 4.0) {
    int BlendMode = (*(uint64_t (**)(OZElement *, void))(*(void *)this + 1576))(this, MEMORY[0x1E4F1FA48]);
  }
  else {
    int BlendMode = OZElement::getBlendMode(this, MEMORY[0x1E4F1FA48]);
  }
  int v9 = BlendMode;
  long long v12 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t result = (*(uint64_t (**)(OZEffect *, long long *))(*(void *)a2 + 696))(a2, &v12);
  if (result) {
    return v6 == 1 && v9 == 34;
  }
  return result;
}

void *OZGroup::getEffectListForChildren@<X0>(void *this@<X0>, CMTime *a2@<X1>, void *a3@<X8>)
{
  int v4 = this + 122;
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (this + 122 != (void *)this[123])
  {
    uint64_t v6 = (uint64_t)this;
    do
    {
      double v7 = *(OZEffect **)(*v4 + 16);
      long long v11 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      this = (void *)(*(uint64_t (**)(OZEffect *, long long *, void, uint64_t, uint64_t))(*(void *)v7 + 280))(v7, &v11, 0, 1, 1);
      if (this)
      {
        CMTime v10 = *a2;
        this = (void *)OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)v6, v7, &v10);
        if (!this) {
          return this;
        }
        this = operator new(0x18uLL);
        uint64_t v8 = (void *)a3[1];
        uint64_t v9 = a3[2];
        *this = a3;
        this[1] = v8;
        this[2] = v7;
        *uint64_t v8 = this;
        a3[1] = this;
        a3[2] = v9 + 1;
      }
      int v4 = (void *)*v4;
    }
    while (v4 != *(void **)(v6 + 984));
  }
  return this;
}

void sub_1B7C8AB58(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::appliesEffectToChildren(OZGroup *this, CMTime *a2)
{
  uint64_t v2 = (char *)this + 976;
  v9[0] = v9;
  v9[1] = v9;
  void v9[2] = 0;
  if ((OZGroup *)((char *)this + 976) == *((OZGroup **)this + 123))
  {
    uint64_t shouldBeAppliedToChildrenAtTime = 0;
  }
  else
  {
    do
    {
      BOOL v5 = *(OZEffect **)(*(void *)v2 + 16);
      CMTime v8 = *a2;
      uint64_t shouldBeAppliedToChildrenAtTime = OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)this, v5, &v8);
      if (shouldBeAppliedToChildrenAtTime) {
        break;
      }
      uint64_t v2 = *(char **)v2;
    }
    while (v2 != *((char **)this + 123));
  }
  std::__list_imp<unsigned int>::clear(v9);
  return shouldBeAppliedToChildrenAtTime;
}

void sub_1B7C8AC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getEffectListForGeodeAtTime@<X0>(uint64_t this@<X0>, CMTime *a2@<X1>, void *a3@<X8>)
{
  int v4 = (uint64_t *)(this + 976);
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (this + 976 != *(void *)(this + 984))
  {
    uint64_t v6 = this;
    while (1)
    {
      double v7 = *(OZEffect **)(*v4 + 16);
      CMTime v12 = *a2;
      this = OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)v6, v7, &v12);
      CMTime v8 = *(uint64_t **)(v6 + 984);
      if ((this & 1) == 0) {
        break;
      }
      int v4 = (uint64_t *)*v4;
      if (v4 == v8) {
        return this;
      }
    }
    if (v4 != v8)
    {
      uint64_t v9 = (void *)a3[1];
      uint64_t v10 = a3[2] + 1;
      do
      {
        uint64_t v11 = *(void *)(*v4 + 16);
        this = (uint64_t)operator new(0x18uLL);
        *(void *)(this + 8) = v9;
        *(void *)(this + 16) = v11;
        *(void *)this = a3;
        *uint64_t v9 = this;
        a3[1] = this;
        a3[2] = v10;
        int v4 = (uint64_t *)*v4;
        ++v10;
        uint64_t v9 = (void *)this;
      }
      while (v4 != v8);
    }
  }
  return this;
}

void sub_1B7C8ACF8(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void *OZGroup::addGeodeEffectsToState(OZGroup *this, OZRenderGraphState *a2, CMTime *a3)
{
  CMTime v11 = *a3;
  OZGroup::getEffectListForChildren(this, &v11, &v12);
  uint64_t v4 = v14;
  if (v14)
  {
    uint64_t v6 = v12;
    BOOL v5 = v13;
    uint64_t v7 = *v13;
    *(void *)(v7 + 8) = *(void *)(v12 + 8);
    **(void **)(v6 + 8) = v7;
    uint64_t v9 = *((void *)a2 + 8);
    CMTime v8 = (void *)((char *)a2 + 64);
    *(void *)(v9 + 8) = v5;
    *BOOL v5 = v9;
    *CMTime v8 = v6;
    *(void *)(v6 + 8) = v8;
    v8[2] += v4;
    uint64_t v14 = 0;
  }
  return std::__list_imp<unsigned int>::clear(&v12);
}

uint64_t OZGroup::setupGraphBuilder(OZGroup *this, LiGraphBuilder *a2, const OZRenderParams *a3)
{
  OZElement::setupGraphBuilder((uint64_t)this);
  uint64_t v6 = *(uint64_t (**)(OZGroup *, LiGraphBuilder *, const OZRenderParams *, void, void))(*(void *)this + 2336);

  return v6(this, a2, a3, 0, 0);
}

void OZGroup::addGroupToGraphBuilder(OZGroup *this, LiGraphBuilder *a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v3, a3);
  operator new();
}

void sub_1B7C8B5DC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2 + 1);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL OZGroup::shouldLockToCamera(OZGroup *this, int a2)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this))
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = OZGroup::isAtRootLevel(this);
    if (result) {
      return result;
    }
  }
  if (a2) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2;
  }
  return result;
}

void OZGroup::build3DWorldRenderGraph(OZChannel *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  BOOL v5 = (CMTime *)a2;
  OZRenderState::OZRenderState(&v72, a2);
  memset(&v71, 0, sizeof(v71));
  uint64_t v7 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))this->var0 + 80))(this);
  OZRetimingUtil::RemapTimeValue(v7, (OZChannelObjectRoot *)&v72, &v71.value);
  CMTime time = v71;
  Float64 Seconds = CMTimeGetSeconds(&time);
  uint64_t v68 = 0x3FF0000000000000;
  uint64_t v65 = 0x3FF0000000000000;
  uint64_t v62 = 0x3FF0000000000000;
  uint64_t v59 = 0x3FF0000000000000;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21152), (const CMTime *)&v72, 0.0);
  uint64_t v58 = v8;
  CMTime v81 = *v5;
  OZ3DEngineCore::getMotionLights(&v81, this, (OZElement *)((char *)a3 + 112), (uint64_t)v57);
  v81.CMTimeValue value = OZGroup::masterScene((OZGroup *)this);
  std::allocate_shared[abi:ne180100]<Li3DEngineWorldData,std::allocator<Li3DEngineWorldData>,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,void>(&v81.value, &Seconds, (uint64_t)&v59, &v58, (uint64_t)v57, &v56);
  double v9 = Seconds;
  OZSceneNode::begin_t<OZ3DEngineSceneElement,false,false>((uint64_t)this, (uint64_t)v78);
  double v10 = -1.0;
  double v11 = 1.0;
  if (v78[0] == v78[2] || (uint64_t v12 = (const void *)*((void *)v78[0] + 2)) == 0)
  {
    double v14 = 1.0;
    double v15 = -1.0;
    double v16 = 1.0;
    double v17 = -1.0;
  }
  else
  {
    double v14 = 1.0;
    double v15 = -1.0;
    double v16 = 1.0;
    double v17 = -1.0;
    if (v13)
    {
      char v18 = v13;
      long long v51 = v5;
      double v50 = v9;
      do
      {
        unint64_t v19 = *((void *)v18 + 1);
        *(_OWORD *)&v81.CMTimeValue value = xmmword_1B8380D80;
        if ((OZFactory::isKindOfClass(v19, (int32x4_t *)&v81) & 1) == 0)
        {
          unint64_t v20 = *((void *)v18 + 1);
          *(_OWORD *)&v81.CMTimeValue value = xmmword_1B8380DA0;
          if ((OZFactory::isKindOfClass(v20, (int32x4_t *)&v81) & 1) == 0)
          {
            (*(void (**)(uint64_t *__return_ptr, OZ3DEngineSceneElement *, CMTime *, double))(*(void *)v18 + 2280))(&v76, v18, v5, v9);
            uint64_t v21 = (uint64_t)v56;
            unint64_t v22 = *((unsigned int *)v18 + 20);
            uint64_t v74 = v76;
            double v75 = v77;
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Li3DEngineWorldData::add3DEngineObjectData(v21, v22, &v74);
            double v53 = v16;
            if (v75) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            }
            double v54 = v15;
            double v55 = v14;
            double v52 = v17;
            double v23 = v10;
            uint64_t v24 = 0;
            uint64_t v25 = v76;
            long long v26 = *(_OWORD *)(v76 + 40);
            v73[0] = *(_OWORD *)(v76 + 24);
            v73[1] = v26;
            long long v27 = *(_OWORD *)(v76 + 72);
            v73[2] = *(_OWORD *)(v76 + 56);
            v73[3] = v27;
            do
            {
              float32x4_t v28 = (float32x4_t)v73[v24];
              uint64_t v29 = (float64x2_t *)((char *)&v81 + 32 * v24);
              *uint64_t v29 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
              v29[1] = vcvt_hight_f64_f32(v28);
              ++v24;
            }
            while (v24 != 4);
            int v30 = 0;
            double v10 = -1.0;
            double v31 = 1.0;
            double v14 = 1.0;
            double v15 = -1.0;
            double v32 = 1.0;
            double v17 = -1.0;
            do
            {
              if (v30) {
                uint64_t v33 = 120;
              }
              else {
                uint64_t v33 = 128;
              }
              CMTimeValue v34 = *(void *)(v25 + v33);
              if ((v30 & 2) != 0) {
                uint64_t v35 = 136;
              }
              else {
                uint64_t v35 = 144;
              }
              uint64_t v36 = *(void *)(v25 + v35);
              if ((v30 & 4) != 0) {
                uint64_t v37 = 152;
              }
              else {
                uint64_t v37 = 160;
              }
              CMTimeEpoch v38 = *(void *)(v25 + v37);
              v80.CMTimeValue value = v34;
              *(void *)&v80.timescale = v36;
              v80.CMTimeEpoch epoch = v38;
              PCMatrix44Tmpl<double>::transform<double>((double *)&v81.value, (double *)&v80.value, (double *)&v80.value);
              v43.n128_u64[0] = v80.value;
              if (v30)
              {
                if (v31 >= *(double *)&v80.value) {
                  double v31 = *(double *)&v80.value;
                }
                if (v10 <= *(double *)&v80.value) {
                  double v10 = *(double *)&v80.value;
                }
                v43.n128_u64[0] = *(void *)&v80.timescale;
                v39.n128_u64[0] = v80.epoch;
                if (v14 >= *(double *)&v80.timescale) {
                  double v14 = *(double *)&v80.timescale;
                }
                if (v15 <= *(double *)&v80.timescale) {
                  double v15 = *(double *)&v80.timescale;
                }
                if (v32 >= *(double *)&v80.epoch) {
                  double v32 = *(double *)&v80.epoch;
                }
                if (v17 <= *(double *)&v80.epoch) {
                  double v17 = *(double *)&v80.epoch;
                }
              }
              else
              {
                double v15 = *(double *)&v80.timescale;
                double v17 = *(double *)&v80.epoch;
                double v10 = *(double *)&v80.value;
                double v31 = *(double *)&v80.value;
                double v14 = *(double *)&v80.timescale;
                double v32 = *(double *)&v80.epoch;
              }
              ++v30;
            }
            while (v30 != 8);
            if (v11 > v23)
            {
              double v11 = v31;
              double v16 = v32;
              BOOL v5 = v51;
            }
            else
            {
              v39.n128_f64[0] = v54;
              v43.n128_f64[0] = v55;
              BOOL v5 = v51;
              if (v55 > v54 || v53 > v52)
              {
                double v11 = v31;
                double v16 = v32;
              }
              else
              {
                if (v11 >= v31) {
                  v43.n128_f64[0] = v31;
                }
                else {
                  v43.n128_f64[0] = v11;
                }
                if (v23 <= v10) {
                  v39.n128_f64[0] = v10;
                }
                else {
                  v39.n128_f64[0] = v23;
                }
                if (v55 >= v14) {
                  v40.n128_f64[0] = v14;
                }
                else {
                  v40.n128_f64[0] = v55;
                }
                if (v54 <= v15) {
                  v41.n128_f64[0] = v15;
                }
                else {
                  v41.n128_f64[0] = v54;
                }
                if (v53 >= v32) {
                  v42.n128_f64[0] = v32;
                }
                else {
                  v42.n128_f64[0] = v53;
                }
                if (v52 <= v17) {
                  double v44 = v17;
                }
                else {
                  double v44 = v52;
                }
                BOOL v46 = v31 <= v10 && v14 <= v15 && v32 <= v17;
                if (v46) {
                  double v11 = v43.n128_f64[0];
                }
                if (v46) {
                  double v10 = v39.n128_f64[0];
                }
                else {
                  double v10 = v23;
                }
                if (v46) {
                  double v14 = v40.n128_f64[0];
                }
                else {
                  double v14 = v55;
                }
                if (v46) {
                  double v15 = v41.n128_f64[0];
                }
                else {
                  double v15 = v54;
                }
                if (v46) {
                  double v16 = v42.n128_f64[0];
                }
                else {
                  double v16 = v53;
                }
                if (v46) {
                  double v17 = v44;
                }
                else {
                  double v17 = v52;
                }
              }
            }
            (*(void (**)(OZ3DEngineSceneElement *, CMTime *, __n128, __n128, __n128, __n128, __n128))(*(void *)v18 + 2328))(v18, v5, v43, v39, v40, v41, v42);
            double v9 = v50;
            if (!OZ3DEngineSceneElement::is3DNodeInMasterScene(v18, (OZGroup *)this)) {
              OZ3DEngineSceneElement::add3DNodeToMasterScene(v18);
            }
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
          }
        }
        long long v47 = OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++(v78);
        if (*v47 == v47[2]) {
          break;
        }
        long long v48 = *(const void **)(*v47 + 16);
        if (!v48) {
          break;
        }
      }
      while (v18);
    }
  }
  uint64_t v49 = v56;
  v56[15] = v11;
  v49[16] = v10;
  v49[17] = v14;
  v49[18] = v15;
  v49[19] = v16;
  v49[20] = v17;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v79);
  operator new();
}

void sub_1B7C8C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,char a28)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void *OZGroup::makeRenderGraphOfElements(OZGroup *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4, uint64_t a5)
{
  OZRenderState::OZRenderState(&v50, a2);
  (*(void (**)(OZGroup *, LiGraphBuilder *, OZRenderState *, uint64_t, uint64_t))(*(void *)this + 2336))(this, a3, a2, a5, 1);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v42, a4);
  (*(void (**)(OZGroup *, OZRenderState *, unsigned char *))(*(void *)this + 2064))(this, a2, v42);
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1632))(this))
  {
    v42[0] = 0;
    __int16 v49 = 257;
  }
  BOOL v44 = !OZGroup::shouldLockToCamera(this, a2->var28);
  if ((OZGroup *)a2->var17 == this && OZGroup::isValidToLightInside(this))
  {
    OZGroup::gatherWorldLights(this, a2, (uint64_t)&v39);
    if (v46 >= (int)v39.var0.var2) {
      unsigned int v10 = v46;
    }
    else {
      unsigned int v10 = (2 * v39.var0.var2) | 1;
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v45, v39.var0.var2, v10);
    if ((int)v39.var0.var2 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        LiLight::operator=(v47 + v11, v39.var0.var3 + v11);
        ++v12;
        v11 += 944;
      }
      while (v12 < (int)v39.var0.var2);
    }
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1424))(this))
  {
    if (!OZGroup::isValidToLightInside(this))
    {
      memset(&v39.var0.var1, 0, 17);
      v39.var0.CMTime var0 = (int64_t)&unk_1F10AD5F8;
      if (v46 < 0) {
        int v14 = 1;
      }
      else {
        int v14 = v46;
      }
      PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v45, 0, v14);
LABEL_21:
      char var1_low = LOBYTE(v39.var1);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v39);
      goto LABEL_34;
    }
    OZRenderParams::OZRenderParams((OZRenderParams *)&v39, (const OZRenderParams *)a2);
    if ((a5 & 1) != 0
      || (*(unsigned int (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]))
    {
      v39.var5 = (OZTransformNode *)this;
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
    }
    OZGroup::gatherWorldLights(this, &v39, (uint64_t)&v33);
    if (v46 >= SHIDWORD(v34.var0)) {
      int v15 = v46;
    }
    else {
      int v15 = (2 * HIDWORD(v34.var0)) | 1;
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v45, SHIDWORD(v34.var0), v15);
    if (SHIDWORD(v34.var0) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        LiLight::operator=(v47 + v16, v35 + v16);
        ++v17;
        v16 += 944;
      }
      while (v17 < SHIDWORD(v34.var0));
    }
    char var1_low = v36;
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v33);
    if ((v13 & 1) == 0)
    {
      (*(void (**)(uint64_t *__return_ptr, OZGroup *, unsigned char *))(*(void *)this + 2344))(&v33, this, v42);
      double v18 = a2[4].var7.var0[3][2];
      if (v18 == 0.0) {
        throw_PCNullPointerException(1);
      }
      LiLightSet::add(*(void *)&v18 + 32, (uint64_t)&v33);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v33);
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v39);
  }
LABEL_34:
  LiGraphBuilder::setLights((uint64_t)a3, (uint64_t)&v45);
  CMTime var0 = (CMTime)v50.var0;
  OZGroup::addGeodeEffectsToState(this, (OZRenderGraphState *)v42, &var0);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v39, (const OZRenderParams *)a2);
  if (OZGroup::isFlattened(this, &v50)
    && (*(unsigned int (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]))
  {
    operator new();
  }
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2) {
    __int16 v40 = 0;
  }
  LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)&v33);
  for (uint64_t i = 0; i != 128; i += 32)
  {
    unint64_t v20 = &v42[i];
    long long v21 = *(_OWORD *)((char *)&v35 + i);
    *((_OWORD *)v20 + 6) = *(_OWORD *)((char *)&v33 + i);
    *((_OWORD *)v20 + 7) = v21;
  }
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 20744), 1, 1))
  {
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    uint64_t WorkingGamut = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    uint64_t v33 = 0;
    PCSharedCount::PCSharedCount(&v34);
    LiGraphBuilder::prepare3DEngine((uint64_t)a3, WorkingGamut, &v33);
    PCSharedCount::~PCSharedCount(&v34);
    OZGroup::build3DWorldRenderGraph((OZChannel *)this, a2, a3, (const OZRenderGraphState *)v42);
  }
  OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)&v33);
  if (v33 != v35)
  {
    double v23 = *(const void **)(v33 + 16);
    if (v23)
    {
      if (v24)
      {
        uint64_t v25 = v24;
        BOOL v26 = 0;
        do
        {
          unsigned int v27 = (*(uint64_t (**)(void *, OZRenderState *))(*v25 + 1576))(v25, &v50) - 25;
          if (!v26 && v27 <= 1) {
            LiGraphBuilder::partitionWorld((uint64_t)a3);
          }
          int64_t var3 = a2->var0.var3;
          long long v31 = *(_OWORD *)&a2->var0.var0;
          if ((*(unsigned int (**)(void *, long long *, void, uint64_t, uint64_t))(v25[2] + 104))(v25 + 2, &v31, 0, 1, 1))
          {
            (*(void (**)(void *, OZRenderState *, LiGraphBuilder *, unsigned char *))(*v25 + 2016))(v25, &v39, a3, v42);
          }
          if (v27 <= 1) {
            LiGraphBuilder::partitionWorld((uint64_t)a3);
          }
          float32x4_t v28 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(&v33);
          if (*v28 == v28[2]) {
            break;
          }
          uint64_t v29 = *(const void **)(*v28 + 16);
          if (!v29) {
            break;
          }
          BOOL v26 = v27 < 2;
        }
        while (v25);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v37);
  if (!v41) {
    throw_PCNullPointerException(1);
  }
  OZRenderParams::setShadowLights((OZRenderParams *)a2, (const LiLightSet *)(v41 + 32));
  LiGraphBuilder::endInsertingIntoGroup(a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v39);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v45);
  return std::__list_imp<unsigned int>::clear(v43);
}

void sub_1B7C8CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

BOOL OZGroup::isValidToLightInside(OZGroup *this)
{
  do
  {
    int v2 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
    if (v2 != 1) {
      break;
    }
    if ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1424))(this)) {
      break;
    }
    OZRenderState v3 = (const void *)*((void *)this + 120);
    if (!v3) {
      break;
    }
  }
  while (this);
  return v2 == 1;
}

void OZGroup::makeProjectedImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7C8CF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)va);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x690]);
  std::__list_imp<unsigned int>::clear(&STACK[0x5F0]);
  PCSharedCount::~PCSharedCount(v5 + 1);
  _Unwind_Resume(a1);
}

void OZGroup::makeRenderImageSource(OZGroup *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int a4@<W3>, PCSharedCount *a5@<X8>)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = a4;
  }
  (*(void (**)(PCSharedCount *__return_ptr, OZGroup *, CMTime *, const OZRenderGraphState *, uint64_t))(*(void *)this + 1960))(&v13, this, a2, a3, v10);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19184), MEMORY[0x1E4F1FA48], 0.0)) {
    BOOL v11 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  CMTime v12 = *a2;
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 19336), &v12, 0.0);
  CMTime v12 = *a2;
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 19488), &v12, 0.0);
  if (v11) {
    operator new();
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, &v13);
  PCSharedCount::~PCSharedCount(&v14);
}

void sub_1B7C8D218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x1BA9BFBA0](v6, 0x10A1C40063EAE96);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZGroup::makeRenderImageSource(OZGroup *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int a4@<W3>, PCSharedCount *a5@<X8>)
{
}

uint64_t OZGroup::reloadResources(OZGroup *this, PGContext *a2)
{
  OZSceneNode::rbegin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v6);
  for (uint64_t i = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v6);
        i;
        uint64_t i = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v4))
  {
    (*(void (**)(void *, PGContext *))(*(void *)i + 1456))(i, a2);
    uint64_t v4 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v6);
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v7);
}

void sub_1B7C8D304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *OZSceneNode::rbegin_t<OZElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if (result != (void *)v4) {
    return OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
  }
  return result;
}

void sub_1B7C8D3E0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::eval(OZGroup *this, OZRenderParams *a2)
{
  OZSceneNode::rbegin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v9);
  OZRenderState v3 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v9);
  uint64_t v4 = 0;
  while (v3)
  {
    uint64_t v8 = *((void *)a2 + 2);
    long long v7 = *(_OWORD *)a2;
    if ((*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(v3[2] + 104))(v3 + 2, &v7, 1, 1, 1))
    {
      uint64_t v4 = (*(uint64_t (**)(void *, OZRenderParams *))(*v3 + 96))(v3, a2);
      if (v4 == 1) {
        break;
      }
    }
    BOOL v5 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v9);
    OZRenderState v3 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v5);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v10);
  return v4;
}

void sub_1B7C8D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::dirty(OZElement *this)
{
  uint64_t result = OZElement::dirty(this);
  *((unsigned char *)this + 22888) = 1;
  return result;
}

uint64_t non-virtual thunk to'OZGroup::dirty(OZGroup *this)
{
  uint64_t result = OZElement::dirty((OZElement *)((char *)this - 16));
  *((unsigned char *)this + 22872) = 1;
  return result;
}

uint64_t OZGroup::areStaticHashesInvalid(OZGroup *this)
{
  if (OZSceneNode::areStaticHashesInvalid(this)) {
    return 1;
  }
  OZRenderState v3 = (char *)this + 18776;
  uint64_t v4 = *((void *)this + 2348);
  if ((char *)v4 == v3) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 16) + 544))(*(void *)(v4 + 16));
    if (result) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while ((char *)v4 != v3);
  return result;
}

uint64_t non-virtual thunk to'OZGroup::areStaticHashesInvalid(OZGroup *this)
{
  return OZGroup::areStaticHashesInvalid((OZGroup *)((char *)this - 16));
}

double OZGroup::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3, int a4)
{
  OZSceneNode::calcStaticHash(a1, a2, a3, a4);
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = (__n128 *)v7;
  __n128 v14 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  if (v9 != v10)
  {
    uint64_t v11 = v10;
    do
    {
      StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(void *)(v9 + 16) + 16), a2, a3);
      PCHash128::operator+=((int *)&v14, StaticHash);
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v11);
  }
  *(void *)&double result = PCHashWriteStream::setHash(v8, &v14).n128_u64[0];
  return result;
}

double OZGroup::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4, int a5)
{
  OZSceneNode::calcHashForState(a1, a2, a3, a4, a5);
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = (__n128 *)v9;
  __n128 v16 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  if (v11 != v12)
  {
    uint64_t v13 = v12;
    do
    {
      OZObjectManipulator::getHashForState((_OWORD *)(*(void *)(v11 + 16) + 16), (uint64_t *)a2, (OZRenderParams *)a3, a4, &v15);
      PCHash128::operator+=((int *)&v16, (int *)&v15);
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while (v11 != v13);
  }
  *(void *)&double result = PCHashWriteStream::setHash(v10, &v16).n128_u64[0];
  return result;
}

void *OZGroup::hitCheck(void *a1, float32x2_t *a2, uint64_t a3, void *lpsrc, double *a5, uint64_t a6)
{
  uint64_t v11 = a1;
  if (a6 & 4) != 0 && ((*(uint64_t (**)(void *))(*a1 + 680))(a1)) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v35 = *(_OWORD *)a3;
    uint64_t v36 = *(void *)(a3 + 16);
    if (!(*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(v11[2] + 104))(v11 + 2, &v35, 1, 1, 1))return 0; {
  }
    }
  BOOL v13 = lpsrc
  if ((*(unsigned int (**)(void *))(*v11 + 680))(v11) && !v13)
  {
    v34[0] = xmmword_1B7E736F0;
    v34[1] = xmmword_1B7E736F0;
    *(_OWORD *)__p = xmmword_1B7E736F0;
    (*(void (**)(void *, void **, uint64_t))(*v11 + 1360))(v11, __p, a3);
    float64x2_t v31 = vcvtq_f64_f32(*a2);
    uint64_t v32 = 0;
    (*(void (**)(double *__return_ptr, void *, float64x2_t *, void *, uint64_t, void))(*v11 + 1384))(v30, v11, &v31, lpsrc, a3, 0);
    if (PCRayIntersectsBox(v30, (double *)__p, a5)) {
      return v11;
    }
    return 0;
  }
  if ((a6 & 1) == 0 || !(*(unsigned int (**)(void *))(*v11 + 960))(v11)) {
    return 0;
  }
  uint64_t v14 = (*(uint64_t (**)(void *))(*v11 + 1024))(v11);
  uint64_t v15 = (*(uint64_t (**)(void *))(*v11 + 1032))(v11);
  int v16 = (*(uint64_t (**)(void *))(*v11 + 1640))(v11);
  if (v16 == 1)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&v34[0] = 0;
    if (v14 != v15)
    {
      unint64_t v20 = 0;
      do
      {
        if ((unint64_t)v20 >= *(void *)&v34[0])
        {
          uint64_t v21 = (v20 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v22 = (uint64_t)(*(void *)&v34[0] - (unint64_t)__p[0]) >> 2;
          if (v22 <= v21 + 1) {
            unint64_t v22 = v21 + 1;
          }
          if (*(void *)&v34[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v34, v23);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[8 * v21];
          *(void *)uint64_t v25 = *(void *)(v14 + 16);
          unint64_t v20 = v25 + 8;
          unsigned int v27 = (char *)__p[0];
          BOOL v26 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v28 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v25 - 1) = v28;
              v25 -= 8;
            }
            while (v26 != v27);
            BOOL v26 = (char *)__p[0];
          }
          __p[0] = v25;
          __p[1] = v20;
          *(void *)&v34[0] = &v24[8 * v23];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(void *)unint64_t v20 = *(void *)(v14 + 16);
          v20 += 8;
        }
        __p[1] = v20;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14 != v15);
    }
    uint64_t v29 = (*(uint64_t (**)(void *))(*v11 + 272))(v11);
    uint64_t v11 = (void *)OZScene::hitCheckDepthOrdered(v29, (uint64_t)a2, a3, (uint64_t)lpsrc, (uint64_t)a5, a6, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v11;
  }
  if (v16 || v14 == v15) {
    return 0;
  }
  while (1)
  {
    uint64_t v19 = (*(uint64_t (**)(void, float32x2_t *, uint64_t, void *, double *, uint64_t))(**(void **)(v14 + 16)
                                                                                               + 936))(*(void *)(v14 + 16), a2, a3, lpsrc, a5, a6);
    if (v19) {
      break;
    }
    uint64_t v14 = *(void *)(v14 + 8);
    if (v14 == v15) {
      return 0;
    }
  }
  return (void *)v19;
}

void sub_1B7C8DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::hitCheck()
{
  return 0;
}

uint64_t OZGroup::getDescendantAtIndex(OZGroup *this, int a2)
{
  if (*((void *)this + 2303))
  {
    uint64_t v4 = (char *)this + 18408;
    BOOL v5 = (char *)*((void *)this + 2302);
    BOOL v6 = v5 != (char *)this + 18408;
    int v7 = 0;
    if (v5 != (char *)this + 18408 && a2 != 0)
    {
      do
      {
        BOOL v5 = (char *)*((void *)v5 + 1);
        BOOL v6 = v5 != v4;
      }
      while (v5 != v4 && a2 - 1 != v7++);
    }
    if (v6) {
      goto LABEL_49;
    }
  }
  else
  {
    int v7 = 0;
  }
  if (*((void *)this + 124))
  {
    uint64_t v10 = (char *)this + 976;
    uint64_t v11 = (char *)*((void *)this + 123);
    BOOL v12 = v11 != (char *)this + 976;
    if (v11 != (char *)this + 976 && v7 != a2)
    {
      do
      {
        uint64_t v11 = (char *)*((void *)v11 + 1);
        BOOL v12 = v11 != v10;
      }
      while (v11 != v10 && a2 - 1 != v7++);
    }
    if (v12)
    {
      uint64_t v15 = *((void *)v11 + 2);
      uint64_t v16 = v15 + 48;
      goto LABEL_51;
    }
  }
  if (*((void *)this + 127))
  {
    uint64_t v17 = (char *)this + 1000;
    for (uint64_t i = *((void *)this + 126); (char *)i != v17 && v7 != a2; uint64_t i = *(void *)(i + 8))
    {
      unint64_t v20 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 312))(*(void *)(i + 16));
      if (v20) {
        v7 += !OZChannelBase::testFlag(v20, 2);
      }
    }
    if ((char *)i != v17)
    {
      uint64_t v21 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 312))(*(void *)(i + 16));
      if (v21)
      {
        if (!OZChannelBase::testFlag(v21, 2))
        {
          uint64_t v15 = *(void *)(i + 16);
          goto LABEL_50;
        }
      }
    }
  }
  unint64_t v22 = (char *)this + 18776;
  BOOL v5 = (char *)*((void *)this + 2348);
  BOOL v23 = v5 != (char *)this + 18776;
  if (v5 != (char *)this + 18776 && v7 != a2)
  {
    int v25 = ~v7 + a2;
    do
    {
      BOOL v5 = (char *)*((void *)v5 + 1);
      BOOL v27 = v25-- != 0;
      BOOL v23 = v5 != v22;
    }
    while (v5 != v22 && v27);
  }
  if (!v23) {
    return 0;
  }
LABEL_49:
  uint64_t v15 = *((void *)v5 + 2);
LABEL_50:
  uint64_t v16 = v15 + 16;
LABEL_51:
  if (v15) {
    return v16;
  }
  else {
    return 0;
  }
}

uint64_t OZGroup::getMemberAtIndex(OZGroup *this, int a2)
{
  int v2 = (char *)this + 18776;
  OZRenderState v3 = (char *)*((void *)this + 2348);
  BOOL v4 = v3 != (char *)this + 18776;
  if (v3 != (char *)this + 18776 && a2 != 0)
  {
    int v6 = a2 - 1;
    do
    {
      OZRenderState v3 = (char *)*((void *)v3 + 1);
      BOOL v8 = v6-- != 0;
      BOOL v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v9 = *((void *)v3 + 2);
  if (v9) {
    return v9 + 16;
  }
  else {
    return 0;
  }
}

uint64_t OZGroup::addDescendantAfter(OZGroup *this, OZSceneNode *a2, OZSceneNode *a3)
{
  if (a3)
  {
    int v6 = (char *)this + 18776;
    for (uint64_t i = *((void *)this + 2348); (char *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6) {
          break;
        }
        BOOL v8 = *(uint64_t **)(i + 8);
        uint64_t v9 = operator new(0x18uLL);
        void v9[2] = a2;
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *uint64_t v9 = v10;
        *BOOL v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  BOOL v12 = (void *)*((void *)this + 2348);
  *uint64_t v11 = (char *)this + 18776;
  v11[1] = v12;
  v11[2] = a2;
  *BOOL v12 = v11;
  *((void *)this + 2348) = v11;
LABEL_9:
  ++*((void *)this + 2349);
  if (a3)
  {
    BOOL v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    uint64_t v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 56), v13, v14);
  }
  else
  {
    uint64_t v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v15);
  }
  (*(void (**)(OZSceneNode *, void))(*(void *)a2 + 280))(a2, *((void *)this + 121));
  (*(void (**)(OZSceneNode *, OZGroup *))(*(void *)a2 + 256))(a2, this);
  uint64_t v16 = (OZScene *)*((void *)this + 121);
  if (v16)
  {
    OZScene::registerNode(v16, a2);
    OZScene::addAllDependencies(*((void *)this + 121), a2);
  }
  OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)((char *)this + 56), 1, 1, 0, 1, 0);
  uint64_t v17 = *(uint64_t (**)(OZGroup *))(*(void *)this + 496);

  return v17(this);
}

uint64_t OZGroup::addDescendantBefore(OZGroup *this, OZSceneNode *a2, OZSceneNode *a3)
{
  int v6 = (uint64_t *)((char *)this + 18776);
  if (a3)
  {
    for (uint64_t i = *((void *)this + 2348); (uint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        int v6 = (uint64_t *)i;
        break;
      }
    }
  }
  BOOL v8 = operator new(0x18uLL);
  v8[2] = a2;
  uint64_t v9 = *v6;
  *(void *)(v9 + 8) = v8;
  *BOOL v8 = v9;
  *int v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((void *)this + 2349);
  if (a3)
  {
    uint64_t v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    uint64_t v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 56), v10, v11);
  }
  else
  {
    BOOL v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v12);
  }
  (*(void (**)(OZSceneNode *, OZGroup *))(*(void *)a2 + 256))(a2, this);
  BOOL v13 = (OZScene *)*((void *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, a2);
    OZScene::addAllDependencies(*((void *)this + 121), a2);
  }
  OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)((char *)this + 56), 1, 1, 0, 1, 0);
  uint64_t v14 = *(uint64_t (**)(OZGroup *))(*(void *)this + 496);

  return v14(this);
}

OZSceneNode **OZGroup::removeDescendant(OZGroup *this, OZSceneNode *a2)
{
  BOOL v4 = (OZChannelFolder *)((char *)this + 56);
  BOOL v5 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  OZChannelFolder::removeDescendant(v4, v5);
  int v6 = (OZSceneNode **)((char *)this + 18776);
  for (double result = (OZSceneNode **)*((void *)this + 2348); result != v6; double result = (OZSceneNode **)result[1])
  {
    if (result[2] == a2)
    {
      if (result != v6)
      {
        BOOL v8 = *result;
        *((void *)v8 + 1) = result[1];
        *(void *)result[1] = v8;
        --*((void *)this + 2349);
        operator delete(result);
        (*(void (**)(OZSceneNode *, void))(*(void *)a2 + 256))(a2, 0);
        (*(void (**)(OZGroup *))(*(void *)this + 496))(this);
        unint64_t v9 = *((void *)a2 + 1);
        long long v11 = xmmword_1B8380A90;
        if (OZFactory::isKindOfClass(v9, (int32x4_t *)&v11)
          && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 20744), 1, 1))
        {
          OZ3DEngineSceneElement::remove3DNodeFromMasterScene(v10);
        }
        double result = (OZSceneNode **)*((void *)this + 121);
        if (result)
        {
          OZScene::unregisterNode((OZScene *)result, a2);
          return (OZSceneNode **)OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t OZGroup::acceptsShapeMasks(OZGroup *this)
{
  int v2 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if (!v2) {
    return 1;
  }
  if (v2 == 2) {
    return 0;
  }
  return (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
}

uint64_t OZGroup::restrictImageMaskToStencil(OZGroup *this)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 1) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1632))(this) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t OZGroup::shouldWrapTexture(OZGroup *this)
{
  uint64_t v1 = (char *)this + 18776;
  for (uint64_t i = *((void *)this + 2348); (char *)i != v1; uint64_t i = *(void *)(i + 8))
  {
    if ((*(unsigned int (**)(void))(*(void *)(*(void *)(i + 16) + 16) + 24))())
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(i + 16) + 1064))(*(void *)(i + 16));
      if (!result) {
        return result;
      }
    }
  }
  return 1;
}

void OZGroup::computeLocalTranslation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, CMTime *a5)
{
  v45[3] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = (OZChannel *)(a2 + 288);
  CMTimeEpoch v38 = (OZChannel *)(a2 + 136);
  v45[0] = a2 + 136;
  v45[1] = a2 + 288;
  uint64_t v36 = (OZChannel *)(a2 + 736);
  v45[2] = a2 + 736;
  unint64_t v9 = (OZChannel *)v45[a3];
  int v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
  OZChannel::getKeyframes(v9, 0, __p);
  uint64_t v11 = a3;
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      double v39 = 0.0;
      OZChannel::getKeyframe(v9, *((void **)__p[0] + i), &v44, &v39);
      double CurveValue = OZChannel::getCurveValue(v38, &v44, 1);
      double v42 = OZChannel::getCurveValue(v37, &v44, 1);
      double v43 = OZChannel::getCurveValue(v36, &v44, 1);
      *(&CurveValue + v11) = v39;
      *a5 = v44;
      (*(void (**)(uint64_t, double *, double *, double *, CMTime *))(*(void *)a1 + 1240))(a1, &CurveValue, &v42, &v43, a5);
      uint64_t v14 = *(void **)(a4 + 8);
      unint64_t v13 = *(void *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = *(void **)a4;
        uint64_t v17 = ((uint64_t)v14 - *(void *)a4) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v20);
          uint64_t v16 = *(void **)a4;
          uint64_t v14 = *(void **)(a4 + 8);
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[8 * v17];
        *(double *)unint64_t v22 = *(&CurveValue + v11);
        uint64_t v15 = v22 + 8;
        while (v14 != v16)
        {
          uint64_t v23 = *--v14;
          *((void *)v22 - 1) = v23;
          v22 -= 8;
        }
        *(void *)a4 = v22;
        *(void *)(a4 + 8) = v15;
        *(void *)(a4 + 16) = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        void *v14 = *((void *)&CurveValue + v11);
        uint64_t v15 = v14 + 1;
      }
      *(void *)(a4 + 8) = v15;
    }
  }
  else
  {
    v44.CMTimeValue value = OZChannel::getInitialValue(v38);
    *(void *)&v44.timescale = OZChannel::getInitialValue(v37);
    v44.CMTimeEpoch epoch = OZChannel::getInitialValue(v36);
    (*(void (**)(uint64_t, CMTime *, CMTimeScale *, CMTimeEpoch *, CMTime *))(*(void *)a1 + 1240))(a1, &v44, &v44.timescale, &v44.epoch, a5);
    unint64_t v24 = *(void *)(a4 + 16);
    int v25 = *(void **)(a4 + 8);
    if ((unint64_t)v25 >= v24)
    {
      BOOL v27 = *(void **)a4;
      uint64_t v28 = ((uint64_t)v25 - *(void *)a4) >> 3;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 2 > v29) {
        unint64_t v29 = v30 >> 2;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v31);
        BOOL v27 = *(void **)a4;
        int v25 = *(void **)(a4 + 8);
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[8 * v28];
      PCSharedCount v34 = &v32[8 * v31];
      *(void *)uint64_t v33 = *(&v44.value + a3);
      BOOL v26 = v33 + 8;
      while (v25 != v27)
      {
        uint64_t v35 = *--v25;
        *((void *)v33 - 1) = v35;
        v33 -= 8;
      }
      *(void *)a4 = v33;
      *(void *)(a4 + 8) = v26;
      *(void *)(a4 + 16) = v34;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *int v25 = *(&v44.value + a3);
      BOOL v26 = v25 + 1;
    }
    *(void *)(a4 + 8) = v26;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B7C8EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void OZGroup::computeGlobalTranslation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, CMTime *a5)
{
  v45[3] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = (OZChannel *)(a2 + 288);
  CMTimeEpoch v38 = (OZChannel *)(a2 + 136);
  v45[0] = a2 + 136;
  v45[1] = a2 + 288;
  uint64_t v36 = (OZChannel *)(a2 + 736);
  v45[2] = a2 + 736;
  unint64_t v9 = (OZChannel *)v45[a3];
  int v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
  OZChannel::getKeyframes(v9, 0, __p);
  uint64_t v11 = a3;
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      double v39 = 0.0;
      OZChannel::getKeyframe(v9, *((void **)__p[0] + i), &v44, &v39);
      double CurveValue = OZChannel::getCurveValue(v38, &v44, 1);
      double v42 = OZChannel::getCurveValue(v37, &v44, 1);
      double v43 = OZChannel::getCurveValue(v36, &v44, 1);
      *(&CurveValue + v11) = v39;
      *a5 = v44;
      (*(void (**)(uint64_t, double *, double *, double *, CMTime *))(*(void *)a1 + 1224))(a1, &CurveValue, &v42, &v43, a5);
      uint64_t v14 = *(void **)(a4 + 8);
      unint64_t v13 = *(void *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = *(void **)a4;
        uint64_t v17 = ((uint64_t)v14 - *(void *)a4) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v20);
          uint64_t v16 = *(void **)a4;
          uint64_t v14 = *(void **)(a4 + 8);
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[8 * v17];
        *(double *)unint64_t v22 = *(&CurveValue + v11);
        uint64_t v15 = v22 + 8;
        while (v14 != v16)
        {
          uint64_t v23 = *--v14;
          *((void *)v22 - 1) = v23;
          v22 -= 8;
        }
        *(void *)a4 = v22;
        *(void *)(a4 + 8) = v15;
        *(void *)(a4 + 16) = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        void *v14 = *((void *)&CurveValue + v11);
        uint64_t v15 = v14 + 1;
      }
      *(void *)(a4 + 8) = v15;
    }
  }
  else
  {
    v44.CMTimeValue value = OZChannel::getInitialValue(v38);
    *(void *)&v44.timescale = OZChannel::getInitialValue(v37);
    v44.CMTimeEpoch epoch = OZChannel::getInitialValue(v36);
    (*(void (**)(uint64_t, CMTime *, CMTimeScale *, CMTimeEpoch *, CMTime *))(*(void *)a1 + 1224))(a1, &v44, &v44.timescale, &v44.epoch, a5);
    unint64_t v24 = *(void *)(a4 + 16);
    int v25 = *(void **)(a4 + 8);
    if ((unint64_t)v25 >= v24)
    {
      BOOL v27 = *(void **)a4;
      uint64_t v28 = ((uint64_t)v25 - *(void *)a4) >> 3;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 2 > v29) {
        unint64_t v29 = v30 >> 2;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v31);
        BOOL v27 = *(void **)a4;
        int v25 = *(void **)(a4 + 8);
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[8 * v28];
      PCSharedCount v34 = &v32[8 * v31];
      *(void *)uint64_t v33 = *(&v44.value + a3);
      BOOL v26 = v33 + 8;
      while (v25 != v27)
      {
        uint64_t v35 = *--v25;
        *((void *)v33 - 1) = v35;
        v33 -= 8;
      }
      *(void *)a4 = v33;
      *(void *)(a4 + 8) = v26;
      *(void *)(a4 + 16) = v34;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *int v25 = *(&v44.value + a3);
      BOOL v26 = v25 + 1;
    }
    *(void *)(a4 + 8) = v26;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B7C8F02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void OZGroup::computeLocalScale(uint64_t a1, uint64_t a2, OZChannel *a3, int a4, uint64_t a5, CMTime *a6)
{
  int v11 = (*((uint64_t (**)(OZChannel *))a3->var0 + 104))(a3);
  uint64_t v70 = 0x3FF0000000000000;
  uint64_t v67 = 0x3FF0000000000000;
  uint64_t v64 = 0x3FF0000000000000;
  uint64_t v60 = 0;
  uint64_t v61 = 0x3FF0000000000000;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  memset(v56, 0, sizeof(v56));
  int v57 = 4;
  long long v58 = 0u;
  long long v59 = 0u;
  if (v11)
  {
    int v12 = v11;
    OZChannel::getKeyframes(a3, 0, __p);
    uint64_t v13 = 0;
    uint64_t v14 = a4;
    do
    {
      double v53 = 0.0;
      OZChannel::getKeyframe(a3, *((void **)__p[0] + v13), &v54, &v53);
      *a6 = v54;
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)a1 + 1264))(a1, &v61, a6);
      Transformatiouint64_t n = liSafeGetTransformation((long long *)&v61, (uint64_t)v56);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2218, v16, v17, v18, v19, v20);
      double v21 = v53 * *((double *)&v56[1] + v14 + 1);
      uint64_t v23 = *(double **)(a5 + 8);
      unint64_t v22 = *(void *)(a5 + 16);
      if ((unint64_t)v23 >= v22)
      {
        int v25 = *(double **)a5;
        uint64_t v26 = ((uint64_t)v23 - *(void *)a5) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v29);
          int v25 = *(double **)a5;
          uint64_t v23 = *(double **)(a5 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        unint64_t v31 = (double *)&v30[8 * v26];
        double *v31 = v21;
        unint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        *(void *)a5 = v31;
        *(void *)(a5 + 8) = v24;
        *(void *)(a5 + 16) = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        double *v23 = v21;
        unint64_t v24 = v23 + 1;
      }
      *(void *)(a5 + 8) = v24;
      ++v13;
    }
    while (v13 != v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    double InitialValue = OZChannel::getInitialValue(a3);
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)a1 + 1264))(a1, &v61, a6);
    BOOL v34 = liSafeGetTransformation((long long *)&v61, (uint64_t)v56);
    _pcCheckGetTransformation((FILE *)v34, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2229, v35, v36, v37, v38, v39);
    double v40 = InitialValue * *((double *)&v56[1] + a4 + 1);
    unint64_t v41 = *(void *)(a5 + 16);
    double v42 = *(double **)(a5 + 8);
    if ((unint64_t)v42 >= v41)
    {
      CMTime v44 = *(double **)a5;
      uint64_t v45 = ((uint64_t)v42 - *(void *)a5) >> 3;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v41 - (void)v44;
      if (v47 >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        __int16 v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v48);
        CMTime v44 = *(double **)a5;
        double v42 = *(double **)(a5 + 8);
      }
      else
      {
        __int16 v49 = 0;
      }
      OZRenderState v50 = (double *)&v49[8 * v45];
      long long v51 = &v49[8 * v48];
      *OZRenderState v50 = v40;
      double v43 = v50 + 1;
      while (v42 != v44)
      {
        uint64_t v52 = *((void *)v42-- - 1);
        *((void *)v50-- - 1) = v52;
      }
      *(void *)a5 = v50;
      *(void *)(a5 + 8) = v43;
      *(void *)(a5 + 16) = v51;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *double v42 = v40;
      double v43 = v42 + 1;
    }
    *(void *)(a5 + 8) = v43;
  }
}

void sub_1B7C8F3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZGroup::computeGlobalScale(uint64_t a1, uint64_t a2, OZChannel *a3, int a4, uint64_t a5, CMTime *a6)
{
  int v11 = (*((uint64_t (**)(OZChannel *))a3->var0 + 104))(a3);
  uint64_t v70 = 0x3FF0000000000000;
  uint64_t v67 = 0x3FF0000000000000;
  uint64_t v64 = 0x3FF0000000000000;
  uint64_t v60 = 0;
  uint64_t v61 = 0x3FF0000000000000;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  memset(v56, 0, sizeof(v56));
  int v57 = 4;
  long long v58 = 0u;
  long long v59 = 0u;
  if (v11)
  {
    int v12 = v11;
    OZChannel::getKeyframes(a3, 0, __p);
    uint64_t v13 = 0;
    uint64_t v14 = a4;
    do
    {
      double v53 = 0.0;
      OZChannel::getKeyframe(a3, *((void **)__p[0] + v13), &v54, &v53);
      *a6 = v54;
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)a1 + 1256))(a1, &v61, a6);
      Transformatiouint64_t n = liSafeGetTransformation((long long *)&v61, (uint64_t)v56);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2255, v16, v17, v18, v19, v20);
      double v21 = v53 * *((double *)&v56[1] + v14 + 1);
      uint64_t v23 = *(double **)(a5 + 8);
      unint64_t v22 = *(void *)(a5 + 16);
      if ((unint64_t)v23 >= v22)
      {
        int v25 = *(double **)a5;
        uint64_t v26 = ((uint64_t)v23 - *(void *)a5) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v29);
          int v25 = *(double **)a5;
          uint64_t v23 = *(double **)(a5 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        unint64_t v31 = (double *)&v30[8 * v26];
        double *v31 = v21;
        unint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        *(void *)a5 = v31;
        *(void *)(a5 + 8) = v24;
        *(void *)(a5 + 16) = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        double *v23 = v21;
        unint64_t v24 = v23 + 1;
      }
      *(void *)(a5 + 8) = v24;
      ++v13;
    }
    while (v13 != v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    double InitialValue = OZChannel::getInitialValue(a3);
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)a1 + 1256))(a1, &v61, a6);
    BOOL v34 = liSafeGetTransformation((long long *)&v61, (uint64_t)v56);
    _pcCheckGetTransformation((FILE *)v34, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2266, v35, v36, v37, v38, v39);
    double v40 = InitialValue * *((double *)&v56[1] + a4 + 1);
    unint64_t v41 = *(void *)(a5 + 16);
    double v42 = *(double **)(a5 + 8);
    if ((unint64_t)v42 >= v41)
    {
      CMTime v44 = *(double **)a5;
      uint64_t v45 = ((uint64_t)v42 - *(void *)a5) >> 3;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v41 - (void)v44;
      if (v47 >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        __int16 v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v48);
        CMTime v44 = *(double **)a5;
        double v42 = *(double **)(a5 + 8);
      }
      else
      {
        __int16 v49 = 0;
      }
      OZRenderState v50 = (double *)&v49[8 * v45];
      long long v51 = &v49[8 * v48];
      *OZRenderState v50 = v40;
      double v43 = v50 + 1;
      while (v42 != v44)
      {
        uint64_t v52 = *((void *)v42-- - 1);
        *((void *)v50-- - 1) = v52;
      }
      *(void *)a5 = v50;
      *(void *)(a5 + 8) = v43;
      *(void *)(a5 + 16) = v51;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *double v42 = v40;
      double v43 = v42 + 1;
    }
    *(void *)(a5 + 8) = v43;
  }
}

void sub_1B7C8F790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::computeLocalRotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned char *a6)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a3 + 552))(a3, 0))
  {
    long long v17 = *MEMORY[0x1E4F1FA08];
    CMTimeEpoch v18 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    while (((*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 624))(a3, &v17, 0) & 1) != 0)
      ;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 632))(a3, &v17, 0);
    if (result)
    {
      do
      {
        long long v12 = v17;
        *(_OWORD *)a5 = v17;
        CMTimeEpoch v13 = v18;
        *(void *)(a5 + 16) = v18;
        *(_OWORD *)&v16.CMTimeValue value = v12;
        v16.CMTimeEpoch epoch = v13;
        computeLocalRotationValue(a1, a3, a4, a5, &v16, a6);
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 632))(a3, &v17, 0);
      }
      while ((result & 1) != 0);
    }
  }
  else
  {
    CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = v15.epoch;
    *(_OWORD *)a5 = *(_OWORD *)&v15.value;
    *(void *)(a5 + 16) = epoch;
    return computeLocalRotationValue(a1, a3, a4, a5, &v15, a6);
  }
  return result;
}

uint64_t computeLocalRotationValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CMTime *a5, unsigned char *a6)
{
  uint64_t v72 = 0x3FF0000000000000;
  uint64_t v69 = 0x3FF0000000000000;
  uint64_t v66 = 0x3FF0000000000000;
  uint64_t v63 = 0x3FF0000000000000;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  memset(v58, 0, sizeof(v58));
  int v59 = 4;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  double v54 = 1.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v57 = 0.0;
  double v50 = 1.0;
  double v51 = 0.0;
  double v52 = 0.0;
  double v53 = 0.0;
  float64x2_t v48 = 0uLL;
  v49[0] = 0.0;
  v12.n128_f64[0] = OZChannelRotation3D::getValueAsQuatd(a2, &v54, a5, 0.0);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(void *)a1 + 1264))(a1, &v63, a4, v12);
  Transformatiouint64_t n = liSafeGetTransformation((long long *)&v63, (uint64_t)v58, &v50);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2283, v14, v15, v16, v17, v18);
  double v19 = v50 * v54 - (v51 * v55 + v52 * v56 + v53 * v57);
  double v20 = v54 * v51 + v50 * v55;
  double v21 = v52 * v57 - v56 * v53;
  double v22 = v51 * v56 - v55 * v52;
  double v52 = v54 * v52 + v50 * v56 + v55 * v53 - v51 * v57;
  double v53 = v22 + v54 * v53 + v50 * v57;
  double v50 = v19;
  double v51 = v20 + v21;
  OZChannelRotation3D::getValueAsEulerAngles(a2, a5, &v48, 0.0);
  float64x2_t v23 = v48;
  double v24 = v49[0];
  CMTime v45 = *a5;
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, CMTime *))(*(void *)a1 + 1352))(&v46, a1, &v45);
  uint64_t v44 = 0x3FF0000000000000;
  uint64_t v41 = 0x3FF0000000000000;
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v35 = 0x3FF0000000000000;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  PCMatrix44Tmpl<double>::leftRotate((double *)&v35, 4, v46.f64[0], v46.f64[1], v47);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v35, v48.f64, v48.f64);
  float64x2_t v48 = vsubq_f64(v48, v46);
  v49[0] = v49[0] - v47;
  PCQuat<double>::getIncrementalEulerAngles(&v50, v48.f64, &v48.f64[1], v49, 4u);
  float64x2_t v25 = v48;
  if (vabdd_f64(v48.f64[0], v23.f64[0]) >= 0.0000001)
  {
    BOOL v27 = 1;
    double v26 = v49[0];
  }
  else
  {
    double v26 = v49[0];
    BOOL v27 = vabdd_f64(v48.f64[1], v23.f64[1]) >= 0.0000001 || vabdd_f64(v49[0], v24) >= 0.0000001;
  }
  *a6 |= v27;
  long long v31 = *(_OWORD *)&a5->value;
  CMTimeEpoch epoch = a5->epoch;
  float64x2_t v33 = v25;
  double v34 = v26;
  unint64_t v28 = a3[1];
  if (v28 >= a3[2])
  {
    uint64_t result = std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(a3, (uint64_t)&v31);
  }
  else
  {
    long long v29 = *(_OWORD *)&a5->value;
    *(void *)(v28 + 16) = a5->epoch;
    *(_OWORD *)unint64_t v28 = v29;
    *(float64x2_t *)(v28 + 24) = v25;
    *(double *)(v28 + 40) = v26;
    uint64_t result = v28 + 48;
  }
  a3[1] = result;
  return result;
}

uint64_t OZGroup::computeGlobalRotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned char *a6)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a3 + 552))(a3, 0))
  {
    long long v17 = *MEMORY[0x1E4F1FA08];
    CMTimeEpoch v18 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    while (((*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 624))(a3, &v17, 0) & 1) != 0)
      ;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 632))(a3, &v17, 0);
    if (result)
    {
      do
      {
        long long v12 = v17;
        *(_OWORD *)a5 = v17;
        CMTimeEpoch v13 = v18;
        *(void *)(a5 + 16) = v18;
        *(_OWORD *)&v16.CMTimeValue value = v12;
        v16.CMTimeEpoch epoch = v13;
        computeGlobalRotationValue(a1, a3, a4, a5, &v16, a6);
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a3 + 632))(a3, &v17, 0);
      }
      while ((result & 1) != 0);
    }
  }
  else
  {
    CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = v15.epoch;
    *(_OWORD *)a5 = *(_OWORD *)&v15.value;
    *(void *)(a5 + 16) = epoch;
    return computeGlobalRotationValue(a1, a3, a4, a5, &v15, a6);
  }
  return result;
}

uint64_t computeGlobalRotationValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CMTime *a5, unsigned char *a6)
{
  uint64_t v80 = 0x3FF0000000000000;
  uint64_t v77 = 0x3FF0000000000000;
  uint64_t v74 = 0x3FF0000000000000;
  uint64_t v70 = 0;
  uint64_t v71 = 0x3FF0000000000000;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  memset(v66, 0, sizeof(v66));
  int v67 = 4;
  long long v68 = 0u;
  long long v69 = 0u;
  double v62 = 1.0;
  double v63 = 0.0;
  double v64 = 0.0;
  double v65 = 0.0;
  double v58 = 1.0;
  double v59 = 0.0;
  double v60 = 0.0;
  double v61 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v57 = 0.0;
  v12.n128_f64[0] = OZChannelRotation3D::getValueAsQuatd(a2, &v62, a5, 0.0);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(void *)a1 + 1256))(a1, &v71, a4, v12);
  Transformatiouint64_t n = liSafeGetTransformation((long long *)&v71, (uint64_t)v66, &v58);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2337, v14, v15, v16, v17, v18);
  double v19 = v58 * v62 - (v59 * v63 + v60 * v64 + v61 * v65);
  double v20 = v62 * v59 + v58 * v63;
  double v21 = v60 * v65 - v64 * v61;
  double v22 = v59 * v64 - v63 * v60;
  double v60 = v62 * v60 + v58 * v64 + v63 * v61 - v59 * v65;
  double v61 = v22 + v62 * v61 + v58 * v65;
  double v58 = v19;
  double v59 = v20 + v21;
  OZChannelRotation3D::getValueAsEulerAngles(a2, a5, &v55, 0.0);
  double v24 = v55;
  double v23 = v56;
  double v25 = v57;
  CMTime v54 = *a5;
  (*(void (**)(double *__return_ptr, uint64_t, CMTime *))(*(void *)a1 + 1352))(&v44, a1, &v54);
  double v26 = v44;
  double v27 = *(double *)&v45;
  double v28 = -v44;
  double v29 = -*(double *)&v45;
  double v30 = *((double *)&v45 + 1);
  double v31 = -*((double *)&v45 + 1);
  uint64_t v53 = 0x3FF0000000000000;
  uint64_t v50 = 0x3FF0000000000000;
  uint64_t v47 = 0x3FF0000000000000;
  double v44 = 1.0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  PCMatrix44Tmpl<double>::leftRotate(&v44, 4, v28, v29, v31);
  PCMatrix44Tmpl<double>::transform<double>(&v44, &v55, &v55);
  double v55 = v26 + v55;
  double v56 = v27 + v56;
  double v57 = v30 + v57;
  PCQuat<double>::getIncrementalEulerAngles(&v58, &v55, &v56, &v57, 4u);
  double v32 = v55;
  double v33 = v56;
  if (vabdd_f64(v55, v24) >= 0.0000001)
  {
    BOOL v35 = 1;
    double v34 = v57;
  }
  else
  {
    double v34 = v57;
    BOOL v35 = vabdd_f64(v56, v23) >= 0.0000001 || vabdd_f64(v57, v25) >= 0.0000001;
  }
  *a6 |= v35;
  long long v39 = *(_OWORD *)&a5->value;
  CMTimeEpoch epoch = a5->epoch;
  double v41 = v32;
  double v42 = v33;
  double v43 = v34;
  unint64_t v36 = a3[1];
  if (v36 >= a3[2])
  {
    uint64_t result = std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(a3, (uint64_t)&v39);
  }
  else
  {
    long long v37 = *(_OWORD *)&a5->value;
    *(void *)(v36 + 16) = a5->epoch;
    *(_OWORD *)unint64_t v36 = v37;
    *(double *)(v36 + 24) = v32;
    *(double *)(v36 + 32) = v33;
    *(double *)(v36 + 40) = v34;
    uint64_t result = v36 + 48;
  }
  a3[1] = result;
  return result;
}

void OZGroup::setKeypoints(uint64_t a1, OZChannel *a2, double **a3)
{
  unsigned int v5 = (*((uint64_t (**)(OZChannel *))a2->var0 + 104))(a2);
  if (v5)
  {
    unsigned int v6 = v5;
    OZChannel::getKeyframes(a2, 0, __p);
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      double v10 = 0.0;
      OZChannel::getKeyframe(a2, *(void **)((char *)__p[0] + v7), &v11, &v10);
      OZChannel::setKeyframe(a2, *(void **)((char *)__p[0] + v7), &v11, (*a3)[v7 / 8]);
      v7 += 8;
    }
    while (v8 != v7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    double v9 = **a3;
    OZChannel::setInitialValue(a2, v9, 0);
  }
}

void sub_1B7C90360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::setKeypoints(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a2 + 480))(a2, 1);
  uint64_t v6 = a3[1] - *a3;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 / 48;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    do
    {
      double v10 = (void *)(*a3 + v7);
      (*(void (**)(void *, void *))(*a2 + 600))(a2, v10);
      v11.n128_u64[0] = v10[3];
      (*(void (**)(void *, void *, void, __n128))(a2[17] + 712))(a2 + 17, v10, 0, v11);
      v12.n128_u64[0] = v10[4];
      (*(void (**)(void *, void *, void, __n128))(a2[36] + 712))(a2 + 36, v10, 0, v12);
      v13.n128_u64[0] = v10[5];
      uint64_t result = (*(uint64_t (**)(void *, void *, void, __n128))(a2[55] + 712))(a2 + 55, v10, 0, v13);
      v7 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

void OZGroup::transformToLocal(OZGroup *this, OZTransformNode *a2)
{
  if (a2)
  {
    OZRenderState::OZRenderState(&v39);
    if ((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this)) {
      double v4 = *(double *)((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this) + 384);
    }
    else {
      double v4 = 1.0;
    }
    v39.int64_t var3 = v4;
    *(_OWORD *)&v39.var0.CMTime var0 = *MEMORY[0x1E4F1FA48];
    v39.var0.int64_t var3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(_WORD *)&v39.var8 = 0;
    unint64_t v36 = 0;
    long long v37 = 0;
    uint64_t v38 = 0;
    uint64_t v32 = 0;
    double v33 = 0;
    double v34 = 0;
    uint64_t v35 = 0;
    double v30 = 0;
    double v31 = 0;
    double v27 = 0;
    double v28 = 0;
    uint64_t v29 = 0;
    double v24 = 0;
    double v25 = 0;
    uint64_t v26 = 0;
    double v21 = 0;
    double v22 = 0;
    uint64_t v23 = 0;
    __p = 0;
    double v19 = 0;
    uint64_t v20 = 0;
    char v17 = 0;
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 0, (uint64_t)&v36, (CMTime *)&v39);
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 1, (uint64_t)&v33, (CMTime *)&v39);
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 2, (uint64_t)&v30, (CMTime *)&v39);
    v39.var9 = 1;
    if (!v6)
    {
      OZGroup::computeLocalScale((uint64_t)this, v5, (OZChannel *)((char *)a2 + 4576), 0, (uint64_t)&v27, (CMTime *)&v39);
      OZGroup::computeLocalScale((uint64_t)this, v7, (OZChannel *)((char *)a2 + 4728), 1, (uint64_t)&v24, (CMTime *)&v39);
      OZGroup::computeLocalScale((uint64_t)this, v8, (OZChannel *)((char *)a2 + 4880), 2, (uint64_t)&v21, (CMTime *)&v39);
    }
    uint64_t v9 = OZGroup::computeLocalRotation((uint64_t)this, v5, (uint64_t)a2 + 2104, (uint64_t *)&__p, (uint64_t)&v39, &v17);
    OZGroup::setKeypoints(v9, (OZChannel *)((char *)a2 + 1352), &v36);
    OZGroup::setKeypoints(v10, (OZChannel *)((char *)a2 + 1504), (double **)&v33);
    OZGroup::setKeypoints(v11, (OZChannel *)((char *)a2 + 1952), (double **)&v30);
    if (!v6)
    {
      OZGroup::setKeypoints(v12, (OZChannel *)((char *)a2 + 4576), (double **)&v27);
      OZGroup::setKeypoints(v13, (OZChannel *)((char *)a2 + 4728), (double **)&v24);
      OZGroup::setKeypoints(v14, (OZChannel *)((char *)a2 + 4880), (double **)&v21);
    }
    if (v17)
    {
      uint64_t v15 = (*(uint64_t (**)(char *, void))(*((void *)a2 + 263) + 552))((char *)a2 + 2104, 0);
      if (v15)
      {
        OZGroup::setKeypoints(v15, (void *)a2 + 263, &__p);
      }
      else
      {
        uint64_t v16 = (double *)__p;
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 280) + 712))((char *)a2 + 2240, MEMORY[0x1E4F1FA48], 0, *((double *)__p + 3));
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 299) + 712))((char *)a2 + 2392, MEMORY[0x1E4F1FA48], 0, v16[4]);
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 318) + 712))((char *)a2 + 2544, MEMORY[0x1E4F1FA48], 0, v16[5]);
      }
    }
    if (__p)
    {
      double v19 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      double v22 = v21;
      operator delete(v21);
    }
    if (v24)
    {
      double v25 = v24;
      operator delete(v24);
    }
    if (v27)
    {
      double v28 = v27;
      operator delete(v27);
    }
    if (v30)
    {
      double v31 = v30;
      operator delete(v30);
    }
    if (v33)
    {
      double v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      long long v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1B7C90948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25)
  {
    v25[1] = a25;
    operator delete(a25);
  }
  double v27 = (void *)v25[3];
  if (v27)
  {
    v25[4] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void OZGroup::transformToGlobal(OZGroup *this, OZTransformNode *a2)
{
  if (a2)
  {
    OZRenderState::OZRenderState(&v39);
    if ((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this)) {
      double v4 = *(double *)((*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this) + 384);
    }
    else {
      double v4 = 1.0;
    }
    v39.int64_t var3 = v4;
    *(_OWORD *)&v39.var0.CMTime var0 = *MEMORY[0x1E4F1FA48];
    v39.var0.int64_t var3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(_WORD *)&v39.var8 = 0;
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1352));
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1504));
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1952));
    unint64_t v36 = 0;
    long long v37 = 0;
    uint64_t v38 = 0;
    uint64_t v32 = 0;
    double v33 = 0;
    double v34 = 0;
    uint64_t v35 = 0;
    double v30 = 0;
    double v31 = 0;
    double v27 = 0;
    double v28 = 0;
    uint64_t v29 = 0;
    double v24 = 0;
    double v25 = 0;
    uint64_t v26 = 0;
    double v21 = 0;
    double v22 = 0;
    uint64_t v23 = 0;
    __p = 0;
    double v19 = 0;
    uint64_t v20 = 0;
    char v17 = 0;
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 0, (uint64_t)&v36, (CMTime *)&v39);
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 1, (uint64_t)&v33, (CMTime *)&v39);
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 2, (uint64_t)&v30, (CMTime *)&v39);
    v39.var9 = 1;
    if (!v6)
    {
      OZGroup::computeGlobalScale((uint64_t)this, v5, (OZChannel *)((char *)a2 + 4576), 0, (uint64_t)&v27, (CMTime *)&v39);
      OZGroup::computeGlobalScale((uint64_t)this, v7, (OZChannel *)((char *)a2 + 4728), 1, (uint64_t)&v24, (CMTime *)&v39);
      OZGroup::computeGlobalScale((uint64_t)this, v8, (OZChannel *)((char *)a2 + 4880), 2, (uint64_t)&v21, (CMTime *)&v39);
    }
    uint64_t v9 = OZGroup::computeGlobalRotation((uint64_t)this, v5, (uint64_t)a2 + 2104, (uint64_t *)&__p, (uint64_t)&v39, &v17);
    OZGroup::setKeypoints(v9, (OZChannel *)((char *)a2 + 1352), &v36);
    OZGroup::setKeypoints(v10, (OZChannel *)((char *)a2 + 1504), (double **)&v33);
    OZGroup::setKeypoints(v11, (OZChannel *)((char *)a2 + 1952), (double **)&v30);
    if (!v6)
    {
      OZGroup::setKeypoints(v12, (OZChannel *)((char *)a2 + 4576), (double **)&v27);
      OZGroup::setKeypoints(v13, (OZChannel *)((char *)a2 + 4728), (double **)&v24);
      OZGroup::setKeypoints(v14, (OZChannel *)((char *)a2 + 4880), (double **)&v21);
    }
    if (v17)
    {
      uint64_t v15 = (*(uint64_t (**)(char *, void))(*((void *)a2 + 263) + 552))((char *)a2 + 2104, 0);
      if (v15)
      {
        OZGroup::setKeypoints(v15, (void *)a2 + 263, &__p);
      }
      else
      {
        uint64_t v16 = (double *)__p;
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 280) + 712))((char *)a2 + 2240, MEMORY[0x1E4F1FA48], 0, *((double *)__p + 3));
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 299) + 712))((char *)a2 + 2392, MEMORY[0x1E4F1FA48], 0, v16[4]);
        (*(void (**)(char *, void, void, double))(*((void *)a2 + 318) + 712))((char *)a2 + 2544, MEMORY[0x1E4F1FA48], 0, v16[5]);
      }
    }
    if (__p)
    {
      double v19 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      double v22 = v21;
      operator delete(v21);
    }
    if (v24)
    {
      double v25 = v24;
      operator delete(v24);
    }
    if (v27)
    {
      double v28 = v27;
      operator delete(v27);
    }
    if (v30)
    {
      double v31 = v30;
      operator delete(v30);
    }
    if (v33)
    {
      double v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      long long v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1B7C90E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25)
  {
    v25[1] = a25;
    operator delete(a25);
  }
  double v27 = (void *)v25[3];
  if (v27)
  {
    v25[4] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::hasLockedDescendant(OZGroup *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  if (v4 == v5) {
    return 0;
  }
  uint64_t v6 = v5;
  while (1)
  {
    uint64_t v7 = *(void **)(v4 + 16);
    if (v7)
    {
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v10 = 1;
    if (((*(uint64_t (**)(void *, uint64_t))(v7[2] + 56))(v7 + 2, 1) & 1) != 0
      || v9 && (OZImageElement::isLockedDropZone(v9) & 1) != 0)
    {
      break;
    }
    if (v8 && (a2 & (*(unsigned int (**)(void *))(*(void *)v8 + 960))(v8) & 1) != 0)
    {
      uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v8 + 1024))(v8);
      uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v8 + 1032))(v8);
      uint64_t v10 = 0;
      a2 = 1;
      if (v4 == v6) {
        return v10;
      }
    }
    else
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v6) {
        return 0;
      }
    }
  }
  return v10;
}

BOOL OZGroup::hasDescendants(OZGroup *this)
{
  return *((void *)this + 2349) != 0;
}

uint64_t OZGroup::numberOfDescendants(OZGroup *this)
{
  return (*((_DWORD *)this + 248)
                      + *((_DWORD *)this + 254)
                      + *((_DWORD *)this + 4606)
                      + *((_DWORD *)this + 4698));
}

uint64_t OZGroup::numberOfMembers(OZGroup *this)
{
  return *((unsigned int *)this + 4698);
}

uint64_t OZGroup::begin_descendants(OZGroup *this)
{
  return *((void *)this + 2348);
}

uint64_t OZGroup::end_descendants(OZGroup *this)
{
  return (uint64_t)this + 18776;
}

uint64_t OZGroup::hasDescendant(OZGroup *this, OZSceneNode *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  v12[0] = v4;
  v12[1] = v4;
  uint64_t v13 = v5;
  char v14 = 0;
  (*(void (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v9 = v6;
  while (1)
  {
    if (v12[0] == v9)
    {
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      return 0;
    }
    uint64_t v7 = v12[0] == v13 ? 0 : *(OZSceneNode **)(v12[0] + 16);
    if (v7 == a2) {
      break;
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
  return 1;
}

void sub_1B7C912F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGroupScope);
    uint64_t v10 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1024))(this);
    uint64_t v11 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1032))(this);
    memset(v25, 0, sizeof(v25));
    int v26 = 1065353216;
    uint64_t v21 = v10;
    uint64_t v22 = v10;
    uint64_t v23 = v11;
    char v24 = 0;
    (*(void (**)(OZElement *))(*(void *)this + 1024))(this);
    uint64_t v12 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1032))(this);
    memset(v19, 0, sizeof(v19));
    int v20 = 1065353216;
    uint64_t v18 = v12;
    for (i = v10; i != v18; uint64_t v21 = i)
    {
      if (i == v23) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)(i + 16);
      }
      if (!OZChannelBase::testFlag((OZChannelBase *)(v14 + 56), 8))
      {
        uint64_t v16 = *(void *)(v14 + 48);
        uint64_t v15 = v14 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(v16 + 16))(v15, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v15 + 24))(v15, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      uint64_t i = *(void *)(v21 + 8);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  }
  return OZElement::writeBody(this, a2, a3, a4, a5);
}

void sub_1B7C915B0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZGroup::writeBody(OZGroup *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZGroup::writeBody((OZElement *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZGroup::parseBegin(OZGroup *this, PCSerializerReadStream *a2)
{
  OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGroupScope);
  unsigned int v4 = *((_DWORD *)a2 + 26);
  if (v4 <= 4)
  {
    double v5 = (double)v4;
    uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)((char *)this + 20136), MEMORY[0x1E4F1FA48], -1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20288), v6, -1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20440), v6, v5, 0);
  }
  if (*((_DWORD *)a2 + 27) <= 9u) {
    OZChannel::setValue((OZChannel *)((char *)this + 20592), MEMORY[0x1E4F1FA48], 0.0, 0);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZGroup::parseBegin(OZGroup *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZGroup::parseEnd(OZGroup *this, PCSerializerReadStream *a2)
{
  OZElement::parseEnd((OZElement *)this, a2);
  (*(void (**)(OZGroup *, uint64_t))(*(void *)this + 1704))(this, 1);
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2)
  {
    OZGroup::updateBlendModeFor360(this);
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
      if (Identifier)
      {
        if (CFStringCompare(Identifier, @"com.apple.FinalCutApp", 1uLL) == kCFCompareEqualTo)
        {
          (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
          return 0;
        }
      }
    }
    uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
    if (v6)
    {
      uint64_t v7 = *(const __CFURL ***)(v6 + 1584);
      if (v7)
      {
        OZDocument::getFilename(v7, (PCURL *)&v19);
        PCURL::PCURL((PCURL *)&v18, &v19, 0);
        if (OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v18, v8))
        {
          (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
          PCURL::~PCURL((PCURL *)&v18);
          PCString::~PCString(&v19);
          return 0;
        }
        PCURL::~PCURL((PCURL *)&v18);
        PCString::~PCString(&v19);
      }
    }
  }
  uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20136), MEMORY[0x1E4F1FA48], 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20288), v9, 0.0);
  if (v11 < 0.0 || v12 < 0.0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19336), v9, 0.0);
    double v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19488), v9, 0.0);
    double v16 = v15;
    OZChannel::setValue((OZChannel *)((char *)this + 20136), v9, v14, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20288), v9, v16, 0);
  }
  return 1;
}

void sub_1B7C9193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZGroup::updateBlendModeFor360(OZGroup *this)
{
  uint64_t v1 = (PCString *)((char *)this + 6832);
  uint64_t v2 = (PCString *)PCBlend::modeMenuString(0);
  OZChannelEnum::setStrings(v1, v2, 1);
  int v6 = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v6, v3);
  OZChannelEnum::setTags((OZChannelEnum *)v1, ElementBlendModes, v6);
  uint64_t result = OZChannel::isModified((OZChannel *)v1);
  if ((result & 1) == 0)
  {
    OZChannel::setDefaultValue((OZChannel *)v1, 0.0);
    OZChannelBase::reset((OZChannelBase *)v1, 0);
    return (uint64_t)OZChannelBase::saveStateAsDefault((OZChannelBase *)v1);
  }
  return result;
}

uint64_t non-virtual thunk to'OZGroup::parseEnd(OZGroup *this, PCSerializerReadStream *a2)
{
  return OZGroup::parseEnd((OZGroup *)((char *)this - 48), a2);
}

uint64_t OZGroup::parseElement(OZGroup *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v33);
  PCSharedCount::PCSharedCount(&v32);
  PCSharedCount::PCSharedCount(&v31);
  double v29 = 0.0;
  *(void *)double v30 = 0;
  unsigned int v28 = 0;
  char v27 = 0;
  OZElement::parseElement((OZElement *)this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 61)
  {
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
    long long v34 = xmmword_1B8380BE0;
    uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v34);
LABEL_14:
    char v17 = (char *)SceneNode;
    if (!SceneNode) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  if (v6 != 62)
  {
    if (v6 != 63) {
      goto LABEL_20;
    }
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
    long long v34 = xmmword_1B8380BF0;
    uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v34);
    goto LABEL_14;
  }
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v30);
  PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
  PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v31);
  PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v28);
  PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v27);
  if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v32) & 1) == 0) {
    PCString::set((PCString *)&v32, (const PCString *)&v33);
  }
  PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v29);
  uint64_t v8 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v30[0]);
  if (!v8
  {
    uint64_t v23 = (void (**)(PCSerializerReadStream *))(*(void *)a2 + 24);
LABEL_19:
    (*v23)(a2);
    goto LABEL_20;
  }
  double v10 = v9;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v9 + 8), (int32x4_t)xmmword_1B7E77B80)))) & 1) == 0)
  {
    uint64_t v23 = (void (**)(PCSerializerReadStream *))(*(void *)a2 + 40);
    goto LABEL_19;
  }
  if (v11)
  {
    double v12 = v11;
    BOOL v13 = PCString::empty((PCString *)&v31);
    double v14 = *(uint64_t (**)(void *, PCSharedCount *, void, void, BOOL))(*(void *)v12 + 200);
    BOOL v15 = v27 != 0;
    if (!v13)
    {
      int v26 = (char *)v14(v12, &v31, v30[1], v28, v15);
      char v17 = v26;
      if (v26) {
      OZFxGenerator::setInternalName((OZFxGenerator *)v26, (const PCString *)&v32);
      }
      goto LABEL_30;
    }
    uint64_t v16 = v14(v12, &v32, v30[1], v28, v15);
  }
  else
  {
    if (PCString::empty((PCString *)&v31)) {
      double v25 = &v32;
    }
    else {
      double v25 = &v31;
    }
    uint64_t v16 = (*(uint64_t (**)(char *, PCSharedCount *, void))(*(void *)v10 + 168))(v10, v25, v30[1]);
  }
  char v17 = (char *)v16;
LABEL_30:
  (*(void (**)(char *, double))(*(void *)v17 + 1176))(v17, v29);
  (*(void (**)(char *, PCSharedCount *, void))(*((void *)v17 + 2) + 120))(v17 + 16, &v33, 0);
LABEL_15:
  OZChannelBase::setID((OZChannelBase *)(v17 + 56), v30[1]);
  (*(void (**)(char *, OZGroup *))(*(void *)v17 + 256))(v17, this);
  uint64_t v18 = operator new(0x18uLL);
  v18[1] = (char *)this + 18776;
  double v18[2] = v17;
  uint64_t v19 = *((void *)this + 2347);
  void *v18 = v19;
  *(void *)(v19 + 8) = v18;
  *((void *)this + 2347) = v18;
  ++*((void *)this + 2349);
  int v20 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v17 + 640))(v17);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v20);
  uint64_t v21 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v17 + 640))(v17);
  OZChannelBase::resetFlag(v21, 64, 0);
  uint64_t v22 = (OZScene *)*((void *)this + 121);
  if (v22)
  {
    OZScene::registerNode(v22, (OZSceneNode *)v17);
    OZScene::addAllDependencies(*((void *)this + 121), (OZSceneNode *)v17);
  }
  PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v17 + 48));
LABEL_20:
  PCString::~PCString((PCString *)&v31);
  PCString::~PCString((PCString *)&v32);
  PCString::~PCString((PCString *)&v33);
  return 1;
}

void sub_1B7C91FE4(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  __cxa_end_catch();
  JUMPOUT(0x1B7C91CF4);
}

void sub_1B7C92020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
}

uint64_t non-virtual thunk to'OZGroup::parseElement(OZGroup *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZGroup::allowDrag(OZGroup *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (lpsrc)
  {
    double v10 = a3;
    double v11 = a6;
    if (v13 == this) {
      return;
    }
    uint64_t v16 = v15;
    if (v13)
    {
      if (OZGroup::hasDescendant(v13, this)) {
        return;
      }
    }
    if (v14
      && (!OZTransformNode::isInRootWorld((OZTransformNode *)this)
       || ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1424))(this) & 1) != 0
       || (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2))
    {
      return;
    }
  }
  else
  {
    if (!this) {
      return;
    }
    double v10 = a3;
    double v11 = a6;
    uint64_t v16 = 0;
    double v12 = 0;
  }
  unint64_t v17 = *((void *)lpsrc + 1);
  long long v34 = xmmword_1B837FE80;
  if ((OZFactory::isKindOfClass(v17, (int32x4_t *)&v34) & 1) != 0
    || v16
    && (!OZGroup::isValidToLightInside(this)
     || (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 2))
  {
    return;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 2 || v12 == 0)
  {
    if (!v12) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v19 = v12[1];
    long long v33 = xmmword_1B8380C10;
    char isKindOfClass = OZFactory::isKindOfClass(v19, (int32x4_t *)&v33);
    if ((isKindOfClass & 1) == 0)
    {
      unint64_t v21 = v12[1];
      long long v32 = xmmword_1B8380CF0;
      if ((OZFactory::isKindOfClass(v21, (int32x4_t *)&v32) & 1) == 0)
      {
        unint64_t v22 = v12[1];
        long long v31 = xmmword_1B8380D10;
        if ((OZFactory::isKindOfClass(v22, (int32x4_t *)&v31) & 1) == 0) {
          return;
        }
      }
    }
  }
  if ((v12[128] & 8) == 0)
  {
    unint64_t v23 = v12[1];
    long long v30 = xmmword_1B8381350;
    if ((OZFactory::isKindOfClass(v23, (int32x4_t *)&v30) & 1) == 0)
    {
      unint64_t v24 = v12[1];
      long long v29 = xmmword_1B7E77B80;
      if ((OZFactory::isKindOfClass(v24, (int32x4_t *)&v29) & 1) == 0)
      {
        if ((*(uint64_t (**)(void *))(*v12 + 272))(v12)
          && (uint64_t v25 = (*(uint64_t (**)(void *))(*v12 + 272))(v12),
              v25 == (*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this)))
        {
          int v26 = a4 & 2;
        }
        else
        {
          if (!(*(unsigned int (**)(void *))(v12[2] + 96))(v12 + 2)) {
            return;
          }
          int v26 = a4 & 1;
        }
        *a5 = v26;
        return;
      }
    }
  }
  if ((v12[128] & 8) == 0
    || (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 1
    || (*(unsigned int (**)(OZGroup *))(*(void *)this + 1632))(this))
  {
LABEL_32:
    OZElement::allowDrag((OZElement *)this, lpsrc, v10, a4, a5, v11, a7);
  }
}

void non-virtual thunk to'OZGroup::allowDrag(OZGroup *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

uint64_t OZGroup::performDragOperation(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  unsigned int v11 = a5;
  if (!lpsrc)
  {
    if (!this) {
      return 0;
    }
LABEL_20:
    return OZElement::performDragOperation(this, lpsrc, a3, a4, v11, a6, a7, a8);
  }
  if (v16) {
  else
  }
    uint64_t v18 = 0;
  if (v17 == this || v17 && (OZGroup::hasDescendant((OZGroup *)v17, (OZSceneNode *)this) & 1) != 0) {
    return 0;
  }
  unsigned int v11 = a5;
  if (!v16) {
    goto LABEL_20;
  }
  if ((OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)v16 + 640))(v16) == a3) {
    return 0;
  }
  int v19 = *((_DWORD *)v16 + 256);
  int v38 = a7 & 8;
  if ((a7 & 8 & v19) == 0 && ((v19 | a7) & 8) != 0) {
    goto LABEL_20;
  }
  unint64_t v21 = (const void *)*((void *)v16 + 120);
  if (v21) {
  else
  }
    unint64_t v22 = 0;
  BOOL v24 = (a4 & 0x20) != 0 || v22 == this;
  int v25 = !v24;
  BOOL v26 = !v24 && v18 != 0;
  if (v18 && v22 && v25)
  {
    PCURL::PCURL((PCURL *)v41, @"Undo Reorder");
    (*(void (**)(void *, CMTime *))(*((void *)v18 + 263) + 344))((void *)v18 + 263, v41);
    PCString::~PCString((PCString *)v41);
    OZGroup::transformToGlobal((OZGroup *)v22, v18);
  }
  uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v16 + 272))(v16);
  if (v27)
  {
    if (v26) {
      unsigned int v28 = 4;
    }
    else {
      unsigned int v28 = 3;
    }
    if ((a7 & 8) != 0) {
      uint64_t v29 = 5;
    }
    else {
      uint64_t v29 = v28;
    }
    PCURL::PCURL((PCURL *)v41, @"Undo Reorder");
    (*(void (**)(uint64_t, CMTime *, uint64_t))(*((void *)v16 + 2) + 176))((uint64_t)v16 + 16, v41, v29);
    PCString::~PCString((PCString *)v41);
    OZSceneNode::removeFromParent((OZSceneNode *)v16);
  }
  else
  {
    if (a7)
    {
      long long v30 = (OZChannelFolder *)(*(uint64_t (**)(void *))(*(void *)v16 + 640))(v16);
      memset(&v42, 0, sizeof(v42));
      (*(void (**)(CMTime *__return_ptr))(*(void *)v30 + 712))(v41);
      CMTime v43 = v41[0];
      CMTime v44 = *a8;
      PC_CMTimeSaferSubtract(&v44, &v43, (uint64_t)&v42);
      CMTime v40 = v42;
      uint64_t v31 = (*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v31 + 336), (__n128 *)v41);
      shiftRecursive(v30, &v40, v41);
      logMessageTracerFeatureUsage((OZSceneNode *)v16);
    }
    LOBYTE(v26) = 0;
  }
  uint64_t v32 = *((void *)this + 2348);
  if ((OZElement *)v32 != (OZElement *)((char *)this + 18776))
  {
    long long v33 = (uint64_t *)(v32 + 16);
    if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v32 + 16) + 640))(*(void *)(v32 + 16)) == a3)
    {
      uint64_t v34 = 0;
LABEL_55:
      if (a5 == 3) {
        uint64_t v34 = *v33;
      }
      goto LABEL_57;
    }
    while (1)
    {
      uint64_t v32 = *(void *)(v32 + 8);
      if ((OZElement *)v32 == (OZElement *)((char *)this + 18776)) {
        break;
      }
      uint64_t v34 = *v33;
      long long v33 = (uint64_t *)(v32 + 16);
      if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v32 + 16) + 640))(*(void *)(v32 + 16)) == a3) {
        goto LABEL_55;
      }
    }
  }
  uint64_t v34 = 0;
LABEL_57:
  if ((v38 & *((_DWORD *)v16 + 256)) != 0) {
    (*(void (**)(void *))(*(void *)v16 + 1048))(v16);
  }
  if (v18) {
    BOOL v35 = v26;
  }
  else {
    BOOL v35 = 0;
  }
  if (v35)
  {
    uint64_t v36 = (*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
    (*(void (**)(OZTransformNode *, uint64_t))(*(void *)v18 + 280))(v18, v36);
    OZGroup::transformToLocal((OZGroup *)this, v18);
  }
  (*(void (**)(OZElement *, void *, uint64_t))(*(void *)this + 984))(this, v16, v34);
  (*(void (**)(OZElement *))(*(void *)this + 496))(this);
  if (!v27)
  {
    {
      PCURL::PCURL((PCURL *)v41, @"Undo New Generator");
    }
    else
    {
      PCURL::PCURL((PCURL *)v41, @"Undo Paste");
    }
    (*(void (**)(uint64_t, CMTime *, uint64_t))(*((void *)v16 + 2) + 176))((uint64_t)v16 + 16, v41, 1);
    PCString::~PCString((PCString *)v41);
  }
  uint64_t v37 = *((void *)this + 121);
  if (v37) {
    OZDocument::postNotification(*(OZDocument **)(v37 + 1584), 16);
  }
  return 1;
}

void sub_1B7C92CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
}

void shiftRecursive(OZChannelFolder *a1, CMTime *a2, CMTime *a3)
{
  if (a1)
  {
    if (v6)
    {
      uint64_t v7 = v6;
      (*((void (**)(CMTime *__return_ptr))v6->var0 + 89))(&v16);
      CMTime v18 = v16;
      CMTime v17 = *a2;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      CMTime v16 = v15;
      (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v7->var0 + 40))(&v14, v7);
      CMTime v18 = v14;
      CMTime v17 = *a2;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      OZRetimingUtil::SetTimeOffsetAndExtentInteractive(v7, &v15, &v16, a3, v8);
    }
  }
  uint64_t v9 = *((void *)a1 + 14);
  if (v9)
  {
    unsigned int v11 = *(const void ***)v9;
    unint64_t v10 = *(void *)(v9 + 8);
    if (*(void *)v9 < v10)
    {
      do
      {
        if (*v11)
        {
          if (v12)
          {
            CMTime v13 = *a2;
            shiftRecursive(v12, &v13, a3);
          }
        }
        ++v11;
      }
      while ((unint64_t)v11 < v10);
    }
  }
}

void logMessageTracerFeatureUsage(OZSceneNode *a1)
{
  unint64_t v2 = *((void *)a1 + 1);
  long long v7 = xmmword_1B7E78260;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v7))
  {
    int Name = (PCString *)OZObjectManipulator::getName((OZSceneNode *)((char *)a1 + 16));
    CStr = PCString::createCStr(Name);
    OZChannelBase::setRangeName((OZChannelBase *)"Text Generator", (const PCString *)CStr);
    free(CStr);
  }
  else
  {
    unint64_t v5 = *((void *)a1 + 1);
    long long v6 = xmmword_1B8380CF0;
    if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v6)) {
      OZMsgTracerLogFxPlugUsage((OZSceneNode *)((char *)a1 + 16));
    }
  }
}

uint64_t non-virtual thunk to'OZGroup::performDragOperation(OZGroup *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZGroup::performDragOperation((OZElement *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZGroup::updateLinkedIDs(uint64_t a1, uint64_t a2)
{
  OZSceneNode::updateLinkedIDs(a1, a2);
  OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v9);
  if (v9[0] != v9[2])
  {
    unsigned int v4 = *(const void **)(v9[0] + 16);
    if (v4)
    {
            i;
      {
        (*(void (**)(void *, uint64_t))(*(void *)i + 840))(i, a2);
        long long v6 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v9);
        if (*v6 == v6[2]) {
          break;
        }
        long long v7 = *(const void **)(*v6 + 16);
        if (!v7) {
          break;
        }
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v10);
}

void sub_1B7C93100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double OZGroup::getTransformMatrix(OZTransformNode *a1, uint64_t a2, uint64_t a3)
{
  OZTransformNode::getTransformMatrix(a1, a2, (CMTime *)a3);
  if (OZGroup::shouldLockToCamera((OZGroup *)a1, *(unsigned __int8 *)(a3 + 242)) && *(unsigned char *)(a3 + 64) != 0) {
    double result = PCMatrix44Tmpl<double>::leftMult(a2, (double *)(a3 + 72));
  }
  if (*(unsigned char *)(a3 + 200))
  {
    uint64_t v17 = 0x3FF0000000000000;
    uint64_t v14 = 0x3FF0000000000000;
    uint64_t v11 = 0x3FF0000000000000;
    uint64_t v8 = 0x3FF0000000000000;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    (*(void (**)(OZTransformNode *, uint64_t *, uint64_t))(*(void *)a1 + 1272))(a1, &v8, a3);
    return PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v8);
  }
  return result;
}

double OZGroup::getInvTransformMatrix(OZTransformNode *a1, uint64_t a2, uint64_t a3)
{
  OZTransformNode::getInvTransformMatrix(a1, a2, (CMTime *)a3);
  if (OZGroup::shouldLockToCamera((OZGroup *)a1, *(unsigned __int8 *)(a3 + 242)) && *(unsigned char *)(a3 + 64) != 0)
  {
    long long v8 = *(_OWORD *)(a3 + 152);
    long long v14 = *(_OWORD *)(a3 + 136);
    *(_OWORD *)long long v15 = v8;
    long long v9 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)&v15[16] = *(_OWORD *)(a3 + 168);
    *(_OWORD *)&unsigned char v15[32] = v9;
    long long v10 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)long long v12 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v12[16] = v10;
    long long v11 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)&v12[32] = *(_OWORD *)(a3 + 104);
    long long v13 = v11;
    PCMatrix44Tmpl<double>::invert((double *)v12, (double *)v12, 0.0);
    double result = PCMatrix44Tmpl<double>::rightMult(a2, (double *)v12);
  }
  if (*(unsigned char *)(a3 + 200))
  {
    *(void *)&v15[40] = 0x3FF0000000000000;
    *(void *)long long v15 = 0x3FF0000000000000;
    *(void *)&v12[40] = 0x3FF0000000000000;
    *(void *)long long v12 = 0x3FF0000000000000;
    memset(&v12[8], 0, 32);
    long long v13 = 0u;
    long long v14 = 0u;
    memset(&v15[8], 0, 32);
    (*(void (**)(OZTransformNode *, unsigned char *, uint64_t))(*(void *)a1 + 2280))(a1, v12, a3);
    return PCMatrix44Tmpl<double>::leftMult(a2, (double *)v12);
  }
  return result;
}

uint64_t OZGroup::setLithiumTransform(OZGroup *this, LiSceneObject *a2, OZRenderState *a3)
{
  uint64_t v33 = 0x3FF0000000000000;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v27 = 0x3FF0000000000000;
  uint64_t v24 = 0x3FF0000000000000;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  OZRenderState::OZRenderState(&v23, a3);
  v23.var4 = 1;
  v23.var8 = 0;
  (*(void (**)(OZGroup *, uint64_t *, OZRenderState *))(*(void *)this + 1256))(this, &v24, &v23);
  if (OZGroup::shouldLockToCamera(this, a3->var28))
  {
    var17 = a3[4].var17;
    (*(void (**)(float64x2_t *__return_ptr, OZElement *))(*(void *)var17 + 16))(&v11, var17);
    if (!(*(unsigned int (**)(OZElement *))(*(void *)var17 + 632))(var17))
    {
      double v8 = (*(double (**)(OZElement *))(*(void *)var17 + 320))(var17);
      if (v8 != 0.0)
      {
        double v13 = v13 - v8 * v12;
        double v16 = v16 - v8 * v15;
        double v19 = v19 - v8 * v18;
        double v22 = v22 - v8 * v21;
      }
    }
    double v9 = (*(double (**)(OZElement *))(*(void *)var17 + 488))(var17);
    if (v9 != 1.0)
    {
      float64x2_t v11 = vmulq_n_f64(v11, v9);
      float64x2_t v14 = vmulq_n_f64(v14, v9);
      float64x2_t v17 = vmulq_n_f64(v17, v9);
      float64x2_t v20 = vmulq_n_f64(v20, v9);
      double v12 = v9 * v12;
      double v15 = v9 * v15;
      double v18 = v9 * v18;
      double v21 = v9 * v21;
    }
    v6.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v24, v11.f64);
  }
  return (*(uint64_t (**)(LiSceneObject *, uint64_t *, __n128))(*(void *)a2 + 16))(a2, &v24, v6);
}

void OZGroup::getFilmback(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, float64x2_t *a3@<X8>)
{
  CMTime var0 = (CMTime)a2->var0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20136), &var0, 0.0);
  double v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20288), &var0, 0.0);
  if (v6 == 0.0 || v7 == 0.0)
  {
    uint64_t v8 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v13);
    if (v8)
    {
      int v18 = *(_DWORD *)(v8 + 408);
      long long v15 = *(_OWORD *)(v8 + 360);
      long long v16 = *(_OWORD *)(v8 + 376);
      long long v17 = *(_OWORD *)(v8 + 392);
      long long v14 = *(_OWORD *)(v8 + 344);
      long long v9 = *(_OWORD *)(v8 + 432);
      long long v19 = *(_OWORD *)(v8 + 416);
      long long v20 = v9;
      long long v21 = *(_OWORD *)(v8 + 448);
      PCCFRef<CGColorSpace *>::operator=(&v22, (CGColorSpace **)(v8 + 464));
      long long v23 = *(_OWORD *)(v8 + 472);
      v24[0] = *(_OWORD *)(v8 + 488);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v8 + 500);
      PCString::set(&v25, (const PCString *)(v8 + 520));
      long long v10 = *(_OWORD *)(v8 + 576);
      long long v28 = *(_OWORD *)(v8 + 560);
      long long v29 = v10;
      long long v11 = *(_OWORD *)(v8 + 544);
      long long v26 = *(_OWORD *)(v8 + 528);
      long long v27 = v11;
      long long v12 = *(_OWORD *)(v8 + 608);
      long long v30 = *(_OWORD *)(v8 + 592);
      long long v31 = v12;
      uint64_t v32 = *(void *)(v8 + 624);
      char v33 = *(unsigned char *)(v8 + 632);
    }
    *a3 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)&v14));
    double v13 = &unk_1F113E428;
    PCString::~PCString(&v25);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
  }
  else
  {
    a3->f64[0] = v6;
    a3->f64[1] = v7;
  }
}

void sub_1B7C93754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t OZGroup::getProjectionCamera@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, int a3@<W2>, PCSharedCount *a4@<X8>)
{
  a4->CMTime var0 = 0;
  PCSharedCount::PCSharedCount(a4 + 1);
  char isFlattened = OZGroup::isFlattened(this, a2);
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if ((isFlattened & 1) != 0 || ((result | 2) != 2 ? (BOOL v9 = a3 == 0) : (BOOL v9 = 0), !v9)) {
    operator new();
  }
  return result;
}

void sub_1B7C9393C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10A1C40DA4F106CLL);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZGroup::getProjectionMatrix(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2264))(&v9);
  if (v9)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v9 + 48))(v8);
    if (v8 != (void *)a2)
    {
      for (uint64_t i = 0; i != 16; i += 4)
      {
        double v5 = (_OWORD *)(a2 + i * 8);
        long long v6 = *(_OWORD *)&v8[i + 2];
        *double v5 = *(_OWORD *)&v8[i];
        v5[1] = v6;
      }
    }
    double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 1328))(a1);
    if (v7 != 1.0)
    {
      *(double *)a2 = v7 * *(double *)a2;
      *(double *)(a2 + 32) = v7 * *(double *)(a2 + 32);
      *(double *)(a2 + 64) = v7 * *(double *)(a2 + 64);
      *(double *)(a2 + 96) = v7 * *(double *)(a2 + 96);
    }
  }
  else
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B7C93AF0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 40));
  _Unwind_Resume(a1);
}

float64x2_t OZGroup::getFlattenTransformMatrix(OZGroup *a1, float64x2_t *a2, OZRenderState *a3)
{
  char isFlattened = OZGroup::isFlattened(a1, a3);
  (*(void (**)(OZGroup *, float64x2_t *, OZRenderState *, void))(*(void *)a1 + 2272))(a1, a2, a3, 0);
  if ((isFlattened & 1) != 0 || !(*(unsigned int (**)(OZGroup *))(*(void *)a1 + 1640))(a1))
  {
    float64x2_t result = vmulq_f64(a2[5], (float64x2_t)0);
    a2[4] = vmulq_f64(a2[4], (float64x2_t)0);
    a2[5] = result;
  }
  return result;
}

double OZGroup::getInvFlattenTransformMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  if ((OZGroup::isFlattened(a1, a3) & 1) != 0
    || !(*(unsigned int (**)(OZGroup *))(*(void *)a1 + 1640))(a1))
  {
    operator new();
  }
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

void sub_1B7C93DE8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

double OZGroup::getEyeMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v7, a3);
  if ((OZGroup::isFlattened(a1, &v7) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(void *)a1 + 1640))(a1))
  {
    return OZTransformNode::getEyeMatrix(a1, a2, a3);
  }
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

double OZGroup::getInvEyeMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v7, a3);
  if ((OZGroup::isFlattened(a1, &v7) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(void *)a1 + 1640))(a1))
  {
    return OZTransformNode::getInvEyeMatrix(a1, a2, a3);
  }
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

BOOL OZGroup::invTransformRay(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1424))(a1)) {
    BOOL v6 = *(unsigned char *)(a3 + 200) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    operator new();
  }

  return OZTransformNode::invTransformRay(a1, a2);
}

void sub_1B7C943A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  PCSharedCount::~PCSharedCount(v9);
  _Unwind_Resume(a1);
}

BOOL OZGroup::addEffect(OZGroup *this, OZEffect *a2)
{
  return OZSceneNode::addEffect(this, a2, 0);
}

uint64_t OZGroup::getDimensionType(OZGroup *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 18928), MEMORY[0x1E4F1FA48], 0.0);
}

void OZGroup::setDimensionType(uint64_t a1, unsigned int a2, int a3)
{
  OZChannel::setValue((OZChannel *)(a1 + 18928), MEMORY[0x1E4F1FA48], (double)a2, 0);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1640))(a1) == 2) {
    OZGroup::updateBlendModeFor360((OZGroup *)a1);
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 1704))(a1, 0)) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5
    && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1)
    && *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) + 1584))
  {
    BOOL v6 = *(OZDocument **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) + 1584);
    OZDocument::postNotification(v6, 32);
  }
}

BOOL OZGroup::isAtRootLevel(OZGroup *this)
{
  uint64_t v1 = (const void *)*((void *)this + 120);
  return !v1
}

uint64_t OZGroup::getBlendMode(OZElement *this, const CMTime *a2)
{
  unsigned int BlendMode = OZElement::getBlendMode(this, a2);
  CMTime v6 = *a2;
  if ((OZGroup::isForcedPrecompose((OZGroup *)this, &v6, 0) & (BlendMode == 34)) != 0) {
    return 0;
  }
  else {
    return BlendMode;
  }
}

uint64_t OZGroup::isForcedPrecompose(OZGroup *this, CMTime *a2, char a3)
{
  if (a3)
  {
    CMTime v5 = *a2;
    return OZGroup::calcIsForcedPrecompose(this, &v5, 1);
  }
  else
  {
    unsigned int v4 = (char *)this + 22888;
    if (*((unsigned char *)this + 22888))
    {
      CMTime v6 = *a2;
      uint64_t result = OZGroup::calcIsForcedPrecompose(this, &v6, 0);
      v4[1] = result;
      *unsigned int v4 = 0;
    }
    else
    {
      return *((unsigned char *)this + 22889) != 0;
    }
  }
  return result;
}

uint64_t OZGroup::calcIsForcedPrecompose(OZGroup *this, CMTime *a2, int a3)
{
  if ((*(uint64_t (**)(OZGroup *))(*(void *)this + 1864))(this)) {
    return 1;
  }
  long long v12 = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  int v6 = (*(uint64_t (**)(OZGroup *, long long *))(*(void *)this + 1648))(this, &v12);
  OZRenderState v7 = a3 ? (OZChannelBase *)((char *)this + 6832) : 0;
  uint64_t v8 = (OZChannelBase *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 640))(this);
  int v9 = OZElement::checkForForcedPrecompose((OZElement *)this, v8, v7);
  int v10 = 0;
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9936), 0, 1)) {
    int v10 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
  }
  if ((v6 | v9) & 1) != 0 || (OZGroup::lightingForcesPrecomp(this)) {
    return 1;
  }
  else {
    return OZGroup::shadowForcesPrecomp(this) | v10;
  }
}

uint64_t OZGroup::lightingForcesPrecomp(OZGroup *this)
{
  if (!(*(unsigned int (**)(OZGroup *))(*(void *)this + 1848))(this)) {
    return 0;
  }
  if (!(*(unsigned int (**)(OZGroup *))(*(void *)this + 1424))(this)) {
    return 0;
  }
  if (!OZGroup::hasExternalLight(this)) {
    return 0;
  }
  uint64_t v2 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)v2 + 198);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8 * *(int *)(*(void *)(v3 + 224) + 12) + 192);
  if (!v4) {
    return 0;
  }
  __n128 v12 = 0uLL;
  uint64_t v13 = 0;
  OZScene::getCurrentTime(v2, &v12);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v7);
  char v11 = *(unsigned char *)(v4 + 78);
  __n128 v7 = v12;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = v13;
  uint64_t v5 = (*(uint64_t (**)(OZGroup *, __n128 *))(*(void *)this + 1840))(this, &v7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v7);
  return v5;
}

void sub_1B7C94A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t OZGroup::shadowForcesPrecomp(OZGroup *this)
{
  unint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1848))(this);
  if (result)
  {
    unint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1424))(this);
    if (result)
    {
      unint64_t result = OZGroup::hasExternalShadow(this);
      if (result)
      {
        unint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
        if (result)
        {
          uint64_t v3 = *(void *)(result + 1584);
          if (v3
            && (uint64_t v4 = *(void *)(v3 + 8 * *(int *)(*(void *)(v3 + 224) + 12) + 192)) != 0
            && (memset(&v5, 0, sizeof(v5)),
                OZScene::getCurrentTime((OZScene *)result, (__n128 *)&v5),
                *(unsigned char *)(v4 + 79)))
          {
            return OZChannel::getValueAsInt((OZChannel *)((char *)this + 9632), &v5, 0.0)
                || OZChannel::getValueAsInt((OZChannel *)((char *)this + 9480), &v5, 0.0)
                || OZChannel::getValueAsInt((OZChannel *)((char *)this + 9784), &v5, 0.0) != 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL OZGroup::isPrecomposed(OZGroup *this, const CMTime *a2)
{
  CMTime v3 = *a2;
  return (*(unsigned int (**)(OZGroup *, CMTime *))(*(void *)this + 1576))(this, &v3) != 34;
}

uint64_t OZGroup::getPrecompCameraType(OZGroup *this, const OZRenderState *a2)
{
  int v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if (!v4) {
    return 2;
  }
  if (v4 == 2) {
    return 0;
  }
  uint64_t result = OZGroup::isFlattened(this, a2);
  if (result) {
    return 2;
  }
  return result;
}

BOOL OZGroup::isFlattened(OZGroup *this)
{
  return !(*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19640), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t OZGroup::partitionsWorld(OZGroup *this)
{
  int v2 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if (!v2) {
    return 1;
  }
  if (v2 != 1) {
    return 0;
  }
  CMTime v3 = *(uint64_t (**)(OZGroup *))(*(void *)this + 1632);

  return v3(this);
}

uint64_t OZGroup::areEffectsAppliedInScreenSpace(OZGroup *this)
{
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  if (result) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1632))(this) ^ 1;
  }
  return result;
}

uint64_t non-virtual thunk to'OZGroup::areEffectsAppliedInScreenSpace(OZGroup *this)
{
  uint64_t v1 = (char *)this - 6528;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 816) + 1640))((char *)this - 6528);
  if (result) {
    return (*(unsigned int (**)(char *))(*(void *)v1 + 1632))(v1) ^ 1;
  }
  return result;
}

BOOL OZGroup::producesDepth(OZGroup *this)
{
  return (*(unsigned int (**)(OZGroup *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48])
      && !(*(unsigned int (**)(OZGroup *))(*(void *)this + 1424))(this);
}

uint64_t OZGroup::containsActiveLights(OZGroup *this, const OZGroup *a2)
{
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v26);
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v24, 0, sizeof(v24));
  int v25 = 1065353216;
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  char v23 = 0;
  while (v26[0] != v20)
  {
    if (v26[0] == v26[2] || (int v6 = *(const void **)(v26[0] + 16)) == 0) {
      __n128 v7 = 0;
    }
    else {
    uint64_t v8 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
    }
    __n128 CurrentTime = OZScene::getCurrentTime(v8, &v19);
    if ((*(uint64_t (**)(void *, __n128 *, uint64_t, uint64_t, uint64_t, __n128))(v7[2] + 104))(v7 + 2, &v19, 1, 1, 1, CurrentTime))
    {
      uint64_t v15 = 1;
      goto LABEL_22;
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v26);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  if (v17[0] != v17[2] {
    && (uint64_t v10 = *(const void **)(v17[0] + 16)) != 0
  }
  {
    __n128 v12 = v11;
    while (v12 == a2
         || ((*(uint64_t (**)(const OZGroup *))(*(void *)v12 + 1424))(v12) & 1) != 0
         || (OZGroup::containsActiveLights(v12, a2) & 1) == 0)
    {
      uint64_t v13 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
      if (*v13 != v13[2])
      {
        long long v14 = *(const void **)(*v13 + 16);
        if (v14)
        {
          if (v12) {
            continue;
          }
        }
      }
      goto LABEL_19;
    }
    uint64_t v15 = 1;
  }
  else
  {
LABEL_19:
    uint64_t v15 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
LABEL_22:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
  return v15;
}

void sub_1B7C9525C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::containsActiveShadowLights(OZGroup *this, const OZGroup *a2)
{
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v27);
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  uint64_t v21 = v5;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  char v24 = 0;
  int v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while (v27[0] != v21)
  {
    if (v27[0] == v28 || (__n128 v7 = *(const void **)(v27[0] + 16)) == 0) {
      uint64_t v8 = 0;
    }
    else {
    uint64_t v9 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
    }
    __n128 CurrentTime = OZScene::getCurrentTime(v9, &v20);
    if ((*(unsigned int (**)(void *, __n128 *, uint64_t, uint64_t, uint64_t, __n128))(v8[2] + 104))(v8 + 2, &v20, 1, 1, 1, CurrentTime))
    {
      if (v27[0] == v28)
      {
        char v11 = 0;
      }
      else
      {
        char v11 = *(char **)(v27[0] + 16);
        if (v11) {
      }
        }
      if (OZFolderLightShadow::hasShadows((OZChannelBase *)(v11 + 8776), v6))
      {
        uint64_t v15 = 1;
        goto LABEL_29;
      }
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v27);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  while (1)
  {
    if (v17[0] == v18 {
      || (__n128 v12 = *(const void **)(v17[0] + 16)) == 0
    }
    {
      uint64_t v15 = 0;
      goto LABEL_27;
    }
    {
      if (((*(uint64_t (**)(void))(v13 + 1424))() & 1) == 0)
      {
        if (v17[0] == v18)
        {
          long long v14 = 0;
        }
        else
        {
          long long v14 = *(void **)(v17[0] + 16);
          if (v14) {
        }
          }
        if (OZGroup::containsActiveShadowLights((OZGroup *)v14, a2)) {
          break;
        }
      }
    }
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
  }
  uint64_t v15 = 1;
LABEL_27:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
LABEL_29:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v29);
  return v15;
}

void sub_1B7C95678(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::hasExternalLight(OZGroup *this)
{
  while (1)
  {
    uint64_t v2 = (const void *)*((void *)this + 120);
    if (!v2) {
      break;
    }
    if (!v3) {
      break;
    }
    uint64_t v4 = v3;
    uint64_t active = OZGroup::containsActiveLights(v3, this);
    if ((active & 1) == 0)
    {
      this = v4;
      if (((*(uint64_t (**)(OZGroup *))(*(void *)v4 + 1424))(v4) & 1) == 0) {
        continue;
      }
    }
    return active;
  }
  int v6 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
  if (!v6) {
    return 0;
  }

  return OZScene::containsActiveLights(v6, this);
}

uint64_t OZGroup::hasExternalShadow(OZGroup *this)
{
  while (1)
  {
    uint64_t v2 = (const void *)*((void *)this + 120);
    if (!v2) {
      break;
    }
    if (!v3) {
      break;
    }
    uint64_t v4 = v3;
    uint64_t active = OZGroup::containsActiveShadowLights(v3, this);
    if ((active & 1) == 0)
    {
      this = v4;
      if (((*(uint64_t (**)(OZGroup *))(*(void *)v4 + 1424))(v4) & 1) == 0) {
        continue;
      }
    }
    return active;
  }
  int v6 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(void *)this + 272))(this);
  if (!v6) {
    return 0;
  }

  return OZScene::containsActiveShadowLights(v6, this);
}

void OZGroup::buildLighting(OZGroup *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  int hasExternalShadow = OZGroup::hasExternalShadow(this);
  if (*((unsigned char *)a4 + 515)) {
    int v9 = hasExternalShadow;
  }
  else {
    int v9 = 0;
  }
  if (OZGroup::hasExternalLight(this)) {
    int v10 = (*(uint64_t (**)(OZGroup *, const OZRenderParams *))(*(void *)this + 1840))(this, a4);
  }
  else {
    int v10 = 0;
  }
  if (!(*(unsigned int (**)(OZGroup *))(*(void *)this + 1424))(this)
    || ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1848))(this)
      ? (BOOL v11 = (v10 | v9) == 0)
      : (BOOL v11 = 1),
        v11))
  {
    LiGeode::setLit((uint64_t)a2, 0);
  }
  else
  {
    OZElement::buildLighting((OZElement *)this, a2, a3, a4);
  }
}

void OZGroup::buildShadowLights(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F10AD5F8;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t OZGroup::setLightChannels(OZGroup *this)
{
  BOOL v2 = OZElement::setLightChannels((OZElement *)this);
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1848))(this))
  {
    int v3 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1424))(this);
    BOOL v4 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8920), 2);
    if (v3)
    {
      if (v4)
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
        BOOL v2 = 1;
      }
      if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2))
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
        BOOL v2 = 1;
      }
      if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2))
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
LABEL_19:
        BOOL v2 = 1;
      }
    }
    else
    {
      if (!v4)
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
        BOOL v2 = 1;
      }
      if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2))
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
        BOOL v2 = 1;
      }
      if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2))
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8920), 2)) {
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
    }
    if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2)) {
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
    }
  }
  if (OZGroup::isValidToLightInside(this) || !OZGroup::checkLights(this))
  {
    if (!v2) {
      return 0;
    }
  }
  else
  {
    OZChannelBase::setRangeName((OZChannelBase *)this, v5);
  }
  OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v12);
  (*(void (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v9 = v6;
  while (v12[0] != v9)
  {
    (*(void (**)(void))(v7 + 1832))();
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
  return 1;
}

void sub_1B7C95E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::checkLights(OZGroup *this)
{
  uint64_t v1 = *((void *)this + 121);
  if (!v1 || *(unsigned char *)(v1 + 1576) || OZGroup::isValidToLightInside(this)) {
    return 0;
  }
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v19);
  if (v19[0] != v19[2] {
    && (BOOL v4 = *(const void **)(v19[0] + 16)) != 0
  }
  {
    uint64_t v6 = v5;
    char v7 = 0;
    do
    {
      uint64_t v9 = v6[2];
      uint64_t v8 = (char *)(v6 + 2);
      if ((*(unsigned int (**)(char *, void, void))(v9 + 24))(v8, 0, 0))
      {
        (*(void (**)(char *, void))(*(void *)v8 + 40))(v8, 0);
        char v7 = 1;
      }
      int v10 = OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v19);
      if (*v10 == v10[2]) {
        break;
      }
      int v11 = *(const void **)(*v10 + 16);
      if (!v11) {
        break;
      }
    }
    while (v6);
  }
  else
  {
    char v7 = 0;
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  (*(void (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v12 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  uint64_t v14 = v12;
  while (v17[0] != v14)
  {
    if (v17[0] == v17[2])
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = *(void **)(v17[0] + 16);
      if (v13) {
    }
      }
    char v7 = v7 & 1 | OZGroup::checkLights((OZGroup *)v13);
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  return v7 & 1;
}

void sub_1B7C96118(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL OZGroup::isValidToLightOutside(OZGroup *this)
{
  BOOL v2 = (const void *)*((void *)this + 120);
  if (!v2) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 1;
  }
  if (!v3) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 1;
  }

  return OZGroup::isValidToLightInside(v3);
}

uint64_t OZGroup::isValidLightClipPlane(OZElement *this)
{
  uint64_t result = OZElement::isValidLightClipPlane(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(OZElement *))(*(void *)this + 1632);
    return v3(this);
  }
  return result;
}

BOOL OZGroup::canReflect(OZGroup *this)
{
  if (!*((void *)this + 120)) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 1;
  }

  return OZElement::canReflect((OZElement *)this);
}

uint64_t OZGroup::canFourCorner(OZGroup *this)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 1) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 2;
  }
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
  if (result) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 2;
  }
  return result;
}

uint64_t OZGroup::canCrop(OZGroup *this)
{
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 1) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 2;
  }
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
  if (result) {
    return (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 2;
  }
  return result;
}

uint64_t OZGroup::updateHiddenChannels(OZGroup *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 120);
  RootAncestor = OZSceneNode::getRootAncestor(this);
  uint64_t v6 = this;
  BOOL v27 = (!RootAncestor
  int v7 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  int v8 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  uint64_t v26 = v4;
  if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this)) {
    int v9 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1632))(this);
  }
  else {
    int v9 = 1;
  }
  int v10 = (OZChannelBase *)((char *)this + 19184);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19184), MEMORY[0x1E4F1FA48], 0.0);
  double v12 = v11;
  BOOL v14 = (*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) == 1 || v7 == 2;
  BOOL v28 = v14;
  int updated = OZElement::updateHiddenChannels((OZElement *)this, a2);
  int v16 = updated | (v8 != 1) ^ OZChannelBase::testFlag((OZChannelBase *)((char *)this + 19640), 2);
  uint64_t v29 = (OZChannelBase *)((char *)this + 19336);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 19336), 4))
  {
    int v10 = (OZChannelBase *)((char *)this + 19184);
    if (((v12 != 0.0) ^ OZChannelBase::testFlag((OZChannelBase *)this + 174, 4))) {
      goto LABEL_21;
    }
    if (v12 == 0.0)
    {
      OZChannelBase::setFlag(v29, 4, a2);
      OZChannelBase::setFlag((OZChannelBase *)this + 174, 4, a2);
      goto LABEL_20;
    }
LABEL_19:
    OZChannelBase::resetFlag(v29, 4, a2);
    OZChannelBase::resetFlag((OZChannelBase *)this + 174, 4, a2);
LABEL_20:
    int v16 = 1;
    goto LABEL_21;
  }
  if (v12 != 0.0) {
    goto LABEL_19;
  }
LABEL_21:
  long long v17 = (OZChannelBase *)((char *)this + 19640);
  if (v8 == 1)
  {
    OZChannelBase::resetFlag(v17, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19792), 2, a2);
  }
  else
  {
    OZChannelBase::setFlag(v17, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19792), 2, a2);
  }
  uint64_t v18 = (OZChannelBase *)((char *)this + 12672);
  if (v9) {
    OZChannelBase::resetFlag(v18, 2, a2);
  }
  else {
    OZChannelBase::setFlag(v18, 2, a2);
  }
  uint64_t v19 = (OZChannelBase *)((char *)this + 1088);
  if (v7 == 2)
  {
    OZChannelBase::setFlag(v19, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 2, a2);
LABEL_30:
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8384), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
    BOOL v20 = v28;
    goto LABEL_31;
  }
  OZChannelBase::resetFlag(v19, 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11208), 2, a2);
  if (v27) {
    goto LABEL_30;
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8384), 2, a2);
  BOOL v20 = v28;
  if (!v26)
  {
    if ((*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this) != 1
      || !(*(unsigned int (**)(OZGroup *))(*(void *)this + 1632))(this))
    {
      goto LABEL_52;
    }
LABEL_51:
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
    goto LABEL_31;
  }
  if (v9) {
    goto LABEL_51;
  }
LABEL_52:
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
LABEL_31:
  if (v20)
  {
    OZChannelBase::setFlag(v10, 2, a2);
    OZChannelBase::setFlag(v29, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)this + 174, 2, a2);
    if (!v16) {
      goto LABEL_37;
    }
  }
  else
  {
    OZChannelBase::resetFlag(v10, 2, a2);
    OZChannelBase::resetFlag(v29, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)this + 174, 2, 0);
    if (!v16) {
      goto LABEL_37;
    }
  }
  OZGroup::checkCameras((OZTransformNode *)this);
  if ((v9 & 1) == 0) {
    OZChannelBase::setRangeName((OZChannelBase *)this, v21);
  }
LABEL_37:
  OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v33);
  (*(void (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v22 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  uint64_t v30 = v22;
  while (v33[0] != v30)
  {
    if (v33[0] != v33[2])
    {
      uint64_t v23 = *(const void **)(v33[0] + 16);
      if (v23)
      {
        if (v24) {
          v16 |= (*(uint64_t (**)(void *, uint64_t))(*(void *)v24 + 1704))(v24, a2);
        }
      }
    }
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v33);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v31);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v34);
  return v16 & 1;
}

void sub_1B7C96B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

OZTransformNode *OZGroup::checkCameras(OZTransformNode *this)
{
  uint64_t v1 = (OZChannelBase *)this;
  uint64_t v2 = *((void *)this + 121);
  if (!v2 || !*(unsigned char *)(v2 + 1576))
  {
    if ((OZTransformNode::isInRootWorld(this) & 1) == 0
      || (this = (OZTransformNode *)(*((uint64_t (**)(OZChannelBase *))v1->var0 + 178))(v1), this))
    {
      OZSceneNode::begin_t<OZCamera,false,true>((uint64_t)v1, (uint64_t)v11);
      (*((void (**)(OZChannelBase *))v1->var0 + 128))(v1);
      uint64_t v3 = (*((uint64_t (**)(OZChannelBase *))v1->var0 + 129))(v1);
      char v4 = 0;
      memset(v9, 0, sizeof(v9));
      int v10 = 1065353216;
      uint64_t v8 = v3;
      while (v11[0] != v8)
      {
        if (v11[0] == v12)
        {
          uint64_t v5 = 0;
        }
        else
        {
          uint64_t v5 = *(void **)(v11[0] + 16);
          if (v5) {
        }
          }
        if ((*(unsigned int (**)(void))(v5[2] + 24))())
        {
          if (v11[0] == v12)
          {
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v6 = *(void **)(v11[0] + 16);
            if (v6) {
          }
            }
          (*(void (**)(void))(v6[2] + 40))();
          if ((v4 & 1) == 0) {
            OZChannelBase::setRangeName(v1, v7);
          }
          char v4 = 1;
        }
        OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v11);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v9);
      return (OZTransformNode *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
    }
  }
  return this;
}

void sub_1B7C96DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

OZTransformNode *non-virtual thunk to'OZGroup::sceneDidChange(OZGroup *this)
{
  return OZGroup::checkCameras((OZTransformNode *)((char *)this - 16));
}

uint64_t *OZSceneNode::begin_t<OZCamera,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    uint64_t v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7C96EEC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZGroup::setToDefaultDimensionType(OZGroup *this, int a2)
{
  uint64_t v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  int DefaultGroupType = OZPreferenceManager::getDefaultGroupType(v4);
  if (a2) {
    int v6 = 0;
  }
  else {
    int v6 = DefaultGroupType;
  }
  if (v6 == 1) {
    goto LABEL_15;
  }
  if (v6 != 2)
  {
    int v9 = (const void *)*((void *)this + 120);
    if (v9)
    {
      if (v10)
      {
        unsigned int v11 = (*(uint64_t (**)(void *))(*(void *)v10 + 1640))(v10);
        if (v11 == 2) {
          unsigned int v11 = OZPreferenceManager::getDefaultGroupType(v4) == 2;
        }
        int v7 = (OZChannel *)((char *)this + 18928);
        double v8 = (double)v11;
        goto LABEL_16;
      }
    }
    uint64_t v12 = (void *)*((void *)this + 121);
    if (v12)
    {
      OZScene::begin_t<OZGroup,false,false>(v12, (uint64_t)v26);
      uint64_t v13 = (OZScene *)*((void *)this + 121);
      memset(v24, 0, sizeof(v24));
      int v25 = 1065353216;
      uint64_t v23 = (char *)v13 + 1200;
      if (OZScene::has3DObjects(v13, 0))
      {
        BOOL v14 = (OZChannelBase *)((char *)this + 18928);
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 1.0);
      }
      else
      {
        if ((char *)v26[0] != v23)
        {
          int v16 = (OZGroup *)OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator*(v26);
          long long v17 = v16;
          if (v16 == this)
          {
            OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v26);
            if ((char *)v26[0] == v23
              || (uint64_t v19 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator*(v26),
                  (*(unsigned int (**)(void *))(*(void *)v19 + 1640))(v19) == 2))
            {
              unsigned int v18 = 0;
            }
            else
            {
              unsigned int v18 = (*(uint64_t (**)(void *))(*(void *)v19 + 1640))(v19);
            }
            goto LABEL_33;
          }
          if ((*(unsigned int (**)(OZGroup *))(*(void *)v16 + 1640))(v16) == 2) {
            unsigned int v18 = 0;
          }
          else {
            unsigned int v18 = (*(uint64_t (**)(OZGroup *))(*(void *)v17 + 1640))(v17);
          }
          while (1)
          {
            OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v26);
LABEL_33:
            if ((char *)v26[0] == v23) {
              break;
            }
            int v21 = (*(uint64_t (**)(void))(*(void *)v20 + 1640))();
            if (v20 != this && v18 != v21)
            {
              unsigned int v18 = 1;
              break;
            }
          }
          OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), (double)v18);
          OZChannelBase::reset((OZChannelBase *)this + 169, 0);
          goto LABEL_41;
        }
        BOOL v14 = (OZChannelBase *)((char *)this + 18928);
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 0.0);
      }
      OZChannelBase::reset(v14, 0);
LABEL_41:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
      goto LABEL_17;
    }
LABEL_15:
    int v7 = (OZChannel *)((char *)this + 18928);
    double v8 = 0.0;
    goto LABEL_16;
  }
  int v7 = (OZChannel *)((char *)this + 18928);
  double v8 = 1.0;
LABEL_16:
  OZChannel::setDefaultValue(v7, v8);
  OZChannelBase::reset((OZChannelBase *)v7, 0);
LABEL_17:
  if (OZSceneSettings::is360Project((OZSceneSettings *)(*((void *)this + 121) + 336))
    && !*((void *)this + 120)
    && !(*(unsigned int (**)(OZGroup *))(*(void *)this + 1640))(this))
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 1.0);
    OZChannelBase::reset((OZChannelBase *)this + 169, 0);
  }
  unsigned int v15 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1640))(this);
  OZGroup::setDimensionType((uint64_t)this, v15, 0);
}

void sub_1B7C97388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZGroup::didAddToScene(OZGroup *this, OZScene *a2)
{
  OZTransformNode::didAddToScene((OZTransformNode *)this, a2);
  double DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 19336));
  double v5 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 19488));
  BOOL v6 = DefaultValue == 0.0;
  if (v5 == 0.0) {
    BOOL v6 = 1;
  }
  if (a2 && v6)
  {
    int v7 = *((_DWORD *)a2 + 86);
    int v8 = *((_DWORD *)a2 + 87);
    double v9 = (double)v7;
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 19336), (double)v7);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 19336), 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 19488), (double)v8);
    OZChannelBase::reset((OZChannelBase *)this + 174, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 20136), v9);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 20136), 0);
    int v10 = (OZChannel *)((char *)this + 20288);
    OZChannel::setDefaultValue(v10, (double)v8);
    OZChannelBase::reset((OZChannelBase *)v10, 0);
  }
}

uint64_t OZGroup::scheduleTokens(void *a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = OZSceneNode::scheduleTokens((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
  if (!v10)
  {
    if ((void *)a1[123] == a1 + 122)
    {
      return 0;
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v17, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
      (*(void (**)(void *, uint64_t, void *, uint64_t))(*a1 + 184))(a1, a2, v17, a4);
      uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 1032))(a1);
      if (v11 == v12)
      {
        uint64_t v10 = 0;
      }
      else
      {
        do
        {
          uint64_t v13 = *(void *)(v11 + 16);
          uint64_t v16 = *(void *)(a2 + 16);
          long long v15 = *(_OWORD *)a2;
          if ((*(unsigned int (**)(uint64_t, long long *, uint64_t))(*(void *)(v13 + 16) + 104))(v13 + 16, &v15, 1))
          {
            uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t))(**(void **)(v11 + 16)
                                                                                         + 136))(*(void *)(v11 + 16), a2, v17, a4, a5);
            if (v10) {
              break;
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void *)(v11 + 8);
        }
        while (v11 != v12);
      }
      unsigned int v18 = (void **)v17;
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    }
  }
  return v10;
}

void sub_1B7C976C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::hintTokensWillImage(void *a1, uint64_t a2, long long **a3, uint64_t a4)
{
  uint64_t v8 = OZSceneNode::hintTokensWillImage((uint64_t)a1, a2, (uint64_t)a3, a4);
  if (!v8)
  {
    if ((void *)a1[123] == a1 + 122)
    {
      return 0;
    }
    else
    {
      memset(v15, 0, sizeof(v15));
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
      (*(void (**)(void *, uint64_t, void *, uint64_t))(*a1 + 184))(a1, a2, v15, a4);
      uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 1032))(a1);
      if (v9 == v10)
      {
        uint64_t v8 = 0;
      }
      else
      {
        do
        {
          uint64_t v11 = *(void *)(v9 + 16);
          uint64_t v14 = *(void *)(a2 + 16);
          long long v13 = *(_OWORD *)a2;
          if ((*(unsigned int (**)(uint64_t, long long *, uint64_t))(*(void *)(v11 + 16) + 104))(v11 + 16, &v13, 1))
          {
            uint64_t v8 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(v9 + 16) + 144))(*(void *)(v9 + 16), a2, v15, a4);
            if (v8) {
              break;
            }
          }
          else
          {
            uint64_t v8 = 0;
          }
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9 != v10);
      }
      uint64_t v16 = (void **)v15;
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
  }
  return v8;
}

void sub_1B7C978D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getTokensImage(void *a1, uint64_t a2, long long **a3, uint64_t a4)
{
  if (!OZSceneNode::getTokensImage((uint64_t)a1, a2, (uint64_t)a3, a4) && (void *)a1[123] != a1 + 122)
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
    (*(void (**)(void *, uint64_t, void *, uint64_t))(*a1 + 184))(a1, a2, v14, a4);
    uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 1032))(a1);
    while (v8 != v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v13 = *(void *)(a2 + 16);
      long long v12 = *(_OWORD *)a2;
      if ((*(unsigned int (**)(uint64_t, long long *, uint64_t))(*(void *)(v10 + 16) + 104))(v10 + 16, &v12, 1))
      {
        if ((*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(v8 + 16) + 152))(*(void *)(v8 + 16), a2, v14, a4))
        {
          break;
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    long long v15 = (void **)v14;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  return 0;
}

void sub_1B7C97ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

uint64_t OZGroup::resetCacheEvictionLimit(OZGroup *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t result = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  if (v2 != result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 600))(*(void *)(v2 + 16));
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v4);
  }
  return result;
}

uint64_t OZGroup::setStartTime(OZGroup *this, const CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 1128))(&v28);
  CMTime v27 = *a2;
  OZSceneNode::setStartTime(this, a2);
  uint64_t v4 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  uint64_t v21 = v4;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  char v24 = 0;
  uint64_t v6 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1024))(this);
  uint64_t v7 = (*(uint64_t (**)(OZGroup *))(*(void *)this + 1032))(this);
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  char v18 = 0;
  for (i = v21; i != v15; uint64_t v21 = i)
  {
    uint64_t v9 = *(void *)(i + 16);
    (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v9 + 1128))(&v14, v9);
    memset(&v13, 0, sizeof(v13));
    CMTime v30 = v14;
    CMTime v29 = v28;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v13);
    memset(v12, 0, sizeof(v12));
    CMTime v30 = v27;
    CMTime v29 = v13;
    double v10 = PC_CMTimeSaferAdd(&v30, &v29, (uint64_t)v12);
    (*(void (**)(uint64_t, void *, double))(*(void *)v9 + 1160))(v9, v12, v10);
    uint64_t i = *(void *)(v21 + 8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
}

void sub_1B7C97E88(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(Render360GroupAsEquirectSentry *this, OZGroup *a2, OZRenderParams *a3)
{
  *((void *)this + 1) = a3;
  *((void *)this + 3) = 0;
  uint64_t v6 = (PCShared_base **)((char *)this + 24);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((void *)this + 5) = 0x3FF0000000000000;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  if (a2 && (*(unsigned int (**)(OZGroup *))(*(void *)a2 + 1640))(a2) == 2)
  {
    *(unsigned char *)this = 1;
    *((unsigned char *)this + 16) = *((unsigned char *)a3 + 242);
    uint64_t v7 = *((void *)this + 1);
    *(unsigned char *)(v7 + 242) = 1;
    uint64_t v8 = 1296;
    if (!*(void *)(v7 + 1296)) {
      uint64_t v8 = 1280;
    }
    PCPtr<LiImageSource>::operator=<LiImageSource>(v6, *(PCShared_base **)(v7 + v8));
    if (*v6)
    {
      (*(void (**)(PCShared_base *, char *))(*(void *)*v6 + 472))(*v6, (char *)this + 40);
      uint64_t v9 = *v6;
      if (!*v6) {
        throw_PCNullPointerException(1);
      }
      v10[0] = 0x3FF0000000000000;
      memset(&v10[1], 0, 24);
      (*(void (**)(PCShared_base *, void *))(*(void *)v9 + 480))(v9, v10);
    }
  }
  else
  {
    *(unsigned char *)this = 0;
  }
}

void sub_1B7C9802C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(Render360GroupAsEquirectSentry *this, OZImageNode *lpsrc, OZRenderParams *a3)
{
  if (lpsrc) {

  }
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(this, lpsrc, a3);
}

void Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry(PCSharedCount *this)
{
  if (LOBYTE(this->var0))
  {
    *((unsigned char *)this[1].var0 + 242) = this[2].var0;
    CMTime var0 = this[3].var0;
    if (var0) {
      (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(void *)var0 + 480))(var0, this + 5);
    }
  }
  PCSharedCount::~PCSharedCount(this + 4);
}

BOOL OZGroup::hasBlendMode(OZGroup *this, const CMTime *a2)
{
  return (*(unsigned int (**)(OZGroup *, const CMTime *))(*(void *)this + 1576))(this, a2) != 34;
}

uint64_t OZGroup::OZGroup_dimensionTypeImpl::getInstance(OZGroup::OZGroup_dimensionTypeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::OZGroup_dimensionTypeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::OZGroup_dimensionTypeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_dimensionTypeImpl::_OZGroup_dimensionType;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_dimensionTypeImpl::_OZGroup_dimensionType) {
    operator new();
  }
}

void sub_1B7C98250(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup_dimensionTypeImpl::OZGroup_dimensionTypeImpl(OZGroup::OZGroup_dimensionTypeImpl *this)
{
}

void sub_1B7C98324(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedWidthImpl::getInstance(OZGroup::OZGroup_fixedWidthImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::OZGroup_fixedWidthImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::OZGroup_fixedWidthImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedWidthImpl::_OZGroup_fixedWidth;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_fixedWidthImpl::_OZGroup_fixedWidth) {
    operator new();
  }
}

void sub_1B7C98400(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup_fixedWidthImpl::OZGroup_fixedWidthImpl(OZChannelUint32 *this)
{
}

void sub_1B7C984D4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedWidthInfo::getInstance(OZGroup::OZGroup_fixedWidthInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::OZGroup_fixedWidthInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::OZGroup_fixedWidthInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedWidthInfo::_OZGroup_fixedWidthInfo;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_fixedWidthInfo::_OZGroup_fixedWidthInfo) {
    operator new();
  }
}

void sub_1B7C985B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_fixedWidthInfo *OZGroup::OZGroup_fixedWidthInfo::OZGroup_fixedWidthInfo(OZGroup::OZGroup_fixedWidthInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGroup::OZGroup_fixedWidthInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11505D0;
  *((void *)this + 10) = &unk_1F11505F0;
  return this;
}

void sub_1B7C98680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedHeightImpl::getInstance(OZGroup::OZGroup_fixedHeightImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::OZGroup_fixedHeightImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::OZGroup_fixedHeightImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedHeightImpl::_OZGroup_fixedHeight;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_fixedHeightImpl::_OZGroup_fixedHeight) {
    operator new();
  }
}

void sub_1B7C9875C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup_fixedHeightImpl::OZGroup_fixedHeightImpl(OZChannelUint32 *this)
{
}

void sub_1B7C98830(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedHeightInfo::getInstance(OZGroup::OZGroup_fixedHeightInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::OZGroup_fixedHeightInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::OZGroup_fixedHeightInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedHeightInfo::_OZGroup_fixedHeightInfo;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_fixedHeightInfo::_OZGroup_fixedHeightInfo) {
    operator new();
  }
}

void sub_1B7C9890C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_fixedHeightInfo *OZGroup::OZGroup_fixedHeightInfo::OZGroup_fixedHeightInfo(OZGroup::OZGroup_fixedHeightInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGroup::OZGroup_fixedHeightInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11506C0;
  *((void *)this + 10) = &unk_1F11506E0;
  return this;
}

void sub_1B7C989DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_versionImpl::getInstance(OZGroup::OZGroup_versionImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup::OZGroup_versionImpl::getInstance(void)::OZGroup_versionImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGroup::OZGroup_versionImpl::getInstance(void)::OZGroup_versionImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_versionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_versionImpl::_OZGroup_version;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_versionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGroup::OZGroup_versionImpl::_OZGroup_version) {
    operator new();
  }
}

void sub_1B7C98AB8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup_versionImpl::OZGroup_versionImpl(OZGroup::OZGroup_versionImpl *this)
{
}

void sub_1B7C98B90(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void *OZSceneNode::begin_t<OZ3DEngineSceneElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((void *)v4 != result)
  {
    uint64_t v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C98CC0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v20 = a1 + 2;
  double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  uint64_t v11 = &v10[48 * v4];
  __p = v10;
  uint64_t v17 = v11;
  uint64_t v19 = &v10[48 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  char v18 = v11 + 48;
  std::vector<OZGroupKeyframe<PCVector3<double>>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    char v18 = &v17[(v18 - v17 - 48) % 0x30uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_1B7C98EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<OZGroupKeyframe<PCVector3<double>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v7;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::allocate_shared[abi:ne180100]<Li3DEngineWorldData,std::allocator<Li3DEngineWorldData>,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,void>@<X0>(uint64_t *a1@<X1>, double *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x108uLL);
  uint64_t result = std::__shared_ptr_emplace<Li3DEngineWorldData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,std::allocator<Li3DEngineWorldData>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B7C99004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Li3DEngineWorldData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,std::allocator<Li3DEngineWorldData>,0>(void *a1, uint64_t *a2, double *a3, uint64_t a4, void *a5, uint64_t a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F1150B90;
  std::allocator<Li3DEngineWorldData>::construct[abi:ne180100]<Li3DEngineWorldData,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&>((uint64_t)&v8, (Li3DEngineObjectDataBase *)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1B7C99084(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Li3DEngineWorldData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1150B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Li3DEngineWorldData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1150B90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_emplace<Li3DEngineWorldData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<Li3DEngineWorldData>::construct[abi:ne180100]<Li3DEngineWorldData,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&>(uint64_t a1, Li3DEngineObjectDataBase *a2, uint64_t *a3, double *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = *a3;
  double v10 = *a4;
  do
  {
    v12[v8] = (__int128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a5 + 32 * v8)), *(float64x2_t *)(a5 + 32 * v8 + 16));
    ++v8;
  }
  while (v8 != 4);
  return Li3DEngineWorldData::Li3DEngineWorldData(a2, v9, v12, a6, a7, v10);
}

uint64_t Li3DEngineWorldData::Li3DEngineWorldData(Li3DEngineObjectDataBase *a1, uint64_t a2, long long *a3, void *a4, uint64_t a5, double a6)
{
  long long v11 = a3[1];
  v15[0] = *a3;
  v15[1] = v11;
  long long v12 = a3[3];
  _OWORD v15[2] = a3[2];
  void v15[3] = v12;
  uint64_t v13 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(a1);
  uint64_t result = Li3DEngineObjectDataBase::Li3DEngineObjectDataBase((uint64_t)a1, a2, v15, 0, 0, 0, a5, a6, *v13, v13[1], v13[2], v13[3], 1.0);
  *(void *)a1 = &unk_1F11214A0;
  *((void *)a1 + 28) = 0;
  *((void *)a1 + 27) = 0;
  *((void *)a1 + 26) = (char *)a1 + 216;
  *((void *)a1 + 29) = *a4;
  return result;
}

uint64_t OZGroup::masterScene(OZGroup *this)
{
  uint64_t result = *((void *)this + 2862);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1B7C992CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C40E91470D5);
  _Unwind_Resume(a1);
}

void OZFootageLayer::OZFootageLayer(OZFootageLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1150BE0;
  CMTime v5[2] = &unk_1F11510A8;
  v5[6] = &unk_1F1151300;
  v5[136] = v5 + 136;
  v5[137] = v5 + 136;
  v5[138] = 0;
  PCURL::PCURL((PCURL *)&v6, @"Channel Footage Members");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1112), &v6, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(&v6);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1112), 8, 0);
}

void sub_1B7C99D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder::~OZChannelFolder(v12);
  std::__list_imp<unsigned int>::clear(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZFootageLayer::OZFootageLayer(OZFootageLayer *this, const OZFootageLayer *a2, uint64_t a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  *PCString v6 = &unk_1F1150BE0;
  _OWORD v6[2] = &unk_1F11510A8;
  v6[6] = &unk_1F1151300;
  long long v7 = v6 + 136;
  v6[136] = v6 + 136;
  v6[137] = v6 + 136;
  v6[138] = 0;
  PCURL::PCURL((PCURL *)&v16, @"Channel Footage Members");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1112), &v16, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(&v16);
  if ((a3 & 1) == 0)
  {
    for (uint64_t i = (void *)*((void *)a2 + 137); i != (void *)((char *)a2 + 1088); uint64_t i = (void *)i[1])
    {
      uint64_t v9 = (const void *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(i[2] + 8) + 24))(*(void *)(i[2] + 8), i[2], a3);
      if (v9)
      {
        if (v10)
        {
          long long v11 = v10;
          long long v12 = operator new(0x18uLL);
          v12[1] = v7;
          void v12[2] = v11;
          uint64_t v13 = *((void *)this + 136);
          *long long v12 = v13;
          *(void *)(v13 + 8) = v12;
          *((void *)this + 136) = v12;
          ++*((void *)this + 138);
          uint64_t v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v11 + 640))(v11);
          OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v14);
          (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(void *)v11 + 256))(v11, this);
          uint64_t v15 = (OZScene *)*((void *)this + 121);
          if (v15)
          {
            OZScene::registerNode(v15, v11);
            OZScene::addAllDependencies(*((void *)this + 121), v11);
          }
        }
      }
    }
  }
}

void sub_1B7C99FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  std::__list_imp<unsigned int>::clear(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZFootageLayer::~OZFootageLayer(OZFootageLayer *this)
{
  *(void *)this = &unk_1F1150BE0;
  *((void *)this + 2) = &unk_1F11510A8;
  *((void *)this + 6) = &unk_1F1151300;
  for (uint64_t i = *((void *)this + 138); i; uint64_t i = *((void *)this + 138))
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 137);
    uint64_t v4 = v3[2];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    *((void *)this + 138) = i - 1;
    operator delete(v3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1112));
  std::__list_imp<unsigned int>::clear((void *)this + 136);

  OZSceneNode::~OZSceneNode(this);
}

{
  uint64_t vars8;

  OZFootageLayer::~OZFootageLayer(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFootageLayer::~OZFootageLayer(OZFootageLayer *this)
{
}

{
  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZFootageLayer::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);

  return OZChannelFolder::operator=(a1 + 1112);
}

uint64_t OZFootageLayer::getDescendantAtIndex(OZFootageLayer *this, int a2)
{
  uint64_t v2 = (char *)this + 1088;
  uint64_t v3 = (char *)*((void *)this + 137);
  BOOL v4 = v3 != (char *)this + 1088;
  if (v3 != (char *)this + 1088 && a2 != 0)
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = (void *)*((void *)v3 + 2);
      if (v8) {
      if (v8)
      }
        ++v7;
      uint64_t v3 = (char *)*((void *)v3 + 1);
      BOOL v4 = v3 != v2;
    }
    while (v3 != v2 && v7 != a2);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v10 = *((void *)v3 + 2);
  if (v10) {
    return v10 + 16;
  }
  else {
    return 0;
  }
}

uint64_t OZFootageLayer::addDescendantAfter(OZFootageLayer *this, OZSceneNode *a2, OZSceneNode *a3)
{
  if (a3)
  {
    PCString v6 = (char *)this + 1088;
    for (uint64_t i = *((void *)this + 137); (char *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6) {
          break;
        }
        uint64_t v8 = *(uint64_t **)(i + 8);
        uint64_t v9 = operator new(0x18uLL);
        _OWORD v9[2] = a2;
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *uint64_t v9 = v10;
        *uint64_t v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  long long v11 = operator new(0x18uLL);
  long long v12 = (void *)*((void *)this + 137);
  *long long v11 = (char *)this + 1088;
  v11[1] = v12;
  uint64_t v11[2] = a2;
  *long long v12 = v11;
  *((void *)this + 137) = v11;
LABEL_9:
  ++*((void *)this + 138);
  if (a3)
  {
    uint64_t v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    uint64_t v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 56), v13, v14);
  }
  else
  {
    uint64_t v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v15);
  }
  (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(void *)a2 + 256))(a2, this);
  PCString v16 = (OZScene *)*((void *)this + 121);
  if (v16)
  {
    OZScene::registerNode(v16, a2);
    OZScene::addAllDependencies(*((void *)this + 121), a2);
  }
  uint64_t v17 = *(uint64_t (**)(OZFootageLayer *))(*(void *)this + 496);

  return v17(this);
}

uint64_t OZFootageLayer::addDescendantBefore(OZFootageLayer *this, OZSceneNode *a2, OZSceneNode *a3)
{
  PCString v6 = (uint64_t *)((char *)this + 1088);
  if (a3)
  {
    for (uint64_t i = *((void *)this + 137); (uint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        PCString v6 = (uint64_t *)i;
        break;
      }
    }
  }
  uint64_t v8 = operator new(0x18uLL);
  v8[2] = a2;
  uint64_t v9 = *v6;
  *(void *)(v9 + 8) = v8;
  *uint64_t v8 = v9;
  *PCString v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((void *)this + 138);
  if (a3)
  {
    uint64_t v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    long long v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 56), v10, v11);
  }
  else
  {
    long long v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v12);
  }
  (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(void *)a2 + 256))(a2, this);
  uint64_t v13 = (OZScene *)*((void *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, a2);
    OZScene::addAllDependencies(*((void *)this + 121), a2);
  }
  uint64_t v14 = *(uint64_t (**)(OZFootageLayer *))(*(void *)this + 496);

  return v14(this);
}

BOOL OZFootageLayer::hasDescendants(OZFootageLayer *this)
{
  return *((void *)this + 138) != 0;
}

uint64_t OZFootageLayer::numberOfDescendants(OZFootageLayer *this)
{
  return *((unsigned int *)this + 276);
}

uint64_t OZFootageLayer::begin_descendants(OZFootageLayer *this)
{
  return *((void *)this + 137);
}

uint64_t OZFootageLayer::end_descendants(OZFootageLayer *this)
{
  return (uint64_t)this + 1088;
}

OZChannelFolder *OZFootageLayer::removeDescendant(OZFootageLayer *this, OZSceneNode *a2)
{
  BOOL v4 = (OZSceneNode **)((char *)this + 1088);
  for (uint64_t i = (OZSceneNode **)*((void *)this + 137); i != v4; uint64_t i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        (*(void (**)(OZSceneNode *, void))(*(void *)a2 + 256))(a2, 0);
        PCString v6 = *i;
        *((void *)v6 + 1) = i[1];
        *(void *)i[1] = v6;
        --*((void *)this + 138);
        operator delete(i);
        (*(void (**)(OZFootageLayer *))(*(void *)this + 496))(this);
        int v7 = (OZScene *)*((void *)this + 121);
        if (v7)
        {
          OZScene::unregisterNode(v7, a2);
          OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      break;
    }
  }
  uint64_t v8 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);

  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v8);
}

uint64_t OZFootageLayer::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFootageLayerScope);
    uint64_t v10 = (*((uint64_t (**)(unsigned int **))*this + 128))(this);
    uint64_t v11 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    memset(v28, 0, sizeof(v28));
    int v29 = 1065353216;
    uint64_t v24 = v10;
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    char v27 = 0;
    (*((void (**)(unsigned int **))*this + 128))(this);
    uint64_t v12 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    memset(v22, 0, sizeof(v22));
    int v23 = 1065353216;
    uint64_t v21 = v12;
    uint64_t v13 = v10;
    if (v10 != v12)
    {
      uint64_t v14 = (FILE **)MEMORY[0x1E4F143C8];
      do
      {
        if (v13 == v26) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = *(void *)(v13 + 16);
        }
        if (OZChannelBase::testFlag((OZChannelBase *)(v15 + 56), 8))
        {
          int Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v15 + 16));
          CStr = PCString::createCStr(Name);
          fprintf(*v14, "\nBOGUS: Footage marked as don't save for '%s'\n\n", CStr);
          if (CStr) {
            MEMORY[0x1BA9BFBA0](CStr, 0x1000C4077774924);
          }
        }
        uint64_t v19 = *(void *)(v15 + 48);
        uint64_t v18 = v15 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(v19 + 16))(v18, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v18 + 24))(v18, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        uint64_t v13 = *(void *)(v24 + 8);
        uint64_t v24 = v13;
      }
      while (v13 != v21);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
  }
  return OZSceneNode::writeBody(this, a2, a3, a4, a5);
}

void sub_1B7C9AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZFootageLayer::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZFootageLayer::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZFootageLayer::parseBegin(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZFootageLayer::parseBegin(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZFootageLayer::parseEnd(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZFootageLayer::parseEnd(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZFootageLayer::parseElement(OZFootageLayer *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v18);
  *(void *)uint64_t v17 = 0;
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 62)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v17);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    uint64_t v8 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v17[0]);
    if (!v8) {
      goto LABEL_11;
    }
    if (!v9) {
      goto LABEL_11;
    }
    uint64_t SceneNode = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v9 + 168))(v9, &v18, v17[1]);
  }
  else
  {
    if (v6 != 67) {
      goto LABEL_11;
    }
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    long long v19 = xmmword_1B83804B0;
    uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v19);
  }
  uint64_t v10 = SceneNode;
  if (SceneNode)
  {
    OZChannelBase::setID((OZChannelBase *)(SceneNode + 56), v17[1]);
    (*(void (**)(uint64_t, OZFootageLayer *))(*(void *)v10 + 256))(v10, this);
    uint64_t v11 = operator new(0x18uLL);
    v11[1] = (char *)this + 1088;
    uint64_t v11[2] = v10;
    uint64_t v12 = *((void *)this + 136);
    *uint64_t v11 = v12;
    *(void *)(v12 + 8) = v11;
    *((void *)this + 136) = v11;
    ++*((void *)this + 138);
    uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v13);
    uint64_t v14 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
    OZChannelBase::resetFlag(v14, 64, 0);
    uint64_t v15 = (OZScene *)*((void *)this + 121);
    if (v15)
    {
      OZScene::registerNode(v15, (OZSceneNode *)v10);
      OZScene::addAllDependencies(*((void *)this + 121), (OZSceneNode *)v10);
    }
    PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
  }
LABEL_11:
  PCString::~PCString((PCString *)&v18);
  return 1;
}

void sub_1B7C9AF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZFootageLayer::parseElement(OZFootageLayer *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZFootageLayer::getNaturalDuration@<Q0>(OZFootageLayer *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 232);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 31);
  return result;
}

__n128 non-virtual thunk to'OZFootageLayer::getNaturalDuration@<Q0>(OZFootageLayer *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 29);
  return result;
}

void OZLiCachingImageSource::OZLiCachingImageSource(OZLiCachingImageSource *this, const OZRenderParams *a2, OZElement *a3)
{
  *((void *)this + 183) = &unk_1F1199AC8;
  *((void *)this + 184) = 0;
  *((unsigned char *)this + 1480) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F1151460);
  *(void *)this = &unk_1F1151378;
  *((void *)this + 183) = &unk_1F1151440;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  OZRenderParams::OZRenderParams((OZLiCachingImageSource *)((char *)this + 32), a2);
  *((void *)this + 182) = a3;
}

void sub_1B7C9B05C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1151460);
  *(void *)(v1 + 1464) = v2;
  *(unsigned char *)(v1 + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1472));
  _Unwind_Resume(a1);
}

HGBitmapLoader *OZLiCachingImageSource::getHelium@<X0>(OZLiCachingImageSource *this@<X0>, LiRenderParameters **a2@<X1>, uint64_t *a3@<X8>)
{
  double v59 = 0;
  HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer(a2);
  int v48 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)HeliumRenderer + 128))(HeliumRenderer, 43);
  int v7 = (LiImageSource *)*((void *)this + 2);
  if (!v7)
  {
LABEL_44:
    if (v48 == 1)
    {
      OZElement::cachedMetalTexture(*((OZElement **)this + 182), &v53);
      char v33 = (HGBitmap *)v53;
      uint64_t v34 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v34, v33);
      *a3 = (uint64_t)v34;
      if (v53) {
        (*(void (**)(uint64_t))(*(void *)v53 + 24))(v53);
      }
    }
    else
    {
      OZElement::cachedTexture(*((OZElement **)this + 182), &v53);
      if (v53)
      {
        int v35 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(v53 + 40), *(_DWORD *)(v53 + 36), 0);
        long long v58 = xmmword_1B837AB70;
        PGTexture::getTexCoords(v53, (float32x4_t *)&v58);
        uint64_t v36 = HGRectMake4i((int)*(float *)&v58, (int)*((float *)&v58 + 1), (int)*((float *)&v58 + 2) + (int)*(float *)&v58, (int)*((float *)&v58 + 3) + (int)*((float *)&v58 + 1));
        uint64_t v38 = v37;
        unsigned int Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(v53 + 64));
        CMTime v40 = (HGBitmap *)HGObject::operator new(0xC8uLL);
        HGGLTexture::HGGLTexture((uint64_t)v40, v36, v38, v35, (uint64_t)HeliumRenderer, Name, 1);
        double v41 = (HGObject *)HGObject::operator new(0x20uLL);
        CMTime v42 = v41;
        uint64_t v44 = v53;
        CMTime v43 = v54;
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HGObject::HGObject(v41);
        *(void *)CMTime v42 = &unk_1F1151608;
        *((void *)v42 + 2) = v44;
        *((void *)v42 + 3) = v43;
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        HGBitmap::SetStorage(v40, v42);
        long long v45 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v45, v40);
        if (v59 == v45)
        {
          if (v45) {
            (*(void (**)(HGBitmapLoader *))(*(void *)v45 + 24))(v45);
          }
        }
        else
        {
          if (v59) {
            (*(void (**)(void))(*(void *)v59 + 24))();
          }
          double v59 = v45;
        }
        (*(void (**)(HGObject *))(*(void *)v42 + 24))(v42);
        if (v40) {
          (*(void (**)(HGBitmap *))(*(void *)v40 + 24))(v40);
        }
      }
      *a3 = (uint64_t)v59;
      double v59 = 0;
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
    }
    goto LABEL_62;
  }
  LiAgent::getHelium((LiAgent *)a2, v7, a3);
  uint64_t v8 = *a3;
  if (v59 != (HGBitmapLoader *)*a3)
  {
    double v59 = (HGBitmapLoader *)*a3;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
  }
  LiAgent::getROI((__n128 *)a2, (__n128 *)&v58);
  uint64_t v9 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v9);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v9 + 96))(v9, 0, (float)(int)v58, (float)SDWORD1(v58), (float)(DWORD2(v58) + v58), (float)(HIDWORD(v58) + DWORD1(v58)));
  (*(void (**)(HGCrop *, void, HGBitmapLoader *))(*(void *)v9 + 120))(v9, 0, v59);
  uint64_t v10 = (HGNode *)v9;
  if (v59 != v9)
  {
    if (v59) {
      (*(void (**)(HGBitmapLoader *, HGCrop *))(*(void *)v59 + 24))(v59, v9);
    }
    double v59 = v9;
    (*(void (**)(HGCrop *, HGNode *))(*(void *)v9 + 16))(v9, v10);
    uint64_t v10 = (HGNode *)v59;
  }
  *(void *)&v57.CMTime var0 = HGRenderer::GetDOD(HeliumRenderer, v10);
  *(void *)&v57.var2 = v11;
  HGRect::Init(&v56, -1, -1, 1, 1);
  HGRect::Grow(&v57, v56);
  int32x4_t v55 = (int32x4_t)xmmword_1B7E74760;
  if (HGRectIsNull(*(uint64_t *)&v57.var0, *(uint64_t *)&v57.var2))
  {
    int32x2_t v12 = (int32x2_t)-1;
  }
  else
  {
    *(int32x2_t *)v55.i8 = vmax_s32(*(int32x2_t *)&v57.var0, vdup_n_s32(0xC0000001));
    int32x2_t v12 = vsub_s32(vmin_s32(*(int32x2_t *)&v57.var2, vdup_n_s32(0x3FFFFFFEu)), *(int32x2_t *)v55.i8);
  }
  v55.u64[1] = (unint64_t)v12;
  OZRenderParams::getWorkingColorSpace((FxColorDescription *)this + 1);
  if (v48 != 1)
  {
    PGHelium::renderNodeToTexture(HeliumRenderer, (uint64_t *)&v59, (unsigned int *)&v55, *((_DWORD *)this + 93), (OZLiCachingImageSource *)((char *)this + 1348), 0, &v53);
    if (v53)
    {
      float32x4_t v51 = vcvtq_f32_s32(v55);
      PGTexture::setTexCoords(v53, (float32x2_t *)&v51);
      uint64_t v29 = *((void *)this + 182);
      uint64_t v49 = v53;
      uint64_t v50 = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OZElement::setCachedTexture(v29, &v49);
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
    }
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    goto LABEL_39;
  }
  uint64_t v47 = a3;
  uint64_t v14 = HGRectMake4i(v55.u32[0], v55.u32[1], v55.i32[2] + v55.i32[0], v55.i32[3] + v55.i32[1]);
  uint64_t v16 = v15;
  uint64_t Format = PGHelium::makeFormat(*((_DWORD *)this + 93));
  int isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated((OZLiCachingImageSource *)((char *)this + 32));
  long long v19 = (HGBitmap *)HGObject::operator new(0x80uLL);
  int v20 = v19;
  if (isRenderForHDR_Deprecated) {
    uint64_t v21 = 27;
  }
  else {
    uint64_t v21 = 24;
  }
  HGBitmap::HGBitmap(v19, v14, v16, v21);
  uint64_t v22 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v22);
  HGColorConform::SetOutputPixelFormat((uint64_t)v22, Format, 0);
  (*(void (**)(HGColorConform *, void, HGBitmapLoader *))(*(void *)v22 + 120))(v22, 0, v59);
  if (v59 != v22)
  {
    if (v59) {
      (*(void (**)(void))(*(void *)v59 + 24))();
    }
    double v59 = v22;
    (*(void (**)(HGColorConform *))(*(void *)v22 + 16))(v22);
  }
  int DstAlphaFactor = HGGLBlendingInfo::GetDstAlphaFactor((OZLiCachingImageSource *)((char *)this + 1348));
  int BitsPerChannel = PCBitDepth::getBitsPerChannel(DstAlphaFactor);
  uint64_t v25 = PGHelium::convertBitsPerChannel((PGHelium *)4, BitsPerChannel, 0);
  RendererMutexLocker::RendererMutexLocker((RendererMutexLocker *)&v53, v13);
  LiHelium::setUpGLRenderer(v13, v25);
  (*(void (**)(HGRenderer *, HGBitmap *, HGBitmapLoader *))(*(void *)v13 + 64))(v13, v20, v59);
  RendererMutexLocker::~RendererMutexLocker((RendererMutexLocker *)&v53);
  if (!(*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)v13 + 128))(v13, 13))
  {
    MetalTexture = HGGPURenderer::GetMetalTexture(v13, v20, v26);
    long long v31 = MetalTexture;
    uint64_t v32 = *((void *)this + 182);
    long long v52 = MetalTexture;
    if (MetalTexture) {
      (*(void (**)(HGBitmap *))(*(void *)MetalTexture + 16))(MetalTexture);
    }
    OZElement::setCachedMetalTexture(v32, (uint64_t *)&v52);
    if (v52) {
      (*(void (**)(HGBitmap *))(*(void *)v52 + 24))(v52);
    }
    if (v31) {
      (*(void (**)(HGBitmap *))(*(void *)v31 + 24))(v31);
    }
    (*(void (**)(HGColorConform *))(*(void *)v22 + 24))(v22);
    a3 = v47;
    if (v20) {
      (*(void (**)(HGBitmap *))(*(void *)v20 + 24))(v20);
    }
LABEL_39:
    char v28 = 0;
    char v27 = 1;
    goto LABEL_40;
  }
  (*(void (**)(HGColorConform *))(*(void *)v22 + 24))(v22);
  a3 = v47;
  if (v20) {
    (*(void (**)(HGBitmap *))(*(void *)v20 + 24))(v20);
  }
  char v27 = 0;
  char v28 = 1;
LABEL_40:
  (*(void (**)(HGCrop *))(*(void *)v9 + 24))(v9);
  if ((v28 & 1) == 0 && *a3) {
    (*(void (**)(uint64_t))(*(void *)*a3 + 24))(*a3);
  }
  if (v27) {
    goto LABEL_44;
  }
LABEL_62:
  __n128 result = v59;
  if (v59) {
    return (HGBitmapLoader *)(*(uint64_t (**)(HGBitmapLoader *))(*(void *)v59 + 24))(v59);
  }
  return result;
}

void sub_1B7C9BA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  if (*a9) {
    (*(void (**)(void))(*(void *)*a9 + 24))(*a9);
  }
  uint64_t v15 = *(void *)(v13 - 96);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t OZLiCachingImageSource::pixelTransformSupport(OZLiCachingImageSource *this, const LiRenderParameters *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, const LiRenderParameters *))(*(void *)v2 + 56))(v2, a2);
  }
  else {
    return 6;
  }
}

uint64_t OZLiCachingImageSource::estimateRenderMemory(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    BOOL v4 = *(uint64_t (**)(void))(*(void *)v3 + 112);
    return v4();
  }
  else
  {
    OZElement::cachedMetalTexture(*(OZElement **)(a1 + 1456), &v8);
    if (v8)
    {
      (*(void (**)(void *))(*v8 + 24))(v8);
      OZElement::cachedMetalTexture(*(OZElement **)(a1 + 1456), &v8);
      uint64_t v6 = v8[9];
      (*(void (**)(void *))(*v8 + 24))(v8);
    }
    else
    {
      OZElement::cachedTexture(*(OZElement **)(a1 + 1456), &v8);
      int v7 = v8;
      if (v8) {
        uint64_t v1 = (*(uint64_t (**)(void *))(*v8 + 40))(v8);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (v7) {
        return v1;
      }
      else {
        return 0;
      }
    }
    return v6;
  }
}

void sub_1B7C9BF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void OZLiCachingImageSource::~OZLiCachingImageSource(PCSharedCount *this)
{
  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151378;
  this[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151440;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[4]);
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1151460);
  this[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[184].var0);
}

{
  uint64_t vars8;

  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151378;
  this[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151440;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[4]);
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1151460);
  this[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[184].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiCachingImageSource::~OZLiCachingImageSource(OZLiCachingImageSource *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151378;
  v1[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151440;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[4]);
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1151460);
  v1[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[185].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[184].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151378;
  v1[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1151440;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[4]);
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1151460);
  v1[183].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[184].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void PGHGImageRef::~PGHGImageRef(PGHGImageRef *this)
{
  *(void *)this = &unk_1F1151608;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  HGObject::~HGObject(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1151608;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  HGObject::~HGObject(this);

  HGObject::operator delete(v3);
}

uint64_t OZChannelSceneNode_Factory::getInstance(OZChannelSceneNode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelSceneNode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelSceneNode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSceneNode_Factory::_instance;
}

void OZChannelSceneNode::OZChannelSceneNode(OZChannelSceneNode *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelSceneNode_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1151658;
  *((void *)this + 2) = &unk_1F11519F0;
  *((void *)this + 32) = 0;
}

void OZChannelSceneNode::OZChannelSceneNode(OZChannelSceneNode *this, const OZChannelSceneNode *a2, OZChannelFolder *a3)
{
  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *uint64_t v3 = &unk_1F1151658;
  int v3[2] = &unk_1F11519F0;
  v3[32] = 0;
}

void non-virtual thunk to'OZChannelSceneNode::~OZChannelSceneNode(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelSceneNode::~OZChannelSceneNode(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelSceneNode::clone(OZChannelSceneNode *this)
{
}

void sub_1B7C9C5C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelSceneNode::compare(OZChannelSceneNode *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result) {
    return (const OZChannelBase *)((__CFString *)*((void *)this + 32) == result[2].var4.var0
  }
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

uint64_t OZChannelSceneNode::channelValueWillBeSet(OZChannelSceneNode *this, OZChannel *a2, const CMTime *a3, double a4)
{
  uint64_t result = *((void *)this + 32);
  if (result)
  {
    CMTime v5 = *a3;
    return (*(uint64_t (**)(uint64_t, OZChannel *, CMTime *, double))(*(void *)result + 304))(result, a2, &v5, a4);
  }
  return result;
}

uint64_t OZChannelSceneNode::reset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 256);
  if (v1)
  {
    uint64_t v2 = this;
    (*(void (**)(uint64_t))(*(void *)(v1 + 320) + 288))(v1 + 320);
    (*(void (**)(void))(*(void *)(*(void *)(v2 + 256) + 832) + 288))();
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(v2 + 256) + 448) + 288);
    return v3();
  }
  return this;
}

uint64_t OZChannelSceneNode::setSceneNode(uint64_t this, OZSceneNode *a2)
{
  *(void *)(this + 256) = a2;
  uint64_t v2 = (char *)a2 + 16;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(void *)(this + 208) = v2;
  return this;
}

void std::__call_once_param<std::tuple<OZChannelSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C9C850(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelSceneNode_Factory::OZChannelSceneNode_Factory(OZChannelSceneNode_Factory *this)
{
  long long v3 = xmmword_1B83817E0;
  long long v4 = xmmword_1B83827A0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1151A60;
  *((void *)this + 16) = &unk_1F1151B30;
}

void sub_1B7C9C920(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelSceneNode_Factory::create(OZChannelSceneNode_Factory *this, const PCString *a2)
{
}

void sub_1B7C9C9D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelSceneNode_Factory::createCopy(OZChannelSceneNode_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C9CACC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelSceneNode_Factory::createChannelCopy(OZChannelSceneNode_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C9CBC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZMsgTracerLogFxPlugUsage(OZObjectManipulator *this)
{
  if (this
  {
    long long v3 = v2;
    if (*((unsigned char *)v2 + 216))
    {
      MainBundle = CFBundleGetMainBundle();
      if ((*(unsigned int (**)(OZFxPlugSharedBase *))(*(void *)v3 + 440))(v3))
      {
        if (OZFxPlugSharedBase::getPluginSessionID(v3)) {
          uint64_t v5 = 4;
        }
        else {
          uint64_t v5 = 3;
        }
      }
      else
      {
        uint64_t v5 = 2;
      }
      CFStringRef v9 = (const __CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", v5);
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
      OZFxPlugSharedBase::getPluginUUID((const PCString *)v3, &v13);
      v12.CMTime var0 = 0;
      PCString::set(&v12, v9);
      PCURL::PCURL((PCURL *)&v11, Identifier);
      PCString::~PCString(&v11);
      PCString::~PCString(&v12);
      PCString::~PCString(&v13);
    }
    else
    {
      OZFxPlugSharedBase::getDisplayName((id *)v2, &v13);
      uint64_t v8 = PCString::createCStr(&v13);
      PCString::~PCString(&v13);
      free(v8);
    }
  }
  else
  {
    unsigned int Name = (PCString *)OZObjectManipulator::getName(this);
    CStr = PCString::createCStr(Name);
    free(CStr);
  }
}

void sub_1B7C9CD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void OZSimulationCurveNode::OZSimulationCurveNode(OZCurveNode *a1, uint64_t a2, int a3)
{
  OZCurveNode::OZCurveNode(a1);
  *(void *)uint64_t v5 = &unk_1F1151B88;
  *(void *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
}

void OZSimulationCurveNode::~OZSimulationCurveNode(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZSimulationCurveNode::solveNode(OZSimulationCurveNode *this, OZCurveNodeParam *a2)
{
  long long v3 = (void *)*((void *)a2 + 19);
  long long v4 = (uint64_t *)*((void *)a2 + 10);
  CMTime v13 = *(CMTime *)((unsigned char *)a2 + 5);
  long long v5 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v12.CMTimeValue value = v5;
  v12.CMTimeEpoch epoch = *((void *)a2 + 14);
  uint64_t v6 = *((void *)this + 1);
  if (*(unsigned char *)(v6 + 208) && !*(unsigned char *)(v6 + 372))
  {
    if (*((_DWORD *)a2 + 36))
    {
      unint64_t v10 = 0;
      do
      {
        *(double *)&v3[v10] = OZObjectSimulator::getStateElement(*((OZObjectSimulator **)this + 1), &v12, *((_DWORD *)this + 4));
        CMTime v15 = v12;
        CMTime v14 = v13;
        PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)&v16);
        *(void *)&long long v5 = v16.value;
        CMTime v12 = v16;
        ++v10;
      }
      while (v10 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    uint64_t v7 = *((unsigned int *)a2 + 36);
    if (v7)
    {
      do
      {
        uint64_t v8 = *v4++;
        *(void *)&long long v5 = v8;
        *v3++ = v8;
        --v7;
      }
      while (v7);
    }
  }
  return *(double *)&v5;
}

double OZSimulationCurveNode::solveNode(OZSimulationCurveNode *this, const CMTime *a2, double a3, double a4)
{
  if ((a2->flags & 1) != 0 && (uint64_t v4 = *((void *)this + 1), *(unsigned char *)(v4 + 208)) && !*(unsigned char *)(v4 + 372)) {
    return OZObjectSimulator::getStateElement(*((OZObjectSimulator **)this + 1), a2, *((_DWORD *)this + 4));
  }
  else {
    return a4;
  }
}

__n128 OZSimulationCurveNode::getNeededRange(OZSimulationCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void *OZSimulationCurveNode::getVisibleAffectingBehaviors(uint64_t a1, uint64_t *a2)
{
  return OZObjectSimulator::getAllVisibleBehaviors(*(void *)(a1 + 8), a2, *(_DWORD *)(a1 + 16));
}

void *OZSimulationCurveNode::getAllAffectingBehaviors(uint64_t a1, uint64_t *a2)
{
  return OZObjectSimulator::getBehaviors(*(void *)(a1 + 8), a2, 1u, 1);
}

uint64_t OZSimulationCurveNode::anyAffectingBehaviors(OZSimulationCurveNode *this)
{
  return OZObjectSimulator::anythingToSimulate(*((OZObjectSimulator **)this + 1), *((_DWORD *)this + 4));
}

void OZSimulationCurveNode::cloneNode(OZSimulationCurveNode *this)
{
}

void sub_1B7C9D038(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C4028A83BA9);
  _Unwind_Resume(a1);
}

uint64_t OZSimulationCurveNode::compare(OZSimulationCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 1;
  }
}

BOOL OZSimulationCurveNode::isPassThrough(OZSimulationCurveNode *this)
{
  uint64_t v1 = *((void *)this + 1);
  return !*(unsigned char *)(v1 + 208) || *(unsigned char *)(v1 + 372) != 0;
}

void OZObjectSimulator::OZObjectSimulator(OZObjectSimulator *this, OZTransformNode *a2)
{
  *(void *)this = &unk_1F1151C80;
  *((void *)this + 1) = a2;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = (char *)this + 16;
  *((void *)this + 3) = (char *)this + 16;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 64));
  PCMutex::PCMutex((PCMutex *)((char *)this + 136));
  *((unsigned char *)this + 208) = 0;
  *((void *)this + 30) = (char *)this + 240;
  *((void *)this + 31) = (char *)this + 240;
  *((void *)this + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 264) = 0;
  *((unsigned char *)this + 266) = 1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272));
  *((void *)this + 43) = (char *)this + 344;
  *((void *)this + 44) = (char *)this + 344;
  *((void *)this + 45) = 0;
  *((_DWORD *)this + 9OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 37OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
}

void sub_1B7C9D1B0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v5);
  PCMutex::~PCMutex(v4);
  PCMutex::~PCMutex(v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *v6);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::~OZObjectSimulator(OZObjectSimulator *this)
{
  *(void *)this = &unk_1F1151C80;
  if (*((unsigned char *)this + 264))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 272))(*((void *)this + 1));
    OZDocument::removeCPPObserver(*(void *)(v2 + 1584));
    *((unsigned char *)this + 264) = 0;
    OZScene::removeSimulator(v2, (uint64_t)this);
  }
  OZObjectSimulator::flushCache(this, 0);
  std::__list_imp<unsigned int>::clear((void *)this + 43);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 272));
  std::__list_imp<unsigned int>::clear((void *)this + 30);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 136));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 64));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  std::__list_imp<unsigned int>::clear((void *)this + 2);
}

{
  uint64_t vars8;

  OZObjectSimulator::~OZObjectSimulator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZObjectSimulator::flushCache(OZObjectSimulator *this, int a2)
{
  uint64_t v4 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  while (1)
  {
    uint64_t v5 = *((void *)this + 4);
    if (!v5) {
      break;
    }
    uint64_t v6 = (uint64_t *)*((void *)this + 3);
    if (v6[2])
    {
      MEMORY[0x1BA9BFBA0](v6[2], 0x1000C405DF52C91);
      uint64_t v6 = (uint64_t *)*((void *)this + 3);
      uint64_t v5 = *((void *)this + 4);
    }
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = v6[1];
    *(void *)v6[1] = v7;
    *((void *)this + 4) = v5 - 1;
    operator delete(v6);
  }
  if (*((void *)this + 7))
  {
    uint64_t v8 = (char *)this + 40;
    do
    {
      CFStringRef v9 = *(uint64_t **)v8;
      uint64_t v10 = *(void *)(*(void *)v8 + 56);
      if (v10) {
        MEMORY[0x1BA9BFBA0](v10, 0x1000C405DF52C91);
      }
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 5, v9);
      operator delete(v9);
    }
    while (*((void *)this + 7));
  }
  if (a2)
  {
    uint64_t v11 = *((void *)this + 1);
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 640))(v11);
      std::list<OZSimulationBehavior *>::list(&v15, v12 + 224);
      for (uint64_t i = *((void *)&v15 + 1); (long long *)i != &v15; uint64_t i = *(void *)(i + 8))
        (*(void (**)(void))(**(void **)(i + 16) + 712))(*(void *)(i + 16));
      *((_DWORD *)this + 9OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_DWORD *)(*((void *)this + 1) + 6368);
      std::__list_imp<unsigned int>::clear(&v15);
    }
    *((unsigned char *)this + 208) = OZObjectSimulator::calcAnythingToSimulate(this);
    OZObjectSimulator::getFirstSimTime(this, (uint64_t)&v15);
    *(_OWORD *)((char *)this + 21OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v15;
    *(void *)((char *)this + 228) = v16;
    *((unsigned char *)this + 37OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  }
  return PCMutex::unlock(v4);
}

void sub_1B7C9D494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::notify(OZObjectSimulator *this, __int16 a2)
{
  if ((a2 & 0x9810) != 0)
  {
    int doesDependOnSceneNodes = 1;
    OZObjectSimulator::flushCache(this, 1);
    goto LABEL_3;
  }
  if ((a2 & 0xC) == 0)
  {
    int doesDependOnSceneNodes = 0;
LABEL_3:
    if ((a2 & 0x801C) != 0
      && ((OZObjectSimulator::updateBehaviorList(this) ^ 1 | doesDependOnSceneNodes) & 1) == 0)
    {
      OZObjectSimulator::flushCache(this, 1);
    }
    return;
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v22 = (uint64_t *)v23;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 272))(v5);
    uint64_t v7 = *(void *)(v6 + 1584);
    uint64_t v8 = (OZChannelBase *)(v6 + 920);
    do
    {
      CFStringRef v9 = v8;
      uint64_t v8 = (OZChannelBase *)v8->var6;
    }
    while (v8);
    uint64_t v10 = *(void *)(v7 + 168);
    uint64_t v11 = (OZChannelRef **)(v7 + 296);
    if (v10) {
      uint64_t v12 = (OZChannelRef **)(v10 + 48);
    }
    else {
      uint64_t v12 = v11;
    }
    for (uint64_t i = *v12; i != v12[1]; uint64_t i = (OZChannelRef *)((char *)i + 24))
    {
      Channel = OZChannelRef::getChannel(i, v9);
      if (Channel)
      {
        uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(Channel);
        if (ObjectManipulator)
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
          uint64_t v17 = (const void *)v16;
          if (v16)
          {
            LODWORD(v20) = *(_DWORD *)(v16 + 80);
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v22, (unsigned int *)&v20, &v20);
            unint64_t v18 = *(void *)((*(uint64_t (**)(const void *))(*(void *)v17 + 664))(v17) + 8);
            long long v20 = xmmword_1B7E77B80;
            if (OZFactory::isKindOfClass(v18, (int32x4_t *)&v20))
            {
              *((void *)&v20 + 1) = 0;
              uint64_t v21 = 0;
              *(void *)&long long v20 = (char *)&v20 + 8;
              OZRigWidget::getRiggedNodeIDs(v19, (uint64_t **)&v20);
              std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v22, (unsigned int *)v20, (unsigned int *)&v20 + 2);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, *((void **)&v20 + 1));
            }
          }
        }
      }
    }
    int doesDependOnSceneNodes = OZObjectSimulator::doesDependOnSceneNodes((uint64_t)this, (uint64_t)&v22);
    if (doesDependOnSceneNodes) {
      OZObjectSimulator::flushCache(this, 1);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v22, v23[0]);
    goto LABEL_3;
  }

  OZObjectSimulator::flushCache(this, 1);
}

void sub_1B7C9D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t OZObjectSimulator::doesDependOnSceneNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v3;
    while (1)
    {
      if (*(void *)(a2 + 8))
      {
        unsigned int v6 = *(_DWORD *)(v5 + 80);
        uint64_t v7 = a2 + 8;
        uint64_t v8 = *(void *)(a2 + 8);
        do
        {
          unsigned int v9 = *(_DWORD *)(v8 + 28);
          BOOL v10 = v9 >= v6;
          if (v9 >= v6) {
            uint64_t v11 = (uint64_t *)v8;
          }
          else {
            uint64_t v11 = (uint64_t *)(v8 + 8);
          }
          if (v10) {
            uint64_t v7 = v8;
          }
          uint64_t v8 = *v11;
        }
        while (*v11);
        if ((void *)v7 != v4 && v6 >= *(_DWORD *)(v7 + 28)) {
          break;
        }
      }
      uint64_t v5 = *(void *)(v5 + 960);
      if (!v5)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 640))(v3);
        int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1008))();
        std::list<OZSimulationBehavior *>::list(v43, v12 + 224);
        for (uint64_t i = (void *)v43[1]; i != v43; uint64_t i = (void *)i[1])
        {
          long long v15 = (OZBehavior *)i[2];
          if (OZBehavior::isEnabledAndUseBehaviors(v15)
            && (!v13 || (*(unsigned int (**)(OZBehavior *))(*(void *)v15 + 656))(v15))
            && *((_DWORD *)v15 + 20) >= *(_DWORD *)(a1 + 368))
          {
            uint64_t v16 = (*(uint64_t (**)(OZBehavior *))(*(void *)v15 + 664))(v15);
            if (v16 && v16 != *(void *)(a1 + 8))
            {
              do
              {
                if (*v4)
                {
                  unsigned int v18 = *(_DWORD *)(v16 + 80);
                  long long v19 = v4;
                  uint64_t v20 = *v4;
                  do
                  {
                    unsigned int v21 = *(_DWORD *)(v20 + 28);
                    BOOL v22 = v21 >= v18;
                    if (v21 >= v18) {
                      int v23 = (uint64_t *)v20;
                    }
                    else {
                      int v23 = (uint64_t *)(v20 + 8);
                    }
                    if (v22) {
                      long long v19 = (void *)v20;
                    }
                    uint64_t v20 = *v23;
                  }
                  while (*v23);
                  if (v19 != v4 && v18 >= *((_DWORD *)v19 + 7)) {
                    goto LABEL_74;
                  }
                }
                uint64_t v16 = *(void *)(v16 + 960);
              }
              while (v16);
            }
          }
        }
        if ((v13 & 1) != 0 || (*(unsigned char *)(*(void *)(a1 + 8) + 1024) & 8) != 0 || (uint64_t v25 = *(void *)(v12 + 48)) == 0)
        {
LABEL_72:
          uint64_t v24 = 0;
          goto LABEL_75;
        }
        while (1)
        {
          if ((*(unsigned char *)(v25 + 57) & 0x20) != 0)
          {
            if (v26) {
              break;
            }
          }
LABEL_71:
          uint64_t v25 = *(void *)(v25 + 48);
          if (!v25) {
            goto LABEL_72;
          }
        }
        char v27 = v26;
        char v28 = (const void *)(*(uint64_t (**)(void *))(*(void *)v26 + 840))(v26);
        if (v28) {
        else
        }
          uint64_t v29 = 0;
        std::list<OZSimulationBehavior *>::list(v42, (uint64_t)v27 + 224);
        for (uint64_t j = (void *)v42[1]; ; uint64_t j = (void *)j[1])
        {
          if (j == v42)
          {
            std::__list_imp<unsigned int>::clear(v42);
            goto LABEL_71;
          }
          long long v31 = (OZSimulationBehavior *)j[2];
          uint64_t v32 = *(void **)(a1 + 8);
          if (v32 != OZSimulationBehavior::getTransformNode(v31)
            && OZBehavior::isEnabledAndUseBehaviors(v31)
            && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v31 + 656))(v31) & 1) == 0
            && *((_DWORD *)v31 + 20) >= *(_DWORD *)(a1 + 368))
          {
            uint64_t v33 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v31 + 664))(v31);
            if ((void *)v33 != v29 && v33 != 0) {
              break;
            }
          }
LABEL_69:
          ;
        }
        while (1)
        {
          if (*v4)
          {
            unsigned int v35 = *(_DWORD *)(v33 + 80);
            uint64_t v36 = v4;
            uint64_t v37 = *v4;
            do
            {
              unsigned int v38 = *(_DWORD *)(v37 + 28);
              BOOL v39 = v38 >= v35;
              if (v38 >= v35) {
                CMTime v40 = (uint64_t *)v37;
              }
              else {
                CMTime v40 = (uint64_t *)(v37 + 8);
              }
              if (v39) {
                uint64_t v36 = (void *)v37;
              }
              uint64_t v37 = *v40;
            }
            while (*v40);
            if (v36 != v4 && v35 >= *((_DWORD *)v36 + 7)) {
              break;
            }
          }
          uint64_t v33 = *(void *)(v33 + 960);
          if (!v33) {
            goto LABEL_69;
          }
        }
        std::__list_imp<unsigned int>::clear(v42);
LABEL_74:
        uint64_t v24 = 1;
LABEL_75:
        std::__list_imp<unsigned int>::clear(v43);
        return v24;
      }
    }
  }
  return 1;
}

void sub_1B7C9DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::updateBehaviorList(OZObjectSimulator *this)
{
  int v2 = *((_DWORD *)this + 64);
  uint64_t v26 = &v26;
  char v27 = &v26;
  uint64_t v28 = 0;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))(*((void *)this + 1));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))(*((void *)this + 1));
  std::list<OZSimulationBehavior *>::list(&v24, v3 + 224);
  uint64_t v5 = (uint64_t *)((char *)this + 240);
  unsigned int v6 = v25;
  int v21 = v2;
  if (v25 == &v24)
  {
    int v7 = 0;
    char v22 = 0;
    if (v4) {
      goto LABEL_39;
    }
    goto LABEL_19;
  }
  char v22 = 0;
  int v7 = 0;
  do
  {
    uint64_t v8 = (OZBehavior *)v6[2];
    if (OZBehavior::isEnabledAndUseBehaviors(v8)
      && (!v4 || (*(unsigned int (**)(OZBehavior *))(*(void *)v8 + 656))(v8))
      && *((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92))
    {
      unsigned int v9 = (uint64_t *)((char *)this + 240);
      if (*((uint64_t **)this + 31) != v5)
      {
        unsigned int v9 = (uint64_t *)*((void *)this + 31);
        while ((OZBehavior *)v9[2] != v8)
        {
          unsigned int v9 = (uint64_t *)v9[1];
          if (v9 == v5)
          {
            unsigned int v9 = (uint64_t *)((char *)this + 240);
            break;
          }
        }
      }
      BOOL v10 = operator new(0x18uLL);
      v22 |= v5 == v9;
      if (v5 != v9) {
        ++v7;
      }
      v10[1] = &v26;
      _OWORD v10[2] = v8;
      uint64_t v11 = v26;
      *BOOL v10 = v26;
      v11[1] = v10;
      uint64_t v26 = v10;
      ++v28;
    }
    unsigned int v6 = (uint64_t *)v6[1];
  }
  while (v6 != &v24);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    for (uint64_t i = *(void *)(v3 + 48); i; uint64_t i = *(void *)(i + 48))
    {
      if ((*(unsigned char *)(i + 57) & 0x20) != 0)
      {
        if (v13)
        {
          std::list<OZSimulationBehavior *>::list(v23, (uint64_t)v13 + 224);
          for (uint64_t j = (void *)v23[1]; j != v23; uint64_t j = (void *)j[1])
          {
            long long v15 = (OZSimulationBehavior *)j[2];
            uint64_t v16 = (void *)*((void *)this + 1);
            if (v16 != OZSimulationBehavior::getTransformNode(v15)
              && OZBehavior::isEnabledAndUseBehaviors(v15)
              && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v15 + 656))(v15) & 1) == 0
              && *((_DWORD *)v15 + 20) >= *((_DWORD *)this + 92))
            {
              uint64_t v17 = (uint64_t *)((char *)this + 240);
              if (*((uint64_t **)this + 31) != v5)
              {
                uint64_t v17 = (uint64_t *)*((void *)this + 31);
                while ((OZSimulationBehavior *)v17[2] != v15)
                {
                  uint64_t v17 = (uint64_t *)v17[1];
                  if (v17 == v5)
                  {
                    uint64_t v17 = (uint64_t *)((char *)this + 240);
                    break;
                  }
                }
              }
              unsigned int v18 = operator new(0x18uLL);
              v22 |= v5 == v17;
              if (v5 != v17) {
                ++v7;
              }
              long long v19 = v26;
              v18[1] = &v26;
              double v18[2] = v15;
              void *v18 = v19;
              v19[1] = v18;
              uint64_t v26 = v18;
              ++v28;
            }
          }
          std::__list_imp<unsigned int>::clear(v23);
        }
      }
    }
  }
LABEL_39:
  if (v5 != (uint64_t *)&v26 && v22 & 1 | (v7 != v21)) {
    std::list<OZSimulationBehavior *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(v5, (uint64_t)v27, (uint64_t)&v26);
  }
  std::__list_imp<unsigned int>::clear(&v24);
  std::__list_imp<unsigned int>::clear(&v26);
  return v22 & 1u | (v7 != v21);
}

void sub_1B7C9E004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *OZObjectSimulator::didAddToScene(void *this, OZScene *a2)
{
  if (!*((unsigned char *)this + 264))
  {
    uint64_t v3 = this;
    OZDocument::addCPPObserver(*((void *)a2 + 198), (uint64_t)this, 1000);
    *((unsigned char *)v3 + 264) = 1;
    return OZScene::addSimulator((uint64_t)a2, (uint64_t)v3);
  }
  return this;
}

void *OZObjectSimulator::willRemoveFromScene(void *this, OZScene *a2)
{
  if (*((unsigned char *)this + 264))
  {
    uint64_t v3 = (uint64_t)this;
    OZDocument::removeCPPObserver(*((void *)a2 + 198));
    *(unsigned char *)(v3 + 264) = 0;
    return OZScene::removeSimulator((uint64_t)a2, v3);
  }
  return this;
}

void *OZObjectSimulator::getFirstSimTime@<X0>(OZObjectSimulator *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))(*((void *)this + 1));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))();
  std::list<OZSimulationBehavior *>::list(&v18, v5 + 224);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 1128))(&v16);
  *(CMTime *)a2 = v16;
  uint64_t v6 = v19;
  if (v19 != &v18)
  {
    int v7 = (CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v8 = (OZBehavior *)v6[2];
      if (!v4 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 656))(v6[2]))
      {
        if (OZBehavior::isEnabledAndUseBehaviors(v8))
        {
          if ((*(unsigned int (**)(OZBehavior *))(*(void *)v8 + 672))(v8))
          {
            if (*((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92))
            {
              (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(void *)v8 + 608))(&v16, v8);
              CMTime time1 = v16;
              CMTime time2 = *(CMTime *)a2;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CMTime time1 = v17;
                CMTime time2 = *v7;
                if (CMTimeCompare(&time1, &time2) >= 1) {
                  *(CMTime *)a2 = v16;
                }
              }
            }
          }
        }
      }
      uint64_t v6 = (uint64_t *)v6[1];
    }
    while (v6 != &v18);
  }
  if ((v4 & 1) == 0 && (*(unsigned char *)(*((void *)this + 1) + 1024) & 8) == 0)
  {
    uint64_t v9 = *(void *)(v5 + 48);
    if (v9)
    {
      BOOL v10 = (CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        if ((*(unsigned char *)(v9 + 57) & 0x20) != 0)
        {
          if (v11)
          {
            uint64_t v12 = (char *)(v11 + 28);
            for (uint64_t i = v11[29]; (char *)i != v12; uint64_t i = *(void *)(i + 8))
            {
              CMTime v14 = *(OZBehavior **)(i + 16);
              if (OZBehavior::isEnabledAndUseBehaviors(v14))
              {
                if (((*(uint64_t (**)(OZBehavior *))(*(void *)v14 + 656))(v14) & 1) == 0)
                {
                  if ((*(unsigned int (**)(OZBehavior *))(*(void *)v14 + 672))(v14))
                  {
                    if (*((_DWORD *)v14 + 20) >= *((_DWORD *)this + 92))
                    {
                      (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(void *)v14 + 608))(&v16, v14);
                      CMTime time1 = v16;
                      CMTime time2 = *(CMTime *)a2;
                      if (CMTimeCompare(&time1, &time2) < 0)
                      {
                        CMTime time1 = v17;
                        CMTime time2 = *v10;
                        if (CMTimeCompare(&time1, &time2) >= 1) {
                          *(CMTime *)a2 = v16;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v9 = *(void *)(v9 + 48);
      }
      while (v9);
    }
  }
  return std::__list_imp<unsigned int>::clear(&v18);
}

void sub_1B7C9E570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::calcAnythingToSimulate(OZObjectSimulator *this)
{
  int v2 = (unsigned char *)*((void *)this + 1);
  if ((v2[1024] & 2) == 0
    && (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 272))(v2)
    && (OZSceneNode::isDescendantOf360Group(*((void *)this + 1)) & 1) == 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))(*((void *)this + 1));
    int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))();
    std::list<OZSimulationBehavior *>::list(&v16, v5 + 224);
    int v7 = v17;
    if (v17 == &v16)
    {
LABEL_13:
      if ((v6 & 1) != 0 || (*(unsigned char *)(*((void *)this + 1) + 1024) & 8) != 0 || (uint64_t v10 = *(void *)(v5 + 48)) == 0)
      {
LABEL_27:
        uint64_t v3 = 0;
LABEL_28:
        std::__list_imp<unsigned int>::clear(&v16);
        return v3;
      }
      while (1)
      {
        if ((*(unsigned char *)(v10 + 57) & 0x20) != 0)
        {
          if (v11) {
            break;
          }
        }
LABEL_26:
        uint64_t v10 = *(void *)(v10 + 48);
        if (!v10) {
          goto LABEL_27;
        }
      }
      std::list<OZSimulationBehavior *>::list(v15, (uint64_t)v11 + 224);
      for (uint64_t i = (void *)v15[1]; ; uint64_t i = (void *)i[1])
      {
        if (i == v15)
        {
          std::__list_imp<unsigned int>::clear(v15);
          goto LABEL_26;
        }
        int v13 = (OZSimulationBehavior *)i[2];
        CMTime v14 = (void *)*((void *)this + 1);
        if (v14 != OZSimulationBehavior::getTransformNode(v13)
          && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v13 + 656))(v13) & 1) == 0
          && OZBehavior::isEnabledAndUseBehaviors(v13)
          && *((_DWORD *)v13 + 20) >= *((_DWORD *)this + 92))
        {
          break;
        }
      }
      std::__list_imp<unsigned int>::clear(v15);
    }
    else
    {
      while (1)
      {
        uint64_t v8 = (OZBehavior *)v7[2];
        if (OZBehavior::isEnabledAndUseBehaviors(v8)
          && *((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92)
          && ((v6 & 1) == 0 || ((*(unsigned int (**)(OZBehavior *))(*(void *)v8 + 656))(v8) | v6 ^ 1) == 1))
        {
          uint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)v8 + 312))(v8);
          if (!OZChannelBase::testFlag(v9, 2)) {
            break;
          }
        }
        int v7 = (uint64_t *)v7[1];
        if (v7 == &v16) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v3 = 1;
    goto LABEL_28;
  }
  return 0;
}

void sub_1B7C9E89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::anythingToSimulate(OZObjectSimulator *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))(*((void *)this + 1));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))();
  std::list<OZSimulationBehavior *>::list(&v20, v4 + 224);
  int v6 = v21;
  if (v21 != &v20)
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = (OZBehavior *)v6[2];
      if (OZBehavior::isEnabledAndUseBehaviors(v8)
        && *((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92)
        && (!v5 || ((*(unsigned int (**)(OZBehavior *))(*(void *)v8 + 656))(v8) | v5 ^ 1) == 1))
      {
        switch(a2)
        {
          case 1:
            char v9 = (*(uint64_t (**)(OZBehavior *))(*(void *)v8 + 680))(v8);
            goto LABEL_13;
          case 2:
            char v9 = (*(uint64_t (**)(OZBehavior *))(*(void *)v8 + 688))(v8);
            goto LABEL_13;
          case 3:
            char v9 = (*(uint64_t (**)(OZBehavior *))(*(void *)v8 + 696))(v8);
LABEL_13:
            if (v9) {
              goto LABEL_14;
            }
            break;
          case 7:
          case 8:
          case 9:
            if (!(*(unsigned int (**)(OZBehavior *))(*(void *)v8 + 704))(v8)) {
              break;
            }
            goto LABEL_14;
          default:
LABEL_14:
            if (v7 > 0) {
              goto LABEL_41;
            }
            ++v7;
            break;
        }
      }
      int v6 = (uint64_t *)v6[1];
    }
    while (v6 != &v20);
  }
  if ((v5 & 1) != 0 || (*(unsigned char *)(*((void *)this + 1) + 1024) & 8) != 0 || (uint64_t v10 = *(void *)(v4 + 48)) == 0)
  {
LABEL_38:
    uint64_t v17 = 0;
  }
  else
  {
    int v11 = a2 - 1;
    while (1)
    {
      if ((*(unsigned char *)(v10 + 57) & 0x20) != 0)
      {
        if (v12) {
          break;
        }
      }
LABEL_37:
      uint64_t v10 = *(void *)(v10 + 48);
      if (!v10) {
        goto LABEL_38;
      }
    }
    std::list<OZSimulationBehavior *>::list(v19, (uint64_t)v12 + 224);
    for (uint64_t i = (void *)v19[1]; ; uint64_t i = (void *)i[1])
    {
      if (i == v19)
      {
        std::__list_imp<unsigned int>::clear(v19);
        goto LABEL_37;
      }
      CMTime v14 = (OZSimulationBehavior *)i[2];
      long long v15 = (void *)*((void *)this + 1);
      if (v15 != OZSimulationBehavior::getTransformNode(v14)
        && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v14 + 656))(v14) & 1) == 0
        && OZBehavior::isEnabledAndUseBehaviors(v14)
        && *((_DWORD *)v14 + 20) >= *((_DWORD *)this + 92))
      {
        break;
      }
LABEL_35:
      ;
    }
    switch(v11)
    {
      case 0:
        char v16 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v14 + 680))(v14);
        goto LABEL_34;
      case 1:
        char v16 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v14 + 688))(v14);
        goto LABEL_34;
      case 2:
        char v16 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v14 + 696))(v14);
        goto LABEL_34;
      case 6:
      case 7:
      case 8:
        char v16 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v14 + 704))(v14);
LABEL_34:
        if ((v16 & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_40;
      default:
LABEL_40:
        std::__list_imp<unsigned int>::clear(v19);
        break;
    }
LABEL_41:
    uint64_t v17 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v20);
  return v17;
}

void sub_1B7C9ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SimRecursionSentry::SimRecursionSentry(SimRecursionSentry *this, OZObjectSimulator *a2, const CMTime *a3)
{
  {
    pthread_key_create((pthread_key_t *)&SimRecursionSentry::SimRecursionSentry(OZObjectSimulator *,CMTime const&)::sPerThreadRecursionInfo, (void (__cdecl *)(void *))PCThreadSpecific<SimRecursionInfo>::destroy);
  }
  int v6 = pthread_getspecific(SimRecursionSentry::SimRecursionSentry(OZObjectSimulator *,CMTime const&)::sPerThreadRecursionInfo);
  *(void *)this = v6;
  if (!v6) {
    operator new();
  }
  ++*(_DWORD *)v6;
  uint64_t v24 = a2;
  long long v25 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  std::deque<std::pair<OZObjectSimulator *,CMTime>>::push_back(v6 + 1, (uint64_t)&v24);
  uint64_t v7 = *(void *)this;
  if (!*(unsigned char *)(*(void *)this + 4) && *(_DWORD *)v7 >= 0x24u)
  {
    *(unsigned char *)(v7 + 4) = 1;
    unint64_t v8 = *(void *)(v7 + 48);
    if (v8 >= 2)
    {
      long long v25 = 0uLL;
      uint64_t v24 = (OZObjectSimulator *)&v25;
      v28[0] = 0;
      v28[1] = 0;
      char v27 = v28;
      uint64_t v9 = *(void *)(v7 + 16);
      if (*(void *)(v7 + 24) == v9
        || (unint64_t v10 = *(void *)(v7 + 40),
            unint64_t v11 = v10 + v8,
            uint64_t v12 = (uint64_t *)(v9 + 8 * (v11 >> 7)),
            uint64_t v13 = *v12,
            uint64_t v14 = *v12 + 32 * (v11 & 0x7F),
            uint64_t v15 = *(void *)(v9 + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F),
            v15 == v14))
      {
        int v23 = 0;
LABEL_24:
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v27, v23);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v24, (void *)v25);
      }
      else
      {
        while (1)
        {
          uint64_t v16 = v14;
          if (v14 == v13) {
            uint64_t v16 = *(v12 - 1) + 4096;
          }
          uint64_t v17 = std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)&v27, v16 - 32);
          uint64_t v18 = *v12;
          if (v28 != v17) {
            break;
          }
          uint64_t v19 = v14;
          if (v14 == v18) {
            uint64_t v19 = *(v12 - 1) + 4096;
          }
          if (&v25 == (long long *)std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)&v24, v19 - 32))uint64_t v20 = (uint64_t **)&v24; {
          else
          }
            uint64_t v20 = (uint64_t **)&v27;
          uint64_t v21 = v14;
          if (v14 == *v12) {
            uint64_t v21 = *(v12 - 1) + 4096;
          }
          std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__emplace_unique_key_args<std::pair<OZObjectSimulator *,CMTime>,std::pair<OZObjectSimulator *,CMTime> const&>(v20, v21 - 32, (_OWORD *)(v21 - 32));
          uint64_t v13 = *v12;
          if (v14 == *v12)
          {
            uint64_t v22 = *--v12;
            uint64_t v13 = v22;
            uint64_t v14 = v22 + 4096;
          }
          v14 -= 32;
          if (v15 == v14)
          {
            int v23 = v28[0];
            goto LABEL_24;
          }
        }
        if (v14 == v18) {
          uint64_t v14 = *(v12 - 1) + 4096;
        }
        *(unsigned char *)(*(void *)(v14 - 32) + 37OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v27, v28[0]);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v24, (void *)v25);
        *(unsigned char *)(*(void *)this + 5) = 1;
      }
    }
  }
}

void sub_1B7C9F068(_Unwind_Exception *a1)
{
}

__n128 std::deque<std::pair<OZObjectSimulator *,CMTime>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<OZObjectSimulator *,CMTime>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *unint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void SimRecursionSentry::~SimRecursionSentry(SimRecursionSentry *this)
{
  uint64_t v1 = *(_DWORD **)this;
  int v2 = **(_DWORD **)this - 1;
  **(_DWORD **)this = v2;
  if (!v2) {
    *((_WORD *)v1 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  }
  --*((void *)v1 + 6);
  std::deque<std::pair<OZObjectSimulator *,CMTime>>::__maybe_remove_back_spare[abi:ne180100]((void *)v1 + 1, 1);
}

void OZObjectSimulator::getState(OZObjectSimulator *this, CMTime *a2, CMTime *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 272))(*((void *)this + 1));
  memset(&v55, 0, sizeof(v55));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v55);
  SimRecursionSentry::SimRecursionSentry((SimRecursionSentry *)&v54, this, a2);
  if (*(unsigned char *)(v54 + 5))
  {
    OZSimulationState::initializeState((__n128 *)a3, (const CMTime *)((char *)this + 212));
  }
  else
  {
    long long v47 = 0uLL;
    CMTimeEpoch v48 = 0;
    uint64_t v49 = 0x3FF0000000000000;
    CMTimeValue v53 = 0;
    long long v52 = 0uLL;
    long long v50 = 0u;
    memset(v51, 0, 128);
    OZObjectSimulator::getCachedState(this, a2, &v55, (OZSimulationState *)&v47, *(_DWORD *)v54 > 0x23u);
    CMTime time1 = *(CMTime *)&v51[128];
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2))
    {
      char v46 = 1;
      PCMutex::lock((PCMutex *)((char *)this + 272));
      unint64_t v7 = operator new(0x18uLL);
      v7[1] = (char *)this + 344;
      CMTime v7[2] = &v46;
      uint64_t v8 = *((void *)this + 43);
      *unint64_t v7 = v8;
      *(void *)(v8 + 8) = v7;
      *((void *)this + 43) = v7;
      ++*((void *)this + 45);
      PCMutex::unlock((PCMutex *)((char *)this + 272));
      CMTime time = v55;
      double Seconds = CMTimeGetSeconds(&time);
      CMTime v44 = *(CMTime *)&v51[128];
      memset(&time1, 0, sizeof(time1));
      uint64_t v31 = 0x3FF0000000000000;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v41 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      memset(&v29, 0, sizeof(v29));
      long long v10 = *(_OWORD *)&a2->value;
      v28.CMTimeEpoch epoch = a2->epoch;
      *(_OWORD *)&v28.CMTimeValue value = v10;
      CMTime v27 = v55;
      PC_CMTimeFloorToSampleDuration(&v28, &v27, (uint64_t)&v29);
      memset(&v26, 0, sizeof(v26));
      CMTime time2 = *a2;
      CMTime v56 = v29;
      PC_CMTimeSaferSubtract(&time2, &v56, (uint64_t)&v26);
      p_CMTime time1 = &time1;
      uint64_t v12 = (CMTime *)&v47;
      while (1)
      {
        uint64_t v13 = (OZSimulationState *)v12;
        CMTime time2 = v44;
        CMTime v56 = v29;
        if ((CMTimeCompare(&time2, &v56) & 0x80000000) == 0) {
          break;
        }
        OZObjectSimulator::midPointSolve(this, v13, (OZSimulationState *)p_time1, &v55, Seconds);
        LOBYTE(time2.value) = 0;
        OZObjectSimulator::handleCollisions((uint64_t)this, (uint64_t)v13, (uint64_t)p_time1, 0, &time2);
        PCMutex::lock((PCMutex *)((char *)this + 272));
        if (v46 && !*(unsigned char *)(v54 + 5)) {
          OZObjectSimulator::cacheState(this, (OZSimulationState *)p_time1, &v55, *(unsigned __int8 *)(v54 + 4));
        }
        PCMutex::unlock((PCMutex *)((char *)this + 272));
        CMTime v44 = *(CMTime *)((char *)p_time1 + 176);
        uint64_t v12 = p_time1;
        p_CMTime time1 = (CMTime *)v13;
      }
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime v56 = v26;
      if (CMTimeCompare(&time2, &v56))
      {
        CMTime v25 = v26;
        double v14 = CMTimeGetSeconds(&v25);
        *((_OWORD *)v13 + 9) = 0u;
        *((_OWORD *)v13 + 10) = 0u;
        *((_OWORD *)v13 + 8) = 0u;
        OZObjectSimulator::accumForces(this, v13);
        OZSimulationState::stepFrom((OZSimulationState *)p_time1, v13, &v26, v14);
      }
      else
      {
        p_CMTime time1 = (CMTime *)v13;
      }
      long long v15 = *(_OWORD *)&p_time1->value;
      a3->CMTimeEpoch epoch = p_time1->epoch;
      *(_OWORD *)&a3->CMTimeValue value = v15;
      if (p_time1 != a3)
      {
        a3[1].CMTimeValue value = p_time1[1].value;
        long long v16 = *(_OWORD *)&p_time1[1].timescale;
        a3[2].CMTimeValue value = p_time1[2].value;
        *(_OWORD *)&a3[1].timescale = v16;
      }
      long long v17 = *(_OWORD *)&p_time1[2].timescale;
      long long v18 = *(_OWORD *)&p_time1[3].value;
      *(_OWORD *)&a3[3].CMTimeEpoch epoch = *(_OWORD *)&p_time1[3].epoch;
      *(_OWORD *)&a3[3].CMTimeValue value = v18;
      *(_OWORD *)&a3[2].timescale = v17;
      long long v19 = *(_OWORD *)&p_time1[4].timescale;
      long long v20 = *(_OWORD *)&p_time1[5].value;
      long long v21 = *(_OWORD *)&p_time1[5].epoch;
      *(_OWORD *)&a3[6].timescale = *(_OWORD *)&p_time1[6].timescale;
      *(_OWORD *)&a3[5].CMTimeEpoch epoch = v21;
      *(_OWORD *)&a3[5].CMTimeValue value = v20;
      *(_OWORD *)&a3[4].timescale = v19;
      long long v22 = *(_OWORD *)&p_time1[7].value;
      long long v23 = *(_OWORD *)&p_time1[7].epoch;
      long long v24 = *(_OWORD *)&p_time1[8].timescale;
      a3[9].CMTimeValue value = p_time1[9].value;
      *(_OWORD *)&a3[8].timescale = v24;
      *(_OWORD *)&a3[7].CMTimeEpoch epoch = v23;
      *(_OWORD *)&a3[7].CMTimeValue value = v22;
      PCMutex::lock((PCMutex *)((char *)this + 272));
      time2.CMTimeValue value = (CMTimeValue)&v46;
      std::list<BOOL *>::remove((uint64_t)this + 344, &time2);
      PCMutex::unlock((PCMutex *)((char *)this + 272));
    }
    else
    {
      *(_OWORD *)&a3->CMTimeValue value = v47;
      a3->CMTimeEpoch epoch = v48;
      if (&v47 != (long long *)a3)
      {
        a3[1].CMTimeValue value = v49;
        *(_OWORD *)&a3[1].timescale = v50;
        a3[2].CMTimeValue value = *(void *)v51;
      }
      *(_OWORD *)&a3[7].CMTimeValue value = *(_OWORD *)&v51[120];
      *(_OWORD *)&a3[7].CMTimeEpoch epoch = *(_OWORD *)&v51[136];
      *(_OWORD *)&a3[8].timescale = v52;
      a3[9].CMTimeValue value = v53;
      *(_OWORD *)&a3[4].timescale = *(_OWORD *)&v51[56];
      *(_OWORD *)&a3[5].CMTimeValue value = *(_OWORD *)&v51[72];
      *(_OWORD *)&a3[5].CMTimeEpoch epoch = *(_OWORD *)&v51[88];
      *(_OWORD *)&a3[6].timescale = *(_OWORD *)&v51[104];
      *(_OWORD *)&a3[2].timescale = *(_OWORD *)&v51[8];
      *(_OWORD *)&a3[3].CMTimeValue value = *(_OWORD *)&v51[24];
      *(_OWORD *)&a3[3].CMTimeEpoch epoch = *(_OWORD *)&v51[40];
    }
  }
  SimRecursionSentry::~SimRecursionSentry((SimRecursionSentry *)&v54);
}

void sub_1B7C9F680(_Unwind_Exception *a1)
{
  SimRecursionSentry::~SimRecursionSentry((SimRecursionSentry *)(v1 - 176));
  _Unwind_Resume(a1);
}

double OZObjectSimulator::getCachedState(OZObjectSimulator *this, CMTime *a2, CMTime *a3, OZSimulationState *a4, char a5)
{
  uint64_t v9 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  if (*((unsigned char *)this + 266))
  {
    *((unsigned char *)this + 208) = OZObjectSimulator::calcAnythingToSimulate(this);
    *((unsigned char *)this + 37OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
    OZObjectSimulator::getFirstSimTime(this, (uint64_t)&time1);
    *(CMTime *)((char *)this + 21OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = time1;
    *((unsigned char *)this + 266) = 0;
  }
  long long v10 = (char *)this + 16;
  unint64_t v11 = (char *)*((void *)this + 3);
  if (v11 != (char *)this + 16)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (OZSimulationState *)*((void *)v11 + 2);
      CMTime time1 = *(CMTime *)((char *)v13 + 176);
      CMTime time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        uint64_t v18 = *(void *)v11;
        *(void *)(v18 + 8) = *((void *)v11 + 1);
        **((void **)v11 + 1) = v18;
        --*((void *)this + 4);
        operator delete(v11);
        long long v19 = operator new(0x18uLL);
        long long v20 = (void *)*((void *)this + 3);
        *long long v19 = v10;
        v19[1] = v20;
        _OWORD v19[2] = v13;
        void *v20 = v19;
        uint64_t v21 = *((void *)this + 4) + 1;
        *((void *)this + 3) = v19;
        *((void *)this + 4) = v21;
        uint64_t v22 = *((void *)v13 + 2);
        *(_OWORD *)a4 = *(_OWORD *)v13;
        *((void *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
        if (v13 != a4)
        {
          *((void *)a4 + 3) = *((void *)v13 + 3);
          long long v23 = *((_OWORD *)v13 + 2);
          *((void *)a4 + 6) = *((void *)v13 + 6);
          *((_OWORD *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v23;
        }
        long long v24 = *(_OWORD *)((char *)v13 + 56);
        long long v25 = *(_OWORD *)((char *)v13 + 72);
        *(_OWORD *)((char *)a4 + 88) = *(_OWORD *)((char *)v13 + 88);
        *(_OWORD *)((char *)a4 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v25;
        *(_OWORD *)((char *)a4 + 56) = v24;
        long long v26 = *(_OWORD *)((char *)v13 + 104);
        long long v27 = *(_OWORD *)((char *)v13 + 120);
        long long v28 = *(_OWORD *)((char *)v13 + 136);
        *(_OWORD *)((char *)a4 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)v13 + 152);
        *(_OWORD *)((char *)a4 + 136) = v28;
        *(_OWORD *)((char *)a4 + 120) = v27;
        *(_OWORD *)((char *)a4 + 104) = v26;
        long long v29 = *(_OWORD *)((char *)v13 + 168);
        long long v30 = *(_OWORD *)((char *)v13 + 184);
        long long v31 = *(_OWORD *)((char *)v13 + 200);
        uint64_t v32 = *((void *)v13 + 27);
        goto LABEL_44;
      }
      CMTime time1 = *(CMTime *)((char *)v13 + 176);
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0 && (a5 & 1) == 0)
      {
        if (!v12
          || (CMTime time1 = *(CMTime *)((char *)v12 + 176),
              CMTime time2 = *(CMTime *)((char *)v13 + 176),
              CMTimeCompare(&time1, &time2) < 0))
        {
          uint64_t v12 = v13;
        }
      }
      unint64_t v11 = (char *)*((void *)v11 + 1);
    }
    while (v11 != v10);
    if (!v12 || (a5 & 1) != 0) {
      goto LABEL_17;
    }
    CMTime time1 = *a2;
    CMTime time2 = *(CMTime *)((char *)v12 + 176);
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
    if (*((unsigned char *)this + 265)) {
      CMTime v46 = *a3;
    }
    else {
      operator*(a3, &v46, 10.0);
    }
    CMTime time1 = v47;
    CMTime time2 = v46;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
  uint64_t v12 = 0;
LABEL_17:
  double v14 = (void *)((char *)this + 48);
  uint64_t v15 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, a2, *((void *)this + 6), (uint64_t)this + 48);
  if ((OZObjectSimulator *)((char *)this + 48) == (OZObjectSimulator *)v15)
  {
    if (*((void *)this + 7) && (a5 & 1) == 0)
    {
      long long v33 = (void *)*v14;
      if (*v14)
      {
        do
        {
          long long v16 = v33;
          long long v33 = (void *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v16 = (void *)v14[2];
          BOOL v34 = *v16 == (void)v14;
          double v14 = v16;
        }
        while (v34);
      }
      goto LABEL_39;
    }
  }
  else
  {
    long long v16 = (void *)v15;
    CMTime time1 = *(CMTime *)(v15 + 32);
    CMTime time2 = *a2;
    if (!CMTimeCompare(&time1, &time2))
    {
LABEL_39:
      uint64_t v12 = (OZSimulationState *)v16[7];
      goto LABEL_40;
    }
    if (*((void **)this + 5) != v16 && (a5 & 1) == 0)
    {
      long long v17 = (void *)*v16;
      if (*v16)
      {
        do
        {
          long long v16 = v17;
          long long v17 = (void *)v17[1];
        }
        while (v17);
      }
      else
      {
        long long v35 = v16;
        do
        {
          long long v16 = (void *)v35[2];
          BOOL v34 = *v16 == (void)v35;
          long long v35 = v16;
        }
        while (v34);
      }
      goto LABEL_39;
    }
  }
LABEL_40:
  if (!v12)
  {
    PCMutex::unlock(v9);
    OZSimulationState::initializeState((__n128 *)a4, (const CMTime *)((char *)this + 212));
    CMTime time1 = *a2;
    CMTime time2 = *(CMTime *)((char *)a4 + 176);
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      long long v44 = *(_OWORD *)&a2->value;
      *((void *)a4 + 24) = a2->epoch;
      *((_OWORD *)a4 + 11) = v44;
      OZObjectSimulator::getInitialPosition(this, a4);
      *((void *)a4 + 21) = 0;
      double result = 0.0;
      *(_OWORD *)((char *)a4 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
      *(_OWORD *)((char *)a4 + 136) = 0u;
      *(_OWORD *)((char *)a4 + 120) = 0u;
      *(_OWORD *)((char *)a4 + 104) = 0u;
      *(_OWORD *)((char *)a4 + 88) = 0u;
      *(_OWORD *)((char *)a4 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
      *(_OWORD *)((char *)a4 + 56) = 0u;
    }
    else
    {
      OZObjectSimulator::accumInitialValues(this, a4);
      OZObjectSimulator::cacheState(this, a4, a3, 0);
    }
    return result;
  }
LABEL_41:
  long long v36 = *(_OWORD *)v12;
  *((void *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)v12 + 2);
  *(_OWORD *)a4 = v36;
  if (v12 != a4)
  {
    *((void *)a4 + 3) = *((void *)v12 + 3);
    long long v37 = *((_OWORD *)v12 + 2);
    *((void *)a4 + 6) = *((void *)v12 + 6);
    *((_OWORD *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v37;
  }
  long long v38 = *(_OWORD *)((char *)v12 + 56);
  long long v39 = *(_OWORD *)((char *)v12 + 72);
  *(_OWORD *)((char *)a4 + 88) = *(_OWORD *)((char *)v12 + 88);
  *(_OWORD *)((char *)a4 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v39;
  *(_OWORD *)((char *)a4 + 56) = v38;
  long long v40 = *(_OWORD *)((char *)v12 + 104);
  long long v41 = *(_OWORD *)((char *)v12 + 120);
  long long v42 = *(_OWORD *)((char *)v12 + 136);
  *(_OWORD *)((char *)a4 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)v12 + 152);
  *(_OWORD *)((char *)a4 + 136) = v42;
  *(_OWORD *)((char *)a4 + 120) = v41;
  *(_OWORD *)((char *)a4 + 104) = v40;
  long long v29 = *(_OWORD *)((char *)v12 + 168);
  long long v30 = *(_OWORD *)((char *)v12 + 184);
  long long v31 = *(_OWORD *)((char *)v12 + 200);
  uint64_t v32 = *((void *)v12 + 27);
LABEL_44:
  *((void *)a4 + 27) = v32;
  *(_OWORD *)((char *)a4 + 200) = v31;
  *(_OWORD *)((char *)a4 + 184) = v30;
  *(_OWORD *)((char *)a4 + 168) = v29;
  PCMutex::unlock(v9);
  return result;
}

void *OZObjectSimulator::handleCollisions(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  *a5 = 0;
  char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1008))(*(void *)(a1 + 8));
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 640))();
  std::list<OZSimulationBehavior *>::list(&v28, v19 + 224);
  uint64_t v8 = v29;
  if (v29 == &v28)
  {
LABEL_10:
    if ((v7 & 1) == 0 && (*(unsigned char *)(*(void *)(a1 + 8) + 1024) & 8) == 0)
    {
      uint64_t v12 = *(void *)(v19 + 48);
      if (v12)
      {
        while (1)
        {
          if ((*(unsigned char *)(v12 + 57) & 0x20) != 0)
          {
            if (v13) {
              break;
            }
          }
LABEL_25:
          uint64_t v12 = *(void *)(v12 + 48);
          if (!v12) {
            return std::__list_imp<unsigned int>::clear(&v28);
          }
        }
        std::list<OZSimulationBehavior *>::list(v25, (uint64_t)v13 + 224);
        for (uint64_t i = (void *)v25[1]; ; uint64_t i = (void *)i[1])
        {
          if (i == v25)
          {
            std::__list_imp<unsigned int>::clear(v25);
            goto LABEL_25;
          }
          uint64_t v15 = (const void *)i[2];
          if (v15)
          {
            if (v16)
            {
              long long v17 = v16;
              if (((*(uint64_t (**)(_DWORD *))(*(void *)v16 + 656))(v16) & 1) == 0)
              {
                long long v23 = *(_OWORD *)(a3 + 176);
                uint64_t v24 = *(void *)(a3 + 192);
                if ((*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v17 + 296))(v17, &v23, 0, 1, 1))
                {
                  if (v17[20] >= *(_DWORD *)(a1 + 368))
                  {
                    (*(void (**)(_DWORD *, void, uint64_t, uint64_t, void, unsigned char *))(*(void *)v17 + 728))(v17, *(void *)(a1 + 8), a2, a3, a4, a5);
                    if (*a5) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        std::__list_imp<unsigned int>::clear(v25);
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v9 = (const void *)v8[2];
      if (v9)
      {
        if (v10)
        {
          unint64_t v11 = v10;
          if ((v7 & 1) == 0 || (*(unsigned int (**)(_DWORD *))(*(void *)v10 + 656))(v10))
          {
            long long v26 = *(_OWORD *)(a3 + 176);
            uint64_t v27 = *(void *)(a3 + 192);
            if ((*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v11 + 296))(v11, &v26, 0, 1, 1))
            {
              if (v11[20] >= *(_DWORD *)(a1 + 368))
              {
                (*(void (**)(_DWORD *, void, uint64_t, uint64_t, void, unsigned char *))(*(void *)v11 + 728))(v11, *(void *)(a1 + 8), a2, a3, a4, a5);
                if (*a5) {
                  break;
                }
              }
            }
          }
        }
      }
      uint64_t v8 = (uint64_t *)v8[1];
      if (v8 == &v28) {
        goto LABEL_10;
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v28);
}

void sub_1B7C9FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::cacheState(OZObjectSimulator *this, OZSimulationState *a2, CMTime *a3, int a4)
{
  uint64_t v8 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  uint64_t v9 = (char *)this + 16;
  long long v10 = (char *)*((void *)this + 3);
  if (v10 == (char *)this + 16)
  {
LABEL_4:
    unint64_t v11 = *((void *)this + 4);
    if (v11 >= 9)
    {
      uint64_t v12 = *(uint64_t **)v9;
      if (*(void *)(*(void *)v9 + 16))
      {
        MEMORY[0x1BA9BFBA0](*(void *)(*(void *)v9 + 16), 0x1000C405DF52C91);
        uint64_t v12 = (uint64_t *)*((void *)this + 2);
        unint64_t v11 = *((void *)this + 4);
      }
      uint64_t v13 = *v12;
      *(void *)(v13 + 8) = v12[1];
      *(void *)v12[1] = v13;
      *((void *)this + 4) = v11 - 1;
      operator delete(v12);
    }
    operator new();
  }
  while (1)
  {
    CMTime v49 = *(CMTime *)(*((void *)v10 + 2) + 176);
    CMTime time2 = *(CMTime *)((char *)a2 + 176);
    if (!CMTimeCompare(&v49, &time2)) {
      break;
    }
    long long v10 = (char *)*((void *)v10 + 1);
    if (v10 == v9) {
      goto LABEL_4;
    }
  }
  uint64_t v14 = *((void *)v10 + 2);
  uint64_t v15 = *(void *)v10;
  *(void *)(v15 + 8) = *((void *)v10 + 1);
  **((void **)v10 + 1) = v15;
  --*((void *)this + 4);
  operator delete(v10);
  long long v16 = operator new(0x18uLL);
  long long v17 = (void *)*((void *)this + 3);
  *long long v16 = v9;
  v16[1] = v17;
  double v16[2] = v14;
  *long long v17 = v16;
  uint64_t v18 = *((void *)this + 4) + 1;
  *((void *)this + 3) = v16;
  *((void *)this + 4) = v18;
  long long v19 = *(_OWORD *)a2;
  *(void *)(v14 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v14 = v19;
  if ((OZSimulationState *)v14 != a2)
  {
    *(void *)(v14 + 24) = *((void *)a2 + 3);
    long long v20 = *((_OWORD *)a2 + 2);
    *(void *)(v14 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(v14 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v20;
  }
  long long v21 = *(_OWORD *)((char *)a2 + 56);
  long long v22 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)(v14 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
  *(_OWORD *)(v14 + 56) = v21;
  long long v23 = *(_OWORD *)((char *)a2 + 104);
  long long v24 = *(_OWORD *)((char *)a2 + 120);
  long long v25 = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)(v14 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)(v14 + 136) = v25;
  *(_OWORD *)(v14 + 120) = v24;
  *(_OWORD *)(v14 + 104) = v23;
  long long v26 = *(_OWORD *)((char *)a2 + 168);
  long long v27 = *(_OWORD *)((char *)a2 + 184);
  long long v28 = *(_OWORD *)((char *)a2 + 200);
  *(void *)(v14 + 216) = *((void *)a2 + 27);
  *(_OWORD *)(v14 + 200) = v28;
  *(_OWORD *)(v14 + 184) = v27;
  *(_OWORD *)(v14 + 168) = v26;
  long long v29 = (void *)((char *)this + 48);
  long long v30 = (_OWORD *)((char *)a2 + 176);
  uint64_t v31 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, (CMTime *)((char *)a2 + 176), *((void *)this + 6), (uint64_t)this + 48);
  if ((OZObjectSimulator *)((char *)this + 48) == (OZObjectSimulator *)v31)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_33;
    }
    long long v36 = (void *)*v29;
    if (*v29)
    {
      do
      {
        BOOL v34 = v36;
        long long v36 = (void *)v36[1];
      }
      while (v36);
    }
    else
    {
      do
      {
        BOOL v34 = (void *)v29[2];
        BOOL v35 = *v34 == (void)v29;
        long long v29 = v34;
      }
      while (v35);
    }
  }
  else
  {
    uint64_t v32 = (void *)v31;
    *(_OWORD *)&v49.CMTimeValue value = *v30;
    v49.CMTimeEpoch epoch = *((void *)a2 + 24);
    CMTime time2 = *(CMTime *)(v31 + 32);
    if (!CMTimeCompare(&v49, &time2))
    {
      uint64_t v37 = v32[7];
      long long v38 = *(_OWORD *)a2;
      *(void *)(v37 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v37 = v38;
      if ((OZSimulationState *)v37 != a2)
      {
        *(void *)(v37 + 24) = *((void *)a2 + 3);
        long long v39 = *((_OWORD *)a2 + 2);
        *(void *)(v37 + 48) = *((void *)a2 + 6);
        *(_OWORD *)(v37 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v39;
      }
      long long v40 = *(_OWORD *)((char *)a2 + 56);
      long long v41 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)(v37 + 88) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)(v37 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v41;
      *(_OWORD *)(v37 + 56) = v40;
      long long v42 = *(_OWORD *)((char *)a2 + 104);
      long long v43 = *(_OWORD *)((char *)a2 + 120);
      long long v44 = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)(v37 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)a2 + 152);
      *(_OWORD *)(v37 + 136) = v44;
      *(_OWORD *)(v37 + 120) = v43;
      *(_OWORD *)(v37 + 104) = v42;
      long long v45 = *(_OWORD *)((char *)a2 + 168);
      long long v46 = *(_OWORD *)((char *)a2 + 184);
      long long v47 = *(_OWORD *)((char *)a2 + 200);
      *(void *)(v37 + 216) = *((void *)a2 + 27);
      *(_OWORD *)(v37 + 200) = v47;
      *(_OWORD *)(v37 + 184) = v46;
      *(_OWORD *)(v37 + 168) = v45;
      goto LABEL_29;
    }
    if (*((void **)this + 5) == v32) {
      goto LABEL_33;
    }
    long long v33 = (void *)*v32;
    if (*v32)
    {
      do
      {
        BOOL v34 = v33;
        long long v33 = (void *)v33[1];
      }
      while (v33);
    }
    else
    {
      do
      {
        BOOL v34 = (void *)v32[2];
        BOOL v35 = *v34 == (void)v32;
        uint64_t v32 = v34;
      }
      while (v35);
    }
  }
  uint64_t v37 = v34[7];
  if (!v37) {
    goto LABEL_33;
  }
LABEL_29:
  *(_OWORD *)&v49.CMTimeValue value = *v30;
  v49.CMTimeEpoch epoch = *((void *)a2 + 24);
  CMTime time2 = *(CMTime *)(v37 + 176);
  PC_CMTimeSaferSubtract(&v49, &time2, (uint64_t)&v51);
  if (*((unsigned __int8 *)this + 265) | a4) {
    CMTime v50 = *a3;
  }
  else {
    operator*(a3, &v50, 10.0);
  }
  CMTime v49 = v51;
  CMTime time2 = v50;
  if ((CMTimeCompare(&v49, &time2) & 0x80000000) == 0) {
LABEL_33:
  }
    operator new();
  return PCMutex::unlock(v8);
}

void *std::list<BOOL *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  _OWORD v10[2] = 0;
  int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      int v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B7CA0634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

double OZObjectSimulator::getStateElement(OZObjectSimulator *this, const CMTime *a2, int a3)
{
  memset(&v23, 0, sizeof(v23));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((void *)this + 1) + 56), &v21);
  CMTime v7 = *a2;
  *(__n128 *)&v24.CMTimeValue value = v21;
  v24.CMTimeEpoch epoch = v22;
  PC_CMTimeSaferAdd(&v7, &v24, (uint64_t)&v23);
  memset(&v7, 0, sizeof(v7));
  uint64_t v8 = 0x3FF0000000000000;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  OZObjectSimulator::getState(this, &v23, &v7);
  return OZObjectSimulator::getProperyFromState(this, &v23, a3, (OZSimulationState *)&v7);
}

double OZObjectSimulator::getProperyFromState(OZObjectSimulator *this, const CMTime *a2, int a3, OZSimulationState *a4)
{
  double v4 = 0.0;
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
      CMTime v7 = (double *)((char *)a4 + 200);
      *(_OWORD *)((char *)a4 + 200) = *(_OWORD *)a4;
      *((void *)a4 + 27) = *((void *)a4 + 2);
      uint64_t v8 = *(const void **)(*((void *)this + 1) + 960);
      if (v8)
      {
        if (v10)
        {
          long long v11 = v10;
          OZRenderState::OZRenderState(&v24);
          *(_OWORD *)&v24.var0.CMTime var0 = *(_OWORD *)&a2->value;
          v24.var0.int64_t var3 = a2->epoch;
          v24.var8 = 0;
          (*(void (**)(void *, char *, OZRenderState *))(*(void *)v11 + 1248))(v11, (char *)a4 + 200, &v24);
        }
      }
      switch(a3)
      {
        case 3:
          double v4 = *((double *)a4 + 27);
          break;
        case 2:
          double v4 = *((double *)a4 + 26);
          break;
        case 1:
          double v4 = *v7;
          break;
      }
      break;
    case 4:
      double v4 = *((double *)a4 + 7);
      break;
    case 5:
      double v4 = *((double *)a4 + 8);
      break;
    case 6:
      double v4 = *((double *)a4 + 9);
      break;
    case 7:
    case 8:
    case 9:
      v24.var7.var0[1][2] = 1.0;
      v24.var7.var0[0][1] = 1.0;
      v24.int64_t var3 = 1.0;
      v24.var0.CMTime var0 = 0x3FF0000000000000;
      memset(&v24.var0.var1, 0, 32);
      memset(&v24.var4, 0, 32);
      memset(&v24.var7.var0[0][2], 0, 32);
      PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v24, (double *)a4 + 3);
      memset(v19, 0, sizeof(v19));
      int v20 = 4;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 0;
      Transformatiouint64_t n = PCMatrix44Tmpl<double>::getTransformation((long long *)&v24.var0.var0, (uint64_t)v19);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZObjectSimulator.cpp", 705, v13, v14, v15, v16, v17);
      switch(a3)
      {
        case 9:
          double v4 = *(double *)&v22;
          break;
        case 8:
          double v4 = *((double *)&v21 + 1);
          break;
        case 7:
          double v4 = *(double *)&v21;
          break;
      }
      break;
    case 10:
      double v4 = *((double *)a4 + 10);
      break;
    case 11:
      double v4 = *((double *)a4 + 11);
      break;
    case 12:
      double v4 = *((double *)a4 + 12);
      break;
    default:
      return v4;
  }
  return v4;
}

void *OZObjectSimulator::getInitialPosition(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))(*((void *)this + 1));
  char v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))();
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 272))();
  memset(&v24, 0, sizeof(v24));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v24);
  memset(&v23, 0, sizeof(v23));
  operator*(&v24, &v23, 0.001);
  std::list<OZSimulationBehavior *>::list(&v21, v4 + 224);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v20 = *((void *)a2 + 24);
  long long v19 = *((_OWORD *)a2 + 11);
  unsigned int v15 = (*(uint64_t (**)(void))(*(void *)(v7 + 16) + 104))();
  uint64_t v8 = *((void *)this + 1);
  CMTime v26 = *(CMTime *)((char *)a2 + 176);
  CMTime v25 = v23;
  double v9 = PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)v18);
  int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, double))(*(void *)(v8 + 16) + 104))(v8 + 16, v18, 0, 1, 1, v9);
  for (uint64_t i = v22; i != &v21; uint64_t i = (uint64_t *)i[1])
  {
    long long v11 = (_DWORD *)i[2];
    if (!v11
    {
      if ((v5 & 1) == 0 || (*(unsigned int (**)(_DWORD *))(*(void *)v11 + 656))(v11))
      {
        long long v16 = *((_OWORD *)a2 + 11);
        uint64_t v17 = *((void *)a2 + 24);
        if ((*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v11 + 296))(v11, &v16, 0, 1, 1))
        {
          if (v11[20] >= *((_DWORD *)this + 92)
            && OZObjectSimulator::shouldAccumInitialValue((uint64_t)this, (uint64_t)v11, v15, v14, (CMTime *)((char *)a2 + 176)))
          {
            (*(void (**)(_DWORD *, OZSimulationState *, void))(*(void *)v11 + 640))(v11, a2, *((void *)this + 1));
          }
        }
      }
      if (v12) {
        OZMotionToForcesBehavior::getInitialPosition(v12, a2, *((OZTransformNode **)this + 1));
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v21);
}

void sub_1B7CA0D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZObjectSimulator::accumInitialValues(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 640))(*((void *)this + 1));
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1008))();
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 272))();
  memset(&v40, 0, sizeof(v40));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v40);
  memset(&v39, 0, sizeof(v39));
  operator*(&v40, &v39, 0.001);
  uint64_t v27 = v4;
  std::list<OZSimulationBehavior *>::list(&v37, v4 + 224);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v36 = *((void *)a2 + 24);
  long long v35 = *((_OWORD *)a2 + 11);
  unsigned int v29 = (*(uint64_t (**)(void))(*(void *)(v7 + 16) + 104))();
  uint64_t v8 = (long long *)((char *)a2 + 176);
  uint64_t v9 = *((void *)this + 1);
  CMTime v42 = *(CMTime *)((char *)a2 + 176);
  CMTime v41 = v39;
  double v10 = PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)v34);
  int v28 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, double))(*(void *)(v9 + 16) + 104))(v9 + 16, v34, 0, 1, 1, v10);
  v42.CMTimeValue value = (CMTimeValue)&v42;
  *(void *)&v42.timescale = &v42;
  v42.CMTimeEpoch epoch = 0;
  long long v11 = v38;
  if (v38 != &v37)
  {
    while (1)
    {
      long long v12 = (_DWORD *)v11[2];
      if (v12
      {
        goto LABEL_14;
      }
      if (v12[20] < *((_DWORD *)this + 92)
        || (v5 & 1) != 0 && !(*(unsigned int (**)(_DWORD *))(*(void *)v12 + 656))(v12))
      {
        goto LABEL_14;
      }
      long long v32 = *v8;
      uint64_t v33 = *((void *)a2 + 24);
      if (!(*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, &v32, 0, 1, 1))goto LABEL_14; {
      uint64_t v13 = v5;
      }
      uint64_t v14 = *(void *)v12;
      {
        goto LABEL_11;
      }
      uint64_t v5 = v13;
      if (OZObjectSimulator::shouldAccumInitialValue((uint64_t)this, (uint64_t)v12, v29, v28, (CMTime *)((char *)a2 + 176)))break; {
LABEL_14:
      }
      long long v11 = (uint64_t *)v11[1];
      if (v11 == &v37) {
        goto LABEL_15;
      }
    }
    uint64_t v14 = *(void *)v12;
LABEL_11:
    {
      unsigned int v15 = operator new(0x18uLL);
      uint64_t v5 = v13;
      CMTimeValue value = v42.value;
      v15[1] = &v42;
      _OWORD v15[2] = v12;
      void *v15 = value;
      *(void *)(value + 8) = v15;
      v42.CMTimeValue value = (CMTimeValue)v15;
      ++v42.epoch;
    }
    else
    {
      (*(void (**)(_DWORD *, OZSimulationState *, void))(v14 + 640))(v12, a2, *((void *)this + 1));
      uint64_t v5 = v13;
    }
    goto LABEL_14;
  }
LABEL_15:
  if ((v5 & 1) == 0)
  {
    for (uint64_t i = *(void *)(v27 + 48); i; uint64_t i = *(void *)(i + 48))
    {
      if ((*(unsigned char *)(i + 57) & 0x20) != 0)
      {
        if (v18)
        {
          std::list<OZSimulationBehavior *>::list(&v41, (uint64_t)v18 + 224);
          for (uint64_t j = *(void *)&v41.timescale; (CMTime *)j != &v41; uint64_t j = *(void *)(j + 8))
          {
            uint64_t v20 = *(_DWORD **)(j + 16);
            if (!v20
            {
              uint64_t v21 = (void *)*((void *)this + 1);
              if (v21 != OZSimulationBehavior::getTransformNode((OZSimulationBehavior *)v20))
              {
                long long v30 = *v8;
                uint64_t v31 = *((void *)a2 + 24);
                if ((*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v20 + 296))(v20, &v30, 0, 1, 1))
                {
                  if (v20[20] >= *((_DWORD *)this + 92)
                    && OZObjectSimulator::shouldAccumInitialValue((uint64_t)this, (uint64_t)v20, v29, v28, (CMTime *)((char *)a2 + 176)))
                  {
                    uint64_t v22 = *(void *)v20;
                    {
                      CMTime v23 = operator new(0x18uLL);
                      CMTimeValue v24 = v42.value;
                      v23[1] = &v42;
                      v23[2] = v20;
                      void *v23 = v24;
                      *(void *)(v24 + 8) = v23;
                      v42.CMTimeValue value = (CMTimeValue)v23;
                      ++v42.epoch;
                    }
                    else
                    {
                      (*(void (**)(_DWORD *, OZSimulationState *, void))(v22 + 640))(v20, a2, *((void *)this + 1));
                    }
                  }
                }
              }
            }
          }
          std::__list_imp<unsigned int>::clear(&v41);
        }
      }
    }
  }
  for (uint64_t k = *(void *)&v42.timescale; (CMTime *)k != &v42; uint64_t k = *(void *)(k + 8))
    (*(void (**)(void, OZSimulationState *, void))(**(void **)(k + 16) + 640))(*(void *)(k + 16), a2, *((void *)this + 1));
  std::__list_imp<unsigned int>::clear(&v42);
  return std::__list_imp<unsigned int>::clear(&v37);
}

void sub_1B7CA13DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::midPointSolve(OZObjectSimulator *this, OZSimulationState *a2, OZSimulationState *a3, CMTime *a4, double a5)
{
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  OZObjectSimulator::accumForces(this, a2);
  memset(v13, 0, 24);
  void v13[3] = 0x3FF0000000000000;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v10 = *(_OWORD *)&a4->value;
  v11.CMTimeEpoch epoch = a4->epoch;
  *(_OWORD *)&v11.CMTimeValue value = v10;
  PC_CMTimeHalve(&v11, (uint64_t)&v12);
  OZSimulationState::stepFrom((OZSimulationState *)v13, a2, &v12, a5 * 0.5);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  OZObjectSimulator::accumForces(this, (OZSimulationState *)v13);
  OZSimulationState::stepFrom((uint64_t)a3, (uint64_t)a2, (uint64_t)v13, a4, a5);
}

void *OZObjectSimulator::getBehaviors(uint64_t a1, uint64_t *a2, unsigned __int8 a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 640))(*(void *)(a1 + 8));
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1008))();
  std::list<OZSimulationBehavior *>::list(&v23, v7 + 224);
  for (uint64_t i = v24; i != &v23; uint64_t i = (uint64_t *)i[1])
  {
    long long v10 = (_DWORD *)i[2];
    if (v10[20] >= *(_DWORD *)(a1 + 368) {
      && ((a3 & a4 & 1) != 0
    }
    {
      CMTime v11 = operator new(0x18uLL);
      v11[1] = a2;
      uint64_t v11[2] = v10;
      uint64_t v12 = *a2;
      *CMTime v11 = *a2;
      *(void *)(v12 + 8) = v11;
      *a2 = (uint64_t)v11;
      ++a2[2];
    }
  }
  if ((v8 & 1) == 0 && (*(unsigned char *)(*(void *)(a1 + 8) + 1024) & 8) == 0)
  {
    for (uint64_t j = *(void *)(v7 + 48); j; uint64_t j = *(void *)(j + 48))
    {
      if ((*(unsigned char *)(j + 57) & 0x20) != 0)
      {
        if (v14)
        {
          std::list<OZSimulationBehavior *>::list(v22, (uint64_t)v14 + 224);
          for (uint64_t k = (void *)v22[1]; k != v22; uint64_t k = (void *)k[1])
          {
            long long v16 = (OZSimulationBehavior *)k[2];
            long long v17 = *(void **)(a1 + 8);
            if (v17 != OZSimulationBehavior::getTransformNode(v16) {
              && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v16 + 656))(v16) & 1) == 0
            }
              && *((_DWORD *)v16 + 20) >= *(_DWORD *)(a1 + 368)
              && ((a3 & a4 & 1) != 0
            {
              long long v18 = operator new(0x18uLL);
              v18[1] = a2;
              double v18[2] = v16;
              uint64_t v19 = *a2;
              void *v18 = *a2;
              *(void *)(v19 + 8) = v18;
              *a2 = (uint64_t)v18;
              ++a2[2];
            }
          }
          std::__list_imp<unsigned int>::clear(v22);
        }
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v23);
}

void sub_1B7CA1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZObjectSimulator::getAllVisibleBehaviors(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 640))(*(void *)(a1 + 8));
  char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1008))();
  std::list<OZSimulationBehavior *>::list(&v25, v6 + 224);
  for (uint64_t i = v26; i != &v25; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v9 = (_DWORD *)i[2];
    if ((v7 & 1) == 0 || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 656))(i[2]))
    {
      long long v10 = (OZChannelBase *)(*(uint64_t (**)(_DWORD *))(*(void *)v9 + 312))(v9);
      if (!OZChannelBase::testFlag(v10, 2) && v9[20] >= *(_DWORD *)(a1 + 368))
      {
        switch(a3)
        {
          case 1:
            char v11 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 680))(v9);
            goto LABEL_12;
          case 2:
            char v11 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 688))(v9);
            goto LABEL_12;
          case 3:
            char v11 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 696))(v9);
LABEL_12:
            if (v11) {
              goto LABEL_13;
            }
            continue;
          case 7:
          case 8:
          case 9:
            if (!(*(unsigned int (**)(_DWORD *))(*(void *)v9 + 704))(v9)) {
              continue;
            }
            goto LABEL_13;
          default:
LABEL_13:
            uint64_t v12 = operator new(0x18uLL);
            v12[1] = a2;
            void v12[2] = v9;
            uint64_t v13 = *a2;
            *uint64_t v12 = *a2;
            *(void *)(v13 + 8) = v12;
            *a2 = (uint64_t)v12;
            ++a2[2];
            break;
        }
      }
    }
  }
  if ((v7 & 1) == 0 && (*(unsigned char *)(*(void *)(a1 + 8) + 1024) & 8) == 0)
  {
    uint64_t v14 = *(void *)(v6 + 48);
    if (v14)
    {
      int v15 = a3 - 1;
      do
      {
        if ((*(unsigned char *)(v14 + 57) & 0x20) != 0)
        {
          if (v16)
          {
            std::list<OZSimulationBehavior *>::list(v24, (uint64_t)v16 + 224);
            for (uint64_t j = (void *)v24[1]; j != v24; uint64_t j = (void *)j[1])
            {
              long long v18 = (OZSimulationBehavior *)j[2];
              uint64_t v19 = *(void **)(a1 + 8);
              if (v19 != OZSimulationBehavior::getTransformNode(v18)
                && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v18 + 656))(v18) & 1) == 0
                && *((_DWORD *)v18 + 20) >= *(_DWORD *)(a1 + 368))
              {
                switch(v15)
                {
                  case 0:
                    char v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v18 + 680))(v18);
                    goto LABEL_32;
                  case 1:
                    char v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v18 + 688))(v18);
                    goto LABEL_32;
                  case 2:
                    char v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v18 + 696))(v18);
LABEL_32:
                    if (v20) {
                      goto LABEL_33;
                    }
                    continue;
                  case 6:
                  case 7:
                  case 8:
                    if (!(*(unsigned int (**)(OZSimulationBehavior *))(*(void *)v18 + 704))(v18)) {
                      continue;
                    }
                    goto LABEL_33;
                  default:
LABEL_33:
                    long long v21 = operator new(0x18uLL);
                    v21[1] = a2;
                    void v21[2] = v18;
                    uint64_t v22 = *a2;
                    void *v21 = *a2;
                    *(void *)(v22 + 8) = v21;
                    *a2 = (uint64_t)v21;
                    ++a2[2];
                    break;
                }
              }
            }
            std::__list_imp<unsigned int>::clear(v24);
          }
        }
        uint64_t v14 = *(void *)(v14 + 48);
      }
      while (v14);
    }
  }
  return std::__list_imp<unsigned int>::clear(&v25);
}

void sub_1B7CA1D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::willBake(uint64_t this)
{
  *(unsigned char *)(this + 265) = 1;
  return this;
}

uint64_t OZObjectSimulator::didBake(uint64_t this)
{
  *(unsigned char *)(this + 265) = 0;
  return this;
}

uint64_t OZObjectSimulator::dirty(OZObjectSimulator *this)
{
  int v2 = (PCMutex *)((char *)this + 272);
  PCMutex::lock((PCMutex *)((char *)this + 272));
  for (uint64_t i = *((void *)this + 44);
        (OZObjectSimulator *)i != (OZObjectSimulator *)((char *)this + 344);
        uint64_t i = *(void *)(i + 8))
  {
    **(unsigned char **)(i + 16) = 0;
  }

  return PCMutex::unlock(v2);
}

void *OZObjectSimulator::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  char v7 = v6;
  __n128 v19 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(void *)v7 + 40))(v7);
  uint64_t v16 = (uint64_t)&v16;
  long long v17 = &v16;
  uint64_t v18 = 0;
  OZObjectSimulator::getBehaviors(a1, &v16, 1u, 1);
  int v8 = v17;
  if (v17 != &v16)
  {
    while (1)
    {
      uint64_t v9 = (_OWORD *)v8[2];
      uint64_t v10 = (*(uint64_t (**)(_OWORD *))(*(void *)v9 + 320))(v9);
      if ((*(unsigned int (**)(_OWORD *))(*(void *)v9 + 672))(v9)) {
        break;
      }
      if (v10)
      {
        char v11 = (_OWORD *)(v10 + 16);
        BOOL v12 = OZObjectManipulator::isInObjectList(v10 + 16, (uint64_t)a3);
LABEL_7:
        if (!v12)
        {
          StaticHash = (int *)OZObjectManipulator::getStaticHash(v11, lpsrc, a3);
          PCHash128::operator+=((int *)&v19, StaticHash);
        }
      }
      int v8 = (uint64_t *)v8[1];
      if (v8 == &v16) {
        goto LABEL_10;
      }
    }
    char v11 = v9 + 1;
    BOOL v12 = OZObjectManipulator::isInObjectList((uint64_t)v11, (uint64_t)a3);
    goto LABEL_7;
  }
LABEL_10:
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v19, (int *)Hash);
  PCHashWriteStream::setHash((__n128 *)v7, &v19);
  return std::__list_imp<unsigned int>::clear(&v16);
}

void sub_1B7CA200C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::shouldAccumInitialValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CMTime *a5)
{
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 272))(*(void *)(a1 + 8));
  memset(&v17, 0, sizeof(v17));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v17);
  memset(&v16, 0, sizeof(v16));
  operator*(&v17, &v16, 0.001);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 672))(a2))
  {
    CMTime v19 = *a5;
    CMTime v18 = v16;
    uint64_t v10 = v15;
    char v11 = v15;
LABEL_6:
    double v12 = PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)v11);
    return (*(unsigned int (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, double))(*(void *)a2 + 296))(a2, v10, 0, 1, 1, v12) ^ 1;
  }
  if (a3 && a4)
  {
    CMTime v19 = *a5;
    CMTime v18 = v16;
    uint64_t v10 = v14;
    char v11 = v14;
    goto LABEL_6;
  }
  return a3;
}

void *OZObjectSimulator::getAccumForcesList(uint64_t a1, CMTime *a2, uint64_t *a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1008))(*(void *)(a1 + 8));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 272))();
  memset(&v41, 0, sizeof(v41));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), (__n128 *)&v41);
  memset(&v40, 0, sizeof(v40));
  operator*(&v41, &v40, 0.001);
  uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 640))();
  std::list<OZSimulationBehavior *>::list(&v38, v28 + 224);
  uint64_t v8 = *(void *)(a1 + 8);
  CMTimeEpoch epoch = a2->epoch;
  long long v36 = *(_OWORD *)&a2->value;
  unsigned int v30 = (*(uint64_t (**)(void))(*(void *)(v8 + 16) + 104))();
  uint64_t v9 = *(void *)(a1 + 8);
  CMTime time1 = *a2;
  CMTime time2 = v40;
  double v10 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v35);
  int v29 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, double))(*(void *)(v9 + 16) + 104))(v9 + 16, v35, 0, 1, 1, v10);
  for (uint64_t i = v39; i != &v38; uint64_t i = (uint64_t *)i[1])
  {
    double v12 = (_DWORD *)i[2];
    if ((!v12
    {
      long long v33 = *(_OWORD *)&a2->value;
      CMTimeEpoch v34 = a2->epoch;
      if ((*(unsigned int (**)(_DWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, &v33, 0, 1, 1))
      {
        CMTime time1 = *a2;
        CMTime time2 = *(CMTime *)(a1 + 212);
        if (CMTimeCompare(&time1, &time2) >= 1
          && OZObjectSimulator::shouldAccumInitialValue(a1, (uint64_t)v12, v30, v29, a2))
        {
          uint64_t v13 = operator new(0x20uLL);
          v13[1] = a3;
          CMTime v13[2] = v12;
          *((_DWORD *)v13 + 6) = 1;
          uint64_t v14 = *a3;
          void *v13 = *a3;
          *(void *)(v14 + 8) = v13;
          *a3 = (uint64_t)v13;
          ++a3[2];
        }
        if ((v30 & 1) != 0 || (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 672))(v12))
        {
          int v15 = operator new(0x20uLL);
          v15[1] = a3;
          _OWORD v15[2] = v12;
          *((_DWORD *)v15 + 6) = 2;
          uint64_t v16 = *a3;
          void *v15 = *a3;
          *(void *)(v16 + 8) = v15;
          *a3 = (uint64_t)v15;
          ++a3[2];
        }
      }
    }
  }
  if ((v6 & 1) == 0 && (*(unsigned char *)(*(void *)(a1 + 8) + 1024) & 8) == 0)
  {
    for (uint64_t j = *(void *)(v28 + 48); j; uint64_t j = *(void *)(j + 48))
    {
      if ((*(unsigned char *)(j + 57) & 0x20) != 0)
      {
        if (v18)
        {
          CMTime v19 = (char *)(v18 + 28);
          for (uint64_t k = v18[29]; (char *)k != v19; uint64_t k = *(void *)(k + 8))
          {
            long long v21 = *(OZSimulationBehavior **)(k + 16);
            if (!v21
            {
              uint64_t v22 = *(void **)(a1 + 8);
              if (v22 != OZSimulationBehavior::getTransformNode(v21)
                && ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)v21 + 656))(v21) & 1) == 0)
              {
                long long v31 = *(_OWORD *)&a2->value;
                CMTimeEpoch v32 = a2->epoch;
                if ((*(unsigned int (**)(OZSimulationBehavior *, long long *, void, uint64_t, uint64_t))(*(void *)v21 + 296))(v21, &v31, 0, 1, 1))
                {
                  if (*((_DWORD *)v21 + 20) >= *(_DWORD *)(a1 + 368))
                  {
                    CMTime time1 = *a2;
                    CMTime time2 = *(CMTime *)(a1 + 212);
                    if (CMTimeCompare(&time1, &time2) >= 1
                      && OZObjectSimulator::shouldAccumInitialValue(a1, (uint64_t)v21, v30, v29, a2))
                    {
                      uint64_t v23 = operator new(0x20uLL);
                      v23[1] = a3;
                      v23[2] = v21;
                      *((_DWORD *)v23 + 6) = 1;
                      uint64_t v24 = *a3;
                      void *v23 = *a3;
                      *(void *)(v24 + 8) = v23;
                      *a3 = (uint64_t)v23;
                      ++a3[2];
                    }
                    if ((v30 & 1) != 0
                      || (*(unsigned int (**)(OZSimulationBehavior *))(*(void *)v21 + 672))(v21))
                    {
                      uint64_t v25 = operator new(0x20uLL);
                      v25[1] = a3;
                      _OWORD v25[2] = v21;
                      *((_DWORD *)v25 + 6) = 2;
                      uint64_t v26 = *a3;
                      *uint64_t v25 = *a3;
                      *(void *)(v26 + 8) = v25;
                      *a3 = (uint64_t)v25;
                      ++a3[2];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v38);
}

void sub_1B7CA2834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZObjectSimulator::accumForces(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t v6 = (uint64_t)&v6;
  uint64_t v7 = &v6;
  uint64_t v8 = 0;
  OZObjectSimulator::getAccumForcesList((uint64_t)this, (CMTime *)((char *)a2 + 176), &v6);
  for (uint64_t i = v7; i != &v6; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v3 = *(void *)i[2];
    if (*((_DWORD *)i + 6) == 1) {
      uint64_t v4 = (void (**)(void))(v3 + 640);
    }
    else {
      uint64_t v4 = (void (**)(void))(v3 + 624);
    }
    (*v4)();
  }
  return std::__list_imp<unsigned int>::clear(&v6);
}

void sub_1B7CA2928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
  {
    return v2;
  }
  return v6;
}

uint64_t std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 < *(void *)a3) {
    return 1;
  }
  if (*(void *)a3 < *(void *)a2) {
    return 0;
  }
  CMTime time1 = *(CMTime *)(a2 + 8);
  CMTime v4 = *(CMTime *)(a3 + 8);
  return CMTimeCompare(&time1, &v4) >> 31;
}

uint64_t *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__emplace_unique_key_args<std::pair<OZObjectSimulator *,CMTime>,std::pair<OZObjectSimulator *,CMTime> const&>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__find_equal<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)a1, &v10, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x40uLL);
    long long v8 = a3[1];
    *((_OWORD *)v6 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

void *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__find_equal<std::pair<OZObjectSimulator *,CMTime>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  CMTime v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break; {
        CMTime v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      CMTime v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t PCThreadSpecific<SimRecursionInfo>::destroy(uint64_t result)
{
  if (result)
  {
    std::deque<std::pair<OZObjectSimulator *,CMTime>>::~deque[abi:ne180100]((void *)(result + 8));
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t std::deque<std::pair<OZObjectSimulator *,CMTime>>::~deque[abi:ne180100](void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::deque<std::pair<OZObjectSimulator *,CMTime>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      CMTimeEpoch v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        CMTime v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)CMTime v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    CMTime v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CMTimeEpoch v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      CMTimeEpoch v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CMTime v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CMTime v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CMTime v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  CMTimeValue v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7CA2F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<OZObjectSimulator *,CMTime>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 16 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80) {
    a2 = 1;
  }
  if (v5 < 0x100) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::list<OZSimulationBehavior *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    i[2] = *(void *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<OZSimulationBehavior *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<OZSimulationBehavior *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    long long v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    *long long v8 = 0;
    v8[1] = 0;
    v8[2] = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        long long v8 = operator new(0x18uLL);
        *long long v8 = v12;
        v8[1] = 0;
        v8[2] = *(void *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *uint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B7CA3110(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B7CA3130(_Unwind_Exception *a1)
{
}

void OZLight::OZLight(OZLight *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(void *)this = &unk_1F1151CC0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1152298;
  *((void *)this + 6) = &unk_1F11524F0;
  *((void *)this + 816) = &unk_1F1152548;
  *((void *)this + 819) = 0x4024000000000000;
  *((_OWORD *)this + 410) = xmmword_1B8382810;
  *((_OWORD *)this + 411) = 0u;
  *((void *)this + 824) = 0x3FF0000000000000;
  *((void *)this + 825) = 0;
  *((void *)this + 827) = 0;
  *((void *)this + 826) = 0;
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Model Parameter");
  PCURL::PCURL((PCURL *)&v6, @"Channel Light Model");
  OZChannelEnum::OZChannelEnum((OZLight *)((char *)this + 6624), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZLight *)((char *)this + 6880), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 5u);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Intensity");
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 7888), 1.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Attenuation Distance To");
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 8040), 0.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Attenuation Value");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000), 0.03, &v7, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Spotlight Properties");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8344), &v7, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Spotlight Angle");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 8472), 0.785398163, &v7, (OZChannelFolder *)((char *)this + 8344), 0x6Au, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Spotlight Penumbra Angle");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 8624), 0.0174532925, &v7, (OZChannelFolder *)((char *)this + 8344), 0x6Bu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Folder Lighting Shadow");
  OZFolderLightShadow::OZFolderLightShadow((OZLight *)((char *)this + 8776), &v7, (OZChannelFolder *)((char *)this + 448), 0x6Du, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Light Diameter");
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 10368), 10, &v7, (OZChannelFolder *)((char *)this + 448), 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 10520), 1, &v7, (OZChannelFolder *)((char *)this + 448), 0x6Fu, 2, 0, 0);
  PCString::~PCString(&v7);
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 10672));
  *((unsigned char *)this + 10696) = 1;
  OZLight::initChannels(this);
  OZLight::refreshChannels((uint64_t)this, 2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
}

void sub_1B7CA3638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannel *a11, OZChannelColorNoAlpha *a12, OZChannelEnum *a13, OZChannelBase *a14, PCString a15, PCString a16)
{
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v20);
  OZFolderLightShadow::~OZFolderLightShadow(v19);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v23);
  OZChannelFolder::~OZChannelFolder(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBase::setRangeName(a14, v25);
  OZTransformNode::~OZTransformNode(v16);
  _Unwind_Resume(a1);
}

uint64_t OZLight::initChannels(OZLight *this)
{
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10520), 0x100000000, 0);
  OZChannel::setScale((OZChannel *)((char *)this + 7888), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 7888), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 7888), *(double *)(*((void *)this + 1002) + 32) / 100.0);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 7888), *(double *)(*((void *)this + 1002) + 24) / 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 7888), 4.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 7888), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 7888), 3.40282347e38);
  OZChannel::setMin((OZChannel *)((char *)this + 7888), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 8472), 1.57079633);
  OZChannel::setMin((OZChannel *)((char *)this + 8472), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8472), 1.57079633);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8472), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 8624), 1.57079633);
  OZChannel::setMin((OZChannel *)((char *)this + 8624), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8624), 1.57079633);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8624), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 0x2000), 2.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 0x2000), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 8040), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8040), 1000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8040), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 10368), 1000000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 10368), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 10368), 90.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 10368), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1952), 100.0);
  (*(void (**)(char *, void))(*((void *)this + 152) + 288))((char *)this + 1216, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4440), 32770, 0);
  (*(void (**)(char *))(*((void *)this + 555) + 128))((char *)this + 4440);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 32770, 0);
  (*(void (**)(char *))(*((void *)this + 629) + 128))((char *)this + 5032);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5472), 32770, 0);
  uint64_t v2 = *(uint64_t (**)(char *))(*((void *)this + 684) + 128);

  return v2((char *)this + 5472);
}

OZChannelBase *OZLight::refreshChannels(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 10368), 4194306, 0);
      break;
    case 1:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      goto LABEL_5;
    case 2:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
LABEL_5:
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
      goto LABEL_7;
    case 3:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
LABEL_7:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 10368), 4194306, 0);
      break;
    default:
      break;
  }

  return OZChannelBase::setFlag((OZChannelBase *)(a1 + 8776), 4194306, 0);
}

void OZLight::OZLight(OZLight *this, const OZLight *a2, char a3)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(void *)this = &unk_1F1151CC0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1152298;
  *((void *)this + 6) = &unk_1F11524F0;
  *((void *)this + 816) = &unk_1F1152548;
  *((void *)this + 819) = 0x4024000000000000;
  *((_OWORD *)this + 410) = xmmword_1B8382810;
  *((_OWORD *)this + 411) = *((_OWORD *)a2 + 411);
  *((_OWORD *)this + 41OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_OWORD *)a2 + 412);
  *((_OWORD *)this + 413) = *((_OWORD *)a2 + 413);
  OZChannelEnum::OZChannelEnum((OZLight *)((char *)this + 6624), (const OZLight *)((char *)a2 + 6624), (OZChannelFolder *)((char *)this + 448));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZLight *)((char *)this + 6880), (const OZLight *)((char *)a2 + 6880), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7888), (const OZChannelBase *)((char *)a2 + 7888), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 986) = &unk_1F1100CF0;
  *((void *)this + 988) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8040), (const OZChannelBase *)((char *)a2 + 8040), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 1005) = &unk_1F1100CF0;
  *((void *)this + 1007) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000), (const OZChannelBase *)((char *)a2 + 0x2000), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8344), (const OZChannelFolder *)((char *)a2 + 8344), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 8472), (const OZChannelBase *)((char *)a2 + 8472), (OZChannelFolder *)((char *)this + 8344));
  *((void *)this + 1059) = &unk_1F11010C0;
  *((void *)this + 1061) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8624), (const OZChannelBase *)a2 + 77, (OZChannelFolder *)((char *)this + 8344));
  *((void *)this + 1078) = &unk_1F11010C0;
  *((void *)this + 1080) = &unk_1F1101420;
  OZFolderLightShadow::OZFolderLightShadow((OZLight *)((char *)this + 8776), (const OZLight *)((char *)a2 + 8776), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10368), (const OZChannelBase *)((char *)a2 + 10368), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 1296) = &unk_1F1100CF0;
  *((void *)this + 1298) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10520), (const OZChannelBase *)((char *)a2 + 10520), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 1315) = &unk_1F1100CF0;
  *((void *)this + 1317) = &unk_1F1101050;
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 10672));
  *((unsigned char *)this + 10696) = 1;
}

void sub_1B7CA4114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannel *a11, OZChannelColorNoAlpha *a12, OZChannelEnum *a13, OZChannelBase *a14)
{
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v20);
  OZFolderLightShadow::~OZFolderLightShadow(v15);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelFolder::~OZChannelFolder(v21);
  OZChannelPercent::~OZChannelPercent(a10);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(a11);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBase::setRangeName(a14, v23);
  OZTransformNode::~OZTransformNode(v14);
  _Unwind_Resume(a1);
}

void sub_1B7CA41A8()
{
}

void sub_1B7CA41B0()
{
}

void sub_1B7CA41B8()
{
}

void sub_1B7CA41C0()
{
}

void sub_1B7CA41C8()
{
}

void sub_1B7CA41D0()
{
}

void sub_1B7CA41D8()
{
}

void sub_1B7CA41E0()
{
}

OZLight *OZLight::operator=(OZLight *this, uint64_t a2)
{
  if ((OZLight *)a2 != this)
  {
    OZLight::initChannels(this);
    OZTransformNode::operator=((uint64_t)this, a2);
    *(_OWORD *)((char *)this + 6536) = *(_OWORD *)(a2 + 6536);
    long long v4 = *(_OWORD *)(a2 + 6576);
    *((void *)this + 824) = *(void *)(a2 + 6592);
    *((_OWORD *)this + 411) = v4;
    uint64_t v5 = *(void *)(a2 + 6616);
    *(_OWORD *)((char *)this + 6600) = *(_OWORD *)(a2 + 6600);
    *((void *)this + 827) = v5;
    OZChannelBase::operator=((uint64_t)this + 6624, a2 + 6624);
    OZChannelFolder::operator=((uint64_t)this + 6880);
    OZChannelBase::operator=((uint64_t)this + 7016, a2 + 7016);
    OZChannelBase::operator=((uint64_t)this + 7168, a2 + 7168);
    OZChannelBase::operator=((uint64_t)this + 7320, a2 + 7320);
    OZChannelBase::operator=((uint64_t)this + 7472, a2 + 7472);
    OZChannelBase::operator=((uint64_t)this + 7624, a2 + 7624);
    *((unsigned char *)this + 7880) = *(unsigned char *)(a2 + 7880);
    OZChannelBase::operator=((uint64_t)this + 7888, a2 + 7888);
    OZChannelBase::operator=((uint64_t)this + 8040, a2 + 8040);
    OZChannelBase::operator=((uint64_t)this + 0x2000, a2 + 0x2000);
    OZChannelFolder::operator=((uint64_t)this + 8344);
    OZChannelBase::operator=((uint64_t)this + 8472, a2 + 8472);
    OZChannelBase::operator=((uint64_t)this + 8624, a2 + 8624);
    OZFolderLightShadow::operator=((uint64_t)this + 8776, a2 + 8776);
    OZChannelBase::operator=((uint64_t)this + 10368, a2 + 10368);
    OZChannelBase::operator=((uint64_t)this + 10520, a2 + 10520);
  }
  return this;
}

uint64_t OZTransformNode::operator=(uint64_t a1, uint64_t a2)
{
  OZSceneNode::operator=(a1, a2);
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelPosition::operator=(a1 + 1216, a2 + 1216);
  OZChannelPosition::operator=(a1 + 2104, a2 + 2104);
  OZChannelPosition::operator=(a1 + 2960, a2 + 2960);
  OZChannelFolder::operator=(a1 + 3848);
  OZChannelBase::operator=(a1 + 3984, a2 + 3984);
  OZChannelBase::operator=(a1 + 4136, a2 + 4136);
  OZChannelBase::operator=(a1 + 4288, a2 + 4288);
  OZChannelFolder::operator=(a1 + 4440);
  OZChannelBase::operator=(a1 + 4576, a2 + 4576);
  OZChannelBase::operator=(a1 + 4728, a2 + 4728);
  OZChannelBase::operator=(a1 + 4880, a2 + 4880);
  OZChannelFolder::operator=(a1 + 5032);
  OZChannelBase::operator=(a1 + 5168, a2 + 5168);
  OZChannelBase::operator=(a1 + 5320, a2 + 5320);
  OZChannelPosition::operator=(a1 + 5472, a2 + 5472);
  int v4 = *(_DWORD *)(a2 + 6368);
  *(void *)(a1 + 6360) = *(void *)(a2 + 6360);
  *(_DWORD *)(a1 + 6368) = v4;
  OZChannelBase::operator=(a1 + 6376, a2 + 6376);
  return a1;
}

uint64_t OZFolderLightShadow::operator=(uint64_t a1, uint64_t a2)
{
  OZChannelFolder::operator=(a1);
  OZChannelBase::operator=(a1 + 128, a2 + 128);
  OZChannelBase::operator=(a1 + 280, a2 + 280);
  OZChannelBase::operator=(a1 + 432, a2 + 432);
  OZChannelFolder::operator=(a1 + 584);
  OZChannelBase::operator=(a1 + 720, a2 + 720);
  OZChannelBase::operator=(a1 + 872, a2 + 872);
  OZChannelBase::operator=(a1 + 1024, a2 + 1024);
  OZChannelBase::operator=(a1 + 1176, a2 + 1176);
  OZChannelBase::operator=(a1 + 1328, a2 + 1328);
  *(unsigned char *)(a1 + 1584) = *(unsigned char *)(a2 + 1584);
  return a1;
}

uint64_t OZLight::operator=(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 1440))(a1, v3);
}

uint64_t OZLight::create(OZLight *this, const PCString *a2)
{
  long long v3 = xmmword_1B8380C30;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3);
}

uint64_t OZLight::parseBegin(OZLight *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZTransformNode::parseBegin((OZTransformNode *)this, a2);
  if (v3) {
    OZChannel::setValue((OZChannel *)((char *)this + 10520), MEMORY[0x1E4F1FA48], 0.0, 0);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZLight::parseBegin(OZLight *this, PCSerializerReadStream *a2)
{
  return OZLight::parseBegin((OZLight *)((char *)this - 48), a2);
}

uint64_t OZLight::parseEnd(OZLight *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = OZTransformNode::parseEnd((OZTransformNode *)this, a2);
  if (v4)
  {
    if (*((_DWORD *)a2 + 26) <= 4u)
    {
      if (OZChannel::hasKeypoints((OZChannel *)((char *)this + 7888)))
      {
        OZChannel::getKeyframes((OZChannel *)((char *)this + 7888), 0, &v18);
        uint64_t v5 = v19;
        if (v19 != v18)
        {
          unint64_t v6 = 0;
          unsigned int v7 = 1;
          uint64_t v5 = v18;
          do
          {
            long double v16 = 0.0;
            OZChannel::getKeyframe((OZChannel *)((char *)this + 7888), v5[v6], &v17, &v16);
            double v8 = v16;
            if (v16 >= 1.0) {
              double v9 = v8 + (v8 + -1.0) * exp(-(v16 * v16)) * 2.71828183;
            }
            else {
              double v9 = pow(v16, 2.2);
            }
            long double v16 = v9;
            OZChannel::setKeyframe((OZChannel *)((char *)this + 7888), v18[v6], &v17, v9);
            unint64_t v6 = v7;
            uint64_t v5 = v18;
            ++v7;
          }
          while (v6 < v19 - v18);
        }
        if (v5)
        {
          CMTime v19 = v5;
          operator delete(v5);
        }
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7888), MEMORY[0x1E4F1FA48], 0.0);
        if (v10 >= 1.0) {
          double v11 = v10 + (v10 + -1.0) * exp(-(v10 * v10)) * 2.71828183;
        }
        else {
          double v11 = pow(v10, 2.2);
        }
        OZChannel::setValue((OZChannel *)((char *)this + 7888), MEMORY[0x1E4F1FA48], v11, 1);
      }
    }
    uint64_t v12 = (OZChannel *)((char *)this + 10520);
    if ((int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 10520), MEMORY[0x1E4F1FA48], 0.0) <= 0)
    {
      uint64_t v13 = (OZChannel *)((char *)this + 10368);
      BOOL v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setValue(v13, MEMORY[0x1E4F1FA48], 0.0, 0);
      OZChannel::setValue(v12, v14, 1.0, 0);
    }
  }
  return v4;
}

void sub_1B7CA48B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'OZLight::parseEnd(OZLight *this, PCSerializerReadStream *a2)
{
  return OZLight::parseEnd((OZLight *)((char *)this - 48), a2);
}

uint64_t OZLight::draw(OZLight *this, OZRenderParams *a2)
{
  return 0;
}

CGColorSpace **OZLight::buildLiLight@<X0>(OZLight *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  LiLight::LiLight((LiLight *)a3);
  OZRenderState::OZRenderState(&v68, a2);
  CMTime var0 = (CMTime)v68.var0;
  double v6 = *((double *)this + 822);
  double v7 = *((double *)this + 823);
  double v8 = *((double *)this + 824);
  long long v65 = *(_OWORD *)((char *)this + 6600);
  uint64_t v66 = *((void *)this + 827);
  uint64_t v64 = 0x3FF0000000000000;
  *(double *)&uint64_t v61 = 1.0;
  *(double *)&uint64_t v58 = 1.0;
  double v55 = 1.0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  PCColor::PCColor(&v54);
  v68.var8 = 0;
  (*(void (**)(char *, CMTime *, PCColor *, double))(*((void *)this + 860) + 824))((char *)this + 6880, &var0, &v54, 0.0);
  (*(void (**)(OZLight *, double *, OZRenderState *))(*(void *)this + 1256))(this, &v55, &v68);
  PCMatrix44Tmpl<double>::transform<double>(&v55, (double *)&v65, (double *)&v65);
  double v9 = *(double *)&v56;
  double v10 = *((double *)&v57 + 1);
  double v11 = *(double *)&v58;
  double v44 = *(double *)&v59;
  double v45 = *((double *)&v56 + 1);
  long long v12 = v60;
  double v42 = v55;
  double v43 = *(double *)&v61;
  *(_DWORD *)(a3 + 568) = *((_DWORD *)this + 20);
  (*(void (**)(FxColorDescription *__return_ptr, OZLight *))(*(void *)this + 288))(&v53, this);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v53);
  if ((double *)(a3 + 760) != &v55)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v15 = (_OWORD *)(a3 + 760 + i);
      long long v16 = *(long long *)((char *)&v56 + i + 8);
      _OWORD *v15 = *(_OWORD *)((char *)&v55 + i);
      v15[1] = v16;
    }
  }
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v49, &v54, CGColorSpace);
  PCWorkingColor::operator=(&v47, (__n128 *)&v49);
  double v17 = v8 * v44;
  double v18 = v6 * *(double *)&v12 + v7 * *((double *)&v12 + 1);
  double v19 = v8 * v43;
  double v20 = v6 * v42 + v7 * v9 + v8 * v45;
  double v21 = v6 * v10 + v7 * v11 + v17;
  double v22 = v18 + v19;
  *(__n128 *)(a3 + 608) = v47;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v49.var0.var1[1]);
  *(double *)(a3 + 624) = v20;
  *(double *)(a3 + 63OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v21;
  *(double *)(a3 + 640) = v22;
  memset(v52, 0, sizeof(v52));
  (*(void (**)(OZLight *, void *, OZRenderState *, uint64_t))(*(void *)this + 1320))(this, v52, &v68, 1);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6624), &var0, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10368), &var0, 0.0);
  double v25 = v24 * 0.5;
  if (ValueAsInt == 1)
  {
    double v26 = v25 * 3.14159265 / 180.0;
    if (v25 > 360.0) {
      double v26 = 6.28318531;
    }
    BOOL v27 = v25 < 0.0;
    double v25 = 0.0;
    if (!v27) {
      double v25 = v26;
    }
  }
  *(double *)(a3 + 688) = v25;
  *(_DWORD *)(a3 + 656) = ValueAsInt;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7888), &var0, 0.0);
  *(void *)(a3 + 648) = v28;
  *(void *)(a3 + 680) = v66;
  *(_OWORD *)(a3 + 664) = v65;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8472), &var0, 0.0);
  *(void *)(a3 + 696) = v29;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8624), &var0, 0.0);
  *(void *)(a3 + 704) = v30;
  *(void *)(a3 + 71OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8040), &var0, 0.0);
  *(void *)(a3 + 600) = v31;
  CMTime v51 = var0;
  OZLight::buildAttenuation(this, &v51, (uint64_t)&v49);
  *(_OWORD *)(a3 + 576) = *(_OWORD *)&v49.var0.var0;
  *(double *)(a3 + 59OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v49.var0.var1[1];
  CMTime v50 = var0;
  *(unsigned char *)(a3 + 720) = (*(uint64_t (**)(char *, CMTime *, uint64_t, uint64_t, uint64_t))(*((void *)this + 2)
                                                                                                + 104))((char *)this + 16, &v50, 1, 1, 1);
  long long v32 = (OZLight *)((char *)this + 8776);
  unint64_t v33 = (OZChannel *)OZFolderLightShadow::opacity(v32);
  OZChannel::getValueAsDouble(v33, &var0, 0.0);
  double v35 = v34;
  *(unsigned char *)(a3 + 721) = OZFolderLightShadow::hasShadows((OZChannelBase *)v32, &var0);
  uint64_t v36 = (OZChannel *)OZFolderLightShadow::softness(v32);
  OZChannel::getValueAsDouble(v36, &var0, 0.0);
  *(void *)(a3 + 744) = v37;
  uint64_t v38 = (OZChannel *)OZFolderLightShadow::uniformSoftness(v32);
  *(unsigned char *)(a3 + 75OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = OZChannel::getValueAsInt(v38, &var0, 0.0) != 0;
  PCColor::PCColor(&v49);
  uint64_t v39 = OZFolderLightShadow::color(v32);
  (*(void (**)(uint64_t, CMTime *, PCColor *, double))(*(void *)v39 + 824))(v39, &var0, &v49, 0.0);
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v47, &v49, CGColorSpace);
  float v40 = v35;
  v47.n128_f32[3] = v40;
  PCWorkingColor::operator=(&v46, &v47);
  *(__n128 *)(a3 + 724) = v46;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v48);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v49.var1._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v53._pcColorDesc._colorSpaceRef._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v54.var1._obj);
}

void sub_1B7CA4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CGColorSpace *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,CGColorSpace *a48)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v49 + 16));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a26);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a48);
  LiLight::~LiLight(v48);
  _Unwind_Resume(a1);
}

void OZLight::buildAttenuation(OZLight *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 0x2000), a2, 0.0);
  double v6 = v5 * *((double *)this + 820);
  if (v5 <= 0.2) {
    double v7 = v6 * (v6 * 0.125);
  }
  else {
    double v7 = v6 * (v6 * 0.125) + (v5 + -0.2) * *((double *)this + 821) * 0.5;
  }
  *(void *)a3 = 0x3FF0000000000000;
  *(double *)(a3 + 8) = v6 * 0.5;
  *(double *)(a3 + 16) = v7;
}

uint64_t OZLight::render(OZLight *this, OZRenderParams *a2)
{
  uint64_t v3 = (*(uint64_t (**)(OZLight *))(*(void *)this + 1456))(this);
  uint64_t v4 = *((void *)a2 + 34);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4) & 1) != 0) {
    return 1;
  }
  return v3;
}

int64x2_t OZLight::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result = vdupq_n_s64(0xC049000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4059000000000000uLL);
  return result;
}

int64x2_t non-virtual thunk to'OZLight::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result = vdupq_n_s64(0xC049000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4059000000000000uLL);
  return result;
}

void OZLight::drawGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZLight.cpp");

  pcAbortImpl();
}

uint64_t OZLight::projectPointToObject()
{
  return 0;
}

double OZLight::calcTranslationRelativeToCamera(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6)
{
  uint64_t v57 = 0x3FF0000000000000;
  uint64_t v54 = 0x3FF0000000000000;
  uint64_t v51 = 0x3FF0000000000000;
  uint64_t v48 = 0x3FF0000000000000;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v47 = 0x3FF0000000000000;
  uint64_t v44 = 0x3FF0000000000000;
  uint64_t v41 = 0x3FF0000000000000;
  uint64_t v38 = 0x3FF0000000000000;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  (*(void (**)(void))(*a1 + 1256))();
  long long v12 = (const void *)a1[120];
  if (v12)
  {
    if (v13) {
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v13 + 1264))(v13, &v38, a5);
    }
  }
  float64x2_t v36 = 0uLL;
  double v37 = 0.0;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t, uint64_t, void))(*a1 + 1384))(&v33, a1, a2, a4, a5, 0);
  memset(v29, 0, 24);
  PCCalcRaySphereIntersection<double>((double *)&v33, (double *)&v34 + 1, v29, v36.f64, 20.0);
  if ((v14 & 1) == 0)
  {
    double v15 = -(*((double *)&v33 + 1) * *(double *)&v35)
        - *(double *)&v33 * *((double *)&v34 + 1)
        - *(double *)&v34 * *((double *)&v35 + 1);
    v36.f64[0] = *(double *)&v33 + *((double *)&v34 + 1) * v15;
    v36.f64[1] = *((double *)&v33 + 1) + *(double *)&v35 * v15;
    double v37 = *(double *)&v34 + *((double *)&v35 + 1) * v15;
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)&v48, v36.f64, v36.f64);
  double v30 = 0.0;
  double v31 = 0.0;
  double v32 = 1.0;
  (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a4 + 24))(v29, a4);
  PCMatrix44Tmpl<double>::transform_row<double>(v29, &v30, &v30);
  double v16 = v30;
  double v17 = v31;
  double v18 = v32;
  double v19 = sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
  {
    double v16 = v30 / v19;
    double v17 = v31 / v19;
    double v30 = v30 / v19;
    double v31 = v31 / v19;
    double v18 = v32 / v19;
    double v32 = v32 / v19;
  }
  float64x2_t v27 = 0uLL;
  double v28 = 0.0;
  float64x2_t v22 = v36;
  double v23 = v37;
  double v24 = v16;
  double v25 = v17;
  double v26 = v18;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a4 + 80))(v21, a4, a3);
  long long v33 = v21[0];
  long long v34 = v21[1];
  long long v35 = v21[2];
  PCIntersectRayWithPlane((double *)&v33, v22.f64, v27.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v36.f64, v36.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v27.f64, v27.f64);
  double result = v28 - v37;
  *a6 = vsubq_f64(v27, v36);
  a6[1].f64[0] = result;
  return result;
}

void OZLight::getIconName(PCURL *a1@<X8>)
{
}

void OZLight::getIconNameBW(PCURL *a1@<X8>)
{
}

uint64_t OZLight::getIconID(OZLight *this)
{
  return 22;
}

CGColorSpace **OZLight::setLightWorkingColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  uint64_t v4 = (char *)(this + 1334);
  double result = PCCFRef<CGColorSpace *>::operator=(this + 1334, &a2->_pcColorDesc._colorSpaceRef._obj);
  double v6 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 267OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[1335] = v6;
  v4[24] = a2->_isPremultiplied;
  return result;
}

CGColorSpace *OZLight::getWorkingColorDescription@<X0>(OZLight *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (CGColorSpace **)((char *)this + 10672);
  if (FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 10672)))
  {
    double result = *v4;
    *(void *)a2 = *v4;
    if (result) {
      double result = PCCFRefTraits<CGColorSpace *>::retain(result);
    }
    *(void *)(a2 + 8) = *((void *)this + 1335);
    *(_DWORD *)(a2 + 16) = *((_DWORD *)this + 2672);
    *(unsigned char *)(a2 + 24) = *((unsigned char *)this + 10696);
  }
  else
  {
    return (CGColorSpace *)OZSceneNode::getWorkingColorDescription(this, a2);
  }
  return result;
}

CGColorSpace *non-virtual thunk to'OZLight::getWorkingColorDescription@<X0>(OZLight *this@<X0>, uint64_t a2@<X8>)
{
  return OZLight::getWorkingColorDescription((OZLight *)((char *)this - 6528), a2);
}

uint64_t OZLight::getLocalVolume(uint64_t a1, _OWORD *a2, CMTime *a3)
{
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 6624), a3, 0.0);
  switch((int)result)
  {
    case 1:
      *a2 = xmmword_1B8382840;
      a2[1] = xmmword_1B8382840;
      long long v5 = xmmword_1B8382850;
      goto LABEL_6;
    case 2:
      long long v5 = xmmword_1B8382840;
      *a2 = xmmword_1B8382840;
      a2[1] = xmmword_1B8382840;
      goto LABEL_6;
    case 3:
      *a2 = xmmword_1B8382820;
      a2[1] = xmmword_1B8382820;
      long long v5 = xmmword_1B8382830;
LABEL_6:
      a2[2] = v5;
      break;
    default:
      a2[1] = 0u;
      a2[2] = 0u;
      *a2 = 0u;
      break;
  }
  return result;
}

uint64_t OZLight::getSolo(OZLight *this)
{
  return 0;
}

void OZLight::~OZLight(OZLight *this)
{
  OZLight::~OZLight(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZChannelBase *v2;
  const PCString *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1151CC0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1152298;
  *((void *)this + 6) = &unk_1F11524F0;
  uint64_t v2 = (OZChannelBase *)((char *)this + 6528);
  *((void *)this + 816) = &unk_1F1152548;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 1334);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10368));
  OZFolderLightShadow::~OZFolderLightShadow((OZLight *)((char *)this + 8776));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8624));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8472));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 8344));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8040));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7888));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZLight *)((char *)this + 6880));
  OZChannelEnum::~OZChannelEnum((OZLight *)((char *)this + 6624));
  OZChannelBase::setRangeName(v2, v3);

  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

void non-virtual thunk to'OZLight::~OZLight(OZLight *this)
{
}

{
  uint64_t vars8;

  OZLight::~OZLight((OZLight *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZLight::~OZLight((OZLight *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZLight::~OZLight((OZLight *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

void OZLight::operator=(void *a1)
{
  __cxa_get_exception_ptr(a1);
  v2.__vftable = (std::exception_vtbl *)(MEMORY[0x1E4FBA500] + 16);
  __cxa_begin_catch(a1);
  std::exception::~exception(&v2);
  __cxa_end_catch();
}

void OZSimulationBehavior::OZSimulationBehavior(OZSimulationBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F1152658;
  CMTime v4[2] = &unk_1F1152938;
  v4[6] = &unk_1F1152B90;
}

void OZSimulationBehavior::OZSimulationBehavior(OZSimulationBehavior *this, OZSimulationBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  *uint64_t v3 = &unk_1F1152658;
  int v3[2] = &unk_1F1152938;
  v3[6] = &unk_1F1152B90;
}

void non-virtual thunk to'OZSimulationBehavior::~OZSimulationBehavior(OZSimulationBehavior *this)
{
}

{
  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

void OZSimulationBehavior::~OZSimulationBehavior(OZSimulationBehavior *this)
{
  OZBehavior::~OZBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSimulationBehavior::didAddToNode(uint64_t this, OZSceneNode *a2)
{
  *(void *)(this + 328) = a2;
  return this;
}

unint64_t OZSimulationBehavior::canAddToSceneNode(OZSimulationBehavior *this, OZSceneNode *a2)
{
  if (OZBehavior::canAddToSceneNode(this, a2)) {
    return 1;
  }
  unint64_t v4 = *((void *)a2 + 1);
  long long v5 = xmmword_1B8381350;
  return OZFactory::isKindOfClass(v4, (int32x4_t *)&v5);
}

BOOL OZSimulationBehavior::canBake(OZSimulationBehavior *this)
{
  BOOL result = 1;
  if (((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)this + 656))(this) & 1) == 0)
  {
    if ((*(uint64_t (**)(OZSimulationBehavior *))(*(void *)this + 328))(this))
    {
      uint64_t v2 = (*(uint64_t (**)(OZSimulationBehavior *))(*(void *)this + 328))(this);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 1008))(v2)) {
        return 0;
      }
    }
  }
  return result;
}

__n128 OZSimulationBehavior::accumForces(OZSimulationBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  uint64_t v3 = *(long long **)a2;
  if (*(void *)a2 != *((void *)a2 + 1))
  {
    long long v5 = &v26;
    do
    {
      uint64_t v26 = 0x3FF0000000000000;
      uint64_t v28 = 0;
      long long v27 = 0uLL;
      long long v6 = *v3;
      uint64_t v25 = *((void *)v3 + 2);
      long long v24 = v6;
      double v7 = v5;
      if ((uint64_t *)((char *)v3 + 24) != v5)
      {
        uint64_t v26 = *((void *)v3 + 3);
        long long v8 = v3[2];
        uint64_t v28 = *((void *)v3 + 6);
        long long v27 = v8;
      }
      long long v9 = *(long long *)((char *)v3 + 56);
      uint64_t v30 = *((void *)v3 + 9);
      long long v29 = v9;
      long long v10 = v3[5];
      uint64_t v32 = *((void *)v3 + 12);
      long long v31 = v10;
      long long v11 = *(long long *)((char *)v3 + 104);
      uint64_t v34 = *((void *)v3 + 15);
      long long v33 = v11;
      long long v12 = v3[8];
      uint64_t v36 = *((void *)v3 + 18);
      long long v35 = v12;
      __n128 v13 = *(__n128 *)((char *)v3 + 152);
      uint64_t v38 = *((void *)v3 + 21);
      __n128 v37 = v13;
      long long v39 = *(_OWORD *)((char *)a2 + 24);
      uint64_t v40 = *((void *)a2 + 5);
      uint64_t v14 = *((void *)v3 + 24);
      long long v41 = v3[11];
      uint64_t v42 = v14;
      (*(void (**)(OZSimulationBehavior *, long long *, OZTransformNode *))(*(void *)this + 624))(this, &v24, a3);
      long long v15 = v24;
      *((void *)v3 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v25;
      *uint64_t v3 = v15;
      long long v5 = v7;
      if ((uint64_t *)((char *)v3 + 24) != v7)
      {
        *((void *)v3 + 3) = v26;
        long long v16 = v27;
        *((void *)v3 + 6) = v28;
        int v3[2] = v16;
      }
      long long v17 = v29;
      *((void *)v3 + 9) = v30;
      *(long long *)((char *)v3 + 56) = v17;
      long long v18 = v31;
      *((void *)v3 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v32;
      v3[5] = v18;
      long long v19 = v33;
      *((void *)v3 + 15) = v34;
      *(long long *)((char *)v3 + 104) = v19;
      long long v20 = v35;
      *((void *)v3 + 18) = v36;
      v3[8] = v20;
      __n128 result = v37;
      *((void *)v3 + 21) = v38;
      *(long long *)((char *)v3 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = (__int128)result;
      uint64_t v3 = (long long *)((char *)v3 + 248);
    }
    while (v3 != *((long long **)a2 + 1));
  }
  return result;
}

uint64_t OZSimulationBehavior::accumInitialValues(uint64_t this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  uint64_t v24 = this;
  uint64_t v4 = *((void *)a2 + 1);
  BOOL v5 = v4 == *(void *)a2 || a3 < 1;
  if (!v5)
  {
    long long v6 = &v28;
    double v7 = (long long *)(v4 - 248);
    int v8 = 1;
    do
    {
      uint64_t v28 = 0x3FF0000000000000;
      uint64_t v30 = 0;
      long long v29 = 0uLL;
      uint64_t v27 = *((void *)v7 + 2);
      long long v26 = *v7;
      long long v9 = v6;
      if ((uint64_t *)((char *)v7 + 24) != v6)
      {
        uint64_t v28 = *((void *)v7 + 3);
        long long v10 = v7[2];
        uint64_t v30 = *((void *)v7 + 6);
        long long v29 = v10;
      }
      long long v11 = *(long long *)((char *)v7 + 56);
      uint64_t v32 = *((void *)v7 + 9);
      long long v31 = v11;
      long long v12 = v7[5];
      uint64_t v34 = *((void *)v7 + 12);
      long long v33 = v12;
      long long v13 = *(long long *)((char *)v7 + 104);
      uint64_t v36 = *((void *)v7 + 15);
      long long v35 = v13;
      long long v14 = v7[8];
      uint64_t v38 = *((void *)v7 + 18);
      long long v37 = v14;
      long long v15 = *(long long *)((char *)v7 + 152);
      uint64_t v40 = *((void *)v7 + 21);
      long long v39 = v15;
      long long v41 = *(_OWORD *)((char *)a2 + 24);
      uint64_t v42 = *((void *)a2 + 5);
      uint64_t v16 = *((void *)v7 + 24);
      long long v43 = v7[11];
      uint64_t v44 = v16;
      this = (*(uint64_t (**)(void))(*(void *)v24 + 640))();
      *((void *)v7 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v27;
      *double v7 = v26;
      long long v6 = v9;
      if ((uint64_t *)((char *)v7 + 24) != v9)
      {
        *((void *)v7 + 3) = v28;
        long long v17 = v29;
        *((void *)v7 + 6) = v30;
        CMTime v7[2] = v17;
      }
      long long v18 = v31;
      *((void *)v7 + 9) = v32;
      *(long long *)((char *)v7 + 56) = v18;
      long long v19 = v33;
      *((void *)v7 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v34;
      v7[5] = v19;
      long long v20 = v35;
      *((void *)v7 + 15) = v36;
      *(long long *)((char *)v7 + 104) = v20;
      long long v21 = v37;
      *((void *)v7 + 18) = v38;
      v7[8] = v21;
      long long v22 = v39;
      *((void *)v7 + 21) = v40;
      *(long long *)((char *)v7 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
      if (v7 == *(long long **)a2) {
        break;
      }
      double v7 = (long long *)((char *)v7 - 248);
      BOOL v5 = v8++ < a3;
    }
    while (v5);
  }
  return this;
}

void *OZSimulationBehavior::getTransformNode(OZSimulationBehavior *this)
{
  __n128 result = (void *)(*(uint64_t (**)(OZSimulationBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
  }
  return result;
}

uint64_t OZChannelMaterialMapScale_Factory::getInstance(OZChannelMaterialMapScale_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelMaterialMapScale_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelMaterialMapScale_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialMapScale_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialMapScale_Factory::_instance;
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  uint64_t Instance = (OZFactory *)OZChannelMaterialMapScale_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, a2, a3, Instance, a4, a5, a6, a7, 2, 0, 0);
  *(void *)this = &unk_1F1152C00;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1152F58;
  PCURL::PCURL((PCURL *)&v15, @"Material Map Scale Scale With Font Size");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), 1, &v15, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Material Map Scale Basis Font Size");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialMapScale *)((char *)this + 592), 72.0, &v15, (OZChannelFolder *)this, 0xBu, 2, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Material Map Scale Basis Scale");
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), 1.0, 1.0, &v15, (OZChannelFolder *)this, 0xCu, 2u, 2u, 0, 0);
  PCString::~PCString(&v15);
}

void sub_1B7CA63DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *BOOL v5 = &unk_1F1152C00;
  CMTime v5[2] = &unk_1F1152F58;
  PCURL::PCURL((PCURL *)&v6, @"Material Map Scale Scale With Font Size");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), 1, &v6, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Material Map Scale Basis Font Size");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialMapScale *)((char *)this + 592), 72.0, &v6, (OZChannelFolder *)this, 0xBu, 2, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Material Map Scale Basis Scale");
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), 1.0, 1.0, &v6, (OZChannelFolder *)this, 0xCu, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
}

void sub_1B7CA65AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, const OZChannelMaterialMapScale *a2, OZChannelFolder *a3)
{
  OZChannelScale::OZChannelScale(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1152C00;
  *(void *)(v5 + 16) = &unk_1F1152F58;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((void *)this + 74) = &unk_1F1100CF0;
  *((void *)this + 76) = &unk_1F1101050;
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), (const OZChannelMaterialMapScale *)((char *)a2 + 744), (OZChannelFolder *)this);
}

void sub_1B7CA66F4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::clone(OZChannelMaterialMapScale *this)
{
}

void sub_1B7CA6778(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::copy(OZChannelMaterialMapScale *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZChannel2D::copy(this, a2, a3);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);

  OZChannel2D::copy((OZChannelMaterialMapScale *)((char *)this + 744), (const OZChannelBase *)((char *)v4 + 744), a3);
}

uint64_t OZChannelMaterialMapScale::setBasisScale(OZChannelMaterialMapScale *this, double a2, double a3)
{
  uint64_t v5 = (OZChannelMaterialMapScale *)((char *)this + 744);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 744), 0);
  PCString v6 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel2D::setValue(v5, v6, a2, a3);
}

void non-virtual thunk to'OZChannelMaterialMapScale::~OZChannelMaterialMapScale(OZChannelMaterialMapScale *this)
{
}

{
  uint64_t vars8;

  OZChannelMaterialMapScale::~OZChannelMaterialMapScale((OZChannelMaterialMapScale *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZChannelMaterialMapScale_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CA6984(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale_Factory::OZChannelMaterialMapScale_Factory(OZChannelMaterialMapScale_Factory *this)
{
  long long v3 = xmmword_1B8378B00;
  long long v4 = xmmword_1B8382890;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1152FC8;
  *((void *)this + 16) = &unk_1F1153098;
}

void sub_1B7CA6A54(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale_Factory::create(OZChannelMaterialMapScale_Factory *this, const PCString *a2)
{
}

void sub_1B7CA6AC8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale_Factory::createCopy(OZChannelMaterialMapScale_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CA6B80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale_Factory::createChannelCopy(OZChannelMaterialMapScale_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CA6C38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZRenderManager::~OZRenderManager(OZRenderManager *this, const PCString *a2)
{
  long long v3 = (OZChannelBase *)*((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = OZChannelBase::setRangeName(v3, a2);
    MEMORY[0x1BA9BFBA0](v4, 0xC400A2AC0F1);
  }
  *((void *)this + 1) = 0;
}

void createPlaceHolderBitmap(int a1, int a2, double a3, double a4, CGColorSpace *a5)
{
}

void sub_1B7CA6FF4(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFootage::openByReplacingSubPath(PCString *a1, PCString *this, PCString *a3, uint64_t a4)
{
  int v8 = PCString::find(this, a3);
  if (v8 != -1)
  {
    int v9 = v8;
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      CFURLRef v11 = CFBundleCopyBundleURL(MainBundle);
      CFStringRef v12 = CFURLCopyPath(v11);
      CFStringRef v13 = CFURLCreateStringByReplacingPercentEscapes(0, v12, &stru_1F119C770);
      unsigned int v14 = PCString::size(a3) + v9;
      PCURL::PCURL((PCURL *)&v16, v13);
      PCString::replace(this, 0, v14, &v16);
      PCString::~PCString(&v16);
      PCURL::PCURL((PCURL *)&v16, this, 0);
      a4 = OZFootage::openURL(a1, (const __CFURL **)&v16, 0, 0);
      CFRelease(v11);
      CFRelease(v12);
      CFRelease(v13);
      PCURL::~PCURL((PCURL *)&v16);
    }
  }
  return a4;
}

void sub_1B7CA7158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZFootage::openURL(PCString *this, const __CFURL **a2, int a3, int a4)
{
  uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance((PMMediaManager *)this);
  CFStringRef v13 = 0;
  uint64_t v9 = PMMediaManager::open(Instance, a2, &v13, 0);
  if (!v9) {
    OZFootage::setClip((OZFootage *)this, v13, a3, a4, 1);
  }
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, v9 != 0);
  if (v13) {
    PMClip::getAsFileSystemString((const PCString *)v13, &v12);
  }
  else {
    PCURL::getAsFileSystemString(a2, &v12);
  }
  PCString::set(this + 196, &v12);
  long long v10 = (_WORD *)((char *)&this[1039].var0 + 5);
  PCString::~PCString(&v12);
  if (v9 == 2)
  {
    *long long v10 = 257;
  }
  else if (v9 == 1)
  {
    *(unsigned char *)long long v10 = 1;
  }
  return v9;
}

void sub_1B7CA7270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void OZFootage::getCacheHashKey(OZFootage *this, PMClip *a2, const CMTime *a3, const CMTime *a4, const PMFrameRequest *a5, const OZRenderParams *a6, const PMLayerDescription *a7)
{
  uint64_t v7 = MEMORY[0x1F4188790](this);
  uint64_t v9 = v8;
  CFURLRef v11 = v10;
  uint64_t v13 = v12;
  PCString v15 = v14;
  uint64_t v17 = v16;
  long long v18 = (const PCString **)v7;
  long long v20 = v19;
  v45[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v45);
  if (v18[1009] && (((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    PMClip::getAsFileSystemString(v18[1009], (PCString *)&v37);
    PCHashWriteStream::writeValue(v45, (PCString *)&v37);
    PCString::~PCString((PCString *)&v37);
  }
  CMTime __src = *v15;
  memset(&v42, 0, sizeof(v42));
  OZFootage::getFrameDuration((OZFootage *)v18, &v42);
  if (*(_DWORD *)(v13 + 108))
  {
    operator*(&__src, 2, &v39);
    CMTime v37 = v39;
    CMTime v44 = v42;
    PC_CMTimeFloorToSampleDuration(&v37, &v44, (uint64_t)&v40);
    operator*(&v40, &v41, 0.5);
  }
  else
  {
    CMTime v37 = __src;
    CMTime v44 = v42;
    PC_CMTimeFloorToSampleDuration(&v37, &v44, (uint64_t)&v41);
  }
  CMTime __src = v41;
  PCHashWriteStream::writeValue(v45, *((_DWORD *)v18 + 384));
  PCHashWriteStream::writeValue(v45, &__src);
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 92));
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 96));
  int AlphaType = PMFrameRequest::getAlphaType((PMFrameRequest *)v13);
  PCHashWriteStream::writeValue(v45, AlphaType);
  char AlphaInvert = PMFrameRequest::getAlphaInvert((PMFrameRequest *)v13);
  PCHashWriteStream::writeValue(v45, AlphaInvert);
  PCHashWriteStream::writeValue(v45, *(unsigned char *)(v13 + 104));
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 108));
  PCHashWriteStream::writeValue(v45, *(double *)(v13 + 136));
  if ((((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    double v23 = v18[1009];
    if (v23)
    {
      if (LOBYTE(v23[51].var0))
      {
        uint64_t v24 = 0;
        uint64_t v25 = v13 + 16;
        do
        {
          for (uint64_t i = 0; i != 24; i += 8)
            PCHashWriteStream::writeValue(v45, *(double *)(v25 + i));
          ++v24;
          v25 += 24;
        }
        while (v24 != 3);
      }
    }
  }
  OZRenderParams::getResolution(v11, (__n128 *)&v37);
  double v27 = *(double *)&v37.timescale;
  PCHashWriteStream::writeValue(v45, *(double *)&v37.value);
  PCHashWriteStream::writeValue(v45, v27);
  if ((((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    uint64_t v28 = v18[1009];
    if (v28)
    {
      if (LOBYTE(v28[51].var0))
      {
        PCHashWriteStream::writeValue(v45, *(_DWORD *)v13);
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 4));
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 8));
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 12));
      }
    }
  }
  CMTime v38 = *(CMTime *)(v18 + 29);
  CMTime v44 = *(CMTime *)(v18 + 26);
  PCHashWriteStream::writeValue(v45, &v44);
  CMTime v44 = v38;
  PCHashWriteStream::writeValue(v45, &v44);
  char v29 = ((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18);
  PCHashWriteStream::writeValue(v45, v29);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 765), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v30);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 784), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v31);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 822), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v32);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 803), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v33);
  uint64_t v34 = v18[1009];
  BOOL v35 = LODWORD(v34[36].var0) <= 0x1000 && HIDWORD(v34[36].var0) <= 0x1000;
  if (*(unsigned char *)(v17 + 451)) {
    char v36 = PCPixelFormat::isFloat(*(_DWORD *)(v9 + 20)) && v35;
  }
  else {
    char v36 = 0;
  }
  PCHashWriteStream::writeValue(v45, v36);
  PCHashWriteStream::close(v45);
  _OWORD *v20 = *(_OWORD *)PCHashWriteStream::getHash(v45)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v45);
}

void sub_1B7CA7744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void OZFootage::getFrameDuration(OZFootage *this@<X0>, CMTime *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0
    || (uint64_t v5 = *((void *)this + 1009)) == 0)
  {
    CMTimeMake(a2, 1, 30);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 320);
    a2->CMTimeEpoch epoch = *(void *)(v5 + 336);
    *(_OWORD *)&a2->CMTimeValue value = v6;
  }
  PCSharedMutex::unlock_shared(v4);
}

void sub_1B7CA7840(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

BOOL OZFootage::isResolutionIndependent(OZFootage *this)
{
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1009);
  return v2 && *(unsigned char *)(v2 + 408) != 0;
}

void OZFootage::OZFootage(OZFootage *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(void *)this = &unk_1F11530F0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1153780;
  *((void *)this + 6) = &unk_1F11539D8;
  *((void *)this + 197) = &unk_1F1153A30;
  PCURL::PCURL((PCURL *)v63, @"Channel Alpha Type");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), v63, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v6, @"Channel Alpha Type Enum");
  PCURL::PCURL((PCURL *)&v65, @"Channel Alpha Type");
  uint64_t v57 = (OZChannelBase *)((char *)this + 1728);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 1728), v63, &v65, (OZChannelFolder *)((char *)this + 1600), 0x65u, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v7, @"Channel Alpha Color");
  uint64_t v61 = (OZChannelFolder *)((char *)this + 1984);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984), v63, (OZChannelFolder *)((char *)this + 1600), 0x66u, 0, 5u);
  PCString::~PCString(v63);
  PCURL::PCURL(v8, @"Channel Invert Alpha");
  long long v55 = (OZChannelBase *)((char *)this + 2992);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2992), v63, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v9, @"Channel Pixel Aspect Ratio");
  long long v62 = (OZChannel *)((char *)this + 3144);
  OZChannelAspectRatioFootage::OZChannelAspectRatioFootage((OZChannelAspectRatioFootage *)((char *)this + 3144), 1.0, v63, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v10, @"Channel Field Dominance Enum");
  PCURL::PCURL((PCURL *)&v65, @"Channel Field Dominance");
  uint64_t v54 = (OZChannelBase *)((char *)this + 3296);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3296), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v11, @"Channel ThreeTwo Pulldown Enum");
  PCURL::PCURL((PCURL *)&v65, @"Channel ThreeTwo Pulldown");
  long long v60 = (OZChannelBase *)((char *)this + 3552);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3552), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x6Au, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v12, @"Channel Frame Rate");
  long long v52 = (OZChannelBase *)((char *)this + 3808);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 3808), v63, (OZChannelFolder *)((char *)this + 448), 0x6Bu, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v13, @"Channel End Condition Enum");
  PCURL::PCURL((PCURL *)&v65, @"Channel End Condition Label");
  long long v59 = (OZChannelBase *)((char *)this + 3960);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3960), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v14, @"Channel Reverse");
  uint64_t v58 = (OZChannelBase *)((char *)this + 4216);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4216), v63, (OZChannelFolder *)((char *)this + 448), 0x6Fu, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v15, @"Channel PDF Fixed Resolution");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4368), 1, v63, (OZChannelFolder *)((char *)this + 448), 0x71u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v16, @"Channel PDF Width");
  uint64_t Instance = (OZChannelInfo *)OZFootage::OZFootage_fixedWidthInfo::getInstance(v17);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4520), v63, (OZChannelFolder *)((char *)this + 448), 0x72u, 0, 0, Instance);
  PCString::~PCString(v63);
  PCURL::PCURL(v19, @"Channel PDF Height");
  long long v21 = (OZChannelInfo *)OZFootage::OZFootage_fixedHeightInfo::getInstance(v20);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4672), v63, (OZChannelFolder *)((char *)this + 448), 0x73u, 0, 0, v21);
  PCString::~PCString(v63);
  PCURL::PCURL(v22, @"Channel PDF Enable BG Color");
  long long v53 = (OZChannelBase *)((char *)this + 4824);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4824), v63, (OZChannelFolder *)((char *)this + 448), 0x74u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v23, @"Channel PDF BG Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976), 1.0, 1.0, 1.0, v63, (OZChannelFolder *)((char *)this + 448), 0x75u, 0, 5u);
  PCString::~PCString(v63);
  PCURL::PCURL(v24, @"Channel Crop");
  long long v56 = (OZChannelBase *)((char *)this + 5984);
  OZChannelCrop::OZChannelCrop((OZFootage *)((char *)this + 5984), v63, (OZChannelFolder *)((char *)this + 448), 0x70u, 0, 4u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v25, @"Channel OpenEXR");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6728), v63, (OZChannelFolder *)((char *)this + 448), 0x77u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v26, @"Channel EXR Exposure");
  uint64_t v28 = (OZChannelInfo *)OZFootage::OZFootage_exposureInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 6856), v63, (OZChannelFolder *)((char *)this + 6728), 0x78u, 0, 0, v28);
  PCString::~PCString(v63);
  PCURL::PCURL(v29, @"Channel EXR Defog");
  double v31 = (OZChannelInfo *)OZFootage::OZFootage_defogInfo::getInstance(v30);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7008), v63, (OZChannelFolder *)((char *)this + 6728), 0x79u, 0, 0, v31);
  PCString::~PCString(v63);
  PCURL::PCURL(v32, @"Channel EXR KneeLow");
  uint64_t v34 = (OZChannelInfo *)OZFootage::OZFootage_kneeLowInfo::getInstance(v33);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7160), v63, (OZChannelFolder *)((char *)this + 6728), 0x7Au, 0, 0, v34);
  PCString::~PCString(v63);
  PCURL::PCURL(v35, @"Channel EXR KneeHigh");
  CMTime v37 = (OZChannelInfo *)OZFootage::OZFootage_kneeHighInfo::getInstance(v36);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7312), 5.0, v63, (OZChannelFolder *)((char *)this + 6728), 0x7Bu, 0, 0, v37);
  PCString::~PCString(v63);
  PCURL::PCURL(v38, @"Channel EXR ToneMap");
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7464), 0.0, v63, (OZChannelFolder *)((char *)this + 448), 0x7Du, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v39, @"Channel Gamma");
  OZChannelGammaFootage::OZChannelGammaFootage((OZChannelGammaFootage *)((char *)this + 7616), v63, (OZChannelFolder *)((char *)this + 448), 0x7Cu, 0, 0, 0);
  PCString::~PCString(v63);
  PCString::PCString(v40, "Missing Is Still");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7768), v63, (OZChannelFolder *)((char *)this + 448), 0x80u, 0, 0, 0);
  PCString::~PCString(v63);
  PCString::PCString(v41, "Did Check Missing API");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7920), 0, v63, (OZChannelFolder *)((char *)this + 448), 0x81u, 2u, 0, 0);
  PCString::~PCString(v63);
  *((void *)this + 1009) = 0;
  PCSharedMutex::PCSharedMutex((OZFootage *)((char *)this + 8080));
  PCMutex::PCMutex((PCMutex *)((char *)this + 8184));
  *((unsigned char *)this + 8280) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1036);
  *((void *)this + 1037) = 0x10000000100;
  *(_OWORD *)((char *)this + 8328) = 0u;
  *((unsigned char *)this + 8360) = 0;
  *((_OWORD *)this + 519) = 0u;
  *((unsigned char *)this + 8320) = 0;
  v63[0].CMTime var0 = 0;
  PGMetalTexture::PGMetalTexture((OZFootage *)((char *)this + 8368), (uint64_t *)v63);
  if (v63[0].var0) {
    (*((void (**)(__CFString *))v63[0].var0->isa + 3))(v63[0].var0);
  }
  *((void *)this + 1056) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 8456) = 0u;
  *((_OWORD *)this + 531) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v51 = _Q0;
  *((_OWORD *)this + 53OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = _Q0;
  OZChannelBase::resetFlag(v60, 16, 0);
  OZChannelBase::saveStateAsDefault(v60);
  OZChannelBase::resetFlag(v56, 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v56);
  OZChannelBase::setFlag(v59, 10, 0);
  OZChannelBase::saveStateAsDefault(v59);
  OZChannelBase::setFlag(v58, 10, 0);
  OZChannelBase::saveStateAsDefault(v58);
  OZChannelBase::resetFlag((OZChannelBase *)this + 39, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 39);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4520), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4520));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4672), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4672));
  OZChannelBase::setFlag((OZChannelBase *)this + 39, 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 39);
  OZChannel::setMax((OZChannel *)((char *)this + 4520), 8192.0);
  OZChannel::setMax((OZChannel *)((char *)this + 4672), 8192.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 4520), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 4672), 0);
  OZChannelBase::resetFlag(v53, 16, 0);
  OZChannelBase::saveStateAsDefault(v53);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4976), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 4976));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 4976), 0, 0);
  (*(void (**)(char *, void, void))(*((void *)this + 639) + 104))((char *)this + 5112, 0, 0);
  (*(void (**)(char *, void, void))(*((void *)this + 658) + 104))((char *)this + 5264, 0, 0);
  (*(void (**)(char *, void, void))(*((void *)this + 677) + 104))((char *)this + 5416, 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 4976), 0, 0);
  OZChannelFolder::setKeyframable(v61, 0, 0);
  OZChannel::setKeyframable(v62, 0);
  OZChannelBase::setFlag((OZChannelBase *)v62, 0x100000000, 0);
  OZChannelBase::resetFlag(v57, 16, 0);
  OZChannelBase::saveStateAsDefault(v57);
  OZChannelBase::resetFlag((OZChannelBase *)v61, 16, 0);
  OZChannelFolder::saveStateAsDefault(v61);
  OZChannelBase::resetFlag(v55, 16, 0);
  OZChannelBase::saveStateAsDefault(v55);
  OZChannelBase::resetFlag((OZChannelBase *)v62, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)v62);
  OZChannelBase::resetFlag(v54, 16, 0);
  OZChannelBase::saveStateAsDefault(v54);
  OZChannelBase::resetFlag(v52, 16, 0);
  OZChannelBase::saveStateAsDefault(v52);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 7616), 0);
  OZChannelBase::resetFlag((OZChannelBase *)this + 68, 16, 0);
  uint64_t v47 = OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 68);
  float WorkingGamma = PCInfo::getWorkingGamma((PCInfo *)v47);
  long long v49 = (PCInfo *)OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), WorkingGamma);
  float v50 = PCInfo::getWorkingGamma(v49);
  OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], v50, 0);
  (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)this + 1648))(v63, this);
  *((_OWORD *)this + 516) = *(_OWORD *)&v63[0].var0;
  *((void *)this + 1034) = v64;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6856), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7008), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7160), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7312), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6728), 134283274, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 7464), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7464), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7464));
  *((_DWORD *)this + 2120) = 0;
  *((unsigned char *)this + 8484) = 0;
  *((void *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  *((_OWORD *)this + 53OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v51;
}

void sub_1B7CA8614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString *a10, PCMutex *a11, std::mutex *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannelFolder *a15, OZChannelBase *a16, uint64_t a17, uint64_t a18, OZChannel *a19, OZChannel *a20,OZChannel *a21,OZChannel *a22,OZChannel *a23,OZChannelBool *a24,OZChannelEnum *a25,OZChannelBool *a26,OZChannelCrop *a27,OZChannelEnum *a28,OZChannelBool *a29)
{
  CMTime v40 = (std::__shared_weak_count *)*((void *)v29 + 1058);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  PGMetalTexture::~PGMetalTexture(v36);
  CMTime v41 = (std::__shared_weak_count *)*((void *)v29 + 1042);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  PCString::~PCString(a10);
  PCMutex::~PCMutex(a11);
  PCSharedMutex::~PCSharedMutex(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(v30);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelFolder::~OZChannelFolder(v32);
  OZChannelCrop::~OZChannelCrop(a27);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v37);
  OZChannelBool::~OZChannelBool(a24);
  OZChannel::~OZChannel(v35);
  OZChannel::~OZChannel(v33);
  OZChannelBool::~OZChannelBool(v31);
  OZChannelBool::~OZChannelBool(a29);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v38 - 152));
  OZChannel::~OZChannel(a23);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v38 - 144));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel::~OZChannel(*(OZChannel **)(v38 - 128));
  OZChannelBool::~OZChannelBool(a26);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v38 - 136));
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannelFolder::~OZChannelFolder(a15);
  OZChannelBase::setRangeName(a16, v42);
  OZSceneNodeFile::~OZSceneNodeFile(v29);
  _Unwind_Resume(a1);
}

void OZFootage::OZFootage(OZFootage *this, OZFootage *a2, char a3)
{
  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(void *)this = &unk_1F11530F0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1153780;
  *((void *)this + 6) = &unk_1F11539D8;
  *((void *)this + 197) = &unk_1F1153A30;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), (const OZChannelFolder *)((char *)a2 + 1600), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 1728), (OZFootage *)((char *)a2 + 1728), (OZChannelFolder *)((char *)this + 1600));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984), (OZFootage *)((char *)a2 + 1984), (OZChannelFolder *)((char *)this + 1600));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2992), (const OZChannelBase *)((char *)a2 + 2992), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3144), (const OZChannelBase *)((char *)a2 + 3144), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 393) = &unk_1F11023D0;
  *((void *)this + 395) = &unk_1F1102730;
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3296), (OZFootage *)((char *)a2 + 3296), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3552), (OZFootage *)((char *)a2 + 3552), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3808), (const OZChannelBase *)a2 + 34, (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 476) = &unk_1F1100CF0;
  *((void *)this + 478) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3960), (OZFootage *)((char *)a2 + 3960), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4216), (const OZChannelBase *)((char *)a2 + 4216), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4368), (const OZChannelBase *)a2 + 39, (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 4520), (const OZChannelBase *)((char *)a2 + 4520), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 565) = &unk_1F1101490;
  *((void *)this + 567) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 4672), (const OZChannelBase *)((char *)a2 + 4672), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 584) = &unk_1F1101490;
  *((void *)this + 586) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4824), (const OZChannelBase *)((char *)a2 + 4824), (OZChannelFolder *)((char *)this + 448));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976), (OZFootage *)((char *)a2 + 4976), (OZChannelFolder *)((char *)this + 448));
  OZChannelCrop::OZChannelCrop((OZFootage *)((char *)this + 5984), (OZFootage *)((char *)a2 + 5984), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6728), (const OZChannelFolder *)((char *)a2 + 6728), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6856), (const OZChannelBase *)((char *)a2 + 6856), (OZChannelFolder *)((char *)this + 6728));
  *((void *)this + 857) = &unk_1F1100CF0;
  *((void *)this + 859) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7008), (const OZChannelBase *)((char *)a2 + 7008), (OZChannelFolder *)((char *)this + 6728));
  *((void *)this + 876) = &unk_1F1100CF0;
  *((void *)this + 878) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7160), (const OZChannelBase *)((char *)a2 + 7160), (OZChannelFolder *)((char *)this + 6728));
  *((void *)this + 895) = &unk_1F1100CF0;
  *((void *)this + 897) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7312), (const OZChannelBase *)((char *)a2 + 7312), (OZChannelFolder *)((char *)this + 6728));
  *((void *)this + 914) = &unk_1F1100CF0;
  *((void *)this + 916) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7464), (const OZChannelBase *)((char *)a2 + 7464), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 933) = &unk_1F1100CF0;
  *((void *)this + 935) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7616), (const OZChannelBase *)a2 + 68, (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 95OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11027A0;
  *((void *)this + 954) = &unk_1F1102B00;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7768), (const OZChannelBase *)((char *)a2 + 7768), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7920), (const OZChannelBase *)((char *)a2 + 7920), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 1009) = 0;
  PCSharedMutex::PCSharedMutex((OZFootage *)((char *)this + 8080));
  PCMutex::PCMutex((PCMutex *)((char *)this + 8184));
  long long v6 = *((_OWORD *)a2 + 516);
  *((void *)this + 1034) = *((void *)a2 + 1034);
  *((_OWORD *)this + 516) = v6;
  *((unsigned char *)this + 8280) = *((unsigned char *)a2 + 8280);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1036);
  *((void *)this + 1037) = *((void *)a2 + 1037);
  *((void *)this + 1038) = *((void *)a2 + 1038);
  *((_DWORD *)this + 2078) = *((_DWORD *)a2 + 2078);
  *((_DWORD *)this + 2079) = *((_DWORD *)a2 + 2079);
  *((unsigned char *)this + 8320) = *((unsigned char *)a2 + 8320);
  *((void *)this + 1041) = *((void *)a2 + 1041);
  uint64_t v7 = *((void *)a2 + 1042);
  *((void *)this + 104OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)this + 8344) = 0u;
  *((unsigned char *)this + 8360) = *((unsigned char *)a2 + 8360);
  PCImage::PCImage((uint64_t)this + 8368, (uint64_t)a2 + 8368);
  *((void *)this + 1046) = &unk_1F1133940;
  uint64_t v8 = *((void *)a2 + 1054);
  *((void *)this + 1054) = v8;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  *((void *)this + 1055) = *((void *)a2 + 1055);
  *((void *)this + 1056) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 8456) = 0u;
  *((_OWORD *)this + 531) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 53OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = _Q0;
  if (*((void *)a2 + 1009)) {
    operator new();
  }
  *((_DWORD *)this + 2120) = 0;
  *((unsigned char *)this + 8484) = 0;
  *((void *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  *((_OWORD *)this + 53OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = _Q0;
}

void sub_1B7CA9160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannel *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannelCrop *a16, OZChannelColorNoAlpha *a17, OZChannelBool *a18, OZChannel *a19, OZChannel *a20,OZChannelBool *a21,OZChannelBool *a22,OZChannelEnum *a23,OZChannel *a24,OZChannelEnum *a25,OZChannelEnum *a26,OZChannel *a27,OZChannelBool *a28)
{
  MEMORY[0x1BA9BFBA0](v30, 0x10F0C40713A2EEALL);
  uint64_t v38 = (std::__shared_weak_count *)*((void *)v28 + 1058);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  PGMetalTexture::~PGMetalTexture(v33);
  CMTime v39 = (std::__shared_weak_count *)*((void *)v28 + 1042);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  PCString::~PCString(v29);
  PCMutex::~PCMutex(v32);
  PCSharedMutex::~PCSharedMutex(v35);
  OZChannelBool::~OZChannelBool(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannelFolder::~OZChannelFolder(v31);
  OZChannelCrop::~OZChannelCrop(a16);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannelBool::~OZChannelBool(a21);
  OZChannelBool::~OZChannelBool(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannel::~OZChannel(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannelBool::~OZChannelBool(a28);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v36 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v36 - 136));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v36 - 128));
  OZChannelBase::setRangeName(*(OZChannelBase **)(v36 - 120), v40);
  OZSceneNodeFile::~OZSceneNodeFile(v28);
  _Unwind_Resume(a1);
}

void sub_1B7CA92C4()
{
}

void sub_1B7CA92CC()
{
}

void sub_1B7CA92D4()
{
}

void sub_1B7CA92DC()
{
}

void sub_1B7CA92E4()
{
}

void sub_1B7CA92EC()
{
}

void sub_1B7CA92F4()
{
}

void sub_1B7CA92FC()
{
}

void sub_1B7CA9304()
{
}

void sub_1B7CA930C()
{
}

void sub_1B7CA9314()
{
}

void sub_1B7CA931C()
{
}

void sub_1B7CA9324()
{
}

void sub_1B7CA932C()
{
}

void sub_1B7CA9334()
{
}

void sub_1B7CA933C()
{
}

void sub_1B7CA9344()
{
}

void sub_1B7CA934C()
{
}

void sub_1B7CA9354()
{
}

void sub_1B7CA935C()
{
}

void sub_1B7CA9364()
{
}

void sub_1B7CA936C()
{
}

void sub_1B7CA9374()
{
}

void sub_1B7CA937C()
{
}

void sub_1B7CA9384()
{
}

void sub_1B7CA938C()
{
}

void sub_1B7CA9394()
{
}

void OZFootage::~OZFootage(OZFootage *this)
{
  *(void *)this = &unk_1F11530F0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1153780;
  *((void *)this + 6) = &unk_1F11539D8;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1576);
  *((void *)this + 197) = &unk_1F1153A30;
  long long v3 = (PMClip *)*((void *)this + 1009);
  if (v3)
  {
    PMClip::~PMClip(v3);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 1009) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1058);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((void *)this + 1046) = &unk_1F1133940;
  uint64_t v5 = *((void *)this + 1054);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  PCImage::~PCImage((CGColorSpace **)this + 1046);
  long long v6 = (std::__shared_weak_count *)*((void *)this + 1042);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  PCString::~PCString((PCString *)this + 1036);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 8184));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8080));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7920));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7616));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7464));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7312));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6856));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 6728));
  OZChannelCrop::~OZChannelCrop((OZFootage *)((char *)this + 5984));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4520));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4368));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4216));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3808));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3552));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3296));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2992));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 1728));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1600));
  OZChannelBase::setRangeName(v2, v7);

  OZSceneNodeFile::~OZSceneNodeFile(this);
}

{
  uint64_t vars8;

  OZFootage::~OZFootage(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFootage::~OZFootage(OZFootage *this)
{
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 48));
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 1576));
}

{
  uint64_t vars8;

  OZFootage::~OZFootage((OZFootage *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFootage::~OZFootage((OZFootage *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFootage::~OZFootage((OZFootage *)((char *)this - 1576));

  JUMPOUT(0x1BA9BFBA0);
}

void OZFootage::operator=(uint64_t a1, uint64_t a2)
{
  OZSceneNode::operator=(a1, a2);
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelBase::operator=(a1 + 1216, a2 + 1216);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  PCString::set((PCString *)(a1 + 1376), (const PCString *)(a2 + 1376));
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  PCString::set((PCString *)(a1 + 1392), (const PCString *)(a2 + 1392));
  *(unsigned char *)(a1 + 1400) = *(unsigned char *)(a2 + 1400);
  OZChannelFolder::operator=(a1 + 1408);
  long long v4 = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1546) = *(_OWORD *)(a2 + 1546);
  *(_OWORD *)(a1 + 1536) = v4;
  PCString::set((PCString *)(a1 + 1568), (const PCString *)(a2 + 1568));
  if (!v5) {
    __cxa_bad_cast();
  }
  long long v6 = v5;
  uint64_t v7 = v5 + 5976;
  OZChannelFolder::operator=(a1 + 1600);
  OZChannelBase::operator=(a1 + 1728, (uint64_t)(v6 + 1728));
  OZChannelFolder::operator=(a1 + 1984);
  OZChannelBase::operator=(a1 + 2120, (uint64_t)(v6 + 2120));
  OZChannelBase::operator=(a1 + 2272, (uint64_t)(v6 + 2272));
  OZChannelBase::operator=(a1 + 2424, (uint64_t)(v6 + 2424));
  OZChannelBase::operator=(a1 + 2576, (uint64_t)(v6 + 2576));
  OZChannelBase::operator=(a1 + 2728, (uint64_t)(v6 + 2728));
  *(unsigned char *)(a1 + 2984) = v6[2984];
  OZChannelBase::operator=(a1 + 2992, (uint64_t)(v6 + 2992));
  OZChannelBase::operator=(a1 + 3144, (uint64_t)(v6 + 3144));
  OZChannelBase::operator=(a1 + 3296, (uint64_t)(v6 + 3296));
  OZChannelBase::operator=(a1 + 3552, (uint64_t)(v6 + 3552));
  OZChannelBase::operator=(a1 + 3808, (uint64_t)(v6 + 3808));
  OZChannelBase::operator=(a1 + 4368, (uint64_t)(v6 + 4368));
  OZChannelBase::operator=(a1 + 4520, (uint64_t)(v6 + 4520));
  OZChannelBase::operator=(a1 + 4672, (uint64_t)(v6 + 4672));
  OZChannelBase::operator=(a1 + 4824, (uint64_t)(v6 + 4824));
  OZChannelFolder::operator=(a1 + 4976);
  OZChannelBase::operator=(a1 + 5112, (uint64_t)(v6 + 5112));
  OZChannelBase::operator=(a1 + 5264, (uint64_t)(v6 + 5264));
  OZChannelBase::operator=(a1 + 5416, (uint64_t)(v6 + 5416));
  OZChannelBase::operator=(a1 + 5568, (uint64_t)(v6 + 5568));
  OZChannelBase::operator=(a1 + 5720, (uint64_t)(v6 + 5720));
  *(unsigned char *)(a1 + 5976) = *v7;
  OZChannelBase::operator=(a1 + 7464, (uint64_t)(v6 + 7464));
  OZChannelBase::operator=(a1 + 7616, (uint64_t)(v6 + 7616));
  OZChannelBase::operator=(a1 + 7768, (uint64_t)(v6 + 7768));
  OZChannelBase::operator=(a1 + 7920, (uint64_t)(v6 + 7920));
  uint64_t v8 = *((void *)v6 + 1034);
  *(_OWORD *)(a1 + 8256) = *((_OWORD *)v6 + 516);
  *(void *)(a1 + 827OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v8;
  *(unsigned char *)(a1 + 8280) = v7[2304];
  *(void *)(a1 + 8296) = *((void *)v6 + 1037);
  *(void *)(a1 + 8304) = *((void *)v6 + 1038);
  *(_DWORD *)(a1 + 831OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_DWORD *)v6 + 2078);
  *(_DWORD *)(a1 + 8316) = *((_DWORD *)v6 + 2079);
  *(unsigned char *)(a1 + 8320) = v7[2344];
  uint64_t v9 = *((void *)v6 + 1041);
  uint64_t v10 = *((void *)v6 + 1042);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8328) = v9;
  CFURLRef v11 = *(std::__shared_weak_count **)(a1 + 8336);
  *(void *)(a1 + 8336) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(unsigned char *)(a1 + 8360) = v7[2384];
  uint64_t v12 = (CGColorSpace *)*((void *)v6 + 1054);
  PCString v15 = v12;
  if (v12) {
    (*(void (**)(CGColorSpace *))(*(void *)v12 + 16))(v12);
  }
  PGMetalTexture::setTexture(a1 + 8368, (uint64_t *)&v15, 0);
  if (v15) {
    (*(void (**)(CGColorSpace *))(*(void *)v15 + 24))(v15);
  }
  PCImage::getColorSpace((PCImage *)(v6 + 8368), &v15);
  PCImage::setColorSpace(a1 + 8368, &v15);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  *(void *)(a1 + 8448) = 0xBFF0000000000000;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 8464);
  *(_OWORD *)(a1 + 8456) = 0u;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  PCSharedMutex::lock((std::mutex *)(a1 + 8080));
  unsigned int v14 = *(PMClip **)(a1 + 8072);
  if (v14)
  {
    PMClip::~PMClip(v14);
    MEMORY[0x1BA9BFBA0]();
  }
  *(void *)(a1 + 807OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  if (*((void *)v6 + 1009)) {
    operator new();
  }
  PCSharedMutex::unlock((std::mutex *)(a1 + 8080));
}

void sub_1B7CA9B5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10F0C40713A2EEALL);
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

OZScene *OZFootage::canDelete(OZFootage *this)
{
  __n128 result = (OZScene *)*((void *)this + 121);
  if (result)
  {
    DependantNodes = (void *)OZScene::getDependantNodes(result, *((_DWORD *)this + 20));
    if (!DependantNodes) {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    long long v4 = DependantNodes + 1;
    uint64_t v5 = (void *)*DependantNodes;
    if ((void *)*DependantNodes == DependantNodes + 1)
    {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    else
    {
      while (1)
      {
        Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v5 + 7));
        if (Node)
        {
          if (v7)
          {
            uint64_t v8 = v7;
            if (((*(uint64_t (**)(void))(*((void *)v7 + 2) + 56))() & 1) != 0
              || (OZImageElement::isLockedDropZone(v8) & 1) != 0)
            {
              break;
            }
          }
        }
        uint64_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v5[2];
            BOOL v11 = *v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v11);
        }
        uint64_t v5 = v10;
        if (v10 == v4) {
          return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
        }
      }
      return 0;
    }
  }
  return result;
}

OZScene *non-virtual thunk to'OZFootage::canDelete(OZFootage *this)
{
  return OZFootage::canDelete((OZFootage *)((char *)this - 16));
}

BOOL OZFootage::getInvertAlpha(OZFootage *this)
{
  uint64_t v1 = (char *)this + 8477;
  if (*((unsigned char *)this + 8478)) {
    return *v1 != 0;
  }
  BOOL result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], 0.0) != 0;
  char *v1 = result;
  v1[1] = 1;
  return result;
}

uint64_t OZFootage::hasVideo(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 8072);
  if (result) {
    return PMClip::getVideoDescription(result, a2) == 0;
  }
  return result;
}

uint64_t OZFootage::numAudioTracks(OZFootage *this)
{
  uint64_t v1 = *((void *)this + 1009);
  if (v1) {
    return *(unsigned int *)(v1 + 516);
  }
  else {
    return 0;
  }
}

PCURL *OZFootage::getURL@<X0>(const PCString *this@<X0>, PCURL *a2@<X8>)
{
  if (BYTE1(this[195].var0)) {
    return PCURL::PCURL(a2, this + 196, 0);
  }
  else {
    return PCURL::PCURL(a2, (const PCURL *)&this[1009].var0[38].info);
  }
}

void OZFootage::getFilename(const __CFURL ***this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const __CFURL ***))(*this)[179])(this))
  {
    OZSceneNodeFile::getFilename((OZSceneNodeFile *)this, a2);
  }
  else
  {
    long long v4 = this[1009];
    PMClip::getFilename(v4, (PCString *)a2);
  }
}

void OZFootage::getShortFilename(CFURLRef **this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(CFURLRef **))(*this)[179])(this))
  {
    OZSceneNodeFile::getShortFilename((OZSceneNodeFile *)this, a2);
  }
  else
  {
    long long v4 = this[1009];
    PMClip::getShortFilename(v4, (PCString *)a2);
  }
}

void OZFootage::getExtension(const __CFURL ***this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const __CFURL ***))(*this)[179])(this))
  {
    OZSceneNodeFile::getExtension((OZSceneNodeFile *)this, a2);
  }
  else
  {
    long long v4 = this[1009];
    PMClip::getExtension(v4, (PCURL *)a2);
  }
}

void OZFootage::getAsFileSystemString(const PCString **this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const PCString **))(*this)[179].var0)(this))
  {
    OZSceneNodeFile::getAsFileSystemString((OZSceneNodeFile *)this, a2);
  }
  else
  {
    long long v4 = this[1009];
    PMClip::getAsFileSystemString(v4, (PCString *)a2);
  }
}

void OZFootage::getAsURLString(const PCString *this@<X0>, PCString *a2@<X8>)
{
  if (((unsigned int (*)(const PCString *))this->var0[44].length)(this))
  {
    OZSceneNodeFile::getAsURLString(this, a2);
  }
  else
  {
    CMTime var0 = (const __CFURL **)this[1009].var0;
    PMClip::getAsURLString(var0, (PCURL *)a2);
  }
}

uint64_t OZFootage::setNeedsDZFileOpen(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8320) = a2;
  return this;
}

uint64_t OZFootage::setPixelAspectRatioFromFile(OZFootage *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  if ((result & 1) == 0)
  {
    double v5 = *(double *)(*((void *)this + 1009) + 416);
    if (v5 > 0.0)
    {
      long long v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
      return OZChannel::setValue((OZChannel *)((char *)this + 3144), v6, v5, a2);
    }
  }
  return result;
}

uint64_t OZFootage::setGammaFromFile(OZFootage *this)
{
  uint64_t result = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  if ((result & 1) == 0)
  {
    uint64_t v3 = *((void *)this + 1009);
    if (v3 && (double WorkingGamma = *(double *)(v3 + 424), WorkingGamma > 0.0))
    {
      double v5 = (OZChannel *)((char *)this + 7616);
      long long v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    }
    else
    {
      double WorkingGamma = PCInfo::getWorkingGamma((PCInfo *)result);
      long long v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
      double v5 = (OZChannel *)((char *)this + 7616);
    }
    return OZChannel::setValue(v5, v6, WorkingGamma, 0);
  }
  return result;
}

void OZFootage::setClip(OZFootage *this, PMClip *a2, int a3, int a4, uint64_t a5)
{
  void v52[3] = *(CGColorSpace **)MEMORY[0x1E4F143B8];
  uint64_t v10 = (char *)this + 8316;
  long long v45 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8080));
  BOOL v11 = (PMClip *)*((void *)this + 1009);
  if (v11)
  {
    PMClip::~PMClip(v11);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 1009) = a2;
  *((_DWORD *)this + 2120) = 0;
  v10[168] = 0;
  *((void *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  int v12 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  uint64_t v13 = (double *)*((void *)this + 1009);
  double v14 = v13[36];
  *((double *)this + 1037) = v14;
  *((double *)this + 1038) = PMClip::getSeconds((PMClip *)v13, v14);
  *((_DWORD *)this + 2078) = PMClip::getDynamicRangeType(*((PMClip **)this + 1009));
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  *(_WORD *)(v10 + 1) = 0;
  if ((*(double (**)(OZFootage *))(*(void *)this + 1296))(this) == 0.0) {
    *uint64_t v10 = 0;
  }
  if (*((void *)this + 121))
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&__dst);
    PCString::set((PCString *)this + 1036, &__dst);
    PCString::~PCString(&__dst);
  }
  uint64_t v15 = *((void *)this + 1009);
  double DisplayFrameRate = *(double *)(v15 + 360);
  PCURL::PCURL((PCURL *)&__dst, (const PCURL *)(v15 + 1224));
  int isSequence = PCURL::isSequence((const __CFURL **)&__dst);
  PCURL::~PCURL((PCURL *)&__dst);
  if (isSequence)
  {
    if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this))
    {
      uint64_t v19 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
      double DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZSceneSettings *)(v19 + 336));
      double v18 = PMClip::setFrameRate(*((PMClip **)this + 1009), DisplayFrameRate);
    }
    else
    {
      uint64_t v20 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      if (v20)
      {
        double DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZSceneSettings *)(v20 + 336));
        double v18 = PMClip::setFrameRate(*((PMClip **)this + 1009), DisplayFrameRate);
      }
    }
  }
  if (!v12 || !*v10)
  {
    LODWORD(v18) = *(_DWORD *)(*((void *)this + 1009) + 400);
    OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E4F1FA48], (double)*(unint64_t *)&v18, a5);
    (*(void (**)(OZFootage *, uint64_t, double))(*(void *)this + 1304))(this, a5, DisplayFrameRate);
    OZFootage::setPixelAspectRatioFromFile(this, a5);
    if (a4) {
      OZFootage::setGammaFromFile(this);
    }
    if (a3) {
      OZFootage::guessAlphaFormat(this, a5);
    }
  }
  CMTime v44 = (OZChannelBase *)((char *)this + 1600);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1600), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3144), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
  long long v43 = (OZChannelBase *)((char *)this + 3552);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3552), 2, a5);
  CMTime v42 = (OZChannelBase *)((char *)this + 3808);
  OZChannelBase::resetFlag((OZChannelBase *)this + 34, 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5984), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)this + 39, 2, a5);
  uint64_t v47 = (OZChannelBase *)((char *)this + 4520);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4520), 2, a5);
  long long v46 = (OZChannelBase *)((char *)this + 4672);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4672), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4824), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4976), 2, a5);
  uint64_t v48 = (OZChannelBase *)((char *)this + 7616);
  OZChannelBase::setFlag((OZChannelBase *)this + 68, 2, a5);
  long long v21 = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7768), 2, a5);
  uint64_t v22 = **((void **)this + 1009);
  if (v22) {
    unsigned int v23 = (*(uint64_t (**)(OZChannelBase *))(v22 + 336))(v21);
  }
  else {
    unsigned int v23 = 1;
  }
  OZChannel::setValue((OZChannel *)((char *)this + 7768), MEMORY[0x1E4F1FA48], (double)v23, a5);
  PCSharedCount::PCSharedCount((PCSharedCount *)v51);
  v52[0] = 0;
  uint64_t v24 = *((void *)this + 1009);
  if (v24 && !PMClip::getVideoDescription(v24, &__dst))
  {
    int v29 = 1;
  }
  else
  {
    OZChannelBase::setFlag(v44, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3144), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
    OZChannelBase::setFlag(v43, 2, a5);
    OZChannelBase::setFlag(v42, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5984), 2, a5);
    uint64_t v25 = OZChannelBase::setFlag(v48, 2, a5);
    long long v26 = (PCColor *)PCColor::BLACK((PCColor *)v25);
    OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E4F1FA48], v26, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], 0.0, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 1728), MEMORY[0x1E4F1FA48], 0.0, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 3144), MEMORY[0x1E4F1FA48], 1.0, a5);
    double v27 = (PCInfo *)OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E4F1FA48], 0.0, a5);
    float WorkingGamma = PCInfo::getWorkingGamma(v27);
    OZChannel::setValue((OZChannel *)v48, MEMORY[0x1E4F1FA48], WorkingGamma, a5);
    int v29 = 0;
  }
  char v30 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  uint64_t v31 = *((void *)this + 1009);
  if (v30)
  {
LABEL_29:
    if (!v31) {
      goto LABEL_49;
    }
    goto LABEL_30;
  }
  if (!v31) {
    goto LABEL_49;
  }
  if (*(unsigned char *)(v31 + 408))
  {
    OZChannelBase::setFlag(v44, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
    OZChannelBase::setFlag(v43, 2, a5);
    OZChannelBase::setFlag(v42, 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)this + 39, 2, a5);
    OZChannelBase::resetFlag(v47, 2, a5);
    OZChannelBase::resetFlag(v46, 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4824), 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4976), 2, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E4F1FA48], 0.0, a5);
    uint64_t v31 = *((void *)this + 1009);
    goto LABEL_29;
  }
LABEL_30:
  if (*(_DWORD *)(v31 + 344) != 1
    || (OZChannelBase::resetFlag(v47, 2, a5), OZChannelBase::resetFlag(v46, 2, a5), *((void *)this + 1009)))
  {
    if (v29)
    {
      if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0
        || (uint64_t v32 = *((void *)this + 1009)) == 0
        || !*(unsigned char *)(v32 + 408))
      {
        char v33 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
        uint64_t v34 = *((void *)this + 1009);
        char v35 = v34 ? v33 : 1;
        if (((v35 & 1) != 0 || !*(unsigned char *)(v34 + 1241)) && !*(unsigned char *)(v34 + 452)) {
          OZChannelBase::resetFlag(v48, 2, a5);
        }
      }
    }
    if (!v12 || !*v10)
    {
      uint64_t v36 = *((void *)this + 1009);
      unsigned int v37 = *(_DWORD *)(v36 + 288);
      unsigned int v38 = *(_DWORD *)(v36 + 292);
      double v49 = 0.0;
      if (v37 <= v38)
      {
        (*(void (**)(void, double *))(**(void **)(*((void *)this + 598) + 8) + 256))(*(void *)(*((void *)this + 598) + 8), &v49);
        float v41 = (double)v38 / v49;
        OZChannel::setMax((OZChannel *)v47, (float)((float)v37 / v41));
        double v39 = (double)v37;
      }
      else
      {
        (*(void (**)(void, double *))(**(void **)(*((void *)this + 579) + 8) + 256))(*(void *)(*((void *)this + 579) + 8), &v49);
        double v39 = (double)v37;
        float v40 = (double)v37 / v49;
        OZChannel::setMax((OZChannel *)v46, (double)(float)((float)v38 / v40));
      }
      OZChannel::setValue((OZChannel *)v47, MEMORY[0x1E4F1FA48], v39, a5);
      OZChannel::setValue((OZChannel *)v46, MEMORY[0x1E4F1FA48], (double)v38, a5);
      OZChannel::setDefaultValue((OZChannel *)v47, v39);
      OZChannel::setDefaultValue((OZChannel *)v46, (double)v38);
    }
  }
LABEL_49:
  *uint64_t v10 = 1;
  (*(void (**)(OZFootage *))(*(void *)this + 1464))(this);
  PCCFRef<CGColorSpace *>::~PCCFRef(v52);
  PCString::~PCString(v51);
  PCSharedMutex::unlock(v45);
}

void sub_1B7CAABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CGColorSpace **a15, PCString *a16, uint64_t a17, std::mutex *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

BOOL OZFootage::openMedia(OZFootage *this)
{
  if (*((unsigned char *)this + 1560) || *((void *)this + 1009)) {
    return 0;
  }
  uint64_t v3 = (const PCURL *)*((void *)this + 193);
  if (!v3)
  {
    LODWORD(v6) = 0;
    goto LABEL_25;
  }
  PCURL::PCURL((PCURL *)v40, v3);
  PCURL::PCURL((PCURL *)&v39, 0);
  long long v4 = (const __CFURL **)PCURL::PCURL((PCURL *)v38, (const PCURL *)v40);
  BOOL isDefaultDropZoneFootageForType = OZImageElement::isDefaultDropZoneFootageForType(v4, 0);
  PCURL::~PCURL((PCURL *)v38);
  if (isDefaultDropZoneFootageForType)
  {
    OZImageElement::defaultDropZoneFootageForType(0, (PCURL *)&v37);
    PCURL::operator=(&v39, (const __CFURL **)&v37);
  }
  else
  {
    uint64_t v7 = (const __CFURL **)PCURL::PCURL((PCURL *)v36, (const PCURL *)v40);
    BOOL v8 = OZImageElement::isDefaultDropZoneFootageForType(v7, 3u);
    PCURL::~PCURL((PCURL *)v36);
    if (v8)
    {
      OZImageElement::defaultDropZoneFootageForType(3u, (PCURL *)&v37);
      PCURL::operator=(&v39, (const __CFURL **)&v37);
    }
    else
    {
      uint64_t v9 = (const __CFURL **)PCURL::PCURL((PCURL *)v35, (const PCURL *)v40);
      BOOL v10 = OZImageElement::isDefaultDropZoneFootageForType(v9, 3u);
      PCURL::~PCURL((PCURL *)v35);
      if (v10)
      {
        OZImageElement::defaultDropZoneFootageForType(3u, (PCURL *)&v37);
        PCURL::operator=(&v39, (const __CFURL **)&v37);
      }
      else
      {
        PCURL::PCURL((PCURL *)&v34, (const PCURL *)v40);
        BOOL v11 = OZImageElement::isDefaultDropZoneFootageForType(&v34, 1u);
        PCURL::~PCURL((PCURL *)&v34);
        if (v11)
        {
          OZImageElement::defaultDropZoneFootageForType(1u, (PCURL *)&v37);
          PCURL::operator=(&v39, (const __CFURL **)&v37);
        }
        else
        {
          PCURL::PCURL((PCURL *)&v33, (const PCURL *)v40);
          BOOL v12 = OZImageElement::isDefaultDropZoneFootageForType(&v33, 2u);
          PCURL::~PCURL((PCURL *)&v33);
          if (!v12)
          {
            uint64_t v6 = OZFootage::openURL((PCString *)this, *((const __CFURL ***)this + 193), 0, 0);
            if (!v6) {
              goto LABEL_24;
            }
            OZSceneNodeFile::setIsFileMissing((uint64_t)this, 1);
            PCString::PCString(&v37, "Users/Shared/Motion");
            PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v32);
            int v15 = PCString::find(&v32, &v37);
            unsigned int v16 = PCString::size(&v32);
            if ((v15 & 0x80000000) == 0)
            {
              unsigned int v17 = v16;
              PCSharedCount::PCSharedCount(&v31);
              uint64_t v19 = (OZPreferenceManager *)OZPreferenceManager::Instance(v18);
              OZPreferenceManager::getContentPath(v19, (PCString *)&v31);
              unsigned int v20 = PCString::size(&v37);
              PCString::substr(&v32, (int)(v20 + v15), v17 - (v20 + v15), (CFStringRef *)&v29.var0);
              operator+((PCString *)&v31, &v29, &v30);
              PCString::set(&v32, &v30);
              PCString::~PCString(&v30);
              PCString::~PCString(&v29);
              PCURL::PCURL((PCURL *)&v30, &v32, 0);
              uint64_t v6 = OZFootage::openURL((PCString *)this, (const __CFURL **)&v30, 0, 1);
              if (v6)
              {
                PCString::PCString(&v29, "Content.localized");
                unsigned int v21 = PCString::find(&v32, &v29);
                unsigned int v22 = PCString::size(&v29);
                if ((v21 & 0x80000000) == 0)
                {
                  unsigned int v23 = v22;
                  PCString::PCString(&v28, "Content.localized/Template Media.localized");
                  PCString::replace(&v32, v21, v23, &v28);
                  PCString::~PCString(&v28);
                  PCURL::PCURL((PCURL *)&v28, &v32, 0);
                  uint64_t v6 = OZFootage::openURL((PCString *)this, (const __CFURL **)&v28, 0, 1);
                  PCURL::~PCURL((PCURL *)&v28);
                }
                PCString::~PCString(&v29);
              }
              PCURL::~PCURL((PCURL *)&v30);
              PCString::~PCString((PCString *)&v31);
            }
            PCString::~PCString(&v32);
            PCString::~PCString(&v37);
            if (!v6) {
              goto LABEL_24;
            }
            goto LABEL_20;
          }
          OZImageElement::defaultDropZoneFootageForType(2u, (PCURL *)&v37);
          PCURL::operator=(&v39, (const __CFURL **)&v37);
        }
      }
    }
  }
  PCURL::~PCURL((PCURL *)&v37);
  if (*((unsigned char *)this + 1540) && !*((unsigned char *)this + 8320))
  {
    LODWORD(v6) = 0;
    *((unsigned char *)this + 8319) = 1;
  }
  else if (v39)
  {
    uint64_t v6 = OZFootage::openURL((PCString *)this, (const __CFURL **)&v39, 0, 1);
    if (v6)
    {
LABEL_20:
      PCString::PCString(&v37, "Motion.app/");
      PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v27);
      PCString::PCString(&v26, &v37);
      uint64_t v6 = OZFootage::openByReplacingSubPath((PCString *)this, &v27, &v26, v6);
      PCString::~PCString(&v26);
      PCString::~PCString(&v27);
      PCString::~PCString(&v37);
      if (v6)
      {
        PCString::PCString(v13, ".app/");
        PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v25);
        PCString::PCString(&v24, &v37);
        LODWORD(v6) = OZFootage::openByReplacingSubPath((PCString *)this, &v25, &v24, v6);
        PCString::~PCString(&v24);
        PCString::~PCString(&v25);
        PCString::~PCString(&v37);
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_24:
  PCURL::~PCURL((PCURL *)&v39);
  PCURL::~PCURL((PCURL *)v40);
LABEL_25:
  if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this))
  {
    double v14 = (const __CFURL **)*((void *)this + 194);
    if (v14) {
      LODWORD(v6) = OZFootage::openURL((PCString *)this, v14, 0, 1);
    }
  }
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0) {
    *((unsigned char *)this + 1560) = 1;
  }
  return v6 != 0;
}

void sub_1B7CAB1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12, PCString a13, PCString a14, PCString a15, PCString a16, PCString a17, PCString a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  PCURL::~PCURL((PCURL *)&a14);
  PCString::~PCString(&a15);
  PCURL::~PCURL((PCURL *)&a16);
  PCString::~PCString(&a17);
  PCString::~PCString(&a18);
  PCString::~PCString((PCString *)(v25 - 64));
  PCURL::~PCURL((PCURL *)(v25 - 48));
  PCURL::~PCURL((PCURL *)(v25 - 40));
  _Unwind_Resume(a1);
}

PCString *operator+@<X0>(PCString *a1@<X0>, const PCString *a2@<X1>, PCString *a3@<X8>)
{
  return PCString::append(a3, a2);
}

void sub_1B7CAB378(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFootage::guessAlphaFormat(OZFootage *this, uint64_t a2)
{
  long long v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0)
  {
    double v5 = (PMClip *)*((void *)this + 1009);
    if (v5)
    {
      if (!*((_DWORD *)v5 + 311)) {
        PMClip::open(v5);
      }
      int v17 = 0;
      PCColor::PCColor(&v16);
      char v15 = 0;
      uint64_t v6 = PMClip::guessAlphaFormat(*((void *)this + 1009), 0, &v17, (uint64_t)&v16, &v15);
      switch(v17)
      {
        case 0:
          uint64_t v7 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E4F1FA48], v7, a2);
          double v8 = 0.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], 0.0, a2);
          goto LABEL_16;
        case 1:
          uint64_t v9 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E4F1FA48], v9, a2);
          double v10 = 0.0;
          double v8 = 1.0;
          if (v15) {
            double v10 = 1.0;
          }
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], v10, a2);
          goto LABEL_16;
        case 2:
          BOOL v11 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E4F1FA48], v11, a2);
          double v12 = 0.0;
          if (v15) {
            double v12 = 1.0;
          }
          double v8 = 2.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], v12, a2);
          goto LABEL_16;
        case 3:
          uint64_t v13 = (PCColor *)PCColor::WHITE((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E4F1FA48], v13, a2);
          double v14 = 0.0;
          if (v15) {
            double v14 = 1.0;
          }
          double v8 = 3.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E4F1FA48], v14, a2);
LABEL_16:
          OZChannel::setValue((OZChannel *)((char *)this + 1728), MEMORY[0x1E4F1FA48], v8, a2);
          break;
        default:
          break;
      }
      PMClip::setAlphaFormat(*((void *)this + 1009), 0, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    }
  }
  PCSharedMutex::unlock_shared(v4);
}

void sub_1B7CAB5D4(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

void OZFootage::setClipMinimal(OZFootage *this, PMClip *a2)
{
  long long v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8080));
  double v5 = (PMClip *)*((void *)this + 1009);
  if (v5)
  {
    PMClip::~PMClip(v5);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 1009) = a2;
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  if (*((void *)this + 121))
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&v6);
    PCString::set((PCString *)this + 1036, &v6);
    PCString::~PCString(&v6);
  }
  (*(void (**)(OZFootage *))(*(void *)this + 1464))(this);
  PCSharedMutex::unlock(v4);
}

void sub_1B7CAB6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCSharedMutex::unlock(v10);
  _Unwind_Resume(a1);
}

PMClip *OZFootage::ensureClipIsOpen(OZFootage *this)
{
  uint64_t result = (PMClip *)*((void *)this + 1009);
  if (!*((_DWORD *)result + 311)) {
    return (PMClip *)PMClip::open(result);
  }
  return result;
}

double OZFootage::didFinishLoadingIntoScene(OZFootage *this)
{
  OZSceneNodeFile::didFinishLoadingIntoScene(this);
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this))
  {
    if (*((_DWORD *)this + 2066) == 1)
    {
      __n128 v7 = 0uLL;
      CMTimeEpoch v8 = 0;
      uint64_t v3 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v7);
      uint64_t v4 = *((void *)this + 1032);
      *(__n128 *)&v5.CMTimeValue value = v7;
      v5.CMTimeEpoch epoch = v8;
      PC_CMTimeFromSampleNumberAndDuration(v4, &v5, &v6);
      double result = *(double *)&v6.value;
      *((CMTime *)this + 344) = v6;
    }
  }
  return result;
}

double non-virtual thunk to'OZFootage::didFinishLoadingIntoScene(OZFootage *this)
{
  return OZFootage::didFinishLoadingIntoScene((OZFootage *)((char *)this - 16));
}

void OZFootage::didAddToScene(OZFootage *this, OZScene *a2, double a3)
{
  uint64_t v5 = *((void *)this + 1009);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 1240))
    {
      if (a2)
      {
LABEL_4:
        double DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZScene *)((char *)a2 + 336));
        uint64_t v5 = *((void *)this + 1009);
LABEL_10:
        PMClip::setFrameRate((PMClip *)v5, DisplayFrameRate);
        (*(void (**)(OZFootage *, void, double))(*(void *)this + 1304))(this, 0, DisplayFrameRate);
        goto LABEL_11;
      }
LABEL_9:
      double DisplayFrameRate = *(double *)(v5 + 360);
      goto LABEL_10;
    }
    if ((!*(void *)v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 336))(v5))
      && (*(unsigned int (**)(OZFootage *))(*(void *)this + 1376))(this) >= 2)
    {
      uint64_t v5 = *((void *)this + 1009);
      if (a2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v7 = *((void *)this + 1009);
  if (a2 && v7)
  {
    if (!*(unsigned char *)(v7 + 448)) {
      goto LABEL_16;
    }
    LODWORD(a3) = *(_DWORD *)(v7 + 344);
    double v8 = *((double *)a2 + 46);
    double v9 = (double)*(unint64_t *)&a3 / *(double *)(v7 + 360);
    PMClip::setFrameRate((PMClip *)v7, v8);
    *(_DWORD *)(*((void *)this + 1009) + 344) = (v9 * v8);
    (*(void (**)(OZFootage *, void, double))(*(void *)this + 1304))(this, 0, v8);
    uint64_t v7 = *((void *)this + 1009);
  }
  if (v7)
  {
LABEL_16:
    if (*(double *)(v7 + 416) > 0.0) {
      goto LABEL_21;
    }
  }
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this))
  {
    uint64_t v10 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
    if (*(_DWORD *)(v10 + 344) == *((_DWORD *)this + 2074) && *(_DWORD *)(v10 + 348) == *((_DWORD *)this + 2075)) {
      OZChannel::setValue((OZChannel *)((char *)this + 3144), MEMORY[0x1E4F1FA48], *(double *)(v10 + 384), 1);
    }
  }
LABEL_21:
  if (*((void *)this + 1009) && ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0)
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)v16);
    PCString::set((PCString *)this + 1036, v16);
    PCString::~PCString(v16);
  }
  v16[0].CMTime var0 = 0;
  v16[1].CMTime var0 = 0;
  CMTimeEpoch v17 = 0;
  uint64_t v11 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
  FrameDuratiouint64_t n = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)v16);
  if ((*(uint64_t (**)(OZFootage *, __n128))(*(void *)this + 272))(this, FrameDuration))
  {
    if (*((_DWORD *)this + 2066) == 1)
    {
      uint64_t v13 = *((void *)this + 1032);
      *(_OWORD *)&v14.CMTimeValue value = *(_OWORD *)&v16[0].var0;
      v14.CMTimeEpoch epoch = v17;
      PC_CMTimeFromSampleNumberAndDuration(v13, &v14, &v15);
      *((CMTime *)this + 344) = v15;
    }
  }
}

void sub_1B7CABB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCString a16)
{
}

CGColorSpace **OZFootage::getBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v15 = xmmword_1B7E74760;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0x3FF0000000000000;
  char v27 = 0;
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v29 = *MEMORY[0x1E4F1FA48];
  uint64_t v30 = v8;
  uint64_t v31 = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  __int16 v34 = 0;
  uint64_t v35 = 0x100000000;
  char v36 = 0;
  PCString v37 = 0;
  unsigned int v38 = 0;
  __int16 v39 = 768;
  uint64_t v40 = 0x408F400000000000;
  char v41 = 0;
  int v42 = 0;
  char v43 = 0;
  uint64_t v44 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v45 = _Q0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1568))(a1, a2, a3, &v15, a5, a6, a7, a8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v38);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v37);
}

void sub_1B7CABC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZFootage::getBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OZFootage::getBounds(a1 - 1576, a2, a3, a4, a5, a6, a7, a8);
}

void OZFootage::getBounds(uint64_t a1, double *a2, const CMTime *a3, uint64_t a4)
{
  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v30);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1432))(a1))
  {
    int v8 = *(_DWORD *)(a1 + 8296);
    int v9 = *(_DWORD *)(a1 + 8300);
  }
  else if (*(_DWORD *)(a4 + 92))
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v28);
    PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)v28, *(_DWORD *)(a4 + 92));
    int v8 = v28[2];
    int v9 = v28[3];
    PCString::~PCString(&v29);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8072);
    int v8 = *(_DWORD *)(v10 + 288);
    int v9 = *(_DWORD *)(v10 + 292);
  }
  int ValueAsInt = *(_DWORD *)(a1 + 8488);
  if (!ValueAsInt)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 4520), a3, 0.0);
    *(_DWORD *)(a1 + 8488) = ValueAsInt;
  }
  int v12 = *(_DWORD *)(a1 + 8492);
  if (!v12)
  {
    int v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 4672), a3, 0.0);
    *(_DWORD *)(a1 + 849OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1432))(a1) & 1) != 0
    || (uint64_t v13 = *(void *)(a1 + 8072)) == 0
    || !*(unsigned char *)(v13 + 408))
  {
    BOOL v14 = *(_DWORD *)(a4 + 92) || ValueAsInt == 0;
    BOOL v15 = !v14;
    if (v15 && v12 != 0)
    {
      int v8 = ValueAsInt;
      int v9 = v12;
    }
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6120), MEMORY[0x1E4F1FA48], 0.0);
  double v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6272), MEMORY[0x1E4F1FA48], 0.0);
  double v19 = v18;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6576), MEMORY[0x1E4F1FA48], 0.0);
  double v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6424), MEMORY[0x1E4F1FA48], 0.0);
  int v23 = v8 - (vcvtmd_s64_f64(v17) + vcvtmd_s64_f64(v19));
  int v24 = v9 - (vcvtmd_s64_f64(v21) + vcvtmd_s64_f64(v22));
  double v25 = -1.0;
  BOOL v26 = v23 < 1 || v24 < 1;
  double v27 = -1.0;
  if (!v26)
  {
    double v27 = (double)v23;
    double v25 = (double)v24;
    *a2 = (double)v23 * -0.5;
    a2[1] = (double)v24 * -0.5;
  }
  a2[2] = v27;
  a2[3] = v25;
  PCString::~PCString(&v31);
}

void sub_1B7CABF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  PCString::~PCString(v12 + 5);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFootage::getDimensions(OZFootage *this, float *a2, float *a3, const OZRenderState *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v15 = xmmword_1B7E74760;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0x3FF0000000000000;
  char v27 = 0;
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v29 = *MEMORY[0x1E4F1FA48];
  uint64_t v30 = v8;
  uint64_t v31 = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  __int16 v34 = 0;
  uint64_t v35 = 0x100000000;
  char v36 = 0;
  PCString v37 = 0;
  unsigned int v38 = 0;
  __int16 v39 = 768;
  uint64_t v40 = 0x408F400000000000;
  char v41 = 0;
  int v42 = 0;
  char v43 = 0;
  uint64_t v44 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v45 = _Q0;
  (*(void (**)(OZFootage *, float *, float *, const OZRenderState *, long long *, uint64_t, uint64_t, uint64_t))(*(void *)this + 1576))(this, a2, a3, a4, &v15, a6, a7, a8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v38);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v37);
}

void sub_1B7CAC074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZFootage::getDimensions(OZFootage *this, float *a2, float *a3, const OZRenderState *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OZFootage::getDimensions((OZFootage *)((char *)this - 1576), a2, a3, a4, a5, a6, a7, a8);
}

float OZFootage::getDimensions(uint64_t a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  long long v18 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v19 = _Q0;
  int v12 = (long long *)(a1 + 8496);
  if (*(double *)(a1 + 8512) >= 0.0 && *(double *)(a1 + 8520) >= 0.0)
  {
    long long v14 = *(_OWORD *)(a1 + 8512);
    long long v18 = *v12;
    long long v19 = v14;
  }
  else
  {
    (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 1568))(a1, &v18, a4, a5);
    long long v13 = v19;
    *int v12 = v18;
    v12[1] = v13;
  }
  double v15 = *((double *)&v19 + 1);
  float v16 = *(double *)&v19;
  *a2 = v16;
  float result = v15;
  *a3 = result;
  return result;
}

void OZFootage::getKindName(OZFootage *this@<X0>, PCSharedCount *a2@<X8>)
{
  void v13[3] = *(CGColorSpace **)MEMORY[0x1E4F143B8];
  char v4 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  PCSharedCount::PCSharedCount(a2);
  if ((v4 & 1) == 0)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)v12);
    v13[0] = 0;
    uint64_t v5 = *((void *)this + 1009);
    if (!v5) {
      goto LABEL_11;
    }
    VideoDescriptiouint64_t n = (PMMediaManager *)PMClip::getVideoDescription(v5, __dst);
    uint64_t v7 = *((void *)this + 1009);
    if (v7)
    {
      if (VideoDescription)
      {
        if (*(_DWORD *)(v7 + 516))
        {
          PCURL::PCURL((PCURL *)&v10, @"Media Info QuickTime Audio");
          PCString::set((PCString *)a2, &v10);
LABEL_10:
          PCString::~PCString(&v10);
        }
LABEL_11:
        PCCFRef<CGColorSpace *>::~PCCFRef(v13);
        PCString::~PCString(v12);
        return;
      }
    }
    else if (VideoDescription)
    {
      goto LABEL_11;
    }
    if (*(unsigned char *)(v7 + 1240))
    {
      PCURL::PCURL((PCURL *)&v10, @"Media Info Image Sequence");
      PCString::set((PCString *)a2, &v10);
    }
    else
    {
      uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(VideoDescription);
      (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)this + 1232))(&v10, this);
      uint64_t Reader = PMMediaManager::findReader(Instance, (const __CFURL **)&v10);
      PCURL::~PCURL((PCURL *)&v10);
      if (!Reader) {
        goto LABEL_11;
      }
      if ((*(unsigned int (**)(uint64_t))(Reader + 248))(Reader) == 1346651680)
      {
        PCURL::PCURL((PCURL *)&v10, @"Media Info PDF");
        PCString::set((PCString *)a2, &v10);
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(Reader + 232))(Reader)) {
          PCURL::PCURL((PCURL *)&v10, @"Media Info QuickTime Movie");
        }
        else {
          PCURL::PCURL((PCURL *)&v10, @"Media Info Still Image");
        }
        PCString::set((PCString *)a2, &v10);
      }
    }
    goto LABEL_10;
  }
}

void sub_1B7CAC3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(v11);
  PCString::~PCString(v9);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void OZFootage::getFormatName(OZFootage *this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    char v4 = (PMClip *)*((void *)this + 1009);
    PMClip::getFormatName(v4, (PCString *)a2);
  }
}

void OZFootage::getCodecName(OZFootage *this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    char v4 = (PMClip *)*((void *)this + 1009);
    PMClip::getCodecName(v4, (PCURL *)a2);
  }
}

uint64_t OZFootage::getDisplayWidth(OZFootage *this)
{
  if (*((void *)this + 1009) && !(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    uint64_t v2 = (unsigned int *)(*((void *)this + 1009) + 288);
  }
  else {
    uint64_t v2 = (unsigned int *)((char *)this + 8296);
  }
  return *v2;
}

uint64_t OZFootage::getDisplayHeight(OZFootage *this)
{
  if (*((void *)this + 1009) && !(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    uint64_t v2 = (unsigned int *)(*((void *)this + 1009) + 292);
  }
  else {
    uint64_t v2 = (unsigned int *)((char *)this + 8300);
  }
  return *v2;
}

uint64_t OZFootage::getLayers(OZFootage *this)
{
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return 1;
  }
  else {
    return *(unsigned int *)(*((void *)this + 1009) + 392);
  }
}

uint64_t OZFootage::getPages(OZFootage *this)
{
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return 0;
  }
  else {
    return *(unsigned int *)(*((void *)this + 1009) + 396);
  }
}

void OZFootage::getLayerName(PMClip **this@<X0>, unsigned int a2@<W1>, PCURL *a3@<X8>)
{
  if ((*((unsigned int (**)(PMClip **))*this + 179))(this))
  {
    PCURL::PCURL(a3, @"Missing file");
  }
  else
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v6);
    PMClip::getLayerDescription(this[1009], (PMLayerDescription *)v6, a2);
    PCString::PCString((PCString *)a3, &v7);
    PCString::~PCString(&v7);
  }
}

void sub_1B7CAC7FC(_Unwind_Exception *a1)
{
  PCString::~PCString(v1 + 5);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::getFrames(OZFootage *this)
{
  if (!(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return *(unsigned int *)(*((void *)this + 1009) + 344);
  }
  unsigned int v2 = vcvtmd_s64_f64(*((double *)this + 1038) * (*(double (**)(OZFootage *))(*(void *)this + 1328))(this)+ 0.5+ 0.0000001);
  if (v2 <= 1) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t OZFootage::getDurationInFrames(OZFootage *this)
{
  if (!(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return *(unsigned int *)(*((void *)this + 1009) + 344);
  }
  unsigned int v2 = vcvtmd_s64_f64(*((double *)this + 1038) * (*(double (**)(OZFootage *))(*(void *)this + 1328))(this)+ 0.5+ 0.0000001);
  if (v2 <= 1) {
    return 1;
  }
  else {
    return v2;
  }
}

double OZFootage::getSeconds(OZFootage *this)
{
  void v14[3] = *(CGColorSpace **)MEMORY[0x1E4F143B8];
  double v2 = (*(double (**)(OZFootage *))(*(void *)this + 1296))(this);
  if (v2 == 0.0) {
    double v3 = 1.0;
  }
  else {
    double v3 = v2;
  }
  long double v4 = fmod(v3, 1.0);
  double v5 = ceil(v3 + -0.01);
  if (1.0 - v4 < 0.1) {
    double v3 = v5;
  }
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0 || !*((void *)this + 1009)) {
    return *((double *)this + 1038);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)v13);
  v14[0] = 0;
  if (PMClip::getVideoDescription(*((void *)this + 1009), __dst) == 7 || !v12)
  {
    double Seconds = PMClip::getSeconds(*((PMClip **)this + 1009), v6);
  }
  else
  {
    int v7 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1376))(this);
    if (v7 <= 1) {
      int v8 = 1;
    }
    else {
      int v8 = v7;
    }
    double Seconds = (double)v8 / v3;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v14);
  PCString::~PCString(v13);
  return Seconds;
}

void sub_1B7CACB30(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

double OZFootage::getFrameRate(OZFootage *this)
{
  char v2 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  double result = 30.0;
  if ((v2 & 1) == 0) {
    return *(double *)(*((void *)this + 1009) + 360);
  }
  return result;
}

CMTime *anonymous namespace'::doubleFrameRateToFig@<X0>(double a1@<D0>, CMTime *a2@<X8>)
{
  int64_t v3 = 6144000;
  int32_t v4 = 256256;
  int v5 = vcvtmd_s64_f64(a1 + 0.5 + 0.0000001);
  double v6 = a1 - (double)v5;
  BOOL v7 = v6 >= 0.0;
  if (v6 <= -0.1) {
    BOOL v7 = 1;
  }
  if (v5 != 30 || v7)
  {
    BOOL v8 = !v7;
    if (v5 != 24 || !v8)
    {
      if (v5 != 60) {
        BOOL v8 = 0;
      }
      if (v8)
      {
        int64_t v3 = 15360000;
      }
      else
      {
        int64_t v3 = (uint64_t)v5 << 8;
        int32_t v4 = 256;
      }
    }
  }
  else
  {
    int64_t v3 = 7680000;
  }
  return CMTimeMake(a2, v3, v4);
}

uint64_t OZFootage::getDynamicRangeType(PMClip **this)
{
  if ((*((uint64_t (**)(PMClip **))*this + 179))(this)) {
    return *((unsigned int *)this + 2078);
  }
  char v2 = this[1009];
  if (!v2) {
    return *((unsigned int *)this + 2078);
  }

  return PMClip::getDynamicRangeType(v2);
}

double OZFootage::getMasteringMaxLuminance(OZFootage *this)
{
  char v2 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
  double result = 0.0;
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 1009);
    if (v4) {
      return *(double *)(v4 + 496);
    }
  }
  return result;
}

uint64_t OZFootage::getAudioTracks(OZFootage *this)
{
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 1009);
  if (!v2) {
    return 1;
  }
  else {
    return *(unsigned int *)(v2 + 516);
  }
}

BOOL OZFootage::isRenderedAtFixedResolution(OZFootage *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4368), MEMORY[0x1E4F1FA48], 0.0);
  return v1 > 0.5;
}

uint64_t OZFootage::getFixedResolution(OZFootage *this, unsigned int *a2, unsigned int *a3, const CMTime *a4)
{
  unsigned int ValueAsInt = *((_DWORD *)this + 2122);
  if (!ValueAsInt)
  {
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4520), a4, 0.0);
    *((_DWORD *)this + 212OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = ValueAsInt;
  }
  *a2 = ValueAsInt;
  uint64_t result = *((unsigned int *)this + 2123);
  if (!result)
  {
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4672), a4, 0.0);
    *((_DWORD *)this + 2123) = result;
  }
  *a3 = result;
  return result;
}

void OZFootage::getTextureResolution(void *a1, uint64_t a2, const CMTime *a3, uint64_t a4)
{
  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v18);
  if ((*(unsigned int (**)(void *))(*a1 + 1432))(a1))
  {
    unsigned int v8 = *((_DWORD *)a1 + 2074);
    unsigned int v9 = *((_DWORD *)a1 + 2075);
  }
  else if (*(_DWORD *)(a4 + 92))
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v16);
    PMClip::getLayerDescription((PMClip *)a1[1009], (PMLayerDescription *)v16, *(_DWORD *)(a4 + 92));
    unsigned int v8 = v16[2];
    unsigned int v9 = v16[3];
    PCString::~PCString(&v17);
  }
  else
  {
    uint64_t v10 = a1[1009];
    unsigned int v8 = *(_DWORD *)(v10 + 288);
    unsigned int v9 = *(_DWORD *)(v10 + 292);
  }
  unsigned int ValueAsInt = *((_DWORD *)a1 + 2122);
  if (!ValueAsInt)
  {
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 565), a3, 0.0);
    *((_DWORD *)a1 + 212OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = ValueAsInt;
  }
  unsigned int v12 = *((_DWORD *)a1 + 2123);
  if (!v12)
  {
    unsigned int v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 584), a3, 0.0);
    *((_DWORD *)a1 + 2123) = v12;
  }
  if (((*(uint64_t (**)(void *))(*a1 + 1432))(a1) & 1) != 0
    || (uint64_t v13 = a1[1009]) == 0
    || !*(unsigned char *)(v13 + 408))
  {
    if (*(_DWORD *)(a4 + 92)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = ValueAsInt == 0;
    }
    char v15 = !v14;
    if ((v15 & (v12 != 0)) != 0)
    {
      unsigned int v8 = ValueAsInt;
      unsigned int v9 = v12;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = (double)v8;
  *(double *)(a2 + 24) = (double)v9;
  PCString::~PCString(&v19);
}

void sub_1B7CACFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  PCString::~PCString(v12 + 5);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

void OZFootage::getDuration(OZFootage *this@<X0>, uint64_t a2@<X8>)
{
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0
    || (uint64_t v4 = *((void *)this + 1009)) == 0)
  {
    Float64 v6 = *((double *)this + 1038);
    int32_t v7 = (int)*(double *)(*((void *)this + 121) + 368);
    CMTimeMakeWithSeconds((CMTime *)a2, v6, v7);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    PMClip::getDuration(v4, (CMTime *)a2);
    double v5 = (*(double (**)(OZFootage *))(*(void *)this + 1296))(this);
    if (v5 != (*(double (**)(OZFootage *))(*(void *)this + 1328))(this))
    {
      CMTimeMake(&v8, *(unsigned int *)(*((void *)this + 1009) + 344), (int)v5);
      *(CMTime *)a2 = v8;
    }
  }
}

double OZFootage::getFootageTime(OZFootage *this, const CMTime *a2, CMTime *a3)
{
  CMTime v20 = *(CMTime *)((char *)this + 208);
  CMTime v19 = *(CMTime *)((char *)this + 232);
  memset(&v18, 0, sizeof(v18));
  OZFootage::getFrameDuration(this, &v18);
  CMTime v17 = *a2;
  CMTime time1 = *a2;
  CMTime time2 = v19;
  int32_t v6 = CMTimeCompare(&time1, &time2);
  int32_t v7 = &v17;
  if (v6 > 0) {
    int32_t v7 = &v19;
  }
  long long v8 = *(_OWORD *)&v7->value;
  v17.CMTimeEpoch epoch = v7->epoch;
  *(_OWORD *)&v17.CMTimeValue value = v8;
  CMTime time2 = v20;
  *(_OWORD *)&time1.CMTimeValue value = v8;
  time1.CMTimeEpoch epoch = v17.epoch;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
  CMTime time1 = v17;
  unsigned int v9 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) < 0) {
    CMTime v17 = *v9;
  }
  float v10 = (*(double (**)(OZFootage *))(*(void *)this + 1296))(this);
  float v11 = (*(double (**)(OZFootage *))(*(void *)this + 1328))(this);
  memset(&time1, 0, sizeof(time1));
  memset(&time2, 0, sizeof(time2));
  operator/((long long *)&time1.value, (uint64_t)&time2, (uint64_t)v14);
  operator*((long long *)&v17.value, (uint64_t)v14, (uint64_t)&v15);
  double result = *(double *)&v15;
  CMTimeEpoch v13 = v16;
  *(_OWORD *)&a3->CMTimeValue value = v15;
  a3->CMTimeEpoch epoch = v13;
  return result;
}

uint64_t OZFootage::isStill(OZFootage *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  int64_t v3 = (uint64_t *)*((void *)this + 1009);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (v4) {
      uint64_t v5 = (*(uint64_t (**)(void))(v4 + 336))();
    }
    else {
      uint64_t v5 = 1;
    }
  }
  else
  {
    uint64_t v5 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 7768), MEMORY[0x1E4F1FA48], 0.0) != 0;
  }
  PCSharedMutex::unlock_shared(v2);
  return v5;
}

void sub_1B7CAD3F0(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::isInUseByUnreplacedDropZonesOnly(OZFootage *this, BOOL *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v4 = (OZScene *)*((void *)this + 121);
  if (v4 && (DependantNodes = (void *)OZScene::getDependantNodes(v4, *((_DWORD *)this + 20))) != 0)
  {
    if (a2) {
      *a2 = 1;
    }
    int32_t v6 = DependantNodes + 1;
    int32_t v7 = (void *)*DependantNodes;
    if ((void *)*DependantNodes == DependantNodes + 1)
    {
      char v9 = 1;
      char v8 = 1;
    }
    else
    {
      char v8 = 1;
      char v9 = 1;
      do
      {
        unint64_t Node = (unint64_t)OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
        uint64_t Object = OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
        if ((!Node
        {
          if (Node
          {
            Footage = OZImageElement::getFootage(v13);
            (*(void (**)(const void **__return_ptr))(*(void *)Footage + 1232))(&v24);
            long long v15 = OZImageElement::getFootage(v13);
            if ((*(unsigned int (**)(void *))(*(void *)v15 + 1432))(v15))
            {
              CMTimeEpoch v16 = (const __CFURL **)*((void *)this + 193);
              if (v16) {
                PCURL::operator=(&v24, v16);
              }
            }
            PCURL::PCURL((PCURL *)&v23, (const PCURL *)&v24);
            char isDefaultDropZoneFootage = OZImageElement::isDefaultDropZoneFootage((const PCURL *)&v23);
            PCURL::~PCURL((PCURL *)&v23);
            if (a2 && !OZImageElement::isBackgroundDropZone(v13)) {
              *a2 = 0;
            }
            v9 &= isDefaultDropZoneFootage;
            PCURL::~PCURL((PCURL *)&v24);
            char v8 = 0;
          }
          else
          {
            char v8 = 0;
            v9 &= (Node | Object) == 0;
            if (a2 && Node | Object)
            {
              char v9 = 0;
              char v8 = 0;
              *a2 = 0;
            }
          }
        }
        CMTime v18 = (void *)v7[1];
        if (v18)
        {
          do
          {
            CMTime v19 = v18;
            CMTime v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            CMTime v19 = (void *)v7[2];
            BOOL v20 = *v19 == (void)v7;
            int32_t v7 = v19;
          }
          while (!v20);
        }
        int32_t v7 = v19;
      }
      while (v19 != v6);
    }
    char v21 = v9 & (v8 ^ 1);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

void sub_1B7CAD700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void OZFootage::getUserFrameRate(OZFootage *this)
{
}

void OZFootage::setUserFrameRate(OZFootage *this, double a2, int a3)
{
  int32_t v6 = (OZChannel *)((char *)this + 3808);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3808), MEMORY[0x1E4F1FA48], 0.0);
  if (vabdd_f64(v7, a2) >= 0.0000001)
  {
    OZChannel::setValue(v6, MEMORY[0x1E4F1FA48], a2, a3);
    *((unsigned char *)this + 8280) = 0;
  }
  else if (*((unsigned char *)this + 8280))
  {
    return;
  }

  OZFootage::adjustDurationForChangedFrameRate(this, a3);
}

void OZFootage::adjustDurationForChangedFrameRate(OZFootage *this, int a2)
{
  uint64_t v4 = *((void *)this + 121);
  if (v4
    || OZApplication::getCurrentDoc((OZApplication *)theApp)
    && (uint64_t v4 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
  {
    memset(&v34, 0, sizeof(v34));
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v34);
    memset(&v33, 0, sizeof(v33));
    OZFootage::getDuration(this, (uint64_t)&v33);
    if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1376))(this) == 1) {
      CMTime v33 = v34;
    }
    CMTime time1 = *(CMTime *)((char *)this + 232);
    uint64_t v5 = (_OWORD *)((char *)this + 8256);
    CMTime time2 = *(CMTime *)((unsigned char *)this + 344);
    if (!CMTimeCompare(&time1, &time2)
      || (*(unsigned int (**)(OZFootage *))(*(void *)this + 1376))(this) == 1)
    {
      *(_OWORD *)&time1.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      CMTime v32 = v33;
      time1.CMTimeEpoch epoch = v6;
      OZChannelObjectRootBase::setTimeExtent((OZFootage *)((char *)this + 56), (const PCTimeRange *)&time1, a2);
    }
    CMTime time1 = v33;
    CMTime time2 = v34;
    if (CMTimeCompare(&time1, &time2))
    {
      *(_OWORD *)&time1.CMTimeValue value = *v5;
      time1.CMTimeEpoch epoch = *((void *)this + 1034);
      CMTime time2 = v34;
      if (CMTimeCompare(&time1, &time2))
      {
        uint64_t v7 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 664))(this);
        unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
        uint64_t DependantNodes = OZScene::getDependantNodes((OZScene *)v4, v8);
        if (DependantNodes)
        {
          float v10 = (void *)DependantNodes;
          char v26 = a2;
          PCURL::PCURL((PCURL *)&time1, @"Undo Footage Replace");
          OZScene::startCaptureModifiedChannels((OZScene *)v4, (const PCString *)&time1);
          PCString::~PCString((PCString *)&time1);
          BOOL v14 = (void *)*v10;
          unsigned int v12 = v10 + 1;
          CMTimeEpoch v13 = v14;
          if (v14 != v12)
          {
            do
            {
              uint64_t Object = (const void *)OZScene::getObject((OZScene *)v4, *((_DWORD *)v13 + 7));
              if (Object)
              {
                if (v16)
                {
                  CMTime v17 = v16;
                  CMTime v18 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)v16 + 640))(v16);
                  (*((void (**)(CMTime *__return_ptr))v18->var0 + 89))(&time1);
                  CMTime v30 = v32;
                  Footage = (OZFootage *)OZImageElement::getFootage(v17);
                  CMTime time2 = v30;
                  *(_OWORD *)&v35.CMTimeValue value = *v5;
                  v35.CMTimeEpoch epoch = *((void *)this + 1034);
                  PC_CMTimeSaferSubtract(&time2, &v35, (uint64_t)&time);
                  double Seconds = CMTimeGetSeconds(&time);
                  if (Footage == this && Seconds < 0.0001)
                  {
                    CMTime time2 = time1;
                    CMTime v28 = v33;
                    OZRetimingUtil::SetTimeExtent(v18, &time2, &v34, v20);
                  }
                }
              }
              uint64_t v22 = (void *)v13[1];
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  uint64_t v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (void *)v13[2];
                  BOOL v24 = *v23 == (void)v13;
                  CMTimeEpoch v13 = v23;
                }
                while (!v24);
              }
              CMTimeEpoch v13 = v23;
            }
            while (v23 != v12);
          }
          OZScene::endCaptureModifiedChannels((OZChannelBase **)v4, v11);
          LOBYTE(aOZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v26;
        }
      }
    }
    *uint64_t v5 = *(_OWORD *)&v33.value;
    *((void *)this + 1034) = v33.epoch;
    if ((a2 & 1) == 0)
    {
      uint64_t v25 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
      if (v25) {
        OZDocument::postNotification(*(OZDocument **)(v25 + 1584), 6144);
      }
    }
    *((unsigned char *)this + 8280) = 1;
  }
}

void sub_1B7CADCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25)
{
}

uint64_t OZFootage::setClipInterpretation(OZFootage *this, const PMLayerDescription *a2, const OZRenderParams *a3, PMFrameRequest *a4)
{
  CMTimeEpoch v6 = (char *)this + 8476;
  if (*((unsigned char *)this + 8484))
  {
    int ValueAsInt = *((_DWORD *)this + 2120);
  }
  else
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3296), MEMORY[0x1E4F1FA48], 0.0);
    *((_DWORD *)this + 2120) = ValueAsInt;
    v6[8] = 1;
  }
  *((_DWORD *)a4 + 27) = OZFootage::getFieldDominanceWithOverride(OZRenderParams const&)const::clipFieldOrderMap[ValueAsInt];
  if (*v6)
  {
    unsigned int v8 = *((_DWORD *)this + 2118);
  }
  else
  {
    unsigned int v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E4F1FA48], 0.0);
    *((_DWORD *)this + 2118) = v8;
    *CMTimeEpoch v6 = 1;
  }
  if (v8 <= 3) {
    HGTextureManager::storageRecyclingPolicy((uint64_t)a4, v8);
  }
  char InvertAlpha = OZFootage::getInvertAlpha(this);

  return HGTextureManager::recycleClientStorageTextures((uint64_t)a4, InvertAlpha);
}

uint64_t OZFootage::prepareFrameRequest(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  if (!*((void *)this + 1009)) {
    return 2;
  }
  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v22);
  if (PMClip::getLayerDescription(*((PMClip **)this + 1009), (PMLayerDescription *)v22, *((_DWORD *)a3 + 23)) == 7)
  {
    uint64_t v8 = 2;
  }
  else
  {
    OZFootage::setClipInterpretation(this, v6, v7, a3);
    if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0
      || (uint64_t v9 = *((void *)this + 1009)) == 0
      || !*(unsigned char *)(v9 + 408))
    {
      char v10 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this);
      uint64_t v11 = *((void *)this + 1009);
      char v12 = v11 ? v10 : 1;
      if (((v12 & 1) != 0 || !*(unsigned char *)(v11 + 1241)) && !*(unsigned char *)(v11 + 452))
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 0.0);
        *((void *)a3 + 17) = v13;
      }
    }
    uint64_t v14 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v14 + 336), &v20);
    *((__n128 *)a3 + 7) = v20;
    *((void *)a3 + 16) = v21;
    *((unsigned char *)a3 + 145) = *((unsigned char *)a2 + 202);
    uint64_t v15 = *(int *)(*(void *)(*(void *)((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this)
                                         + 1584)
                             + 224)
                 + 12);
    uint64_t v16 = (*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this);
    PMFrameRequest::setResolutionMode((uint64_t)a3, *(_DWORD *)(*(void *)(*(void *)(v16 + 1584) + 8 * v15 + 192) + 32));
    if (OZRenderParams::getReducedResolutionMedia(a2) && !PMFrameRequest::getResolutionMode(a3)) {
      PMFrameRequest::setResolutionMode((uint64_t)a3, 1);
    }
    if (OZRenderParams::getReducedResolutionOverride(a2)) {
      PMFrameRequest::setResolutionMode((uint64_t)a3, 0);
    }
    char isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated(a2);
    PMFrameRequest::setRenderIsForHDR_Deprecated((uint64_t)a3, isRenderForHDR_Deprecated);
    int StillImageInverseToneMapOperator_Deprecated = OZRenderParams::getStillImageInverseToneMapOperator_Deprecated(a2);
    PMFrameRequest::setStillImageInverseToneMapOperator_Deprecated((uint64_t)a3, StillImageInverseToneMapOperator_Deprecated);
    uint64_t v8 = 0;
  }
  PCString::~PCString(&v23);
  return v8;
}

void sub_1B7CAE03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFootage::getHeliumGraph@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  long long v30 = xmmword_1B7E74760;
  double v31 = 1.0;
  double v32 = 0.0;
  double v33 = 0.0;
  double v34 = 0.0;
  double v35 = 1.0;
  double v36 = 0.0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v43 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v40 = 0;
  __n128 v44 = *(__n128 *)MEMORY[0x1E4F1FA48];
  uint64_t v45 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v46 = 0;
  __int16 v47 = 0;
  uint64_t v48 = 0;
  __int16 v49 = 0;
  uint64_t v50 = 0x100000000;
  char v51 = 0;
  long long v52 = 0;
  long long v53 = 0;
  __int16 v54 = 768;
  uint64_t v55 = 0x408F400000000000;
  char v56 = 0;
  int v57 = 0;
  char v58 = 0;
  uint64_t v59 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v60 = _Q0;
  char v42 = *(unsigned char *)(a2 + 360);
  uint64_t v17 = (*(uint64_t (**)(void))(*a1 + 272))();
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v17 + 336), &v27);
  __n128 v44 = v27;
  uint64_t v45 = v28;
  float v26 = 0.0;
  v27.n128_u32[0] = 0;
  (*(void (**)(void *, __n128 *, float *, uint64_t, long long *))(*a1 + 1576))(a1, &v27, &v26, a2, &v30);
  if (((*(uint64_t (**)(void *))(*a1 + 1432))(a1) & 1) == 0)
  {
    uint64_t v18 = a1[1009];
    if (v18)
    {
      if (*(unsigned char *)(v18 + 408))
      {
        uint64_t v19 = *(unsigned int *)(a2 + 324);
        uint64_t v20 = *(unsigned int *)(a2 + 328);
        if (v19 == (uint64_t)v27.n128_f32[0])
        {
          float v21 = v26;
          if (v20 == (uint64_t)v26) {
            goto LABEL_9;
          }
        }
        else
        {
          float v21 = v26;
        }
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0x3FF0000000000000;
        double v22 = (double)v20 / v21;
        double v31 = (double)v19 / v27.n128_f32[0];
        double v32 = v31 * 0.0;
        double v33 = v31 * 0.0;
        double v34 = v22 * 0.0;
        double v35 = v22;
        double v36 = v22 * 0.0;
      }
    }
  }
LABEL_9:
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  PMFrameRequest::setWorkingColorSpace((CGColorSpace **)&v30, WorkingColorSpace);
  PMFrameRequest::setOverrideColorSpace((CGColorSpace **)&v30, 0);
  char isDynamicRangeTrackingRender = OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a2);
  PMFrameRequest::setIsDynamicRangeTrackingRender((uint64_t)&v30, isDynamicRangeTrackingRender);
  OZFootage::getHeliumGraph((uint64_t)a1, (const OZRenderParams *)a2, (uint64_t)&v30, a3, a4, a5, &v29, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v53);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v52);
}

void sub_1B7CAE32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZFootage::getHeliumGraph(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, FxColorDescription *a5@<X4>, double *a6@<X5>, void *a7@<X6>, HGBitmapLoader **a8@<X8>)
{
  *a7 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1432))(a1))
  {
    if (*(unsigned char *)(a1 + 8319)
      || (OZPlaybackEngine::OZPlaybackEngine(v18, 1), OZPlaybackEngine::operator==((_DWORD *)a2 + 235, v18)))
    {
      uint64_t v16 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v16);
      *a8 = (HGBitmapLoader *)v16;
    }
    else
    {
      OZFootage::getPlaceHolderHeliumGraph((void *)a1, a2, a4, a5, (uint64_t)a6, a8);
    }
  }
  else
  {
    PMFrameRequest::PMFrameRequest((uint64_t)v18, a3);
    if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v18))
    {
      uint64_t v17 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v17);
      *a8 = (HGBitmapLoader *)v17;
    }
    else
    {
      OZFootage::getHeliumGraphInternal(a1, a2, (uint64_t)v18, a4, a5, a6, a7, a8);
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v19);
  }
}

void sub_1B7CAE4C4(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,...)
{
  va_start(va1, a24);
  va_start(va, a24);
  float v26 = va_arg(va1, CGColorSpace *);
  HGObject::operator delete(v24);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZFootage::getHeliumGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  return OZFootage::getHeliumGraph((void *)(a1 - 1576), a2, a3, a4, a5, a6);
}

void OZFootage::getHeliumGraphInternal(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, FxColorDescription *a5@<X4>, double *a6@<X5>, void *a7@<X6>, HGBitmapLoader **a8@<X8>)
{
  *a7 = 0;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1432))(a1))
  {
    PCSharedMutex::lock_shared((std::mutex *)(a1 + 8080));
    uint64_t v17 = *(PMClip **)(a1 + 8072);
    if (!*((_DWORD *)v17 + 311)) {
      PMClip::open(v17);
    }
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v79);
    if (PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)v79, *(_DWORD *)(a3 + 92)) == 7)
    {
      OZFootage::getPlaceHolderHeliumGraph((void *)a1, a2, a4, a5, (uint64_t)a6, a8);
LABEL_46:
      PCString::~PCString(&v80);
      PCSharedMutex::unlock_shared((std::mutex *)(a1 + 8080));
      return;
    }
    CMTime v78 = *(CMTime *)a2;
    PMFrameRequest::PMFrameRequest((uint64_t)v73, a3);
    __int16 v70 = 0;
    __int32 v69 = 0;
    OZFootage::getClipBitmapInfo(a1, a2, v79, &v78, (uint64_t)v73, &v72, &v71, v68, (BOOL *)&v70 + 1, (BOOL *)&v70, &v69);
    OZRenderParams::getResolution(a2, (__n128 *)&v64);
    int v67 = 0;
    long long v75 = a4;
    uint64_t v18 = *(void *)(a1 + 8072);
    OZFootage::getFrameDuration((OZFootage *)a1, &v64);
    int Frame = PMClip::getFrame(v18, &v78, (uint64_t)&v64, (PMFrameRequest *)v73, (uint64_t)a5, &v67, (uint64_t)a6);
    double v20 = *a6;
    double v22 = a6[4];
    double v21 = a6[5];
    double v23 = sqrt(a6[1] * a6[1] + v21 * v21);
    double v24 = fabs(v21);
    if (v24 >= 1.0) {
      double v25 = v23;
    }
    else {
      double v25 = v23 + v23;
    }
    LODWORD(v24) = v71.i32[1];
    LODWORD(v23) = v71.i32[0];
    double v26 = (double)*(unint64_t *)&v23;
    double v27 = (double)*(unint64_t *)&v24;
    if (!(_BYTE)v70)
    {
LABEL_30:
      if (HIBYTE(v70))
      {
        double v45 = sqrt(v20 * v20 + v22 * v22);
        double v46 = v26 / v45;
        double v47 = v27 / v25;
        double v48 = v26 / v45 * -0.5;
        *(double *)&v64.CMTimeValue value = v48 + (double)v68[0] / v45;
        *(double *)&v64.CMTimeScale timescale = v47 * -0.5 + (double)v68[3] / v25;
        *(double *)&v64.CMTimeEpoch epoch = v26 / v45 + v48 - (double)v68[1] / v45 - *(double *)&v64.value;
        double v65 = v47 + v47 * -0.5 - (double)v68[2] / v25 - *(double *)&v64.timescale;
        __int16 v49 = (HGCrop *)HGObject::operator new(0x1A0uLL);
        HGCrop::HGCrop(v49);
        double v61 = 0.0;
        double v62 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v63 = _Q0;
        if (PCMatrix44Tmpl<double>::transformRect<double>(a6, (double *)&v64.value, (uint64_t)&v61))
        {
          uint64_t v55 = HGRectMake4i(vcvtmd_s64_f64(v61 + 0.5 + 0.0000001), vcvtmd_s64_f64(v62 + 0.5 + 0.0000001), vcvtmd_s64_f64(v61 + *(double *)&v63 + 0.5 + 0.0000001), vcvtmd_s64_f64(v62 + *((double *)&v63 + 1) + 0.5 + 0.0000001));
          (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v49 + 96))(v49, 0, (float)(int)v55, (float)SHIDWORD(v55), (float)v56, (float)v57);
          (*(void (**)(HGCrop *, void, HGNode *))(*(void *)v49 + 120))(v49, 0, v67);
          if (v67 != (HGNode *)v49)
          {
            if (v67) {
              (*(void (**)(void))(*(void *)v67 + 24))();
            }
            int v67 = (HGNode *)v49;
            (*(void (**)(HGCrop *))(*(void *)v49 + 16))(v49);
          }
          v54.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate(a6, *(double *)&v64.value + *(double *)&v64.epoch * 0.5 - (v48 + v46 * 0.5), *(double *)&v64.timescale + v65 * 0.5 - (v47 * -0.5 + v47 * 0.5), 0.0);
          goto LABEL_38;
        }
        if (v49) {
LABEL_38:
        }
          (*(void (**)(HGCrop *, __n128))(*(void *)v49 + 24))(v49, v54);
      }
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 3144), MEMORY[0x1E4F1FA48], 0.0);
      double v59 = *(double *)(*(void *)(a1 + 8072) + 416) / v58;
      if (v59 != 1.0)
      {
        *a6 = v59 * *a6;
        a6[4] = v59 * a6[4];
        a6[8] = v59 * a6[8];
        a6[12] = v59 * a6[12];
      }
      if (Frame)
      {
        long long v60 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v60);
        *a8 = (HGBitmapLoader *)v60;
        if (v67) {
          (*(void (**)(HGNode *))(*(void *)v67 + 24))(v67);
        }
      }
      else
      {
        *a8 = (HGBitmapLoader *)v67;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v77);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v76);
      goto LABEL_46;
    }
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)&v64);
    if (PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)&v64, v74))
    {
      uint64_t v28 = *(void *)(a1 + 8072);
      LODWORD(v9) = *(_DWORD *)(v28 + 288);
      LODWORD(v8) = *(_DWORD *)(v28 + 292);
      double v61 = 0.0;
      (*(void (**)(void, double *))(**(void **)(*(void *)(a1 + 4632) + 8) + 256))(*(void *)(*(void *)(a1 + 4632) + 8), &v61);
      double v29 = (double)v9;
      double v30 = (double)v8;
      double v31 = v26 / (double)v9;
      double v32 = v61;
      _NF = v61 < (double)v9;
      double v34 = v27 / v30;
      if (!_NF)
      {
        double v61 = 0.0;
        (*(void (**)(void, double *, double, double))(**(void **)(*(void *)(a1 + 4784) + 8) + 256))(*(void *)(*(void *)(a1 + 4784) + 8), &v61, v29, v32);
        if (v61 >= v30)
        {
LABEL_27:
          double v41 = 1.0 / v31;
          double v44 = 1.0 / v34;
          double v42 = 1.0;
          int v43 = a6;
LABEL_28:
          PCMatrix44Tmpl<double>::rightScale(v43, v41, v44, v42);
LABEL_29:
          PCString::~PCString(&v66);
          goto LABEL_30;
        }
      }
    }
    else
    {
      CMTimeScale timescale = v64.timescale;
      if (v64.timescale < 1) {
        goto LABEL_29;
      }
      signed int flags = v64.flags;
      if ((int)v64.flags < 1) {
        goto LABEL_29;
      }
      double v61 = 0.0;
      (*(void (**)(void, double *))(**(void **)(*(void *)(a1 + 4632) + 8) + 256))(*(void *)(*(void *)(a1 + 4632) + 8), &v61);
      v37.n128_f64[0] = (double)timescale;
      double v31 = v26 / (double)timescale;
      v38.n128_f64[0] = v61;
      double v34 = v27 / (double)flags;
      if (v61 >= (double)timescale)
      {
        double v61 = 0.0;
        (*(void (**)(void, double *, double, double))(**(void **)(*(void *)(a1 + 4784) + 8) + 256))(*(void *)(*(void *)(a1 + 4784) + 8), &v61, v37.n128_f64[0], v38.n128_f64[0]);
        v37.n128_f64[0] = v61;
        if (v61 >= (double)flags) {
          goto LABEL_27;
        }
      }
      double v61 = 0.0;
      (*(void (**)(void, double *, __n128, __n128))(**(void **)(*(void *)(a1 + 4632) + 8) + 256))(*(void *)(*(void *)(a1 + 4632) + 8), &v61, v37, v38);
      double v39 = v61;
      if (v61 != v26)
      {
        double v61 = 0.0;
        (*(void (**)(void, double *, double))(**(void **)(*(void *)(a1 + 4784) + 8) + 256))(*(void *)(*(void *)(a1 + 4784) + 8), &v61, v39);
        if (v61 != v27) {
          goto LABEL_27;
        }
      }
    }
    if (v31 >= v34) {
      double v40 = v34;
    }
    else {
      double v40 = v31;
    }
    double v41 = 1.0 / v40;
    double v42 = 1.0;
    int v43 = a6;
    double v44 = v41;
    goto LABEL_28;
  }

  OZFootage::getPlaceHolderHeliumGraph((void *)a1, a2, a4, a5, (uint64_t)a6, a8);
}

void sub_1B7CAECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCString a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,CGColorSpace *a50,CGColorSpace *a51)
{
  PCString::~PCString(&a21);
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a51);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a50);
  PCString::~PCString((PCString *)(v52 - 152));
  PCSharedMutex::unlock_shared(v51);
  _Unwind_Resume(a1);
}

void OZFootage::getPlaceHolderHeliumGraph(void *a1@<X0>, const OZRenderParams *a2@<X1>, const void *a3@<X3>, FxColorDescription *a4@<X4>, uint64_t a5@<X5>, HGBitmapLoader **a6@<X8>)
{
  FxColorDescription::setDynamicRange(a4, 0);
  *(void *)(a5 + 120) = 0x3FF0000000000000;
  *(void *)(a5 + 80) = 0x3FF0000000000000;
  *(void *)(a5 + 40) = 0x3FF0000000000000;
  *(void *)a5 = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  if (a3
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a4);
    OZFootage::setupPlaceHolderMetalTexture((OZFootage *)a1, a2, v15, CGColorSpace, v13);
    uint64_t v16 = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)(a1 + 1046));
    FxColorDescription::setCGColorSpace(a4, v16);
    uint64_t v17 = (HGBitmap *)a1[1054];
    if (v17) {
      (*(void (**)(void))(*(void *)v17 + 16))(a1[1054]);
    }
    uint64_t v18 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v18, v17);
    *a6 = v18;
    if (v17) {
      (*(void (**)(HGBitmap *))(*(void *)v17 + 24))(v17);
    }
  }
  else
  {
    uint64_t v19 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a4);
    OZFootage::getPlaceHolderBitmap((OZFootage *)a1, a2, v19, &v26);
    double v20 = v26;
    double v21 = (CGColorSpace *)PCImage::getCGColorSpace(v26);
    FxColorDescription::setCGColorSpace(a4, v21);
    double v22 = v27;
    double v24 = v20;
    double v25 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = 0;
    PGHelium::createBitmapNode((uint64_t)&v24, (unsigned int *)&v23, 0, 0, a6);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1B7CAF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HGObject::operator delete(v15);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  _Unwind_Resume(a1);
}

void OZFootage::getClipBitmapInfo(uint64_t a1, OZRenderParams *a2, int32x2_t *a3, CMTime *a4, uint64_t a5, int *a6, int32x2_t *a7, _DWORD *a8, BOOL *a9, BOOL *a10, __int32 *a11)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6120), a4, 0.0);
  *a8 = vcvtmd_s64_f64(v18);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6272), a4, 0.0);
  a8[1] = vcvtmd_s64_f64(v19);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6576), a4, 0.0);
  a8[2] = vcvtmd_s64_f64(v20);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6424), a4, 0.0);
  a8[3] = vcvtmd_s64_f64(v21);
  *a7 = vmax_s32(a3[1], (int32x2_t)0x100000001);
  *(void *)double v34 = 0;
  OZFootage::getFixedResolution((OZFootage *)a1, &v34[1], v34, a4);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1432))(a1) & 1) == 0
    && (uint64_t v22 = *(void *)(a1 + 8072)) != 0
    && *(unsigned char *)(v22 + 408)
    || *(_DWORD *)(a5 + 92)
    || (unsigned int v23 = v34[1]) == 0
    || (unsigned int v24 = v34[0]) == 0)
  {
    *a10 = 0;
    double v25 = a2;
  }
  else
  {
    double v25 = a2;
    if (a7->i32[0] == v34[1])
    {
      __int32 v26 = a7->i32[1];
      *a10 = v26 != v34[0];
      if (v26 == v24) {
        goto LABEL_13;
      }
    }
    else
    {
      *a10 = 1;
    }
    a7->i32[0] = v23;
    a7->i32[1] = v24;
  }
LABEL_13:
  OZRenderParams::getResolution(v25, &v35);
  if (v35.n128_f64[0] != 1.0 || v35.n128_f64[1] != 1.0) {
    *a10 = 1;
  }
  __int32 v27 = a7->i32[0];
  int v28 = a7->i32[0] - (a8[1] + *a8);
  if (!v28) {
    int v28 = 1;
  }
  *a6 = v28;
  int v29 = a7->i32[1] - (a8[3] + a8[2]);
  if (!v29) {
    int v29 = 1;
  }
  a6[1] = v29;
  BOOL v31 = v28 != v27 || v29 != a7->i32[1];
  *a9 = v31;
  __int32 v32 = a3[2].i32[1];
  *a11 = v32;
  if (v28 <= 1) {
    int v28 = 1;
  }
  if (v29 <= 1) {
    int v29 = 1;
  }
  *a6 = v28;
  a6[1] = v29;
  if (v32 == 9) {
    *a11 = 13;
  }
}

unint64_t OZFootage::estimateRenderMemory(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  Resolutiouint64_t n = OZRenderParams::getResolution(v4, (__n128 *)&v39);
  double v11 = *(double *)&v39.value;
  double v10 = *(double *)&v39.timescale;
  if (((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 1432))(v8, Resolution) & 1) != 0
    || !*(void *)(v8 + 8072))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v39);
    if ((void *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v39))
    {
      std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v39, &v39);
      *(double *)&unint64_t v13 = ceil(v10 * (double)*(int *)(v8 + 8300));
      double v14 = ceil(v11 * (double)*(int *)(v8 + 8296)) * *(double *)&v13;
      LODWORD(v13) = *((_DWORD *)v5 + 84);
      return (unint64_t)(v14 * (double)v13 * (double)(*((_DWORD *)v5 + 83) >> 3));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v37);
    if (PMClip::getLayerDescription(*(PMClip **)(v8 + 8072), (PMLayerDescription *)v37, *(_DWORD *)(v3 + 92)) == 7)
    {
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v39);
      if ((void *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v39))
      {
        std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v39, &v39);
        *(double *)&unint64_t v19 = ceil(v10 * (double)*(int *)(v8 + 8300));
        double v20 = ceil(v11 * (double)*(int *)(v8 + 8296)) * *(double *)&v19;
        LODWORD(v19) = *((_DWORD *)v5 + 84);
        unint64_t v12 = (unint64_t)(v20 * (double)v19 * (double)(*((_DWORD *)v5 + 83) >> 3));
      }
      else
      {
        unint64_t v12 = 0;
      }
    }
    else
    {
      CMTime v39 = *(CMTime *)v5;
      OZFootage::getFootageTime((OZFootage *)v8, &v39, &v36);
      PMFrameRequest::PMFrameRequest((uint64_t)v33, v3);
      __int32 v28 = 0;
      OZFootage::getClipBitmapInfo(v8, v5, v37, &v36, (uint64_t)v33, v32, &v31, v27, &v30, &v29, &v28);
      int v15 = v32[0];
      int v16 = v32[1];
      __n128 v25 = 0uLL;
      uint64_t v26 = 0;
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(*(void *)(v8 + 968) + 336), &v25);
      if (*((_DWORD *)v5 + 123)) {
        v25.n128_i64[0] /= 2;
      }
      OZFootage::getCacheHashKey((OZFootage *)v8, *(PMClip **)(v8 + 8072), &v36, v17, (const PMFrameRequest *)v33, v5, (const PMLayerDescription *)v37);
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v39);
      PCHashWriteStream::writeValue((int8x8_t *)&v39, (const void *)v8);
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v39);
      PCHash128::operator+=((int *)&v24, (int *)Hash);
      if ((void *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v24))
      {
        std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v24, &v24);
        unsigned int v21 = vcvtpd_u64_f64(v10 * (double)v16) * vcvtpd_u64_f64(v11 * (double)v15);
        if ((v28 - 10) > 6) {
          int v22 = 4;
        }
        else {
          int v22 = *(_DWORD *)&asc_1B8382B38[4 * v28 - 40];
        }
        unint64_t v12 = v21 * v22;
      }
      else
      {
        unint64_t v12 = 0;
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v39);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v35);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v34);
    }
    PCString::~PCString(&v38);
  }
  return v12;
}

void sub_1B7CAF684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CGColorSpace *a45,CGColorSpace *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,PCString a62,char a63)
{
}

void anonymous namespace'::missingFootageHash(_anonymous_namespace_ *this, PCHash128 *a2, OZFootage *a3, double a4, double a5)
{
  uint64_t v5 = MEMORY[0x1F4188790](this);
  double v7 = v6;
  double v9 = v8;
  int v11 = v10;
  int v13 = v12;
  int v15 = v14;
  int v16 = (_OWORD *)v5;
  v17[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
  PCHashWriteStream::writeValue(v17, v15);
  PCHashWriteStream::writeValue(v17, v13);
  PCHashWriteStream::writeValue(v17, v11);
  PCHashWriteStream::writeValue(v17, v9);
  PCHashWriteStream::writeValue(v17, v7);
  *int v16 = *(_OWORD *)PCHashWriteStream::getHash(v17)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
}

void sub_1B7CAF7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t OZFootage::getPlaceHolderBitmap@<X0>(OZFootage *this@<X0>, const OZRenderParams *a2@<X1>, CGColorSpace *WorkingColorSpace@<X3>, void *a4@<X8>)
{
  double v9 = (PCMutex *)((char *)this + 8184);
  int v15 = (char *)this + 8184;
  PCMutex::lock((PCMutex *)((char *)this + 8184));
  char v16 = 1;
  uint64_t v10 = *((void *)this + 1041);
  if (!v10 || *((double *)this + 1043) != 1.0 || *((double *)this + 1044) != 1.0)
  {
    if (*((void *)this + 1037)) {
      int v11 = *((_DWORD *)this + 2074);
    }
    else {
      int v11 = *((_DWORD *)a2 + 81);
    }
    if (*((void *)this + 1037)) {
      int v12 = *((_DWORD *)this + 2075);
    }
    else {
      int v12 = *((_DWORD *)a2 + 82);
    }
    if (!WorkingColorSpace) {
      WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
    }
    createPlaceHolderBitmap(v11, v12, 1.0, 1.0, WorkingColorSpace);
  }
  uint64_t v13 = *((void *)this + 1042);
  *a4 = v10;
  a4[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return PCMutex::unlock(v9);
}

void sub_1B7CAF980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::eval(OZFootage *this, OZRenderParams *a2)
{
  return 0;
}

void OZFootage::setupPlaceHolderMetalTexture(OZFootage *this, const OZRenderParams *a2, const PMFrameRequest *a3, CGColorSpace *a4, HGGPURenderer *a5)
{
  OZFootage::getPlaceHolderBitmap(this, a2, a4, &v28);
  double v7 = (PCMutex *)((char *)this + 8184);
  v26[1] = (OZFootage *)((char *)this + 8184);
  PCMutex::lock((PCMutex *)((char *)this + 8184));
  char v27 = 1;
  double v8 = (char *)this + 8360;
  if (!*((unsigned char *)this + 8360))
  {
    double v9 = (PCBitmap *)v28;
    int v10 = (*(uint64_t (**)(void))(**(void **)(v28 + 64) + 48))(*(void *)(v28 + 64));
    uint64_t Format = PGHelium::makeFormat(v10);
    int v12 = (*(uint64_t (**)(PCBitmap *))(*(void *)v9 + 16))(v9);
    int v13 = (*(uint64_t (**)(PCBitmap *))(*(void *)v9 + 24))(v9);
    __n128 v25 = a5;
    if (v12 >= 0) {
      int v14 = v12;
    }
    else {
      int v14 = v12 + 1;
    }
    if (v13 >= 0) {
      int v15 = v13;
    }
    else {
      int v15 = v13 + 1;
    }
    uint64_t v16 = HGRectMake4i(-(v14 >> 1), -(v15 >> 1), v12 - (v14 >> 1), v13 - (v15 >> 1));
    uint64_t v18 = v17;
    uint64_t v19 = (*(uint64_t (**)(void))(**((void **)v9 + 8) + 16))(*((void *)v9 + 8));
    unsigned int BytesPerRow = PCBitmap::getBytesPerRow(v9);
    unsigned int v21 = (char *)HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap(v21, v16, v18, Format, v19, BytesPerRow);
    MetalContext = (HGMetalTexture *)HGGPURenderer::GetMetalContext(v25);
    *(void *)&v30.CMTime var0 = *(void *)(v21 + 28);
    *(void *)&v30.var2 = 0;
    HGMetalTexture::createFromBitmap(MetalContext, (HGMetalContext *)v21, *(HGBitmap **)(v21 + 20), v30, 0, v26);
    unsigned int v23 = (OZFootage *)((char *)this + 8368);
    PGMetalTexture::setTexture((uint64_t)v23, (uint64_t *)v26, 0);
    if (v26[0]) {
      (*(void (**)(HGMetalContext *))(*(void *)v26[0] + 24))(v26[0]);
    }
    CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)v9);
    PCImage::setColorSpace(v23, CGColorSpace);
    *double v8 = 1;
    (*(void (**)(char *))(*(void *)v21 + 24))(v21);
  }
  PCMutex::unlock(v7);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1B7CAFC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a11);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B7CAFD04()
{
}

void OZFootage::getErrorImage(OZFootage *this, const OZRenderParams *a2, CGColorSpace *a3)
{
}

void sub_1B7CAFE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, CGColorSpace *a13)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a13);
  int v15 = *(std::__shared_weak_count **)(v13 - 24);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::createErrorBitmap(_anonymous_namespace_ *this, const OZRenderParams *a2, CGColorSpace *a3)
{
  OZRenderParams::getResolution(this, &v3);
  operator new();
}

void sub_1B7CB0204(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void OZFootage::getErrorHeliumGraph(_anonymous_namespace_ *a1, uint64_t a2, FxColorDescription *a3)
{
  FxColorDescription::setDynamicRange(a3, 0);
  if (!FxColorDescription::getCGColorSpace(a3))
  {
    uint64_t v5 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(0);
    FxColorDescription::setCGColorSpace(a3, v5);
  }
  CGColorSpace = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
  if (*((_DWORD *)a1 + 80) == 1) {
  OZFootage::getErrorImage(a1, CGColorSpace, v7);
  }
}

void sub_1B7CB03A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFootage::reloadResources(OZFootage *this, PGContext *a2)
{
  __n128 v3 = (PMClip *)*((void *)this + 1009);
  if (v3) {
    PMClip::reloadResources(v3);
  }
  v5[1] = (uint64_t)this + 8184;
  PCMutex::lock((PCMutex *)((char *)this + 8184));
  char v6 = 1;
  v5[0] = 0;
  PGMetalTexture::setTexture((uint64_t)this + 8368, v5, 0);
  if (v5[0]) {
    (*(void (**)(uint64_t))(*(void *)v5[0] + 24))(v5[0]);
  }
  *((unsigned char *)this + 8360) = 0;
  return PCMutex::unlock((PCMutex *)((char *)this + 8184));
}

void sub_1B7CB0480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::updateModifiedDate(OZFootage *this)
{
  uint64_t result = *((void *)this + 1009);
  if (result)
  {
    int ModificationDate = PMClip::getModificationDate((PMClip *)result);
    if (*((_DWORD *)this + 384) == ModificationDate)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 384) = ModificationDate;
      return 1;
    }
  }
  return result;
}

uint64_t OZFootage::updateAssociatedResourcesAvailable(OZFootage *this)
{
  return 0;
}

uint64_t OZFootage::updateMissingFile(OZFootage *this)
{
  if (((*(unsigned int (**)(OZFootage *))(*(void *)this + 1352))(this)
     && (uint64_t v2 = *((void *)this + 1009)) != 0
     && !*(unsigned char *)(v2 + 1240)
     || (*(unsigned int (**)(OZFootage *))(*(void *)this + 1360))(this) && *((void *)this + 1009)
     || (*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this) && *((void *)this + 1009))
    && (*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)
    && *((void *)this + 1009))
  {
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  }
  return 0;
}

uint64_t OZFootage::writeBody(OZFootage *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, unsigned int a5)
{
  int v7 = OZFootage::isInUseByUnreplacedDropZonesOnly(this, 0);
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this)) {
    BOOL v61 = *(unsigned char *)(*(void *)((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this) + 1584) + 160) != 0;
  }
  else {
    BOOL v61 = 0;
  }
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this)) {
    BOOL v8 = *(_DWORD *)(*(void *)((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this) + 1584) + 320) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  {
    if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) != 0
      || (uint64_t v9 = *((void *)this + 1009)) == 0
      || (double v10 = 1.0, !*(unsigned char *)(v9 + 1241)))
    {
      double v10 = 0.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 7464), MEMORY[0x1E4F1FA48], v10, 1);
  }
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFootageScope);
  if (v7)
  {
    if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)
      && (int v11 = (const __CFURL **)*((void *)this + 193)) != 0)
    {
      PCURL::getAsFileSystemString(v11, v83);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, v83);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      int v12 = v83;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, OZFootage *))(*(void *)this + 1240))(&v82, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, uint64_t *))(*(void *)a2 + 104))(a2, &v82);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      int v12 = (PCString *)&v82;
    }
LABEL_23:
    PCString::~PCString(v12);
    goto LABEL_24;
  }
  if (v8)
  {
    if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)
      && (uint64_t v13 = (const __CFURL **)*((void *)this + 193)) != 0)
    {
      PCURL::getAsURLString(v13, (PCURL *)v81);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v81);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      int v12 = (PCString *)v81;
    }
    else
    {
      (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)this + 1272))(&v80, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v80);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      int v12 = &v80;
    }
    goto LABEL_23;
  }
LABEL_24:
  BOOL v65 = v8;
  int v66 = v7;
  if (v14 && (((*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this) | v7) & 1) == 0)
  {
    URL = (const __CFURL **)PCXMLWriteStream::getURL(v14);
    PCURL::getAsFileSystemString(URL, &v79);
    (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)this + 1264))(&v78, this);
    uint64_t v16 = (CFURLRef *)PCXMLWriteStream::getURL(v14);
    PCURL::getContainingFolderAsURLString(v16, (PCURL *)&v77);
    uint64_t v17 = PCString::cf_str(&v79);
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v17, @"/");
    uint64_t v19 = PCString::cf_str(&v78);
    CFArrayRef v20 = CFStringCreateArrayBySeparatingStrings(0, v19, @"/");
    int Count = CFArrayGetCount(ArrayBySeparatingStrings);
    int v22 = CFArrayGetCount(v20);
    int v23 = v22;
    if (Count >= v22) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = Count;
    }
    if ((int)v24 >= 1)
    {
      CFIndex v25 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v25);
        CFStringRef v27 = (const __CFString *)CFArrayGetValueAtIndex(v20, v25);
        if (CFStringCompare(ValueAtIndex, v27, 1uLL)) {
          break;
        }
        if (v24 == ++v25) {
          goto LABEL_35;
        }
      }
      LODWORD(v24) = v25;
      if (!v25) {
        goto LABEL_46;
      }
LABEL_35:
      if (v24 != 1
        || (CFStringRef v28 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v28)))
      {
        PCSharedCount::PCSharedCount(&v76);
        if (~v24 + Count >= 1)
        {
          int v29 = Count - v24;
          do
          {
            PCString::append((PCString *)&v76, "../");
            --v29;
          }
          while (v29 > 1);
        }
        if ((int)v24 < v23)
        {
          uint64_t v30 = 0;
          do
          {
            int32x2_t v31 = CFArrayGetValueAtIndex(v20, v24 + v30);
            PCURL::PCURL((PCURL *)&v75, v31);
            PCString::append((PCString *)&v76, &v75);
            PCString::~PCString(&v75);
            if (v23 - 1 > (int)v24 + (int)v30) {
              PCString::append((PCString *)&v76, "/");
            }
            ++v30;
          }
          while ((int)v24 + (int)v30 < v23);
        }
        PCURL::PCURL((PCURL *)&v75, (const PCString *)&v76, 0);
        PCSharedCount::PCSharedCount(&v74);
        PCURL::getAsURLString((const __CFURL **)&v75, (PCURL *)&v73);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v73);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        PCString::~PCString(&v73);
        PCString::~PCString((PCString *)&v74);
        PCURL::~PCURL((PCURL *)&v75);
        PCString::~PCString((PCString *)&v76);
      }
    }
LABEL_46:
    CFRelease(ArrayBySeparatingStrings);
    CFRelease(v20);
    PCString::~PCString(&v77);
    PCString::~PCString(&v78);
    PCString::~PCString(&v79);
  }
  if ((v66 | v65)) {
    goto LABEL_78;
  }
  if (!(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this))
  {
    (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)this + 1272))(&v79, this);
    if (v14)
    {
      double v34 = (const __CFURL **)PCXMLWriteStream::getURL(v14);
      PCURL::getAsURLString(v34, (PCURL *)&v78);
      __n128 v35 = PCString::cf_str(&v78);
      CFArrayRef v36 = CFStringCreateArrayBySeparatingStrings(0, v35, @"/");
      __n128 v37 = PCString::cf_str(&v79);
      CFArrayRef v38 = CFStringCreateArrayBySeparatingStrings(0, v37, @"/");
      int v39 = CFArrayGetCount(v36);
      if ((int)CFArrayGetCount(v38) >= v39)
      {
        if (v39 < 2)
        {
          BOOL v40 = 0;
        }
        else
        {
          CFIndex v43 = 0;
          uint64_t v44 = v39 - 1;
          if (v44 <= 1) {
            uint64_t v44 = 1;
          }
          uint64_t v45 = v44 - 1;
          do
          {
            CFStringRef v46 = (const __CFString *)CFArrayGetValueAtIndex(v36, v43);
            CFStringRef v47 = (const __CFString *)CFArrayGetValueAtIndex(v38, v43);
            CFComparisonResult v48 = CFStringCompare(v46, v47, 1uLL);
            BOOL v40 = v48 != kCFCompareEqualTo;
            if (v48) {
              break;
            }
          }
          while (v45 != v43++);
        }
      }
      else
      {
        BOOL v40 = 1;
      }
      CFRelease(v36);
      CFRelease(v38);
      PCString::~PCString(&v78);
    }
    else
    {
      BOOL v40 = 0;
    }
    PCString::PCString(&v78, "Contents/LibraryContent");
    if (*((unsigned char *)this + 1540))
    {
      int v50 = PCString::find(&v79, &v78);
      int v51 = v61;
      if (v50 >= 0) {
        int v51 = 1;
      }
      if (((v40 | v51) & 1) == 0) {
        goto LABEL_76;
      }
    }
    else if (!v61 && !v40)
    {
LABEL_76:
      PCString::~PCString(&v78);
      double v33 = &v79;
      goto LABEL_77;
    }
    PCString::PCString(&v70, &v79);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v70);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v70);
    goto LABEL_76;
  }
  __int32 v32 = (const __CFURL **)*((void *)this + 194);
  if (v32)
  {
    PCURL::getAsURLString(v32, (PCURL *)v72);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v72);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    double v33 = (PCString *)v72;
LABEL_77:
    PCString::~PCString(v33);
    goto LABEL_78;
  }
  double v41 = (const __CFURL **)*((void *)this + 193);
  char v42 = !v61;
  if (!v41) {
    char v42 = 1;
  }
  if ((v42 & 1) == 0)
  {
    PCURL::getAsURLString(v41, (PCURL *)v71);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(void *)a2 + 104))(a2, v71);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    double v33 = (PCString *)v71;
    goto LABEL_77;
  }
LABEL_78:
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this))
  {
    uint64_t v53 = *((unsigned int *)this + 2074);
    uint64_t v54 = *((unsigned int *)this + 2075);
    double Seconds = *((double *)this + 1038);
    uint64_t DynamicRangeType = *((unsigned int *)this + 2078);
  }
  else
  {
    int v57 = (unsigned int *)*((void *)this + 1009);
    uint64_t v53 = v57[72];
    uint64_t v54 = v57[73];
    double Seconds = PMClip::getSeconds((PMClip *)v57, v52);
    uint64_t DynamicRangeType = PMClip::getDynamicRangeType(*((PMClip **)this + 1009));
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v53);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v54);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, Seconds);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, DynamicRangeType);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v58 = *((void *)this + 121);
  if (v58)
  {
    CMTime v69 = *(CMTime *)((unsigned char *)this + 344);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v58 + 336), (__n128 *)&v68);
    uint64_t SampleNumber = PC_CMTimeGetSampleNumber(&v69, &v68);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 72))(a2, SampleNumber);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCString::PCString(&v67, (const PCString *)this + 1036);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v67);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v67);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

void sub_1B7CB1644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,PCString a29,PCString a30,PCString a31,PCString a32,PCString a33,PCString a34)
{
  PCString::~PCString(&a30);
  PCURL::~PCURL((PCURL *)&a31);
  PCString::~PCString(&a32);
  PCString::~PCString(&a33);
  PCString::~PCString(&a34);
  PCString::~PCString((PCString *)(v34 - 144));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZFootage::writeBody(OZFootage *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, unsigned int a5)
{
  return OZFootage::writeBody((OZFootage *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZFootage::parseBegin(OZFootage *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], -1.0, 0);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZFootage::parseBegin(OZFootage *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZFootage::parseEnd(OZFootage *this, PCSerializerReadStream *a2)
{
  if (*((void *)this + 1009) && ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0)
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&v20);
    PCString::set((PCString *)this + 1036, &v20);
    PCString::~PCString(&v20);
  }
  if (*((_DWORD *)a2 + 26) < 3u) {
    goto LABEL_13;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 0.0);
  if (v4 <= 0.0)
  {
    if (*((void *)this + 1009)
      && ((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0)
    {
      OZFootage::setGammaFromFile(this);
    }
    else
    {
      OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 1.8, 0);
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), v5);
  }
  if (*((_DWORD *)a2 + 26) < 3u
    || (OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 0.0), v7 <= 0.0))
  {
LABEL_13:
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), 1.8);
    OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E4F1FA48], 1.8, 0);
  }
  if (*((unsigned char *)this + 8476))
  {
    int ValueAsInt = *((_DWORD *)this + 2118);
  }
  else
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E4F1FA48], 0.0);
    *((_DWORD *)this + 2118) = ValueAsInt;
    *((unsigned char *)this + 8476) = 1;
  }
  if (ValueAsInt == 4) {
    OZFootage::guessAlphaFormat(this, 0);
  }
  uint64_t v9 = *((void *)this + 121);
  if ((v9
     || OZApplication::getCurrentDoc((OZApplication *)theApp)
     && (uint64_t v9 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
    && !*(unsigned char *)(v9 + 1576)
    && *((unsigned char *)this + 8280))
  {
    OZFootage::adjustDurationForChangedFrameRate(this, 0);
  }
  if (*((double *)this + 1038) == 0.0)
  {
    if (PCString::size((PCString *)this + 196))
    {
      PCURL::PCURL((PCURL *)&v20, (const PCString *)this + 196, 0);
      int SequenceStart = PCURL::getSequenceStart((const __CFURL **)&v20);
      if (SequenceStart < 0)
      {
        PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v19);
        uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(v15);
        uint64_t Reader = PMMediaManager::findReader(Instance, (const __CFURL **)&v20);
        if (Reader)
        {
          if ((*(unsigned int (**)(void))(Reader + 232))()) {
            unsigned int v14 = 100;
          }
          else {
            unsigned int v14 = 1;
          }
        }
        else
        {
          unsigned int v14 = 100;
        }
        PCAutoreleasePool::~PCAutoreleasePool(&v19);
      }
      else
      {
        unsigned int v14 = PCURL::getSequenceEnd((const __CFURL **)&v20) - SequenceStart + 1;
      }
      PCURL::~PCURL((PCURL *)&v20);
    }
    else
    {
      unsigned int v14 = 1;
    }
    *((double *)this + 1038) = (double)v14 / (*(double (**)(OZFootage *))(*(void *)this + 1328))(this);
  }
  OZSceneNode::parseEnd(this, a2);
  return 1;
}

void sub_1B7CB1B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t anonymous namespace'::removeAnimation(OZChannel *this, OZChannelDouble *a2)
{
  uint64_t result = (*((uint64_t (**)(OZChannel *, void))this->var0 + 69))(this, 0);
  if (result)
  {
    double v4 = (CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble(this, MEMORY[0x1E4F1FA48], 0.0);
    double v6 = v5;
    CMTime v8 = *v4;
    if ((*((unsigned int (**)(OZChannel *, CMTime *, void))this->var0 + 79))(this, &v8, 0))
    {
      do
        (*((void (**)(OZChannel *, CMTime *))this->var0 + 76))(this, &v8);
      while (((*((uint64_t (**)(OZChannel *, CMTime *, void))this->var0 + 79))(this, &v8, 0) & 1) != 0);
    }
    CMTimeMake(&v7, 1, 1);
    CMTime v8 = v7;
    if ((*((unsigned int (**)(OZChannel *, CMTime *, void))this->var0 + 78))(this, &v8, 0))
    {
      do
        (*((void (**)(OZChannel *, CMTime *))this->var0 + 76))(this, &v8);
      while (((*((uint64_t (**)(OZChannel *, CMTime *, void))this->var0 + 78))(this, &v8, 0) & 1) != 0);
    }
    (*((void (**)(OZChannel *, void, void))this->var0 + 63))(this, 0, 0);
    return (*((uint64_t (**)(OZChannel *, void, void, double))this->var0 + 89))(this, MEMORY[0x1E4F1FA48], 0, v6);
  }
  return result;
}

uint64_t non-virtual thunk to'OZFootage::parseEnd(OZFootage *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZFootage::parseElement(OZFootage *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v26);
  int64_t value = 0;
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this)) {
    BOOL v6 = *(_DWORD *)(*(void *)((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this) + 1584) + 104) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  if ((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this)) {
    BOOL v7 = *(unsigned char *)(*(void *)((*(uint64_t (**)(OZFootage *))(*(void *)this + 272))(this) + 1584) + 160) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  *((unsigned char *)this + 1540) = 1;
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      if (!v6) {
        *((unsigned char *)this + 8316) = 1;
      }
      if ((*((unsigned char *)this + 1541) || (*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this))
        && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
      {
        PCURL::PCURL((PCURL *)&v23, (const PCString *)&v26, 0);
        if ((*(unsigned int (**)(OZFootage *, CMTime *))(*(void *)this + 1400))(this, &v23))
        {
          *((unsigned char *)this + 1541) = 0;
          if (*((unsigned char *)this + 1540)) {
            char v19 = 1;
          }
          else {
            char v19 = v7;
          }
          if ((v19 & 1) == 0) {
            (*(void (**)(OZFootage *))(*(void *)this + 104))(this);
          }
        }
        PCURL::~PCURL((PCURL *)&v23);
      }
      goto LABEL_39;
    case 2:
    case 8:
      if (!v6) {
        *((unsigned char *)this + 8316) = 1;
      }
      if (!*((unsigned char *)this + 1541) && !(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)) {
        goto LABEL_39;
      }
      if (!v8) {
        goto LABEL_39;
      }
      uint64_t v9 = v8;
      if (!PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26)) {
        goto LABEL_39;
      }
      double v10 = PCString::cf_str((PCString *)&v26);
      CFStringRef v11 = CFURLCreateStringByReplacingPercentEscapes(0, v10, &stru_1F119C770);
      PCURL::PCURL((PCURL *)&v24, v11);
      PCURL::PCURL((PCURL *)&v23, &v24, 0);
      PCString::~PCString(&v24);
      int v12 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(void *)this + 1416))(this, &v23);
      PCURL::~PCURL((PCURL *)&v23);
      if (!(*(unsigned int (**)(OZFootage *))(*(void *)this + 1432))(this)
        || !*(void *)PCXMLReadStream::getURL(v9))
      {
        if (!v12) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
      URL = (CFURLRef *)PCXMLReadStream::getURL(v9);
      CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
      CFURLRef v15 = (const __CFURL *)MEMORY[0x1BA9BE3F0](0, v11, 0, 0, PathComponent);
      CFURLRef v16 = CFURLCopyAbsoluteURL(v15);
      PCURL::PCURL((PCURL *)&v23, v16);
      char v17 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(void *)this + 1400))(this, &v23);
      if (*((unsigned char *)this + 1540)) {
        char v17 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(void *)this + 1416))(this, &v23);
      }
      char v18 = v17;
      CFRelease(v11);
      CFRelease(PathComponent);
      CFRelease(v15);
      CFRelease(v16);
      PCURL::~PCURL((PCURL *)&v23);
      if (v18)
      {
LABEL_41:
        *((unsigned char *)this + 1541) = 0;
        if (*((unsigned char *)this + 1540)) {
          char v22 = 1;
        }
        else {
          char v22 = v7;
        }
        if ((v22 & 1) == 0) {
          (*(void (**)(OZFootage *))(*(void *)this + 104))(this);
        }
      }
LABEL_39:
      PCString::~PCString((PCString *)&v26);
      return 1;
    case 3:
      uint64_t v20 = 8296;
      goto LABEL_34;
    case 4:
      uint64_t v20 = 8300;
LABEL_34:
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)this + v20);
      goto LABEL_39;
    case 5:
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 8304);
      goto LABEL_39;
    case 6:
      PCSerializerReadStream::getAsUInt64((uint64_t)a2, (uint64_t)a3, (uint64_t)&value);
      CMTimeMake(&v23, value, 1);
      *((CMTime *)this + 344) = v23;
      goto LABEL_39;
    case 7:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 8288);
      goto LABEL_39;
    case 0xA:
      LODWORD(v23.value) = 0;
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v23);
      *((_DWORD *)this + 2078) = v23.value;
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

void sub_1B7CB2424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, PCString a14)
{
}

uint64_t non-virtual thunk to'OZFootage::parseElement(OZFootage *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZFootage::isActiveInTimeRange(OZFootage *this, const PCTimeRange *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZFootage::isActiveInTimeRange(OZFootage *this, const PCTimeRange *a2)
{
  return 1;
}

uint64_t OZFootage::calcHashForState(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1432))(a1) & 1) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 8072);
    if (v8)
    {
      if (*(_DWORD *)(v8 + 344) != 1)
      {
        double v12 = ceil(*(double *)(v8 + 360) + -0.01);
        if (*(unsigned char *)(v8 + 1240)) {
          double v13 = v12;
        }
        else {
          double v13 = *(double *)(v8 + 360);
        }
        if (*(unsigned char *)(a1 + 8484))
        {
          if (*(_DWORD *)(a1 + 8480))
          {
LABEL_17:
            CMTime v19 = *a3;
            operator*(&v19, 2, &v20);
            double v14 = FigTimeToFrameWithRate(&v20, v13);
            int v15 = 2 * *(_DWORD *)(*(void *)(a1 + 8072) + 344);
            goto LABEL_20;
          }
        }
        else
        {
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 3296), MEMORY[0x1E4F1FA48], 0.0);
          *(_DWORD *)(a1 + 8480) = ValueAsInt;
          *(unsigned char *)(a1 + 8484) = 1;
          if (ValueAsInt) {
            goto LABEL_17;
          }
        }
        CMTime v20 = *a3;
        double v14 = FigTimeToFrameWithRate(&v20, v13);
        int v15 = *(_DWORD *)(*(void *)(a1 + 8072) + 344);
LABEL_20:
        int v17 = v15 - 1;
        int v18 = (int)v14 & ~((int)v14 >> 31);
        if (v17 >= v18) {
          uint64_t v9 = v18;
        }
        else {
          uint64_t v9 = v17;
        }
        goto LABEL_5;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_5:
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v9);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (*(unsigned char *)(a1 + 8484))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 8480);
  }
  else
  {
    uint64_t v10 = OZChannel::getValueAsInt((OZChannel *)(a1 + 3296), MEMORY[0x1E4F1FA48], 0.0);
    *(_DWORD *)(a1 + 8480) = v10;
    *(unsigned char *)(a1 + 8484) = 1;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, v10);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (*(void *)(a1 + 8072) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1432))(a1) & 1) == 0)
  {
    PMClip::getAsFileSystemString(*(const PCString **)(a1 + 8072), (PCString *)&v20);
    (*(void (**)(uint64_t, CMTime *))(*(void *)a2 + 104))(a2, &v20);
    PCString::~PCString((PCString *)&v20);
  }
  return OZSceneNodeFile::calcHashForState(a1, a2, (uint64_t)a3, a4);
}

void sub_1B7CB288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
}

uint64_t OZFootage::getFieldDominance(OZFootage *this, CMTime *a2)
{
  __n128 v3 = (char *)this + 8484;
  if (*((unsigned char *)this + 8484)) {
    return *((unsigned int *)this + 2120);
  }
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3296), MEMORY[0x1E4F1FA48], 0.0);
  *((_DWORD *)this + 2120) = result;
  *__n128 v3 = 1;
  return result;
}

uint64_t non-virtual thunk to'OZFootage::calcHashForState(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4)
{
  return OZFootage::calcHashForState(a1 - 16, a2, a3, a4);
}

__n128 OZFootage::getNaturalDuration@<Q0>(OZFootage *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 232);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 31);
  return result;
}

__n128 non-virtual thunk to'OZFootage::getNaturalDuration@<Q0>(OZFootage *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 29);
  return result;
}

uint64_t OZFootage::getNaturalDurationFlags(OZFootage *this)
{
  if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1376))(this) == 1) {
    return 6;
  }
  else {
    return 1;
  }
}

uint64_t non-virtual thunk to'OZFootage::getNaturalDurationFlags(OZFootage *this)
{
  if ((*(unsigned int (**)(void))(*((void *)this - 2) + 1376))() == 1) {
    return 6;
  }
  else {
    return 1;
  }
}

double OZFootage::getMaximumDuration(OZFootage *this)
{
  if ((*(unsigned int (**)(OZFootage *))(*(void *)this + 1376))(this) != 1
    && ((uint64_t v3 = *((void *)this + 121)) != 0
     || (uint64_t v3 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0))
  {
    return ceil(OZFootage::getSeconds(this) * *(double *)(v3 + 368));
  }
  else
  {
    return 1.0;
  }
}

void OZFootage::getPixelAspectRatio(OZFootage *this)
{
  if (((*(uint64_t (**)(OZFootage *))(*(void *)this + 1432))(this) & 1) == 0)
  {
    uint64_t v2 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3144), v2, 0.0);
  }
}

BOOL OZFootage::hasAlpha(OZFootage *this)
{
  uint64_t v2 = (char *)this + 8476;
  if (*((unsigned char *)this + 8476))
  {
    int ValueAsInt = *((_DWORD *)this + 2118);
  }
  else
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E4F1FA48], 0.0);
    *((_DWORD *)this + 2118) = ValueAsInt;
    *uint64_t v2 = 1;
  }
  return ValueAsInt != 0;
}

uint64_t OZFootage::prerollBegin(OZFootage *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (!*((void *)a1 + 1009)) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v14, a3);
  if (OZFootage::prepareFrameRequest(a1, a2, (PMFrameRequest *)v14))
  {
    uint64_t v9 = 2;
  }
  else
  {
    uint64_t v10 = *((void *)a1 + 1009);
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v9 = 2 * (PMClip::prerollBegin(v10, &v12, (uint64_t)v14, a4, a5) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  return v9;
}

void sub_1B7CB2BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34,CGColorSpace *a35)
{
}

uint64_t OZFootage::prerollEnd(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  if (!*((void *)this + 1009)) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v7, (uint64_t)a3);
  if (OZFootage::prepareFrameRequest(this, a2, (PMFrameRequest *)v7)) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 2 * (PMClip::prerollEnd(*((void *)this + 1009), (uint64_t)v7) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  return v5;
}

void sub_1B7CB2CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
}

uint64_t OZFootage::setRate(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  if (!*((void *)this + 1009)) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v12, (uint64_t)a3);
  if (OZFootage::prepareFrameRequest(this, a2, (PMFrameRequest *)v12))
  {
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v8 = *((void *)this + 1009);
    long long v10 = *(_OWORD *)a2;
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v7 = 2 * (PMClip::setRate(v8, a4, (uint64_t)&v10, (uint64_t)v12) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  return v7;
}

void sub_1B7CB2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34,CGColorSpace *a35)
{
}

uint64_t OZFootage::scheduleTokens(uint64_t *a1, const OZRenderParams *a2, long long **a3, uint64_t a4, uint64_t a5)
{
  if (!a1[1009]) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v11, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v11)) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 2 * (PMClip::scheduleTokens(a1[1009], a3, (uint64_t)v11, a5) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  return v9;
}

void sub_1B7CB2E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
}

uint64_t OZFootage::hintTokensWillImage(uint64_t *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  if (!a1[1009]) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v9, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v9)) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 2 * (PMClip::hintTokensWillImage(a1[1009], a3, (uint64_t)v9) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  return v7;
}

void sub_1B7CB2F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
}

uint64_t OZFootage::getTokensImage(uint64_t *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  if (!a1[1009]) {
    return 0;
  }
  PMFrameRequest::PMFrameRequest((uint64_t)v9, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v9)) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 2 * (PMClip::getTokensImage(a1[1009], a3, (uint64_t)v9) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  return v7;
}

void sub_1B7CB3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
}

PMClip *OZFootage::pruneTokensAtTime(OZFootage *this, CMTime *a2, const char *a3)
{
  __n128 result = (PMClip *)*((void *)this + 1009);
  if (result) {
    return (PMClip *)PMClip::pruneTokensAtTime(result, a2, a3);
  }
  return result;
}

PMClip *OZFootage::pruneTokensExceptAtTime(OZFootage *this, CMTime *a2, const char *a3)
{
  __n128 result = (PMClip *)*((void *)this + 1009);
  if (result) {
    return (PMClip *)PMClip::pruneTokensExceptAtTime(result, a2, a3);
  }
  return result;
}

PMClip *OZFootage::pruneAllTokens(OZFootage *this, const char *a2)
{
  __n128 result = (PMClip *)*((void *)this + 1009);
  if (result) {
    return (PMClip *)PMClip::pruneAllTokens(result, a2);
  }
  return result;
}

uint64_t OZFootage::getIsCodecMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8318) | *((unsigned __int8 *)this + 8317);
}

uint64_t OZFootage::getIsCodecMissingBecauseRosettaMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8318);
}

uint64_t OZFootage::getIsDZFileMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8319);
}

uint64_t OZFootage::getPixelAspectRatioRN(OZFootage *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1368))();
}

uint64_t non-virtual thunk to'OZFootage::getPixelAspectRatioRN(OZFootage *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 197) + 1368))();
}

void *non-virtual thunk to'OZFootage::getHashForStateRN@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 - 1560), a2, a3, a4, a5);
}

_OWORD *non-virtual thunk to'OZFootage::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 - 1560), a2, a3);
}

void OZChannelAspectRatioFootage::OZChannelAspectRatioFootage(OZChannelAspectRatioFootage *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelAspectRatioFootage_FactoryBase = (OZFactory *)getOZChannelAspectRatioFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatioFootage_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->CMTime var0 = (void **)&unk_1F11023D0;
  this->var2 = (void **)&unk_1F1102730;
  OZChannelAspectRatioFootageInfo = (OZChannelAspectRatioFootage *)OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
  }
  this->BOOL var16 = var17;
  OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageImpl(OZChannelAspectRatioFootageInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B7CB321C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_fixedWidthInfo::getInstance(OZFootage::OZFootage_fixedWidthInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::OZFootage_fixedWidthInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::OZFootage_fixedWidthInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_fixedWidthInfo::_OZFootage_fixedWidthInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_fixedWidthInfo::_OZFootage_fixedWidthInfo) {
    operator new();
  }
}

void sub_1B7CB32E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_fixedWidthInfo *OZFootage::OZFootage_fixedWidthInfo::OZFootage_fixedWidthInfo(OZFootage::OZFootage_fixedWidthInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_fixedWidthInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153B40;
  *((void *)this + 10) = &unk_1F1153B60;
  return this;
}

void sub_1B7CB33B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_fixedHeightInfo::getInstance(OZFootage::OZFootage_fixedHeightInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::OZFootage_fixedHeightInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::OZFootage_fixedHeightInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_fixedHeightInfo::_OZFootage_fixedHeightInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_fixedHeightInfo::_OZFootage_fixedHeightInfo) {
    operator new();
  }
}

void sub_1B7CB3494(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_fixedHeightInfo *OZFootage::OZFootage_fixedHeightInfo::OZFootage_fixedHeightInfo(OZFootage::OZFootage_fixedHeightInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_fixedHeightInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153BB8;
  *((void *)this + 10) = &unk_1F1153BD8;
  return this;
}

void sub_1B7CB3564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_exposureInfo::getInstance(OZFootage::OZFootage_exposureInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_exposureInfo::getInstance(void)::OZFootage_exposureInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_exposureInfo::getInstance(void)::OZFootage_exposureInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_exposureInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_exposureInfo::_OZFootage_exposureInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_exposureInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_exposureInfo::_OZFootage_exposureInfo) {
    operator new();
  }
}

void sub_1B7CB3640(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_exposureInfo *OZFootage::OZFootage_exposureInfo::OZFootage_exposureInfo(OZFootage::OZFootage_exposureInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -10.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_exposureInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153C30;
  *((void *)this + 10) = &unk_1F1153C50;
  return this;
}

void sub_1B7CB3710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_defogInfo::getInstance(OZFootage::OZFootage_defogInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_defogInfo::getInstance(void)::OZFootage_defogInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_defogInfo::getInstance(void)::OZFootage_defogInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_defogInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_defogInfo::_OZFootage_defogInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_defogInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_defogInfo::_OZFootage_defogInfo) {
    operator new();
  }
}

void sub_1B7CB37EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_defogInfo *OZFootage::OZFootage_defogInfo::OZFootage_defogInfo(OZFootage::OZFootage_defogInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.01, 0.001, 0.0001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_defogInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153CA8;
  *((void *)this + 10) = &unk_1F1153CC8;
  return this;
}

void sub_1B7CB38C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_kneeLowInfo::getInstance(OZFootage::OZFootage_kneeLowInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_kneeLowInfo::getInstance(void)::OZFootage_kneeLowInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_kneeLowInfo::getInstance(void)::OZFootage_kneeLowInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_kneeLowInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_kneeLowInfo::_OZFootage_kneeLowInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_kneeLowInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_kneeLowInfo::_OZFootage_kneeLowInfo) {
    operator new();
  }
}

void sub_1B7CB39A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_kneeLowInfo *OZFootage::OZFootage_kneeLowInfo::OZFootage_kneeLowInfo(OZFootage::OZFootage_kneeLowInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.0, 3.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_kneeLowInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153D20;
  *((void *)this + 10) = &unk_1F1153D40;
  return this;
}

void sub_1B7CB3A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_kneeHighInfo::getInstance(OZFootage::OZFootage_kneeHighInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage::OZFootage_kneeHighInfo::getInstance(void)::OZFootage_kneeHighInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZFootage::OZFootage_kneeHighInfo::getInstance(void)::OZFootage_kneeHighInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_kneeHighInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_kneeHighInfo::_OZFootage_kneeHighInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_kneeHighInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFootage::OZFootage_kneeHighInfo::_OZFootage_kneeHighInfo) {
    operator new();
  }
}

void sub_1B7CB3B4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_kneeHighInfo *OZFootage::OZFootage_kneeHighInfo::OZFootage_kneeHighInfo(OZFootage::OZFootage_kneeHighInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 3.5, 7.5, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_kneeHighInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1153D98;
  *((void *)this + 10) = &unk_1F1153DB8;
  return this;
}

void sub_1B7CB3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

PCImage *PGMetalTexture::PGMetalTexture(PCImage *a1, uint64_t *a2)
{
  PCImage::PCImage(a1);
  *double v4 = &unk_1F1133940;
  uint64_t v5 = *a2;
  *((void *)a1 + 8) = *a2;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *((void *)a1 + 9) = 0;
  return a1;
}

void sub_1B7CB3CBC(_Unwind_Exception *a1)
{
  PCImage::~PCImage(v1);
  _Unwind_Resume(a1);
}

uint64_t PGMetalTexture::setTexture(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t result = *a2;
  if (v5 != *a2)
  {
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      uint64_t result = *a2;
    }
    *(void *)(a1 + 64) = result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a3;
  return result;
}

void OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1153E10;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11540A8;
  *((void *)this + 6) = &unk_1F1154300;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1154358;
  PCString::PCString(&v7, "Drag;Vortex;Radial Gravity;Linear Gravity;Noise;Turbulence;Electric;Magnetic");
  PCString::PCString(&v6, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536), 1u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Strength");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 792), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Falloff Exponent");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 944), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Infinite Extent");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1096), 1, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Extent");
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Direction");
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840), 0.0, -1.0, 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Smoothness");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2432), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Animation Speed");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2584), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Minimum Falloff Distance");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2736), 0.000001, &v7, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setMin((OZChannel *)this + 16, 0.0);
  OZChannel::setMax((OZChannel *)this + 16, 1.0);
  OZChannel::setMin((OZChannel *)this + 18, 0.000001);
}

void sub_1B7CB40F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannelEnum *a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a14);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v21);
  OZChannel3D::~OZChannel3D(v20);
  OZChannel3D::~OZChannel3D(v19);
  OZChannelBool::~OZChannelBool(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZLocking::~OZLocking(v15);
  OZBehavior::~OZBehavior(v14);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this, const OZ3DEnginePhysicsFieldBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1153E10;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11540A8;
  *((void *)this + 6) = &unk_1F1154300;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1154358;
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 99) = &unk_1F1100CF0;
  *((void *)this + 101) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 944), (const OZChannelBase *)((char *)a2 + 944), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 118) = &unk_1F1100CF0;
  *((void *)this + 120) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1096), (const OZChannelBase *)((char *)a2 + 1096), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 1248), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 1840), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)this + 16, (const OZChannelBase *)((char *)a2 + 2432), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 304) = &unk_1F1100CF0;
  *((void *)this + 306) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)this + 17, (const OZChannelBase *)((char *)a2 + 2584), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 323) = &unk_1F1100CF0;
  *((void *)this + 325) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)this + 18, (const OZChannelBase *)((char *)a2 + 2736), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 34OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 344) = &unk_1F1101050;
}

void sub_1B7CB4510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZLocking *a10)
{
  OZChannel::~OZChannel(v11);
  OZChannel::~OZChannel(v12);
  OZChannel3D::~OZChannel3D(v17);
  OZChannel3D::~OZChannel3D(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelEnum::~OZChannelEnum(a9);
  OZLocking::~OZLocking(a10);
  OZBehavior::~OZBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7CB458C()
{
}

void sub_1B7CB4594()
{
}

void sub_1B7CB459C()
{
}

void sub_1B7CB45A4()
{
}

void sub_1B7CB45AC()
{
}

void OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this)
{
  *(void *)this = &unk_1F1153E10;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11540A8;
  *((void *)this + 6) = &unk_1F1154300;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1154358;
  OZChannel::~OZChannel((OZChannel *)this + 18);
  OZChannel::~OZChannel((OZChannel *)this + 17);
  OZChannel::~OZChannel((OZChannel *)this + 16);
  *((void *)this + 230) = &unk_1F1106258;
  *((void *)this + 23OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)this + 15);
  OZChannel2D::~OZChannel2D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840));
  *((void *)this + 156) = &unk_1F1106258;
  *((void *)this + 158) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1688));
  OZChannel2D::~OZChannel2D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536));
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));

  OZBehavior::~OZBehavior(this);
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this)
{
}

{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

void *OZ3DEnginePhysicsFieldBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    if (this) {
      *(void *)(v3 + 328) = lpsrc;
    }
  }
  return this;
}

void OZ3DEnginePhysicsFieldBehavior::strength(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
}

void OZ3DEnginePhysicsFieldBehavior::falloffExponent(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
}

void OZ3DEnginePhysicsFieldBehavior::smoothness(OZChannel *this, const CMTime *a2)
{
}

void OZ3DEnginePhysicsFieldBehavior::animationSpeed(OZChannel *this, const CMTime *a2)
{
}

BOOL OZ3DEnginePhysicsFieldBehavior::isExtentInfinite(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), a2, 0.0) != 0;
}

void OZ3DEnginePhysicsFieldBehavior::halfExtent(OZ3DEnginePhysicsFieldBehavior *this@<X0>, const CMTime *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  OZChannel3D::getValue((uint64_t)this + 1248, a2, a3, 0.0);
}

void OZChannel3D::getValue(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
    uint64_t v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
    uint64_t v11 = v10;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a2, a4);
    *a3 = v9;
    a3[1] = v11;
    a3[2] = v12;
  }
}

void OZ3DEnginePhysicsFieldBehavior::direction(OZ3DEnginePhysicsFieldBehavior *this@<X0>, const CMTime *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  OZChannel3D::getValue((uint64_t)this + 1840, a2, a3, 0.0);
}

void OZ3DEnginePhysicsFieldBehavior::minimumDistance(OZChannel *this, const CMTime *a2)
{
}

BOOL OZ3DEnginePhysicsFieldBehavior::isRebuildUIChannel(OZ3DEnginePhysicsFieldBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2 || (OZChannelBase *)((char *)this + 1096) == a2;
}

char *OZ3DEnginePhysicsFieldBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 536), &v15, 0.0);
  uint64_t result = (char *)OZChannel::getValueAsInt((OZChannel *)(a1 + 1096), &v15, 0.0);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 != a2)
  {
    int v7 = (int)result;
    while (1)
    {
      uint64_t result = *(char **)(v6 + 16);
      if (result)
      {
        if (result)
        {
          uint64_t v8 = result;
          uint64_t result = (char *)OZChannel::getValueAsInt((OZChannel *)(result + 536), &v15, 0.0);
          if (result != ValueAsInt) {
            break;
          }
          uint64_t result = (char *)OZChannel::getValueAsInt((OZChannel *)(v8 + 1096), &v15, 0.0);
          if ((v7 != 0) != (result != 0)) {
            break;
          }
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a2)
      {
        int v9 = 1;
        goto LABEL_10;
      }
    }
    int v9 = 0;
LABEL_10:
    for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v11 = *(const void **)(i + 16);
      if (v11) {
      else
      }
        uint64_t v12 = 0;
      uint64_t v13 = (OZChannelBase *)(v12 + 2432);
      if (!v9)
      {
        OZChannelBase::setFlag(v13, 0x400000, 1);
        double v14 = (OZChannelBase *)(v12 + 2584);
        goto LABEL_22;
      }
      if ((ValueAsInt & 0xFFFFFFFE) == 4)
      {
        OZChannelBase::resetFlag(v13, 0x400000, 1);
        OZChannelBase::resetFlag((OZChannelBase *)(v12 + 2584), 0x400000, 1);
        if (ValueAsInt == 4)
        {
          OZChannelBase::setFlag((OZChannelBase *)(v12 + 1840), 0x400000, 1);
          goto LABEL_21;
        }
      }
      else
      {
        OZChannelBase::setFlag(v13, 0x400000, 1);
        OZChannelBase::setFlag((OZChannelBase *)(v12 + 2584), 0x400000, 1);
      }
      OZChannelBase::resetFlag((OZChannelBase *)(v12 + 1840), 0x400000, 1);
LABEL_21:
      double v14 = (OZChannelBase *)(v12 + 1248);
      if (!v7)
      {
        uint64_t result = (char *)OZChannelBase::resetFlag(v14, 0x400000, 1);
        continue;
      }
LABEL_22:
      uint64_t result = (char *)OZChannelBase::setFlag(v14, 0x400000, 1);
    }
  }
  return result;
}

uint64_t OZ3DEnginePhysicsFieldBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  int v7 = (char *)(result + 336);
  for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7) {
        return result;
      }
      ++i;
    }
  }
  uint64_t v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  uint64_t v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  uint64_t v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEnginePhysicsFieldBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEnginePhysicsFieldBehavior::getLockingGroups(OZ3DEnginePhysicsFieldBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZ3DEnginePhysicsFieldBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZ3DEnginePhysicsFieldBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::getLockingGroups(OZ3DEnginePhysicsFieldBehavior *this)
{
  uint64_t v1 = (char *)this - 336;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 42) + 336))((char *)this - 336);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

void OZARFaceAnchorElement::OZARFaceAnchorElement(OZARFaceAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F11543D8;
  uint64_t v5[2] = &unk_1F1154D10;
  v5[6] = &unk_1F1154F68;
  v5[816] = &unk_1F1154FC0;
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24424), &v6, (OZChannelFolder *)((char *)this + 320), 0x190u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552), &v6, (OZChannelFolder *)((char *)this + 24424), 0x191u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136), &v6, (OZChannelFolder *)((char *)this + 24424), 0x192u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720), &v6, (OZChannelFolder *)((char *)this + 24424), 0x193u, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Base Color");
  OZChannelColor::OZChannelColor((OZARFaceAnchorElement *)((char *)this + 29304), 0.0, 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x194u, 0, 6u);
  PCString::~PCString(&v6);
  PCMutex::PCMutex((PCMutex *)((char *)this + 30464));
  *((unsigned char *)this + 3055OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_OWORD *)((char *)this + 30536) = 0u;
}

void sub_1B7CB5084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  CFURLRef v16 = v14;
  OZChannelColor::~OZChannelColor(v16);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZARAnchorElement::~OZARAnchorElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B7CB50F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7CB5104()
{
}

void sub_1B7CB510C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7CB511C()
{
}

void sub_1B7CB5124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7CB5134()
{
}

void OZARFaceAnchorElement::OZARFaceAnchorElement(OZARFaceAnchorElement *this, const OZARFaceAnchorElement *a2, uint64_t a3)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11543D8;
  *(void *)(v5 + 16) = &unk_1F1154D10;
  *(void *)(v5 + 48) = &unk_1F1154F68;
  *(void *)(v5 + 6528) = &unk_1F1154FC0;
  PCString v6 = (OZChannelFolder *)(v5 + 24424);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24424), (const OZChannelFolder *)((char *)a2 + 24424), (OZChannelFolder *)(v5 + 320));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552), (const OZARFaceAnchorElement *)((char *)a2 + 24552), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136), (const OZARFaceAnchorElement *)((char *)a2 + 26136), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720), (const OZARFaceAnchorElement *)((char *)a2 + 27720), v6);
  OZChannelColor::OZChannelColor((OZARFaceAnchorElement *)((char *)this + 29304), (const OZARFaceAnchorElement *)((char *)a2 + 29304), (OZChannelFolder *)((char *)this + 448));
  PCMutex::PCMutex((PCMutex *)((char *)this + 30464));
  *((unsigned char *)this + 3055OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_OWORD *)((char *)this + 30536) = 0u;
}

void sub_1B7CB529C(_Unwind_Exception *a1)
{
  OZChannelColor::~OZChannelColor(v6);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v5);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v4);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZARAnchorElement::~OZARAnchorElement(v1);
  _Unwind_Resume(a1);
}

void sub_1B7CB52F8()
{
}

void OZARFaceAnchorElement::~OZARFaceAnchorElement(OZARFaceAnchorElement *this)
{
  *(void *)this = &unk_1F11543D8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1154D10;
  *((void *)this + 6) = &unk_1F1154F68;
  *((void *)this + 816) = &unk_1F1154FC0;
  uint64_t v2 = *((void *)this + 3818);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 30464));
  *((void *)this + 3663) = &unk_1F1107698;
  *((void *)this + 3665) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30312));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZARFaceAnchorElement *)((char *)this + 29304));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24424));

  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  uint64_t vars8;

  OZARFaceAnchorElement::~OZARFaceAnchorElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZARFaceAnchorElement::~OZARFaceAnchorElement(OZARFaceAnchorElement *this)
{
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 48));
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZARFaceAnchorElement::parseEnd(OZARFaceAnchorElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZARFaceAnchorElement::parseEnd(OZARFaceAnchorElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

void OZARFaceAnchorElement::didFinishLoadingIntoScene(OZARFaceAnchorElement *this)
{
  OZ3DEngineSceneElement::didFinishLoadingIntoScene(this);

  OZARFaceAnchorElement::initFile(this);
}

void OZARFaceAnchorElement::initFile(OZARFaceAnchorElement *this)
{
  if (*((_DWORD *)this + 4824) {
    && (unint64_t Node = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 19272))) != 0
  }
  {
    uint64_t v4 = (uint64_t)v3;
    v13.CMTime var0 = 0;
    PCString::set(&v13, @"face.arface");
    PCURL::PCURL((PCURL *)v14, &v13, 0);
    PCString::~PCString(&v13);
    OZSceneNodeFile::setIsFileMissing(v4, 0);
    (*(void (**)(uint64_t, PCString *))(*(void *)v4 + 1400))(v4, v14);
    (*(void (**)(OZARFaceAnchorElement *, uint64_t, void, void))(*(void *)this + 1448))(this, v4, 0, 0);
    uint64_t v5 = v14;
  }
  else
  {
    v14[0].CMTime var0 = 0;
    PCString::set(v14, @"face.arface");
    PCURL::PCURL((PCURL *)&v13, v14, 0);
    PCString::~PCString(v14);
    PCURL::getShortFilename((CFURLRef *)&v13, &v12);
    OZChannelBase::getNextUniqueID(v6);
    *(_OWORD *)&v14[0].CMTime var0 = xmmword_1B8380D70;
    uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v14);
    PCString::~PCString(&v12);
    PCURL::getAsFileSystemString((const __CFURL **)&v13, v14);
    uint64_t v8 = PCString::ns_str(v14);
    int isSceneFileValid = OZ3DEngineSceneFile::isSceneFileValid((OZ3DEngineSceneFile *)v8, v9);
    PCString::~PCString(v14);
    if (isSceneFileValid)
    {
      OZSceneNodeFile::setIsFileMissing((uint64_t)SceneNode, 0);
      (*(void (**)(OZSceneNode *, PCString *))(*(void *)SceneNode + 1400))(SceneNode, &v13);
      uint64_t v11 = (OZDocument **)*((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      if (v11)
      {
        PCURL::PCURL((PCURL *)v14, @"Undo Footage Import");
        OZScene::addNode(v11, SceneNode, v14, 40, 0, 0);
        PCString::~PCString(v14);
        (*(void (**)(OZARFaceAnchorElement *, OZSceneNode *, void, void))(*(void *)this + 1448))(this, SceneNode, 0, 0);
        OZScene::recalcDependencies((OZScene *)v11);
      }
    }
    uint64_t v5 = &v13;
  }
  PCURL::~PCURL((PCURL *)v5);
}

void sub_1B7CB58C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11)
{
}

void non-virtual thunk to'OZARFaceAnchorElement::didFinishLoadingIntoScene(OZARFaceAnchorElement *this)
{
  uint64_t v1 = (OZARFaceAnchorElement *)((char *)this - 16);
  OZ3DEngineSceneElement::didFinishLoadingIntoScene((OZARFaceAnchorElement *)((char *)this - 16));

  OZARFaceAnchorElement::initFile(v1);
}

void non-virtual thunk to'OZARFaceAnchorElement::buildRenderGraph(OZARFaceAnchorElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

void non-virtual thunk to'OZARFaceAnchorElement::makeRenderImageSource(OZARFaceAnchorElement *this, const OZRenderState *a2, const OZRenderGraphState *a3)
{
}

CGColorSpace **OZARFaceAnchorElement::makeDataFor3DEngineObject@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, id **a6@<X8>, double a7@<D0>)
{
  PCColor::PCColor(&v18);
  CMTime __p = *a3;
  OZChannelColor::getColor((OZChannelColor *)(a1 + 29304), &__p, &v18, 0.0);
  PCMutex::lock((PCMutex *)(a1 + 30464));
  double v14 = *(void **)(a1 + 30536);
  if (v14)
  {
    [v14 geometry];
    operator new();
  }
  CMTime v15 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(0);
  OZ3DEngineSceneElement::makeDataFor3DEngineObject(a1, a2, a3, a4, a5, 0, 0, a6, a7, *v15, v15[1], v15[2], v15[3], 1.0);
  if (a1 != -30464) {
    PCMutex::unlock((PCMutex *)(a1 + 30464));
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v18.var1._obj);
}

void sub_1B7CB5E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a23);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v26 - 96));
  _Unwind_Resume(a1);
}

uint64_t OZLi3DEngineObjectFaceData::setHitCheckRenderTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 2008);
  uint64_t result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = *a2;
    }
    *(void *)(a1 + 2008) = result;
    if (result)
    {
      PCString v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v6();
    }
  }
  return result;
}

uint64_t OZARFaceAnchorElement::setFaceAnchor(id *this, ARFaceAnchor *a2)
{
  uint64_t v4 = (PCMutex *)(this + 3808);
  PCMutex::lock((PCMutex *)(this + 3808));

  this[3817] = a2;
  return PCMutex::unlock(v4);
}

void sub_1B7CB6088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'OZARFaceAnchorElement::calcStaticHash(uint64_t a1)
{
  return OZARAnchorElement::calcStaticHash(a1 - 16);
}

CGColorSpace **RenderParamsForHitCheck@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v37);
  int v37 = 2;
  uint64_t v38 = *(void *)a3;
  int BitsPerChannel = PCBitDepth::getBitsPerChannel(2);
  uint64_t v40 = 0xD00000004;
  int v42 = 3553;
  OZRenderParams::OZRenderParams((OZRenderParams *)a4);
  if (a1)
  {
    (*(void (**)(FxColorDescription *__return_ptr, const void *))(*(void *)a1 + 64))(&v26, a1);
    OZRenderParams::setWorkingColorDescription((CGColorSpace **)a4, &v26);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v26._pcColorDesc._colorSpaceRef._obj);
    float v8 = (*(float (**)(const void *))(*(void *)a1 + 72))(a1);
    OZRenderParams::setBlendingGamma(a4, v8);
  }
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(void *)(a4 + 16) = *(void *)(a2 + 16);
  *(void *)(a4 + 39OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(a4 + 400) = 0;
  OZRenderParams::setImageAttr(a4, (uint64_t)&v37);
  unint64_t v9 = (_OWORD *)(a4 + 392);
  *(unsigned char *)(a4 + 20OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  *(unsigned char *)(a4 + 131OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_OWORD *)(a4 + 39OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  *(unsigned char *)(a4 + 696) = 1;
  OZRenderParams::setRenderQuality(a4, 0);
  OZRenderParams::setTextRenderQuality(a4, 0);
  OZRenderParams::setDoHighQualityResampling((OZRenderParams *)a4, 0);
  OZRenderParams::setDoShapeAntialiasing((OZRenderParams *)a4, 1);
  OZRenderParams::setDo3DIntersectionAntialiasing((OZRenderParams *)a4, 0);
  HGComputeDeviceManager::GetCPUComputeDevice(v10, &v35);
  *(_OWORD *)&v26._pcColorDesc._colorSpaceRef._obuint64_t j = v35;
  long long v35 = 0uLL;
  OZRenderParams::setDestinationDevice(a4, (uint64_t *)&v26);
  if (*(void *)&v26._pcColorDesc._dynamicRange) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v26._pcColorDesc._dynamicRange);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  int v11 = *a3;
  int v12 = a3[1];
  *(void *)(a4 + 648) = 0;
  *(_DWORD *)(a4 + 656) = v11;
  *(_DWORD *)(a4 + 660) = v12;
  *(_OWORD *)(a4 + 584) = 0u;
  *(double *)(a4 + 600) = (double)v11;
  *(double *)(a4 + 608) = (double)v12;
  *unint64_t v9 = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  *(unsigned char *)(a4 + 1211) = 0;
  if (a1)
  {
    if (v13)
    {
      double v14 = v13;
      if ((*(uint64_t (**)(void *))(*(void *)v13 + 272))(v13))
      {
        CMTime v15 = (OZScene *)(*(uint64_t (**)(void *))(*(void *)v14 + 272))(v14);
        uint64_t SanitizedViewGamut = OZScene::getSanitizedViewGamut(v15);
        int v17 = (CGColorSpace *)PCGetGamutColorSpace(SanitizedViewGamut);
        PCColorSpaceHandle::setColorSpace((CGColorSpace **)(a4 + 784), v17);
        operator new();
      }
    }
  }
  OZRenderParams::layoutElementAtSize(a4, (uint64_t)a1, a3);
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)&v35);
  HGUserJob::SetPriority((uint64_t)&v35, 2);
  long long v18 = v36[0];
  *(_OWORD *)(a4 + 1316) = v35;
  *(_OWORD *)(a4 + 133OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v18;
  *(_OWORD *)(a4 + 1346) = *(_OWORD *)((char *)v36 + 14);
  *unint64_t v9 = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  uint64_t v34 = 0x3FF0000000000000;
  uint64_t v30 = 0;
  uint64_t v31 = 0x3FF0000000000000;
  *(_OWORD *)&v26._pcColorDesc._colorSpaceRef._obuint64_t j = 0x3FF0000000000000uLL;
  *(void *)&v26._pcColorDesc._toneMapMethod._gaiuint64_t n = 0;
  *(void *)&v26._isPremultiplied = 0;
  uint64_t v29 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
  int v20 = *a3;
  int v21 = a3[1];
  long long v27 = xmmword_1B7E739F0;
  float64x2_t v28 = v19;
  v19.f64[0] = (double)v20 * 0.5;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v26, v19, (double)v21 * 0.5, 0.0);
  if ((FxColorDescription *)(a4 + 808) != &v26)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      CMTime v23 = (_OWORD *)(a4 + 808 + i);
      long long v24 = *(_OWORD *)((char *)&v26._pcColorDesc._toneMapMethod._gain + i);
      _OWORD *v23 = *(_OWORD *)((char *)&v26._pcColorDesc._colorSpaceRef._obj + i);
      v23[1] = v24;
    }
  }
  *(unsigned char *)(a4 + 936) = 1;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v41);
}

void sub_1B7CB64B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  PCSharedCount::~PCSharedCount(v27);
  OZRenderParams::~OZRenderParams(v26);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v28 - 128));
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement::hitCheck(uint64_t a1)
{
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 18776));
  *(unsigned char *)(a1 + 3055OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  float64x2_t v15 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v16 = _Q0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  OZScene::getSceneBounds(v7, &v15);
  v14[0] = (int)*(double *)&v16;
  v14[1] = (int)*((double *)&v16 + 1);
  RenderParamsForHitCheck((const void *)(a1 + 6528), MEMORY[0x1E4F1FA48], v14, (uint64_t)v13);
  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v12))
  {
    v11.CMTime var0 = v12.var0;
    HGGLContext::Share();
  }
  float v8 = (void *)PGLMasterEAGLContext();
  HGGLContextPtr::HGGLContextPtr((HGGLContextPtr *)&v10, v8);
  v9.CMTime var0 = v10.var0;
  HGGLContext::Share();
}

void sub_1B7CB6A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount a21,uint64_t a22,PCSharedCount a23,PCSharedCount a24,PCSharedCount a25,char a26)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 24))(a20);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  PCSharedCount::PCSharedCount(&a23);
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  PCSharedCount::PCSharedCount(&a25);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a26);
  std::recursive_mutex::unlock(v26);
  _Unwind_Resume(a1);
}

void ___ZN21OZARFaceAnchorElement8hitCheckERK9PCVector2IfERK13OZRenderStatePK8LiCameraR9PCVector3IdEj_block_invoke()
{
}

void sub_1B7CB6EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount a15)
{
  uint64_t v16 = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  a10 = &a12;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c25_ZTS5HGRefI11HGGLContextE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c25_ZTS5HGRefI11HGGLContextE(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t SetFaceMaterialProperties(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "geometry", 0), "materials");
  uint64_t result = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v14;
    uint64_t v7 = *MEMORY[0x1E4F3B348];
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        PCSharedCount v9 = *(void **)(*((void *)&v13 + 1) + 8 * v8);
        [v9 setLitPerPixel:1];
        [v9 setLightingModelName:v7];
        if (a2)
        {
          PCSharedCount v10 = (void *)[v9 diffuse];
          uint64_t v11 = a2;
        }
        else
        {
          uint64_t v12 = [MEMORY[0x1E4F428B8] colorWithRed:0.0 green:0.0 blue:0.0 alpha:1.0];
          PCSharedCount v10 = (void *)[v9 diffuse];
          uint64_t v11 = v12;
        }
        [v10 setContents:v11];
        objc_msgSend((id)objc_msgSend(v9, "specular"), "setIntensity:", 0.02);
        objc_msgSend((id)objc_msgSend(v9, "roughness"), "setContents:", objc_msgSend(MEMORY[0x1E4F428B8], "colorWithRed:green:blue:alpha:", 0.8, 0.8, 0.8, 0.8));
        ++v8;
      }
      while (v5 != v8);
      uint64_t result = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t UpdateFaceGeometry(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_msgSend((id)objc_msgSend(a1, "rootNode"), "childNodesPassingTest:", &__block_literal_global_80);
  if ([v8 count])
  {
    PCSharedCount v9 = (void *)[v8 firstObject];
  }
  else
  {
    uint64_t v10 = [MEMORY[0x1E4F14F18] faceGeometryWithDevice:a4 fillMesh:0];
    PCSharedCount v9 = (void *)[MEMORY[0x1E4F3B228] nodeWithGeometry:v10];
    objc_msgSend((id)objc_msgSend(a1, "rootNode"), "addChildNode:", v9);
  }
  uint64_t result = SetFaceMaterialProperties(v9, a3);
  if (a2)
  {
    uint64_t v12 = (void *)[v9 geometry];
    return [v12 updateFromFaceGeometry:a2];
  }
  return result;
}

BOOL ___Z18UpdateFaceGeometryP8SCNSceneP14ARFaceGeometry16HGMTLTextureType15HGMTLDeviceType_block_invoke(uint64_t a1, void *a2)
{
  BOOL result = 0;
  if ([a2 geometry])
  {
    [a2 geometry];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return 1;
    }
  }
  return result;
}

uint64_t OZLi3DEngineObjectFaceData::OZLi3DEngineObjectFaceData(uint64_t a1, uint64_t a2, long long *a3, long long *a4, void *a5, const OZRenderParams *a6, double a7)
{
  long long v13 = a3[1];
  v26[0] = *a3;
  v26[1] = v13;
  long long v14 = a3[3];
  v26[2] = a3[2];
  void v26[3] = v14;
  long long v15 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)a1);
  float v16 = *v15;
  float v17 = v15[1];
  float v18 = v15[2];
  float v19 = v15[3];
  v24[1] = 0;
  _OWORD v24[2] = 0;
  v24[0] = &unk_1F10AD5F8;
  char v25 = 0;
  Li3DEngineObjectData::Li3DEngineObjectData(a1, a2, v26, 0, 0, 0, (uint64_t)v24, a7, v16, v17, v18, v19, 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v24);
  *(void *)a1 = &unk_1F11550E8;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 576), a6);
  *(void *)(a1 + 203OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  long long v20 = *a4;
  long long v21 = a4[2];
  *(_OWORD *)(a1 + 2056) = a4[1];
  *(_OWORD *)(a1 + 207OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v21;
  *(_OWORD *)(a1 + 2040) = v20;
  char v22 = (CGColorSpace *)*((void *)a4 + 6);
  *(void *)(a1 + 2088) = v22;
  if (v22) {
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  }
  *(void *)(a1 + 2096) = a5;
  return a1;
}

void sub_1B7CB7460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 2016);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *(void *)(v9 + 2008);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = *(void *)(v9 + 2000);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  OZRenderParams::~OZRenderParams(v10);
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)v9);
  _Unwind_Resume(a1);
}

void OZLi3DEngineObjectFaceData::~OZLi3DEngineObjectFaceData(OZLi3DEngineObjectFaceData *this)
{
  *(void *)this = &unk_1F11550E8;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 261);
  uint64_t v4 = (void **)((char *)this + 2016);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 251);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 250);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  OZRenderParams::~OZRenderParams((OZLi3DEngineObjectFaceData *)((char *)this + 576));
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)this);
}

{
  uint64_t vars8;

  OZLi3DEngineObjectFaceData::~OZLi3DEngineObjectFaceData(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLi3DEngineObjectFaceData::makeFaceStickerTextureNode(OZLi3DEngineObjectFaceData *this, LiAgent *a2)
{
  uint64_t v3 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v3);
  memset(v5, 0, 24);
  PCColor::getComponents((int *)this + 510, v5);
  uint64_t v4 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v4);
}

void sub_1B7CB79B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  LiAgent::~LiAgent((LiAgent *)&a51);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x3A0]);
  (*(void (**)(uint64_t))(*(void *)v52 + 24))(v52);
  uint64_t v55 = *(void **)(v53 - 120);
  if (v55)
  {
    *(void *)(v53 - 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v55;
    operator delete(v55);
  }
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  }
  _Unwind_Resume(a1);
}

OZLi3DEngineObjectFaceData *OZLi3DEngineObjectFaceData::getHelium3DEngine(OZLi3DEngineObjectFaceData *this, LiAgent *a2)
{
  if (!*((unsigned char *)this + 432)) {
    OZLi3DEngineObjectFaceData::generateFaceStickerTexture(this, a2);
  }
  return this;
}

void OZLi3DEngineObjectFaceData::generateFaceStickerTexture(OZLi3DEngineObjectFaceData *this, LiAgent *a2)
{
}

void sub_1B7CB7C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZLi3DEngineObjectFaceData::applyChanges(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 2008;
  if (!*(unsigned char *)(a1 + 432)) {
    uint64_t v3 = 2000;
  }
  return UpdateFaceGeometry(a2, *(void *)(a1 + 2096), *(void *)(*(void *)(a1 + v3) + 144), a3);
}

void std::shared_ptr<OZLi3DEngineObjectFaceData>::shared_ptr[abi:ne180100]<OZLi3DEngineObjectFaceData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7CB7D24(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineObjectFaceData *,std::shared_ptr<OZLi3DEngineObjectFaceData>::__shared_ptr_default_delete<OZLi3DEngineObjectFaceData,OZLi3DEngineObjectFaceData>,std::allocator<OZLi3DEngineObjectFaceData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineObjectFaceData *,std::shared_ptr<OZLi3DEngineObjectFaceData>::__shared_ptr_default_delete<OZLi3DEngineObjectFaceData,OZLi3DEngineObjectFaceData>,std::allocator<OZLi3DEngineObjectFaceData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void OZTextLayout::OZTextLayout(OZTextLayout *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F11551C8;
  v4[25] = &unk_1F1155270;
  v4[27] = &unk_1F1155B48;
  v4[31] = &unk_1F1155DA0;
  v4[841] = &unk_1F1155DF8;
  v4[2372] = &unk_1F1155ED0;
}

void OZTextLayout::OZTextLayout(OZTextLayout *this, const OZTextLayout *a2, uint64_t a3)
{
  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *uint64_t v3 = &unk_1F11551C8;
  v3[25] = &unk_1F1155270;
  v3[27] = &unk_1F1155B48;
  v3[31] = &unk_1F1155DA0;
  v3[841] = &unk_1F1155DF8;
  v3[2372] = &unk_1F1155ED0;
}

void OZFolderMaterialProperties::~OZFolderMaterialProperties(OZFolderMaterialProperties *this)
{
  *(void *)this = &unk_1F1156270;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156558;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1156270;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156558;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZLightingFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F1155F30;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156218;
  PCURL::PCURL((PCURL *)&v15, @"Channel Lighting Parameter");
  PCURL::PCURL((PCURL *)&v14, @"Channel Lighting Switch");
  OZChannelEnum::OZChannelEnum((OZLightingFolder *)((char *)this + 128), 0, &v15, &v14, (OZChannelFolder *)this, 0xE6u, 0, 0, 0);
  PCString::~PCString(&v14);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Material Specularity Toggle");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), 0, &v15, (OZChannelFolder *)this, 0xE8u, 0, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Material Shininess Index");
  uint64_t v12 = (OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(v11);
  uint64_t v13 = (OZChannelInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZLightingFolder *)((char *)this + 536), 50.0, &v15, (OZChannelFolder *)this, 0xE9u, 0x8000, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Material Properties");
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), &v15, (OZChannelFolder *)this, 0xE7u, 10);
  PCString::~PCString(&v15);
}

void sub_1B7CB8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

uint64_t OZLightingFolder_Factory::getInstance(OZLightingFolder_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLightingFolder_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZLightingFolder_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder_Factory::_instance;
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *uint64_t v5 = &unk_1F1155F30;
  uint64_t v5[2] = &unk_1F1156218;
  PCURL::PCURL((PCURL *)&v10, @"Channel Lighting Parameter");
  PCURL::PCURL((PCURL *)&v9, @"Channel Lighting Switch");
  OZChannelEnum::OZChannelEnum((OZLightingFolder *)((char *)this + 128), 0, &v10, &v9, (OZChannelFolder *)this, 0xE6u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Material Specularity Toggle");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), 0, &v10, (OZChannelFolder *)this, 0xE8u, 0, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Material Shininess Index");
  uint64_t Instance = (OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(v6);
  uint64_t v8 = (OZChannelInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZLightingFolder *)((char *)this + 536), 50.0, &v10, (OZChannelFolder *)this, 0xE9u, 0x8000, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Material Properties");
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), &v10, (OZChannelFolder *)this, 0xE7u, 10);
  PCString::~PCString(&v10);
}

void sub_1B7CB8504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, const OZLightingFolder *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *uint64_t v5 = &unk_1F1155F30;
  uint64_t v5[2] = &unk_1F1156218;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 16), (const OZLightingFolder *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), (const OZChannelBase *)((char *)a2 + 384), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)this);
  *((void *)this + 67) = &unk_1F1100CF0;
  *((void *)this + 69) = &unk_1F1101050;
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), (const OZLightingFolder *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B7CB8698(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannelBool::~OZChannelBool(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZLightingFolder::~OZLightingFolder(OZLightingFolder *this)
{
  *(void *)this = &unk_1F1155F30;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156218;
  char v2 = (OZChannelFolder *)((char *)this + 688);
  *((void *)this + 86) = &unk_1F1156270;
  *((void *)this + 88) = &unk_1F1156558;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 816));
  OZChannelFolder::~OZChannelFolder(v2);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 384));
  OZChannelEnum::~OZChannelEnum((OZLightingFolder *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZLightingFolder::~OZLightingFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZLightingFolder::~OZLightingFolder(OZLightingFolder *this)
{
}

{
  uint64_t vars8;

  OZLightingFolder::~OZLightingFolder((OZLightingFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

OZLightingFolder *OZLightingFolder::copy(OZLightingFolder *this, const OZLightingFolder *a2, const CMTime *a3)
{
  if (a2 != this)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 128), a3, 0.0);
    uint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)((char *)this + 128), MEMORY[0x1E4F1FA48], (double)ValueAsInt, 0);
    int v8 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 384), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 384), v7, (double)v8, 0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)a2 + 536), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 536), a3, v9, 0);
    OZFolderMaterialProperties::copy((OZChannelBase *)((char *)this + 688), (OZChannelBase *)((char *)a2 + 688), a3);
  }
  return this;
}

OZChannelBase *OZFolderMaterialProperties::copy(OZChannelBase *this, OZChannelBase *a2, const CMTime *a3)
{
  if (a2 != this)
  {
    unint64_t isEnabled = OZChannelBase::isEnabled(a2, 0, 0);
    (*((void (**)(OZChannelBase *, unint64_t, void))this->var0 + 13))(this, isEnabled, 0);
    OZChannel::getValueAsDouble((OZChannel *)&a2[1].var2, a3, 0.0);
    OZChannel::setValue((OZChannel *)&this[1].var2, a3, v7, 0);
  }
  return this;
}

uint64_t OZLightingFolder::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    OZChannelFolder::operator=(a1);
  }
  return a1;
}

uint64_t non-virtual thunk to'OZLightingFolder::writeBody(OZLightingFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZLightingFolder::parseEnd(OZLightingFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)a2 + 26);
    if (v5 < 5 || (v5 == 5 ? (BOOL v6 = *((_DWORD *)a2 + 27) > 5u) : (BOOL v6 = 1), !v6))
    {
      if (((*(uint64_t (**)(char *, void))(*((void *)this + 102) + 552))((char *)this + 816, 0) & 1) != 0
        || (double DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 816)),
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), MEMORY[0x1E4F1FA48], 0.0),
            DefaultValue != v8)
        || (OZChannelFolder::hasKeypoints((OZChannelFolder *)((char *)this + 688), 0) & 1) != 0
        || OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 688), 0, 0))
      {
        double v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
        OZChannel::copyKeyframesFromChannel((OZChannel *)((char *)this + 384), MEMORY[0x1E4F1FA48], (OZChannelBase *)((char *)this + 688));
        unsigned int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 688), 0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 384), v9, (double)isEnabled, 0);
        OZChannel::copyKeyframesFromChannel((OZChannel *)((char *)this + 536), v9, (OZChannelBase *)((char *)this + 816));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), v9, 0.0);
        OZChannel::setValue((OZChannel *)((char *)this + 536), v9, v11, 0);
      }
    }
    uint64_t v12 = (OZChannelFolder *)((char *)this + 688);
    OZChannelFolder::resetToDefault(v12, 0);
    OZChannelBase::setFlag((OZChannelBase *)v12, 10, 0);
  }
  return v4;
}

uint64_t non-virtual thunk to'OZLightingFolder::parseEnd(OZLightingFolder *this, PCSerializerReadStream *a2)
{
  return OZLightingFolder::parseEnd((OZLightingFolder *)((char *)this - 16), a2);
}

uint64_t OZLightingFolder::buildLiMaterialProperties@<X0>(OZLightingFolder *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  LiMaterialProperties::LiMaterialProperties((LiMaterialProperties *)a3);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)a3 = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)(a3 + 24) = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)(a3 + 64) = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 0.0, 0.0, 0.0, 0.0);
  *(_OWORD *)(a3 + 48) = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), a2, 0.0);
  *(void *)(a3 + 88) = v6;
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 384), a2, 0.0);
  int v8 = result != 0;
  if (*(unsigned __int8 *)(a3 + 97) != v8) {
    *(unsigned char *)(a3 + 97) = v8;
  }
  *(_WORD *)(a3 + 98) = 257;
  return result;
}

void sub_1B7CB8C7C(_Unwind_Exception *a1)
{
  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

void OZFolderMaterialProperties::OZFolderMaterialProperties(OZFolderMaterialProperties *this, const OZFolderMaterialProperties *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1156270;
  *(void *)(v5 + 16) = &unk_1F1156558;
  OZChannel::OZChannel((OZChannel *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  *((void *)this + 16) = &unk_1F1100CF0;
  *((void *)this + 18) = &unk_1F1101050;
}

void sub_1B7CB8D54(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderMaterialProperties::OZFolderMaterialProperties(OZFolderMaterialProperties *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  *uint64_t v6 = &unk_1F1156270;
  _OWORD v6[2] = &unk_1F1156558;
  PCURL::PCURL((PCURL *)&v10, @"Channel Material Shininess Index");
  uint64_t Instance = (OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo *)OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(v7);
  long long v9 = (OZChannelInfo *)OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZFolderMaterialProperties *)((char *)this + 128), 50.0, &v10, (OZChannelFolder *)this, 8u, 0, (OZChannelImpl *)Instance, v9);
  PCString::~PCString(&v10);
  (*(void (**)(OZFolderMaterialProperties *, void, void))(*(void *)this + 104))(this, 0, 0);
  (*(void (**)(OZFolderMaterialProperties *))(*(void *)this + 128))(this);
}

void sub_1B7CB8E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZFolderMaterialProperties::~OZFolderMaterialProperties(OZFolderMaterialProperties *this)
{
  uint64_t v1 = (OZChannelFolder *)((char *)this - 16);
  *((void *)this - OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156270;
  *(void *)this = &unk_1F1156558;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 112));

  OZChannelFolder::~OZChannelFolder(v1);
}

{
  OZFolderMaterialProperties::~OZFolderMaterialProperties((OZFolderMaterialProperties *)((char *)this - 16));
}

uint64_t OZFolderMaterialProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    OZChannelFolder::operator=(a1);
  }
  return a1;
}

uint64_t OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::OZLightingFolder_channelShininessIndexImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::OZLightingFolder_channelShininessIndexImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::_OZLightingFolder_channelShininessIndex;
}

void std::__call_once_param<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::_OZLightingFolder_channelShininessIndex) {
    operator new();
  }
}

void sub_1B7CB90C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::OZLightingFolder_channelShininessIndexImpl(OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *this)
{
}

void sub_1B7CB91A4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::OZLightingFolder_channelShininessIndexInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::OZLightingFolder_channelShininessIndexInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::_OZLightingFolder_channelShininessIndexInfo;
}

void std::__call_once_param<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::_OZLightingFolder_channelShininessIndexInfo) {
    operator new();
  }
}

void sub_1B7CB9280(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::OZLightingFolder_channelShininessIndexInfo(OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1156658;
  *((void *)this + 10) = &unk_1F1156678;
  return this;
}

void sub_1B7CB9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZLightingFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CB93C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLightingFolder_Factory::OZLightingFolder_Factory(OZLightingFolder_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B8382CE0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11566D0;
  *((void *)this + 16) = &unk_1F11567A0;
}

void sub_1B7CB9490(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLightingFolder_Factory::create(OZLightingFolder_Factory *this, const PCString *a2)
{
}

void sub_1B7CB9504(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

void OZLightingFolder_Factory::createCopy(OZLightingFolder_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CB95BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

void OZLightingFolder_Factory::createChannelCopy(OZLightingFolder_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CB9674(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

uint64_t OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexImpl_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::_OZFolderMaterialProperties_channelShininessIndex;
}

void std::__call_once_param<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::_OZFolderMaterialProperties_channelShininessIndex) {
    operator new();
  }
}

void sub_1B7CB9750(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::OZFolderMaterialProperties_channelShininessIndexImpl(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *this)
{
}

void sub_1B7CB9834(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexInfo_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::_OZFolderMaterialProperties_channelShininessIndexInfo;
}

void std::__call_once_param<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::_OZFolderMaterialProperties_channelShininessIndexInfo) {
    operator new();
  }
}

void sub_1B7CB9910(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::OZFolderMaterialProperties_channelShininessIndexInfo(OZChannelInfo *this)
{
  OZChannelInfo::OZChannelInfo(this, 0.0, 100.0, 1.0, 0.01, 1.0, "%");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1156870;
  *((void *)this + 10) = &unk_1F1156890;
  return this;
}

void sub_1B7CB99C4(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior::OZAlignToBehavior(OZAlignToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)(v5 + 536) = &unk_1F1156FA0;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(void *)this = &unk_1F11568E8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156BC8;
  *((void *)this + 6) = &unk_1F1156E20;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156E78;
  *((void *)this + 67) = &unk_1F1156EA0;
  *((void *)this + 68) = &unk_1F1156F00;
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Source");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Alignment Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align To Behavior Target Alignment");
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 904), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Custom Target Alignment");
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1160), &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Alignment Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align To Behavior Source Alignment");
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Custom Source Alignment");
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1864), &v7, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Source Offset");
  OZChannelPosition3D::OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312), &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 3u);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Frame Alignment Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align To Behavior Frame Alignment");
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Source Frame");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3456), &v7, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Transition Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align To Behavior Transition");
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Custom Mix Factor");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3864), &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior End Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4016), &v7, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Ignore Behaviors");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4168), &v7, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_DWORD *)this + 1080) = 0;
  *((_WORD *)this + 216OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 256;
  *((unsigned char *)this + 4326) = 1;
  *((void *)this + 559) = 0x3FF0000000000000;
  *((void *)this + 554) = 0x3FF0000000000000;
  *((void *)this + 549) = 0x3FF0000000000000;
  *((void *)this + 544) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *((_OWORD *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *((void *)this + 578) = 0x3FF0000000000000;
  *((void *)this + 573) = 0x3FF0000000000000;
  *((void *)this + 568) = 0x3FF0000000000000;
  *((void *)this + 563) = 0x3FF0000000000000;
  *((_OWORD *)this + 28OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((_OWORD *)this + 283) = 0u;
  *(_OWORD *)((char *)this + 455OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 288) = 0u;
  *((void *)this + 597) = 0x3FF0000000000000;
  *((void *)this + 59OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *((void *)this + 587) = 0x3FF0000000000000;
  *((void *)this + 58OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4664) = 0u;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4760) = 0u;
  *((void *)this + 598) = 0;
  operator new();
}

void sub_1B7CBA0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, OZChannel2D *a10, OZChannelEnum *a11, OZChannel2D *a12, OZChannelEnum *a13, OZChanTransformNodeRef *a14, PCString a15, PCString a16)
{
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v16 + 600);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v16 + 599);
  OZChannelBool::~OZChannelBool(v21);
  OZChannel::~OZChannel(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelPercent::~OZChannelPercent(v24);
  OZChannelEnum::~OZChannelEnum(v23);
  OZChannelPosition3D::~OZChannelPosition3D(v22);
  OZChannel2D::~OZChannel2D(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel2D::~OZChannel2D(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a14);
  OZLocking::~OZLocking(v17);
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v16);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior::OZAlignToBehavior(OZAlignToBehavior *this, const OZAlignToBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)(v5 + 536) = &unk_1F1156FA0;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(void *)this = &unk_1F11568E8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156BC8;
  *((void *)this + 6) = &unk_1F1156E20;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156E78;
  *((void *)this + 67) = &unk_1F1156EA0;
  *((void *)this + 68) = &unk_1F1156F00;
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744), (const OZAlignToBehavior *)((char *)a2 + 744), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 904), (const OZAlignToBehavior *)((char *)a2 + 904), (OZChannelFolder *)((char *)this + 56));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1160), (const OZAlignToBehavior *)((char *)a2 + 1160), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608), (const OZAlignToBehavior *)((char *)a2 + 1608), (OZChannelFolder *)((char *)this + 56));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1864), (const OZAlignToBehavior *)((char *)a2 + 1864), (OZChannelFolder *)((char *)this + 56));
  OZChannelPosition3D::OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312), (const OZAlignToBehavior *)((char *)a2 + 2312), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200), (const OZAlignToBehavior *)((char *)a2 + 3200), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3456), (const OZChannelBase *)((char *)a2 + 3456), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608), (const OZAlignToBehavior *)((char *)a2 + 3608), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3864), (const OZChannelBase *)((char *)a2 + 3864), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 4016), (const OZChannelBase *)((char *)a2 + 4016), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 50OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101490;
  *((void *)this + 504) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4168), (const OZChannelBase *)((char *)a2 + 4168), (OZChannelFolder *)((char *)this + 56));
  *((_DWORD *)this + 1080) = 0;
  *((_WORD *)this + 216OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 256;
  *((unsigned char *)this + 4326) = 1;
  *((void *)this + 559) = 0x3FF0000000000000;
  *((void *)this + 554) = 0x3FF0000000000000;
  *((void *)this + 549) = 0x3FF0000000000000;
  *((void *)this + 544) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *((_OWORD *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *((void *)this + 578) = 0x3FF0000000000000;
  *((void *)this + 573) = 0x3FF0000000000000;
  *((void *)this + 568) = 0x3FF0000000000000;
  *((void *)this + 563) = 0x3FF0000000000000;
  *((_OWORD *)this + 283) = 0u;
  *((_OWORD *)this + 28OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 455OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 288) = 0u;
  *((void *)this + 597) = 0x3FF0000000000000;
  *((void *)this + 59OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *((void *)this + 587) = 0x3FF0000000000000;
  *((void *)this + 58OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4664) = 0u;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4760) = 0u;
  *((void *)this + 598) = 0;
  operator new();
}

void sub_1B7CBA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelPosition3D *a11, OZChannel2D *a12, OZChannelEnum *a13, OZChannel2D *a14, OZChannelEnum *a15, OZChanTransformNodeRef *a16)
{
  MEMORY[0x1BA9BFBA0](v23, 0x1032C40850D8295);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v22);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v16 + 600);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v16 + 599);
  OZChannelBool::~OZChannelBool(v21);
  OZChannel::~OZChannel(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelPercent::~OZChannelPercent(v24);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelPosition3D::~OZChannelPosition3D(a11);
  OZChannel2D::~OZChannel2D(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel2D::~OZChannel2D(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a16);
  OZLocking::~OZLocking(v17);
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v16);
  _Unwind_Resume(a1);
}

void sub_1B7CBA828()
{
}

void sub_1B7CBA830()
{
}

void sub_1B7CBA838()
{
}

void sub_1B7CBA840()
{
}

void sub_1B7CBA848()
{
}

void sub_1B7CBA850()
{
}

void sub_1B7CBA858()
{
}

void sub_1B7CBA860()
{
}

void sub_1B7CBA868()
{
}

void sub_1B7CBA870()
{
}

void sub_1B7CBA878()
{
}

void sub_1B7CBA880()
{
}

void sub_1B7CBA888()
{
}

void OZAlignToBehavior::~OZAlignToBehavior(OZAlignToBehavior *this)
{
  *(void *)this = &unk_1F11568E8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156BC8;
  *((void *)this + 6) = &unk_1F1156E20;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1156E78;
  *((void *)this + 67) = &unk_1F1156EA0;
  *((void *)this + 68) = &unk_1F1156F00;
  uint64_t v2 = *((void *)this + 598);
  if (v2)
  {
    OZChannelRef::~OZChannelRef((void **)(v2 + 8));
    MEMORY[0x1BA9BFBA0](v2, 0x1032C40850D8295);
  }
  *((void *)this + 598) = 0;
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 601);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 600);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 599);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4016));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3864));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3456));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200));
  OZChannelPosition3D::~OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312));
  OZChannel2D::~OZChannel2D((OZAlignToBehavior *)((char *)this + 1864));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608));
  OZChannel2D::~OZChannel2D((OZAlignToBehavior *)((char *)this + 1160));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 904));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744));
  *((void *)this + 68) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 552));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZAlignToBehavior::~OZAlignToBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZAlignToBehavior::~OZAlignToBehavior(OZAlignToBehavior *this)
{
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 48));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 336));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZAlignToBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 744, (uint64_t)(v4 + 744));
  OZChannelBase::operator=(a1 + 904, (uint64_t)(v5 + 904));
  OZChannelFolder::operator=(a1 + 1160);
  OZChannelBase::operator=(a1 + 1296, (uint64_t)(v5 + 1296));
  OZChannelBase::operator=(a1 + 1448, (uint64_t)(v5 + 1448));
  *(unsigned char *)(a1 + 1600) = v5[1600];
  OZChannelBase::operator=(a1 + 1608, (uint64_t)(v5 + 1608));
  OZChannelFolder::operator=(a1 + 1864);
  OZChannelBase::operator=(a1 + 2000, (uint64_t)(v5 + 2000));
  OZChannelBase::operator=(a1 + 2152, (uint64_t)(v5 + 2152));
  *(unsigned char *)(a1 + 2304) = v5[2304];
  OZChannelPosition::operator=(a1 + 2312, (uint64_t)(v5 + 2312));
  OZChannelBase::operator=(a1 + 3200, (uint64_t)(v5 + 3200));
  OZChannelBase::operator=(a1 + 3456, (uint64_t)(v5 + 3456));
  OZChannelBase::operator=(a1 + 3608, (uint64_t)(v5 + 3608));
  OZChannelBase::operator=(a1 + 3864, (uint64_t)(v5 + 3864));
  OZChannelBase::operator=(a1 + 4016, (uint64_t)(v5 + 4016));

  return OZChannelBase::operator=(a1 + 4168, (uint64_t)(v5 + 4168));
}

void OZAlignToBehavior::didAddToNode(OZAlignToBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  OZAlignToBehavior::setupCurveNodes(this);

  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 904), a2);
}

char *OZAlignToBehavior::setupCurveNodes(OZAlignToBehavior *this)
{
  uint64_t result = (char *)OZSimulationBehavior::getTransformNode(this);
  if (result) {
    OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(result + 1352));
  }
  return result;
}

void updateAlignmentChannel(OZChannelEnum *a1, OZSceneNode *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v4 = *((void *)a2 + 1);
    *(_OWORD *)&v8[0].CMTime var0 = xmmword_1B7E78220;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)v8))
    {
      PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Alignment Enum");
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, @"Align To Behavior Text Horizontal Alignment");
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, @"Align To Behavior Alignment Custom");
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(void *)a1 + 848))(a1, &v7, 1);
      long long v10 = xmmword_1B8382ED4;
      long long v11 = unk_1B8382EE4;
      long long v12 = xmmword_1B8382EF4;
      *(_OWORD *)&v8[0].CMTime var0 = xmmword_1B8382EB4;
      long long v9 = unk_1B8382EC4;
      OZChannelEnum::setTags(a1, (char *)v8, 20);
    }
    else
    {
      unint64_t v5 = *((void *)a2 + 1);
      *(_OWORD *)&v8[0].CMTime var0 = xmmword_1B8380C30;
      if ((OZFactory::isKindOfClass(v5, (int32x4_t *)v8) & 1) != 0
        || (unint64_t v6 = *((void *)a2 + 1),
            *(_OWORD *)&v8[0].CMTime var0 = xmmword_1B837FEA0,
            OZFactory::isKindOfClass(v6, (int32x4_t *)v8)))
      {
        PCURL::PCURL((PCURL *)v8, @"Align To Behavior Light Camera Alignment Enum");
        (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(void *)a1 + 848))(a1, v8, 1);
        PCString::~PCString(v8);
        LODWORD(v8[0].var0) = 0;
        OZChannelEnum::setTags(a1, (char *)v8, 1);
        return;
      }
      PCURL::PCURL((PCURL *)&v7, @"Align To Behavior Alignment Enum");
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, @"Align To Behavior Alignment Custom");
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(void *)a1 + 848))(a1, &v7, 1);
      *(void *)&long long v11 = 0xC0000000BLL;
      *(_OWORD *)&v8[0].CMTime var0 = xmmword_1B8382F04;
      long long v9 = unk_1B8382F14;
      long long v10 = xmmword_1B8382F24;
      OZChannelEnum::setTags(a1, (char *)v8, 14);
    }
    PCString::~PCString(&v7);
  }
}

void sub_1B7CBB110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
}

void OZAlignToBehavior::notify(OZAlignToBehavior *this, char a2)
{
  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0xC) != 0)
  {
    uint64_t v4 = (*(uint64_t (**)(OZAlignToBehavior *))(*(void *)this + 336))(this);
    if (v4)
    {
      uint64_t v5 = v4;
      int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 744));
      if (*((_DWORD *)this + 1080) != ObjectID)
      {
        int v7 = ObjectID;
        OZScene::dirtyLockDependencies(v5);
        Sourceuint64_t Object = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
        updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), SourceObject);
        *((_DWORD *)this + 1080) = v7;
      }
    }
  }
  if ((a2 & 0x10) != 0)
  {
    long long v9 = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
    updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), v9);
  }
}

const void *OZAlignToBehavior::getSourceObject(OZAlignToBehavior *this)
{
  uint64_t result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 744));
  if (result)
  {
  }
  return result;
}

void non-virtual thunk to'OZAlignToBehavior::notify(OZAlignToBehavior *this, char a2)
{
}

void OZAlignToBehavior::finishInitializing(OZAlignToBehavior *this)
{
  OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
  Sourceuint64_t Object = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), SourceObject);
  Transformunint64_t Node = (OZSceneNode *)OZSimulationBehavior::getTransformNode(this);

  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 904), TransformNode);
}

uint64_t OZAlignToBehavior::canAddToSceneNode(OZAlignToBehavior *this, OZSceneNode *a2)
{
  canAddTouint64_t SceneNode = OZBehavior::canAddToSceneNode(this, a2);
  uint64_t v4 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2);
  if (!canAddToSceneNode) {
    return 0;
  }
  unint64_t v5 = *(void *)(v4 + 8);
  long long v8 = xmmword_1B837FEA0;
  if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v8)) {
    return 0;
  }
  long long v7 = xmmword_1B8380C30;
  return OZFactory::isKindOfClass(v5, (int32x4_t *)&v7) ^ 1;
}

uint64_t OZAlignToBehavior::didAddSceneNodeToScene(OZAlignToBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  unint64_t v5 = (void *)*((void *)this + 598);
  if (v5) {
    *unint64_t v5 = a2;
  }
  return result;
}

uint64_t OZAlignToBehavior::willRemoveSceneNodeFromScene(OZAlignToBehavior *this, OZScene *a2)
{
  OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);

  return OZLocking::removeFromLockingGroup((OZAlignToBehavior *)((char *)this + 544));
}

__n128 OZAlignToBehavior::dirty(OZAlignToBehavior *this)
{
  OZBehavior::dirty(this);
  uint64_t v2 = (void *)*((void *)this + 599);
  long long v3 = (void *)v2[4];
  v2 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v2 - 1), v3);
  *(v2 - 1) = v2;
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[3] = v2[2];
  v2[6] = 0;
  uint64_t v4 = (void *)*((void *)this + 600);
  unint64_t v5 = (void *)v4[4];
  v4 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[3] = v4[2];
  v4[6] = 0;
  unint64_t v6 = (void *)*((void *)this + 601);
  long long v7 = (void *)v6[4];
  v6 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *unint64_t v6 = 0;
  v6[1] = 0;
  v6[3] = v6[2];
  v6[6] = 0;
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 4328) = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(v8 + 16);
  *((void *)this + 543) = v10;
  *((__n128 *)this + 280) = result;
  *((void *)this + 56OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v10;
  *(__n128 *)((char *)this + 463OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = result;
  *((void *)this + 581) = v10;
  return result;
}

double non-virtual thunk to'OZAlignToBehavior::dirty(OZAlignToBehavior *this)
{
  *(void *)&double result = OZAlignToBehavior::dirty((OZAlignToBehavior *)((char *)this - 16)).n128_u64[0];
  return result;
}

char *OZAlignToBehavior::getEvalDepChansForRef(char *result, void *a2, const void *a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v6 = result;
    OZChannelBehavior::getEvalDepChansForRef((int)result, a2, (uint64_t)a3, a4);
    if (result)
    {
      return OZAlignToBehavior::getEvalDepChansForGroup(v6, (uint64_t)result, a4);
    }
  }
  return result;
}

char *OZAlignToBehavior::getEvalDepChansForGroup(char *result, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 1024))(a2);
    double result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 1032))(a2);
    if ((char *)v6 != result)
    {
      long long v7 = result;
      do
      {
        double result = *(char **)(v6 + 16);
        if (result)
        {
          if (result)
          {
            uint64_t v8 = result;
            long long v9 = result + 1088;
            uint64_t v10 = operator new(0x18uLL);
            v10[1] = a3;
            _OWORD v10[2] = v9;
            uint64_t v11 = *a3;
            *uint64_t v10 = *a3;
            *(void *)(v11 + 8) = v10;
            *a3 = (uint64_t)v10;
            ++a3[2];
            if (result) {
              double result = (char *)OZAlignToBehavior::getEvalDepChansForGroup(v5, result, a3);
            }
          }
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while ((char *)v6 != v7);
    }
  }
  return result;
}

const OZSceneNode *OZAlignToBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  int canChanRefBeSetTo = OZChannelBehavior::canChanRefBeSetTo(this, a2, a3);
  double result = 0;
  if (a3)
  {
    if (canChanRefBeSetTo)
    {
      if (result)
      {
        long long v7 = result;
        double result = (const OZSceneNode *)OZAlignToBehavior::getTargetObject((OZAlignToBehavior *)this);
        if (result) {
          return (const OZSceneNode *)!OZSceneNode::isDescendantOf(v7, result);
        }
      }
    }
  }
  return result;
}

void *OZAlignToBehavior::getTargetObject(OZAlignToBehavior *this)
{
  double result = (void *)(*(uint64_t (**)(OZAlignToBehavior *))(*(void *)this + 328))(this);
  if (result)
  {
  }
  return result;
}

const OZSceneNode *non-virtual thunk to'OZAlignToBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  return OZAlignToBehavior::canChanRefBeSetTo(this - 2, a2, a3);
}

void OZAlignToBehavior::setupCurveNodeForChannel(OZAlignToBehavior *this, OZChannel *a2)
{
}

void sub_1B7CBB928(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

__n128 OZAlignToBehavior::solveNode(OZAlignToBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.int64_t value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZAlignToBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZAlignToBehavior::solveNode(OZAlignToBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZAlignToBehavior::solveNode((OZAlignToBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

void OZAlignToBehavior::computeMixFactor(OZAlignToBehavior *this, const CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 608))(v16);
  memset(&v15, 0, sizeof(v15));
  OZBehavior::getFrameDuration(this, (__n128 *)&v15);
  memset(&v14, 0, sizeof(v14));
  uint64_t v4 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4016), MEMORY[0x1E4F1FA48], 0.0);
  operator*(&v15, &v14, v5);
  memset(&v13, 0, sizeof(v13));
  CMTime time1 = v16[1];
  CMTime time2 = v15;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
  CMTime time1 = v12;
  CMTime time2 = v14;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v13);
  CMTime time1 = v13;
  CMTime time2 = *v4;
  if (CMTimeCompare(&time1, &time2))
  {
    CMTime time2 = v16[0];
    CMTime time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    operator/((long long *)&v12.value, (uint64_t)&v13, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
  }
  else
  {
    double Seconds = 1.0;
  }
  time1.int64_t value = 0x3FF0000000000000;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 3608), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      time1.int64_t value = 0x3FF0000000000000;
      return;
    case 1u:
      double v8 = 1.0;
      if (Seconds <= 1.0) {
        double v8 = Seconds;
      }
      if (Seconds < 0.0) {
        double v8 = 0.0;
      }
      *(double *)&time1.int64_t value = v8;
      return;
    case 2u:
      double v9 = 0.5;
      goto LABEL_16;
    case 3u:
      double v9 = 0.0;
      goto LABEL_14;
    case 4u:
      double v9 = 0.5;
LABEL_14:
      double v10 = 0.5;
      goto LABEL_18;
    case 5u:
      double v9 = 1.0;
LABEL_16:
      double v10 = 0.0;
      goto LABEL_18;
    case 6u:
      double v9 = 0.0;
      double v10 = 1.0;
LABEL_18:
      PCMath::easeInOut((double *)&time1.value, Seconds, v9, v10, 0.0, 1.0, 0, v7);
      break;
    case 8u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3864), a2, 0.0);
      break;
    default:
      time1.int64_t value = 0x3FF0000000000000;
      break;
  }
}

void OZAlignToBehavior::getSourceFrame(OZAlignToBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3200), MEMORY[0x1E4F1FA48], 0.0)
    && (Sourceuint64_t Object = OZAlignToBehavior::getSourceObject(this)) != 0)
  {
    long long v7 = SourceObject;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3456), MEMORY[0x1E4F1FA48], 0.0);
    double v9 = v8;
    (*(void (**)(CMTime *__return_ptr, const void *))(*(void *)v7 + 1128))(v16, v7);
    memset(&v15, 0, sizeof(v15));
    CMTime v14 = v16[1];
    uint64_t v10 = (*(uint64_t (**)(OZAlignToBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v13);
    CMTime v18 = v14;
    CMTime v17 = v13;
    PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v15);
    CMTime v14 = v16[0];
    CMTime v12 = v15;
    Float64 Seconds = CMTimeGetSeconds(&v12);
    OZFigTimeForChannelSeconds(&v13, v9 * Seconds, 0x40000);
    CMTime v18 = v14;
    CMTime v17 = v13;
    PC_CMTimeSaferAdd(&v18, &v17, a3);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(void *)(a3 + 16) = a2->epoch;
  }
}

void OZAlignToBehavior::getSourceToWorldTransform(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  OZRenderState::OZRenderState(&v17);
  OZAlignToBehavior::getSourceFrame(this, a3, (uint64_t)&v18);
  *(_OWORD *)&v17.var0.CMTime var0 = v18;
  v17.var0.int64_t var3 = v19;
  v17.var20 = 0;
  double v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  v17.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E4F1FA48], 0.0) != 0;
  v17.var22 = *((unsigned char *)this + 4326) ^ 1;
  *(_WORD *)&v17.var23 = 257;
  *(_WORD *)&v17.var8 = 0;
  unsigned int v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), v8, 0.0) - 14;
  if (v9 > 0xE) {
    int v10 = 3;
  }
  else {
    int v10 = dword_1B8382F40[v9];
  }
  v17.var29 = v10;
  *(void *)(a4 + 120) = 0x3FF0000000000000;
  *(void *)(a4 + 80) = 0x3FF0000000000000;
  *(void *)(a4 + 40) = 0x3FF0000000000000;
  *(void *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  CMTime v11 = (OZCacheKey *)*((void *)this + 598);
  if (v11)
  {
    OZCacheKey::getKey(v11, (const CMTime *)&v17);
    uint64_t v27 = v12;
    char v26 = 0;
    PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue(*((uint64_t **)this + 600), (double *)&v27, &v26, (uint64_t)&v18);
    if (&v18 != (long long *)a4)
    {
      long long v13 = v23;
      *(_OWORD *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 80) = v13;
      long long v14 = v25;
      *(_OWORD *)(a4 + 96) = v24;
      *(_OWORD *)(a4 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v14;
      long long v15 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v15;
      long long v16 = v21;
      *(_OWORD *)(a4 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v20;
      *(_OWORD *)(a4 + 48) = v16;
    }
    if (!v26)
    {
      (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(void *)a2 + 1256))(a2, a4, &v17);
      PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue(*((void *)this + 600), (double *)&v27, (long long *)a4, 0);
    }
  }
  else
  {
    (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(void *)a2 + 1256))(a2, a4, &v17);
  }
}

double OZAlignToBehavior::getSourceAlignmentOffset@<D0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  OZRenderState::OZRenderState(&v18);
  OZAlignToBehavior::getSourceFrame(this, a3, (uint64_t)&v21);
  *(_OWORD *)&v18.var0.CMTime var0 = v21;
  v18.var0.int64_t var3 = v22;
  v18.var20 = 0;
  double v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  v18.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E4F1FA48], 0.0) != 0;
  v18.var22 = *((unsigned char *)this + 4326) ^ 1;
  *(_WORD *)&v18.var23 = 257;
  *(_WORD *)&v18.var8 = 0;
  unsigned int v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), v8, 0.0) - 14;
  if (v9 > 0xE) {
    int v11 = 3;
  }
  else {
    int v11 = dword_1B8382F40[v9];
  }
  v18.var29 = v11;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (a2)
  {
    if (v12)
    {
      long long v13 = v12;
      long long v14 = (OZCacheKey *)*((void *)this + 598);
      if (v14)
      {
        OZCacheKey::getKey(v14, (const CMTime *)&v18);
        uint64_t v20 = v15;
        char v19 = 0;
        PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::findValue(*((uint64_t **)this + 599), (double *)&v20, &v19, (uint64_t)&v21);
        double result = *(double *)&v21;
        *(_OWORD *)a4 = v21;
        *(void *)(a4 + 16) = v22;
        if (!v19)
        {
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), MEMORY[0x1E4F1FA48], 0.0);
          getAlignmentOffset(v13, (CMTime *)&v18, (OZAlignToBehavior *)((char *)this + 1864), ValueAsInt, (double *)&v21);
          *(_OWORD *)a4 = v21;
          *(void *)(a4 + 16) = v22;
          PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::addValue(*((void *)this + 599), (double *)&v20, (long long *)a4, 0);
        }
      }
      else
      {
        int v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), MEMORY[0x1E4F1FA48], 0.0);
        getAlignmentOffset(v13, (CMTime *)&v18, (OZAlignToBehavior *)((char *)this + 1864), v17, (double *)&v21);
        double result = *(double *)&v21;
        *(_OWORD *)a4 = v21;
        *(void *)(a4 + 16) = v22;
      }
    }
  }
  return result;
}

BOOL OZAlignToBehavior::getSourceRotation@<W0>(uint64_t **this@<X0>, OZTransformNode *a2@<X1>, OZTransformNode *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  OZRenderState::OZRenderState(&v22);
  OZAlignToBehavior::getSourceFrame((OZAlignToBehavior *)this, a4, (uint64_t)v13);
  *(_OWORD *)&v22.var0.CMTime var0 = *(_OWORD *)v13;
  v22.var0.int64_t var3 = *(void *)&v13[16];
  *(void *)long long v13 = &v22.var30;
  *(_DWORD *)&v13[8] = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)v13, 0xEuLL);
  OZRenderState::TransformSet::rotation((uint64_t *)&v22.var30, 1);
  v22.var4 = 0;
  *(_WORD *)&v22.var8 = 256;
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  *(void *)long long v13 = 0x3FF0000000000000;
  *(_OWORD *)&v13[8] = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  int v10 = (OZCacheKey *)this[598];
  if (v10)
  {
    OZCacheKey::getKey(v10, (const CMTime *)&v22);
    uint64_t v24 = v11;
    char v23 = 0;
    PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue(this[601], (double *)&v24, &v23, (uint64_t)v13);
    if (!v23)
    {
      OZTransformNode::getCommonAncestorTransforms((OZSceneNode *)a2, (OZSceneNode *)a3, &v22, (uint64_t)v13, 0);
      PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue((uint64_t)this[601], (double *)&v24, (long long *)v13, 0);
    }
  }
  else
  {
    OZTransformNode::getCommonAncestorTransforms((OZSceneNode *)a2, (OZSceneNode *)a3, &v22, (uint64_t)v13, 0);
  }
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_DWORD *)(a5 + 48) = 4;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(void *)(a5 + 88) = 0;
  return liSafeGetTransformation((long long *)v13, a5);
}

__n128 OZAlignToBehavior::getTargetTransform@<Q0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const OZRenderState *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 120) = 0x3FF0000000000000;
  *(void *)(a4 + 80) = 0x3FF0000000000000;
  *(void *)(a4 + 40) = 0x3FF0000000000000;
  *(void *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  CMTime time1 = (CMTime)a3->var0;
  CMTime v16 = *(CMTime *)((char *)this + 4480);
  if (CMTimeCompare(&time1, &v16))
  {
    (*(void (**)(OZTransformNode *, uint64_t, const OZRenderState *))(*(void *)a2 + 1256))(a2, a4, a3);
    if ((OZAlignToBehavior *)((char *)this + 4504) != (OZAlignToBehavior *)a4)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        int v10 = (_OWORD *)((char *)this + i + 4504);
        long long v11 = *(_OWORD *)(a4 + i + 16);
        *int v10 = *(_OWORD *)(a4 + i);
        v10[1] = v11;
      }
    }
    __n128 result = *(__n128 *)&a3->var0.var0;
    *((void *)this + 56OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a3->var0.var3;
    *((__n128 *)this + 280) = result;
  }
  else if ((OZAlignToBehavior *)((char *)this + 4504) != (OZAlignToBehavior *)a4)
  {
    uint64_t v12 = 0;
    long long v13 = (char *)this + 4504;
    do
    {
      uint64_t v14 = a4 + v12;
      __n128 result = *(__n128 *)&v13[v12];
      long long v15 = *(_OWORD *)&v13[v12 + 16];
      *(__n128 *)uint64_t v14 = result;
      *(_OWORD *)(v14 + 16) = v15;
      v12 += 32;
    }
    while (v12 != 128);
  }
  return result;
}

void *OZAlignToBehavior::getWorldToTargetOwnerTransform@<X0>(OZTransformNode *a1@<X1>, const CMTime *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  __n128 result = (void *)*((void *)a1 + 120);
  if (result)
  {
    if (result)
    {
      long long v7 = result;
      OZRenderState::OZRenderState(&v8);
      *(_OWORD *)&v8.var0.CMTime var0 = *(_OWORD *)&a2->value;
      v8.var0.int64_t var3 = a2->epoch;
      p_var30 = &v8.var30;
      int v10 = 0;
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&p_var30, 0xEuLL);
      v8.var4 = 0;
      *(_WORD *)&v8.var8 = 0;
      return (void *)(*(uint64_t (**)(void *, uint64_t, OZRenderState *))(*(void *)v7 + 1264))(v7, a3, &v8);
    }
  }
  return result;
}

double OZAlignToBehavior::getTargetAlignmentTransform@<D0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, OZTransformNode *a3@<X2>, $3CC8671D27C23BF42ADDB32F2B5E48AE *a4@<X3>, uint64_t a5@<X8>)
{
  OZRenderState::OZRenderState(&v30);
  v30.CMTime var0 = *a4;
  v30.var20 = 0;
  int v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  v30.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E4F1FA48], 0.0) != 0;
  v30.var22 = *((unsigned char *)this + 4325) ^ 1;
  v30.var9 = 0;
  *(_WORD *)&v30.var23 = 257;
  unsigned int v11 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 904), v10, 0.0) - 14;
  if (v11 > 0xE) {
    int v12 = 3;
  }
  else {
    int v12 = dword_1B8382F40[v11];
  }
  v30.var29 = v12;
  p_var30 = &v30.var30;
  int v29 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&p_var30, 0xEuLL);
  OZRenderState::TransformSet::scale((uint64_t *)&v30.var30, 1);
  OZRenderState::TransformSet::pivot((uint64_t *)&v30.var30, 1);
  v30.var4 = 1;
  v30.var8 = 0;
  OZAlignToBehavior::getTargetTransform(this, a2, &v30, (uint64_t)&p_var30);
  OZAlignToBehavior::getSourceRotation((uint64_t **)this, a3, a2, (const CMTime *)a4, (uint64_t)v24);
  PCMatrix44Tmpl<double>::leftRotate((double *)&p_var30, 4, v25, v26, v27);
  double v21 = COERCE_DOUBLE((OZRenderState *)&v30.var30);
  LODWORD(v2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, 0xEuLL);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 904), MEMORY[0x1E4F1FA48], 0.0);
  if (a2) {
  else
  }
    uint64_t v14 = 0;
  getAlignmentOffset(v14, (CMTime *)&v30, (OZAlignToBehavior *)((char *)this + 1160), ValueAsInt, &v21);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2448), (const CMTime *)&v30, 0.0);
  double v21 = v21 - v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2600), (const CMTime *)&v30, 0.0);
  double v22 = v22 - v16;
  PCMatrix44Tmpl<double>::transform<double>((double *)&p_var30, &v21, &v21);
  *(void *)(a5 + 120) = 0x3FF0000000000000;
  *(void *)(a5 + 80) = 0x3FF0000000000000;
  *(void *)(a5 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  double v17 = -v21;
  double v18 = -v22;
  double v19 = -v23;
  *(void *)a5 = 0x3FF0000000000000;
  return PCMatrix44Tmpl<double>::rightTranslate((double *)a5, v17, v18, v19);
}

double getAlignmentOffset@<D0>(OZElement *a1@<X1>, CMTime *a2@<X2>, OZChannelPositionPercent *a3@<X3>, int a4@<W0>, double *a5@<X8>)
{
  *a5 = 0.0;
  a5[1] = 0.0;
  a5[2] = 0.0;
  if (a4 == 34)
  {
    OZTransformNode::getPivot((uint64_t)a1, a5, a2);
  }
  else
  {
    double v17 = 0.0;
    double v18 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v19 = _Q0;
    (*(void (**)(OZElement *, double *, CMTime *))(*(void *)a1 + 1488))(a1, &v17, a2);
    if (a4 == 12)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 136), a2, 0.0);
    }
    else
    {
      double v15 = 0.5;
      if ((a4 - 2) < 0x1B) {
        double v15 = dbl_1B8382F80[a4 - 2];
      }
    }
    *a5 = v17 + v15 * (v17 + *(double *)&v19 - v17);
    if (a4 == 12)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 288), a2, 0.0);
    }
    else
    {
      double v16 = 0.5;
      if ((a4 - 4) < 0x19) {
        double v16 = dbl_1B8383058[a4 - 4];
      }
    }
    double result = v18 + v16 * (v18 + *((double *)&v19 + 1) - v18);
    a5[1] = result;
  }
  return result;
}

double OZAlignToBehavior::solveRotation(uint64_t **this, OZTransformNode *a2, OZTransformNode *a3, int a4, const CMTime *a5, double a6)
{
  OZAlignToBehavior::getSourceRotation(this, a2, a3, a5, (uint64_t)v13);
  if (a4 == 5)
  {
    double v10 = *(double *)&v13[9];
  }
  else if (a4 == 4)
  {
    double v10 = *(double *)&v13[8];
  }
  else
  {
    double v10 = a6;
    if (a4 == 3) {
      double v10 = *(double *)&v13[7];
    }
  }
  OZAlignToBehavior::computeMixFactor((OZAlignToBehavior *)this, a5);
  return (v10 - a6) * v11 + a6;
}

double OZAlignToBehavior::solvePosition(OZAlignToBehavior *this, OZTransformNode *a2, OZTransformNode *a3, int a4, CMTime *a5, double a6)
{
  *((unsigned char *)this + 4324) = 1;
  OZAlignToBehavior::getSourceToWorldTransform(this, a2, a5, (uint64_t)v24);
  OZAlignToBehavior::getSourceAlignmentOffset(this, a2, a5, (uint64_t)v23);
  OZAlignToBehavior::getWorldToTargetOwnerTransform(a3, a5, (uint64_t)v22);
  OZAlignToBehavior::getTargetAlignmentTransform(this, a3, a2, ($3CC8671D27C23BF42ADDB32F2B5E48AE *)a5, (uint64_t)v21);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v21, v22, (uint64_t)v19);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v19, v24, (uint64_t)v20);
  int v12 = PCMatrix44Tmpl<double>::transform<double>(v20, v23, v23);
  double v13 = *v12;
  double v14 = v12[1];
  double v15 = v12[2];
  *((unsigned char *)this + 4324) = 0;
  if (a4) {
    double v13 = a6;
  }
  if (a4 == 1) {
    double v13 = v14;
  }
  if (a4 == 2) {
    double v16 = v15;
  }
  else {
    double v16 = v13;
  }
  OZAlignToBehavior::computeMixFactor(this, a5);
  return (v16 - a6) * v17 + a6;
}

double OZAlignToBehavior::solveNode(OZAlignToBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v18, 0, sizeof(v18));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v18, a4);
  CMTime v17 = v18;
  if ((*(unsigned int (**)(OZAlignToBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v17, 0, 1, 1))
  {
    Sourceuint64_t Object = (OZTransformNode *)OZAlignToBehavior::getSourceObject(this);
    if (SourceObject)
    {
      unsigned int v9 = SourceObject;
      Transformunint64_t Node = (OZTransformNode *)OZSimulationBehavior::getTransformNode(this);
      if (TransformNode)
      {
        double v11 = TransformNode;
        OZAlignToBehavior::computeMixFactor(this, &v18);
        if (v12 <= -0.0000001 || v12 >= 0.0000001)
        {
          double v13 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZAlignToBehavior *)((char *)this + 544));
          OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v13);
          if (!*((unsigned char *)this + 4324))
          {
            if (a2 > 2) {
              double v14 = OZAlignToBehavior::solveRotation((uint64_t **)this, v9, v11, a2, &v18, a5);
            }
            else {
              double v14 = OZAlignToBehavior::solvePosition(this, v9, v11, a2, &v18, a5);
            }
            a5 = v14;
          }
          OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
        }
      }
    }
  }
  return a5;
}

void sub_1B7CBCE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZAlignToBehavior::solveNode(OZAlignToBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZAlignToBehavior::solveNode((OZAlignToBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

uint64_t OZAlignToBehavior::parseBegin(OZAlignToBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZAlignToBehavior::parseBegin(OZAlignToBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZAlignToBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 601)
  {
    PCSharedCount::PCSharedCount(&v6);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v6)) {
      operator new();
    }
    PCString::~PCString((PCString *)&v6);
  }
  return 1;
}

void sub_1B7CBCFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x1032C40850D8295);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZAlignToBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZAlignToBehavior::getLockDependencies(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  long long v7 = (OZAlignToBehavior *)result;
  OZRenderState v8 = (char *)(result + 544);
  for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v10 = i[4];
    if ((unint64_t)v8 >= v10)
    {
      if (v10 >= (unint64_t)v8) {
        return result;
      }
      ++i;
    }
  }
  CMTime v17 = (unint64_t *)(result + 544);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v17, (uint64_t *)&v17);
  if (a2)
  {
    PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)v8);
  }
  else
  {
    double v16 = v8;
    CMTime v17 = (unint64_t *)&v16;
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
  }
  Sourceuint64_t Object = OZAlignToBehavior::getSourceObject(v7);
  if (SourceObject) {
  else
  }
    double v12 = 0;
  Transformunint64_t Node = OZSimulationBehavior::getTransformNode(v7);
  if (TransformNode) {
  else
  }
    double v14 = 0;
  OZLocking::getLockDependenciesForElement(v12, (unint64_t)v8, a3, a4);
  OZLocking::getLockDependenciesForElement(v14, (unint64_t)v8, a3, a4);
  double v15 = (OZScene *)(*(uint64_t (**)(OZAlignToBehavior *))(*(void *)v7 + 336))(v7);
  OZLocking::addLockDependenciesForDependents(v8, v15, (uint64_t)a3, a4);
  CMTime v17 = (unint64_t *)v8;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v17);
}

uint64_t non-virtual thunk to'OZAlignToBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZAlignToBehavior::getLockDependencies(a1 - 544, a2, a3, a4);
}

uint64_t OZAlignToBehavior::getLockingGroups(OZAlignToBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZAlignToBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZAlignToBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZAlignToBehavior::getLockingGroups(OZAlignToBehavior *this)
{
  uint64_t v1 = (char *)this - 544;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 68) + 336))((char *)this - 544);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

void OZCacheKey::getKey(OZCacheKey *this, const CMTime *a2)
{
  Channel = (OZChannel *)*((void *)this + 4);
  if (!Channel)
  {
    Channel = (OZChannel *)OZChannelRef::getChannel((OZCacheKey *)((char *)this + 8), (OZChannelBase *)(*(void *)this + 920));
    if (Channel) {
    *((void *)this + 4) = Channel;
    }
  }

  OZChannel::getValueAsDouble(Channel, a2, 0.0);
}

__n128 OZSingleChanBehaviorIF::getNeededRange(OZSingleChanBehaviorIF *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

uint64_t *PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(uint64_t *a1)
{
  uint64_t v2 = *a1 + 32;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*a1 + 24, *(void **)v2);
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 24) = *(void *)(v2 + 16);
  *(void *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCacheImpl(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCacheImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t *PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue@<X0>(uint64_t *result@<X0>, double *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result[4];
  if (!v5) {
    goto LABEL_8;
  }
  double v6 = *a2;
  long long v7 = result + 4;
  do
  {
    OZRenderState v8 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v6)
    {
      OZRenderState v8 = (uint64_t *)v5;
      long long v7 = (uint64_t *)v5;
    }
    uint64_t v5 = *v8;
  }
  while (*v8);
  if (v7 != result + 4 && v6 >= *((double *)v7 + 4))
  {
    double v14 = v7;
    long long v9 = *(_OWORD *)(v7 + 15);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v7 + 13);
    *(_OWORD *)(a4 + 80) = v9;
    long long v10 = *(_OWORD *)(v7 + 19);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(v7 + 17);
    *(_OWORD *)(a4 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v10;
    long long v11 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)a4 = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a4 + 16) = v11;
    long long v12 = *(_OWORD *)(v7 + 11);
    *(_OWORD *)(a4 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(v7 + 9);
    *(_OWORD *)(a4 + 48) = v12;
    uint64_t v13 = result[9] + 1;
    result[9] = v13;
    v7[22] = v13;
    uint64_t result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(result + 6, (uint64_t)&v14);
    *a3 = 1;
  }
  else
  {
LABEL_8:
    *a3 = 0;
    *(void *)(a4 + 120) = 0x3FF0000000000000;
    *(void *)(a4 + 80) = 0x3FF0000000000000;
    *(void *)(a4 + 40) = 0x3FF0000000000000;
    *(void *)a4 = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
  }
  return result;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1] - *result;
  unint64_t v4 = *(void *)(*(void *)a2 + 184);
  unint64_t v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      uint64_t v17 = *(void *)(v2 + 8 * v4);
      do
      {
        unint64_t v18 = v4 - 1;
        unint64_t v19 = (v4 - 1) >> 1;
        uint64_t v20 = *(void *)(v2 + 8 * v19);
        if (*(void *)(v20 + 176) <= *(void *)(v17 + 176)) {
          break;
        }
        *(void *)(v2 + 8 * v4) = v20;
        *(void *)(v2 + 8 * v19) = v17;
        uint64_t v2 = *result;
        *(void *)(*(void *)(*result + 8 * v4) + 184) = v4;
        uint64_t v17 = *(void *)(v2 + 8 * v19);
        *(void *)(v17 + 184) = v19;
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  char v6 = 0;
  unint64_t v7 = v3 >> 3;
  uint64_t v8 = 2 * v4;
  uint64_t v9 = *(void *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v10 = v8 + 2;
    unint64_t v11 = *(void *)(v9 + 176);
    BOOL v12 = v10 < v7 && v11 > *(void *)(*(void *)(v2 + 8 * v10) + 176);
    unint64_t v13 = *(void *)(*(void *)(v2 + 8 * v5) + 176);
    if (v11 <= v13 && !v12) {
      break;
    }
    BOOL v15 = v11 > v13 && v12;
    if (v12) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v5;
    }
    if (v15)
    {
      if (v13 <= *(void *)(*(void *)(v2 + 8 * v10) + 176)) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v10;
      }
    }
    *(void *)(v2 + 8 * v4) = *(void *)(v2 + 8 * v16);
    *(void *)(v2 + 8 * v16) = v9;
    uint64_t v2 = *result;
    *(void *)(*(void *)(*result + 8 * v4) + 184) = v4;
    uint64_t v9 = *(void *)(v2 + 8 * v16);
    *(void *)(v9 + 184) = v16;
    uint64_t v8 = 2 * v16;
    char v6 = 1;
    unint64_t v5 = (2 * v16) | 1;
    unint64_t v4 = v16;
    if (v5 >= v7) {
      return result;
    }
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v4 = *(void *)(*(void *)a2 + 184);
    goto LABEL_24;
  }
  return result;
}

void PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue(uint64_t a1, double *a2, long long *a3, unint64_t a4)
{
  if (*(void *)(a1 + 88) >= a4 || *(void *)(a1 + 104))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *a2;
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v8 = a1 + 32;
    do
    {
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (*(double *)(v6 + 32) >= v7)
      {
        uint64_t v9 = (uint64_t *)v6;
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v8 != a1 + 32 && v7 >= *(double *)(v8 + 32))
    {
      v40[0] = v8;
      uint64_t v19 = v8 + 40;
      if ((long long *)(v8 + 40) != a3)
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          for (uint64_t j = 0; j != 32; j += 8)
            *(void *)(v19 + j) = *(void *)((char *)a3 + j);
          v19 += 32;
          a3 += 2;
        }
      }
      uint64_t v22 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
      *(void *)(v8 + 176) = v22;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v40);
      uint64_t v23 = v40[0];
      unint64_t v24 = a4 - *(void *)(v40[0] + 168);
      if (v24)
      {
        unint64_t v25 = *(void *)(a1 + 80) + v24;
        *(void *)(a1 + 80) = v25;
        *(void *)(v23 + 168) = a4;
        if (!*(void *)(a1 + 104))
        {
          while (v25 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
          {
            double v26 = *(uint64_t ***)(a1 + 48);
            if (v26 == *(uint64_t ***)(a1 + 56)) {
              break;
            }
            double v28 = *(double *)v26;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v28);
            double v27 = *(uint64_t **)&v28;
            *(void *)(a1 + 80) -= *(void *)(*(void *)&v28 + 168);
            std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v27);
            operator delete(v27);
            unint64_t v25 = *(void *)(a1 + 80);
          }
        }
      }
    }
    else
    {
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v10;
      long long v11 = a3[5];
      long long v33 = a3[4];
      long long v34 = v11;
      long long v12 = a3[7];
      long long v35 = a3[6];
      long long v36 = v12;
      long long v13 = a3[1];
      long long v29 = *a3;
      long long v30 = v13;
      long long v14 = a3[3];
      long long v31 = a3[2];
      long long v32 = v14;
      double v28 = v7;
      unint64_t v37 = a4;
      uint64_t v38 = v10;
      uint64_t v39 = 0;
      v40[0] = (uint64_t)std::__tree<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>((uint64_t **)(a1 + 24), &v28, &v28);
      v40[1] = v15;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v40);
      unint64_t v16 = *(void *)(a1 + 80) + a4;
      *(void *)(a1 + 80) = v16;
      if (!*(void *)(a1 + 104))
      {
        while (v16 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
        {
          unint64_t v18 = *(uint64_t ***)(a1 + 48);
          if (v18 == *(uint64_t ***)(a1 + 56)) {
            break;
          }
          double v28 = *(double *)v18;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v28);
          uint64_t v17 = *(uint64_t **)&v28;
          *(void *)(a1 + 80) -= *(void *)(*(void *)&v28 + 168);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v17);
          operator delete(v17);
          unint64_t v16 = *(void *)(a1 + 80);
        }
      }
    }
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = ((char *)v5 - (unsigned char *)*a1) >> 3;
  uint64_t v7 = *a2;
  *(void *)(*a2 + 184) = v6;
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v13 = v6 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unsigned __int8 v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      uint64_t v7 = *a2;
    }
    else
    {
      unsigned __int8 v15 = 0;
    }
    unint64_t v16 = &v15[8 * v6];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = v7;
    long long v11 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v5 = v7;
    long long v11 = v5 + 1;
  }
  a1[1] = v11;
  unint64_t v21 = *(void *)(*a2 + 184);
  if (v21)
  {
    uint64_t v22 = (char *)*a1;
    uint64_t v23 = *((void *)*a1 + v21);
    do
    {
      unint64_t v24 = v21 - 1;
      unint64_t v25 = (v21 - 1) >> 1;
      uint64_t v26 = *(void *)&v22[8 * v25];
      if (*(void *)(v26 + 176) <= *(void *)(v23 + 176)) {
        break;
      }
      *(void *)&v22[8 * v21] = v26;
      *(void *)&v22[8 * v25] = v23;
      uint64_t v22 = (char *)*a1;
      *(void *)(*((void *)*a1 + v21) + 184) = v21;
      uint64_t v23 = *(void *)&v22[8 * v25];
      *(void *)(v23 + 184) = v25;
      unint64_t v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t **std::__tree<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0xC0uLL);
    long long v11 = a3[7];
    *((_OWORD *)v10 + 8) = a3[6];
    *((_OWORD *)v10 + 9) = v11;
    long long v12 = a3[9];
    *((_OWORD *)v10 + 10) = a3[8];
    *((_OWORD *)v10 + 11) = v12;
    long long v13 = a3[3];
    *((_OWORD *)v10 + 4) = a3[2];
    *((_OWORD *)v10 + 5) = v13;
    long long v14 = a3[5];
    *((_OWORD *)v10 + 6) = a3[4];
    *((_OWORD *)v10 + 7) = v14;
    long long v15 = a3[1];
    *((_OWORD *)v10 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *a3;
    *((_OWORD *)v10 + 3) = v15;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 184);
  unint64_t v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(void *)(*a1 + 8 * v3) = *(void *)(*a1 + 8 * v4);
    *(void *)(*(void *)(*a1 + 8 * v3) + 184) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    uint64_t v5 = *a1 + 8 * v3;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(a1, v5);
  }
}

uint64_t *PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::findValue@<X0>(uint64_t *result@<X0>, double *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result[4];
  if (!v5) {
    goto LABEL_8;
  }
  double v6 = *a2;
  double v7 = result + 4;
  do
  {
    uint64_t v8 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v6)
    {
      uint64_t v8 = (uint64_t *)v5;
      double v7 = (uint64_t *)v5;
    }
    uint64_t v5 = *v8;
  }
  while (*v8);
  if (v7 != result + 4 && v6 >= *((double *)v7 + 4))
  {
    unint64_t v10 = v7;
    *(_OWORD *)a4 = *(_OWORD *)(v7 + 5);
    *(void *)(a4 + 16) = v7[7];
    uint64_t v9 = result[9] + 1;
    result[9] = v9;
    v7[9] = v9;
    uint64_t result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble(result + 6, (uint64_t)&v10);
    *a3 = 1;
  }
  else
  {
LABEL_8:
    *a3 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
  }
  return result;
}

void PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::addValue(uint64_t a1, double *a2, long long *a3, unint64_t a4)
{
  if (*(void *)(a1 + 88) >= a4 || *(void *)(a1 + 104))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *a2;
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v8 = a1 + 32;
    do
    {
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (*(double *)(v6 + 32) >= v7)
      {
        uint64_t v9 = (uint64_t *)v6;
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v8 != a1 + 32 && v7 >= *(double *)(v8 + 32))
    {
      v29[0] = v8;
      uint64_t v16 = *((void *)a3 + 2);
      *(_OWORD *)(v8 + 40) = *a3;
      *(void *)(v8 + 56) = v16;
      uint64_t v17 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v17;
      *(void *)(v8 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v17;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v29);
      uint64_t v18 = v29[0];
      unint64_t v19 = a4 - *(void *)(v29[0] + 64);
      if (v19)
      {
        unint64_t v20 = *(void *)(a1 + 80) + v19;
        *(void *)(a1 + 80) = v20;
        *(void *)(v18 + 64) = a4;
        if (!*(void *)(a1 + 104))
        {
          while (v20 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
          {
            unint64_t v21 = *(uint64_t ***)(a1 + 48);
            if (v21 == *(uint64_t ***)(a1 + 56)) {
              break;
            }
            double v23 = *(double *)v21;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v23);
            uint64_t v22 = *(uint64_t **)&v23;
            *(void *)(a1 + 80) -= *(void *)(*(void *)&v23 + 64);
            std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v22);
            operator delete(v22);
            unint64_t v20 = *(void *)(a1 + 80);
          }
        }
      }
    }
    else
    {
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v10;
      uint64_t v11 = *((void *)a3 + 2);
      double v23 = v7;
      long long v24 = *a3;
      uint64_t v25 = v11;
      unint64_t v26 = a4;
      uint64_t v27 = v10;
      uint64_t v28 = 0;
      v29[0] = (uint64_t)std::__tree<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>((uint64_t **)(a1 + 24), &v23, (uint64_t)&v23);
      v29[1] = v12;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v29);
      unint64_t v13 = *(void *)(a1 + 80) + a4;
      *(void *)(a1 + 80) = v13;
      if (!*(void *)(a1 + 104))
      {
        while (v13 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
        {
          long long v15 = *(uint64_t ***)(a1 + 48);
          if (v15 == *(uint64_t ***)(a1 + 56)) {
            break;
          }
          double v23 = *(double *)v15;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v23);
          long long v14 = *(uint64_t **)&v23;
          *(void *)(a1 + 80) -= *(void *)(*(void *)&v23 + 64);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v14);
          operator delete(v14);
          unint64_t v13 = *(void *)(a1 + 80);
        }
      }
    }
  }
}

uint64_t **std::__tree<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>(uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x58uLL);
    long long v11 = *(_OWORD *)(a3 + 16);
    _OWORD v10[2] = *(_OWORD *)a3;
    uint64_t v10[3] = v11;
    void v10[4] = *(_OWORD *)(a3 + 32);
    *((void *)v10 + 10) = *(void *)(a3 + 48);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t OZChannelEnumLayer_Factory::getInstance(OZChannelEnumLayer_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnumLayer_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZChannelEnumLayer_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumLayer_Factory::_instance;
}

void OZChannelEnumLayer::OZChannelEnumLayer(OZChannelEnumLayer *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelEnumLayer_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F113DEC8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F113E238;
  *((void *)this + 1) = OZChannelEnumLayer_Factory::getInstance(v17);
}

void sub_1B7CBE140(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CBE1A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumLayer_Factory::OZChannelEnumLayer_Factory(OZChannelEnumLayer_Factory *this)
{
  long long v3 = xmmword_1B8378A10;
  long long v4 = xmmword_1B8383120;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1157000;
  *((void *)this + 16) = &unk_1F11570D0;
}

void sub_1B7CBE270(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumLayer_Factory::create(OZChannelEnumLayer_Factory *this, const PCString *a2)
{
}

void sub_1B7CBE328(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumLayer_Factory::createCopy(OZChannelEnumLayer_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CBE41C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumLayer_Factory::createChannelCopy(OZChannelEnumLayer_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CBE510(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  long long v4 = (uint64_t *)(this + 4732);
  if (*((unsigned char *)this + 38096)
  {
    OZFactory::setNeedsSaving(this[26], (const OZFactory *)1);
    uint64_t v5 = (OZChannelObjectRoot *)(*((uint64_t (**)(char *))this[25] + 80))((char *)this + 200);
    OZChannelObjectRoot::markChannelFactoriesForSerialization(v5, a2);
  }
  else
  {
    OZSceneNode::markFactoriesForSerialization(this + 25, a2);
  }
  uint64_t result = *v4;
  if (*v4)
  {
    double v7 = *(uint64_t (**)(void))(*(void *)result + 456);
    return v7();
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZRotoshape::markFactoriesForSerialization(this - 25, a2);
}

{
  return OZRotoshape::markFactoriesForSerialization(this - 31, a2);
}

uint64_t OZRotoshape::writeBody(OZRotoshape *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = (unsigned __int8 *)this + 37856;
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRotoshapeScope);
  if (a4 && *(void *)v10 && !OZChannelBase::testFlag((OZChannelBase *)(*(void *)v10 + 56), 8))
  {
    uint64_t v11 = *(void *)v10 + 48;
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v11 + 16))(v11, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2, 0, 1, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  uint64_t v12 = v10[240];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 607);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (v10[240]
  {
    OZChannelObjectRoot::serializeSelfOnly((OZRotoshape *)((char *)this + 256), a2, a3);
    (*(void (**)(char *, PCSerializerWriteStream *, void))(*((void *)this + 83) + 16))((char *)this + 664, a2, 0);
    (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*((void *)this + 83) + 24))((char *)this + 664, a2, 0, 1, a5);
    unint64_t v13 = *(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24);
    return v13(a2);
  }
  else
  {
    return OZElement::writeBody((OZElement *)((char *)this + 200), a2, a3, a4, a5);
  }
}

uint64_t non-virtual thunk to'OZRotoshape::writeBody(OZRotoshape *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRotoshape::writeBody((OZRotoshape *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return OZRotoshape::writeBody((OZRotoshape *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t OZRotoshape::parseBegin(OZRotoshape *this, PCSerializerReadStream *a2, double a3)
{
  uint64_t v5 = (double *)((char *)this + 32848);
  LODWORD(a3) = *((_DWORD *)a2 + 26);
  *((double *)this + 4763) = (double)*(unint64_t *)&a3;
  uint64_t v6 = (OZRotoshape *)((char *)this + 18976);
  double v7 = (unsigned int *)*((void *)this + 4732);
  if (v7)
  {
    uint64_t v8 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v7 + 640))(*((void *)this + 4732));
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 37704), v8);
    double v9 = (OZScene *)(*(uint64_t (**)(void))(*((void *)this + 25) + 272))();
    if (v9)
    {
      uint64_t v10 = v9;
      if (OZScene::getNode(v9, v7[20]) == v7)
      {
        OZScene::unregisterNode(v10, (OZSceneNode *)v7);
        OZScene::removeAllDependencies(v10, (OZSceneNode *)v7);
      }
    }
  }
  OZMoShape::resetParticlePaint(v6);
  if (v5[657] < 5.0)
  {
    (*(void (**)(double *, void, void, double))(*(void *)v5 + 712))(v5, MEMORY[0x1E4F1FA48], 0, 1.0);
    OZMoShape::reparentChannels(v6, (OZChannelFolder *)((char *)this + 648), 1);
    *((unsigned char *)this + 3811OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  }
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRotoshapeScope);
  OZElement::parseBegin((OZElement *)((char *)this + 200), a2);
  return 1;
}

uint64_t non-virtual thunk to'OZRotoshape::parseBegin(OZRotoshape *this, PCSerializerReadStream *a2, double a3)
{
  return 1;
}

{
  OZRotoshape::parseBegin((OZRotoshape *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t OZRotoshape::parseEnd(OZRotoshape *this, PCSerializerReadStream *a2)
{
  long long v4 = (double *)((char *)this + 37856);
  uint64_t v5 = (char *)this + 200;
  OZElement::parseEnd((OZElement *)((char *)this + 200), a2);
  *(_WORD *)((char *)this + 38113) = 0;
  *((unsigned char *)v4 + 24OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    v7.n128_f64[0] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 27624), MEMORY[0x1E4F1FA48], 0.0);
    (*(void (**)(char *, const CMTime *, void, __n128))(*((void *)this + 3485) + 712))((char *)this + 27880, v6, 0, v7);
    v8.n128_f64[0] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 27624), v6, 0.0);
    (*(void (**)(char *, const CMTime *, void, __n128))(*((void *)this + 3517) + 712))((char *)this + 28136, v6, 0, v8);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), v6, 0.0) == 2)
    {
      (*(void (**)(char *, void, void, double))(*((void *)this + 4087) + 712))((char *)this + 32696, MEMORY[0x1E4F1FA48], 0, 1.0);
      OZChannelCurve::convertCurveBSplineBiasToXSplineBias((OZRotoshape *)((char *)this + 19184));
      OZChannelCurve::setCurveInterpolation((OZRotoshape *)((char *)this + 19184), 10);
    }
  }
  double v9 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E4F1FA48], 0.0) - 1 <= 1
    && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1))
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 25904), 0.0);
    (*(void (**)(char *, void, void, double))(*((void *)this + 3238) + 712))((char *)this + 25904, MEMORY[0x1E4F1FA48], 0, 0.0);
  }
  if ((*((_DWORD *)this + 306) & 8) != 0)
  {
    if (*(void *)v4)
    {
      (*(void (**)(CMTime *__return_ptr))(**(void **)v4 + 1128))(&v20);
      CMTime time2 = v21;
      CMTime time1 = *v9;
      if (!CMTimeCompare(&time1, &time2))
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v5 + 1128))(&v20, v5);
        CMTime v19 = v20;
        OZMoShape::initPPaintTime((void *)this + 2372, &v19, (const PCTimeRange *)&v20);
      }
    }
  }
  if (*(void *)v4)
  {
    (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v5 + 1128))(&v20, v5);
    (*(void (**)(CMTime *__return_ptr))(**(void **)v4 + 1128))(&time1);
    CMTime time2 = v20;
    CMTime v22 = time1;
    if (CMTimeCompare(&time2, &v22) || (time2 = v21, CMTime v22 = v18, CMTimeCompare(&time2, &v22)))
    {
      (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v5 + 1128))(&v20, v5);
      CMTime v16 = v20;
      OZMoShape::initPPaintTime((void *)this + 2372, &v16, (const PCTimeRange *)&v20);
    }
  }
  if ((*(uint64_t (**)(char *))(*(void *)v5 + 272))(v5)) {
    BOOL v10 = *((_DWORD *)a2 + 26) > 3u;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && (*(double (**)(char *))(*(void *)v5 + 1328))(v5) != 1.0)
  {
    (*(void (**)(char *))(*((void *)this + 25) + 1328))(v5);
    (*(void (**)(char *, double))(*((void *)this + 3062) + 776))((char *)this + 24496, 1.0 / v11);
    (*(void (**)(char *))(*((void *)this + 25) + 1328))(v5);
    (*(void (**)(char *, double))(*((void *)this + 3150) + 776))((char *)this + 25200, 1.0 / v12);
  }
  (*(void (**)(char *))(*((void *)this + 25) + 1328))(v5);
  uint64_t v13 = MEMORY[0x1E4F1FA48];
  (*(void (**)(char *, void, void))(*((void *)this + 2683) + 712))((char *)this + 21464, MEMORY[0x1E4F1FA48], 0);
  v14.n128_u64[0] = 0;
  if ((*((_DWORD *)this + 306) & 8) != 0) {
    v14.n128_f64[0] = 1.0;
  }
  (*(void (**)(char *, uint64_t, void, __n128))(*((void *)this + 3979) + 712))((char *)this + 31832, v13, 0, v14);
  if (v4[31] < 5.0)
  {
    OZMoShape::reparentChannels((OZRotoshape *)((char *)this + 18976), (OZChannelFolder *)((char *)this + 648), 0);
    *((unsigned char *)v4 + 256) = 0;
  }
  return 1;
}

uint64_t non-virtual thunk to'OZRotoshape::parseEnd(OZRotoshape *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  OZRotoshape::parseEnd((OZRotoshape *)((char *)this - 248), a2);
  return 1;
}

uint64_t OZRotoshape::parseElement(OZRotoshape *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v6 = (char *)this + 37856;
  uint64_t v14 = 0;
  PCSharedCount::PCSharedCount(&v13);
  char v7 = 0;
  char v8 = 1;
  switch(*((_DWORD *)a3 + 2))
  {
    case 0x25B:
      OZChannelCurve::deleteAllVertices((OZRotoshape *)((char *)this + 19184));
      char v8 = 0;
      char v7 = 1;
      goto LABEL_3;
    case 0x25C:
LABEL_3:
      v6[257] = v7;
      v6[258] = v8;
      break;
    case 0x25D:
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 504, (uint64_t)&v14 + 4);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 502, (uint64_t)&v14);
      LODWORD(v9) = HIDWORD(v14);
      double v10 = (double)v9;
      if (v6[257])
      {
        double v11 = (char *)this + 19472;
        (*(void (**)(char *, void, char *, double))(*((void *)this + 2434) + 144))((char *)this + 19472, MEMORY[0x1E4F1FA48], v6 + 264, v10);
      }
      else
      {
        double v11 = (char *)this + 19704;
        (*(void (**)(char *, void, char *, double))(*((void *)this + 2463) + 144))((char *)this + 19704, MEMORY[0x1E4F1FA48], v6 + 264, v10);
      }
      (*(void (**)(char *, void, void))(*(void *)v11 + 352))(v11, *((void *)v6 + 33), v14);
      break;
    case 0x25F:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)this + 38097);
      break;
    default:
      break;
  }
  OZElement::parseElement((OZElement *)((char *)this + 200), a2, a3);
  PCString::~PCString((PCString *)&v13);
  return 1;
}

void sub_1B7CBF620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
}

uint64_t non-virtual thunk to'OZRotoshape::parseElement(OZRotoshape *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

{
  OZRotoshape::parseElement((OZRotoshape *)((char *)this - 248), a2, a3);
  return 1;
}

CGColorSpace **OZRotoshape::completeLoading(OZRotoshape *this)
{
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)v18);
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    char v2 = (OZScene *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v2, &v16);
    *(__n128 *)CMTime v18 = v16;
    *(void *)&v18[16] = v17;
  }
  long long v3 = (OZRotoshape *)((char *)this + 18976);
  long long v4 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
  v16.n128_u64[0] = (unint64_t)v4;
  PCMutex::lock(v4);
  v16.n128_u8[8] = 1;
  OZShape::completeCurve((OZRotoshape *)((char *)this + 18976));
  *((unsigned char *)this + 21616) = 1;
  OZShape::didSetInterpolation((OZRotoshape *)((char *)this + 18976));
  CMTime v13[2] = v19;
  PCString v13[3] = v20;
  void v13[4] = v21;
  v13[0] = *(_OWORD *)v18;
  v13[1] = *(_OWORD *)&v18[16];
  uint64_t v14 = v22;
  if (v22) {
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  }
  int v15 = v23;
  uint64_t CurrentRenderParams = OZShape::getCurrentRenderParams((uint64_t)this + 18976, (uint64_t)v13);
  OZShape::checkWindingOrder((OZRotoshape *)((char *)this + 18976), (CMTime *)v18, CurrentRenderParams, 0, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), (const CMTime *)v18, 0.0)) {
    OZShape::closeCurve((OZRotoshape *)((char *)this + 18976), (const CMTime *)v18);
  }
  uint64_t v6 = *(void *)this;
  if ((*((unsigned char *)this + 1224) & 8) != 0) {
    char v7 = (void (**)(OZRotoshape *))(v6 + 432);
  }
  else {
    char v7 = (void (**)(OZRotoshape *))(v6 + 440);
  }
  (*v7)(this);
  (*(void (**)(OZRotoshape *, uint64_t))(*(void *)this + 200))(this, 1);
  _OWORD v10[2] = v19;
  uint64_t v10[3] = v20;
  void v10[4] = v21;
  v10[0] = *(_OWORD *)v18;
  v10[1] = *(_OWORD *)&v18[16];
  double v11 = v22;
  if (v22) {
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  }
  int v12 = v23;
  char v8 = (OZShapeRenderParams *)OZShape::getCurrentRenderParams((uint64_t)v3, (uint64_t)v10);
  OZMoShape::validateChannels(v3, (const CMTime *)v18, v8, 0, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  PCMutex::unlock(v4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
}

void sub_1B7CBF90C(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 64));
  _Unwind_Resume(a1);
}

OZChannelBase *OZRotoshape::getChannelFromRefAndVersion(OZRotoshape *this, OZChannelRef *a2, double a3)
{
  if (a3 >= 5.0)
  {
    PCSharedCount v13 = (OZTransformNode *)((char *)this + 200);
    return OZTransformNode::getChannelFromRefAndVersion(v13, a2, a3);
  }
  else
  {
    int v6 = *((unsigned __int8 *)this + 38112);
    char v7 = (OZTransformNode *)((char *)this + 200);
    uint64_t result = OZTransformNode::getChannelFromRefAndVersion((OZTransformNode *)((char *)this + 200), a2, a3);
    if (v6) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = result == 0;
    }
    if (v9)
    {
      double v10 = (OZRotoshape *)((char *)this + 18976);
      double v11 = (OZChannelFolder *)((char *)this + 648);
      OZMoShape::reparentChannels(v10, v11, 1);
      ChannelFromRefAndVersiouint64_t n = OZTransformNode::getChannelFromRefAndVersion(v7, a2, a3);
      OZMoShape::reparentChannels(v10, v11, 0);
      return ChannelFromRefAndVersion;
    }
  }
  return result;
}

OZChannelBase *non-virtual thunk to'OZRotoshape::getChannelFromRefAndVersion(OZRotoshape *this, OZChannelRef *a2, double a3)
{
  return OZRotoshape::getChannelFromRefAndVersion((OZRotoshape *)((char *)this - 200), a2, a3);
}

{
  return OZRotoshape::getChannelFromRefAndVersion((OZRotoshape *)((char *)this - 216), a2, a3);
}

void OZRenderGraphState::OZRenderGraphState(OZRenderGraphState *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0x3FFCCCCCCCCCCCCDLL;
  *((_DWORD *)this + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = (char *)this + 64;
  *((void *)this + 9) = (char *)this + 64;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 1;
  *((void *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *((void *)this + 17) = 0x3FF0000000000000;
  *((void *)this + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 28) = &unk_1F10AD5F8;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_WORD *)this + 128) = 1;
  *((unsigned char *)this + 258) = 0;
  *((_DWORD *)this + 65) = 0;
  *((unsigned char *)this + 264) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZRenderGraphState *)((char *)this + 268), 1.0, 1.0, 1.0, 1.0);
  *((_DWORD *)this + 71) = 1065353216;
  *((_WORD *)this + 144) = 257;
  *((void *)this + 37) = 0;
}

void sub_1B7CBFB38(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v2);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::registerRetiming(OZ3DEngineSceneElement *this)
{
  {
    OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZ3DEngineSceneElement::registerRetiming(void)::sRetimer);
    OZ3DEngineSceneElement::registerRetiming(void)::sRetimer = (uint64_t)&unk_1F1157EB8;
    __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZ3DEngineSceneElement::registerRetiming(void)::sRetimer, &dword_1B73F3000);
  }
}

void sub_1B7CBFC04(_Unwind_Exception *a1)
{
}

void OZ3DEngineSceneElement::OZ3DEngineSceneElement(OZ3DEngineSceneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1157170;
  uint64_t v5[2] = &unk_1F1157AA8;
  v5[6] = &unk_1F1157D00;
  v5[816] = &unk_1F1157D58;
  MEMORY[0x1BA9BF8F0](v5 + 2347);
  *((unsigned char *)this + 18840) = 0;
  *((void *)this + 2356) = 0;
  *((void *)this + 2358) = 0;
  *((void *)this + 2357) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 18872), v6);
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 18888) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 2363) = *(void *)(v7 + 16);
  *((unsigned char *)this + 1891OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 2373) = 0;
  *(_OWORD *)((char *)this + 18920) = 0u;
  *(_OWORD *)((char *)this + 18936) = 0u;
  *(_OWORD *)((char *)this + 1895OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 18968) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2374);
  *((void *)this + 2390) = 0x3FF0000000000000;
  *((void *)this + 2385) = 0x3FF0000000000000;
  *((void *)this + 2380) = 0x3FF0000000000000;
  *((void *)this + 2375) = 0x3FF0000000000000;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1189) = 0u;
  *(_OWORD *)((char *)this + 19048) = 0u;
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *(_OWORD *)((char *)this + 19128) = 0u;
  PCURL::PCURL((PCURL *)&v33, @"Channel 3D Scene Element Footage Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19144), &v33, (OZChannelFolder *)((char *)this + 320), 0x12Cu, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v8, @"Channel 3D Scene Element Footage");
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272), &v33, (OZChannelFolder *)((char *)this + 19144), 0x12Du, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v9, @"Channel Unit Size Enum");
  PCURL::PCURL((PCURL *)&v32, @"Channel Unit Size");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480), &v33, &v32, (OZChannelFolder *)((char *)this + 448), 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v10, @"Channel Custom Unit Size");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 19736), 1000, &v33, (OZChannelFolder *)((char *)this + 448), 0x12Fu, 0, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v11, @"Channel Orientation");
  OZChannelRotation3D::OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888), 0.0, 0.0, 0.0, &v33, (OZChannelFolder *)((char *)this + 448), 0x130u, 0, 4u, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v12, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), &v33, (OZChannelFolder *)((char *)this + 448), 0x13Eu, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v13, "None;Static;Dynamic;Kinematic");
  PCString::PCString(&v32, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 20744), 0x13Fu, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCString::PCString(v14, "Automatic;Box;Sphere");
  PCString::PCString(&v32, "Simulation Shape");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 20744), 0x143u, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCString::PCString(v15, "Mass");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21384), 1.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x140u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v16, "Bounciness");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21536), 0.5, &v33, (OZChannelFolder *)((char *)this + 20744), 0x141u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v17, "Sliding Friction");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21688), 0.5, &v33, (OZChannelFolder *)((char *)this + 20744), 0x142u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v18, "Charge");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21840), 0.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x146u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v19, "Charge Variation");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21992), 0.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x147u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v20, @"Channel Image Element Time Scale");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 22144), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Au, 4259840, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v21, @"Channel Image Element Time Reverse");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22296), 0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Bu, 0x410000u, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v22, @"Channel Image Element Time Remap Enum");
  PCURL::PCURL((PCURL *)&v32, @"Channel Image Element Time Remap Label");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x134u, 2, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v23, @"Channel Image Element Retime Frame");
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x135u, 131074);
  PCString::~PCString(&v33);
  PCURL::PCURL(v24, @"Channel Image Element Retime Frame Cache");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 22856), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Cu, 131074, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v25, @"Channel Image Element Retime Sampling Enum");
  PCURL::PCURL((PCURL *)&v32, @"Channel Image Element Retime Sampling Label");
  OZChannelEnumRetime::OZChannelEnumRetime((OZ3DEngineSceneElement *)((char *)this + 23008), &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x136u, 2u);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v26, @"Channel Image Element End Condition Enum");
  PCURL::PCURL((PCURL *)&v32, @"Channel Image Element End Condition Label");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264), &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x137u, 2u, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v27, @"Channel Image Element Loop Duration");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 23520), 0.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x138u, 32770, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v28, @"Channel Image Element Duration Cache");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 23672), 0.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Du, 2, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v29, "Scripting");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824), &v33, (OZChannelFolder *)((char *)this + 448), 0x144u, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v30, "Shading");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952), &v33, (OZChannelFolder *)((char *)this + 448), 0x145u, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v31, "Use Custom Lighting");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24080), 0, &v33, (OZChannelFolder *)((char *)this + 448), 0x148u, 0, 0, 0);
  PCString::~PCString(&v33);
  *((void *)this + 303OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((_OWORD *)this + 1515) = 0u;
  PCMutex::PCMutex((PCMutex *)this + 337);
  PCMutex::PCMutex((PCMutex *)this + 338);
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 19272, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 19272, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6680), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6680));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19480), 16, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 19736), 0, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19736), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 19736), 0.1);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 19736), 1000.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19736), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19736), 16, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 19888), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20480), 2, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 19888), @"OZEnvironmentRotationController");
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19888), 16, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12672), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17520), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9936), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8920), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8768), 4259872, 0);
  *((void *)this + 2360) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21384), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21384), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 21688), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21688), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 21536), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21536), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21840), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21840), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21992), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21992), 1.0);
}

void sub_1B7CC07BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelEnum *a11, PCString *a12, OZChannel *a13, OZChannelRetimeFrame *a14, OZChannelEnum *a15, OZChannelBool *a16, OZChannel *a17, OZChannelEnum *a18, OZChannelEnum *a19, OZChannelFolder *a20,PCSharedCount *a21,void **a22,std::recursive_mutex *a23,OZChannelEnum *a24,OZChannel *a25,OZChannel *a26,OZChannelPercent *a27,OZChannelPercent *a28)
{
  PCMutex::~PCMutex(v31);
  OZChannelBool::~OZChannelBool(v35);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v29);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v30);
  OZChannel::~OZChannel(v33);
  OZChannel::~OZChannel(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(a13);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannel::~OZChannel(a17);
  OZChannel::~OZChannel(a25);
  OZChannel::~OZChannel(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannelPercent::~OZChannelPercent(a28);
  OZChannel::~OZChannel(*(OZChannel **)(v36 - 144));
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelFolder::~OZChannelFolder(v34);
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v36 - 128));
  OZChannel::~OZChannel(v32);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v36 - 136));
  OZChannelFolder::~OZChannelFolder(a20);
  uint64_t v38 = *(std::__shared_weak_count **)(v28 + 19136);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  PCSharedCount::~PCSharedCount(a21);
  uint64_t v39 = *(void **)(v28 + 18952);
  if (v39)
  {
    *(void *)(v28 + 18960) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *a22;
  if (*a22)
  {
    *(void *)(v28 + 18928) = v40;
    operator delete(v40);
  }
  std::recursive_mutex::~recursive_mutex(a23);
  OZElement::~OZElement((OZElement *)v28);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::OZ3DEngineSceneElement(OZ3DEngineSceneElement *this, const OZ3DEngineSceneElement *a2, uint64_t a3)
{
  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *uint64_t v5 = &unk_1F1157170;
  uint64_t v5[2] = &unk_1F1157AA8;
  v5[6] = &unk_1F1157D00;
  v5[816] = &unk_1F1157D58;
  MEMORY[0x1BA9BF8F0](v5 + 2347);
  *((unsigned char *)this + 18840) = 0;
  *((void *)this + 2356) = 0;
  *((void *)this + 2358) = 0;
  *((void *)this + 2357) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 18872), v6);
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 18888) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 2363) = *(void *)(v7 + 16);
  *((unsigned char *)this + 1891OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 2373) = 0;
  *(_OWORD *)((char *)this + 18920) = 0u;
  *(_OWORD *)((char *)this + 18936) = 0u;
  *(_OWORD *)((char *)this + 1895OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 18968) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2374);
  *((void *)this + 2390) = 0x3FF0000000000000;
  *((void *)this + 2385) = 0x3FF0000000000000;
  *((void *)this + 2380) = 0x3FF0000000000000;
  *((void *)this + 2375) = 0x3FF0000000000000;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1189) = 0u;
  *(_OWORD *)((char *)this + 19048) = 0u;
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *(_OWORD *)((char *)this + 19128) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19144), (const OZChannelFolder *)((char *)a2 + 19144), (OZChannelFolder *)((char *)this + 320));
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272), (const OZ3DEngineSceneElement *)((char *)a2 + 19272), (OZChannelFolder *)((char *)this + 19144));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480), (const OZ3DEngineSceneElement *)((char *)a2 + 19480), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19736), (const OZChannelBase *)((char *)a2 + 19736), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 2467) = &unk_1F1100CF0;
  *((void *)this + 2469) = &unk_1F1101050;
  OZChannelRotation3D::OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888), (const OZ3DEngineSceneElement *)((char *)a2 + 19888), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), (const OZChannelFolder *)((char *)a2 + 20744), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872), (const OZ3DEngineSceneElement *)((char *)a2 + 20872), (OZChannelFolder *)((char *)this + 20744));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128), (const OZ3DEngineSceneElement *)((char *)a2 + 21128), (OZChannelFolder *)((char *)this + 20744));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21384), (const OZChannelBase *)((char *)a2 + 21384), (OZChannelFolder *)((char *)this + 20744));
  *((void *)this + 2673) = &unk_1F1100CF0;
  *((void *)this + 2675) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21536), (const OZChannelBase *)((char *)a2 + 21536), (OZChannelFolder *)((char *)this + 20744));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21688), (const OZChannelBase *)((char *)a2 + 21688), (OZChannelFolder *)((char *)this + 20744));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21840), (const OZChannelBase *)a2 + 195, (OZChannelFolder *)((char *)this + 20744));
  *((void *)this + 2730) = &unk_1F1100CF0;
  *((void *)this + 273OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 21992), (const OZChannelBase *)((char *)a2 + 21992), (OZChannelFolder *)((char *)this + 20744));
  *((void *)this + 2749) = &unk_1F1100CF0;
  *((void *)this + 2751) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 22144), (const OZChannelBase *)((char *)a2 + 22144), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2768) = &unk_1F1100CF0;
  *((void *)this + 2770) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22296), (const OZChannelBase *)((char *)a2 + 22296), (OZChannelFolder *)((char *)this + 320));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448), (const OZ3DEngineSceneElement *)((char *)a2 + 22448), (OZChannelFolder *)((char *)this + 320));
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704), (const OZChannelBase *)((char *)a2 + 22704), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 22856), (const OZChannelBase *)((char *)a2 + 22856), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2857) = &unk_1F1100CF0;
  *((void *)this + 2859) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23008), (const OZ3DEngineSceneElement *)((char *)a2 + 23008), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2876) = &unk_1F113DAE8;
  *((void *)this + 2878) = &unk_1F113DE58;
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264), (const OZ3DEngineSceneElement *)((char *)a2 + 23264), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23520), (const OZChannelBase *)a2 + 210, (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2940) = &unk_1F1100CF0;
  *((void *)this + 294OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 23672), (const OZChannelBase *)((char *)a2 + 23672), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2959) = &unk_1F1100CF0;
  *((void *)this + 2961) = &unk_1F1101050;
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824), (const OZ3DEngineSceneElement *)((char *)a2 + 23824), (OZChannelFolder *)((char *)this + 448));
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952), (const OZ3DEngineSceneElement *)((char *)a2 + 23952), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24080), (const OZChannelBase *)a2 + 215, (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 303OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((_OWORD *)this + 1515) = 0u;
  PCMutex::PCMutex((PCMutex *)this + 337);
  PCMutex::PCMutex((PCMutex *)this + 338);
  *((void *)this + 2360) = 0;
  OZ3DEngineSceneElement::setScriptURL(this, *((CFURLRef *)a2 + 3031));
  OZ3DEngineSceneElement::loadShader(this, *((const __CFURL **)a2 + 3032));
}

void sub_1B7CC1258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, PCString *a11, OZChannel *a12, OZChannelRetimeFrame *a13, OZChannelEnum *a14, OZChannelBool *a15, OZChannel *a16, OZChannel *a17, OZChannel *a18, OZChannelPercent *a19, OZChannelPercent *a20,OZChannel *a21,OZChannelEnum *a22,OZChannelEnum *a23,OZChannelRotation3D *a24,OZChannel *a25,OZChannelEnum *a26)
{
  PCMutex::~PCMutex(v31);
  OZChannelBool::~OZChannelBool(v28);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v33);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v30);
  OZChannel::~OZChannel(v29);
  OZChannel::~OZChannel(v27);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannel::~OZChannel(a18);
  OZChannelPercent::~OZChannelPercent(a19);
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannel::~OZChannel(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannelFolder::~OZChannelFolder(v32);
  OZChannelRotation3D::~OZChannelRotation3D(a24);
  OZChannel::~OZChannel(a25);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v34 - 128));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v34 - 120));
  uint64_t v36 = *(std::__shared_weak_count **)(v26 + 19136);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v34 - 112));
  unint64_t v37 = *(void **)(v26 + 18952);
  if (v37)
  {
    *(void *)(v26 + 18960) = v37;
    operator delete(v37);
  }
  uint64_t v38 = **(void ***)(v34 - 104);
  if (v38)
  {
    *(void *)(v26 + 18928) = v38;
    operator delete(v38);
  }
  std::recursive_mutex::~recursive_mutex(*(std::recursive_mutex **)(v34 - 96));
  OZElement::~OZElement((OZElement *)v26);
  _Unwind_Resume(a1);
}

CFURLRef OZ3DEngineSceneElement::setScriptURL(OZ3DEngineSceneElement *this, CFURLRef url)
{
  long long v4 = (const void *)*((void *)this + 3031);
  if (v4) {
    CFRelease(v4);
  }
  CFURLRef result = CFURLCreateFileReferenceURL((CFAllocatorRef)*MEMORY[0x1E4F1CF80], url, 0);
  *((void *)this + 3031) = result;
  return result;
}

CFURLRef OZ3DEngineSceneElement::loadShader(CFURLRef this, const __CFURL *a2)
{
  if (a2)
  {
    CFURLRef v3 = this;
    *((void *)this + 2368) = [[OZShaderController alloc] initWithURL:a2];
    long long v4 = (const void *)*((void *)v3 + 3032);
    if (v4) {
      CFRelease(v4);
    }
    this = CFURLCreateFileReferenceURL((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
    *((void *)v3 + 303OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = this;
  }
  return this;
}

void OZ3DEngineSceneElement::~OZ3DEngineSceneElement(OZ3DEngineSceneElement *this)
{
  *(void *)this = &unk_1F1157170;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1157AA8;
  *((void *)this + 6) = &unk_1F1157D00;
  *((void *)this + 816) = &unk_1F1157D58;

  uint64_t v2 = (const void *)*((void *)this + 3031);
  if (v2) {
    CFRelease(v2);
  }
  CFURLRef v3 = (const void *)*((void *)this + 3032);
  if (v3) {
    CFRelease(v3);
  }
  PCMutex::~PCMutex((PCMutex *)this + 338);
  PCMutex::~PCMutex((PCMutex *)this + 337);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24080));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23520));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2876);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22856));
  OZChannelRetimeFrame::~OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22296));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22144));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21992));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21384));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 20744));
  OZChannelRotation3D::~OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19736));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 19144));
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2392);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 2374);
  uint64_t v5 = (void *)*((void *)this + 2369);
  if (v5)
  {
    *((void *)this + 2370) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 2365);
  if (v6)
  {
    *((void *)this + 2366) = v6;
    operator delete(v6);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 18776));

  OZElement::~OZElement((OZElement *)this);
}

{
  uint64_t vars8;

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEngineSceneElement::~OZ3DEngineSceneElement(OZ3DEngineSceneElement *this)
{
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 48));
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineSceneElement::operator=(uint64_t a1, const void *a2)
{
  OZElement::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 19480, (uint64_t)v4 + 19480);
  OZChannelBase::operator=(a1 + 19736, (uint64_t)v5 + 19736);

  return OZChannelPosition::operator=(a1 + 19888, (uint64_t)v5 + 19888);
}

uint64_t OZ3DEngineSceneElement::openMedia(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 104);

  return v2();
}

const void *OZ3DEngineSceneElement::get3DEngineSceneFile(OZ3DEngineSceneElement *this)
{
  CFURLRef result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 19272));
  if (result)
  {
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::canCrop(OZ3DEngineSceneElement *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneElement::canFourCorner(OZ3DEngineSceneElement *this)
{
  return 0;
}

double OZ3DEngineSceneElement::getPixelAspectRatio(OZ3DEngineSceneElement *this)
{
  return 1.0;
}

uint64_t OZ3DEngineSceneElement::isPrecomposed(OZ3DEngineSceneElement *this, const CMTime *a2)
{
  if (((*(uint64_t (**)(void))(*((void *)this + 835) + 496))() & 1) != 0
    || OZElement::getPreserveTransparency((OZElement *)this, a2)
    || ((*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 416))(this) & 1) != 0
    || ((*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 1864))(this) & 1) != 0)
  {
    return 1;
  }
  uint64_t v5 = *(uint64_t (**)(OZ3DEngineSceneElement *, const CMTime *))(*(void *)this + 1592);

  return v5(this, a2);
}

double OZ3DEngineSceneElement::calcAutomaticUnitSize(OZ3DEngineSceneElement *this)
{
  long long v7 = xmmword_1B7E736F0;
  long long v8 = xmmword_1B7E736F0;
  long long v6 = xmmword_1B7E736F0;
  uint64_t v1 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (!v1) {
    return 512.0;
  }
  OZ3DEngineSceneFile::getSceneVolume(v1, &v6);
  if (*(double *)&v6 > *((double *)&v6 + 1)
    || *(double *)&v7 > *((double *)&v7 + 1)
    || *(double *)&v8 > *((double *)&v8 + 1))
  {
    return 512.0;
  }
  double v3 = vabdd_f64(*((double *)&v6 + 1), *(double *)&v6);
  double v4 = vabdd_f64(*((double *)&v7 + 1), *(double *)&v7);
  double v5 = vabdd_f64(*((double *)&v8 + 1), *(double *)&v8);
  if (v3 < v4) {
    double v3 = v4;
  }
  if (v3 < v5) {
    double v3 = v5;
  }
  return 512.0 / v3;
}

uint64_t OZ3DEngineSceneElement::getUnitScaleMatrix@<X0>(OZ3DEngineSceneElement *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19480), a2, 0.0);
  if (ValueAsInt == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19736), a2, 0.0);
  }
  else
  {
    double v7 = 1.0;
    if (!ValueAsInt) {
      (*(void (**)(OZ3DEngineSceneElement *, double))(*(void *)this + 2312))(this, 1.0);
    }
  }
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v7, v7, v7);
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20024), MEMORY[0x1E4F1FA48], 0.0);
  double v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20176), v8, 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20328), v8, 0.0);
  PCMatrix44Tmpl<double>::leftRotate((double *)&v19, 4, v10, v12, v13);
  uint64_t result = PCMatrix44Tmpl<double>::operator*((uint64_t)&v19, (long long *)a3, (uint64_t)v18);
  if (v18 != (unsigned char *)a3)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      __n128 v16 = (_OWORD *)(a3 + i);
      long long v17 = *(_OWORD *)&v18[i + 16];
      *__n128 v16 = *(_OWORD *)&v18[i];
      v16[1] = v17;
    }
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::calcFloorPosition(OZ3DEngineSceneElement *this, SCNScene *a2, float a3)
{
  OZRenderState::OZRenderState(&v24);
  memset(&v23, 0, sizeof(v23));
  PC_CMTimeMakeWithSecondsRoundToNearest(30, (CMTime *)&v23, a3);
  v24.CMTime var0 = v23;
  long long v6 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 272))(this);
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v13 = 0x3FF0000000000000;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  (*(void (**)(OZ3DEngineSceneElement *, uint64_t *, OZRenderState *))(*(void *)this + 1256))(this, &v13, &v24);
  memset(v8, 0, sizeof(v8));
  int v9 = 4;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  PCMatrix44Tmpl<double>::getTransformation((long long *)&v13, (uint64_t)v8);
  return [(id)OZScene::getSceneComposer(v6) calcFloorPositionBeneath:a2 scene:COERCE_DOUBLE(vcvt_f32_f64(v8[0]))];
}

uint64_t OZ3DEngineSceneElement::calcFloorPosition(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  SceneComposer = (void *)OZScene::getSceneComposer(v4);

  return [SceneComposer calcFloorPositionBeneath:a2 scene:a3];
}

BOOL OZ3DEngineSceneElement::is3DNodeInMasterScene(OZ3DEngineSceneElement *this, OZGroup *a2)
{
  double v3 = (std::recursive_mutex *)OZGroup::masterScene(a2);
  std::recursive_mutex::lock(v3);
  Representatiouint64_t n = (void *)PCBitmap::getRepresentation((PCBitmap *)v3);
  BOOL v5 = objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodeWithName:recursively:", objc_msgSend((id)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2288))(this), "name"), 0) != 0;
  std::recursive_mutex::unlock(v3);
  return v5;
}

void sub_1B7CC209C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::add3DNodeToMasterScene(OZ3DEngineSceneElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 120);
  if (v2) {
  double v3 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v2);
  }
  std::recursive_mutex::lock(v3);
  Representatiouint64_t n = (void *)PCBitmap::getRepresentation((PCBitmap *)v3);
  BOOL v5 = (SCNNode *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2288))(this);
  objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "addChildNode:", v5);
  Li3DEngineScene::didAddNode_NoLock((Li3DEngineScene *)v3, v5);

  std::recursive_mutex::unlock(v3);
}

void sub_1B7CC21A4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneElement::remove3DNodeFromMasterScene(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2288))(this);

  return [v1 removeFromParentNode];
}

double *OZ3DEngineSceneElement::getLocalVolume(double *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v5 = (OZ3DEngineSceneElement *)result;
    long long v6 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)result);
    if (v6)
    {
      double v7 = v6;
      if (*(unsigned char *)(a3 + 202))
      {
        long long v19 = *MEMORY[0x1E4F1FA48];
        uint64_t v20 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      }
      else
      {
        CMTime v23 = *(CMTime *)a3;
        OZ3DEngineSceneElement::globalToSceneFileTime(v5, &v23, (uint64_t *)&v19);
      }
      long long v21 = v19;
      uint64_t v22 = v20;
      OZ3DEngineSceneFile::getSceneVolume(v7, (_OWORD *)a2);
    }
    OZ3DEngineSceneElement::getUnitScaleMatrix(v5, (const CMTime *)a3, (uint64_t)&v19);
    int v8 = 0;
    double v9 = -1.0;
    double v10 = 1.0;
    double v11 = 1.0;
    double v12 = -1.0;
    double v13 = 1.0;
    double v14 = -1.0;
    do
    {
      if ((v8 & 2) != 0) {
        uint64_t v15 = 16;
      }
      else {
        uint64_t v15 = 24;
      }
      double v16 = *(double *)(a2 + v15);
      if ((v8 & 4) != 0) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = 40;
      }
      double v18 = *(double *)(a2 + v17);
      double v24 = *(double *)(a2 + 8 * ((v8 & 1) == 0));
      double v25 = v16;
      double v26 = v18;
      uint64_t result = PCMatrix44Tmpl<double>::transform<double>((double *)&v19, &v24, &v24);
      if (v8)
      {
        if (v10 >= v24) {
          double v10 = v24;
        }
        if (v9 <= v24) {
          double v9 = v24;
        }
        if (v11 >= v25) {
          double v11 = v25;
        }
        if (v12 <= v25) {
          double v12 = v25;
        }
        if (v13 >= v26) {
          double v13 = v26;
        }
        if (v14 <= v26) {
          double v14 = v26;
        }
      }
      else
      {
        double v12 = v25;
        double v14 = v26;
        double v9 = v24;
        double v10 = v24;
        double v11 = v25;
        double v13 = v26;
      }
      ++v8;
    }
    while (v8 != 8);
    *(double *)a2 = v10;
    *(double *)(a2 + 8) = v9;
    *(double *)(a2 + 16) = v11;
    *(double *)(a2 + 24) = v12;
    *(double *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v13;
    *(double *)(a2 + 40) = v14;
  }
  return result;
}

__n128 OZ3DEngineSceneElement::globalToSceneFileTime@<Q0>(OZ3DEngineSceneElement *this@<X0>, CMTime *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v6 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (v6 && (OZ3DEngineSceneFile::supportsAnimation(v6) & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    double v7 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::RemapTimeValue(v7, (OZChannelObjectRoot *)a2, a3);
  }
  else
  {
    __n128 result = *(__n128 *)&a2->value;
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    a3[2] = a2->epoch;
  }
  return result;
}

double OZ3DEngineSceneElement::getOriginalBounds(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v8 = xmmword_1B7E736F0;
    long long v9 = xmmword_1B7E736F0;
    long long v7 = xmmword_1B7E736F0;
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 1360))(a1, &v7);
    double result = *(double *)&v7;
    double v4 = *((double *)&v7 + 1) - *(double *)&v7;
    uint64_t v5 = v8;
    double v6 = *((double *)&v8 + 1) - *(double *)&v8;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v4;
    *(double *)(a2 + 24) = v6;
  }
  return result;
}

OZ3DEngineSceneFile *OZ3DEngineSceneElement::get3DScene(OZ3DEngineSceneElement *this)
{
  double result = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (result)
  {
    return (OZ3DEngineSceneFile *)OZ3DEngineSceneFile::get3DScene(result);
  }
  return result;
}

void OZ3DEngineSceneElement::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZTransformNode::didAddToScene(this, a2);
  if (*((void *)this + 3031))
  {
    OZ3DEngineSceneElement::loadScript((OZ3DEngineSceneElement *)this);
  }
}

void OZ3DEngineSceneElement::loadScript(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = *((void *)this + 3031);
  if (v1)
  {
    double v3 = +[OZJS3DElement elementWith3DElement:this];
    double v4 = +[OZJSScene sceneWithScene:(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 272))(this)];
    uint64_t v5 = (void *)*((void *)this + 3030);
    if (v5) {

    }
    double v6 = objc_alloc_init(OZScript);
    *((void *)this + 3030) = v6;
    [(OZScript *)v6 exportObject:v3 as:@"self"];
    [*((id *)this + 3030) exportObject:v4 as:@"motionScene"];
    [*((id *)this + 3030) loadScriptWithURL:v1];
    long long v7 = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2336))(this);
    if (v7)
    {
      long long v8 = (PCBitmap *)v7;
      std::recursive_mutex::lock(v7);
      [*((id *)this + 3030) exportObject:PCBitmap::getRepresentation(v8) as:@"scene"];
      std::recursive_mutex::unlock((std::recursive_mutex *)v8);
    }
  }
}

void sub_1B7CC26DC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::didFinishLoadingIntoScene(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneElement::setUpScriptChannels(this);

  OZ3DEngineSceneElement::setUpShaderChannels(this);
}

void OZ3DEngineSceneElement::setUpScriptChannels(OZ3DEngineSceneElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 3030);
  if (v2)
  {
    double v3 = (OZChannelFolder *)((char *)this + 23824);
    double v4 = (NSArray *)[v2 parameterDescriptors];
    addChannelsForParameters(v4, v3);
    removeUnusedChannels(v4, v3);
  }
}

void OZ3DEngineSceneElement::setUpShaderChannels(OZ3DEngineSceneElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 2368);
  if (v2 && [v2 library])
  {
    double v3 = (OZChannelFolder *)((char *)this + 23952);
    double v4 = (NSArray *)[*((id *)this + 2368) parameters];
    addChannelsForParameters(v4, v3);
    removeUnusedChannels(v4, v3);
  }
}

void non-virtual thunk to'OZ3DEngineSceneElement::didFinishLoadingIntoScene(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = (OZ3DEngineSceneElement *)((char *)this - 16);
  OZ3DEngineSceneElement::setUpScriptChannels((OZ3DEngineSceneElement *)((char *)this - 16));

  OZ3DEngineSceneElement::setUpShaderChannels(v1);
}

uint64_t OZ3DEngineSceneElement::didReadSceneFile(OZ3DEngineSceneElement *this)
{
  uint64_t v2 = (OZChannel *)((char *)this + 19480);
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19480), MEMORY[0x1E4F1FA48], 0.0);
  if (result != 2)
  {
    double v4 = 1.0;
    if (!OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0)) {
      double v4 = (*(double (**)(OZ3DEngineSceneElement *))(*(void *)this + 2312))(this);
    }
    (*(void (**)(char *, void, uint64_t, double))(*((void *)this + 2467) + 712))((char *)this + 19736, MEMORY[0x1E4F1FA48], 1, v4);
    return OZChannel::setDefaultValue((OZChannel *)((char *)this + 19736), v4);
  }
  return result;
}

void OZ3DEngineSceneElement::channelValueWillBeSet(id *this, OZChannel *a2, CMTime *a3, double a4)
{
  if (this + 2409 == (id *)a2)
  {
    (*((void (**)(id *, double))*this + 62))(this, a4);
    if (OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)this))
    {
      uint64_t v5 = OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)this);
      (*(void (**)(const void *))(*(void *)v5 + 496))(v5);
    }
    if (OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)this))
    {
      [(id)(*((uint64_t (**)(id *))*this + 286))(this) removeFromParentNode];

      this[2360] = 0;
    }
  }
}

char *OZ3DEngineSceneElement::get3DWorldOwner(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = (const void *)*((void *)this + 120);
  if (!v1) {
    return 0;
  }
  if (!v2) {
    return 0;
  }
  double v3 = v2;
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v2 + 20744), 1, 1) & 1) == 0) {
    return 0;
  }
  return v3;
}

void *OZ3DEngineSceneElement::hitCheck(void *a1, float32x2_t *a2, long long *a3, uint64_t a4, double *a5, char a6)
{
  if (a6 & 4) != 0 && ((*(uint64_t (**)(void *))(*a1 + 680))(a1)) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    if (!(*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(a1[2] + 104))(a1 + 2, &v17, 1, 1, 1))return 0; {
  }
    }
  v16[1] = xmmword_1B7E736F0;
  CMTime v16[2] = xmmword_1B7E736F0;
  v16[0] = xmmword_1B7E736F0;
  (*(void (**)(void *, _OWORD *, long long *))(*a1 + 1360))(a1, v16, a3);
  float64x2_t v14 = vcvtq_f64_f32(*a2);
  uint64_t v15 = 0;
  (*(void (**)(double *__return_ptr, void *, float64x2_t *, uint64_t, long long *, void))(*a1 + 1384))(v13, a1, &v14, a4, a3, 0);
  if (PCRayIntersectsBox(v13, (double *)v16, a5)) {
    return a1;
  }
  else {
    return 0;
  }
}

void OZ3DEngineSceneElement::buildRenderGraph(OZ3DEngineSceneElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZ3DEngineSceneElement::updateScript(this, a2);
  OZRenderState::OZRenderState(&v34, (const OZRenderState *)a2);
  CMTime v32 = *a2;
  memset(&v33, 0, sizeof(v33));
  OZ3DEngineSceneElement::globalToSceneFileTime(this, &v32, &v33.value);
  memset(&v31, 0, sizeof(v31));
  if (OZ3DEngineSceneElement::get3DEngineSceneFile(this))
  {
    long long v8 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
    v9.n128_f64[0] = OZ3DEngineSceneFile::get3DFileTime(v8, &v33, &v31);
  }
  else
  {
    __n128 v9 = *(__n128 *)&v33.value;
    CMTime v31 = v33;
  }
  (*(void (**)(OZ3DEngineSceneElement *, __n128))(*(void *)this + 2336))(this, v9);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v34, (uint64_t)&v26);
  for (uint64_t i = 0; i != 4; ++i)
    v30[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v26 + 2 * i)), *((float64x2_t *)&v26 + 2 * i + 1));
  LiGraphBuilder::getCurrentInsertionGroup(a3, (PCSharedCount *)&v26);
  unint64_t v11 = v26.n128_u64[0];
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v26.n128_i8[8]);
  if (*((unsigned char *)this + 18840))
  {
    double v12 = *((double *)this + 2356);
    double v13 = *((double *)this + 2357);
    double v14 = *((double *)this + 2358);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
    float v16 = v14;
    float v17 = v13;
    float v18 = v12;
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v26, v18, v17, v16, 1.0, WorkingColorSpace);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v22);
    int v23 = 1065353216;
    __int16 v24 = 257;
    char v25 = 0;
    v21[0] = 1;
    __n128 v20 = PCWorkingColor::operator=(v19, &v26);
    int v23 = 1065353216;
    (*(void (**)(unint64_t, char *, __n128))(*(void *)v11 + 256))(v11, v21, v20);
    *((unsigned char *)this + 18840) = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v27);
  }
  else
  {
    v26.n128_u8[0] = 0;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v26.n128_u8[4]);
    HIDWORD(v27) = 1065353216;
    __int16 v28 = 257;
    char v29 = 0;
    (*(void (**)(unint64_t, __n128 *))(*(void *)v11 + 256))(v11, &v26);
  }
  OZ3DEngineCore::buildRenderGraph((uint64_t)this + 18872, (const OZRenderParams *)a2, a3, a4, (uint64_t)v30, (uint64_t)&v31, (OZElement *)this);
}

void sub_1B7CC2F04(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 16));
  _Unwind_Resume(a1);
}

double OZ3DEngineSceneElement::updateScript(OZ3DEngineSceneElement *this, CMTime *a2)
{
  double v4 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 272))(this);
  uint64_t v5 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2336))(this);
  CMTime v18 = *a2;
  if (v5 && *((void *)this + 3030))
  {
    double v6 = (void *)*((void *)this + 120);
    if (v6) {
    long long v7 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v6);
    }
    std::recursive_mutex::lock(v7);
    [*((id *)this + 3030) exportObject:PCBitmap::getRepresentation((PCBitmap *)v7) as:@"scene"];
    std::recursive_mutex::unlock(v7);
  }
  [*((id *)this + 3030) exportObject:OZScene::getSceneComposer(v4) as:@"sceneComposer"];
  CMTime time = v18;
  Float64 Seconds = CMTimeGetSeconds(&time);
  *(float *)&Float64 Seconds = Seconds;
  objc_msgSend(*((id *)this + 3030), "exportObject:as:", objc_msgSend(NSNumber, "numberWithFloat:", Seconds), @"time");
  TopLevel3DWorldGroup = FindTopLevel3DWorldGroup(v4);
  if (TopLevel3DWorldGroup)
  {
    double v10 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)TopLevel3DWorldGroup);
    std::recursive_mutex::lock(v10);
    [*((id *)this + 3030) exportObject:PCBitmap::getRepresentation((PCBitmap *)v10) as:@"masterScene"];
    std::recursive_mutex::unlock(v10);
  }
  CMTime v16 = v18;
  int v11 = (*(uint64_t (**)(char *, CMTime *, uint64_t, uint64_t, uint64_t))(*((void *)this + 2) + 104))((char *)this + 16, &v16, 1, 1, 1);
  int v12 = v11;
  double v13 = (_OWORD *)((char *)this + 18888);
  double v14 = (char *)this + 18912;
  if (*((unsigned char *)this + 18912) || !v11)
  {
    if (*((unsigned char *)this + 18912) && (v11 & 1) == 0)
    {
      [*((id *)this + 3030) dispatch:@"OnDisable"];
      double result = *(double *)&v18.value;
      _OWORD *v13 = *(_OWORD *)&v18.value;
      *((void *)this + 2363) = v18.epoch;
      unsigned char *v14 = v12;
      return result;
    }
  }
  else
  {
    [*((id *)this + 3030) dispatch:@"OnEnable"];
  }
  double result = *(double *)&v18.value;
  _OWORD *v13 = *(_OWORD *)&v18.value;
  *((void *)this + 2363) = v18.epoch;
  unsigned char *v14 = v12;
  if (v12) {
    [*((id *)this + 3030) dispatch:@"Update"];
  }
  return result;
}

void sub_1B7CC31A8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZ3DEngineSceneElement::buildRenderGraph(OZ3DEngineSceneElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

void OZ3DEngineSceneElement::makeRenderImageSource(OZ3DEngineSceneElement *this, const OZRenderState *a2, const OZRenderGraphState *a3)
{
  OZRenderState::OZRenderState(&v12, a2);
  CMTime var0 = (CMTime)a2->var0;
  memset(&v11, 0, sizeof(v11));
  OZ3DEngineSceneElement::globalToSceneFileTime(this, &var0, &v11.value);
  memset(&v9, 0, sizeof(v9));
  if (OZ3DEngineSceneElement::get3DEngineSceneFile(this))
  {
    uint64_t v5 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
    v6.n128_f64[0] = OZ3DEngineSceneFile::get3DFileTime(v5, &v11, &v9);
  }
  else
  {
    __n128 v6 = *(__n128 *)&v11.value;
    CMTime v9 = v11;
  }
  (*(void (**)(OZ3DEngineSceneElement *, __n128))(*(void *)this + 2336))(this, v6);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v12, (uint64_t)v8);
  for (uint64_t i = 0; i != 4; ++i)
    v8[i + 8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v8[2 * i]), (float64x2_t)v8[2 * i + 1]);
  OZ3DEngineCore::makeRenderImageSource();
}

void non-virtual thunk to'OZ3DEngineSceneElement::makeRenderImageSource(OZ3DEngineSceneElement *this, const OZRenderState *a2, const OZRenderGraphState *a3)
{
}

uint64_t OZ3DEngineSceneElement::doesTransformFromLocalToScreenSpace(OZ3DEngineSceneElement *this, const OZRenderParams *a2)
{
  return 1;
}

__n128 OZ3DEngineSceneElement::getNaturalDuration@<Q0>(OZ3DEngineSceneElement *this@<X0>, uint64_t a2@<X8>)
{
  double v3 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (v3)
  {
    double v4 = *(void (**)(void))(*(void *)v3 + 1560);
    v4();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZ3DEngineSceneElement::getNaturalDuration@<D0>(OZ3DEngineSceneElement *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = OZ3DEngineSceneElement::getNaturalDuration((OZ3DEngineSceneElement *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

uint64_t OZ3DEngineSceneElement::getNaturalDurationFlags(OZ3DEngineSceneElement *this)
{
  uint64_t v2 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (!v2) {
    return 6;
  }
  int v3 = (*(uint64_t (**)(const void *))(*(void *)v2 + 1552))(v2);
  double v4 = (OZRetimingUtil *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 640))(this);
  return OZRetimingUtil::GetRetimeNaturalDurationFlags(v4, v5) | v3;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::getNaturalDurationFlags(OZ3DEngineSceneElement *this)
{
  return OZ3DEngineSceneElement::getNaturalDurationFlags((OZ3DEngineSceneElement *)((char *)this - 16));
}

void OZ3DEngineSceneElement::setFootage(OZ3DEngineSceneElement *this, OZSceneNodeFile *a2)
{
  OZSceneNode::removeFromLinked(this);
  OZChanSceneNodeRef::setNode((OZ3DEngineSceneElement *)((char *)this + 19272), a2);
  if (a2) {
  else
  }
    double v4 = 0;
  memset(&v23, 0, sizeof(v23));
  Float64 OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(v4);
  OZFigTimeForChannelSeconds(&v23, OriginalFileDurationInSeconds, 0x40000);
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, 1, 30);
  uint64_t v6 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 272))(this);
  uint64_t v7 = v6;
  if (v6)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v19);
    CMTime v22 = v19;
  }
  uint64_t v9 = *((void *)a2 + 2);
  long long v8 = (char *)a2 + 16;
  double v10 = (OZPreferenceManager *)(*(uint64_t (**)(char *))(v9 + 288))(v8);
  if ((v10 & 1) == 0)
  {
    CMTime v11 = (OZPreferenceManager *)OZPreferenceManager::Instance(v10);
    if (v7 && OZPreferenceManager::getUseProjectDurationForStills(v11))
    {
      *(_OWORD *)&v23.int64_t value = *(_OWORD *)(v7 + 1376);
      CMTimeEpoch epoch = *(void *)(v7 + 1392);
    }
    else
    {
      OZPreferenceManager::getDefaultStillDuration(&v22, (uint64_t)&v19);
      *(_OWORD *)&v23.int64_t value = *(_OWORD *)&v19.value;
      CMTimeEpoch epoch = v19.epoch;
    }
    v23.CMTimeEpoch epoch = epoch;
  }
  memset(&v25, 0, sizeof(v25));
  operator*(&v22, &v25, 0.5);
  CMTime v19 = v23;
  CMTime v26 = v25;
  PC_CMTimeSaferAdd(&v19, &v26, (uint64_t)&v24);
  CMTime v19 = v24;
  CMTime v26 = v22;
  PC_CMTimeFloorToSampleDuration(&v19, &v26, (uint64_t)&v17);
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  long long v20 = v17;
  uint64_t v21 = v18;
  OZChannelObjectRootBase::setTimeExtent((OZ3DEngineSceneElement *)((char *)this + 56), (const PCTimeRange *)&v19, 0);
  double v13 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 640))(this);
  OZRetimingUtil::SetDefaultRetimingState(v13, v14);
  uint64_t v15 = (OZChannelObjectRoot *)((*(uint64_t (**)(char *))(*(void *)v8 + 288))(v8) & 1);
  CMTime v16 = (OZRetimingUtil *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 640))(this);
  OZRetimingUtil::SetEndCondition(v16, v15);
  OZ3DEngineSceneElement::didReadSceneFile(this);
  if (v7) {
    OZDocument::postNotification(*(OZDocument **)(v7 + 1584), 0x80000);
  }
}

uint64_t OZ3DEngineSceneElement::getIconName(OZ3DEngineSceneElement *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void OZ3DEngineSceneElement::getIconNameBW(OZ3DEngineSceneElement *this@<X0>, PCURL *a2@<X8>)
{
  if ((*(unsigned int (**)(OZ3DEngineSceneElement *, void))(*(void *)this + 1656))(this, MEMORY[0x1E4F1FA48]))
  {
    int v3 = @"M_LayersList_ObjectIconGrey-3DObjectRasterized";
  }
  else
  {
    int v3 = @"M_LayersList_ObjectIconGrey-3DObject";
  }

  PCURL::PCURL(a2, v3);
}

uint64_t OZ3DEngineSceneElement::getIconID(OZ3DEngineSceneElement *this)
{
  return 14;
}

void OZ3DEngineSceneElement::description(PCURL *a1@<X8>)
{
}

PCString *OZ3DEngineSceneElement::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

uint64_t OZ3DEngineSceneElement::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2, a3, 1);
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::calcStaticHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 16) + 528))();
}

NSUInteger addChannelsForParameters(NSArray *a1, OZChannelFolder *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  double v4 = (PCString ***)*((void *)a2 + 14);
  NSUInteger result = [(NSArray *)a1 count];
  if (v4) {
    BOOL v6 = result == 0;
  }
  else {
    BOOL v6 = 1;
  }
  obuint64_t j = a1;
  if (v6)
  {
    if (v4) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = result == 0;
    }
    if (v7) {
      return result;
    }
  }
  else
  {
    uint64_t v8 = (char *)v4[1] - (char *)*v4;
    if ([(NSArray *)a1 count] == v8 >> 3)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      NSUInteger result = [(NSArray *)a1 countByEnumeratingWithState:&v33 objects:&v39 count:16];
      NSUInteger v9 = result;
      if (!result) {
        return result;
      }
      uint64_t v10 = *(void *)v34;
LABEL_14:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v34 != v10) {
          objc_enumerationMutation(obj);
        }
        OZRenderState v12 = *v4;
        double v13 = v4[1];
        if (*v4 == v13) {
          break;
        }
        double v14 = *(void **)(*((void *)&v33 + 1) + 8 * v11);
        while (1)
        {
          uint64_t v15 = *v12;
          CFStringRef v16 = (const __CFString *)[v14 name];
          v37.CMTime var0 = 0;
          PCString::set(&v37, v16);
          int v17 = PCString::compare(v15 + 4, &v37);
          PCString::~PCString(&v37);
          if (!v17) {
            break;
          }
          if (++v12 == v13)
          {
            OZRenderState v12 = v13;
            break;
          }
        }
        if (v12 == v4[1]) {
          break;
        }
        if (++v11 == v9)
        {
          NSUInteger result = [(NSArray *)obj countByEnumeratingWithState:&v33 objects:&v39 count:16];
          NSUInteger v9 = result;
          if (result) {
            goto LABEL_14;
          }
          return result;
        }
      }
    }
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  NSUInteger result = [(NSArray *)obj countByEnumeratingWithState:&v29 objects:v38 count:16];
  NSUInteger v18 = result;
  if (result)
  {
    int v19 = 0;
    uint64_t v20 = *(void *)v30;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v30 != v20) {
          objc_enumerationMutation(obj);
        }
        CMTime v22 = *(void **)(*((void *)&v29 + 1) + 8 * v21);
        if (!v4) {
          goto LABEL_52;
        }
        CMTime v24 = *v4;
        CMTime v23 = v4[1];
        if (*v4 == v23) {
          goto LABEL_52;
        }
        while (1)
        {
          CMTime v25 = *v24;
          CFStringRef v26 = (const __CFString *)[v22 name];
          v39.CMTime var0 = 0;
          PCString::set(&v39, v26);
          LODWORD(v25) = PCString::compare(v25 + 4, &v39);
          PCString::~PCString(&v39);
          if (!v25) {
            break;
          }
          if (++v24 == v23)
          {
            CMTime v24 = v23;
            break;
          }
        }
        if (v24 == v4[1] || !*v24)
        {
LABEL_52:
          while (OZChannelFolder::getDescendant(a2, v19++))
            ;
          objc_msgSend((id)objc_msgSend(v22, "name"), "UTF8String");
          switch([v22 type])
          {
            case 0:
              operator new();
            case 1:
              operator new();
            case 2:
              operator new();
            case 3:
              operator new();
            case 4:
              operator new();
            case 6:
              operator new();
            case 7:
              operator new();
            default:
              break;
          }
        }
        else
        {
          ++v19;
        }
        ++v21;
      }
      while (v21 != v18);
      NSUInteger result = [(NSArray *)obj countByEnumeratingWithState:&v29 objects:v38 count:16];
      NSUInteger v18 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B7CC3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCString a28)
{
}

void removeUnusedChannels(NSArray *a1, OZChannelFolder *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (PCString ***)*((void *)a2 + 14);
  if (v2)
  {
    long long v32 = 0;
    long long v33 = 0;
    long long v34 = 0;
    int v3 = *v2;
    double v4 = v2[1];
    if (*v2 != v4)
    {
      CFStringRef v26 = &v34;
      do
      {
        BOOL v7 = *v3;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        uint64_t v8 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v28, v35, 16, v26);
        if (v8)
        {
          uint64_t v9 = *(void *)v29;
LABEL_6:
          uint64_t v10 = 0;
          while (1)
          {
            if (*(void *)v29 != v9) {
              objc_enumerationMutation(a1);
            }
            CFStringRef v11 = (const __CFString *)[*(id *)(*((void *)&v28 + 1) + 8 * v10) name];
            v27.CMTime var0 = 0;
            PCString::set(&v27, v11);
            int v12 = PCString::compare(v7 + 4, &v27);
            PCString::~PCString(&v27);
            if (!v12) {
              break;
            }
            if (v8 == ++v10)
            {
              uint64_t v8 = [(NSArray *)a1 countByEnumeratingWithState:&v28 objects:v35 count:16];
              if (v8) {
                goto LABEL_6;
              }
              goto LABEL_12;
            }
          }
        }
        else
        {
LABEL_12:
          double v13 = v33;
          if (v33 >= v34)
          {
            uint64_t v15 = v33 - v32;
            if ((unint64_t)(v15 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v16 = ((char *)v34 - (char *)v32) >> 2;
            if (v16 <= v15 + 1) {
              unint64_t v16 = v15 + 1;
            }
            if ((unint64_t)((char *)v34 - (char *)v32) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              NSUInteger v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v26, v17);
            }
            else {
              NSUInteger v18 = 0;
            }
            int v19 = (PCString **)&v18[8 * v15];
            *int v19 = v7;
            double v14 = v19 + 1;
            uint64_t v21 = v32;
            uint64_t v20 = v33;
            if (v33 != v32)
            {
              do
              {
                CMTime v22 = *--v20;
                *--int v19 = v22;
              }
              while (v20 != v21);
              uint64_t v20 = v32;
            }
            long long v32 = v19;
            long long v33 = v14;
            long long v34 = (PCString **)&v18[8 * v17];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *long long v33 = v7;
            double v14 = v13 + 1;
          }
          long long v33 = v14;
        }
        ++v3;
      }
      while (v3 != v4);
      CMTime v24 = (OZChannelBase **)v32;
      CMTime v23 = (OZChannelBase **)v33;
      if (v32 != v33)
      {
        do
        {
          CMTime v25 = *v24;
          OZChannelFolder::removeDescendant(a2, *v24);
          if (v25) {
            (*((void (**)(OZChannelBase *))v25->var0 + 1))(v25);
          }
          ++v24;
        }
        while (v24 != v23);
        CMTime v23 = (OZChannelBase **)v32;
      }
      if (v23)
      {
        long long v33 = (PCString **)v23;
        operator delete(v23);
      }
    }
  }
}

void sub_1B7CC4380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZ3DEngineSceneElement::applyShader(OZ3DEngineSceneElement *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 2368);
  if (v2 && [v2 library] && !*((void *)this + 2372))
  {
    int v3 = (void *)[MEMORY[0x1E4F3B258] program];
    objc_msgSend(v3, "setLibrary:", objc_msgSend(*((id *)this + 2368), "library"));
    objc_msgSend(v3, "setVertexFunctionName:", objc_msgSend(*((id *)this + 2368), "vertexFunctionName"));
    objc_msgSend(v3, "setFragmentFunctionName:", objc_msgSend(*((id *)this + 2368), "fragmentFunctionName"));
    id v4 = v3;
    *((void *)this + 237OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v4;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = *(void *)"";
    unsigned int v17[2] = ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke;
    void v17[3] = &__block_descriptor_40_e73_v40__0___SCNBufferStream__8__SCNNode_16___SCNShadable__24__SCNRenderer_32l;
    void v17[4] = this;
    [v4 handleBindingOfBufferNamed:@"params" frequency:0 usingBlock:v17];
    uint64_t v5 = objc_opt_new();
    [v5 setProgram:v3];
    [v5 setDoubleSided:1];
    BOOL v6 = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2336))(this);
    std::recursive_mutex::lock(v6);
    BOOL v7 = objc_msgSend((id)objc_msgSend((id)PCBitmap::getRepresentation((PCBitmap *)v6), "rootNode"), "childNodesPassingTest:", &__block_literal_global_88_0);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v7);
          }
          CFStringRef v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          int v12 = objc_msgSend((id)objc_msgSend(v11, "geometry"), "copy");
          [v11 setGeometry:v12];
          NSUInteger v18 = v5;
          objc_msgSend((id)objc_msgSend(v11, "geometry"), "setMaterials:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v18, 1));
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
      }
      while (v8);
    }

    std::recursive_mutex::unlock(v6);
  }
}

void sub_1B7CC4648(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  PCMutex::lock((PCMutex *)(v3 + 24336));
  LOBYTE(v5) = 1;
  objc_msgSend(a2, "writeBytes:length:", *(void *)(v3 + 18952), *(void *)(v3 + 18960) - *(void *)(v3 + 18952), v3 + 24336, v5);
  return PCMutex::unlock((PCMutex *)(v3 + 24336));
}

void sub_1B7CC46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

void *OZ3DEngineSceneElement::updateScriptParamsFromChannels(OZ3DEngineSceneElement *this, CMTime *a2)
{
  NSUInteger result = (void *)*((void *)this + 3030);
  if (result)
  {
    id v4 = (PCString ***)*((void *)this + 2992);
    if (v4)
    {
      BOOL v6 = (void *)[result parameterDescriptors];
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v7);
      return (void *)updateParametersFromChannels((void *)this + 2365, v6, v4, a2, &v7);
    }
  }
  return result;
}

uint64_t updateParametersFromChannels(void *a1, void *a2, PCString ***a3, CMTime *this, CMTime *a5)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  CMTime v108 = *this;
  int value_high = HIDWORD(this[14].value);
  uint64_t WorkingColorSpace = OZRenderParams::getWorkingColorSpace((FxColorDescription *)this);
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  int v7 = 0;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v102 objects:v110 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v103;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v103 != v9) {
          objc_enumerationMutation(a2);
        }
        switch([*(id *)(*((void *)&v102 + 1) + 8 * i) type])
        {
          case 0:
          case 1:
          case 4:
          case 5:
            ++v7;
            break;
          case 2:
          case 3:
            v7 += 4;
            break;
          case 7:
            v7 += 16;
            break;
          default:
            continue;
        }
      }
      uint64_t v8 = [a2 countByEnumeratingWithState:&v102 objects:v110 count:16];
    }
    while (v8);
  }
  if (v7 != (uint64_t)(a1[1] - *a1) >> 2) {
    std::vector<float>::resize((uint64_t)a1, v7);
  }
  long long v101 = 0u;
  long long v100 = 0u;
  long long v99 = 0u;
  long long v98 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v98 objects:v109 count:16];
  uint64_t v12 = result;
  if (result)
  {
    int v13 = 0;
    uint64_t v14 = *(void *)v99;
    __asm { FMOV            V0.2D, #-1.0 }
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v99 != v14) {
          objc_enumerationMutation(a2);
        }
        uint64_t v21 = *a3;
        CMTime v22 = a3[1];
        if (*a3 != v22)
        {
          CMTime v23 = *(void **)(*((void *)&v98 + 1) + 8 * v20);
          while (1)
          {
            CMTime v24 = *v21;
            CFStringRef v25 = (const __CFString *)[v23 name];
            *(void *)signed int v87 = 0;
            PCString::set((PCString *)v87, v25);
            LODWORD(v24) = PCString::compare(v24 + 4, (const PCString *)v87);
            PCString::~PCString((PCString *)v87);
            if (!v24) {
              break;
            }
            if (++v21 == v22)
            {
              uint64_t v21 = v22;
              break;
            }
          }
          if (v21 != a3[1])
          {
            CFStringRef v26 = (char *)*v21;
            switch([v23 type])
            {
              case 0:
                if (v26) {
                else
                }
                  PCString v27 = 0;
                goto LABEL_45;
              case 1:
                if (v26) {
                else
                }
                  PCString v27 = 0;
                goto LABEL_45;
              case 2:
                if (v26) {
                PCColor::PCColor((PCColor *)v87);
                }
                (*(void (**)(char *, CMTime *, unsigned char *))(*(void *)v26 + 832))(v26, &v108, v87);
                LODWORD(v82.value) = 0;
                v81[0] = 0.0;
                LODWORD(v85) = 0;
                v83[0] = 0.0;
                OZChannelColorNoAlpha::getPCColorSpace((OZChannelColorNoAlpha *)v26, (CGColorSpace **)v84);
                PCColor::getRGBA((PCColor *)v87, (float *)&v82, v81, (float *)&v85, v83, (const PCColorSpaceHandle *)v84);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v84);
                uint64_t v36 = *a1 + 4 * v13;
                *(_DWORD *)uint64_t v36 = v82.value;
                *(float *)(v36 + 4) = v81[0];
                *(_DWORD *)(v36 + 8) = v85;
                v13 += 4;
                *(float *)(v36 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v83[0];
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v90);
                break;
              case 3:
                if (v26) {
                OZChannel::getValueAsDouble((OZChannel *)(v26 + 136), &v108, 0.0);
                }
                double v29 = v28;
                OZChannel::getValueAsDouble((OZChannel *)(v26 + 288), &v108, 0.0);
                double v31 = v30;
                OZChannel::getValueAsDouble((OZChannel *)(v26 + 736), &v108, 0.0);
                float v32 = v29;
                uint64_t v33 = *a1 + 4 * v13;
                float v34 = v31;
                *(float *)uint64_t v33 = v32;
                *(float *)(v33 + 4) = v34;
                *(float *)&double v35 = v35;
                *(_DWORD *)(v33 + 8) = LODWORD(v35);
                v13 += 4;
                *(_DWORD *)(v33 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1065353216;
                break;
              case 4:
                if (v26) {
                else
                }
                  PCString v27 = 0;
LABEL_45:
                OZChannel::getValueAsDouble(v27, &v108, 0.0);
                *(float *)&double v39 = v39;
                *(_DWORD *)(*a1 + 4 * v13) = LODWORD(v39);
                goto LABEL_46;
              case 5:
LABEL_46:
                ++v13;
                break;
              case 6:
                if (v26) {
                else
                }
                  PCString v37 = 0;
                if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(v37 + 136)))
                {
                  OZRenderParams::OZRenderParams((OZRenderParams *)v87, (const OZRenderParams *)this);
                  long long v85 = 0uLL;
                  uint64_t v86 = 0;
                  v84[0] = v108;
                  CMTime v82 = *a5;
                  PC_CMTimeSaferSubtract(v84, &v82, (uint64_t)&v85);
                  *(_OWORD *)signed int v87 = v85;
                  *(void *)&v87[16] = v86;
                  uint64_t v96 = 0;
                  uint64_t v97 = 0;
                  MakeImageSourceTransformPair((OZChannelImageWithOptions *)v37, (OZChannelBase *)v87);
                }
                return result;
              case 7:
                if (v26) {
                else
                }
                  uint64_t v38 = 0;
                Descendant = (const void *)OZChannelFolder::getDescendant(v38, 1);
                if (Descendant) {
                else
                }
                  double v41 = 0;
                int v42 = (const void *)OZChannelFolder::getDescendant(v38, 2);
                if (v42) {
                else
                }
                  CFIndex v43 = 0;
                uint64_t v44 = (const void *)OZChannelFolder::getDescendant(v38, 3);
                if (v44) {
                else
                }
                  uint64_t v45 = 0;
                CFStringRef v46 = (const void *)OZChannelFolder::getDescendant(v38, 4);
                if (v46) {
                else
                }
                  CFStringRef v47 = 0;
                OZChannel::getValueAsDouble((OZChannel *)(v41 + 136), &v108, 0.0);
                double v49 = v48;
                OZChannel::getValueAsDouble((OZChannel *)(v41 + 288), &v108, 0.0);
                double v51 = v50;
                OZChannel::getValueAsDouble((OZChannel *)(v41 + 736), &v108, 0.0);
                double v53 = v52;
                memset(v84, 0, 24);
                OZChannelRotation3D::getValueAsEulerAngles((uint64_t)v43, &v108, v84, 0.0);
                OZChannel::getValueAsDouble((OZChannel *)(v45 + 136), &v108, 0.0);
                double v55 = v54;
                OZChannel::getValueAsDouble((OZChannel *)(v45 + 288), &v108, 0.0);
                double v57 = v56;
                OZChannel::getValueAsDouble((OZChannel *)(v45 + 736), &v108, 0.0);
                double v59 = v58;
                int ValueAsInt = OZChannel::getValueAsInt(v47, &v108, 0.0);
                double v95 = 1.0;
                double v92 = 1.0;
                double v89 = 1.0;
                *(void *)signed int v87 = 0x3FF0000000000000;
                *(_OWORD *)&v87[8] = 0u;
                long long v88 = 0u;
                long long v90 = 0u;
                long long v91 = 0u;
                long long v93 = 0u;
                long long v94 = 0u;
                PCMatrix44Tmpl<double>::setTransformation((uint64_t)v87, 0, 4, v49, v51, v53, *(double *)&v84[0].value, *(double *)&v84[0].timescale, *(double *)&v84[0].epoch, v55, v57, v59, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
                if (ValueAsInt) {
                  PCMatrix44Tmpl<double>::invert((double *)v87, (double *)v87, 0.0);
                }
                float v61 = *(double *)v87;
                double v62 = (float *)(*a1 + 4 * v13);
                *double v62 = v61;
                float v63 = *((double *)&v88 + 1);
                v62[1] = v63;
                float v64 = *(double *)&v91;
                v62[2] = v64;
                float v65 = *((double *)&v93 + 1);
                v62[3] = v65;
                float v66 = *(double *)&v87[8];
                v62[4] = v66;
                float v67 = v89;
                v62[5] = v67;
                float v68 = *((double *)&v91 + 1);
                v62[6] = v68;
                float v69 = *(double *)&v94;
                v62[7] = v69;
                float v70 = *(double *)&v87[16];
                v62[8] = v70;
                float v71 = *(double *)&v90;
                v62[9] = v71;
                float v72 = v92;
                v62[10] = v72;
                float v73 = *((double *)&v94 + 1);
                v62[11] = v73;
                float v74 = *(double *)&v88;
                v62[12] = v74;
                float v75 = *((double *)&v90 + 1);
                v62[13] = v75;
                float v76 = *(double *)&v93;
                v62[14] = v76;
                float v77 = v95;
                v13 += 16;
                v62[15] = v77;
                break;
              default:
                break;
            }
          }
        }
        ++v20;
      }
      while (v20 != v12);
      uint64_t result = [a2 countByEnumeratingWithState:&v98 objects:v109 count:16];
      uint64_t v12 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B7CC5324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,PCSharedCount *a27,PCSharedCount *a28)
{
}

uint64_t OZ3DEngineSceneElement::updateShaderParamsFromChannels(OZ3DEngineSceneElement *this, CMTime *a2)
{
  uint64_t result = [*((id *)this + 2368) library];
  if (result)
  {
    uint64_t v5 = (PCString ***)*((void *)this + 3008);
    if (v5)
    {
      BOOL v6 = (void *)[*((id *)this + 2368) parameters];
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v7);
      return updateParametersFromChannels((void *)this + 2369, v6, v5, a2, &v7);
    }
  }
  return result;
}

void *OZ3DEngineSceneElement::hasShader(OZ3DEngineSceneElement *this)
{
  uint64_t result = (void *)*((void *)this + 2368);
  if (result) {
    return (void *)([result library] != 0);
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::physicsType(OZ3DEngineSceneElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20872), a2, 0.0);
}

uint64_t OZ3DEngineSceneElement::physicsShape(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt(this + 139, a2, 0.0);
}

uint64_t OZ3DEngineSceneElement::shouldAllowRetiming(OZ3DEngineSceneElement *this)
{
  if (*((unsigned char *)this + 24232)) {
    return 1;
  }
  uint64_t result = (uint64_t)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (result)
  {
    return OZ3DEngineSceneFile::supportsAnimation((OZ3DEngineSceneFile *)result);
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZ3DEngineSceneElementScope);
  if (v10)
  {
    uint64_t v11 = *(void *)PCXMLWriteStream::getURL(v10);
    if ([this[3030] url])
    {
      uint64_t v12 = objc_msgSend((id)objc_msgSend(this[3030], "url"), "oz_relativePathFromURL:", v11);
      if (v12)
      {
        CFStringRef v13 = (const __CFString *)v12;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 501);
        v17.CMTime var0 = 0;
        PCString::set(&v17, v13);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v17);
        PCString::~PCString(&v17);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
    if ([this[2368] url])
    {
      uint64_t v14 = objc_msgSend((id)objc_msgSend(this[2368], "url"), "oz_relativePathFromURL:", v11);
      if (v14)
      {
        CFStringRef v15 = (const __CFString *)v14;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 502);
        v17.CMTime var0 = 0;
        PCString::set(&v17, v15);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v17);
        PCString::~PCString(&v17);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZElement::writeBody((OZElement *)this, a2, a3, a4, a5);
}

void sub_1B7CC5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZ3DEngineSceneElement::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZ3DEngineSceneElement::parseBegin(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 2423OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  uint64_t v3 = OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneElementScope);
  return v3;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::parseBegin(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 24184) = 1;
  uint64_t v3 = OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneElementScope);
  return v3;
}

uint64_t OZ3DEngineSceneElement::parseEnd(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 2423OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  if (*((void *)this + 3031)) {
    OZ3DEngineSceneElement::loadScript(this);
  }

  return OZElement::parseEnd((OZElement *)this, a2);
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::parseEnd(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  return OZ3DEngineSceneElement::parseEnd((OZ3DEngineSceneElement *)((char *)this - 48), a2);
}

uint64_t OZ3DEngineSceneElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZElement::parseElement(this, a2, a3);
  if (v6)
  {
    CMTime v7 = v6;
    int v8 = *((_DWORD *)a3 + 2);
    if (v8 == 502)
    {
      PCSharedCount::PCSharedCount(&v14);
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14))
      {
        uint64_t v11 = *(void *)PCXMLReadStream::getURL(v7);
        CFURLRef v12 = (const __CFURL *)[MEMORY[0x1E4F1CB10] URLWithString:PCString::ns_str((PCString *)&v14) relativeToURL:v11];
        OZ3DEngineSceneElement::loadShader((CFURLRef)this, v12);
      }
      goto LABEL_8;
    }
    if (v8 == 501)
    {
      PCSharedCount::PCSharedCount(&v14);
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14))
      {
        uint64_t v9 = *(void *)PCXMLReadStream::getURL(v7);
        CFURLRef v10 = (const __CFURL *)[MEMORY[0x1E4F1CB10] URLWithString:PCString::ns_str((PCString *)&v14) relativeToURL:v9];
        OZ3DEngineSceneElement::setScriptURL((OZ3DEngineSceneElement *)this, v10);
      }
LABEL_8:
      PCString::~PCString((PCString *)&v14);
    }
  }
  return 1;
}

void sub_1B7CC59AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::parseElement(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

std::recursive_mutex *OZ3DEngineSceneElement::get3DNode(OZ3DEngineSceneElement *this)
{
  uint64_t result = (std::recursive_mutex *)*((void *)this + 2360);
  if (!result)
  {
    uint64_t result = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)this + 2336))(this);
    if (result)
    {
      uint64_t v3 = (PCBitmap *)result;
      std::recursive_mutex::lock(result);
      *((void *)this + 2360) = (id)objc_msgSend((id)objc_msgSend((id)PCBitmap::getRepresentation(v3), "rootNode"), "clone");
      [*((id *)this + 2360) setName:objc_msgSend(NSString, "stringWithFormat:", @"%u", *((unsigned int *)this + 20))];
      [*((id *)this + 2360) setCategoryBitMask:1];
      (*(void (**)(OZ3DEngineSceneElement *))(*(void *)this + 2296))(this);
      OZ3DEngineSceneElement::applyShader(this);
      std::recursive_mutex::unlock((std::recursive_mutex *)v3);
      return (std::recursive_mutex *)*((void *)this + 2360);
    }
  }
  return result;
}

void sub_1B7CC5AF4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

NSString *OZ3DEngineSceneElement::makeDataFor3DEngineWorld@<X0>(OZ3DEngineSceneElement *this@<X0>, double a2@<D0>, CMTime *a3@<X1>, uint64_t *a4@<X8>)
{
  double updated = OZ3DEngineSceneElement::updateScript(this, a3);
  uint64_t v9 = (*(uint64_t (**)(OZ3DEngineSceneElement *, double))(*(void *)this + 2336))(this, updated);
  OZRenderState::OZRenderState(&v53, (const OZRenderState *)a3);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v53, (uint64_t)v45);
  for (uint64_t i = 0; i != 4; ++i)
    v52[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v45[4 * i]), *(float64x2_t *)&v45[4 * i + 2]);
  uint64_t v51 = 0x3FF0000000000000;
  uint64_t v48 = 0x3FF0000000000000;
  void v45[5] = 0x3FF0000000000000;
  v45[0] = 0x3FF0000000000000;
  memset(&v45[1], 0, 32);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  (*(void (**)(OZ3DEngineSceneElement *, void *, OZRenderState *))(*(void *)this + 1256))(this, v45, &v53);
  for (uint64_t j = 0; j != 4; ++j)
  {
    float32x4_t v12 = v52[j];
    CFStringRef v13 = (float64x2_t *)(&v42 + 2 * j);
    float64x2_t *v13 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
    v13[1] = vcvt_hight_f64_f32(v12);
  }
  PCSharedCount v14 = (Li3DEngineObjectDataBase *)PCMatrix44Tmpl<double>::operator*((uint64_t)v45, &v42, (uint64_t)v44);
  for (uint64_t k = 0; k != 4; ++k)
    *(&v42 + k) = (__int128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44[2 * k]), v44[2 * k + 1]);
  *((void *)&v39 + 1) = 0;
  *(void *)&long long v40 = 0;
  *(void *)&long long v39 = &unk_1F10AD5F8;
  BYTE8(v40) = 0;
  long long v16 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(v14);
  (*(void (**)(OZ3DEngineSceneElement *, uint64_t, CMTime *, long long *, long long *, void, void, void, double, float, float, float, float, float))(*(void *)this + 2272))(this, v9, a3, &v42, &v39, 0, 0, 0, a2, *v16, v16[1], v16[2], v16[3], 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v39);
  uint64_t v17 = *a4;
  long long v42 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  *(_DWORD *)(v17 + 200) = (*(uint64_t (**)(OZ3DEngineSceneElement *, long long *))(*(void *)this + 1576))(this, &v42);
  uint64_t v18 = *a4;
  *(unsigned char *)(v18 + 568) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24080), MEMORY[0x1E4F1FA48], 0.0) != 0;
  long long v40 = xmmword_1B7E736F0;
  long long v41 = xmmword_1B7E736F0;
  long long v39 = xmmword_1B7E736F0;
  (*(void (**)(OZ3DEngineSceneElement *, long long *, CMTime *))(*(void *)this + 1360))(this, &v39, a3);
  for (uint64_t m = 0; m != 4; ++m)
  {
    float32x4_t v20 = v52[m];
    uint64_t v21 = (float64x2_t *)(&v42 + 2 * m);
    float64x2_t *v21 = vcvtq_f64_f32(*(float32x2_t *)v20.f32);
    v21[1] = vcvt_hight_f64_f32(v20);
  }
  PCMatrix44Tmpl<double>::invert((double *)&v42, (double *)&v42, 0.0);
  int v22 = 0;
  double v23 = -1.0;
  double v24 = 1.0;
  double v25 = 1.0;
  double v26 = -1.0;
  double v27 = 1.0;
  double v28 = -1.0;
  do
  {
    double v29 = (long long *)((char *)&v39 + 8);
    if (v22) {
      double v29 = &v39;
    }
    double v30 = *(double *)v29;
    double v31 = (long long *)((char *)&v40 + 8);
    if ((v22 & 2) != 0) {
      double v31 = &v40;
    }
    double v32 = *(double *)v31;
    uint64_t v33 = (long long *)((char *)&v41 + 8);
    if ((v22 & 4) != 0) {
      uint64_t v33 = &v41;
    }
    double v34 = *(double *)v33;
    double v54 = v30;
    double v55 = v32;
    double v56 = v34;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v42, &v54, &v54);
    if (v22)
    {
      if (v24 >= v54) {
        double v24 = v54;
      }
      if (v23 <= v54) {
        double v23 = v54;
      }
      if (v25 >= v55) {
        double v25 = v55;
      }
      if (v26 <= v55) {
        double v26 = v55;
      }
      if (v27 >= v56) {
        double v27 = v56;
      }
      if (v28 <= v56) {
        double v28 = v56;
      }
    }
    else
    {
      double v26 = v55;
      double v28 = v56;
      double v23 = v54;
      double v24 = v54;
      double v25 = v55;
      double v27 = v56;
    }
    ++v22;
  }
  while (v22 != 8);
  uint64_t v35 = *a4;
  *(double *)(v35 + 120) = v24;
  *(double *)(v35 + 128) = v23;
  *(double *)(v35 + 136) = v25;
  *(double *)(v35 + 144) = v26;
  *(double *)(v35 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v27;
  *(double *)(v35 + 160) = v28;
  unsigned int Name = (PCString *)OZObjectManipulator::getName((OZ3DEngineSceneElement *)((char *)this + 16));
  PCString v37 = PCString::ns_str(Name);
  return Li3DEngineObjectData::setDebugName((id *)v35, &v37->isa);
}

void sub_1B7CC5F40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

char *FindTopLevel3DWorldGroup(OZScene *a1)
{
  OZScene::begin_all(a1, (uint64_t)v17);
  OZScene::end_all_sel(a1, (uint64_t)v13);
  while (1)
  {
    if (v20 == v15[2])
    {
      if (v20 == 3) {
        uint64_t v2 = &v19;
      }
      else {
        uint64_t v2 = &v18;
      }
      if (v20 == 3) {
        uint64_t v3 = (uint64_t *)v15;
      }
      else {
        uint64_t v3 = &v14;
      }
      if (v20 < 2)
      {
        uint64_t v2 = v17;
        uint64_t v3 = (uint64_t *)v13;
      }
      if (*v2 == *v3) {
        break;
      }
    }
    if (v20 >= 2)
    {
      if (v20 == 2)
      {
        uint64_t v5 = *(void *)(v18 + 16);
        BOOL v6 = (const void *)(v5 + 48);
        goto LABEL_18;
      }
      uint64_t v4 = v19;
    }
    else
    {
      uint64_t v4 = v17[0];
    }
    uint64_t v5 = *(void *)(v4 + 16);
    BOOL v6 = (const void *)(v5 + 16);
LABEL_18:
    if (v5) {
      CMTime v7 = v6;
    }
    else {
      CMTime v7 = 0;
    }
    unint64_t v8 = *(void *)((*(uint64_t (**)(const void *))(*(void *)v7 + 256))(v7) + 8);
    v22[0] = (int32x4_t)xmmword_1B8380BF0;
    if (OZFactory::isKindOfClass(v8, v22))
    {
      if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 20744), 1, 1)) {
        goto LABEL_25;
      }
    }
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v17, (uint64_t)v11);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  }
  uint64_t v9 = 0;
LABEL_25:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  return v9;
}

void sub_1B7CC6160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

__n128 OZ3DEngineSceneElement::resetLastActiveState(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = (__n128 *)MEMORY[0x1E4F1F9F8];
  *((void *)this + 2363) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  __n128 result = *v1;
  *(__n128 *)((char *)this + 18888) = *v1;
  *((unsigned char *)this + 1891OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  return result;
}

uint64_t OZ3DEngineSceneElement::setInstanceColor(uint64_t this, double a2, double a3, double a4)
{
  *(unsigned char *)(this + 18840) = 1;
  *(double *)(this + 18848) = a2;
  *(double *)(this + 18856) = a3;
  *(double *)(this + 18864) = a4;
  return this;
}

void OZ3DEngineSceneElement::makeDataFor3DEngineObject(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W7>, id **a8@<X8>, double a9@<D0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>, float a14@<S5>)
{
  v132[11] = *(id *)MEMORY[0x1E4F143B8];
  v126[0] = a10;
  v126[1] = a11;
  v126[2] = a12;
  v126[3] = a13;
  uint64_t v125 = a2;
  double v124 = a9;
  char v123 = a6;
  float v122 = a14;
  int v121 = a7;
  *(_OWORD *)&v120.int64_t value = *(_OWORD *)&a3->value;
  uint64_t v19 = (OZObjectManipulator *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 16);
  v120.CMTimeEpoch epoch = a3->epoch;
  CMTime v119 = v120;
  int v20 = (*(uint64_t (**)(uint64_t, CMTime *, uint64_t, uint64_t, uint64_t))(v18 + 104))(a1 + 16, &v119, 1, 1, 1);
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)v106);
  int ValueAsInt = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v112 = 0u;
  LODWORD(v109) = -1;
  long long v105 = 0;
  if (v20) {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20872), &v120, 0.0);
  }
  LODWORD(v105) = ValueAsInt;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21384), &v120, 0.0);
  *(void *)&long long v116 = v22;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21688), &v120, 0.0);
  *(void *)&long long v117 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21536), &v120, 0.0);
  *((void *)&v116 + 1) = v24;
  HIDWORD(v105) = (*(uint64_t (**)(uint64_t, CMTime *))(*(void *)a1 + 2304))(a1, &v120);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21840), &v120, 0.0);
  *((void *)&v117 + 1) = v25;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21992), &v120, 0.0);
  uint64_t v118 = v26;
  unsigned int Name = (PCString *)OZObjectManipulator::getName(v19);
  PCString::PCString((PCString *)v131, "Projectile (to person)");
  uint64_t v89 = a5;
  long long v90 = a4;
  LODWORD(Name) = PCString::compare(Name, (const PCString *)v131);
  PCString::~PCString((PCString *)v131);
  if (!Name) {
    printf("type=%d\n", v105);
  }
  int v88 = v20;
  if (v20)
  {
    for (uint64_t i = *(void *)(a1 + 1008); i != a1 + 1000; uint64_t i = *(void *)(i + 8))
    {
      double v29 = *(void **)(i + 16);
      unint64_t v30 = v29[1];
      *(_OWORD *)int32x4_t v131 = xmmword_1B8383180;
      if (OZFactory::isKindOfClass(v30, (int32x4_t *)v131))
      {
        *(_OWORD *)&v129.BOOL var10 = *(_OWORD *)&a3->value;
        v129.var12 = (__CFString *)a3->epoch;
        int64x2_t v127 = *(int64x2_t *)&v129.var10;
        v128[0] = v129.var12;
        if ((*(unsigned int (**)(void))(*(void *)v31 + 296))())
        {
          BOOL isImpulse = OZ3DEngineApplyForceBehavior::isImpulse(v31, (const CMTime *)&v129.var10);
          Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)v131);
          int v33 = OZ3DEngineApplyForceBehavior::directionMode(v31, (const CMTime *)&v129.var10);
          v131[1] = v33 == 0;
          if (v33)
          {
            double v34 = (const void *)(*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(void *)v31 + 320))(v31);
            if (v34)
            {
              if (v35) {
                (*(void (**)(void *))(*(void *)v35 + 272))(v35);
              }
            }
            uint64_t v36 = OZ3DEngineApplyForceBehavior::targetObject(v31);
            if (v36) {
              *(_DWORD *)&v131[32] = v36[20];
            }
          }
          else
          {
            OZ3DEngineApplyForceBehavior::fixedDirection(v31, (const CMTime *)&v129.var10, (double *)&v129.var2);
            *(_OWORD *)&v131[8] = *(_OWORD *)&v129.var2;
            *(void *)&v131[24] = v129.var4.var0;
          }
          OZ3DEngineApplyForceBehavior::magnitude(v31, (const CMTime *)&v129.var10);
          *(void *)&v131[40] = v50;
          v131[0] = isImpulse;
          uint64_t v51 = (NSUUID *)OZ3DEngineApplyForceBehavior::UUID(v31);
          Li3DEngineObjectForceParams::setUUID((id *)v131, v51);
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v131;
          *(_OWORD *)&v106[16] = *(_OWORD *)&v131[16];
          long long v107 = *(_OWORD *)&v131[32];
          ProCore_Impl::PCNSRefImpl::operator=(&v108, v132);
          Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v131);
        }
      }
      else
      {
        unint64_t v37 = v29[1];
        *(_OWORD *)int32x4_t v131 = xmmword_1B8383190;
        if (OZFactory::isKindOfClass(v37, (int32x4_t *)v131))
        {
          *(_OWORD *)&v129.var2 = *(_OWORD *)&a3->value;
          v129.var4.CMTime var0 = (__CFString *)a3->epoch;
          *(_OWORD *)&v129.BOOL var10 = *(_OWORD *)&v129.var2;
          v129.var12 = v129.var4.var0;
          if ((*(unsigned int (**)(void))(*(void *)v38 + 296))())
          {
            int v39 = OZ3DEngineApplyForceBehavior::directionMode(v38, (const CMTime *)&v129.var2);
            OZ3DEnginePhysicsFieldBehavior::strength(v38, (const CMTime *)&v129.var2);
            uint64_t v41 = v40;
            OZ3DEnginePhysicsFieldBehavior::falloffExponent(v38, (const CMTime *)&v129.var2);
            uint64_t v43 = v42;
            BOOL isExtentInfinite = OZ3DEnginePhysicsFieldBehavior::isExtentInfinite(v38, (const CMTime *)&v129.var2);
            OZ3DEnginePhysicsFieldBehavior::halfExtent(v38, (const CMTime *)&v129.var2, v131);
            memset(&v131[24], 0, 24);
            OZ3DEnginePhysicsFieldBehavior::direction(v38, (const CMTime *)&v129.var2, &v127);
            *(int64x2_t *)&v131[24] = v127;
            *(void *)&v131[40] = v128[0];
            OZ3DEnginePhysicsFieldBehavior::smoothness((OZChannel *)v38, (const CMTime *)&v129.var2);
            uint64_t v46 = v45;
            OZ3DEnginePhysicsFieldBehavior::animationSpeed((OZChannel *)v38, (const CMTime *)&v129.var2);
            uint64_t v48 = v47;
            OZ3DEnginePhysicsFieldBehavior::minimumDistance((OZChannel *)v38, (const CMTime *)&v129.var2);
            LODWORD(v109) = v39;
            *((void *)&v109 + 1) = v41;
            *(void *)&long long v110 = v43;
            BYTE8(v110) = isExtentInfinite;
            *(void *)&long long v111 = v46;
            *((void *)&v111 + 1) = v48;
            long long v112 = *(_OWORD *)v131;
            long long v113 = *(_OWORD *)&v131[16];
            long long v114 = *(_OWORD *)&v131[32];
            uint64_t v115 = v49;
          }
        }
      }
    }
  }
  double v52 = OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)a1);
  if (v52 && !OZ3DEngineSceneElement::is3DNodeInMasterScene((OZ3DEngineSceneElement *)a1, (OZGroup *)v52)) {
    OZ3DEngineSceneElement::add3DNodeToMasterScene((OZ3DEngineSceneElement *)a1);
  }
  std::allocate_shared[abi:ne180100]<Li3DEngineObjectData,std::allocator<Li3DEngineObjectData>,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,void>(&v125, &v124, v90, &v123, v126, &v122, &v122, a8, &v121, v89);
  OZRenderState v53 = *a8;
  *((unsigned char *)*a8 + 424) = v88 ^ 1;
  OZElement::getOpacity((OZElement *)a1, &v120, 0);
  v53[52] = v54;
  double v55 = *a8;
  double v56 = (SCNNode *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 2288))(a1);
  Li3DEngineObjectData::setSCNNode(v55, v56);
  double v57 = *a8;
  long long v94 = v105;
  *(_WORD *)double v95 = *(_WORD *)v106;
  *(_OWORD *)&v95[8] = *(_OWORD *)&v106[8];
  *(void *)&unsigned char v95[24] = *(void *)&v106[24];
  long long v96 = v107;
  id v97 = v108;
  ProCore_Impl::PCNSRefImpl::retain(&v97);
  long long v98 = v109;
  long long v99 = v110;
  long long v100 = v111;
  long long v101 = v112;
  long long v102 = v113;
  long long v103 = v114;
  *(void *)long long v104 = v115;
  *(void *)&v104[40] = v118;
  *(_OWORD *)&v104[24] = v117;
  *(_OWORD *)&v104[8] = v116;
  v57[26] = v94;
  *(_OWORD *)(v57 + 31) = v96;
  long long v58 = *(_OWORD *)v95;
  *(_OWORD *)(v57 + 29) = *(_OWORD *)&v95[16];
  *(_OWORD *)(v57 + 27) = v58;
  ProCore_Impl::PCNSRefImpl::operator=(v57 + 33, &v97);
  long long v59 = *(_OWORD *)&v104[16];
  *((_OWORD *)v57 + 23) = *(_OWORD *)v104;
  *((_OWORD *)v57 + 24) = v59;
  *((_OWORD *)v57 + 25) = *(_OWORD *)&v104[32];
  long long v60 = v101;
  *((_OWORD *)v57 + 19) = v100;
  *((_OWORD *)v57 + 20) = v60;
  long long v61 = v103;
  *((_OWORD *)v57 + 21) = v102;
  *((_OWORD *)v57 + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v61;
  long long v62 = v99;
  *((_OWORD *)v57 + 17) = v98;
  *((_OWORD *)v57 + 18) = v62;
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v95);
  float v63 = *a8;
  *((unsigned char *)v63 + 568) = OZChannel::getValueAsInt((OZChannel *)(a1 + 24080), MEMORY[0x1E4F1FA48], 0.0) != 0;
  if (*(void *)(a1 + 18976))
  {
    *(void *)int32x4_t v131 = a1 + 24336;
    PCMutex::lock((PCMutex *)(a1 + 24336));
    v131[8] = 1;
    OZ3DEngineSceneElement::updateShaderParamsFromChannels((OZ3DEngineSceneElement *)a1, a3);
    uint64_t v64 = (uint64_t)*a8;
    if (*a8 + 65 != (id *)(a1 + 18952))
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)*a8 + 520, *(char **)(a1 + 18952), *(void *)(a1 + 18960), (uint64_t)(*(void *)(a1 + 18960) - *(void *)(a1 + 18952)) >> 2);
      uint64_t v64 = (uint64_t)*a8;
    }
    *(void *)(v64 + 51OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(void *)(a1 + 18976);
    float v65 = *(std::__shared_weak_count **)(a1 + 19136);
    uint64_t v92 = *(void *)(a1 + 19128);
    long long v93 = v65;
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Li3DEngineObjectData::setTextureSource(v64, &v92);
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    PCMutex::unlock((PCMutex *)(a1 + 24336));
  }
  if (*(void *)(a1 + 24240)) {
    int v66 = v88;
  }
  else {
    int v66 = 0;
  }
  if (v66 == 1)
  {
    PCMutex::lock((PCMutex *)(a1 + 24264));
    OZ3DEngineSceneElement::updateScriptParamsFromChannels((OZ3DEngineSceneElement *)a1, a3);
    float v67 = *a8;
    v67[57] = (id)[*(id *)(a1 + 24240) context];
    float v68 = *(void **)(a1 + 24240);
    v128[0] = 0;
    int64x2_t v127 = 0uLL;
    memset(&v129.var2, 0, 64);
    float v69 = (void *)[v68 parameterDescriptors];
    uint64_t v70 = [v69 countByEnumeratingWithState:&v129.var2 objects:v131 count:16];
    if (v70)
    {
      isa = v129.var4.var0->isa;
      do
      {
        for (uint64_t j = 0; j != v70; ++j)
        {
          if (v129.var4.var0->isa != isa) {
            objc_enumerationMutation(v69);
          }
          LiScriptParameterDescriptor::LiScriptParameterDescriptor((uint64_t)&v129, (CFTypeRef)[*(id *)(*(void *)&v129.var3 + 8 * j) name], objc_msgSend(*(id *)(*(void *)&v129.var3 + 8 * j), "type"));
          uint64_t v74 = v127.i64[1];
          if (v127.i64[1] >= v128[0])
          {
            uint64_t v76 = (v127.i64[1] - v127.i64[0]) >> 4;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 60) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v78 = v128[0] - v127.i64[0];
            if ((v128[0] - v127.i64[0]) >> 3 > v77) {
              unint64_t v77 = v78 >> 3;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v77;
            }
            float32x4_t v130 = v128;
            if (v79) {
              PCString v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v128, v79);
            }
            else {
              PCString v80 = 0;
            }
            CMTime v81 = &v80[16 * v76];
            *(_OWORD *)CMTime v81 = *(_OWORD *)&v129.var0;
            uint64_t v82 = v127.i64[1];
            uint64_t v83 = v127.i64[0];
            if (v127.i64[1] == v127.i64[0])
            {
              int64x2_t v85 = vdupq_n_s64(v127.u64[1]);
              int v84 = &v80[16 * v76];
            }
            else
            {
              int v84 = &v80[16 * v76];
              do
              {
                *((_OWORD *)v84 - 1) = *(_OWORD *)(v82 - 16);
                v84 -= 16;
                v82 -= 16;
              }
              while (v82 != v83);
              int64x2_t v85 = v127;
            }
            float v75 = v81 + 16;
            v127.i64[0] = (uint64_t)v84;
            v127.i64[1] = (uint64_t)(v81 + 16);
            *(int64x2_t *)&v129.var11 = v85;
            uint64_t v86 = (OZChannelTimeConverter *)v128[0];
            v128[0] = &v80[16 * v79];
            v129.var13 = v86;
            v129.BOOL var10 = (__CFString *)v85.i64[0];
            std::__split_buffer<LiScriptParameterDescriptor>::~__split_buffer((uint64_t)&v129.var10, (const PCString *)v79);
          }
          else
          {
            *(_OWORD *)v127.i64[1] = *(_OWORD *)&v129.var0;
            float v75 = (_OWORD *)(v74 + 16);
          }
          v127.i64[1] = (uint64_t)v75;
          OZChannelBase::setRangeName(&v129, v73);
        }
        uint64_t v70 = [v69 countByEnumeratingWithState:&v129.var2 objects:v131 count:16];
      }
      while (v70);
    }
    Li3DEngineObjectData::setScriptParameters((uint64_t)*a8, a1 + 18920, (long long **)&v127);
    *(void *)int32x4_t v131 = &v127;
    std::vector<LiScriptParameterDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)v131, v87);
    if (a1 != -24264) {
      PCMutex::unlock((PCMutex *)(a1 + 24264));
    }
  }
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v106);
}

void sub_1B7CC6D24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneElement::areEffectsAppliedInScreenSpace(OZ3DEngineSceneElement *this)
{
  return (*(unsigned int (**)(OZ3DEngineSceneElement *))(*(void *)this + 1632))(this) ^ 1;
}

uint64_t non-virtual thunk to'OZ3DEngineSceneElement::areEffectsAppliedInScreenSpace(OZ3DEngineSceneElement *this)
{
  return (*(unsigned int (**)(char *))(*((void *)this - 816) + 1632))((char *)this - 6528) ^ 1;
}

const void *OZ3DEngineSceneElement::buildAndApplyMeshContourToMotionPath(OZ3DEngineSceneElement *a1, int a2, int a3, int a4, __n128 a5, float a6, float a7)
{
  uint64_t v13 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)a1 + 272))(a1);
  *(unsigned char *)(*(void *)(v13 + 1584) + 101) = 1;
  uint64_t v14 = *(OZChannelBase **)(v13 + 1504);
  if (v14) {
    OZChannelBase::setRangeName(v14, (const PCString *)1);
  }
  __n128 result = (const void *)*((void *)a1 + 120);
  if (result)
  {
    if (result)
    {
      OZSceneNode::begin_t<OZEnvironmentMeshSceneElement,false,true>((uint64_t)result, (uint64_t)v26);
      if (v26[0] != v26[2])
      {
        uint64_t v16 = *(const void **)(v26[0] + 16);
        if (v16)
        {
          if (v17)
          {
            float64x2_t v20 = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
            while (1)
            {
              float64x2_t v22 = v20;
              double v23 = a5.n128_f32[2];
              OZEnvironmentMeshSceneElement::buildContour(v17, &v22, a2, a3, a4, (uint64_t *)&__p, a6, a7);
              if (v25 != __p) {
                break;
              }
              if (v25) {
                operator delete(v25);
              }
              uint64_t v18 = OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(v26);
              if (*v18 != v18[2])
              {
                uint64_t v19 = *(const void **)(*v18 + 16);
                if (v19)
                {
                  if (v17) {
                    continue;
                  }
                }
              }
              goto LABEL_18;
            }
            OZ3DEngineSceneElement::applyMeshContourToMotionPath(a1, (double **)&__p);
            if (__p)
            {
              uint64_t v25 = __p;
              operator delete(__p);
            }
          }
        }
      }
LABEL_18:
      __n128 result = (const void *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
    }
  }
  *(unsigned char *)(*(void *)(v13 + 1584) + 101) = 0;
  return result;
}

void sub_1B7CC7118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t *OZSceneNode::begin_t<OZEnvironmentMeshSceneElement,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    BOOL v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7CC7258(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior *OZ3DEngineSceneElement::applyMeshContourToMotionPath(OZ3DEngineSceneElement *a1, double **a2)
{
  __n128 result = (OZMotionPathBehavior *)OZ3DEngineSceneElement::getMotionPathBehavior(a1);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t PositionChannel = OZMotionPathBehavior::getPositionChannel(result);
    (*(void (**)(CMTime *__return_ptr, OZMotionPathBehavior *))(*(void *)v5 + 608))(v23, v5);
    memset(&preferredTimescale, 0, sizeof(preferredTimescale));
    uint64_t v7 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(void *)a1 + 272))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), &v20);
    CMTime v26 = v23[0];
    CMTime v25 = v23[1];
    PC_CMTimeSaferAdd(&v26, &v25, (uint64_t)&v24);
    CMTime v26 = v24;
    *(__n128 *)&v25.int64_t value = v20;
    v25.CMTimeEpoch epoch = v21;
    PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)&preferredTimescale);
    CMTime v19 = preferredTimescale;
    double Seconds = CMTimeGetSeconds(&v19);
    __n128 result = (OZMotionPathBehavior *)(*(uint64_t (**)(uint64_t, void))(*(void *)PositionChannel + 288))(PositionChannel, 0);
    CFURLRef v10 = *a2;
    uint64_t v9 = a2[1];
    if (v9 != *a2)
    {
      float v11 = Seconds / (float)(0xAAAAAAAAAAAAAAABLL * (v9 - *a2));
      uint64_t v12 = PositionChannel + 136;
      uint64_t v13 = PositionChannel + 288;
      uint64_t v14 = PositionChannel + 736;
      float v15 = 0.0;
      do
      {
        double v16 = *v10;
        double v17 = v10[1];
        double v18 = v10[2];
        memset(&v26, 0, sizeof(v26));
        CMTimeMakeWithSeconds(&v26, (float)(v15 * v11), preferredTimescale.timescale);
        CMTime v25 = v26;
        (*(void (**)(uint64_t, CMTime *))(*(void *)v12 + 600))(v12, &v25);
        (*(void (**)(uint64_t, CMTime *, void, double))(*(void *)v12 + 712))(v12, &v25, 0, v16);
        (*(void (**)(uint64_t, CMTime *))(*(void *)v13 + 600))(v13, &v25);
        (*(void (**)(uint64_t, CMTime *, void, double))(*(void *)v13 + 712))(v13, &v25, 0, v17);
        (*(void (**)(uint64_t, CMTime *))(*(void *)v14 + 600))(v14, &v25);
        __n128 result = (OZMotionPathBehavior *)(*(uint64_t (**)(uint64_t, CMTime *, void, double))(*(void *)v14 + 712))(v14, &v25, 0, v18);
        float v15 = v15 + 1.0;
        v10 += 3;
      }
      while (v10 != v9);
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZ3DEngineSceneElement::getMotionPathBehavior(OZ3DEngineSceneElement *this)
{
  uint64_t v1 = (char *)this + 1000;
  uint64_t v2 = (void *)*((void *)this + 126);
  if (v2 == (void *)((char *)this + 1000)) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = (void *)v2[2];
    unint64_t v4 = v3[1];
    long long v6 = xmmword_1B8380CD0;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v6)) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
    if (v2 == (void *)v1) {
      return 0;
    }
  }
}

void *std::allocate_shared[abi:ne180100]<OZTextureSource,std::allocator<OZTextureSource>,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,void>@<X0>(PCSharedCount *a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, unsigned int *a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0x110uLL);
  __n128 result = std::__shared_ptr_emplace<OZTextureSource>::__shared_ptr_emplace[abi:ne180100]<PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,std::allocator<OZTextureSource>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B7CC7818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<OZTextureSource>::__shared_ptr_emplace[abi:ne180100]<PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,std::allocator<OZTextureSource>,0>(void *a1, PCSharedCount *a2, _OWORD *a3, uint64_t a4, unsigned int *a5, void *a6, uint64_t a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F1157E68;
  std::allocator<OZTextureSource>::construct[abi:ne180100]<OZTextureSource,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&>((int)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1B7CC789C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<OZTextureSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1157E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OZTextureSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1157E68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_emplace<OZTextureSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<OZTextureSource>::construct[abi:ne180100]<OZTextureSource,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&>(int a1, uint64_t a2, PCSharedCount *a3, _OWORD *a4, uint64_t a5, unsigned int *a6, void *a7, uint64_t a8)
{
  CMTime var0 = a3->var0;
  PCSharedCount::PCSharedCount(&v20, a3 + 1);
  long long v14 = a4[5];
  v18[4] = a4[4];
  v18[5] = v14;
  long long v15 = a4[7];
  v18[6] = a4[6];
  v18[7] = v15;
  long long v16 = a4[1];
  v18[0] = *a4;
  v18[1] = v16;
  long long v17 = a4[3];
  double v18[2] = a4[2];
  void v18[3] = v17;
  OZTextureSource::OZTextureSource(a2, &var0, v18, a5, *a6, *a7, a8);
  PCSharedCount::~PCSharedCount(&v20);
}

void sub_1B7CC7A04(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<LiScriptParameterDescriptor>::~__split_buffer(uint64_t a1, const PCString *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v4; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    OZChannelBase::setRangeName((OZChannelBase *)(i - 16), a2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<LiScriptParameterDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1, const PCString *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (v3)
  {
    uint64_t v5 = (uint64_t)v2[1];
    long long v6 = v3;
    if ((void *)v5 != v3)
    {
      do
        uint64_t v5 = OZChannelBase::setRangeName((OZChannelBase *)(v5 - 16), a2);
      while ((void *)v5 != v3);
      long long v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (v3) {
      return v3 + 18264;
    }
    else {
      return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 22144;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 22296;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 22448;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 22704;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 22856;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 23264;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 23520;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result)) {
        return v3 + 23672;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<Li3DEngineObjectData,std::allocator<Li3DEngineObjectData>,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,void>@<X0>(uint64_t *a1@<X1>, double *a2@<X2>, long long *a3@<X3>, char *a4@<X4>, float *a5@<X5>, float *a6@<X6>, float *a7@<X7>, void *a8@<X8>, int *a9, uint64_t a10)
{
  long long v17 = operator new(0x258uLL);
  __n128 result = std::__shared_ptr_emplace<Li3DEngineObjectData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,std::allocator<Li3DEngineObjectData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1B7CC8184(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Li3DEngineObjectData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,std::allocator<Li3DEngineObjectData>,0>(void *a1, uint64_t *a2, double *a3, long long *a4, char *a5, float *a6, float *a7, float *a8, int *a9, uint64_t a10)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F1157F38;
  std::allocator<Li3DEngineObjectData>::construct[abi:ne180100]<Li3DEngineObjectData,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&>((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1B7CC8218(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Li3DEngineObjectData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1157F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Li3DEngineObjectData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1157F38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_emplace<Li3DEngineObjectData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<Li3DEngineObjectData>::construct[abi:ne180100]<Li3DEngineObjectData,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, long long *a5, char *a6, float *a7, float *a8, float *a9, int *a10, uint64_t a11)
{
  uint64_t v12 = *a3;
  double v13 = *a4;
  long long v14 = a5[1];
  v17[0] = *a5;
  v17[1] = v14;
  long long v15 = a5[3];
  unsigned int v17[2] = a5[2];
  uint64_t v17[3] = v15;
  return Li3DEngineObjectData::Li3DEngineObjectData(a2, v12, v17, *a6, *a9 != 0.0, *a10, a11, v13, *a7, a7[1], a7[2], a7[3], *a8);
}

void *OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    double v13 = v4;
    long long v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    __n128 result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    void *v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    double v13 = v4;
    long long v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    __n128 result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    void *v1 = result;
    return result;
  }
  uint64_t v7 = *(void **)(*v1 + 8);
  __n128 result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    void *v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    __n128 result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    void *v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (__n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    void *v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      long long v14 = v4;
      char v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      CFURLRef v10 = v9 + 3;
      if (!v9) {
        CFURLRef v10 = v2;
      }
      uint64_t v11 = *v10;
      void *v1 = v11;
      __n128 result = (void *)v4[120];
      if (result)
      {
        uint64_t v12 = *(void **)(v11 + 8);
        __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::initSubstance(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayer::setUpSubstanceChannelVector(this);
  OZMaterialLayerBase::initBase(this);
  OZChannel::setMax((OZChannel *)((char *)this + 22176), 3.40282347e38);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 22176), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 22176), -3.40282347e38);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 22176), 1.0);
  OZChannel::setDefaultValue((OZChannel *)this + 67, 0.5);
  PCURL::PCURL((PCURL *)&v3, @"Material Substance Thickness Diffuse");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21872), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)((char *)this + 21872), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21872), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21872), 1.0);
  PCURL::PCURL((PCURL *)&v3, @"Material Substance Thickness Specular");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22024), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)((char *)this + 22024), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 22024), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 22024), 1.0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 14840), 15);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 14840), @"OZMaterialTextureTransformsController");
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14840));
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 16168), 1.0);
  OZChannelGradientPositioned::setDoNotSerializeAsRoot((uint64_t)this + 11600, 1);
  PCURL::PCURL((PCURL *)&v3, @"Material Generic Brightness Lights");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21432), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)this + 141, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 141, 1.0);
  PCURL::PCURL((PCURL *)&v3, @"Material Generic Brightness Environment");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21584), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)this + 142, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 142, 1.0);
  OZChannelGradientPositioned::setDoNotSerializeAsRoot((uint64_t)this + 6944, 1);
  OZChannelBase::setFlag((OZChannelBase *)this + 62, 0x400000, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 131076);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 22632), 0, 0);
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7200), 2, 0);
}

void sub_1B7CC8910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZMaterialCompoundLayer::~OZMaterialCompoundLayer(OZMaterialCompoundLayer *this)
{
  *(void *)this = &unk_1F114DEA8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F114E308;
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776));
  OZChannelEnum::~OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2368));
  OZChannelPosition::~OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664));
  OZChannel2D::~OZChannel2D((OZMaterialCompoundLayer *)((char *)this + 1224));

  OZMaterialLayerBase::~OZMaterialLayerBase(this);
}

void OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCURL::PCURL((PCURL *)&v8, @"Material Substance Layer");
  OZMaterialCompoundLayer::OZMaterialCompoundLayer(this, a2, &v8, a4);
  PCString::~PCString(&v8);
  *(void *)this = &unk_1F1157F88;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1158498;
  *((void *)this + 835) = &unk_1F11584F0;
  PCURL::PCURL((PCURL *)&v8, @"Material Generic Selection Enum");
  PCURL::PCURL((PCURL *)&v7, @"Material Generic Selection");
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 6688), &v8, &v7, (OZChannelFolder *)this, 0x71u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Metal Reflection Gradient");
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944), &v8, (OZChannelFolder *)this, 0x6Cu, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Metal Shiny Percent");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 67, &v8, (OZChannelFolder *)this, 0x6Du, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Plastic Color Type Enum");
  PCURL::PCURL((PCURL *)&v7, @"Plastic Color Type Label");
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336), 0, &v8, &v7, (OZChannelFolder *)this, 0x69u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Plastic Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592), 0.8, 0.8, 0.8, &v8, (OZChannelFolder *)this, 0x6Au, 0, 5u);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Plastic Gradient");
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600), &v8, (OZChannelFolder *)this, 0x6Bu, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Generic Image");
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840), &v8, (OZChannelFolder *)this, 0x72u, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Generic Brightness");
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21296), 1.0, 1.0, &v8, (OZChannelFolder *)this, 0x6Fu, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Substance Thickness");
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21736), 1.0, 1.0, &v8, (OZChannelFolder *)this, 0x78u, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wood Bump Gain");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22176), 1.0, &v8, (OZChannelFolder *)this, 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Flat Intensity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22328), 1.0, &v8, (OZChannelFolder *)this, 0x73u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Generic Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22480), 1.0, &v8, (OZChannelFolder *)this, 0x70u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Flat Enable Edge");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), &v8, (OZChannelFolder *)this, 0x74u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Flat Edge Amount");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22760), 0.5, &v8, (OZChannelFolder *)((char *)this + 22632), 0x75u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Flat Edge Invert");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22912), 0, &v8, (OZChannelFolder *)((char *)this + 22632), 0x77u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Flat Operator Enum");
  PCURL::PCURL((PCURL *)&v7, @"Material Flat Operator Selection");
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064), &v8, &v7, (OZChannelFolder *)this, 0x76u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  *((void *)this + 2917) = 0;
  *(_OWORD *)((char *)this + 23320) = 0u;
  *((void *)this + 2918) = -1;
  OZChannel2D::setValue((OZMaterialSubstanceLayer *)((char *)this + 4632), MEMORY[0x1E4F1FA48], 1.0, 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 648), 3.0);
  OZMaterialSubstanceLayer::initSubstance(this);
  OZChannel::setValue((OZChannel *)((char *)this + 16168), MEMORY[0x1E4F1FA48], 1.0, 0);
}

void sub_1B7CC9084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel2D *a11, OZChannelMaterialLayerMap *a12, OZChannelGradientWithTransform *a13, OZChannelColorNoAlpha *a14, OZChannelEnum *a15, OZChannelPercent *a16, OZChannelGradientWithTransform *a17, OZChannelEnum *a18, PCString a19, PCString a20)
{
  PCString::~PCString(&a19);
  PCString::~PCString(&a20);
  OZChannelBool::~OZChannelBool(v26);
  OZChannelPercent::~OZChannelPercent(v25);
  OZChannelFolder::~OZChannelFolder(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelPercent::~OZChannelPercent(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannel2D::~OZChannel2D(v27);
  OZChannel2D::~OZChannel2D(a11);
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(a12);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a13);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(v20);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this, const OZMaterialSubstanceLayer *a2, OZChannelFolder *a3)
{
  OZMaterialCompoundLayer::OZMaterialCompoundLayer(this, a2, a3);
  *uint64_t v5 = &unk_1F1157F88;
  uint64_t v5[2] = &unk_1F1158498;
  v5[835] = &unk_1F11584F0;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 836), (const OZMaterialSubstanceLayer *)((char *)a2 + 6688), (OZChannelFolder *)this);
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944), (const OZMaterialSubstanceLayer *)((char *)a2 + 6944), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 67, (const OZChannelBase *)((char *)a2 + 10184), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336), (const OZMaterialSubstanceLayer *)((char *)a2 + 10336), (OZChannelFolder *)this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592), (const OZMaterialSubstanceLayer *)((char *)a2 + 10592), (OZChannelFolder *)this);
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600), (const OZMaterialSubstanceLayer *)((char *)a2 + 11600), (OZChannelFolder *)this);
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840), (const OZMaterialSubstanceLayer *)((char *)a2 + 14840), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21296), (const OZMaterialSubstanceLayer *)((char *)a2 + 21296), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21736), (const OZMaterialSubstanceLayer *)((char *)a2 + 21736), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22176), (const OZChannelBase *)a2 + 198, (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22328), (const OZChannelBase *)((char *)a2 + 22328), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22480), (const OZChannelBase *)((char *)a2 + 22480), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const OZChannelFolder *)((char *)a2 + 22632), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22760), (const OZChannelBase *)((char *)a2 + 22760), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22912), (const OZChannelBase *)((char *)a2 + 22912), (OZChannelFolder *)((char *)this + 22632));
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064), (const OZMaterialSubstanceLayer *)((char *)a2 + 23064), (OZChannelFolder *)this);
  *((void *)this + 2917) = 0;
  *(_OWORD *)((char *)this + 23320) = 0u;
  *((void *)this + 2918) = *((void *)a2 + 2918);
  OZMaterialSubstanceLayer::setUpSubstanceChannelVector(this);
}

void sub_1B7CC955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel2D *a9, OZChannel2D *a10, OZChannelMaterialLayerMap *a11, OZChannelGradientWithTransform *a12, OZChannelColorNoAlpha *a13, OZChannelEnum *a14, OZChannelPercent *a15, OZChannelGradientWithTransform *a16, OZChannelEnum *a17, uint64_t a18)
{
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelBool::~OZChannelBool(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelFolder::~OZChannelFolder(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannelPercent::~OZChannelPercent(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannel2D::~OZChannel2D(a9);
  OZChannel2D::~OZChannel2D(a10);
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(a11);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(v18);
  _Unwind_Resume(a1);
}

void sub_1B7CC961C()
{
}

void sub_1B7CC9624()
{
}

void sub_1B7CC962C()
{
}

void sub_1B7CC9634()
{
}

void sub_1B7CC963C()
{
}

void sub_1B7CC9644()
{
}

void sub_1B7CC964C()
{
}

void sub_1B7CC9654()
{
}

void sub_1B7CC965C()
{
}

void sub_1B7CC9664()
{
}

void sub_1B7CC966C()
{
}

void sub_1B7CC9674()
{
}

void OZMaterialSubstanceLayer::setUpSubstanceChannelVector(OZMaterialSubstanceLayer *this)
{
  v360 = 0;
  v361 = 0;
  v362[0] = 0;
  PCString v3 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v362, 1uLL);
  uint64_t v4 = (char *)this + 2776;
  uint64_t v5 = &v3[8 * v2];
  *(void *)PCString v3 = (char *)this + 2776;
  uint64_t v6 = v3 + 8;
  PCString v8 = v360;
  PCString v7 = v361;
  char v9 = v3;
  if (v361 != v360)
  {
    do
    {
      uint64_t v10 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v9 - 1) = v10;
      v9 -= 8;
    }
    while (v7 != v8);
    PCString v7 = v360;
  }
  v360 = v9;
  v361 = v3 + 8;
  v362[0] = &v3[8 * v2];
  if (v7)
  {
    operator delete(v7);
    uint64_t v5 = (char *)v362[0];
  }
  v361 = v3 + 8;
  uint64_t v11 = (char *)this + 22176;
  if (v6 >= v5)
  {
    uint64_t v13 = (v6 - v360) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v5 - v360;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v362, v16);
    }
    else {
      long long v17 = 0;
    }
    double v18 = &v17[8 * v13];
    CMTime v19 = &v17[8 * v16];
    *(void *)double v18 = v11;
    uint64_t v12 = v18 + 8;
    CMTimeEpoch v21 = v360;
    PCSharedCount v20 = v361;
    if (v361 != v360)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      PCSharedCount v20 = v360;
    }
    v360 = v18;
    v361 = v12;
    v362[0] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *((void *)v3 + 1) = v11;
    uint64_t v12 = v3 + 16;
  }
  v361 = v12;
  unint64_t v23 = *((void *)this + 2916);
  if (v23 >= *((void *)this + 2917))
  {
    uint64_t v24 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v360);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v360);
    uint64_t v24 = v23 + 24;
  }
  *((void *)this + 2916) = v24;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  CMTime v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v359, 1uLL);
  uint64_t v27 = &v26[8 * v25];
  *(void *)CMTime v26 = v4;
  double v28 = v26 + 8;
  unint64_t v30 = v357;
  double v29 = v358;
  double v31 = v26;
  if (v358 != v357)
  {
    do
    {
      uint64_t v32 = *((void *)v29 - 1);
      v29 -= 8;
      *((void *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v29 != v30);
    double v29 = v357;
  }
  v357 = v31;
  v358 = v26 + 8;
  v359 = &v26[8 * v25];
  if (v29)
  {
    operator delete(v29);
    uint64_t v27 = v359;
  }
  v358 = v26 + 8;
  if (v28 >= v27)
  {
    uint64_t v34 = (v28 - v357) >> 3;
    if ((unint64_t)(v34 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v27 - v357;
    uint64_t v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
      uint64_t v36 = v34 + 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37) {
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v359, v37);
    }
    else {
      uint64_t v38 = 0;
    }
    int v39 = &v38[8 * v34];
    uint64_t v40 = &v38[8 * v37];
    *(void *)int v39 = v11;
    int v33 = v39 + 8;
    uint64_t v42 = v357;
    uint64_t v41 = v358;
    if (v358 != v357)
    {
      do
      {
        uint64_t v43 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v39 - 1) = v43;
        v39 -= 8;
      }
      while (v41 != v42);
      uint64_t v41 = v357;
    }
    v357 = v39;
    v358 = v33;
    v359 = v40;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *((void *)v26 + 1) = v11;
    int v33 = v26 + 16;
  }
  v358 = v33;
  unint64_t v44 = *((void *)this + 2916);
  if (v44 >= *((void *)this + 2917))
  {
    uint64_t v45 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v357);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v357);
    uint64_t v45 = v44 + 24;
  }
  *((void *)this + 2916) = v45;
  CMTime __p = 0;
  v355 = 0;
  v356 = 0;
  uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, 1uLL);
  uint64_t v48 = &v47[8 * v46];
  *(void *)uint64_t v47 = (char *)this + 6944;
  uint64_t v49 = v47 + 8;
  uint64_t v51 = (char *)__p;
  uint64_t v50 = v355;
  double v52 = v47;
  if (v355 != __p)
  {
    do
    {
      uint64_t v53 = *((void *)v50 - 1);
      v50 -= 8;
      *((void *)v52 - 1) = v53;
      v52 -= 8;
    }
    while (v50 != v51);
    uint64_t v50 = (char *)__p;
  }
  CMTime __p = v52;
  v355 = v47 + 8;
  v356 = &v47[8 * v46];
  if (v50)
  {
    operator delete(v50);
    uint64_t v48 = v356;
  }
  v355 = v47 + 8;
  double v54 = (char *)this + 10184;
  if (v49 >= v48)
  {
    uint64_t v56 = (v49 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v57 = v48 - (unsigned char *)__p;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, v59);
    }
    else {
      long long v60 = 0;
    }
    long long v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)long long v61 = v54;
    double v55 = v61 + 8;
    uint64_t v64 = (char *)__p;
    float v63 = v355;
    if (v355 != __p)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      float v63 = (char *)__p;
    }
    CMTime __p = v61;
    v355 = v55;
    v356 = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *((void *)v47 + 1) = v54;
    double v55 = v47 + 16;
  }
  v355 = v55;
  int v66 = (char *)this + 21736;
  if (v55 >= v356)
  {
    uint64_t v68 = (v55 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v68 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v69 = (v356 - (unsigned char *)__p) >> 2;
    if (v69 <= v68 + 1) {
      unint64_t v69 = v68 + 1;
    }
    if ((unint64_t)(v356 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v69;
    }
    if (v70) {
      float v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, v70);
    }
    else {
      float v71 = 0;
    }
    float v72 = &v71[8 * v68];
    float v73 = &v71[8 * v70];
    *(void *)float v72 = v66;
    float v67 = v72 + 8;
    float v75 = (char *)__p;
    uint64_t v74 = v355;
    if (v355 != __p)
    {
      do
      {
        uint64_t v76 = *((void *)v74 - 1);
        v74 -= 8;
        *((void *)v72 - 1) = v76;
        v72 -= 8;
      }
      while (v74 != v75);
      uint64_t v74 = (char *)__p;
    }
    CMTime __p = v72;
    v355 = v67;
    v356 = v73;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    *(void *)double v55 = v66;
    float v67 = v55 + 8;
  }
  v355 = v67;
  unint64_t v77 = *((void *)this + 2916);
  if (v77 >= *((void *)this + 2917))
  {
    uint64_t v78 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&__p);
    uint64_t v78 = v77 + 24;
  }
  *((void *)this + 2916) = v78;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  PCString v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, 1uLL);
  CMTime v81 = &v80[8 * v79];
  *(void *)PCString v80 = (char *)this + 10336;
  uint64_t v82 = v80 + 8;
  int v84 = (char *)v351;
  uint64_t v83 = v352;
  int64x2_t v85 = v80;
  if (v352 != v351)
  {
    do
    {
      uint64_t v86 = *((void *)v83 - 1);
      v83 -= 8;
      *((void *)v85 - 1) = v86;
      v85 -= 8;
    }
    while (v83 != v84);
    uint64_t v83 = (char *)v351;
  }
  v351 = v85;
  v352 = v80 + 8;
  v353 = &v80[8 * v79];
  if (v83)
  {
    operator delete(v83);
    CMTime v81 = v353;
  }
  v352 = v80 + 8;
  signed int v87 = (char *)this + 10592;
  if (v82 >= v81)
  {
    uint64_t v89 = (v82 - (unsigned char *)v351) >> 3;
    if ((unint64_t)(v89 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v90 = v81 - (unsigned char *)v351;
    uint64_t v91 = v90 >> 2;
    if (v90 >> 2 <= (unint64_t)(v89 + 1)) {
      uint64_t v91 = v89 + 1;
    }
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v91;
    }
    if (v92) {
      long long v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v92);
    }
    else {
      long long v93 = 0;
    }
    long long v94 = &v93[8 * v89];
    double v95 = &v93[8 * v92];
    *(void *)long long v94 = v87;
    int v88 = v94 + 8;
    id v97 = (char *)v351;
    long long v96 = v352;
    if (v352 != v351)
    {
      do
      {
        uint64_t v98 = *((void *)v96 - 1);
        v96 -= 8;
        *((void *)v94 - 1) = v98;
        v94 -= 8;
      }
      while (v96 != v97);
      long long v96 = (char *)v351;
    }
    v351 = v94;
    v352 = v88;
    v353 = v95;
    if (v96) {
      operator delete(v96);
    }
  }
  else
  {
    *((void *)v80 + 1) = v87;
    int v88 = v80 + 16;
  }
  v352 = v88;
  long long v99 = (char *)this + 11600;
  if (v88 >= v353)
  {
    uint64_t v101 = (v88 - (unsigned char *)v351) >> 3;
    if ((unint64_t)(v101 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v102 = (v353 - (unsigned char *)v351) >> 2;
    if (v102 <= v101 + 1) {
      unint64_t v102 = v101 + 1;
    }
    if ((unint64_t)(v353 - (unsigned char *)v351) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103) {
      long long v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v103);
    }
    else {
      long long v104 = 0;
    }
    long long v105 = &v104[8 * v101];
    uint64_t v106 = &v104[8 * v103];
    *(void *)long long v105 = v99;
    long long v100 = v105 + 8;
    id v108 = (char *)v351;
    long long v107 = v352;
    if (v352 != v351)
    {
      do
      {
        uint64_t v109 = *((void *)v107 - 1);
        v107 -= 8;
        *((void *)v105 - 1) = v109;
        v105 -= 8;
      }
      while (v107 != v108);
      long long v107 = (char *)v351;
    }
    v351 = v105;
    v352 = v100;
    v353 = v106;
    if (v107) {
      operator delete(v107);
    }
  }
  else
  {
    *(void *)int v88 = v99;
    long long v100 = v88 + 8;
  }
  v352 = v100;
  if (v100 >= v353)
  {
    uint64_t v111 = (v100 - (unsigned char *)v351) >> 3;
    if ((unint64_t)(v111 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v112 = (v353 - (unsigned char *)v351) >> 2;
    if (v112 <= v111 + 1) {
      unint64_t v112 = v111 + 1;
    }
    if ((unint64_t)(v353 - (unsigned char *)v351) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v113 = v112;
    }
    if (v113) {
      long long v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v113);
    }
    else {
      long long v114 = 0;
    }
    uint64_t v115 = &v114[8 * v111];
    long long v116 = &v114[8 * v113];
    *(void *)uint64_t v115 = v11;
    long long v110 = v115 + 8;
    uint64_t v118 = (char *)v351;
    long long v117 = v352;
    if (v352 != v351)
    {
      do
      {
        uint64_t v119 = *((void *)v117 - 1);
        v117 -= 8;
        *((void *)v115 - 1) = v119;
        v115 -= 8;
      }
      while (v117 != v118);
      long long v117 = (char *)v351;
    }
    v351 = v115;
    v352 = v110;
    v353 = v116;
    if (v117) {
      operator delete(v117);
    }
  }
  else
  {
    *(void *)long long v100 = v11;
    long long v110 = v100 + 8;
  }
  v352 = v110;
  unint64_t v120 = *((void *)this + 2916);
  if (v120 >= *((void *)this + 2917))
  {
    uint64_t v121 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v351);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v351);
    uint64_t v121 = v120 + 24;
  }
  *((void *)this + 2916) = v121;
  v348 = 0;
  v349 = 0;
  v350 = 0;
  char v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v350, 1uLL);
  double v124 = &v123[8 * v122];
  *(void *)char v123 = v4;
  uint64_t v125 = v123 + 8;
  int64x2_t v127 = (char *)v348;
  int32x4_t v126 = v349;
  float32x4_t v128 = v123;
  if (v349 != v348)
  {
    do
    {
      uint64_t v129 = *((void *)v126 - 1);
      v126 -= 8;
      *((void *)v128 - 1) = v129;
      v128 -= 8;
    }
    while (v126 != v127);
    int32x4_t v126 = (char *)v348;
  }
  v348 = v128;
  v349 = v123 + 8;
  v350 = &v123[8 * v122];
  if (v126)
  {
    operator delete(v126);
    double v124 = v350;
  }
  v349 = v123 + 8;
  if (v125 >= v124)
  {
    uint64_t v131 = (v125 - (unsigned char *)v348) >> 3;
    if ((unint64_t)(v131 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v132 = v124 - (unsigned char *)v348;
    uint64_t v133 = v132 >> 2;
    if (v132 >> 2 <= (unint64_t)(v131 + 1)) {
      uint64_t v133 = v131 + 1;
    }
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v134 = v133;
    }
    if (v134) {
      long long v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v350, v134);
    }
    else {
      long long v135 = 0;
    }
    long long v136 = &v135[8 * v131];
    float32x4_t v137 = &v135[8 * v134];
    *(void *)long long v136 = v11;
    float32x4_t v130 = v136 + 8;
    int32x4_t v139 = (char *)v348;
    long long v138 = v349;
    if (v349 != v348)
    {
      do
      {
        uint64_t v140 = *((void *)v138 - 1);
        v138 -= 8;
        *((void *)v136 - 1) = v140;
        v136 -= 8;
      }
      while (v138 != v139);
      long long v138 = (char *)v348;
    }
    v348 = v136;
    v349 = v130;
    v350 = v137;
    if (v138) {
      operator delete(v138);
    }
  }
  else
  {
    *((void *)v123 + 1) = v11;
    float32x4_t v130 = v123 + 16;
  }
  v349 = v130;
  unint64_t v141 = *((void *)this + 2916);
  if (v141 >= *((void *)this + 2917))
  {
    uint64_t v142 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v348);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v348);
    uint64_t v142 = v141 + 24;
  }
  *((void *)this + 2916) = v142;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  long long v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, 1uLL);
  int32x4_t v145 = &v144[8 * v143];
  *(void *)long long v144 = v4;
  int32x4_t v146 = v144 + 8;
  long long v148 = (char *)v345;
  long long v147 = v346;
  long long v149 = v144;
  if (v346 != v345)
  {
    do
    {
      uint64_t v150 = *((void *)v147 - 1);
      v147 -= 8;
      *((void *)v149 - 1) = v150;
      v149 -= 8;
    }
    while (v147 != v148);
    long long v147 = (char *)v345;
  }
  v345 = v149;
  v346 = v144 + 8;
  v347 = &v144[8 * v143];
  if (v147)
  {
    operator delete(v147);
    int32x4_t v145 = v347;
  }
  v346 = v144 + 8;
  if (v146 >= v145)
  {
    uint64_t v152 = (v146 - (unsigned char *)v345) >> 3;
    if ((unint64_t)(v152 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v153 = v145 - (unsigned char *)v345;
    uint64_t v154 = v153 >> 2;
    if (v153 >> 2 <= (unint64_t)(v152 + 1)) {
      uint64_t v154 = v152 + 1;
    }
    if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v155 = v154;
    }
    if (v155) {
      float32x4_t v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v155);
    }
    else {
      float32x4_t v156 = 0;
    }
    float32x4_t v157 = &v156[8 * v152];
    simd_float4x4 v158 = &v156[8 * v155];
    *(void *)float32x4_t v157 = v11;
    long long v151 = v157 + 8;
    float32x4_t v160 = (char *)v345;
    float32x4_t v159 = v346;
    if (v346 != v345)
    {
      do
      {
        uint64_t v161 = *((void *)v159 - 1);
        v159 -= 8;
        *((void *)v157 - 1) = v161;
        v157 -= 8;
      }
      while (v159 != v160);
      float32x4_t v159 = (char *)v345;
    }
    v345 = v157;
    v346 = v151;
    v347 = v158;
    if (v159) {
      operator delete(v159);
    }
  }
  else
  {
    *((void *)v144 + 1) = v11;
    long long v151 = v144 + 16;
  }
  v346 = v151;
  unint64_t v162 = *((void *)this + 2916);
  if (v162 >= *((void *)this + 2917))
  {
    uint64_t v163 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v345);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v345);
    uint64_t v163 = v162 + 24;
  }
  *((void *)this + 2916) = v163;
  v342 = 0;
  v343 = 0;
  v344 = 0;
  long long v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, 1uLL);
  long long v166 = &v165[8 * v164];
  *(void *)long long v165 = v87;
  long long v167 = v165 + 8;
  v169 = (char *)v342;
  long long v168 = v343;
  v170 = v165;
  if (v343 != v342)
  {
    do
    {
      uint64_t v171 = *((void *)v168 - 1);
      v168 -= 8;
      *((void *)v170 - 1) = v171;
      v170 -= 8;
    }
    while (v168 != v169);
    long long v168 = (char *)v342;
  }
  v342 = v170;
  v343 = v165 + 8;
  v344 = &v165[8 * v164];
  if (v168)
  {
    operator delete(v168);
    long long v166 = v344;
  }
  v343 = v165 + 8;
  if (v167 >= v166)
  {
    uint64_t v173 = (v167 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v173 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v174 = v166 - (unsigned char *)v342;
    uint64_t v175 = v174 >> 2;
    if (v174 >> 2 <= (unint64_t)(v173 + 1)) {
      uint64_t v175 = v173 + 1;
    }
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v176 = v175;
    }
    if (v176) {
      long long v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v176);
    }
    else {
      long long v177 = 0;
    }
    long long v178 = &v177[8 * v173];
    long long v179 = &v177[8 * v176];
    *(void *)long long v178 = v99;
    int32x4_t v172 = v178 + 8;
    v181 = (char *)v342;
    long long v180 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v182 = *((void *)v180 - 1);
        v180 -= 8;
        *((void *)v178 - 1) = v182;
        v178 -= 8;
      }
      while (v180 != v181);
      long long v180 = (char *)v342;
    }
    v342 = v178;
    v343 = v172;
    v344 = v179;
    if (v180) {
      operator delete(v180);
    }
  }
  else
  {
    *((void *)v165 + 1) = v99;
    int32x4_t v172 = v165 + 16;
  }
  v343 = v172;
  v183 = (char *)this + 14840;
  if (v172 >= v344)
  {
    uint64_t v185 = (v172 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v185 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v186 = (v344 - (unsigned char *)v342) >> 2;
    if (v186 <= v185 + 1) {
      unint64_t v186 = v185 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v187 = v186;
    }
    if (v187) {
      float32x4_t v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v187);
    }
    else {
      float32x4_t v188 = 0;
    }
    float32x4_t v189 = &v188[8 * v185];
    float32x4_t v190 = &v188[8 * v187];
    *(void *)float32x4_t v189 = v183;
    char v184 = v189 + 8;
    v192 = (char *)v342;
    float32x4_t v191 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v193 = *((void *)v191 - 1);
        v191 -= 8;
        *((void *)v189 - 1) = v193;
        v189 -= 8;
      }
      while (v191 != v192);
      float32x4_t v191 = (char *)v342;
    }
    v342 = v189;
    v343 = v184;
    v344 = v190;
    if (v191) {
      operator delete(v191);
    }
  }
  else
  {
    *(void *)int32x4_t v172 = v183;
    char v184 = v172 + 8;
  }
  v343 = v184;
  long long v194 = (char *)this + 6688;
  if (v184 >= v344)
  {
    uint64_t v196 = (v184 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v196 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v197 = (v344 - (unsigned char *)v342) >> 2;
    if (v197 <= v196 + 1) {
      unint64_t v197 = v196 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v198 = v197;
    }
    if (v198) {
      v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v198);
    }
    else {
      v199 = 0;
    }
    char v200 = &v199[8 * v196];
    long long v201 = &v199[8 * v198];
    *(void *)char v200 = v194;
    long long v195 = v200 + 8;
    long long v203 = (char *)v342;
    long long v202 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v204 = *((void *)v202 - 1);
        v202 -= 8;
        *((void *)v200 - 1) = v204;
        v200 -= 8;
      }
      while (v202 != v203);
      long long v202 = (char *)v342;
    }
    v342 = v200;
    v343 = v195;
    v344 = v201;
    if (v202) {
      operator delete(v202);
    }
  }
  else
  {
    *(void *)char v184 = v194;
    long long v195 = v184 + 8;
  }
  v343 = v195;
  v205 = (char *)this + 22480;
  if (v195 >= v344)
  {
    uint64_t v207 = (v195 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v207 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v208 = (v344 - (unsigned char *)v342) >> 2;
    if (v208 <= v207 + 1) {
      unint64_t v208 = v207 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v209 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v209 = v208;
    }
    if (v209) {
      v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v209);
    }
    else {
      v210 = 0;
    }
    v211 = &v210[8 * v207];
    v212 = &v210[8 * v209];
    *(void *)v211 = v205;
    v206 = v211 + 8;
    v214 = (char *)v342;
    v213 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v215 = *((void *)v213 - 1);
        v213 -= 8;
        *((void *)v211 - 1) = v215;
        v211 -= 8;
      }
      while (v213 != v214);
      v213 = (char *)v342;
    }
    v342 = v211;
    v343 = v206;
    v344 = v212;
    if (v213) {
      operator delete(v213);
    }
  }
  else
  {
    *(void *)long long v195 = v205;
    v206 = v195 + 8;
  }
  v343 = v206;
  v216 = (char *)this + 22632;
  if (v206 >= v344)
  {
    uint64_t v218 = (v206 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v218 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v219 = (v344 - (unsigned char *)v342) >> 2;
    if (v219 <= v218 + 1) {
      unint64_t v219 = v218 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v220 = v219;
    }
    if (v220) {
      v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v220);
    }
    else {
      v221 = 0;
    }
    v222 = &v221[8 * v218];
    v223 = &v221[8 * v220];
    *(void *)v222 = v216;
    v217 = v222 + 8;
    v225 = (char *)v342;
    v224 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v226 = *((void *)v224 - 1);
        v224 -= 8;
        *((void *)v222 - 1) = v226;
        v222 -= 8;
      }
      while (v224 != v225);
      v224 = (char *)v342;
    }
    v342 = v222;
    v343 = v217;
    v344 = v223;
    if (v224) {
      operator delete(v224);
    }
  }
  else
  {
    *(void *)v206 = v216;
    v217 = v206 + 8;
  }
  v343 = v217;
  v227 = (char *)this + 22328;
  if (v217 >= v344)
  {
    uint64_t v229 = (v217 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v229 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v230 = (v344 - (unsigned char *)v342) >> 2;
    if (v230 <= v229 + 1) {
      unint64_t v230 = v229 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v231 = v230;
    }
    if (v231) {
      v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v231);
    }
    else {
      v232 = 0;
    }
    v233 = &v232[8 * v229];
    v234 = &v232[8 * v231];
    *(void *)v233 = v227;
    v228 = v233 + 8;
    v236 = (char *)v342;
    v235 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v237 = *((void *)v235 - 1);
        v235 -= 8;
        *((void *)v233 - 1) = v237;
        v233 -= 8;
      }
      while (v235 != v236);
      v235 = (char *)v342;
    }
    v342 = v233;
    v343 = v228;
    v344 = v234;
    if (v235) {
      operator delete(v235);
    }
  }
  else
  {
    *(void *)v217 = v227;
    v228 = v217 + 8;
  }
  v343 = v228;
  v238 = (char *)this + 22760;
  if (v228 >= v344)
  {
    uint64_t v240 = (v228 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v240 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v241 = (v344 - (unsigned char *)v342) >> 2;
    if (v241 <= v240 + 1) {
      unint64_t v241 = v240 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v242 = v241;
    }
    if (v242) {
      v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v242);
    }
    else {
      v243 = 0;
    }
    v244 = &v243[8 * v240];
    v245 = &v243[8 * v242];
    *(void *)v244 = v238;
    v239 = v244 + 8;
    v247 = (char *)v342;
    v246 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v248 = *((void *)v246 - 1);
        v246 -= 8;
        *((void *)v244 - 1) = v248;
        v244 -= 8;
      }
      while (v246 != v247);
      v246 = (char *)v342;
    }
    v342 = v244;
    v343 = v239;
    v344 = v245;
    if (v246) {
      operator delete(v246);
    }
  }
  else
  {
    *(void *)v228 = v238;
    v239 = v228 + 8;
  }
  v343 = v239;
  v249 = (char *)this + 22912;
  if (v239 >= v344)
  {
    uint64_t v251 = (v239 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v251 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v252 = (v344 - (unsigned char *)v342) >> 2;
    if (v252 <= v251 + 1) {
      unint64_t v252 = v251 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v253 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v253 = v252;
    }
    if (v253) {
      v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v253);
    }
    else {
      v254 = 0;
    }
    v255 = &v254[8 * v251];
    v256 = &v254[8 * v253];
    *(void *)v255 = v249;
    v250 = v255 + 8;
    v258 = (char *)v342;
    v257 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v259 = *((void *)v257 - 1);
        v257 -= 8;
        *((void *)v255 - 1) = v259;
        v255 -= 8;
      }
      while (v257 != v258);
      v257 = (char *)v342;
    }
    v342 = v255;
    v343 = v250;
    v344 = v256;
    if (v257) {
      operator delete(v257);
    }
  }
  else
  {
    *(void *)v239 = v249;
    v250 = v239 + 8;
  }
  v343 = v250;
  v260 = (char *)this + 23064;
  if (v250 >= v344)
  {
    uint64_t v262 = (v250 - (unsigned char *)v342) >> 3;
    if ((unint64_t)(v262 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v263 = (v344 - (unsigned char *)v342) >> 2;
    if (v263 <= v262 + 1) {
      unint64_t v263 = v262 + 1;
    }
    if ((unint64_t)(v344 - (unsigned char *)v342) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v264 = v263;
    }
    if (v264) {
      v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v264);
    }
    else {
      v265 = 0;
    }
    v266 = &v265[8 * v262];
    v267 = &v265[8 * v264];
    *(void *)v266 = v260;
    v261 = v266 + 8;
    v269 = (char *)v342;
    v268 = v343;
    if (v343 != v342)
    {
      do
      {
        uint64_t v270 = *((void *)v268 - 1);
        v268 -= 8;
        *((void *)v266 - 1) = v270;
        v266 -= 8;
      }
      while (v268 != v269);
      v268 = (char *)v342;
    }
    v342 = v266;
    v343 = v261;
    v344 = v267;
    if (v268) {
      operator delete(v268);
    }
  }
  else
  {
    *(void *)v250 = v260;
    v261 = v250 + 8;
  }
  v343 = v261;
  unint64_t v271 = *((void *)this + 2916);
  if (v271 >= *((void *)this + 2917))
  {
    unint64_t v272 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v342);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v342);
    unint64_t v272 = v271 + 24;
  }
  *((void *)this + 2916) = v272;
  v339 = 0;
  v340 = 0;
  uint64_t v341 = 0;
  if (v272 >= *((void *)this + 2917))
  {
    uint64_t v273 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v339);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v339);
    uint64_t v273 = v272 + 24;
  }
  *((void *)this + 2916) = v273;
  v336 = 0;
  v337 = 0;
  v338 = 0;
  v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, 1uLL);
  v276 = &v275[8 * v274];
  *(void *)v275 = v87;
  v277 = v275 + 8;
  v279 = (char *)v336;
  v278 = v337;
  v280 = v275;
  if (v337 != v336)
  {
    do
    {
      uint64_t v281 = *((void *)v278 - 1);
      v278 -= 8;
      *((void *)v280 - 1) = v281;
      v280 -= 8;
    }
    while (v278 != v279);
    v278 = (char *)v336;
  }
  v336 = v280;
  v337 = v275 + 8;
  v338 = &v275[8 * v274];
  if (v278)
  {
    operator delete(v278);
    v276 = v338;
  }
  v337 = v275 + 8;
  if (v277 >= v276)
  {
    uint64_t v283 = (v277 - (unsigned char *)v336) >> 3;
    if ((unint64_t)(v283 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v284 = v276 - (unsigned char *)v336;
    uint64_t v285 = v284 >> 2;
    if (v284 >> 2 <= (unint64_t)(v283 + 1)) {
      uint64_t v285 = v283 + 1;
    }
    if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v286 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v286 = v285;
    }
    if (v286) {
      v287 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v286);
    }
    else {
      v287 = 0;
    }
    v288 = &v287[8 * v283];
    v289 = &v287[8 * v286];
    *(void *)v288 = v99;
    v282 = v288 + 8;
    v291 = (char *)v336;
    v290 = v337;
    if (v337 != v336)
    {
      do
      {
        uint64_t v292 = *((void *)v290 - 1);
        v290 -= 8;
        *((void *)v288 - 1) = v292;
        v288 -= 8;
      }
      while (v290 != v291);
      v290 = (char *)v336;
    }
    v336 = v288;
    v337 = v282;
    v338 = v289;
    if (v290) {
      operator delete(v290);
    }
  }
  else
  {
    *((void *)v275 + 1) = v99;
    v282 = v275 + 16;
  }
  v337 = v282;
  if (v282 >= v338)
  {
    uint64_t v294 = (v282 - (unsigned char *)v336) >> 3;
    if ((unint64_t)(v294 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v295 = (v338 - (unsigned char *)v336) >> 2;
    if (v295 <= v294 + 1) {
      unint64_t v295 = v294 + 1;
    }
    if ((unint64_t)(v338 - (unsigned char *)v336) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v296 = v295;
    }
    if (v296) {
      v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v296);
    }
    else {
      v297 = 0;
    }
    v298 = &v297[8 * v294];
    v299 = &v297[8 * v296];
    *(void *)v298 = v194;
    v293 = v298 + 8;
    v301 = (char *)v336;
    v300 = v337;
    if (v337 != v336)
    {
      do
      {
        uint64_t v302 = *((void *)v300 - 1);
        v300 -= 8;
        *((void *)v298 - 1) = v302;
        v298 -= 8;
      }
      while (v300 != v301);
      v300 = (char *)v336;
    }
    v336 = v298;
    v337 = v293;
    v338 = v299;
    if (v300) {
      operator delete(v300);
    }
  }
  else
  {
    *(void *)v282 = v194;
    v293 = v282 + 8;
  }
  v337 = v293;
  if (v293 >= v338)
  {
    uint64_t v304 = (v293 - (unsigned char *)v336) >> 3;
    if ((unint64_t)(v304 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v305 = (v338 - (unsigned char *)v336) >> 2;
    if (v305 <= v304 + 1) {
      unint64_t v305 = v304 + 1;
    }
    if ((unint64_t)(v338 - (unsigned char *)v336) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v306 = v305;
    }
    if (v306) {
      v307 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v306);
    }
    else {
      v307 = 0;
    }
    v308 = &v307[8 * v304];
    v309 = &v307[8 * v306];
    *(void *)v308 = v183;
    v303 = v308 + 8;
    v311 = (char *)v336;
    v310 = v337;
    if (v337 != v336)
    {
      do
      {
        uint64_t v312 = *((void *)v310 - 1);
        v310 -= 8;
        *((void *)v308 - 1) = v312;
        v308 -= 8;
      }
      while (v310 != v311);
      v310 = (char *)v336;
    }
    v336 = v308;
    v337 = v303;
    v338 = v309;
    if (v310) {
      operator delete(v310);
    }
  }
  else
  {
    *(void *)v293 = v183;
    v303 = v293 + 8;
  }
  v337 = v303;
  v313 = (char *)this + 21296;
  if (v303 >= v338)
  {
    uint64_t v315 = (v303 - (unsigned char *)v336) >> 3;
    if ((unint64_t)(v315 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v316 = (v338 - (unsigned char *)v336) >> 2;
    if (v316 <= v315 + 1) {
      unint64_t v316 = v315 + 1;
    }
    if ((unint64_t)(v338 - (unsigned char *)v336) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v317 = v316;
    }
    if (v317) {
      v318 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v317);
    }
    else {
      v318 = 0;
    }
    v319 = &v318[8 * v315];
    v320 = &v318[8 * v317];
    *(void *)v319 = v313;
    v314 = v319 + 8;
    v322 = (char *)v336;
    v321 = v337;
    if (v337 != v336)
    {
      do
      {
        uint64_t v323 = *((void *)v321 - 1);
        v321 -= 8;
        *((void *)v319 - 1) = v323;
        v319 -= 8;
      }
      while (v321 != v322);
      v321 = (char *)v336;
    }
    v336 = v319;
    v337 = v314;
    v338 = v320;
    if (v321) {
      operator delete(v321);
    }
  }
  else
  {
    *(void *)v303 = v313;
    v314 = v303 + 8;
  }
  v337 = v314;
  if (v314 >= v338)
  {
    uint64_t v325 = (v314 - (unsigned char *)v336) >> 3;
    if ((unint64_t)(v325 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v326 = (v338 - (unsigned char *)v336) >> 2;
    if (v326 <= v325 + 1) {
      unint64_t v326 = v325 + 1;
    }
    if ((unint64_t)(v338 - (unsigned char *)v336) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v327 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v327 = v326;
    }
    if (v327) {
      v328 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v327);
    }
    else {
      v328 = 0;
    }
    v329 = &v328[8 * v325];
    v330 = &v328[8 * v327];
    *(void *)v329 = v205;
    v324 = v329 + 8;
    v332 = (char *)v336;
    v331 = v337;
    if (v337 != v336)
    {
      do
      {
        uint64_t v333 = *((void *)v331 - 1);
        v331 -= 8;
        *((void *)v329 - 1) = v333;
        v329 -= 8;
      }
      while (v331 != v332);
      v331 = (char *)v336;
    }
    v336 = v329;
    v337 = v324;
    v338 = v330;
    if (v331) {
      operator delete(v331);
    }
  }
  else
  {
    *(void *)v314 = v205;
    v324 = v314 + 8;
  }
  v337 = v324;
  unint64_t v334 = *((void *)this + 2916);
  if (v334 >= *((void *)this + 2917))
  {
    uint64_t v335 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v336);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v336);
    uint64_t v335 = v334 + 24;
  }
  *((void *)this + 2916) = v335;
  if (v336)
  {
    v337 = (char *)v336;
    operator delete(v336);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = (char *)v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = (char *)v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = (char *)v348;
    operator delete(v348);
  }
  if (v351)
  {
    v352 = (char *)v351;
    operator delete(v351);
  }
  if (__p)
  {
    v355 = (char *)__p;
    operator delete(__p);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  if (v360)
  {
    v361 = v360;
    operator delete(v360);
  }
}

void sub_1B7CCACCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  unint64_t v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  double v31 = *(void **)(v28 - 112);
  if (v31)
  {
    *(void *)(v28 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7CCAE0C()
{
}

void sub_1B7CCAE18()
{
}

void OZMaterialSubstanceLayer::clone(OZMaterialSubstanceLayer *this)
{
}

void sub_1B7CCAE74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialSubstanceLayer::fixupImageChannelsOffsetChannel(OZMaterialSubstanceLayer *this, OZLayeredMaterial *a2)
{
  return OZChannelMaterialLayerMap::setImageChannelOffsetChannel((OZMaterialSubstanceLayer *)((char *)this + 14840), a2);
}

uint64_t OZMaterialSubstanceLayer::parseEnd(OZMaterialSubstanceLayer *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = (_DWORD *)((char *)this + 23344);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 392), 2))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), MEMORY[0x1E4F1FA48], 0.0);
    if (ValueAsInt == 6)
    {
      double v6 = 8.0;
    }
    else
    {
      if (ValueAsInt != 7) {
        goto LABEL_7;
      }
      double v6 = 6.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 136), MEMORY[0x1E4F1FA48], v6, 0);
  }
LABEL_7:
  uint64_t v7 = OZMaterialLayerBase::parseEnd(this, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10336), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 131076);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 16168), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20584), 2, 0);
  int v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  v4[1] = v8;
  if (v8 == 2)
  {
    int v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), MEMORY[0x1E4F1FA48], 0.0);
    *uint64_t v4 = v9;
    int v10 = OZChannelEnum::getNumberOfStrings((OZMaterialSubstanceLayer *)((char *)this + 936)) - 1;
    uint64_t v11 = (OZChannelBase *)((char *)this + 6944);
    if (v9 == v10) {
      OZChannelBase::resetFlag(v11, 0x400000, 0);
    }
    else {
      OZChannelBase::setFlag(v11, 0x400000, 0);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::parseEnd(OZMaterialSubstanceLayer *this, PCSerializerReadStream *a2)
{
  return OZMaterialSubstanceLayer::parseEnd((OZMaterialSubstanceLayer *)((char *)this - 16), a2);
}

void OZMaterialSubstanceLayer::makeMaterialLayerSequenceChannelFolder(OZMaterialSubstanceLayer *this)
{
}

void sub_1B7CCB06C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

BOOL OZMaterialSubstanceLayer::blocksMaterialsBelow(OZMaterialSubstanceLayer *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  return ValueAsInt != 8 && (ValueAsInt & 0xFFFFFFFB) != 2;
}

uint64_t OZMaterialSubstanceLayer::getLayerDescriptions(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt > 8) {
    PCString v3 = 0;
  }
  else {
    PCString v3 = off_1E616DEF0[ValueAsInt];
  }
  uint64_t v4 = (void *)OZGetSubstanceLayerDictionary();

  return [v4 objectForKey:v3];
}

void OZMaterialSubstanceLayer::getBumpGain(uint64_t a1, void *a2, const CMTime *a3)
{
  uint64_t v5 = (void *)[a2 objectForKey:@"bump gain"];
  if (v5)
  {
    [v5 doubleValue];
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22176), a3, 0.0);
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22176), a3, 0.0);
  }
}

uint64_t OZMaterialSubstanceLayer::getGradientChannel(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  return (uint64_t)this + 6944;
}

uint64_t OZMaterialSubstanceLayer::getMetalShinyPercentChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 10184;
}

double OZMaterialSubstanceLayer::getSpecularIntensity(OZMaterialSubstanceLayer *this, NSDictionary *a2, const CMTime *a3)
{
  if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0) & 0xFFFFFFFD) == 0) {
    return 1.0;
  }

  return OZMaterialCompoundLayer::getSpecularIntensity(this, a2, a3);
}

double OZMaterialSubstanceLayer::getSpecularShininess(OZMaterialSubstanceLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 0.5;
}

uint64_t OZMaterialSubstanceLayer::getColorChannel(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  return (uint64_t)this + 10592;
}

void OZMaterialSubstanceLayer::appendMetalAbsorbLayer()
{
}

void sub_1B7CCB57C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialSubstanceLayer::appendLayersToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 648), MEMORY[0x1E4F1FA48], 0.0);
  switch(ValueAsInt)
  {
    case 8:
      AppendDiffuseLayerToLayeredMaterial(a1 + 6680);
    case 6:
      AppendFlatLayerToLayeredMaterial(a1 + 6680, a2);
    case 2:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 1272))(&v6, a1, a2);
      PCSharedCount::~PCSharedCount(&v7);
      break;
  }
  return OZMaterialCompoundLayer::appendLayersToLayeredMaterial(a1, a2);
}

void OZMaterialSubstanceLayer::appendDiffuseLayer(PCSharedCount *a1@<X8>)
{
  a1->CMTime var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void OZMaterialSubstanceLayer::appendSpecularLayer(uint64_t a1, LiLayeredMaterial **a2, const CMTime *a3, void *a4)
{
  OZMaterialCompoundLayer::appendSpecularLayer((OZMaterialCompoundLayer *)a1, (uint64_t)a2, a3, a4);
  if (!*a2) {
    throw_PCNullPointerException(1);
  }
  LiLayeredMaterial::getTopLayer(*a2, (PCSharedCount *)&lpsrc);
  if (lpsrc
  {
    OZChannel::getValueAsInt((OZChannel *)(a1 + 648), MEMORY[0x1E4F1FA48], 0.0);
  }
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B7CCB7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZMaterialSubstanceLayer::hideAllParameters(OZChannelBase *this)
{
  uint64_t v1 = *(OZChannelBase ****)&this[208].var3;
  CMTime var0 = this[208].var4.var0;
  if (v1 != (OZChannelBase ***)var0)
  {
    PCString v3 = this;
    do
    {
      uint64_t v4 = *v1;
      if (*v1 != v1[1])
      {
        do
        {
          uint64_t v5 = *v4++;
          this = showHideParam(v5, 0);
        }
        while (v4 != v1[1]);
        CMTime var0 = v3[208].var4.var0;
      }
      v1 += 3;
    }
    while (v1 != (OZChannelBase ***)var0);
  }
  return this;
}

OZChannelBase *OZMaterialSubstanceLayer::showParametersForSubstance(OZChannelBase *result, unsigned int a2)
{
  uint64_t v2 = *(void *)&result[208].var3;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)result[208].var4.var0 - v2) >> 3) > a2)
  {
    uint64_t v4 = v2 + 24 * a2;
    uint64_t v5 = *(OZChannelBase ***)v4;
    if (*(void *)v4 != *(void *)(v4 + 8))
    {
      uint64_t v6 = result;
      do
      {
        PCSharedCount v7 = *v5++;
        __n128 result = showHideParam(v7, 1);
      }
      while (v5 != *(OZChannelBase ***)(*(void *)&v6[208].var3 + 24 * a2 + 8));
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t result = OZMaterialLayerBase::resetToDefault(this, a2);
  *((_DWORD *)this + 5836) = -1;
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::channelValueWillBeSet(OZChannelBase *this, OZChannelFolder *a2, const CMTime *a3, double a4)
{
  uint64_t result = OZMaterialLayerBase::channelValueWillBeSet(this, a2, a3, a4);
  p_var11 = (OZChannel *)&this[5].var11;
  if (&this[8].var5 == (PCString **)a2)
  {
    uint64_t result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)&this[5].var11, MEMORY[0x1E4F1FA48], 0.0);
    if (p_var11 != (OZChannel *)a2)
    {
      if (result != 2) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else if (p_var11 != (OZChannel *)a2)
  {
    return result;
  }
  OZChannel::getValueAsInt((OZChannel *)&this[8].var5, a3, 0.0);
LABEL_8:
  OZChannelBase::willBeModified(this + 62, 1);
  int v9 = (void *)[(id)OZGetSubstanceLayerDictionary() objectForKey:@"Metal"];

  return (OZChannelBase *)[v9 count];
}

OZChannelBase *OZMaterialSubstanceLayer::updateMetalUI(OZMaterialSubstanceLayer *this, int a2)
{
  int v4 = OZChannelEnum::getNumberOfStrings((OZMaterialSubstanceLayer *)((char *)this + 936)) - 1;
  uint64_t v5 = (OZChannelBase *)((char *)this + 6944);
  if (v4 == a2) {
    uint64_t result = OZChannelBase::resetFlag(v5, 0x400000, 0);
  }
  else {
    uint64_t result = OZChannelBase::setFlag(v5, 0x400000, 0);
  }
  if (*((_DWORD *)this + 5836) != a2)
  {
    PCSharedCount v7 = (OZChannelBase *)((char *)this + 6944);
    if (a2 == 9)
    {
      OZChannelBase::resetFlag(v7, 0x400000, 0);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10184), 0x400000, 0);
    }
    else
    {
      OZChannelBase::setFlag(v7, 0x400000, 0);
    }
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9928), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9672), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8000), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8704), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7744), 0x400000, 0);
    uint64_t result = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7200), 2, 0);
    *((_DWORD *)this + 5836) = a2;
  }
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::updatePlasticUI(uint64_t a1, int a2)
{
  BOOL v3 = a2 != 0;
  showHideParam((OZChannelBase *)(a1 + 10592), a2 == 0);
  showHideParam((OZChannelBase *)(a1 + 11600), v3);
  BOOL v4 = OZChannel::getValueAsInt((OZChannel *)(a1 + 936), MEMORY[0x1E4F1FA48], 0.0) == 2;
  showHideParam((OZChannelBase *)(a1 + 2776), v4);

  return showHideParam((OZChannelBase *)(a1 + 22176), v4);
}

uint64_t OZMaterialSubstanceLayer::getDefaultSublayerType(OZMaterialSubstanceLayer *this, int a2)
{
  if (a2 == 4) {
    return 9;
  }
  else {
    return OZMaterialLayerBase::getDefaultSublayerType(this);
  }
}

void OZMaterialSubstanceLayer::layerUIParameterChanged(OZMaterialSubstanceLayer *this)
{
  OZMaterialLayerBase::layerUIParameterChanged(this);

  OZMaterialSubstanceLayer::updateUI(this);
}

void OZMaterialSubstanceLayer::updateUI(OZMaterialSubstanceLayer *this)
{
  uint64_t v2 = (const CMTime *)MEMORY[0x1E4F1FA48];
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  int v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), v2, 0.0);
  OZMaterialSubstanceLayer::hideAllParameters((OZChannelBase *)this);
  OZMaterialSubstanceLayer::showParametersForSubstance((OZChannelBase *)this, ValueAsInt);
  if (ValueAsInt == 4)
  {
    PCURL::PCURL((PCURL *)&v6, @"Material Stone Bump Gain");
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
LABEL_7:
    PCString::~PCString(&v6);
    goto LABEL_15;
  }
  if (ValueAsInt == 2)
  {
    OZMaterialSubstanceLayer::updateMetalUI(this, v4);
LABEL_4:
    PCURL::PCURL((PCURL *)&v6, @"Wood Bump Gain");
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    PCString::~PCString(&v6);
    goto LABEL_15;
  }
  showHideParam((OZChannelBase *)this + 62, 0);
  if (!ValueAsInt)
  {
    PCURL::PCURL((PCURL *)&v6, @"Material Concrete Bump Gain");
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    goto LABEL_7;
  }
  if (ValueAsInt != 3)
  {
    if (ValueAsInt != 1) {
      goto LABEL_4;
    }
    PCURL::PCURL((PCURL *)&v6, @"Material Fabric Bump Gain");
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    goto LABEL_7;
  }
  PCURL::PCURL((PCURL *)&v6, @"Material Plastic Bump Gain");
  OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
  PCString::~PCString(&v6);
  int v5 = OZChannel::getValueAsInt((OZChannel *)this + 68, MEMORY[0x1E4F1FA48], 0.0);
  OZMaterialSubstanceLayer::updatePlasticUI((uint64_t)this, v5);
LABEL_15:
  *((_DWORD *)this + 5837) = ValueAsInt;
}

void sub_1B7CCBE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

__CFString *OZMaterialSubstanceLayer::getLayerTypes(OZMaterialSubstanceLayer *this)
{
  PCURL::PCURL((PCURL *)&v3, @"Material Substance Selection Enum");
  uint64_t v1 = PCString::cf_str(&v3);
  PCString::~PCString(&v3);
  return v1;
}

void sub_1B7CCBEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

__CFString *OZMaterialSubstanceLayer::getLayerSubTypes(OZMaterialSubstanceLayer *this)
{
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      PCURL::PCURL((PCURL *)&v4, @"Material Concrete Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 1u:
      PCURL::PCURL((PCURL *)&v4, @"Material Fabric Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 2u:
      PCURL::PCURL((PCURL *)&v4, @"Material Metal Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 3u:
      PCURL::PCURL((PCURL *)&v4, @"Material Plastic Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 4u:
      PCURL::PCURL((PCURL *)&v4, @"Material Stone Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 5u:
      PCURL::PCURL((PCURL *)&v4, @"Material Wood Selection Enum");
      uint64_t v1 = PCString::cf_str(&v4);
LABEL_9:
      uint64_t v2 = v1;
      PCString::~PCString(&v4);
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

void sub_1B7CCC04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZMaterialSubstanceLayer::getLayerSubTypeImageNames(OZMaterialSubstanceLayer *this@<X0>, PCString *a2@<X8>)
{
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      PCString v3 = "Aged_concrete;Brown_concrete;Brushed_concrete;Colored_concrete;Concrete_panels;Grunge_concrete;Sidewalk;Smooth_concrete";
      goto LABEL_11;
    case 1u:
      PCString v3 = "Blue_Knit;Denim;Jacquard;Leather_orange;Leather_red;Leather_yellow;Plaid;Polka_Dot;Shetland_Wool;Sisal;Stripe"
           "d_Linen;Suede;Tweed;Wool";
      goto LABEL_11;
    case 2u:
      PCString v3 = "Aluminum;Brass;Chrome;Copper;Gold;Nickel;Silver;Steel;-;-";
      goto LABEL_11;
    case 3u:
      PCString v3 = "Shiny Plastic;Matte Plastic;Textured Plastic";
      goto LABEL_11;
    case 4u:
      PCString v3 = "Dark_Granite;Gray_Granite;Limestone;Pink_Granite;Quartz;Red_Granite;Red_Rock;Sandstone;Slate;Travertine;White"
           "_Marble;Yellow_Rock";
      goto LABEL_11;
    case 5u:
      PCString v3 = "Ash;Bamboo;Birdseye_Maple;Burned_Wood;Cedar_Shingles;Old_Planks;Old_Wood;Pine;Redwood;Rosewood;Walnut;Zebrano";
LABEL_11:
      PCString::PCString(a2, v3);
      break;
    default:
      PCSharedCount::PCSharedCount((PCSharedCount *)a2);
      break;
  }
}

BOOL OZMaterialSubstanceLayer::anyGradientChannels(OZMaterialSubstanceLayer *this)
{
  uint64_t v2 = (OZChannel *)((char *)this + 648);
  PCString v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  int v5 = OZChannel::getValueAsInt(v2, v3, 0.0);
  int v6 = OZChannel::getValueAsInt(v2, v3, 0.0);
  if (ValueAsInt == 3)
  {
    uint64_t v7 = 10336;
  }
  else
  {
    if (v5 != 8 && v6 != 6) {
      return 0;
    }
    uint64_t v7 = 6688;
  }
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + v7), MEMORY[0x1E4F1FA48], 0.0) == 1;
}

uint64_t OZMaterialSubstanceLayer::getGradientChannels(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
  if (result) {
    OZChannelBase::getRef((OZChannelBase *)(a1 + 11600), 0);
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::getColorChannelForHUD(OZMaterialSubstanceLayer *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt == 8 || ValueAsInt == 6)
  {
    uint64_t v4 = 6688;
  }
  else
  {
    if (ValueAsInt != 3) {
      return 0;
    }
    uint64_t v4 = 10336;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + v4), MEMORY[0x1E4F1FA48], 0.0)) {
    return 0;
  }
  return (uint64_t)this + 10592;
}

BOOL OZMaterialSubstanceLayer::isAnySharedTransformEnabled(OZMaterialSubstanceLayer *this)
{
  if (OZMaterialCompoundLayer::isAnySharedTransformEnabled(this)) {
    return 1;
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E4F1FA48], 0.0);
  BOOL v4 = ValueAsInt == 8 || ValueAsInt == 6;
  return v4
      && OZChannel::getValueAsInt((OZChannel *)this + 44, MEMORY[0x1E4F1FA48], 0.0) == 2
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 16808), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

OZChannelBase *OZMaterialSubstanceLayer::updateLocalTransformVisibility(OZMaterialSubstanceLayer *this)
{
  OZMaterialCompoundLayer::updateLocalTransformVisibility(this);

  return OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility((OZMaterialSubstanceLayer *)((char *)this + 16680));
}

OZChannelBase *OZMaterialSubstanceLayer::setTransformValuesAsDefaults(OZMaterialSubstanceLayer *this)
{
  OZMaterialCompoundLayer::setTransformValuesAsDefaults(this);

  return OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault((OZChannelBase *)((char *)this + 16680));
}

void OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  void **v2;

  *(void *)this = &unk_1F1157F88;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1158498;
  *((void *)this + 835) = &unk_1F11584F0;
  uint64_t v2 = (void **)((char *)this + 23320);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22912));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22760));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 22632));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22480));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22328));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22176));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayer *)((char *)this + 21736));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayer *)((char *)this + 21296));
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840));
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592));
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 67);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944));
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 6688));
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(this);
}

_DWORD *OZMaterialSubstanceLayer::getImageNodeIDs(uint64_t a1, uint64_t *a2)
{
  int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 14976), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = operator new(0x18uLL);
  result[4] = ValueAsUint;
  uint64_t v5 = *a2;
  *(void *)uint64_t result = *a2;
  *((void *)result + 1) = a2;
  *(void *)(v5 + 8) = result;
  *a2 = (uint64_t)result;
  ++a2[2];
  return result;
}

void *OZMaterialSubstanceLayer::getImageAndFillChannelList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = OZChannelBase::setRangeName((OZChannelBase *)(a1 + 14840), (const PCString *)(a1 + 6688));
  uint64_t v5 = v4;
  uint64_t result = operator new(0x20uLL);
  result[2] = v3;
  result[3] = v5;
  uint64_t v7 = *a2;
  *uint64_t result = *a2;
  result[1] = a2;
  *(void *)(v7 + 8) = result;
  *a2 = (uint64_t)result;
  ++a2[2];
  return result;
}

uint64_t OZMaterialSubstanceLayer::enableDisableEnvironmentDependentChannels(OZMaterialSubstanceLayer *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(OZMaterialSubstanceLayer *))(*(void *)this + 1184))(this) + 288;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 104);

  return v4(v3, a2, 0);
}

uint64_t OZMaterialSubstanceLayer::getSequenceColorChannel(OZChannelBase *this)
{
  uint64_t result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
  {
    uint64_t result = OZMaterialLayerBase::getSequenceChannels(this);
    if (result)
    {
      uint64_t SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      if (SequenceChannels) {
        uint64_t SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      }
      return SequenceChannels + 128;
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::getSequenceOpacityChannel(OZChannelBase *this)
{
  uint64_t result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
  {
    uint64_t result = OZMaterialLayerBase::getSequenceChannels(this);
    if (result)
    {
      uint64_t SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      if (SequenceChannels) {
        uint64_t SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      }
      return SequenceChannels + 1136;
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::getSequenceColorChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1024))();
}

uint64_t OZMaterialSubstanceLayer::getSequenceOpacityChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1032))();
}

uint64_t OZMaterialSubstanceLayer::alphaChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22480;
}

uint64_t OZMaterialSubstanceLayer::colorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 10592;
}

uint64_t OZMaterialSubstanceLayer::gradientChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 11600;
}

uint64_t OZMaterialSubstanceLayer::imageChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 14840;
}

uint64_t OZMaterialSubstanceLayer::sharedTransformChannel(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  uint64_t v2 = ObjectManipulator - 16;
  if (!ObjectManipulator) {
    uint64_t v2 = 0;
  }
  return v2 + 1568;
}

uint64_t OZMaterialSubstanceLayer::brightnessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 21296;
}

uint64_t OZMaterialSubstanceLayer::sequenceChannels(OZChannelBase *this)
{
  uint64_t result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
  {
    return OZMaterialLayerBase::getSequenceChannels(this);
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::selectionChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 6688;
}

uint64_t OZMaterialSubstanceLayer::metalGradient(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 6944;
}

uint64_t OZMaterialSubstanceLayer::thicknessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 21736;
}

uint64_t OZMaterialSubstanceLayer::edgeChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22632;
}

uint64_t OZMaterialSubstanceLayer::edgeAmountChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22760;
}

uint64_t OZMaterialSubstanceLayer::edgeInvertChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22912;
}

uint64_t OZMaterialSubstanceLayer::flatOperatorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 23064;
}

uint64_t OZMaterialSubstanceLayer::flatIntensityChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22328;
}

void non-virtual thunk to'OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this)
{
}

{
  uint64_t vars8;

  OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer((OZMaterialSubstanceLayer *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::alphaChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15800;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::colorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 3912;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::gradientChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 4920;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::imageChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 8160;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::sharedTransformChannel(OZMaterialSubstanceLayer *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this - 6680));
  uint64_t v2 = ObjectManipulator - 16;
  if (!ObjectManipulator) {
    uint64_t v2 = 0;
  }
  return v2 + 1568;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::brightnessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 14616;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::edgeChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15952;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::edgeAmountChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 16080;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::edgeInvertChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 16232;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::flatOperatorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 0x4000;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::flatIntensityChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15648;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::sequenceChannels(OZMaterialSubstanceLayer *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this - 6680);
  uint64_t result = OZMaterialLayerBase::getSequenceChannels((OZChannelBase *)((char *)this - 6680));
  if (result)
  {
    return OZMaterialLayerBase::getSequenceChannels(v1);
  }
  return result;
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::objectManipulator(OZMaterialSubstanceLayer *this)
{
  return OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this - 6680));
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::getSequenceColorChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 835) + 1024))();
}

uint64_t non-virtual thunk to'OZMaterialSubstanceLayer::getSequenceOpacityChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 835) + 1032))();
}

uint64_t std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<OZChannelBase *>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B7CCCC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZChannelBase *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t OZCacheManager::setConservative(uint64_t this)
{
  return this;
}

uint64_t OZCacheManager::setHosted(OZCacheManager *this)
{
  char v1 = (char)this;
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.motionapp");
  if ((result & 1) == 0) {
  return result;
  }
}

uint64_t OZCacheManager::Instance(OZCacheManager *this)
{
  if (OZCacheManager::Instance(void)::once != -1) {
    dispatch_once(&OZCacheManager::Instance(void)::once, &__block_literal_global_81);
  }
  return OZCacheManager::_instance;
}

void ___ZN14OZCacheManager8InstanceEv_block_invoke()
{
}

void sub_1B7CCCEF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40857988C9);
  _Unwind_Resume(a1);
}

uint64_t OZCacheManager::guaranteeMemory(OZCacheManager *this)
{
  unsigned int v1 = this;
  unint64_t v24 = 0;
  BOOL MemoryInfo = PCInfo::getMemoryInfo(0, 0, 0, 0, 0, 0, 0, &v24, v23);
  {
    int v3 = 0;
    goto LABEL_3;
  }
  BOOL MemoryInfo = PCInfo::isMemoryAvailable((PCInfo *)v1);
  int v3 = MemoryInfo;
  {
LABEL_3:
    ProGL::clearTexturePool((ProGL *)MemoryInfo);
      goto LABEL_4;
    BOOL MemoryInfo = PCInfo::isMemoryAvailable((PCInfo *)v1);
    int v3 = MemoryInfo;
    if (!MemoryInfo) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v21 = 1;
  int v3 = 1;
LABEL_36:
  if (v21) {
    return 1;
  }
LABEL_4:
  unint64_t v4 = (ProShade::Snippet *)OZSceneList::instance((OZSceneList *)MemoryInfo);
  uint64_t v5 = (PCMutex *)ProShade::Snippet::code(v4);
  PCMutex::lock(v5);
  CurrentDoc = (OZSceneList *)theApp;
  if (theApp && (CurrentDoc = (OZSceneList *)OZApplication::getCurrentDoc((OZApplication *)theApp)) != 0) {
    uint64_t v7 = (OZScene *)*((void *)CurrentDoc + 3);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v8 = (OZChannelBase *)OZSceneList::instance(CurrentDoc);
  LabelCtlrClassunsigned int Name = OZChannelBase::getLabelCtlrClassName(v8);
  int v10 = (OZSceneList *)OZSceneList::instance((OZSceneList *)LabelCtlrClassName);
  uint64_t v11 = OZSceneList::end(v10);
  int v13 = v3 ^ 1;
    int v13 = 1;
  if (v13 == 1)
  {
    long long v14 = (char *)v11;
    if (LabelCtlrClassName != (__CFString *)v11)
    {
      do
      {
        isa = (OZScene *)LabelCtlrClassName[1].isa;
        if (isa != v7)
        {
          unint64_t v16 = (PGContext *)PGGetPerThreadContext();
          OZScene::reloadResources(isa, v16);
            LOBYTE(v3) = PCInfo::isMemoryAvailable((PCInfo *)v1);
        }
        info = (char *)LabelCtlrClassName->info;
        if (info)
        {
          do
          {
            data = info;
            info = *(char **)info;
          }
          while (info);
        }
        else
        {
          do
          {
            data = LabelCtlrClassName->data;
            BOOL v19 = *(void *)data == (void)LabelCtlrClassName;
            LabelCtlrClassunsigned int Name = (__CFString *)data;
          }
          while (!v19);
        }
          break;
        LabelCtlrClassunsigned int Name = (__CFString *)data;
      }
      while (data != v14);
    }
  }
  if (v3)
  {
    if (v12) {
      BOOL v19 = v7 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_30:
    PCSharedCount v20 = (PGContext *)PGGetPerThreadContext();
    OZScene::reloadResources(v7, v20);
  }
LABEL_31:
  PCMutex::unlock(v5);
  return 1;
}

void sub_1B7CCD110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZCacheManager::clearTextureCache(OZCacheManager *this)
{
  unsigned int v1 = (PGTextureCache *)PGTextureCache::instance(this);

  PGTextureCache::clear(v1);
}

void OZCacheManager::clearMetalTextureCache(OZCacheManager *this)
{
  unsigned int v1 = (OZMetalTextureCache *)OZMetalTextureCache::instance(this);

  OZMetalTextureCache::clear(v1);
}

void OZCacheManager::OZCacheManager(OZCacheManager *this)
{
  PCSingleton::PCSingleton(this, 0);
  *(void *)unint64_t ImageCacheSize = &unk_1F1158610;
  *(unsigned char *)(ImageCacheSize + 24) = 0;
  *(void *)(ImageCacheSize + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_DWORD *)(ImageCacheSize + 40) = 0;
  *(void *)(ImageCacheSize + 48) = 0;
  *(_DWORD *)(ImageCacheSize + 56) = 0;
  *(void *)(ImageCacheSize + 64) = 0;
  *(_DWORD *)(ImageCacheSize + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(ImageCacheSize + 80) = 0;
  {
    unint64_t ImageCacheSize = OZCacheManager::getImageCacheSize((OZCacheManager *)ImageCacheSize);
    *((void *)this + 4) = ImageCacheSize;
  }
  PGTextureCache::instance((PGTextureCache *)ImageCacheSize);
}

void sub_1B7CCD208(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

unint64_t OZCacheManager::getImageCacheSize(OZCacheManager *this)
{
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v6 = 0;
  BOOL MemoryInfo = PCInfo::getMemoryInfo((PCInfo *)&v8, &v7, 0, 0, &v6, 0, 0, 0, v5);
  unint64_t v2 = v8 - (unint64_t)((double)v8 * 0.25);
  int v3 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)MemoryInfo);
  return v2 * (int)OZPreferenceManager::getCachePercentage(v3) / 0x64;
}

void OZCacheManager::~OZCacheManager(OZCacheManager *this)
{
  *(void *)this = &unk_1F1158610;
  unint64_t v2 = (PGTextureCache *)PGTextureCache::instance(this);
  PGTextureCache::clear(v2);
  unint64_t v4 = (OZMetalTextureCache *)OZMetalTextureCache::instance(v3);
  OZMetalTextureCache::clear(v4);

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  OZCacheManager::~OZCacheManager(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZCacheManager::addImage(void *a1@<X1>, PCHash128 *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
}

void OZCacheManager::getImageForKey(const PCHash128 *a1@<X1>, void *a2@<X8>)
{
}

BOOL OZCacheManager::addTexture(PGTextureCache *a1, uint64_t *a2, long long *a3, int a4, PCHash128 *a5)
{
  uint64_t v9 = (PGTextureCache *)PGTextureCache::instance(a1);

  return PGTextureCache::add(v9, a2, a3, a4, a5);
}

BOOL OZCacheManager::addTexture(PGTextureCache *a1, uint64_t *a2, HGGPUComputeDevice **a3, PCHash128 *a4)
{
  unint64_t v7 = (PGTextureCache *)PGTextureCache::instance(a1);

  return PGTextureCache::add(v7, a2, a3, a4);
}

void OZCacheManager::getTextureForKey(PGTextureCache *a1@<X0>, int a2@<W1>, const PCHash128 *a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = PGTextureCache::instance(a1);

  PGTextureCache::find(v9, a2, a3, a4, a5);
}

void OZCacheManager::getTextureForKey(PGTextureCache *a1@<X0>, HGGPUComputeDevice **a2@<X1>, const PCHash128 *a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = PGTextureCache::instance(a1);

  PGTextureCache::find(v9, a2, a3, a4, a5);
}

uint64_t OZCacheManager::addMetalTexture(OZMetalTextureCache *a1, uint64_t *a2, void *a3, PCHash128 *a4)
{
  unint64_t v7 = (OZMetalTextureCache *)OZMetalTextureCache::instance(a1);

  return OZMetalTextureCache::add(v7, a2, a3, a4);
}

void OZCacheManager::getMetalTextureForKey(OZMetalTextureCache *a1@<X0>, void *a2@<X1>, const PCHash128 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = OZMetalTextureCache::instance(a1);

  OZMetalTextureCache::find(v7, a2, a3, 0, a4);
}

void OZARPersonAnchorElement::OZARPersonAnchorElement(OZARPersonAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1158648;
  uint64_t v5[2] = &unk_1F1158F80;
  v5[6] = &unk_1F11591D8;
  v5[816] = &unk_1F1159230;
  Li3DEngineScene::Li3DEngineScene((Li3DEngineScene *)(v5 + 3053));
  *((_OWORD *)this + 1537) = 0u;
  PCString::PCString(&v61, "Person Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24608), &v61, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v6, "Index");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24736), &v61, (OZChannelFolder *)((char *)this + 24608), 0x191u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v7, "Enable Physics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24888), 1, &v61, (OZChannelFolder *)((char *)this + 24608), 0x192u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v8, "Bounding Box Origin");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C4u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v9, "Bounding Box Size");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C5u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v10, "Person Size");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C6u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v11, "Is In Frame");
  OZChannelDouble::OZChannelDouble((OZARPersonAnchorElement *)((char *)this + 26360), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C7u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v12, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26512), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C1u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v13, "Mass");
  OZChannelDouble::OZChannelDouble((OZARPersonAnchorElement *)((char *)this + 26640), 1.0, &v61, (OZChannelFolder *)((char *)this + 26512), 0x1C2u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v14, "Sliding Friction");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26792), 0.5, &v61, (OZChannelFolder *)((char *)this + 26512), 0x1C3u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v15, "Joints");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26944), &v61, (OZChannelFolder *)((char *)this + 24608), 0x193u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v16, "Head");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27072), &v61, (OZChannelFolder *)((char *)this + 26944), 0x194u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v17, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200), &v61, (OZChannelFolder *)((char *)this + 27072), 0x195u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v18, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088), &v61, (OZChannelFolder *)((char *)this + 27072), 0x196u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v19, "Left Hand");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28944), &v61, (OZChannelFolder *)((char *)this + 26944), 0x197u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v20, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072), &v61, (OZChannelFolder *)((char *)this + 28944), 0x198u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v21, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960), &v61, (OZChannelFolder *)((char *)this + 28944), 0x199u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v22, "Right Hand");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30816), &v61, (OZChannelFolder *)((char *)this + 26944), 0x19Au, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v23, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944), &v61, (OZChannelFolder *)((char *)this + 30816), 0x19Bu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v24, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832), &v61, (OZChannelFolder *)((char *)this + 30816), 0x19Cu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v25, "Left Elbow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32688), &v61, (OZChannelFolder *)((char *)this + 26944), 0x19Du, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v26, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816), &v61, (OZChannelFolder *)((char *)this + 32688), 0x19Eu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v27, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704), &v61, (OZChannelFolder *)((char *)this + 32688), 0x19Fu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v28, "Right Elbow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 34560), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A0u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v29, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688), &v61, (OZChannelFolder *)((char *)this + 34560), 0x1A1u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v30, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576), &v61, (OZChannelFolder *)((char *)this + 34560), 0x1A2u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v31, "Left Shoulder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 36432), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A3u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v32, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560), &v61, (OZChannelFolder *)((char *)this + 36432), 0x1A4u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v33, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448), &v61, (OZChannelFolder *)((char *)this + 36432), 0x1A5u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v34, "Right Shoulder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 38304), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A6u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v35, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432), &v61, (OZChannelFolder *)((char *)this + 38304), 0x1A7u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v36, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320), &v61, (OZChannelFolder *)((char *)this + 38304), 0x1A8u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v37, "Left Hip");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40176), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A9u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v38, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304), &v61, (OZChannelFolder *)((char *)this + 40176), 0x1AAu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v39, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192), &v61, (OZChannelFolder *)((char *)this + 40176), 0x1ABu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v40, "Right Hip");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 42048), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1ACu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v41, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176), &v61, (OZChannelFolder *)((char *)this + 42048), 0x1ADu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v42, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064), &v61, (OZChannelFolder *)((char *)this + 42048), 0x1AEu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v43, "Left Knee");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 43920), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1AFu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v44, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048), &v61, (OZChannelFolder *)((char *)this + 43920), 0x1B0u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v45, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936), &v61, (OZChannelFolder *)((char *)this + 43920), 0x1B1u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v46, "Right Knee");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 45792), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v47, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920), &v61, (OZChannelFolder *)((char *)this + 45792), 0x1B3u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v48, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808), &v61, (OZChannelFolder *)((char *)this + 45792), 0x1B4u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v49, "Left Foot");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 47664), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B5u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v50, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792), &v61, (OZChannelFolder *)((char *)this + 47664), 0x1B6u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v51, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680), &v61, (OZChannelFolder *)((char *)this + 47664), 0x1B7u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v52, "Right Foot");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49536), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B8u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v53, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664), &v61, (OZChannelFolder *)((char *)this + 49536), 0x1B9u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v54, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552), &v61, (OZChannelFolder *)((char *)this + 49536), 0x1BAu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v55, "Left Foot End");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 51408), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1BBu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v56, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536), &v61, (OZChannelFolder *)((char *)this + 51408), 0x1BCu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v57, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424), &v61, (OZChannelFolder *)((char *)this + 51408), 0x1BDu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v58, "Right Foot End");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 53280), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1BEu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v59, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408), &v61, (OZChannelFolder *)((char *)this + 53280), 0x1BFu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v60, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296), &v61, (OZChannelFolder *)((char *)this + 53280), 0x1C0u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  OZARPersonAnchorElement::init(this);
  OZChannel::setMin((OZChannel *)((char *)this + 24736), 1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24736), 10.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 24736), 1.0);
}

void sub_1B7CCE374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelRotation3D *a10, OZChannelPosition3D *a11, OZChannelRotation3D *a12, OZChannelPosition3D *a13, OZChannelRotation3D *a14, OZChannelPosition3D *a15, OZChannelRotation3D *a16, OZChannelPosition3D *a17, OZChannelRotation3D *a18, OZChannelPosition3D *a19, OZChannelRotation3D *a20,OZChannelPosition3D *a21,OZChannelRotation3D *a22,OZChannelPosition3D *a23,OZChannelRotation3D *a24,OZChannelPosition3D *a25,OZChannelRotation3D *a26,OZChannelPosition3D *a27,OZChannelRotation3D *a28,OZChannelPosition3D *a29,OZChannelRotation3D *a30,OZChannelPosition3D *a31,OZChannelRotation3D *a32,OZChannelPosition3D *a33,OZChannelRotation3D *a34,OZChannelPosition3D *a35,OZChannelPercent *a36,OZChannel *a37,OZChannel *a38,OZChannel2D *a39,OZChannel2D *a40)
{
  PCString::~PCString((PCString *)(v48 - 96));
  OZChannelPosition3D::~OZChannelPosition3D(v45);
  OZChannelFolder::~OZChannelFolder(v44);
  OZChannelRotation3D::~OZChannelRotation3D(v46);
  OZChannelPosition3D::~OZChannelPosition3D(v47);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannelRotation3D::~OZChannelRotation3D(a10);
  OZChannelPosition3D::~OZChannelPosition3D(a11);
  OZChannelFolder::~OZChannelFolder(v42);
  OZChannelRotation3D::~OZChannelRotation3D(a12);
  OZChannelPosition3D::~OZChannelPosition3D(a13);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 200));
  OZChannelRotation3D::~OZChannelRotation3D(a14);
  OZChannelPosition3D::~OZChannelPosition3D(a15);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 192));
  OZChannelRotation3D::~OZChannelRotation3D(a16);
  OZChannelPosition3D::~OZChannelPosition3D(a17);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 184));
  OZChannelRotation3D::~OZChannelRotation3D(a18);
  OZChannelPosition3D::~OZChannelPosition3D(a19);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 176));
  OZChannelRotation3D::~OZChannelRotation3D(a20);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 168));
  OZChannelRotation3D::~OZChannelRotation3D(a22);
  OZChannelPosition3D::~OZChannelPosition3D(a23);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 160));
  OZChannelRotation3D::~OZChannelRotation3D(a24);
  OZChannelPosition3D::~OZChannelPosition3D(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 152));
  OZChannelRotation3D::~OZChannelRotation3D(a26);
  OZChannelPosition3D::~OZChannelPosition3D(a27);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 144));
  OZChannelRotation3D::~OZChannelRotation3D(a28);
  OZChannelPosition3D::~OZChannelPosition3D(a29);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 136));
  OZChannelRotation3D::~OZChannelRotation3D(a30);
  OZChannelPosition3D::~OZChannelPosition3D(a31);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 128));
  OZChannelRotation3D::~OZChannelRotation3D(a32);
  OZChannelPosition3D::~OZChannelPosition3D(a33);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 120));
  OZChannelRotation3D::~OZChannelRotation3D(a34);
  OZChannelPosition3D::~OZChannelPosition3D(a35);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 112));
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannel::~OZChannel(a37);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 104));
  OZChannel::~OZChannel(a38);
  OZChannel2D::~OZChannel2D(a39);
  OZChannel2D::~OZChannel2D(a40);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 240));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v48 - 232));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 216));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 208));
  Li3DEngineScene::~Li3DEngineScene(*(Li3DEngineScene **)(v48 - 224));
  OZARAnchorElement::~OZARAnchorElement(v40);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement::init(OZARPersonAnchorElement *this)
{
  unint64_t v2 = [OZPerson3DSCNSceneBuilder alloc];
  *((void *)this + 3075) = -[OZPerson3DSCNSceneBuilder initWithName:](v2, "initWithName:", objc_msgSend(NSString, "stringWithFormat:", @"%u", *((unsigned int *)this + 20)));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26944), 4259872, 0);
  int v3 = (OZChannel *)((char *)this + 26360);
  OZChannel::setMin(v3, 0.0);

  OZChannel::setMax(v3, 1.0);
}

void OZARPersonAnchorElement::OZARPersonAnchorElement(OZARPersonAnchorElement *this, const OZARPersonAnchorElement *a2, uint64_t a3)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *uint64_t v5 = &unk_1F1158648;
  uint64_t v5[2] = &unk_1F1158F80;
  v5[6] = &unk_1F11591D8;
  v5[816] = &unk_1F1159230;
  Li3DEngineScene::Li3DEngineScene((Li3DEngineScene *)(v5 + 3053));
  *((_OWORD *)this + 1537) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24608), (const OZChannelFolder *)((char *)a2 + 24608), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 24736), (const OZChannelBase *)((char *)a2 + 24736), (OZChannelFolder *)((char *)this + 24608));
  *((void *)this + 309OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101490;
  *((void *)this + 3094) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24888), (const OZChannelBase *)((char *)a2 + 24888), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040), (const OZARPersonAnchorElement *)((char *)a2 + 25040), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480), (const OZARPersonAnchorElement *)((char *)a2 + 25480), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920), (const OZARPersonAnchorElement *)((char *)a2 + 25920), (OZChannelFolder *)((char *)this + 24608));
  OZChannel::OZChannel((OZChannel *)((char *)this + 26360), (const OZChannelBase *)((char *)a2 + 26360), (OZChannelFolder *)((char *)this + 24608));
  *((void *)this + 3295) = &unk_1F1100CF0;
  *((void *)this + 3297) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26512), (const OZChannelFolder *)((char *)a2 + 26512), (OZChannelFolder *)((char *)this + 24608));
  OZChannel::OZChannel((OZChannel *)((char *)this + 26640), (const OZChannelBase *)((char *)a2 + 26640), (OZChannelFolder *)((char *)this + 26512));
  *((void *)this + 3330) = &unk_1F1100CF0;
  *((void *)this + 333OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26792), (const OZChannelBase *)((char *)a2 + 26792), (OZChannelFolder *)((char *)this + 26512));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26944), (const OZChannelFolder *)((char *)a2 + 26944), (OZChannelFolder *)((char *)this + 24608));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27072), (const OZChannelFolder *)((char *)a2 + 27072), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200), (const OZARPersonAnchorElement *)((char *)a2 + 27200), (OZChannelFolder *)((char *)this + 27072));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088), (const OZARPersonAnchorElement *)((char *)a2 + 28088), (OZChannelFolder *)((char *)this + 27072));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28944), (const OZChannelFolder *)((char *)a2 + 28944), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072), (const OZARPersonAnchorElement *)((char *)a2 + 29072), (OZChannelFolder *)((char *)this + 28944));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960), (const OZARPersonAnchorElement *)((char *)a2 + 29960), (OZChannelFolder *)((char *)this + 28944));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30816), (const OZChannelFolder *)((char *)a2 + 30816), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944), (const OZARPersonAnchorElement *)((char *)a2 + 30944), (OZChannelFolder *)((char *)this + 30816));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832), (const OZARPersonAnchorElement *)((char *)a2 + 31832), (OZChannelFolder *)((char *)this + 30816));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32688), (const OZChannelFolder *)((char *)a2 + 32688), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816), (const OZARPersonAnchorElement *)((char *)a2 + 32816), (OZChannelFolder *)((char *)this + 32688));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704), (const OZARPersonAnchorElement *)((char *)a2 + 33704), (OZChannelFolder *)((char *)this + 32688));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 34560), (const OZChannelFolder *)((char *)a2 + 34560), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688), (const OZARPersonAnchorElement *)((char *)a2 + 34688), (OZChannelFolder *)((char *)this + 34560));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576), (const OZARPersonAnchorElement *)((char *)a2 + 35576), (OZChannelFolder *)((char *)this + 34560));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 36432), (const OZChannelFolder *)((char *)a2 + 36432), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560), (const OZARPersonAnchorElement *)((char *)a2 + 36560), (OZChannelFolder *)((char *)this + 36432));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448), (const OZARPersonAnchorElement *)((char *)a2 + 37448), (OZChannelFolder *)((char *)this + 36432));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 38304), (const OZChannelFolder *)((char *)a2 + 38304), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432), (const OZARPersonAnchorElement *)((char *)a2 + 38432), (OZChannelFolder *)((char *)this + 38304));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320), (const OZARPersonAnchorElement *)((char *)a2 + 39320), (OZChannelFolder *)((char *)this + 38304));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40176), (const OZChannelFolder *)((char *)a2 + 40176), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304), (const OZARPersonAnchorElement *)((char *)a2 + 40304), (OZChannelFolder *)((char *)this + 40176));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192), (const OZARPersonAnchorElement *)((char *)a2 + 41192), (OZChannelFolder *)((char *)this + 40176));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 42048), (const OZChannelFolder *)((char *)a2 + 42048), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176), (const OZARPersonAnchorElement *)((char *)a2 + 42176), (OZChannelFolder *)((char *)this + 42048));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064), (const OZARPersonAnchorElement *)((char *)a2 + 43064), (OZChannelFolder *)((char *)this + 42048));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 43920), (const OZChannelFolder *)((char *)a2 + 43920), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048), (const OZARPersonAnchorElement *)((char *)a2 + 44048), (OZChannelFolder *)((char *)this + 43920));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936), (const OZARPersonAnchorElement *)((char *)a2 + 44936), (OZChannelFolder *)((char *)this + 43920));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 45792), (const OZChannelFolder *)((char *)a2 + 45792), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920), (const OZARPersonAnchorElement *)((char *)a2 + 45920), (OZChannelFolder *)((char *)this + 45792));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808), (const OZARPersonAnchorElement *)((char *)a2 + 46808), (OZChannelFolder *)((char *)this + 45792));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 47664), (const OZChannelFolder *)((char *)a2 + 47664), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792), (const OZARPersonAnchorElement *)((char *)a2 + 47792), (OZChannelFolder *)((char *)this + 47664));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680), (const OZARPersonAnchorElement *)((char *)a2 + 48680), (OZChannelFolder *)((char *)this + 47664));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49536), (const OZChannelFolder *)((char *)a2 + 49536), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664), (const OZARPersonAnchorElement *)((char *)a2 + 49664), (OZChannelFolder *)((char *)this + 49536));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552), (const OZARPersonAnchorElement *)((char *)a2 + 50552), (OZChannelFolder *)((char *)this + 49536));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 51408), (const OZChannelFolder *)((char *)a2 + 51408), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536), (const OZARPersonAnchorElement *)((char *)a2 + 51536), (OZChannelFolder *)((char *)this + 51408));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424), (const OZARPersonAnchorElement *)((char *)a2 + 52424), (OZChannelFolder *)((char *)this + 51408));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 53280), (const OZChannelFolder *)((char *)a2 + 53280), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408), (const OZARPersonAnchorElement *)((char *)a2 + 53408), (OZChannelFolder *)((char *)this + 53280));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296), (const OZARPersonAnchorElement *)((char *)a2 + 54296), (OZChannelFolder *)((char *)this + 53280));
  OZARPersonAnchorElement::init(this);
}

void sub_1B7CCF270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelRotation3D *a9, OZChannelPosition3D *a10, OZChannelRotation3D *a11, OZChannelPosition3D *a12, OZChannelFolder *a13, OZChannelRotation3D *a14, OZChannelPosition3D *a15, OZChannelFolder *a16, OZChannelRotation3D *a17, OZChannelPosition3D *a18, OZChannelFolder *a19, OZChannelRotation3D *a20,OZChannelPosition3D *a21,OZChannelFolder *a22,OZChannelRotation3D *a23,OZChannelPosition3D *a24,OZChannelFolder *a25,OZChannelRotation3D *a26,OZChannelPosition3D *a27,OZChannelFolder *a28,OZChannelRotation3D *a29,OZChannelPosition3D *a30,OZChannelFolder *a31,OZChannelRotation3D *a32,OZChannelPosition3D *a33,OZChannelFolder *a34,OZChannelRotation3D *a35,OZChannelPosition3D *a36,OZChannelFolder *a37,OZChannelRotation3D *a38,OZChannelPosition3D *a39)
{
  OZChannelRotation3D::~OZChannelRotation3D(v44);
  OZChannelPosition3D::~OZChannelPosition3D(v42);
  OZChannelFolder::~OZChannelFolder(v46);
  OZChannelRotation3D::~OZChannelRotation3D(v40);
  OZChannelPosition3D::~OZChannelPosition3D(v41);
  OZChannelFolder::~OZChannelFolder(v45);
  OZChannelRotation3D::~OZChannelRotation3D(a9);
  OZChannelPosition3D::~OZChannelPosition3D(a10);
  OZChannelFolder::~OZChannelFolder(v47);
  OZChannelRotation3D::~OZChannelRotation3D(a11);
  OZChannelPosition3D::~OZChannelPosition3D(a12);
  OZChannelFolder::~OZChannelFolder(a13);
  OZChannelRotation3D::~OZChannelRotation3D(a14);
  OZChannelPosition3D::~OZChannelPosition3D(a15);
  OZChannelFolder::~OZChannelFolder(a16);
  OZChannelRotation3D::~OZChannelRotation3D(a17);
  OZChannelPosition3D::~OZChannelPosition3D(a18);
  OZChannelFolder::~OZChannelFolder(a19);
  OZChannelRotation3D::~OZChannelRotation3D(a20);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelFolder::~OZChannelFolder(a22);
  OZChannelRotation3D::~OZChannelRotation3D(a23);
  OZChannelPosition3D::~OZChannelPosition3D(a24);
  OZChannelFolder::~OZChannelFolder(a25);
  OZChannelRotation3D::~OZChannelRotation3D(a26);
  OZChannelPosition3D::~OZChannelPosition3D(a27);
  OZChannelFolder::~OZChannelFolder(a28);
  OZChannelRotation3D::~OZChannelRotation3D(a29);
  OZChannelPosition3D::~OZChannelPosition3D(a30);
  OZChannelFolder::~OZChannelFolder(a31);
  OZChannelRotation3D::~OZChannelRotation3D(a32);
  OZChannelPosition3D::~OZChannelPosition3D(a33);
  OZChannelFolder::~OZChannelFolder(a34);
  OZChannelRotation3D::~OZChannelRotation3D(a35);
  OZChannelPosition3D::~OZChannelPosition3D(a36);
  OZChannelFolder::~OZChannelFolder(a37);
  OZChannelRotation3D::~OZChannelRotation3D(a38);
  OZChannelPosition3D::~OZChannelPosition3D(a39);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 232));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v48 - 224));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v48 - 216));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v48 - 200));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v48 - 192));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 184));
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v48 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 168));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 152));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 144));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 136));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 128));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v48 - 120));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 112));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 104));
  Li3DEngineScene::~Li3DEngineScene(*(Li3DEngineScene **)(v48 - 96));
  OZARAnchorElement::~OZARAnchorElement(v39);
  _Unwind_Resume(a1);
}

void sub_1B7CCF46C()
{
}

void sub_1B7CCF474()
{
}

void sub_1B7CCF47C()
{
}

void sub_1B7CCF484()
{
}

void sub_1B7CCF48C()
{
}

void sub_1B7CCF494()
{
}

void sub_1B7CCF49C()
{
}

void sub_1B7CCF4A4()
{
}

void sub_1B7CCF4AC()
{
}

void sub_1B7CCF4B4()
{
}

void sub_1B7CCF4BC()
{
}

void sub_1B7CCF4C4()
{
}

void sub_1B7CCF4CC()
{
}

void sub_1B7CCF4D4()
{
}

void sub_1B7CCF4DC()
{
}

void sub_1B7CCF4E4()
{
}

void sub_1B7CCF4EC()
{
}

void sub_1B7CCF4F4()
{
}

void sub_1B7CCF4FC()
{
}

void sub_1B7CCF504()
{
}

void sub_1B7CCF50C()
{
}

void sub_1B7CCF514()
{
}

void sub_1B7CCF51C()
{
}

void sub_1B7CCF524()
{
}

void sub_1B7CCF52C()
{
}

void sub_1B7CCF534()
{
}

void sub_1B7CCF53C()
{
}

void sub_1B7CCF544()
{
}

void sub_1B7CCF54C()
{
}

void sub_1B7CCF554()
{
}

void sub_1B7CCF55C()
{
}

void sub_1B7CCF564()
{
}

void sub_1B7CCF56C()
{
}

void sub_1B7CCF574()
{
}

void sub_1B7CCF57C()
{
}

void sub_1B7CCF584()
{
}

void sub_1B7CCF58C()
{
}

void sub_1B7CCF594()
{
}

void sub_1B7CCF59C()
{
}

void sub_1B7CCF5A4()
{
}

void sub_1B7CCF5AC()
{
}

void sub_1B7CCF5B4()
{
}

void sub_1B7CCF5BC()
{
}

void sub_1B7CCF5C4()
{
}

void sub_1B7CCF5CC()
{
}

void sub_1B7CCF5D4()
{
}

void sub_1B7CCF5DC()
{
}

void sub_1B7CCF5E4()
{
}

void sub_1B7CCF5EC()
{
}

void sub_1B7CCF5F4()
{
}

void sub_1B7CCF5FC()
{
}

void sub_1B7CCF604()
{
}

void sub_1B7CCF60C()
{
}

void OZARPersonAnchorElement::~OZARPersonAnchorElement(OZARPersonAnchorElement *this)
{
  *(void *)this = &unk_1F1158648;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1158F80;
  *((void *)this + 6) = &unk_1F11591D8;
  *((void *)this + 816) = &unk_1F1159230;

  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 53280));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 51408));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 49536));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 47664));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 45792));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 43920));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 42048));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 40176));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 38304));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 36432));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 34560));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 32688));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30816));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28944));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 27072));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 26944));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 26792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26640));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 26512));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26360));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24736));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24608));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 24568, *((PCSharedCount **)this + 3072));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24544, *((void **)this + 3069));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3067);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 24504, *((id **)this + 3064));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3061);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24424));

  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  uint64_t vars8;

  OZARPersonAnchorElement::~OZARPersonAnchorElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZARPersonAnchorElement::~OZARPersonAnchorElement(OZARPersonAnchorElement *this)
{
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 48));
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZARPersonAnchorElement::parseEnd(OZARPersonAnchorElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZ3DEngineSceneElement::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26944), 4259872, 0);
  return v3;
}

uint64_t non-virtual thunk to'OZARPersonAnchorElement::parseEnd(OZARPersonAnchorElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZ3DEngineSceneElement::parseEnd((OZARPersonAnchorElement *)((char *)this - 48), a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26896), 4259872, 0);
  return v3;
}

uint64_t OZARPersonAnchorElement::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZ3DEngineSceneElement::didAddToScene(this, a2);
  uint64_t v3 = (void *)(*(uint64_t (**)(OZTransformNode *))(*(void *)this + 2288))(this);
  uint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"%u", *((unsigned int *)this + 20));

  return [v3 setName:v4];
}

void OZARPersonAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->CMTime var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void non-virtual thunk to'OZARPersonAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->CMTime var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

double OZARPersonAnchorElement::calcAutomaticUnitSize(OZARPersonAnchorElement *this)
{
  return 1.0;
}

double OZARPersonAnchorElement::getLocalVolume(uint64_t a1, uint64_t a2, CMTime *a3)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26056), a3, 0.0);
    double v9 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26208), a3, 0.0);
    *(float64x2_t *)a2 = vmulq_n_f64((float64x2_t)xmmword_1B83832C0, v9);
    *(float64x2_t *)(a2 + 16) = vmulq_n_f64((float64x2_t)xmmword_1B83832C0, v7);
    double result = -250.0;
    *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B83832D0;
  }
  return result;
}

uint64_t OZARPersonAnchorElement::get3DScene(OZARPersonAnchorElement *this)
{
  if (!*((void *)this + 3074))
  {
    unint64_t v2 = (SCNScene *)objc_opt_new();
    *((void *)this + 3074) = v2;
    Li3DEngineScene::set((OZARPersonAnchorElement *)((char *)this + 24424), v2);
  }
  return (uint64_t)this + 24424;
}

uint64_t OZARPersonAnchorElement::get3DNode(id *this)
{
  unint64_t v2 = (std::recursive_mutex *)(*((uint64_t (**)(id *))*this + 292))(this);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  std::recursive_mutex::lock(v2);
  uint64_t v4 = [this[3075] getRootNode];
  std::recursive_mutex::unlock(v3);
  return v4;
}

void sub_1B7CCFD8C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZARPersonAnchorElement::setIsPersonInScene(OZARPersonAnchorElement *this, const CMTime *a2, int a3)
{
  double v3 = 0.0;
  if (a3) {
    double v3 = 1.0;
  }
  return OZChannel::setValue((OZChannel *)((char *)this + 26360), a2, v3, 0);
}

void OZARPersonAnchorElement::applyARDataFromScene(OZARPersonAnchorElement *this, CMTime *a2)
{
  if ((*(uint64_t (**)(OZARPersonAnchorElement *))(*(void *)this + 272))(this))
  {
    CMTime v15 = *a2;
    BOOL v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24888), &v15, 0.0) != 0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26640), &v15, 0.0);
    double v6 = v5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26792), &v15, 0.0);
    double v8 = v7;
    [*((id *)this + 3075) enablePhysics:v4];
    *(float *)&double v9 = v6;
    [*((id *)this + 3075) setMass:v9];
    *(float *)&double v10 = v8;
    [*((id *)this + 3075) setFriction:v10];
    OZElement::getOpacity((OZElement *)this, &v15, 0);
    *(float *)&double v11 = v11;
    [*((id *)this + 3075) setOpacity:v11];
    int v12 = (std::recursive_mutex *)(*(uint64_t (**)(OZARPersonAnchorElement *))(*(void *)this + 2336))(this);
    if (v12)
    {
      int v13 = v12;
      std::recursive_mutex::lock(v12);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26056), &v15, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26208), &v15, 0.0);
      *(float *)&double v14 = v14;
      [*((id *)this + 3075) updateSimpleGeometry:v14];
      std::recursive_mutex::unlock(v13);
    }
  }
}

void sub_1B7CCFF44(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZARPersonAnchorElement::getTransformFolder(OZARPersonAnchorElement *this, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = 27072;
      break;
    case 2:
      uint64_t v2 = 28944;
      break;
    case 3:
      uint64_t v2 = 32688;
      break;
    case 4:
      uint64_t v2 = 36432;
      break;
    case 5:
      uint64_t v2 = 30816;
      break;
    case 6:
      uint64_t v2 = 34560;
      break;
    case 7:
      uint64_t v2 = 38304;
      break;
    case 8:
      uint64_t v2 = 47664;
      break;
    case 9:
      uint64_t v2 = 49536;
      break;
    case 11:
      uint64_t v2 = 43920;
      break;
    case 12:
      uint64_t v2 = 40176;
      break;
    case 13:
      uint64_t v2 = 45792;
      break;
    case 14:
      uint64_t v2 = 42048;
      break;
    case 15:
      uint64_t v2 = 51408;
      break;
    case 16:
      uint64_t v2 = 53280;
      break;
    default:
      uint64_t v2 = 26944;
      break;
  }
  return (uint64_t)this + v2;
}

uint64_t OZARPersonAnchorElement::setTransform(OZARPersonAnchorElement *a1, const CMTime *a2, long long *a3, int a4)
{
  uint64_t TransformFolder = OZARPersonAnchorElement::getTransformFolder(a1, a4);
  int v7 = *(_DWORD *)(TransformFolder + 24);
  Descendant = (const void *)OZChannelFolder::getDescendant((OZChannelFolder *)TransformFolder, v7 + 1);
  if (Descendant) {
  else
  }
    double v9 = 0;
  double v10 = (const void *)OZChannelFolder::getDescendant((OZChannelFolder *)TransformFolder, v7 + 2);
  if (v10) {
  else
  }
    double v11 = 0;
  memset(v18, 0, sizeof(v18));
  int v19 = 4;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  PCMatrix44Tmpl<double>::getTransformation(a3, (uint64_t)v18);
  OZChannelPosition3D::setValue(v9, a2, *(double *)v18, *((double *)v18 + 1), *(double *)&v18[1]);
  uint64_t v13 = v11[17];
  int v12 = (char *)(v11 + 17);
  v14.n128_u64[0] = v20;
  (*(void (**)(char *, const CMTime *, void, __n128))(v13 + 712))(v12, a2, 0, v14);
  v15.n128_u64[0] = *((void *)&v20 + 1);
  (*(void (**)(__n128))(*((void *)v12 + 19) + 712))(v15);
  v16.n128_u64[0] = v21;
  return (*(uint64_t (**)(__n128))(*((void *)v12 + 38) + 712))(v16);
}

uint64_t OZARPersonAnchorElement::setBoundingBox(void *a1, uint64_t a2)
{
  (*(void (**)(double))(a1[3202] + 712))(*(double *)(a2 + 16));
  v4.n128_u64[0] = *(void *)(a2 + 24);
  (*(void (**)(__n128))(a1[3221] + 712))(v4);
  v5.n128_u64[0] = *(void *)a2;
  (*(void (**)(__n128))(a1[3147] + 712))(v5);
  v6.n128_u64[0] = *(void *)(a2 + 8);
  int v7 = *(uint64_t (**)(__n128))(a1[3166] + 712);

  return v7(v6);
}

uint64_t OZARPersonAnchorElement::setSize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double))(*(void *)(a1 + 26056) + 712))(*(double *)a2);
  v4.n128_u64[0] = *(void *)(a2 + 8);
  __n128 v5 = *(uint64_t (**)(__n128))(*(void *)(a1 + 26208) + 712);

  return v5(v4);
}

uint64_t OZHostApplicationDelegateHandler::wantsExtraLineSpacingForDiacritics(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsExtraLineSpacingForDiacritics];
}

uint64_t OZHostApplicationDelegateHandler::wantsDynamicLineSpacingForDiacritics(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsDynamicLineSpacingForDiacritics];
}

uint64_t OZHostApplicationDelegateHandler::wantsToScaleEmojiToCapHeight(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToScaleEmojiToCapHeight];
}

uint64_t OZHostApplicationDelegateHandler::wantsToSkipSuggestedLineBreaksInParagraphLayout(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToSkipSuggestedLineBreaksInParagraphLayout];
}

uint64_t OZHostApplicationDelegateHandler::wantsToUseBinarySearchForScalingToBothMargins(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToUseBinarySearchForScalingToBothMargins];
}

uint64_t OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToLimitLinesOfText];
}

uint64_t OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 getNumberOfLinesToLimitTextTo];
}

uint64_t OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToImproveQualityOfDraftQualityText];
}

uint64_t OZHostApplicationDelegateHandler::wantsSameAlignmentForAllLinesOfText(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsSameAlignmentForAllLinesOfText];
}

uint64_t OZHostApplicationDelegateHandler::wantsToDownscaleGlyphsToOutputSize(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToDownscaleGlyphsToOutputSize];
}

uint64_t OZHostApplicationDelegateHandler::wantsToSetTranscriptionsUsingArray(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToSetTranscriptionsUsingArray];
}

uint64_t OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToIgnoreTextBoundsOfTransparentObjects];
}

uint64_t OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions];
}

uint64_t OZHostApplicationDelegateHandler::wantsToUseCachedTextureForText(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToUseCachedTextureForText];
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeSubstituteFontNameInAttributedString(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToIncludeSubstituteFontNameInAttributedString];
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeTrackingValueInAttributedString(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToIncludeTrackingValueInAttributedString];
}

uint64_t OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToComputeTypographicHeightWithoutLastLineLeading];
}

uint64_t OZHostApplicationDelegateHandler::wantsToAdjustTextBoundsHeightUsingCapHeight(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToAdjustTextBoundsHeightUsingCapHeight];
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeTrailingWhitespaceInParagraphLineWidth(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToIncludeTrailingWhitespaceInParagraphLineWidth];
}

uint64_t OZHostApplicationDelegateHandler::wantsToCacheTopLevelGroupRender(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToCacheTopLevelGroupRender];
}

uint64_t OZHostApplicationDelegateHandler::wantsToAssertThatLoadedSceneHasAnimateFlagDisabled(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToAssertThatLoadedSceneHasAnimateFlagDisabled];
}

uint64_t OZHostApplicationDelegateHandler::wantsToAssertThatTopLevelGroupSpansEntireScene(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [v1 wantsToAssertThatTopLevelGroupSpansEntireScene];
}

uint64_t OZHostApplicationDelegateHandler::getMaxGlyphResolution(void **this)
{
  unsigned int v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 4096;
  }

  return [v1 getMaxGlyphResolution];
}

CMMetadataFormatDescriptionRef OZSimplyCreateCMMetadataFormatDescriptionForRawDataWithIdentifier(uint64_t a1)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F1F0F8];
  v6[0] = *MEMORY[0x1E4F1F108];
  v6[1] = v1;
  CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
  uint64_t v2 = *MEMORY[0x1E4F1F020];
  v7[0] = a1;
  v7[1] = v2;
  v8[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
  CFArrayRef v3 = (const __CFArray *)[MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
  if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x6D656278u, v3, &formatDescriptionOut))
  {
    return 0;
  }
  else
  {
    return formatDescriptionOut;
  }
}

void OZFontFamily::~OZFontFamily(PCString *this)
{
  uint64_t v2 = this + 2;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  PCString::~PCString(this + 1);
  PCString::~PCString(this);
}

uint64_t OZFontFamily::getTypefaceIndex(OZFontFamily *this, const PCString *a2)
{
  uint64_t v2 = (PCString **)*((void *)this + 2);
  CFArrayRef v3 = (PCString **)*((void *)this + 3);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  while (1)
  {
    __n128 v6 = *v2;
    int v7 = (std::__shared_weak_count *)v2[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = PCString::compare(v6 + 1, a2);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (!v8) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    v2 += 2;
    if (v2 == v3) {
      return 0;
    }
  }
  return v5;
}

void sub_1B7CD0E2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void OZLayer::OZLayer(OZLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZGroup::OZGroup(this, a2, a3, a4);
  *__n128 v4 = &unk_1F1159320;
  CMTime v4[2] = &unk_1F1159C60;
  v4[6] = &unk_1F1159EB8;
  v4[816] = &unk_1F1159F10;
}

void OZLayer::OZLayer(OZLayer *this, const OZLayer *a2, uint64_t a3)
{
  OZGroup::OZGroup(this, a2, a3);
  *CFArrayRef v3 = &unk_1F1159320;
  int v3[2] = &unk_1F1159C60;
  v3[6] = &unk_1F1159EB8;
  v3[816] = &unk_1F1159F10;
}

void OZLayer::~OZLayer(OZLayer *this)
{
  OZGroup::~OZGroup(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZLayer::~OZLayer(OZLayer *this)
{
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZLayer *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZLayer *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZGroup::~OZGroup((OZLayer *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZFolderElementShadows_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F115A000;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F115A2E8;
  PCURL::PCURL((PCURL *)&v11, @"Channel Shadows Cast");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 128), 1, &v11, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Channel Shadows Receive");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), 1, &v11, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Channel Shadows Only");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 0, &v11, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v11);
}

void sub_1B7CD121C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFolderElementShadows_Factory::getInstance(OZFolderElementShadows_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFolderElementShadows_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    __n128 v4 = &v2;
    CFArrayRef v3 = &v4;
    std::__call_once(&OZFolderElementShadows_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderElementShadows_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderElementShadows_Factory::_instance;
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *uint64_t v5 = &unk_1F115A000;
  uint64_t v5[2] = &unk_1F115A2E8;
  PCURL::PCURL((PCURL *)&v6, @"Channel Shadows Cast");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 128), 1, &v6, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Shadows Receive");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), 1, &v6, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Shadows Only");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 0, &v6, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v6);
}

void sub_1B7CD144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, const OZFolderElementShadows *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F115A000;
  *(void *)(v5 + 16) = &unk_1F115A2E8;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), (const OZChannelBase *)((char *)a2 + 432), (OZChannelFolder *)this);
}

void sub_1B7CD1558(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows::~OZFolderElementShadows(OZFolderElementShadows *this)
{
  *(void *)this = &unk_1F115A000;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F115A2E8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 432));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 280));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZFolderElementShadows::~OZFolderElementShadows(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFolderElementShadows::~OZFolderElementShadows(OZFolderElementShadows *this)
{
}

{
  uint64_t vars8;

  OZFolderElementShadows::~OZFolderElementShadows((OZFolderElementShadows *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZFolderElementShadows::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    OZChannelFolder::operator=(a1);
  }
  return a1;
}

OZFolderElementShadows *OZFolderElementShadows::copy(OZFolderElementShadows *this, const OZFolderElementShadows *a2, const CMTime *a3)
{
  if (a2 != this)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 128), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 128), a3, (double)ValueAsInt, 0);
    int v7 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 280), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 280), a3, (double)v7, 0);
    int v8 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 432), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 432), a3, (double)v8, 0);
  }
  return this;
}

uint64_t non-virtual thunk to'OZFolderElementShadows::writeBody(OZFolderElementShadows *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

void std::__call_once_param<std::tuple<OZFolderElementShadows_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CD17D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows_Factory::OZFolderElementShadows_Factory(OZFolderElementShadows_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B8383310;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F115A358;
  *((void *)this + 16) = &unk_1F115A428;
}

void sub_1B7CD18A8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows_Factory::create(OZFolderElementShadows_Factory *this, const PCString *a2)
{
}

void sub_1B7CD191C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows_Factory::createCopy(OZFolderElementShadows_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CD19D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows_Factory::createChannelCopy(OZFolderElementShadows_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CD1A8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlendMode_Factory::getInstance(OZChannelBlendMode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBlendMode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelBlendMode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlendMode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlendMode_Factory::_instance;
}

void OZChannelBlendMode::OZChannelBlendMode(OZChannelBlendMode *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  uint64_t Instance = (OZFactory *)OZChannelBlendMode_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, a3, a4, Instance, a5, a6, a7, 0, 0);
  *(void *)this = &unk_1F115A480;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F115A7F0;
}

void OZChannelBlendMode::OZChannelBlendMode(OZChannelBlendMode *this, const OZChannelBlendMode *a2, OZChannelFolder *a3)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3);
  *long long v3 = &unk_1F115A480;
  int v3[2] = &unk_1F115A7F0;
}

void non-virtual thunk to'OZChannelBlendMode::~OZChannelBlendMode(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelEnum::~OZChannelEnum(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBlendMode::~OZChannelBlendMode(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBlendMode::clone(OZChannelBlendMode *this)
{
}

void sub_1B7CD1D38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBlendMode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CD1DA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelBlendMode_Factory::OZChannelBlendMode_Factory(OZChannelBlendMode_Factory *this)
{
  long long v3 = xmmword_1B8378BA0;
  long long v4 = xmmword_1B8380B50;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F115A860;
  *((void *)this + 16) = &unk_1F115A930;
}

void sub_1B7CD1E74(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelBlendMode_Factory::create(OZChannelBlendMode_Factory *this, const PCString *a2)
{
}

void sub_1B7CD1F2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelBlendMode_Factory::createCopy(OZChannelBlendMode_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CD2020(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelBlendMode_Factory::createChannelCopy(OZChannelBlendMode_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CD2114(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZElementRender::OZElementRender(OZElementRender *this, OZElement *a2, OZImageNode *a3, const OZRenderParams *a4)
{
  *((void *)this + 183) = &unk_1F1199AC8;
  *((void *)this + 184) = 0;
  *((unsigned char *)this + 1480) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1448), (uint64_t *)&off_1F115ABA8);
  OZImageNodeRender::OZImageNodeRender(this, (OZImageNode *)&off_1F115AB80, a3, a4);
  *(void *)this = &unk_1F115A998;
  *((void *)this + 181) = &unk_1F115AA98;
  *((void *)this + 183) = &unk_1F115AB60;
  *((void *)this + 180) = a2;
}

void sub_1B7CD2234(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName(v3, (const PCString *)&off_1F115ABA8);
  *(void *)(v1 + 1464) = v2;
  *(unsigned char *)(v1 + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1472));
  _Unwind_Resume(a1);
}

uint64_t OZElementRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t virtual thunk to'OZElementRender::getBoundary(void *a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

double OZElementRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 1440) + 1480))(*(void *)(a1 + 1440), v14, a1 + 16);
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 1440) + 1512))(v13);
  uint64_t v10 = v13[0];
  uint64_t v11 = v13[1];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0x3FF0000000000000;
  *(void *)(a3 + 24) = v10;
  *(_OWORD *)(a3 + 3OZChannelEnum::~OZChannelEnum(this - 2) = xmmword_1B7E733E0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 7OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  return result;
}

double virtual thunk to'OZElementRender::fixPixelTransform(void *a1, uint64_t a2, uint64_t a3)
{
  return OZElementRender::fixPixelTransform((uint64_t)a1 + *(void *)(*a1 - 88), a2, a3);
}

void OZImageNodeRender::~OZImageNodeRender(OZImageNodeRender *this)
{
  *(void *)this = &unk_1F115B078;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1440);
  *((void *)this + 180) = &unk_1F115B170;
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZImageNodeRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F115B268);
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *((unsigned char *)this + 147OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
}

{
  OZChannelBase *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F115B078;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1440);
  *((void *)this + 180) = &unk_1F115B170;
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZImageNodeRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F115B268);
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *((unsigned char *)this + 147OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZImageNodeRender::~OZImageNodeRender(OZImageNodeRender *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &unk_1F115B078;
  *((void *)v1 + 180) = &unk_1F115B170;
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F115B268);
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  v1[1472] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &unk_1F115B078;
  *((void *)v1 + 180) = &unk_1F115B170;
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F115B268);
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);

  JUMPOUT(0x1BA9BFBA0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F115B078;
  *((void *)v1 + 180) = &unk_1F115B170;
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F115B268);
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  v1[1472] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F115B078;
  *((void *)v1 + 180) = &unk_1F115B170;
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F115B268);
  *((void *)v1 + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);

  JUMPOUT(0x1BA9BFBA0);
}

void OZElementRender::~OZElementRender(OZElementRender *this)
{
  *(void *)this = &off_1F115ABE8;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1448);
  *((void *)this + 181) = off_1F115ACE0;
  *((void *)this + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZElementRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F115ABA8);
  *((void *)this + 183) = &unk_1F1199AC8;
  *((unsigned char *)this + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 184);
}

{
  OZChannelBase *v2;
  uint64_t vars8;

  *(void *)this = &off_1F115ABE8;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1448);
  *((void *)this + 181) = off_1F115ACE0;
  *((void *)this + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZElementRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F115ABA8);
  *((void *)this + 183) = &unk_1F1199AC8;
  *((unsigned char *)this + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 184);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZElementRender::~OZElementRender(OZElementRender *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &off_1F115ABE8;
  *((void *)v1 + 181) = off_1F115ACE0;
  *((void *)v1 + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1F115ABA8);
  *((void *)v1 + 183) = &unk_1F1199AC8;
  v1[1480] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &off_1F115ABE8;
  *((void *)v1 + 181) = off_1F115ACE0;
  *((void *)v1 + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1F115ABA8);
  *((void *)v1 + 183) = &unk_1F1199AC8;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);

  JUMPOUT(0x1BA9BFBA0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &off_1F115ABE8;
  *((void *)v1 + 181) = off_1F115ACE0;
  *((void *)v1 + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1F115ABA8);
  *((void *)v1 + 183) = &unk_1F1199AC8;
  v1[1480] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &off_1F115ABE8;
  *((void *)v1 + 181) = off_1F115ACE0;
  *((void *)v1 + 183) = off_1F115ADA8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1F115ABA8);
  *((void *)v1 + 183) = &unk_1F1199AC8;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZTextureSource::OZTextureSource(uint64_t a1, const PCSharedCount *a2, long long *a3, long long *a4, int a5, uint64_t a6, long long *a7)
{
  CMTime var0 = a2->var0;
  PCSharedCount::PCSharedCount(&v24, a2 + 1);
  *(void *)a1 = &unk_1F115B038;
  *(void *)(a1 + 8) = var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 16), &v24);
  PCSharedCount::~PCSharedCount(&v24);
  *(void *)a1 = &unk_1F115AFE0;
  long long v13 = *a3;
  long long v14 = a3[1];
  long long v15 = a3[2];
  *(_OWORD *)(a1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = a3[3];
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  long long v16 = a3[4];
  long long v17 = a3[5];
  long long v18 = a3[6];
  *(_OWORD *)(a1 + 136) = a3[7];
  *(_OWORD *)(a1 + 120) = v18;
  *(_OWORD *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 88) = v16;
  long long v19 = *a4;
  *(_OWORD *)(a1 + 168) = a4[1];
  *(_OWORD *)(a1 + 15OZChannelEnum::~OZChannelEnum(this - 2) = v19;
  *(_DWORD *)(a1 + 184) = a5;
  *(void *)(a1 + 19OZChannelEnum::~OZChannelEnum(this - 2) = a6;
  long long v20 = *a7;
  long long v21 = a7[1];
  *(_OWORD *)(a1 + 23OZChannelEnum::~OZChannelEnum(this - 2) = a7[2];
  *(_OWORD *)(a1 + 216) = v21;
  *(_OWORD *)(a1 + 200) = v20;
  return a1;
}

void sub_1B7CD3044(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZTextureSource::makeTexture@<X0>(OZTextureSource *this@<X0>, LiRenderParameters **a2@<X1>, void *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v9);
  v8[0] = 0;
  v8[1] = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a2);
  PGHelium::renderNodeToMetalTexture(HeliumRenderer, &v9, (unsigned int *)v8, *((_DWORD *)this + 46), (OZTextureSource *)((char *)this + 200), a3);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  return result;
}

void sub_1B7CD3124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

void OZTextureSource::getHelium(OZTextureSource *this@<X0>, const LiRenderParameters **a2@<X1>, uint64_t *a3@<X8>)
{
  LiRenderParameters::LiRenderParameters((LiRenderParameters *)v32, a2[6]);
  LiAgent::LiAgent((LiAgent *)v31, (const LiRenderParameters *)v32, 1);
  int32x4_t v22 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 152)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  LiAgent::setClientROI(v31, (__n128 *)&v22);
  v22.i64[0] = *((void *)this + 1);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v22.u64[1], (const PCSharedCount *)this + 2);
  long long v5 = *(_OWORD *)((char *)this + 104);
  long long v27 = *(_OWORD *)((char *)this + 88);
  long long v28 = v5;
  long long v6 = *(_OWORD *)((char *)this + 136);
  long long v29 = *(_OWORD *)((char *)this + 120);
  long long v30 = v6;
  long long v7 = *(_OWORD *)((char *)this + 40);
  long long v23 = *(_OWORD *)((char *)this + 24);
  long long v24 = v7;
  long long v8 = *(_OWORD *)((char *)this + 56);
  long long v9 = *(_OWORD *)((char *)this + 72);
  unint64_t v12 = v22.i64[0];
  long long v25 = v8;
  long long v26 = v9;
  PCSharedCount::PCSharedCount(&v13, (const PCSharedCount *)&v22.u64[1]);
  long long v18 = v27;
  long long v19 = v28;
  long long v20 = v29;
  long long v21 = v30;
  long long v14 = v23;
  long long v15 = v24;
  long long v16 = v25;
  long long v17 = v26;
  int32x4_t v11 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 152)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  HGNodeForImageSourceTransformPair((LiAgent *)v31, (uint64_t)&v12, (uint64_t)&v11, a3);
  PCSharedCount::~PCSharedCount(&v13);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v22.u64[1]);
  LiAgent::~LiAgent((LiAgent *)v31);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v37);
  uint64_t v34 = &unk_1F10AD6B0;
  if (v35 < 0) {
    int v10 = 1;
  }
  else {
    int v10 = v35;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v34, 0, v10);
  if (v36) {
    MEMORY[0x1BA9BFB70](v36, 0x1000C8077774924);
  }
  uint64_t v36 = 0;
  int v35 = 0;
  PCSharedCount::~PCSharedCount(&v33);
}

void sub_1B7CD3330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  PCSharedCount::~PCSharedCount(v49);
  PCSharedCount::~PCSharedCount(v48);
  LiAgent::~LiAgent((LiAgent *)&a48);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void OZTextureSource::~OZTextureSource(PCSharedCount *this)
{
  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115B038;
  PCSharedCount::~PCSharedCount(this + 2);
}

{
  uint64_t vars8;

  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115B038;
  PCSharedCount::~PCSharedCount(this + 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZImageNodeRender::OZImageNodeRender(OZImageNodeRender *this, OZImageNode *a2, const OZRenderParams *a3, const OZRenderParams *a4)
{
  uint64_t v4 = *(void *)a2;
  *(void *)this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = *((void *)a2 + 1);
  *(void *)((char *)this + *(void *)(*(void *)this - 32)) = *((void *)a2 + 2);
  *((void *)this + 1) = a3;
  OZRenderParams::OZRenderParams((OZImageNodeRender *)((char *)this + 16), a4);
}

void OZImageNodeRender::OZImageNodeRender(OZImageNodeRender *this, OZImageNode *a2, const OZRenderParams *a3)
{
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *((void *)this + 183) = 0;
  *((unsigned char *)this + 147OZChannelEnum::~OZChannelEnum(this - 2) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1440), (uint64_t *)&off_1F115B268);
  *(void *)this = &unk_1F115B078;
  *((void *)this + 1) = a2;
  *((void *)this + 180) = &unk_1F115B170;
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115B238;
  OZRenderParams::OZRenderParams((OZImageNodeRender *)((char *)this + 16), a3);
}

void sub_1B7CD3604(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName(v3, (const PCString *)&off_1F115B268);
  *(void *)(v1 + 1456) = v2;
  *(unsigned char *)(v1 + 147OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1464));
  _Unwind_Resume(a1);
}

uint64_t OZImageNodeRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t virtual thunk to'OZImageNodeRender::getBoundary(void *a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t OZImageNodeRender::filteredEdges(OZImageNodeRender *this)
{
  return 0;
}

uint64_t virtual thunk to'OZImageNodeRender::filteredEdges(OZImageNodeRender *this)
{
  return 0;
}

uint64_t OZImageNodeRender::pixelTransformSupport(OZImageNodeRender *this, const LiRenderParameters *a2)
{
  return 3;
}

uint64_t virtual thunk to'OZImageNodeRender::pixelTransformSupport(OZImageNodeRender *this, const LiRenderParameters *a2)
{
  return 3;
}

CGColorSpace **OZImageNodeRender::getHelium(OZImageNodeRender *this, LiAgent *a2)
{
  double v42 = 0.0;
  double v43 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)unint64_t v44 = _Q0;
  long long v9 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = *v9;
  unint64_t v12 = v11;
  if (v11) {
    (*(void (**)(void *, double *, char *))(*(void *)v11 + 1480))(v11, &v42, (char *)this + 16);
  }
  else {
    (*(void (**)(uint64_t *, double *, char *))(v10 + 16))(v9, &v42, (char *)this + 16);
  }
  int v13 = vcvtpd_s64_f64(v43 + v44[1]) - vcvtmd_s64_f64(v43 + 0.0000001);
  int v14 = *((_DWORD *)this + 85);
  int v15 = *((_DWORD *)this + 86);
  OZRenderParams::setWidth((OZImageNodeRender *)((char *)this + 16), vcvtpd_s64_f64(v42 + v44[0]) - vcvtmd_s64_f64(v42 + 0.0000001));
  OZRenderParams::setHeight((OZImageNodeRender *)((char *)this + 16), v13);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace((FxColorDescription *)((char *)this + 16), CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)this + 16, *(float *)(*((void *)a2 + 6) + 192));
  int v17 = *((_DWORD *)this + 84);
  if (*(_DWORD *)(*(void *)LiAgent::getRenderDevice((LiRenderParameters **)a2) + 8)) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  OZRenderParams::setImageType((uint64_t)this + 16, v18);
  char v19 = *((unsigned char *)this + 376);
  *((unsigned char *)this + 376) = 1;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  long long v20 = (long long *)*((void *)a2 + 20);
  long long v21 = v20[3];
  long long v23 = *v20;
  long long v22 = v20[1];
  long long v36 = v20[2];
  long long v37 = v21;
  v35[0] = v23;
  v35[1] = v22;
  long long v24 = v20[7];
  long long v26 = v20[4];
  long long v25 = v20[5];
  long long v40 = v20[6];
  long long v41 = v24;
  long long v38 = v26;
  long long v39 = v25;
  RequestedColorDescriptiouint64_t n = LiAgent::getRequestedColorDescription(a2);
  long long v28 = *(CGColorSpace **)RequestedColorDescription;
  v34._pcColorDesc._colorSpaceRef._obuint64_t j = v28;
  if (v28) {
    PCCFRefTraits<CGColorSpace *>::retain(v28);
  }
  uint64_t v29 = *(void *)(RequestedColorDescription + 8);
  v34._pcColorDesc._toneMapMethod._gaiuint64_t n = *(float *)(RequestedColorDescription + 16);
  *(void *)&v34._pcColorDesc._dynamicRange = v29;
  v34._isPremultiplied = *(unsigned char *)(RequestedColorDescription + 24);
  uint64_t v30 = *((void *)this + 1);
  uint64_t HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  (*(void (**)(uint64_t, char *, uint64_t, FxColorDescription *, _OWORD *))(*(void *)v30 + 192))(v30, (char *)this + 16, HeliumRenderer, &v34, v35);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, &v34);
  OZRenderParams::setWidth((OZImageNodeRender *)((char *)this + 16), v14);
  OZRenderParams::setHeight((OZImageNodeRender *)((char *)this + 16), v15);
  OZRenderParams::setImageType((uint64_t)this + 16, v17);
  *((unsigned char *)this + 376) = v19;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  if (v12)
  {
    double v32 = (*(double (**)(void *))(*(void *)v12 + 1328))(v12);
    if (v32 != 1.0)
    {
      *(double *)int v35 = v32 * *(double *)v35;
      *(double *)&long long v36 = v32 * *(double *)&v36;
      *(double *)&long long v38 = v32 * *(double *)&v38;
      *(double *)&long long v40 = v32 * *(double *)&v40;
    }
  }
  LiAgent::setPixelTransform((uint64_t)a2, (uint64_t)v35);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v34._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B7CD3A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **virtual thunk to'OZImageNodeRender::getHelium(OZImageNodeRender *this, LiAgent *a2)
{
  return OZImageNodeRender::getHelium((OZImageNodeRender *)((char *)this + *(void *)(*(void *)this - 184)), a2);
}

unint64_t OZImageNodeRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  long long v3 = *(const void **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  if (!v5) {
    return 0;
  }

  return OZImageElement::estimateRenderMemory(v5, a2, (unsigned int *)(a1 + 16));
}

unint64_t virtual thunk to'OZImageNodeRender::estimateRenderMemory(void *a1, uint64_t a2)
{
  return OZImageNodeRender::estimateRenderMemory((uint64_t)a1 + *(void *)(*a1 - 136), a2);
}

void *OZImageNodeRender::print(uint64_t a1, void *a2, int a3)
{
  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"OZImageNodeRender:\n", 19);
  LiImageSource::printIndent(a2, a3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"_imageunint64_t Node = ", 13);
  uint64_t result = (void *)std::ostream::operator<<();
  if (*(void *)(a1 + 8))
  {
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", type = ", 9);
    long long v8 = *(void **)(a1 + 8);
    if (!v8) {
      __cxa_bad_typeid();
    }
    long long v9 = v7;
    uint64_t v10 = (const char *)(*(void *)(*(void *)(*v8 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    uint64_t result = *(void **)(a1 + 8);
    if (result)
    {
      if (result)
      {
        unint64_t v12 = result;
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", name = ", 9);
        unsigned int Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v12 + 2));
        CStr = PCString::createCStr(Name);
        if (CStr)
        {
          long long v16 = CStr;
          size_t v17 = strlen(CStr);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v16, v17);
          free(v16);
        }
        return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      }
    }
  }
  return result;
}

void OZChannelRetimeFrame::OZChannelRetimeFrame(OZChannelRetimeFrame *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelDouble::OZChannelDouble(this, a2, a3, a4, a5, a6, 0, 0);
  *long long v6 = &unk_1F115B4B8;
  void v6[2] = &unk_1F115B818;
  v6[7] |= 0x100uLL;
}

void OZChannelRetimeFrame::OZChannelRetimeFrame(OZChannelRetimeFrame *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *long long v3 = &unk_1F115B4B8;
  int v3[2] = &unk_1F115B818;
  v3[7] |= 0x100uLL;
}

void non-virtual thunk to'OZChannelRetimeFrame::~OZChannelRetimeFrame(OZChannelRetimeFrame *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelRetimeFrame::~OZChannelRetimeFrame(OZChannel *this)
{
  OZChannel::~OZChannel(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelRetimeFrame::clone(OZChannelRetimeFrame *this)
{
}

void sub_1B7CD3EC8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChanFootageRef::OZChanFootageRef(OZChanFootageRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  *(void *)uint64_t v5 = &unk_1F115B888;
  *(void *)(v5 + 16) = &unk_1F115BC08;
  *(_WORD *)(v5 + 157) = 0;
}

void OZChanFootageRef::OZChanFootageRef(OZChanFootageRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *uint64_t v5 = &unk_1F115B888;
  uint64_t v5[2] = &unk_1F115BC08;
  if (v6)
  {
    char v7 = v6[157];
    char v8 = v6[158];
  }
  else
  {
    char v7 = 0;
    char v8 = 0;
  }
  *((unsigned char *)this + 157) = v7;
  *((unsigned char *)this + 158) = v8;
}

void non-virtual thunk to'OZChanFootageRef::~OZChanFootageRef(OZChanFootageRef *this)
{
}

{
  uint64_t vars8;

  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanFootageRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanFootageRef::~OZChanFootageRef(OZChanFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanFootageRef::clone(OZChanFootageRef *this)
{
}

void sub_1B7CD40DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C7FA5B0DLL);
  _Unwind_Resume(a1);
}

uint64_t OZChanFootageRef::canReferenceObject(OZChanFootageRef *this, const OZObjectManipulator *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (*((unsigned char *)this + 157))
  {
    if (!v4 || !(*(unsigned int (**)(void *))(*(void *)v4 + 1352))(v4)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 158))
  {
    if (!v4 || !(*(unsigned int (**)(void *))(*(void *)v4 + 1360))(v4)) {
      return 0;
    }
  }
  else if (!v4)
  {
    return 0;
  }

  return OZChanSceneNodeRef::canReferenceObject((OZChannelBase *)this, lpsrc);
}

void OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 536));
  *(void *)this = &unk_1F115BC78;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115BF40;
  *((void *)this + 6) = &unk_1F115C198;
  *((void *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115C1F0;
  *((void *)this + 67) = &unk_1F115C218;
  PCString::PCString(&v7, "None;Static;Dynamic;Kinematic");
  PCString::PCString(&v6, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
}

void sub_1B7CD4344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZLocking::~OZLocking(v11);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this, const OZ3DEnginePhysicsBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 536));
  *(void *)this = &unk_1F115BC78;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115BF40;
  *((void *)this + 6) = &unk_1F115C198;
  *((void *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115C1F0;
  *((void *)this + 67) = &unk_1F115C218;
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736), (const OZ3DEnginePhysicsBehavior *)((char *)a2 + 736), (OZChannelFolder *)((char *)this + 56));
}

void sub_1B7CD4474(_Unwind_Exception *a1)
{
  OZLocking::~OZLocking(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this)
{
  *(void *)this = &unk_1F115BC78;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115BF40;
  *((void *)this + 6) = &unk_1F115C198;
  *((void *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115C1F0;
  *((void *)this + 67) = &unk_1F115C218;
  OZChannelEnum::~OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736));
  *((void *)this + 67) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 664));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 544));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this)
{
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 48));
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEnginePhysicsBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 736, (uint64_t)v4 + 736);
}

OZChannelBehavior *OZ3DEnginePhysicsBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    long long v3 = this;
    if (this)
    {
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      operator new();
    }
  }
  return this;
}

void sub_1B7CD484C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEnginePhysicsBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  PCString v7 = (char *)(result + 536);
  for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7) {
        return result;
      }
      ++i;
    }
  }
  size_t v11 = (char *)(result + 536);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  uint64_t v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  size_t v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEnginePhysicsBehavior::getLockDependencies(a1 - 536, a2, a3, a4);
}

uint64_t OZ3DEnginePhysicsBehavior::getLockingGroups(OZ3DEnginePhysicsBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZ3DEnginePhysicsBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZ3DEnginePhysicsBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockingGroups(OZ3DEnginePhysicsBehavior *this)
{
  uint64_t v1 = (char *)this - 536;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 67) + 336))((char *)this - 536);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

void OZ3DEnginePhysicsBehaviorNode::~OZ3DEnginePhysicsBehaviorNode(OZ3DEnginePhysicsBehaviorNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZ3DEnginePhysicsBehaviorNode::solveNode(OZ3DEnginePhysicsBehaviorNode *this, const CMTime *a2, double a3, double a4)
{
  PCString v7 = (OZChannelBase *)(*(uint64_t (**)(void, double))(**((void **)this + 4) + 312))(*((void *)this + 4), a3);
  if (OZChannelBase::isEnabled(v7, 0, 1))
  {
    if ((*(unsigned char *)((*(uint64_t (**)(void))(**((void **)this + 4) + 320))(*((void *)this + 4)) + 1024) & 2) == 0)
    {
      uint64_t v8 = *((void *)this + 4);
      long long v10 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      if ((*(unsigned int (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 296))(v8, &v10, 1, 1, 1))
      {
        return (double)OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 4) + 736), a2, 0.0);
      }
    }
  }
  return a4;
}

double OZ3DEnginePhysicsBehaviorNode::solveNode(OZ3DEnginePhysicsBehaviorNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  long long v3 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v8.int64_t value = v3;
  v8.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v6 = 0;
    do
    {
      *(double *)(v2 + 8 * v6) = (double)OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 4) + 736), &v8, 0.0);
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      *(void *)&long long v3 = v12.value;
      CMTime v8 = v12;
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
  return *(double *)&v3;
}

uint64_t non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockingID(OZ3DEnginePhysicsBehavior *this)
{
  return *((unsigned int *)this - 114);
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChanFootageRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
}

void sub_1B7CD4D50(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanFootageRefWithPicker_Factory::getInstance(OZChanFootageRefWithPicker_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanFootageRefWithPicker_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChanFootageRefWithPicker_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanFootageRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanFootageRefWithPicker_Factory::_instance;
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7CD4E50(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, const OZChanFootageRefWithPicker *a2, OZChannelFolder *a3)
{
}

void sub_1B7CD4EE4(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanFootageRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CD4F48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker_Factory::OZChanFootageRefWithPicker_Factory(OZChanFootageRefWithPicker_Factory *this)
{
  long long v3 = xmmword_1B8381310;
  long long v4 = xmmword_1B8383440;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F115C778;
  *((void *)this + 16) = &unk_1F115C848;
}

void sub_1B7CD5018(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker_Factory::create(OZChanFootageRefWithPicker_Factory *this, const PCString *a2)
{
}

void sub_1B7CD508C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker_Factory::createCopy(OZChanFootageRefWithPicker_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CD5144(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker_Factory::createChannelCopy(OZChanFootageRefWithPicker_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CD51FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZLockingElement::OZLockingElement(OZLockingElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZLocking::OZLocking(this);
  OZElement::OZElement((OZElement *)(v8 + 200), a2, a3, a4);
  *(void *)this = &unk_1F115C8A0;
  *((void *)this + 25) = &unk_1F115C900;
  *((void *)this + 27) = &unk_1F115D1D8;
  *((void *)this + 31) = &unk_1F115D430;
  *((void *)this + 841) = &unk_1F115D488;
}

void sub_1B7CD530C(_Unwind_Exception *a1)
{
  OZLocking::~OZLocking(v1);
  _Unwind_Resume(a1);
}

void OZLockingElement::OZLockingElement(OZLockingElement *this, const OZElement *a2, uint64_t a3)
{
  OZLocking::OZLocking(this);
  OZElement::OZElement((OZElement *)(v6 + 200), a2, a3);
  *(void *)this = &unk_1F115C8A0;
  *((void *)this + 25) = &unk_1F115C900;
  *((void *)this + 27) = &unk_1F115D1D8;
  *((void *)this + 31) = &unk_1F115D430;
  *((void *)this + 841) = &unk_1F115D488;
}

void sub_1B7CD5404(_Unwind_Exception *a1)
{
  OZLocking::~OZLocking(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLockingElement::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  OZSceneNode::willRemoveFromScene((uint64_t)this + 200, (uint64_t)a2);

  return OZLocking::removeFromLockingGroup(this);
}

uint64_t non-virtual thunk to'OZLockingElement::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  char v2 = (OZLockingElement *)((char *)this - 200);
  OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);

  return OZLocking::removeFromLockingGroup(v2);
}

uint64_t OZLockingElement::getLockingGroups(OZLockingElement *this)
{
  uint64_t v1 = (char *)this + 200;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 272))(v1) + 1784;
  }
  return result;
}

char *OZLockingElement::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZLocking::getLockDependenciesForElement((char *)(a1 + 200), a2, a3, a4);
}

void OZMoShape::OZMoShape(OZMoShape *this, OZRotoshape *a2, OZChannelFolder *a3, OZChannelFolder *a4)
{
}

void sub_1B7CD57C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  uint64_t v16 = *(void *)(v11 + 19104);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v14, *(void **)(v11 + 19088));
  size_t v17 = *(std::__shared_weak_count **)(v11 + 19072);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  PCSharedMutex::~PCSharedMutex(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZShape::~OZShape((OZShape *)v11);
  _Unwind_Resume(a1);
}

void OZMoShape::OZMoShape(OZMoShape *this, const OZMoShape *a2, OZRotoshape *a3, OZChannelFolder *a4, OZChannelFolder *a5)
{
}

void sub_1B7CD5C58(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 19104);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v4, *(void **)(v1 + 19088));
  PCString v7 = *(std::__shared_weak_count **)(v1 + 19072);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  PCSharedMutex::~PCSharedMutex(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZShape::~OZShape((OZShape *)v1);
  _Unwind_Resume(a1);
}

void *OZMoShape::initPPaintTime(void *this, CMTime *a2, const PCTimeRange *a3)
{
  uint64_t v3 = this[2360];
  if (v3)
  {
    (*(void (**)(void, const PCTimeRange *, void))(*(void *)v3 + 1136))(this[2360], a3, 0);
    CMTime v9 = *a2;
    (*(void (**)(uint64_t, CMTime *, void))(*(void *)v3 + 1120))(v3, &v9, 0);
    this = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 976))(v3, 0);
    if (this)
    {
      if (this)
      {
        uint64_t v6 = this;
        (*(void (**)(void *, const PCTimeRange *, void))(*this + 1136))(this, a3, 0);
        long long v7 = *(_OWORD *)&a2->value;
        CMTimeEpoch epoch = a2->epoch;
        return (void *)(*(uint64_t (**)(void *, long long *, void))(*v6 + 1120))(v6, &v7, 0);
      }
    }
  }
  return this;
}

void OZMoShape::~OZMoShape(OZMoShape *this)
{
  *(void *)this = &unk_1F115D598;
  char v2 = (PCMutex *)((char *)this + 8);
  PCMutex::lock((PCMutex *)((char *)this + 8));
  uint64_t v3 = *((void *)this + 2360);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 2360) = 0;
  *((void *)this + 2389) = 0;
  PCMutex::unlock(v2);
  uint64_t v4 = *((void *)this + 2388);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)this + 19080, *((void **)this + 2386));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2384);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  PCSharedMutex::~PCSharedMutex((std::mutex *)this + 296);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18728));

  OZShape::~OZShape(this);
}

{
  uint64_t vars8;

  OZMoShape::~OZMoShape(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZMoShape::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (PCMutex *)(a1 + 8);
  PCMutex::lock((PCMutex *)(a1 + 8));
  OZShape::operator=((uint64_t *)a1, a2);
  if (*(void *)(a1 + 18880))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 18888) + 96))(*(void *)(a1 + 18888), *(void *)(a2 + 18880));
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 18880);
    if (v5)
    {
      uint64_t v6 = (const void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8), v5, 2);
      *(void *)(a1 + 18880) = v7;
      uint64_t v8 = *(void *)(a1 + 19112);
      if (v8) {
        uint64_t v9 = v8 + 200;
      }
      else {
        uint64_t v9 = 0;
      }
      (*(void (**)(void *, uint64_t))(*(void *)v7 + 256))(v7, v9);
      CMTime v10 = *(uint64_t **)(a1 + 18880);
      uint64_t v11 = *v10;
      CMTime v12 = (OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v11 + 640))(v10);
      OZChannelFolder::push_front((OZChannelFolder *)(a1 + 18728), v12);
    }
  }
  *(_OWORD *)(a1 + 18928) = 0u;
  *(_OWORD *)(a1 + 1891OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(a1 + 18896) = 0u;
  *(_DWORD *)(a1 + 18876) = *(_DWORD *)(a2 + 18876);
  return PCMutex::unlock(v4);
}

void sub_1B7CD6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZMoShape::reparentChannels(OZMoShape *this, OZChannelFolder *a2, int a3)
{
  uint64_t v5 = (OZChannelFolder *)((char *)this + 80);
  if (a3)
  {
    double v31 = (OZChannelBase *)((char *)this + 208);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 80), (OZChannelBase *)((char *)this + 208));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1072));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1328));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1480));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1632));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1784));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 2784));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 11512));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13008));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14904));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 15608));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 16312));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17016));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17872));
    OZChannelBase::setID(v31, 0x13Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1072), 0x12Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1328), 0x13Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1480), 0x158u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1632), 0x160u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1784), 0x149u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 2784), 0x139u);
    OZChannelBase::setID((OZChannelBase *)this + 26, 0x13Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 3168), 0x137u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4176), 0x155u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4328), 0x130u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6800), 0x134u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6928), 0x153u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 7184), 0x133u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 0x2000), 0x156u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8344), 0x131u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8496), 0x143u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8648), 0x138u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8904), 0x13Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9160), 0x14Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9416), 0x14Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9568), 0x14Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9720), 0x132u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9976), 0x146u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10128), 0x147u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10280), 0x14Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10440), 0x148u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10592), 0x14Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10744), 0x150u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10904), 0x151u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11352), 0x152u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11512), 0x12Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13008), 0x12Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13264), 0x13Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13416), 0x140u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13568), 0x141u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13720), 0x14Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13872), 0x159u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14024), 0x157u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14904), 0x15Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 15608), 0x15Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 16312), 0x15Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17016), 0x15Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17720), 0x15Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17872), 0x15Fu);
    OZChannelFolder::push_back(a2, v31);
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1072));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1328));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1480));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1632));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1784));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 2784));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 11512));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 12856));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13008));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 14904));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 15608));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 16312));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17016));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17872));
  }
  else
  {
    long long v23 = (OZChannelBase *)((char *)this + 12856);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 80), (OZChannelBase *)((char *)this + 12856));
    long long v22 = (OZChannelBase *)((char *)this + 2488);
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 2488));
    long long v24 = (OZChannelBase *)((char *)this + 14280);
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14280));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 208));
    long long v21 = (OZChannelBase *)((char *)this + 1072);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1072));
    char v19 = (OZChannelBase *)((char *)this + 1328);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1328));
    int v18 = (OZChannelBase *)((char *)this + 1480);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1480));
    size_t v17 = (OZChannelBase *)((char *)this + 1632);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1632));
    uint64_t v16 = (OZChannelBase *)((char *)this + 1784);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1784));
    long long v20 = (OZChannelBase *)((char *)this + 2784);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 2784));
    int v15 = (OZChannelBase *)((char *)this + 6800);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 11512));
    uint64_t v30 = (OZChannelBase *)((char *)this + 13008);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13008));
    long long v25 = (OZChannelBase *)((char *)this + 13264);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 14904));
    uint64_t v29 = (OZChannelBase *)((char *)this + 15608);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 15608));
    long long v28 = (OZChannelBase *)((char *)this + 16312);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 16312));
    long long v27 = (OZChannelBase *)((char *)this + 17016);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17016));
    long long v26 = (OZChannelBase *)((char *)this + 17720);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17872));
    OZChannelBase::setID((OZChannelBase *)((char *)this + 208), 0x75u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1072), 0x64u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1328), 0x74u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1480), 0x90u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1632), 0x98u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1784), 0x81u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 2784), 0x71u);
    OZChannelBase::setID((OZChannelBase *)this + 26, 0x72u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 3168), 0x6Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4176), 0x8Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4328), 0x68u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6800), 0x6Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6928), 0x8Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 7184), 0x6Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 0x2000), 0x8Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8344), 0x69u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8496), 0x7Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8648), 0x70u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8904), 0x77u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9160), 0x86u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9416), 0x84u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9568), 0x85u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9720), 0x6Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9976), 0x7Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10128), 0x7Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10280), 0x87u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10440), 0x80u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10592), 0x83u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10744), 0x88u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10904), 0x89u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11352), 0x8Au);
    uint64_t v6 = (OZChannelBase *)((char *)this + 11512);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11512), 0x66u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13008), 0x67u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13264), 0x73u);
    long long v7 = (OZChannelBase *)((char *)this + 13416);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13416), 0x78u);
    uint64_t v8 = (OZChannelBase *)((char *)this + 13568);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13568), 0x79u);
    uint64_t v9 = (OZChannelBase *)((char *)this + 13720);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13720), 0x82u);
    CMTime v10 = (OZChannelBase *)((char *)this + 13872);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13872), 0x91u);
    uint64_t v11 = (OZChannelBase *)((char *)this + 14024);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14024), 0x8Fu);
    CMTime v12 = (OZChannelBase *)((char *)this + 14904);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14904), 0x92u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 15608), 0x93u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 16312), 0x94u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17016), 0x95u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17720), 0x96u);
    int v13 = (OZChannelBase *)((char *)this + 17872);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17872), 0x97u);
    uint64_t v14 = (OZChannelBase *)((char *)this + 208);
    OZChannelFolder::push_back(v5, v14);
    OZChannelFolder::push_back(v5, v21);
    OZChannelFolder::push_back(v5, v19);
    OZChannelFolder::push_back(v5, v18);
    OZChannelFolder::push_back(v5, v17);
    OZChannelFolder::push_back(v5, v16);
    OZChannelFolder::push_back(v5, v22);
    OZChannelFolder::push_back(v5, v20);
    OZChannelFolder::push_back(v5, v15);
    OZChannelFolder::push_back(v5, v6);
    OZChannelFolder::push_back(v5, v23);
    OZChannelFolder::push_back(v5, v30);
    OZChannelFolder::push_back(v5, v25);
    OZChannelFolder::push_back(v5, v7);
    OZChannelFolder::push_back(v5, v8);
    OZChannelFolder::push_back(v5, v9);
    OZChannelFolder::push_back(v5, v10);
    OZChannelFolder::push_back(v5, v11);
    OZChannelFolder::push_back(v5, v24);
    OZChannelFolder::push_back(v5, v12);
    OZChannelFolder::push_back(v5, v29);
    OZChannelFolder::push_back(v5, v28);
    OZChannelFolder::push_back(v5, v27);
    OZChannelFolder::push_back(v5, v26);
    OZChannelFolder::push_back(v5, v13);
    OZChannelBase::resetFlag(v14, 0x40000000, 0);
  }
}

void *OZMoShape::completeLoading(OZMoShape *this, double a2)
{
  if (*((void *)this + 2360))
  {
    if (a2 < 3.0)
    {
      (*(void (**)(OZRenderState *__return_ptr))(*(void *)(*((void *)this + 2389) + 200) + 1128))(&v37);
      CMTime var0 = (CMTime)v37.var0;
      OZMoShape::initPPaintTime(this, &var0, (const PCTimeRange *)&v37);
      uint64_t v3 = (OZScene *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
      OZScene::registerNode(v3, *((OZSceneNode **)this + 2360));
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
      uint64_t v5 = (OZSceneNode *)*((void *)this + 2360);
      return (void *)OZScene::addAllDependencies(v4, v5);
    }
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
    if (result)
    {
      long long v21 = (OZScene *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
      uint64_t result = OZScene::getNode(v21, *(_DWORD *)(*((void *)this + 2360) + 80));
      if (!result)
      {
        long long v22 = (OZScene *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
        OZScene::registerNode(v22, *((OZSceneNode **)this + 2360));
        uint64_t v23 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
        long long v24 = (OZSceneNode *)*((void *)this + 2360);
        return (void *)OZScene::addAllDependencies(v23, v24);
      }
    }
  }
  else
  {
    uint64_t v6 = (OZScene *)(*(uint64_t (**)(double))(*(void *)(*((void *)this + 2389) + 200) + 272))(a2);
    if (!*(unsigned char *)(theApp + 80)) {
      goto LABEL_8;
    }
    if (OZBehavior::IsChannelAffectedByBehaviors((OZMoShape *)((char *)this + 6928), 0)) {
      goto LABEL_8;
    }
    if (OZScene::isChannelPublished(v6, (OZChannelBase *)((char *)this + 6928))) {
      goto LABEL_8;
    }
    long long v7 = (PCColorSpaceCache *)OZRenderState::OZRenderState(&v37);
    uint64_t v8 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(v7);
    __asm { FMOV            V0.2D, #1.0 }
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v35, v8);
    CMTime v27 = (CMTime)v37.var0;
    __int16 var10 = v37.var10;
    BOOL var16 = v37.var16;
    long long v30 = *(_OWORD *)&v37.var1;
    int v36 = 1065353216;
    int v31 = 1;
    int shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this, &v27);
    uint64_t result = PCCFRef<CGColorSpace *>::~PCCFRef(&v35);
    if (shouldDrawParticles)
    {
LABEL_8:
      uint64_t v16 = theApp;
      *(_OWORD *)&v37.var0.CMTime var0 = xmmword_1B837FEB0;
      PCURL::PCURL((PCURL *)&v27, @"Emitter Name");
      OZChannelBase::getNextUniqueID(v17);
      *((void *)this + 2360) = OZApplication::createSceneNode(v16, (unsigned int *)&v37);
      PCString::~PCString((PCString *)&v27);
      int v18 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 2360) + 640))();
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v18);
      (*(void (**)(void))(**((void **)this + 2360) + 256))();
      char v19 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 2360) + 640))();
      OZChannelBase::setFlag(v19, 8, 0);
      long long v20 = (void *)*((void *)this + 2360);
      if (v20) {
      *((void *)this + 2361) = v20;
      }
      (*(void (**)(OZRenderState *__return_ptr))(*(void *)(*((void *)this + 2389) + 200) + 1128))(&v37);
      CMTime v26 = (CMTime)v37.var0;
      OZMoShape::initPPaintTime(this, &v26, (const PCTimeRange *)&v37);
      OZScene::registerNode(v6, *((OZSceneNode **)this + 2360));
      uint64_t v5 = (OZSceneNode *)*((void *)this + 2360);
      uint64_t v4 = (uint64_t)v6;
      return (void *)OZScene::addAllDependencies(v4, v5);
    }
  }
  return result;
}

void sub_1B7CD7304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v17);
  _Unwind_Resume(a1);
}

void OZMoShape::validateChannels(OZMoShape *this, const CMTime *a2, OZShapeRenderParams *a3, BOOL a4, int a5)
{
  OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 2389) + 6880), a2, 0.0);
  if (*((double *)a3 + 20) != v9 && a5 != 0) {
    *((double *)a3 + 20) = v9;
  }
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 2389) + 384))(*((void *)this + 2389));
  if (*((unsigned __int8 *)a3 + 240) != v11 && a5 != 0)
  {
    *((unsigned char *)a3 + 240) = v11;
    *((_WORD *)a3 + 596) = 257;
    *((unsigned char *)a3 + 1194) = 1;
  }

  OZShape::validateChannels(this, (const OZShapeRenderState *)a2, a3);
}

void OZMoShape::getHelium(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 56) + 128))(*(void *)(a2 + 56), 43);
  BOOL v11 = v10 == 1;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v13 = OZHostApplicationDelegateHandler::wantsToCacheTopLevelGroupRender(HostApplicationDelegate);
  uint64_t v14 = *(HGGPURenderer **)(a2 + 56);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v77);
  int v15 = (OZLockingGroup *)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 19112));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v74, v15);
  OZMoShape::calcHashkey(a1);
  HGRect v77 = v75;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v74);
  unint64_t v70 = (std::mutex *)(a1 + 18944);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 18944));
  uint64_t v67 = (uint64_t)v14;
  if (v13
    || *(unsigned char *)(a2 + 24)
    || !*(void *)&vorr_s8(*(int8x8_t *)&v77.var0, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL)))
  {
    char v16 = 0;
    int v18 = (unsigned char *)(a2 + 25);
    int v17 = *(unsigned __int8 *)(a2 + 25);
    int v19 = 1;
    goto LABEL_4;
  }
  uint16x4_t v24 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v77, *(int32x4_t *)(a1 + 19048))));
  v24.i16[0] = vmaxv_u16(v24);
  int v19 = v24.i32[0];
  char v16 = v24.i8[0] ^ 1;
  int v18 = (unsigned char *)(a2 + 25);
  int v17 = *(unsigned __int8 *)(a2 + 25);
  if ((v24.i8[0] & 1) != 0 || (v10 == 1 ? (BOOL v25 = v17 == 0) : (BOOL v25 = 0), !v25))
  {
LABEL_4:
    if (v17)
    {
      if (*(void *)(a1 + 19104)) {
        goto LABEL_10;
      }
    }
    else if (*(void *)(a1 + 19064))
    {
LABEL_10:
      int v20 = 1;
      goto LABEL_11;
    }
    if (v10 != 1)
    {
      int v20 = 1;
      BOOL v11 = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t MetalContext = HGGPURenderer::GetMetalContext(v14);
  unint64_t v27 = OZMetalUtils::registryID(*(void *)(*(void *)(MetalContext + 16) + 16));
  long long v28 = *(void **)(a1 + 19088);
  if (!v28) {
    goto LABEL_39;
  }
  uint64_t v29 = a1 + 19088;
  do
  {
    unint64_t v30 = v28[4];
    BOOL v31 = v30 >= v27;
    if (v30 >= v27) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = v28 + 1;
    }
    if (v31) {
      uint64_t v29 = (uint64_t)v28;
    }
    long long v28 = (void *)*v32;
  }
  while (*v32);
  if (v29 == a1 + 19088 || v27 < *(void *)(v29 + 32) || (int v66 = *(HGBitmap **)(v29 + 40)) == 0)
  {
LABEL_39:
    int v17 = *v18;
    char v16 = 1;
    goto LABEL_4;
  }
  uint64_t v33 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v33, v66);
  int v20 = 0;
  BOOL v11 = 0;
  *a6 = v33;
  char v16 = 1;
LABEL_11:
  PCSharedMutex::unlock_shared(v70);
  if (!v20) {
    return;
  }
  uint64_t v76 = 0;
  if ((v19 | v11))
  {
    OZShapeRenderParams::OZShapeRenderParams((OZShapeRenderParams *)&v75);
    long long v21 = (OZLockingGroup *)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 19112));
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v74, v21);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, HGRect *))(*(void *)a1 + 72))(a1, a2, a3, a4, a5, &v75);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v74);
    if (v22)
    {
      (*(void (**)(HGRect *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, HGRect *))(*(void *)a1 + 80))(&v74, a1, a2, a3, a4, &v75);
      uint64_t v23 = *(HGNode **)&v74.var0;
      if (v76 != *(HGNode **)&v74.var0)
      {
        if (v76)
        {
          (*(void (**)(void))(*(void *)v76 + 24))();
          uint64_t v23 = *(HGNode **)&v74.var0;
        }
        uint64_t v76 = v23;
        if (!v23) {
          goto LABEL_48;
        }
        goto LABEL_42;
      }
      if (v76)
      {
        (*(void (**)(void))(*(void *)v76 + 24))();
        if (v76)
        {
LABEL_42:
          OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)&v75);
          goto LABEL_43;
        }
      }
    }
LABEL_48:
    *a6 = 0;
    OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)&v75);
    goto LABEL_92;
  }
LABEL_43:
  PCSharedMutex::lock(v70);
  if ((v16 & 1) == 0)
  {
    if (!*(unsigned char *)(a2 + 24))
    {
      *(HGRect *)(a1 + 19048) = v77;
      int v36 = *(std::__shared_weak_count **)(a1 + 19072);
      *(void *)(a1 + 19064) = 0;
      *(void *)(a1 + 1907OZChannelEnum::~OZChannelEnum(this - 2) = 0;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1 + 19080, *(void **)(a1 + 19088));
      *(void *)(a1 + 19080) = a1 + 19088;
      *(void *)(a1 + 19096) = 0;
      *(void *)(a1 + 19088) = 0;
      uint64_t v37 = *(void *)(a1 + 19104);
      if (v37)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
        *(void *)(a1 + 19104) = 0;
      }
    }
    goto LABEL_54;
  }
  if (!v11) {
    goto LABEL_83;
  }
  uint64_t v34 = *(void *)(a2 + 72);
  OZRenderParams::getWorkingColorSpace((FxColorDescription *)v34);
  *(void *)&v75.CMTime var0 = 0;
  *(void *)&v75.var2 = 0;
  *(void *)&v75.CMTime var0 = HGRenderer::GetDOD(*(HGRenderer **)(a2 + 56), v76);
  *(void *)&v75.var2 = v35;
  HGRect::Init(&v74, -1, -1, 1, 1);
  HGRect::Grow(&v75, v74);
  HGRect v74 = (HGRect)xmmword_1B7E74760;
  if (!HGRectIsNull(*(uint64_t *)&v75.var0, *(uint64_t *)&v75.var2))
  {
    int32x2_t v38 = vmax_s32(*(int32x2_t *)&v75.var0, vdup_n_s32(0xC0000001));
    int32x2_t v39 = vsub_s32(vmin_s32(*(int32x2_t *)&v75.var2, vdup_n_s32(0x3FFFFFFEu)), v38);
    *(int32x2_t *)&v74.CMTime var0 = v38;
    *(int32x2_t *)&v74.var2 = v39;
    if ((v39.i32[0] - 100001) < 0xFFFE7960 || v39.i32[1] < 1 || v39.i32[1] >= 0x186A1u) {
      goto LABEL_47;
    }
    if (v10 == 1)
    {
      int v40 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(v34 + 336), *(_DWORD *)(v34 + 332), 0);
      if (HGGPURenderer::ShouldAllocateTexture(v67, v75.var2 - v75.var0, v75.var3 - v75.var1, v40, 1, 0))
      {
        PGHelium::renderNodeToMetalTexture(*(const void **)(a2 + 56), (uint64_t *)&v76, (unsigned int *)&v74, *(_DWORD *)(v34 + 340), (HGGLBlendingInfo *)(v34 + 1316), &v73);
        if (v73)
        {
          if ((*(_DWORD *)(v73 + 28) - *(_DWORD *)(v73 + 20)) >= v74.var2
            && (*(_DWORD *)(v73 + 32) - *(_DWORD *)(v73 + 24)) >= v74.var3)
          {
            uint64_t v72 = 0;
            uint64_t v72 = OZMetalUtils::registryID(*(void *)(v73 + 136));
            v71.i64[0] = (uint64_t)&v72;
            uint64_t v48 = std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 19080), (unint64_t *)&v72, (uint64_t)&std::piecewise_construct, (uint64_t **)&v71);
            uint64_t v49 = (HGBitmap *)v48[5];
            uint64_t v50 = v73;
            if (v49 != (HGBitmap *)v73)
            {
              if (v49)
              {
                (*(void (**)(HGBitmap *))(*(void *)v49 + 24))(v49);
                uint64_t v50 = v73;
              }
              v48[5] = v50;
              if (v50)
              {
                (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
                uint64_t v49 = (HGBitmap *)v73;
              }
              else
              {
                uint64_t v49 = 0;
              }
            }
            *(HGRect *)(a1 + 19048) = v77;
            uint64_t v65 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
            HGBitmapLoader::HGBitmapLoader(v65, v49);
            *a6 = v65;
            if (v73) {
              (*(void (**)(uint64_t))(*(void *)v73 + 24))(v73);
            }
            goto LABEL_91;
          }
          (*(void (**)(void))(*(void *)v73 + 24))();
        }
      }
      goto LABEL_54;
    }
    if (*v18)
    {
      if (v39.i32[0] <= 0x7FFu && v39.i32[1] <= 0x7FFu) {
        PGHelium::renderNodeToBitmap(*(void *)(a2 + 56), (uint64_t *)&v76, (unsigned int *)&v74, *(_DWORD *)(v34 + 340));
      }
      *a6 = (HGBitmapLoader *)v76;
      uint64_t v76 = 0;
      goto LABEL_91;
    }
    long long v41 = (PGContext *)PGGetPerThreadContext();
    VirtualScreeuint64_t n = (PGInfo *)PGContext::getVirtualScreen(v41);
    int BitsPerChannel = PCPixelFormat::getBitsPerChannel(*(_DWORD *)(v34 + 340));
    uint64_t MaxTextureSize = PGInfo::getMaxTextureSize(VirtualScreen, BitsPerChannel);
    if (v74.var2 >= 1
      && MaxTextureSize > v74.var2
      && v74.var3 >= 1
      && MaxTextureSize > v74.var3)
    {
      PGHelium::renderNodeToTexture(*(const void **)(a2 + 56), (uint64_t *)&v76, (unsigned int *)&v74, *(_DWORD *)(v34 + 340), (HGGLBlendingInfo *)(v34 + 1316), 0, &v71);
      float32x4_t v45 = v71;
      float32x4_t v71 = 0uLL;
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 19072);
      *(float32x4_t *)(a1 + 19064) = v45;
      if (v46)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        if (v71.i64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71.i64[1]);
        }
      }
    }
    uint64_t v47 = *(void *)(a1 + 19064);
    if (v47)
    {
      float32x4_t v71 = vcvtq_f32_s32((int32x4_t)v74);
      PGTexture::setTexCoords(v47, (float32x2_t *)&v71);
      *(HGRect *)(a1 + 19048) = v77;
LABEL_83:
      if (*v18)
      {
        uint64_t v51 = *(HGBitmap **)(a1 + 19104);
        double v52 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v52, v51);
        *a6 = v52;
      }
      else
      {
        int v53 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(*(void *)(a1 + 19064) + 40), *(_DWORD *)(*(void *)(a1 + 19064) + 36), 0);
        HGRect v75 = (HGRect)xmmword_1B837AB70;
        PGTexture::getTexCoords(*(void *)(a1 + 19064), (float32x4_t *)&v75);
        uint64_t v54 = HGRectMake4i((int)*(float *)&v75.var0, (int)*(float *)&v75.var1, (int)*(float *)&v75.var2 + (int)*(float *)&v75.var0, (int)*(float *)&v75.var3 + (int)*(float *)&v75.var1);
        uint64_t v56 = v55;
        unsigned int Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(*(void *)(a1 + 19064) + 64));
        uint64_t v58 = *(void *)(a2 + 56);
        unint64_t v59 = (HGBitmap *)HGObject::operator new(0xC8uLL);
        HGGLTexture::HGGLTexture((uint64_t)v59, v54, v56, v53, v58, Name, 1);
        long long v60 = (HGObject *)HGObject::operator new(0x20uLL);
        PCString v61 = v60;
        uint64_t v62 = *(void *)(a1 + 19064);
        float v63 = *(std::__shared_weak_count **)(a1 + 19072);
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HGObject::HGObject(v60);
        *(void *)PCString v61 = &unk_1F1151608;
        *((void *)v61 + OZChannelEnum::~OZChannelEnum(this - 2) = v62;
        *((void *)v61 + 3) = v63;
        if (v63)
        {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        HGBitmap::SetStorage(v59, v61);
        uint64_t v64 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v64, v59);
        *a6 = v64;
        (*(void (**)(HGObject *))(*(void *)v61 + 24))(v61);
        if (v59) {
          (*(void (**)(HGBitmap *))(*(void *)v59 + 24))(v59);
        }
      }
      goto LABEL_91;
    }
LABEL_54:
    *a6 = (HGBitmapLoader *)v76;
    uint64_t v76 = 0;
    goto LABEL_91;
  }
  *(void *)&v74.var2 = -1;
LABEL_47:
  *a6 = 0;
LABEL_91:
  PCSharedMutex::unlock(v70);
LABEL_92:
  if (v76) {
    (*(void (**)(HGNode *))(*(void *)v76 + 24))(v76);
  }
}

void sub_1B7CD7F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  HGObject::operator delete(v21);
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  PCSharedMutex::unlock(a14);
  uint64_t v24 = *(void *)(v22 - 120);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  _Unwind_Resume(a1);
}

void OZMoShape::calcHashkey(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  v33[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCWorkingColorVector::PCWorkingColorVector(v5);
  long long v7 = *(_OWORD *)(v3 + 48);
  unsigned int v30[2] = *(_OWORD *)(v3 + 32);
  v30[3] = v7;
  _OWORD v30[4] = *(_OWORD *)(v3 + 64);
  long long v8 = *(_OWORD *)(v3 + 16);
  v30[0] = *(_OWORD *)v3;
  v30[1] = v8;
  double v9 = *(CGColorSpace **)(v3 + 80);
  BOOL v31 = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  int v32 = *(_DWORD *)(v3 + 88);
  uint64_t CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams(v4, (uint64_t)v30);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v31);
  CMTime v12 = *(LiAgent **)(v3 + 64);
  BOOL v11 = *(int **)(v3 + 72);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v33);
  if (!*((unsigned char *)CurrentRenderParams + 12)
    || ((*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 18888) + 80))(*(void *)(v4 + 18888), v3) & 1) == 0)
  {
    int RenderQuality = OZRenderParams::getRenderQuality((OZRenderParams *)v11);
    PCHashWriteStream::writeValue(v33, RenderQuality);
    PCHashWriteStream::writeValue(v33, *(double *)(v3 + 32));
    PCHashWriteStream::writeValue(v33, *(double *)(v3 + 40));
    double v14 = (*(double (**)(uint64_t))(*(void *)v4 + 416))(v4);
    PCHashWriteStream::writeValue(v33, v14);
    PCHashWriteStream::writeValue(v33, v11[81]);
    PCHashWriteStream::writeValue(v33, v11[82]);
    PCHashWriteStream::writeValue(v33, v11[83]);
    PCHashWriteStream::writeValue(v33, v11[80]);
    PCHashWriteStream::writeValue(v33, v11[84]);
    PCHashWriteStream::writeValue(v33, v11[85]);
    PCHashWriteStream::writeValue(v33, v11[88]);
    PCHashWriteStream::writeValue(v33, v11[89]);
    char DoShapeAntialiasing = OZRenderParams::getDoShapeAntialiasing((OZRenderParams *)v11);
    PCHashWriteStream::writeValue(v33, DoShapeAntialiasing);
    PCHashWriteStream::writeValue(v33, v11[123]);
    shouldDrawSecondPassGradientInHeliuuint64_t m = OZShape::shouldDrawSecondPassGradientInHelium((OZShape *)v4, v3, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSecondPassGradientInHelium);
    char shouldDrawSecondPassOutline = OZShape::shouldDrawSecondPassOutline((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSecondPassOutline);
    char shouldDrawAntialiasingOnFill = OZShape::shouldDrawAntialiasingOnFill((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawAntialiasingOnFill);
    char shouldDrawSoftEdges = OZShape::shouldDrawSoftEdges((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSoftEdges);
    PCHashWriteStream::writeValue(v33, *((unsigned char *)CurrentRenderParams + 240));
    PCColorSpaceHandle::getMD5((CGColorSpace **)(v3 + 80), (PCWorkingColorVector *)v29);
    PCHashWriteStream::writeValue(v33, (const PCHash128 *)v29);
    PCHashWriteStream::writeValue(v33, *((unsigned char *)CurrentRenderParams + 112));
    uint64_t v20 = 0;
    uint64_t v21 = *((void *)v12 + 20);
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        (*(void (**)(int8x8_t *, double))(*(void *)v33 + 88))(v33, *(double *)(v21 + i));
      ++v20;
      v21 += 32;
    }
    while (v20 != 4);
    double v23 = OZRotoshape::calcHashForStateSelfOnly(*(OZRotoshape **)(v4 + 19112), (PCSerializerWriteStream *)v33, (CMTime *)v11);
    if (*((unsigned char *)CurrentRenderParams + 12))
    {
      if ((*(unsigned int (**)(void, double))(**(void **)(v4 + 18888) + 64))(*(void *)(v4 + 18888), v23))
      {
        LiAgent::getImageToWorldTransform(v12, (uint64_t)v28);
        LiAgent::getWorldToFilmTransform(v12, (uint64_t)v27);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v28, v27, (uint64_t)v29);
        uint64_t v24 = 0;
        BOOL v25 = v29;
        do
        {
          for (uint64_t j = 0; j != 32; j += 8)
            (*(void (**)(int8x8_t *, double))(*(void *)v33 + 88))(v33, *(double *)&v25[j]);
          ++v24;
          v25 += 32;
        }
        while (v24 != 4);
      }
      (*(void (**)(void, int8x8_t *, int *))(**(void **)(v4 + 18888) + 88))(*(void *)(v4 + 18888), v33, v11);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)PCHashWriteStream::getHash(v33)->i8;
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v33);
}

void sub_1B7CD8664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a70);
  _Unwind_Resume(a1);
}

PCMutex *OZMoShape::getEdgeTextureHeliumNode@<X0>(const void *a1@<X1>, unsigned int a2@<W2>, HGBitmapLoader **a3@<X8>)
{
  if (a2 - 1 >= 6) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (LiEdgeTexture *)a2;
  }
  return LiEdgeTexture::getHeliumNode(a1, v4, a3);
}

uint64_t OZMoShape::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 19112);
  OZRenderState::OZRenderState(&v9);
  *(_OWORD *)&v9.var0.CMTime var0 = *(_OWORD *)a4;
  v9.var0.int64_t var3 = *(void *)(a4 + 16);
  v9.__int16 var10 = *(unsigned char *)(a4 + 24);
  v9.BOOL var16 = *(unsigned char *)(a4 + 26);
  *(_OWORD *)&v9.unint64_t var1 = *(_OWORD *)(a4 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, OZRenderState *, void))(*(void *)(v7 + 200)
                                                                                               + 1312))(v7 + 200, a2, a3, 0, &v9, 0);
}

void OZMoShape::getShear(uint64_t a1, double *a2, double *a3, const CMTime *a4)
{
}

unint64_t OZMoShape::calcHashForState(OZMoShape *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  OZShape::calcHashForState(this, a2, a3);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6928), MEMORY[0x1E4F1FA48], 0.0);
  unint64_t result = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 6800), 0, 1);
  if (result && (ValueAsInt - 1) <= 1)
  {
    return OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 18728), a2, a3);
  }
  return result;
}

void OZMoShape::getShapeBounds(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 12) && !*(_DWORD *)(a4 + 120))
  {
    uint64_t v6 = *(void *)(a1 + 18888);
    OZRenderState::OZRenderState(&v7);
    *(_OWORD *)&v7.var0.CMTime var0 = *(_OWORD *)a3;
    v7.var0.int64_t var3 = *(void *)(a3 + 16);
    v7.__int16 var10 = *(unsigned char *)(a3 + 24);
    v7.BOOL var16 = *(unsigned char *)(a3 + 26);
    *(_OWORD *)&v7.unint64_t var1 = *(_OWORD *)(a3 + 32);
    (*(void (**)(uint64_t, float64x2_t *, OZRenderState *))(*(void *)v6 + 48))(v6, a2, &v7);
  }
  else
  {
    OZShape::getShapeBounds(a1, a2, (double *)a3, a4);
  }
}

uint64_t OZMoShape::setShapeTranslation(OZMoShape *this, double a2, double a3, const CMTime *a4)
{
  return OZTransformNode::setTranslation((OZTransformNode *)(*((void *)this + 2389) + 200), a2, a3, a4);
}

uint64_t OZMoShape::setDirty(OZMoShape *this, char a2, int a3)
{
  OZShape::setDirty((uint64_t)this, a2, a3);
  uint64_t result = *((void *)this + 2361);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 160);
    return v5();
  }
  return result;
}

uint64_t OZMoShape::hasShapeBehaviors(OZChannelBase **this)
{
  return OZChannelBase::isObjectRef(this[2389]);
}

uint64_t OZMoShape::hasWriteOnBehavior(OZChannelBase **this)
{
  return OZChannelBase::isObjectRef(this[2389]);
}

CGColorSpace **OZMoShape::finishCurve(OZMoShape *this, const CMTime *a2)
{
  uint64_t v4 = (OZChannel *)((char *)this + 2488);
  double v5 = (*(double (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 1328))();
  OZChannel::setValue(v4, MEMORY[0x1E4F1FA48], v5, 0);

  return OZShape::finishCurve(this, a2, 1);
}

uint64_t OZMoShape::getPixelAspectRatio(OZMoShape *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 1328))();
}

uint64_t OZMoShape::offsetIntrinsicPosition(OZMoShape *this, CMTime *a2, double a3, double a4)
{
  return OZTransformNode::offsetTranslation((OZTransformNode *)(*((void *)this + 2389) + 200), a3, a4, a2);
}

uint64_t OZMoShape::setIntrinsicRotation(OZMoShape *this, CMTime *a2, double a3)
{
  return OZTransformNode::setRotation((OZTransformNode *)(*((void *)this + 2389) + 200), a3, a2);
}

CGColorSpace **OZMoShape::getOriginalBounds(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (PCMutex *)(a1 + 8);
  uint64_t v27 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  char v28 = 1;
  long long v7 = a3[3];
  _OWORD v24[2] = a3[2];
  void v24[3] = v7;
  PCSharedCount v24[4] = a3[4];
  long long v8 = a3[1];
  v24[0] = *a3;
  v24[1] = v8;
  OZRenderState v9 = (CGColorSpace *)*((void *)a3 + 10);
  BOOL v25 = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  int v26 = *((_DWORD *)a3 + 22);
  uint64_t CurrentRenderParams = OZShape::getCurrentRenderParams(a1, (uint64_t)v24);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v25);
  long long v11 = a3[3];
  long long v19 = a3[2];
  long long v20 = v11;
  long long v21 = a3[4];
  long long v12 = a3[1];
  long long v17 = *a3;
  long long v18 = v12;
  int v13 = (CGColorSpace *)*((void *)a3 + 10);
  uint64_t v22 = v13;
  if (v13) {
    PCCFRefTraits<CGColorSpace *>::retain(v13);
  }
  int v23 = *((_DWORD *)a3 + 22);
  BYTE10(v18) = 0;
  (*(void (**)(uint64_t, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, &v17, CurrentRenderParams, 0, 1);
  if (*(unsigned char *)(CurrentRenderParams + 12) && !*(_DWORD *)(CurrentRenderParams + 120))
  {
    PCMutex::unlock(v6);
    char v28 = 0;
    uint64_t v15 = *(void *)(a1 + 18888);
    OZRenderState::OZRenderState(&v16);
    *(_OWORD *)&v16.var0.CMTime var0 = *a3;
    v16.var0.int64_t var3 = *((void *)a3 + 2);
    v16.__int16 var10 = *((unsigned char *)a3 + 24);
    v16.BOOL var16 = *((unsigned char *)a3 + 26);
    *(_OWORD *)&v16.unint64_t var1 = a3[2];
    (*(void (**)(uint64_t, uint64_t, OZRenderState *))(*(void *)v15 + 48))(v15, a2, &v16);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t))(*(void *)a1 + 24))(a1, a2, &v17, CurrentRenderParams);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
    return (CGColorSpace **)PCMutex::unlock(v6);
  }
}

void sub_1B7CD8C50(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 80);
  _Unwind_Resume(a1);
}

uint64_t OZMoShape::getUIBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (PCMutex *)(a1 + 8);
  uint64_t v17 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  char v18 = 1;
  long long v7 = *(_OWORD *)(a3 + 48);
  void v14[2] = *(_OWORD *)(a3 + 32);
  void v14[3] = v7;
  v14[4] = *(_OWORD *)(a3 + 64);
  long long v8 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v8;
  OZRenderState v9 = *(CGColorSpace **)(a3 + 80);
  uint64_t v15 = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  int v16 = *(_DWORD *)(a3 + 88);
  uint64_t CurrentRenderParams = OZShape::getCurrentRenderParams(a1, (uint64_t)v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, a3, CurrentRenderParams, 0, 1);
  if (*(unsigned char *)(CurrentRenderParams + 12) && !*(_DWORD *)(CurrentRenderParams + 120))
  {
    PCMutex::unlock(v6);
    char v18 = 0;
    uint64_t v12 = *(void *)(a1 + 18888);
    OZRenderState::OZRenderState(&v13);
    *(_OWORD *)&v13.var0.CMTime var0 = *(_OWORD *)a3;
    v13.var0.int64_t var3 = *(void *)(a3 + 16);
    v13.__int16 var10 = *(unsigned char *)(a3 + 24);
    v13.BOOL var16 = *(unsigned char *)(a3 + 26);
    *(_OWORD *)&v13.unint64_t var1 = *(_OWORD *)(a3 + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t, OZRenderState *))(*(void *)v12 + 48))(v12, a2, &v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, a3, CurrentRenderParams);
    return PCMutex::unlock(v6);
  }
}

void sub_1B7CD8E30(_Unwind_Exception *a1)
{
  PCLockSentry<PCMutex>::~PCLockSentry(v1 - 80);
  _Unwind_Resume(a1);
}

void OZMoShape::createSnapSet(uint64_t a1, double *a2, uint64_t **a3, uint64_t a4, int a5, int a6, int a7)
{
  double v14 = (PCMutex *)(a1 + 8);
  uint64_t v78 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  char v79 = 1;
  long long v15 = *(_OWORD *)(a4 + 48);
  v75[2] = *(_OWORD *)(a4 + 32);
  v75[3] = v15;
  v75[4] = *(_OWORD *)(a4 + 64);
  long long v16 = *(_OWORD *)(a4 + 16);
  v75[0] = *(_OWORD *)a4;
  v75[1] = v16;
  uint64_t v17 = *(CGColorSpace **)(a4 + 80);
  uint64_t v76 = v17;
  if (v17) {
    PCCFRefTraits<CGColorSpace *>::retain(v17);
  }
  int v77 = *(_DWORD *)(a4 + 88);
  uint64_t CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams(a1, (uint64_t)v75);
  Contour = (double *)OZShape::getContour((OZShape *)a1, (const OZShapeRenderState *)a4, CurrentRenderParams);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v76);
  if (Contour[5] >= 0.0
    && Contour[6] >= 0.0
    && ((int)OZDynamicCurve::getNumberOfValidKeypoints((os_unfair_lock_s *)(a1 + 496), (const CMTime *)a4) > 3
     || OZShape::isGeometricShape((OZShape *)a1)))
  {
    double v21 = Contour[3];
    double v20 = Contour[4];
    double v22 = Contour[5];
    double v23 = Contour[6];
    PCMutex::unlock(v14);
    char v79 = 0;
    double v24 = a2[12];
    double v25 = a2[13];
    double v26 = v21 * v24;
    double v27 = (v20 + v23) * v25;
    double v28 = a2[15];
    double v29 = v28 + v21 * v24 + v27;
    double v30 = a2[1];
    double v31 = v21 * *a2;
    double v32 = (v20 + v23) * v30;
    double v33 = a2[3];
    double v34 = a2[4];
    double v35 = (v33 + v31 + v32) / v29;
    double v36 = v21 * v34;
    double v37 = a2[5];
    double v38 = (v20 + v23) * v37;
    double v39 = a2[7];
    double v40 = (v39 + v21 * v34 + v38) / v29;
    BOOL v41 = COERCE__INT64(fabs(v40)) < 0x7FF0000000000000;
    if (COERCE__INT64(fabs(v35)) <= 0x7FEFFFFFFFFFFFFFLL && v41)
    {
      double v42 = (v21 + v22) * v24;
      double v43 = v28 + v42 + v27;
      double v44 = (v21 + v22) * *a2;
      double v45 = (v33 + v44 + v32) / v43;
      double v46 = (v21 + v22) * v34;
      double v47 = (v39 + v46 + v38) / v43;
      if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        double v48 = v20 * v25;
        double v49 = v28 + v26 + v20 * v25;
        double v50 = v20 * v30;
        double v51 = (v33 + v31 + v50) / v49;
        double v52 = (v39 + v36 + v20 * v37) / v49;
        if ((*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          double v53 = v28 + v42 + v48;
          double v54 = (v33 + v44 + v50) / v53;
          double v55 = (v39 + v46 + v20 * v37) / v53;
          if ((*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)&v55 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (v54 <= v51) {
              double v56 = v54;
            }
            else {
              double v56 = v51;
            }
            if (v54 < v51) {
              double v54 = v51;
            }
            if (v45 <= v56) {
              double v56 = v45;
            }
            if (v35 <= v56) {
              double v57 = v35;
            }
            else {
              double v57 = v56;
            }
            if (v45 >= v54) {
              double v54 = v45;
            }
            if (v35 >= v54) {
              double v58 = v35;
            }
            else {
              double v58 = v54;
            }
            if (v55 <= v52) {
              double v59 = v55;
            }
            else {
              double v59 = v52;
            }
            if (v55 < v52) {
              double v55 = v52;
            }
            if (v47 <= v59) {
              double v59 = v47;
            }
            if (v40 <= v59) {
              double v60 = v40;
            }
            else {
              double v60 = v59;
            }
            if (v47 >= v55) {
              double v61 = v47;
            }
            else {
              double v61 = v55;
            }
            if (v40 >= v61) {
              double v62 = v40;
            }
            else {
              double v62 = v61;
            }
            if (*(unsigned char *)(a1 + 18872))
            {
              if (a7)
              {
                OZChannelCurve::getEnabledVerticesList((os_unfair_lock_s *)(a1 + 208), (const CMTime *)a4, &v73);
                uint64_t v64 = v73;
                float v63 = v74;
                if (v73 != v74)
                {
                  do
                  {
                    uint64_t v65 = *(char **)v64;
                    if (*(void *)v64 != *(void *)(a1 + 18856))
                    {
                      int v66 = (char *)*((void *)v64 + 1);
                      if (v66 != *(char **)(a1 + 18864))
                      {
                        double v70 = 0.0;
                        double v71 = 0.0;
                        uint64_t v72 = 0;
                        double v68 = 0.0;
                        double v69 = 0.0;
                        OZChannelCurve::getVertexValue(a1 + 208, v65, v66, (CMTime *)a4, &v69, &v68);
                        double v70 = v69;
                        double v71 = v68;
                        uint64_t v72 = 0;
                        PCMatrix44Tmpl<double>::transform<double>(a2, &v70, &v70);
                        if ((*(void *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                          && (*(void *)&v71 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                          && (v72 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                        {
                          OZSnap::OZSnap((OZSnap *)v67, 258, v70, v60, v62);
                          std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v67, (uint64_t)v67);
                          OZSnap::OZSnap((OZSnap *)v67, 514, v71, v57, v58);
                          std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v67, (uint64_t)v67);
                        }
                        float v63 = v74;
                      }
                    }
                    v64 += 16;
                  }
                  while (v64 != v63);
                  uint64_t v64 = v73;
                }
                if (v64)
                {
                  HGRect v74 = v64;
                  operator delete(v64);
                }
              }
            }
            else
            {
              if (a5)
              {
                OZSnap::OZSnap((OZSnap *)&v73, 258, (v57 + v58) * 0.5, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 514, (v60 + v62) * 0.5, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
              }
              if (a6)
              {
                OZSnap::OZSnap((OZSnap *)&v73, 257, v57, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 260, v58, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 513, v60, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 516, v62, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    PCMutex::unlock(v14);
  }
}

void sub_1B7CD93B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  PCLockSentry<PCMutex>::~PCLockSentry(v17 - 136);
  _Unwind_Resume(a1);
}

uint64_t OZMoShape::getCurveSamplesForOSC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (PCMutex *)(a1 + 8);
  PCMutex::lock((PCMutex *)(a1 + 8));
  return PCMutex::unlock(v2);
}

uint64_t OZMoShape::getHasPenPropertyInfo(OZMoShape *this)
{
  if (((*(uint64_t (**)(void))(*((void *)this + 1343) + 560))() & 1) != 0
    || ((*(uint64_t (**)(char *))(*((void *)this + 1363) + 560))((char *)this + 10904) & 1) != 0
    || ((*(uint64_t (**)(char *))(*((void *)this + 1419) + 560))((char *)this + 11352) & 1) != 0
    || ((*(uint64_t (**)(char *))(*((void *)this + 1380) + 560))((char *)this + 11040) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*((void *)this + 1399) + 560);

  return v3();
}

uint64_t OZMoShape::getFreehandPaintVertices(OZMoShape *this)
{
  return *((void *)this + 2362);
}

uint64_t OZMoShape::getFreehandPaintLengthAccums(OZMoShape *this)
{
  return *((void *)this + 2363);
}

uint64_t OZMoShape::getFreehandPaintPressures(OZMoShape *this)
{
  return *((void *)this + 2364);
}

uint64_t OZMoShape::getFreehandPaintTilts(OZMoShape *this)
{
  return *((void *)this + 2365);
}

uint64_t OZMoShape::getFreehandPaintTimes(OZMoShape *this)
{
  return *((void *)this + 2366);
}

uint64_t OZMoShape::getPaintInteractiveValuesLock(OZMoShape *this)
{
  return *((void *)this + 2367);
}

uint64_t OZMoShape::getStrokeWidthOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2361) + 120))();
}

uint64_t OZMoShape::getStrokeSpacingOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2361) + 128))();
}

uint64_t OZMoShape::getStrokeJitterOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2361) + 136))();
}

uint64_t OZMoShape::getStrokeRotationOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2361) + 144))();
}

OZChannelBase *OZMoShape::setParticlePaint(OZMoShape *this, OZSceneNode *lpsrc, unsigned int a3)
{
  if (lpsrc)
  {
    long long v7 = v6;
    *((void *)this + 2360) = v6;
    if (v6) {
  }
    }
  else
  {
    long long v7 = 0;
    uint64_t v6 = 0;
    *((void *)this + 2360) = 0;
  }
  *((void *)this + 2361) = v6;
  OZChannelBase::setID((OZChannelBase *)(v7 + 56), a3);
  (*(void (**)(void))(**((void **)this + 2360) + 256))();
  long long v8 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 2360) + 640))();
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v8);
  OZRenderState v9 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)lpsrc + 640))(lpsrc);

  return OZChannelBase::resetFlag(v9, 64, 0);
}

uint64_t OZMoShape::resetParticlePaint(OZMoShape *this)
{
  uint64_t v1 = (void *)((char *)this + 18880);
  uint64_t result = *((void *)this + 2360);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  void *v1 = 0;
  v1[1] = 0;
  return result;
}

void OZMoShape::applyStyle(OZMoShape *this, const OZMoShape *a2)
{
  uint64_t v4 = (OZGradientGroupShader *)*((void *)this + 2340);
  if (v4)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v4);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 2340) = 0;
  }
  OZShapeRenderParams::operator=(*((void *)this + 333), *((void *)a2 + 333));
  OZShapeRenderParams::operator=(*((void *)this + 334), *((void *)a2 + 334));
  OZChannelFolder::operator=((uint64_t)this + 2784);
  OZChannelGradientPositioned::operator=((uint64_t)this + 4328, (uint64_t)a2 + 4328);
  OZChannelBase::operator=((uint64_t)this + 6928, (uint64_t)a2 + 6928);
  OZChannelBase::operator=((uint64_t)this + 8496, (uint64_t)a2 + 8496);
  OZChannelBase::operator=((uint64_t)this + 8648, (uint64_t)a2 + 8648);
  OZChannelBase::operator=((uint64_t)this + 8904, (uint64_t)a2 + 8904);
  OZChannelBase::operator=((uint64_t)this + 9160, (uint64_t)a2 + 9160);
  OZChannelBase::operator=((uint64_t)this + 9416, (uint64_t)a2 + 9416);
  OZChannelBase::operator=((uint64_t)this + 9568, (uint64_t)a2 + 9568);
  OZChannelBase::operator=((uint64_t)this + 9720, (uint64_t)a2 + 9720);
  OZChannelBase::operator=((uint64_t)this + 9976, (uint64_t)a2 + 9976);
  OZChannelBase::operator=((uint64_t)this + 10128, (uint64_t)a2 + 10128);
  OZChannelBase::operator=((uint64_t)this + 10440, (uint64_t)a2 + 10440);
  OZChannelBase::operator=((uint64_t)this + 10592, (uint64_t)a2 + 10592);
  OZChannelBase::operator=((uint64_t)this + 11512, (uint64_t)a2 + 11512);
  OZChannelBase::operator=((uint64_t)this + 11664, (uint64_t)a2 + 11664);
  *((unsigned char *)this + 2640) = *((unsigned char *)a2 + 2640);
  uint64_t v5 = *((void *)this + 2360);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 2389);
    long long v7 = (uint64_t *)(v6 + 1200);
    if (v6 + 1200 != *(void *)(v6 + 1208))
    {
      do
      {
        (*(void (**)(void))(**(void **)(*v7 + 16) + 120))(*(void *)(*v7 + 16));
        long long v7 = (uint64_t *)*v7;
      }
      while (v7 != *(uint64_t **)(v6 + 1208));
      uint64_t v6 = *((void *)this + 2389);
    }
    long long v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)(v6 + 200) + 272))(v6 + 200);
    if (v8)
    {
      OZRenderState v9 = v8;
      OZScene::unregisterNode(v8, *((OZSceneNode **)this + 2360));
      OZScene::removeAllDependencies(v9, *((OZSceneNode **)this + 2360));
    }
    int v10 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 2360) + 640))(*((void *)this + 2360));
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18728), v10);
    uint64_t v11 = *((void *)this + 2360);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *((void *)this + 2360) = 0;
  }
  uint64_t v12 = (const void *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(*((void *)a2 + 2360) + 8)
                                                                         + 24))(*(void *)(*((void *)a2 + 2360) + 8), *((void *)a2 + 2360), 2);
  *((void *)this + 2360) = v13;
  (*(void (**)(void))(*(void *)v13 + 256))();
  double v14 = (uint64_t *)*((void *)this + 2360);
  uint64_t v15 = *v14;
  long long v16 = (OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v15 + 640))(v14);
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v16);
  uint64_t v17 = *((void *)this + 2389);
  if (v5)
  {
    char v18 = (uint64_t *)(v17 + 1200);
    if (v17 + 1200 != *(void *)(v17 + 1208))
    {
      do
      {
        uint64_t v19 = *((void *)this + 2389);
        if (v19) {
          uint64_t v20 = v19 + 200;
        }
        else {
          uint64_t v20 = 0;
        }
        (*(void (**)(void, uint64_t))(**(void **)(*v18 + 16) + 96))(*(void *)(*v18 + 16), v20);
        char v18 = (uint64_t *)*v18;
      }
      while (v18 != *(uint64_t **)(v17 + 1208));
      uint64_t v17 = *((void *)this + 2389);
    }
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)(v17 + 200) + 1128))(v26, v17 + 200);
  CMTime v25 = v26[0];
  OZMoShape::initPPaintTime(this, &v25, (const PCTimeRange *)v26);
  uint64_t v21 = *((void *)this + 2360);
  (*(void (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 1328))();
  (*(void (**)(uint64_t))(*(void *)v21 + 1344))(v21);
  *((void *)this + 2361) = v22;
  (*(void (**)(void *))(*(void *)v22 + 32))(v22);
  if ((*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))())
  {
    double v23 = (OZScene *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
    OZScene::registerNode(v23, *((OZSceneNode **)this + 2360));
    uint64_t v24 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2389) + 200) + 272))();
    OZDocument::postNotification(*(OZDocument **)(v24 + 1584), 0x80000);
  }
}

uint64_t OZMoShape::openMedia(OZMoShape *this)
{
  uint64_t result = *((void *)this + 2360);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t OZMoShape::prerollBegin(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 112))();
  }
  return result;
}

uint64_t OZMoShape::prerollEnd(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t OZMoShape::setRate(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t OZMoShape::scheduleTokens(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 136))();
  }
  return result;
}

uint64_t OZMoShape::hintTokensWillImage(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 144))();
  }
  return result;
}

uint64_t OZMoShape::getTokensImage(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 18880);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 152))();
  }
  return result;
}

uint64_t OZMoShape::pruneTokensAtTime(OZMoShape *this, CMTime *a2, const char *a3)
{
  uint64_t result = *((void *)this + 2360);
  if (result)
  {
    CMTime v4 = *a2;
    return (*(uint64_t (**)(uint64_t, CMTime *, const char *))(*(void *)result + 160))(result, &v4, a3);
  }
  return result;
}

uint64_t OZMoShape::pruneTokensExceptAtTime(OZMoShape *this, CMTime *a2, const char *a3)
{
  uint64_t result = *((void *)this + 2360);
  if (result)
  {
    CMTime v4 = *a2;
    return (*(uint64_t (**)(uint64_t, CMTime *, const char *))(*(void *)result + 168))(result, &v4, a3);
  }
  return result;
}

uint64_t OZMoShape::pruneAllTokens(OZMoShape *this, const char *a2)
{
  uint64_t result = *((void *)this + 2360);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const char *))(*(void *)result + 176))(result, a2);
  }
  return result;
}

void OZShape::clone(OZShape *this)
{
}

void sub_1B7CDA170(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C401D7E3A3CLL);
  _Unwind_Resume(a1);
}

void OZShape::getPixelAspectRatio(OZShape *this)
{
}

BOOL OZShape::shouldApplyScaleToFeathering(OZShape *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 14752), MEMORY[0x1E4F1FA48], 0.0) == 0;
}

double OZShape::getIntrinsicTransform@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  *(void *)(a1 + 80) = 0x3FF0000000000000;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(void *)a1 = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void OZShape::getIntrinsicPosition(OZShape *this, CMTime *a2, double *a3, double *a4)
{
  if (a3) {
    *a3 = 0.0;
  }
  if (a4) {
    *a4 = 0.0;
  }
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, const OZChanSceneNodeRefWithPicker *a2, OZChannelFolder *a3)
{
}

uint64_t OZCrop::getBoundary(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    throw_PCNullPointerException(1);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, float64x2_t *))(*(void *)v5 + 24))(v5, a2, a3);
  if (v6) {
    PCRect<double>::operator&=(a3, (float64x2_t *)(a1 + 40));
  }
  return v6;
}

void OZCrop::getHelium(OZCrop *this@<X0>, __n128 *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((double *)this + 7) <= 0.0 || *((double *)this + 8) <= 0.0)
  {
    *a3 = 0;
    return;
  }
  float64x2_t v26 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v27 = _Q0;
  long long v28 = xmmword_1B7E74760;
  uint64_t v11 = (long long *)a2[10].n128_u64[0];
  long long v12 = v11[3];
  long long v14 = *v11;
  long long v13 = v11[1];
  _OWORD v25[2] = v11[2];
  void v25[3] = v12;
  v25[0] = v14;
  v25[1] = v13;
  long long v15 = v11[7];
  long long v17 = v11[4];
  long long v16 = v11[5];
  v25[6] = v11[6];
  v25[7] = v15;
  v25[4] = v17;
  void v25[5] = v16;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)v25, (double *)this + 5, (uint64_t)&v26))
  {
    int32x2_t v18 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v26, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v19 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v26, v27))));
    *(int32x2_t *)&long long v28 = v18;
    *((int32x2_t *)&v28 + 1) = vsub_s32(v19, v18);
    unint64_t v21 = *((void *)&v28 + 1);
    if (LiAgent::haveROI((LiAgent *)a2))
    {
      LiAgent::getROI(a2, v22);
      if ((v21 & 0x80000000) == 0 && (v21 & 0x8000000000000000) == 0)
      {
        *(int32x2_t *)&long long v28 = vmax_s32(v18, (int32x2_t)v22[0].n128_u64[0]);
        *((int32x2_t *)&v28 + 1) = vsub_s32(vmin_s32(v19, vadd_s32(*(int32x2_t *)&v22[0].n128_i8[8], (int32x2_t)v22[0].n128_u64[0])), *(int32x2_t *)&v28);
      }
    }
    goto LABEL_11;
  }
  if (LiAgent::haveROI((LiAgent *)a2))
  {
    LiAgent::getROI(a2, (__n128 *)&v28);
LABEL_11:
    LiAgent::setInputROI((uint64_t)a2, (__n128 *)&v28);
  }
  a2[2].n128_u32[0] = 1;
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), a3);
  LiAgent::getBoundary((LiAgent *)a2, (uint64_t)v24);
  PCRect<double>::operator&=(v24, (float64x2_t *)((char *)this + 40));
  Crop = (const LiImagePolygon *)LiAgent::getCrop((LiAgent *)a2);
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v23, Crop);
  if ((((char *)v23[9] - (char *)v23[8]) & 0x1FFFFFFFE0) != 0)
  {
    LiAgent::getInversePixelTransform((LiAgent *)a2, 0.0, (uint64_t)v22);
    liTransformAndClip(v24[0].f64, v22[0].n128_f64, v23);
  }
  else
  {
    LiImagePolygon::set((uint64_t)v23, v24[0].f64, 0);
    LiAgent::projectAndClipPolygon((LiAgent *)a2, v23, 2.0);
  }
  LiAgent::outCrop((LiAgent *)a2, (const LiImagePolygon *)v23);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v23);
}

void sub_1B7CDA5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a27);
  if (*v27) {
    (*(void (**)(void))(*(void *)*v27 + 24))(*v27);
  }
  _Unwind_Resume(a1);
}

void OZCrop::~OZCrop(PCSharedCount *this)
{
  *(void *)(v1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZCrop::~OZCrop(OZCrop *this)
{
  *(void *)(v1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZCrop::~OZCrop((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

void OZLiElementTimeRender::getSourceAtTime(OZLiElementTimeRender *this, CMTime *a2, BOOL a3, const OZRenderParams *a4)
{
  OZRenderParams::OZRenderParams((OZRenderParams *)&v7, a4);
  long long v7 = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CMTimeEpoch v8 = epoch;
  (*(void (**)(void, long long *, char *, void))(**((void **)this + 2) + 160))(*((void *)this + 2), &v7, (char *)this + 24, 0);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v7);
}

void sub_1B7CDA814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZLiElementTimeRender::estimateRenderMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 112);

  return v2();
}

uint64_t OZLiElementTimeRender::print(uint64_t a1, void *a2, int a3)
{
  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"OZLiElementTimeRender:\n", 23);
  uint64_t v5 = *(void *)(a1 + 328);
  if (!v5) {
    throw_PCNullPointerException(1);
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 128);

  return v6();
}

uint64_t OZLiElementTimeRender::adjustCasterLocalToWorld(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 328);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 144))();
  }
  return result;
}

void OZLiElementTimeRender::~OZLiElementTimeRender(PCSharedCount *this)
{
  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115DF98;
  this[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F115E068;
  PCSharedCount::~PCSharedCount(this + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[31]);
  std::__list_imp<unsigned int>::clear(&this[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F115E088);
  this[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[44].var0);
}

{
  uint64_t vars8;

  this->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115DF98;
  this[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F115E068;
  PCSharedCount::~PCSharedCount(this + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[31]);
  std::__list_imp<unsigned int>::clear(&this[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F115E088);
  this[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[44].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZLiElementTimeRender::getBoundary(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 24);

  return v2();
}

uint64_t OZLiElementTimeRender::filteredEdges(OZLiElementTimeRender *this)
{
  uint64_t v1 = *((void *)this + 41);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);

  return v2();
}

uint64_t OZLiElementTimeRender::pixelTransformSupport(OZLiElementTimeRender *this, const LiRenderParameters *a2)
{
  uint64_t v2 = *((void *)this + 41);
  if (!v2) {
    throw_PCNullPointerException(1);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 56);

  return v3();
}

uint64_t OZLiElementTimeRender::fixPixelTransform(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 64);

  return v2();
}

uint64_t OZLiElementTimeRender::imageSpace(OZLiElementTimeRender *this)
{
  uint64_t v1 = *((void *)this + 41);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 80);

  return v2();
}

uint64_t OZLiElementTimeRender::setImageSpace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 88);

  return v2();
}

uint64_t *OZLiElementTimeRender::getHelium@<X0>(OZLiElementTimeRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = (LiImageSource *)*((void *)this + 41);
  if (!v3) {
    throw_PCNullPointerException(1);
  }

  return LiImageSource::getHeliumPublic(a3, v3, a2);
}

void virtual thunk to'OZLiElementTimeRender::~OZLiElementTimeRender(OZLiElementTimeRender *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115DF98;
  v1[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F115E068;
  PCSharedCount::~PCSharedCount(v1 + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v1[31]);
  std::__list_imp<unsigned int>::clear(&v1[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F115E088);
  v1[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[45].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[44].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->CMTime var0 = (PC_Sp_counted_base *)&unk_1F115DF98;
  v1[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F115E068;
  PCSharedCount::~PCSharedCount(v1 + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v1[31]);
  std::__list_imp<unsigned int>::clear(&v1[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F115E088);
  v1[43].CMTime var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[44].var0);

  JUMPOUT(0x1BA9BFBA0);
}

_OWORD *OZChannelColorCorrection::Register(OZChannelColorCorrection *this)
{
  uint64_t Instance = (_anonymous_namespace_::OZChannelColorCorrection_Factory *)OZFactories::getInstance(this);

  return OZFactories::addFactory((uint64_t **)Instance, v2);
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::getInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  {
    CMTime v4 = &v2;
    uint64_t v3 = &v4;
  }
}

uint64_t OZChannelColorCorrection::commonInitOZColorCorrectionUIChannel(OZChannelColorCorrection *this)
{
  *((void *)this + 1) = result;
    operator new();
  *((void *)this + 17) = v3;
  return result;
}

void sub_1B7CDB0FC(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<anonymous namespace'::OZChannelColorCorrection_Factory::getInstance(void)::{lambda(void)#1} &&>>()
{
}

void sub_1B7CDB1FC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void anonymous namespace'::OZChannelColorCorrection_Factory::~OZChannelColorCorrection_Factory(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrection_Factory *)((char *)this + 128));

  OZFactory::~OZFactory((OZFactory *)this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrection_Factory *)((char *)this + 128));
  OZFactory::~OZFactory((OZFactory *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void anonymous namespace'::OZChannelColorCorrection_Factory::create(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, const PCString *a2)
{
}

void sub_1B7CDB320(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void anonymous namespace'::OZChannelColorCorrection_Factory::createCopy(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CDB414(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::createInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZFactoryBase *a2)
{
  return 0;
}

void anonymous namespace'::OZChannelColorCorrection_Factory::description(PCURL *a1@<X8>)
{
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::unlocalizedDescription(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

void anonymous namespace'::OZChannelColorCorrection_Factory::manufacturer(PCURL *a1@<X8>)
{
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::version(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 1;
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::revision(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 0;
}

void anonymous namespace'::OZChannelColorCorrection_Factory::getCategoryName(PCSharedCount *a1@<X8>)
{
}

void anonymous namespace'::OZChannelColorCorrection_Factory::getEnglishCategoryName(PCSharedCount *a1@<X8>)
{
}

const char *anonymous namespace'::OZChannelColorCorrection_Factory::getBundleID(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return "";
}

void anonymous namespace'::OZChannelColorCorrection_Factory::getIconNameInternal(PCSharedCount *a1@<X8>)
{
}

void anonymous namespace'::OZChannelColorCorrection_Factory::getIconNameBWInternal(PCSharedCount *a1@<X8>)
{
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::getIconIDInternal(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 0xFFFFFFFFLL;
}

void anonymous namespace'::OZChannelColorCorrection_Factory::getLibraryIconNameInternal(PCSharedCount *a1@<X8>)
{
}

void anonymous namespace'::OZChannelColorCorrection_Factory::createChannel(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, const PCString *a2)
{
}

void sub_1B7CDB534(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void anonymous namespace'::OZChannelColorCorrection_Factory::createChannelCopy(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CDB628(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::OZChannelColorCorrection_Factory::createChannelInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZChannelBase *a2)
{
  return 0;
}

void non-virtual thunk to'anonymous namespace'::OZChannelColorCorrection_Factory::~OZChannelColorCorrection_Factory(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  uint64_t v1 = (OZFactory *)((char *)this - 128);
  PCSingleton::~PCSingleton(this);

  OZFactory::~OZFactory(v1);
}

{
}

void OZChannelColorCorrection::OZChannelColorCorrection(OZChannelColorCorrection *this, OZFactory *a2, const PCString *a3, unsigned int a4, char a5)
{
}

void sub_1B7CDB714(_Unwind_Exception *a1)
{
  OZChannelBlindData::~OZChannelBlindData(v1);
  _Unwind_Resume(a1);
}

void OZChannelColorCorrection::~OZChannelColorCorrection(OZChannelBlindData *this)
{
  OZChannelBlindData::~OZChannelBlindData(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelColorCorrection::clone(OZChannelColorCorrection *this)
{
}

void sub_1B7CDB7EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZChannelColorCorrection::~OZChannelColorCorrection(OZChannelColorCorrection *this)
{
}

{
  uint64_t vars8;

  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void anonymous namespace'::OZChannelColorCorrectionInfo::~OZChannelColorCorrectionInfo(_anonymous_namespace_::OZChannelColorCorrectionInfo *this)
{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrectionInfo *)((char *)this + 80));

  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrectionInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'anonymous namespace'::OZChannelColorCorrectionInfo::~OZChannelColorCorrectionInfo(_anonymous_namespace_::OZChannelColorCorrectionInfo *this)
{
  uint64_t v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);

  OZChannelInfo::~OZChannelInfo(v1);
}

{
  OZChannelInfo *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLiFxGenerator::OZLiFxGenerator(OZLiFxGenerator *this, id *a2, const OZRenderParams *a3, int a4)
{
  *((void *)this + 181) = &unk_1F1199AC8;
  *((void *)this + 18OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *((unsigned char *)this + 1464) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F115E890);
  *(void *)this = &unk_1F115E7A8;
  *((void *)this + 181) = &unk_1F115E870;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = a2;
  OZRenderParams::OZRenderParams((OZLiFxGenerator *)((char *)this + 24), a3);
  CMTime v8 = *(CMTime *)((unsigned char *)this + 1);
  if ((OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a2 + 2423, &v8) | a4) == 1) {
    (*(void (**)(OZLiFxGenerator *, uint64_t))(*(void *)this + 88))(this, 2);
  }
}

void sub_1B7CDBA8C(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F115E890);
  *(void *)(v1 + 1448) = v2;
  *(unsigned char *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  _Unwind_Resume(a1);
}

uint64_t OZLiFxGenerator::supportsHeliumCPURendering(OZLiFxGenerator *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2) + 19384) + 240))();
}

void OZLiFxGenerator::getHelium(OZFxGenerator **this@<X0>, LiAgent *a2@<X1>, void *a3@<X8>)
{
  if ((*((unsigned int (**)(OZFxGenerator **, void))*this + 7))(this, *((void *)a2 + 6)) == 6) {
    *((_DWORD *)a2 + 8) = 1;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v10, (const OZRenderParams *)(this + 3));
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v10, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v10, *(float *)(*((void *)a2 + 6) + 192));
  if (!*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v10) + 8)
    && ((*((uint64_t (**)(OZFxGenerator **))*this + 13))(this) & 1) == 0)
  {
    RenderDevice = (uint64_t *)LiAgent::getRenderDevice((LiRenderParameters **)a2);
    OZRenderParams::setRenderDevice((uint64_t)v10, RenderDevice);
  }
  CMTime v8 = this[2];
  CMTime pcColorDesc = (CMTime)v10[0]._pcColorDesc;
  OZFxGenerator::getHelium(v8, a2, &pcColorDesc, (OZRenderParams *)v10, a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
}

void sub_1B7CDBC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZLiFxGenerator::pixelTransformSupport(OZLiFxGenerator *this, const LiRenderParameters *a2)
{
  LODWORD(result) = (*(uint64_t (**)(void, const LiRenderParameters *, char *))(**((void **)this + 2)
                                                                                          + 2288))(*((void *)this + 2), a2, (char *)this + 24);
  if (result) {
    return result;
  }
  else {
    return 2;
  }
}

double OZLiFxGenerator::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a4);
  if (v6 != 6)
  {
    int v8 = v6;
    Resolutiouint64_t n = OZRenderParams::getResolution((OZRenderParams *)(a1 + 24), &v14);
    __n128 v9 = v14;
    double v10 = *(double *)(a3 + 120);
    if (v10 <= -0.0000001 || (Resolution.n128_u64[0] = 0, double v11 = 0.0, v10 >= 0.0000001))
    {
      double v12 = v10 + *(double *)(a3 + 96) * 0.0 + *(double *)(a3 + 104) * 0.0;
      Resolution.n128_f64[0] = (*(double *)(a3 + 24) + *(double *)a3 * 0.0 + *(double *)(a3 + 8) * 0.0) / v12;
      double v11 = (*(double *)(a3 + 56) + *(double *)(a3 + 32) * 0.0 + *(double *)(a3 + 40) * 0.0) / v12;
    }
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(void *)a3 = v9.n128_u64[0];
    *(void *)(a3 + 40) = v9.n128_u64[1];
    if ((v8 - 3) <= 2) {
      Resolution.n128_u64[0] = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, (float64x2_t)Resolution, v11, 0.0);
    }
  }
  return Resolution.n128_f64[0];
}

uint64_t OZLiFxGenerator::filteredEdges(OZLiFxGenerator *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 2) + 19570));
  return v1 & 1;
}

uint64_t OZLiFxGenerator::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t OZLiFxGenerator::estimateRenderMemory()
{
  return 0;
}

void OZLiFxGenerator::~OZLiFxGenerator(OZLiFxGenerator *this)
{
  *(void *)this = &unk_1F115E7A8;
  *((void *)this + 181) = &unk_1F115E870;
  OZRenderParams::~OZRenderParams((OZLiFxGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F115E890);
  *((void *)this + 181) = &unk_1F1199AC8;
  *((unsigned char *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F115E7A8;
  *((void *)this + 181) = &unk_1F115E870;
  OZRenderParams::~OZRenderParams((OZLiFxGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F115E890);
  *((void *)this + 181) = &unk_1F1199AC8;
  *((unsigned char *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiFxGenerator::~OZLiFxGenerator(OZLiFxGenerator *this)
{
  unsigned __int8 v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)unsigned __int8 v1 = &unk_1F115E7A8;
  *((void *)v1 + 181) = &unk_1F115E870;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F115E890);
  *((void *)v1 + 181) = &unk_1F1199AC8;
  v1[1464] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
}

{
  char *v1;
  uint64_t vars8;

  unsigned __int8 v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)unsigned __int8 v1 = &unk_1F115E7A8;
  *((void *)v1 + 181) = &unk_1F115E870;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F115E890);
  *((void *)v1 + 181) = &unk_1F1199AC8;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);

  JUMPOUT(0x1BA9BFBA0);
}

void OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F115EA38;
  uint64_t v5[2] = &unk_1F115F370;
  v5[6] = &unk_1F115F5C8;
  v5[816] = &unk_1F115F620;
  PCString::PCString(&v6, "Subdivision Level");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24408), 0, &v6, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Width");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24560), 4000, &v6, (OZChannelFolder *)((char *)this + 448), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Height");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24712), 3600, &v6, (OZChannelFolder *)((char *)this + 448), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Height");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24864), 9000, &v6, (OZChannelFolder *)((char *)this + 448), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  Li3DEngineScene::Li3DEngineScene((OZEnvironmentMeshSceneElement *)((char *)this + 25016));
  *((void *)this + 3148) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 25192), 1);
  *((void *)this + 3149) = &unk_1F10933F0;
  OZChannel::setMin((OZChannel *)((char *)this + 24408), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24408), 10.0);
}

void sub_1B7CDC368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  Li3DEngineScene::~Li3DEngineScene(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this, const OZEnvironmentMeshSceneElement *a2, uint64_t a3)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F115EA38;
  *(void *)(v5 + 16) = &unk_1F115F370;
  *(void *)(v5 + 48) = &unk_1F115F5C8;
  *(void *)(v5 + 6528) = &unk_1F115F620;
  PCString v6 = (OZChannel *)(v5 + 24408);
  long long v7 = (OZChannelFolder *)(v5 + 448);
  OZChannel::OZChannel((OZChannel *)(v5 + 24408), (const OZChannelBase *)((char *)a2 + 24408), (OZChannelFolder *)(v5 + 448));
  *((void *)this + 3051) = &unk_1F1101490;
  *((void *)this + 3053) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24560), (const OZChannelBase *)((char *)a2 + 24560), v7);
  *((void *)this + 3070) = &unk_1F1101490;
  *((void *)this + 307OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24712), (const OZChannelBase *)((char *)a2 + 24712), v7);
  *((void *)this + 3089) = &unk_1F1101490;
  *((void *)this + 3091) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24864), (const OZChannelBase *)a2 + 222, v7);
  *((void *)this + 3108) = &unk_1F1101490;
  *((void *)this + 3110) = &unk_1F11017F0;
  Li3DEngineScene::Li3DEngineScene((OZEnvironmentMeshSceneElement *)((char *)this + 25016));
  *((void *)this + 3148) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 25192), 1);
  *((void *)this + 3149) = &unk_1F10933F0;
  OZChannel::setMin(v6, 0.0);
  OZChannel::setMax(v6, 10.0);
}

void sub_1B7CDC6A4(_Unwind_Exception *a1)
{
  Li3DEngineScene::~Li3DEngineScene(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this)
{
  *(void *)this = &unk_1F115EA38;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115F370;
  *((void *)this + 6) = &unk_1F115F5C8;
  *((void *)this + 816) = &unk_1F115F620;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 25192));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 25160, *((PCSharedCount **)this + 3146));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 25136, *((void **)this + 3143));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3141);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 25096, *((id **)this + 3138));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3135);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 25016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24408));

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);
}

{
  uint64_t vars8;

  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this)
{
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 48));
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

void OZEnvironmentMeshSceneElement::buildRenderGraph(OZEnvironmentMeshSceneElement *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZRenderState::OZRenderState(&v13, a2);
  long long v11 = *(_OWORD *)&a2->var0.var0;
  int64_t var3 = a2->var0.var3;
  (*(void (**)(OZEnvironmentMeshSceneElement *))(*(void *)this + 2336))(this);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v13, (uint64_t)v9);
  for (uint64_t i = 0; i != 4; ++i)
    v10[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v9[2 * i]), (float64x2_t)v9[2 * i + 1]);
  OZ3DEngineCore::buildRenderGraph((uint64_t)this + 18872, (const OZRenderParams *)a2, a3, a4, (uint64_t)v10, (uint64_t)&v11, (OZElement *)this);
}

void non-virtual thunk to'OZEnvironmentMeshSceneElement::buildRenderGraph(OZEnvironmentMeshSceneElement *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

double OZEnvironmentMeshSceneElement::calcAutomaticUnitSize(OZEnvironmentMeshSceneElement *this)
{
  return 1.0;
}

void OZEnvironmentMeshSceneElement::getLocalVolume(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::recursive_mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 2336))(a1);
    std::recursive_mutex::lock(v3);
    Representatiouint64_t n = (SCNScene *)PCBitmap::getRepresentation((PCBitmap *)v3);
    getSceneBoundingBox(Representation, (uint64_t)v6);
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v6[2];
    std::recursive_mutex::unlock(v3);
  }
}

void sub_1B7CDCB14(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZEnvironmentMeshSceneElement::get3DScene(OZEnvironmentMeshSceneElement *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 25192);
  long long v5 = (char *)this + 25192;
  PCMutex::lock((PCMutex *)((char *)this + 25192));
  LOBYTE(v6) = 1;
  if (!*((void *)this + 3148))
  {
    uint64_t v3 = objc_opt_new();
    *((void *)this + 3148) = v3;
    objc_msgSend((id)objc_msgSend(v3, "rootNode", v5, v6), "setName:", @"OZEnvironmentMeshSceneElement scene root");
    objc_msgSend((id)objc_msgSend(*((id *)this + 3148), "rootNode"), "setRenderingOrder:", -1);
    Li3DEngineScene::set((OZEnvironmentMeshSceneElement *)((char *)this + 25016), *((SCNScene **)this + 3148));
    Li3DEngineScene::setUseOriginalScene((uint64_t)this + 25016, 1);
  }
  PCMutex::unlock(v2);
  return (uint64_t)this + 25016;
}

void sub_1B7CDCBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

uint64_t OZEnvironmentMeshSceneElement::didCreateRootNodeClone(id *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  objc_msgSend(this[2360], "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
  uint64_t v2 = (void *)[this[2360] childNodesPassingTest:&__block_literal_global_82];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v7 = *(void **)(*((void *)&v8 + 1) + 8 * v6);
        objc_msgSend(v7, "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
        [v7 setName:objc_msgSend(NSString, "stringWithFormat:", @"child of %u", *((unsigned int *)this + 20))];
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

BOOL ___ZN29OZEnvironmentMeshSceneElement22didCreateRootNodeCloneEv_block_invoke(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

uint64_t OZEnvironmentMeshSceneElement::physicsShape(OZEnvironmentMeshSceneElement *this, const CMTime *a2)
{
  return 3;
}

void OZEnvironmentMeshSceneElement::setMeshNode(OZEnvironmentMeshSceneElement *this, SCNNode *a2, float a3)
{
  uint64_t v4 = (const void *)*((void *)this + 120);
  if (v4)
  {
    if (v7)
    {
      long long v8 = (std::recursive_mutex *)OZGroup::masterScene(v7);
      std::recursive_mutex::lock(v8);
      long long v9 = (std::recursive_mutex *)(*(uint64_t (**)(OZEnvironmentMeshSceneElement *))(*(void *)this + 2336))(this);
      std::recursive_mutex::lock(v9);
      long long v10 = (void *)[(id)PCBitmap::getRepresentation((PCBitmap *)v9) rootNode];
      long long v11 = (SCNNode *)objc_msgSend((id)objc_msgSend(v10, "childNodes"), "firstObject");
      if ([(SCNNode *)v11 name]
        && [(NSString *)[(SCNNode *)v11 name] compare:[(SCNNode *)a2 name]] == NSOrderedSame)
      {
        long long v15 = v11;
      }
      else
      {
        long long v15 = [(SCNNode *)a2 clone];
        [(SCNNode *)v11 removeFromParentNode];
        [v10 addChildNode:v15];
        [(SCNNode *)v15 setRenderingOrder:-1];
        OZEnvironmentMeshSceneElement::updateMeshMaterials(this, v15);
        [*((id *)this + 2360) removeFromParentNode];

        *((void *)this + 2360) = 0;
        *((void *)this + 237OZChannelEnum::~OZChannelEnum(this - 2) = 0;
        OZ3DEngineSceneElement::applyShader(this);
      }
      *(float *)&double v12 = a3;
      *(float *)&double v13 = a3;
      *(float *)&double v14 = a3;
      -[SCNNode setScale:](v15, "setScale:", v12, v13, v14);
      std::recursive_mutex::unlock(v9);
      std::recursive_mutex::unlock(v8);
    }
  }
}

void sub_1B7CDCF50(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::updateMeshMaterials(OZEnvironmentMeshSceneElement *this, SCNNode *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(SCNNode *)a2 childNodesPassingTest:&__block_literal_global_11];
  uint64_t v4 = objc_opt_new();
  [v4 setLightingModelName:*MEMORY[0x1E4F3B328]];
  if (OZ3DEngineSceneElement::hasShader(this)) {
    uint64_t v5 = 15;
  }
  else {
    uint64_t v5 = 0;
  }
  [v4 setColorBufferWriteMask:v5];
  [v4 setReadsFromDepthBuffer:1];
  [v4 setWritesToDepthBuffer:1];
  [v4 setDoubleSided:1];
  double v14 = v4;
  v20[0] = v4;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v7 = [(NSArray *)v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v16;
    long long v10 = (OZChannel *)((char *)this + 24408);
    long long v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v3);
        }
        double v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        objc_msgSend(v13, "setGeometry:", objc_msgSend(MEMORY[0x1E4F3B208], "geometryWithSources:elements:", objc_msgSend((id)objc_msgSend(v13, "geometry"), "geometrySources"), objc_msgSend((id)objc_msgSend(v13, "geometry"), "geometryElements")));
        objc_msgSend((id)objc_msgSend(v13, "geometry"), "setMaterials:", v6);
        objc_msgSend((id)objc_msgSend(v13, "geometry"), "setSubdivisionLevel:", (int)OZChannel::getValueAsInt(v10, v11, 0.0));
        objc_msgSend(v13, "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
      }
      uint64_t v8 = [(NSArray *)v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v8);
  }
}

BOOL ___ZN29OZEnvironmentMeshSceneElement19updateMeshMaterialsEP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

void OZEnvironmentMeshSceneElement::buildContour(void *a1@<X0>, float64x2_t *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  long long v16 = (const void *)a1[120];
  if (v16) {
  else
  }
    long long v17 = 0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v17 + 20744), 1, 1)) {
    long long v18 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v17);
  }
  else {
    long long v18 = (std::recursive_mutex *)(*(uint64_t (**)(void *))(*a1 + 2336))(a1);
  }
  int32x2_t v19 = (PCBitmap *)v18;
  std::recursive_mutex::lock(v18);
  Representatiouint64_t n = PCBitmap::getRepresentation(v19);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  unint64_t v21 = (OZScene *)(*(uint64_t (**)(void *))(*a1 + 272))(a1);
  SceneComposer = (void *)OZScene::getSceneComposer(v21);
  int v23 = 0;
  double v56 = COERCE_DOUBLE(vcvt_f32_f64(*a2));
  float v24 = -1.0;
  if (a7 >= 0.0) {
    float v24 = 1.0;
  }
  v25.i64[0] = 0;
  v25.i32[2] = 0;
  if (a3) {
    float v26 = 0.0;
  }
  else {
    float v26 = 1.0;
  }
  if (a3) {
    float v27 = 1.0;
  }
  else {
    float v27 = 0.0;
  }
  if (a3) {
    unsigned int v28 = -1;
  }
  else {
    unsigned int v28 = 0;
  }
  int8x16_t v29 = vbslq_s8((int8x16_t)vdupq_n_s32(v28), (int8x16_t)xmmword_1B83475C0, (int8x16_t)LODWORD(v24));
  float v30 = (float)(a7 * -11.25) * 0.0174532925;
  v31.i64[0] = 0;
  v31.i64[1] = v29.u32[2];
  float32x4_t v52 = v31;
  float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1);
  v25.i32[3] = v29.i32[3];
  float v54 = *(float *)v29.i32;
  float32x4_t v55 = v25;
  float64x2_t v51 = (float64x2_t)vdupq_n_s64(0x3FECCCCCC0000000uLL);
  do
  {
    int v64 = 1065353216;
    int v61 = 1065353216;
    *(_DWORD *)&v59[20] = 1065353216;
    *(_DWORD *)double v59 = 1065353216;
    *(_OWORD *)&v59[4] = 0uLL;
    *(void *)&v59[24] = 0;
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    LODWORD(v57.f64[0]) = 0;
    *((float *)v57.f64 + 1) = v26;
    *(void *)&v57.f64[1] = LODWORD(v27);
    PCMatrix44Tmpl<float>::rotate((uint64_t)v59, (float *)&v57, 0, v30 * (float)v23);
    float64x2_t v57 = (float64x2_t)__PAIR64__(LODWORD(v27), LODWORD(v26));
    PCMatrix44Tmpl<float>::rotate((uint64_t)v59, (float *)&v57, 0, a8);
    int32x4_t v32 = *(int32x4_t *)v59;
    v32.i32[1] = *(_DWORD *)&v59[16];
    int32x4_t v33 = *(int32x4_t *)&v59[4];
    v33.i32[1] = *(_DWORD *)&v59[20];
    v35.i64[0] = __PAIR64__(v62, HIDWORD(v60));
    v34.i64[0] = __PAIR64__(v61, v60);
    int32x4_t v36 = *(int32x4_t *)&v59[8];
    v36.i32[1] = *(_DWORD *)&v59[24];
    int32x4_t v37 = *(int32x4_t *)&v59[12];
    v37.i32[1] = *(_DWORD *)&v59[28];
    v34.i64[1] = __PAIR64__(HIDWORD(v63), HIDWORD(v62));
    int32x4_t v38 = vzip1q_s32(v32, v36);
    int32x4_t v39 = vzip1q_s32(v33, v37);
    v35.i64[1] = __PAIR64__(v64, v63);
    objc_msgSend(SceneComposer, "intersectionTestFrom:lookingAt:scene:", Representation, v56, *(double *)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v38, v39), v54), v53, (float32x4_t)vzip2q_s32(v38, v39)), v52, (float32x4_t)vzip1q_s32(v34, v35)), v55, (float32x4_t)vzip2q_s32(v34, v35)).i64);
    if (v42 != 0.0)
    {
      double v43 = a2[1].f64[0];
      double v44 = (v41 - v43) * 0.899999976;
      float64x2_t v45 = vaddq_f64(*a2, vmulq_f64(vsubq_f64(vcvtq_f64_f32(v40), *a2), v51));
      double v46 = v43 + v44;
      float64x2_t v57 = v45;
      double v58 = v46;
      double v47 = (float64x2_t *)a6[1];
      if ((unint64_t)v47 >= a6[2])
      {
        uint64_t v48 = std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(a6, (uint64_t)&v57);
      }
      else
      {
        *double v47 = v45;
        v47[1].f64[0] = v46;
        uint64_t v48 = (uint64_t)&v47[1].f64[1];
      }
      a6[1] = v48;
    }
    ++v23;
  }
  while (v23 != 32);
  if (a6[1] != *a6)
  {
    if (a4) {
      std::vector<PCVector3<double>>::insert(a6, (_OWORD *)*a6, (unint64_t)a2);
    }
    if (a5)
    {
      double v49 = (float64x2_t *)a6[1];
      if ((unint64_t)v49 >= a6[2])
      {
        uint64_t v50 = std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(a6, (uint64_t)a2);
      }
      else
      {
        *double v49 = *a2;
        v49[1].f64[0] = a2[1].f64[0];
        uint64_t v50 = (uint64_t)&v49[1].f64[1];
      }
      a6[1] = v50;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v19);
}

void sub_1B7CDD600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
  double v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void PCMatrix44Tmpl<float>::rotate(uint64_t a1, float *a2, int a3, float a4)
{
  float v6 = *a2;
  float v5 = a2[1];
  float v7 = a2[2];
  if (a3)
  {
    float v8 = sqrtf((float)((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)) + (float)(a2[3] * a2[3]));
    float v6 = v6 / v8;
    float v5 = v5 / v8;
    float v7 = v7 / v8;
  }
  float sinval = 0.0;
  float cosval = 1.0;
  if (a4 != 0.0)
  {
    float sinval = 1.0;
    float cosval = 0.0;
    if (fabsf(a4 + -1.5708) >= 0.00001 && fabsf(a4 + 4.7124) >= 0.00001)
    {
      float sinval = -1.0;
      if (fabsf(a4 + 1.5708) >= 0.00001 && fabsf(a4 + -4.7124) >= 0.00001)
      {
        float sinval = 0.0;
        float cosval = -1.0;
        if (fabsf(a4 + -3.1416) >= 0.00001 && fabsf(a4 + 3.1416) >= 0.00001)
        {
          __float2 v11 = __sincosf_stret(a4);
          float cosval = v11.__cosval;
          float sinval = v11.__sinval;
        }
      }
    }
  }
  float v12 = (float)(v5 * v6) * (float)(1.0 - cosval);
  float v13 = (float)(v7 * v6) * (float)(1.0 - cosval);
  float v14 = (float)(v7 * v5) * (float)(1.0 - cosval);
  float v15 = v6 * sinval;
  float v16 = v5 * sinval;
  float v17 = v7 * sinval;
  int v21 = 1065353216;
  _OWORD v18[3] = 0.0;
  v18[7] = 0.0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  v18[0] = cosval + (float)((float)(v6 * v6) * (float)(1.0 - cosval));
  v18[1] = v12 - v17;
  double v18[2] = v13 + v16;
  v18[4] = v12 + v17;
  v18[5] = cosval + (float)((float)(v5 * v5) * (float)(1.0 - cosval));
  v18[6] = v14 - v15;
  _OWORD v18[8] = v13 - v16;
  v18[9] = v14 + v15;
  v18[10] = cosval + (float)((float)(v7 * v7) * (float)(1.0 - cosval));
  PCMatrix44Tmpl<float>::rightMult(a1, v18);
}

unint64_t std::vector<PCVector3<double>>::insert(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t v4 = (unint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  int64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    float v27 = a1 + 2;
    if (v15) {
      float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), v15);
    }
    else {
      float v16 = 0;
    }
    float v17 = &v16[8 * (v8 >> 3)];
    CMTime __p = v16;
    float v24 = v17;
    float32x4_t v25 = v17;
    float v26 = &v16[24 * v15];
    if (v9 == v15)
    {
      if (v8 < 1)
      {
        if (v7 == v4) {
          unint64_t v19 = 1;
        }
        else {
          unint64_t v19 = 0x5555555555555556 * (v8 >> 3);
        }
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v19);
        float v17 = &v20[24 * (v19 >> 2)];
        CMTime __p = v20;
        float v24 = v17;
        float v26 = &v20[24 * v21];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        uint64_t v18 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v18 = v9 + 1;
        }
        v17 -= 24 * (v18 >> 1);
        float v24 = v17;
      }
    }
    *(_OWORD *)float v17 = *(_OWORD *)a3;
    *((void *)v17 + OZChannelEnum::~OZChannelEnum(this - 2) = *(void *)(a3 + 16);
    float32x4_t v25 = v17 + 24;
    unint64_t v4 = std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p, v4);
    if (v25 != v24) {
      float32x4_t v25 = &v24[(v25 - v24 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    *(void *)(v7 + 8 * (v8 >> 3) + 16) = *(void *)(a3 + 16);
    a1[1] = (uint64_t)a2 + 24;
  }
  else
  {
    std::vector<PCVector3<double>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)a2 + 24);
    if (v4 <= a3) {
      a3 += 24 * (a1[1] > a3);
    }
    long long v12 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)unint64_t v4 = v12;
  }
  return v4;
}

void sub_1B7CDDA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<PCVector3<double>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = a2 + v4 - a4;
  uint64_t v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    result.n128_u64[0] = *(void *)(v6 + 16);
    *(void *)(v7 + 16) = result.n128_u64[0];
    v7 += 24;
    v6 += 24;
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    int64_t v9 = (__n128 *)(v4 - 24);
    uint64_t v10 = 8 * (v5 >> 3);
    uint64_t v11 = a2 - 24;
    do
    {
      __n128 result = *(__n128 *)(v11 + v10);
      v9[1].n128_u64[0] = *(void *)(v11 + v10 + 16);
      *int64_t v9 = result;
      int64_t v9 = (__n128 *)((char *)v9 - 24);
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

uint64_t std::vector<PCVector3<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(void *)(v6 + 16) = *(void *)(v7 + 16);
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  for (uint64_t i = a2[2]; a3 != v9; a3 += 24)
  {
    *(_OWORD *)uint64_t i = *(_OWORD *)a3;
    *(void *)(i + 16) = *(void *)(a3 + 16);
    i += 24;
  }
  a2[2] = i;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

float OZSnap::OZSnap(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 1OZChannelEnum::~OZChannelEnum(this - 2) = result;
  return result;
}

void OZSnap::OZSnap(OZSnap *this, int a2, double a3, double a4, double a5)
{
  *(_DWORD *)this = a2;
  float v5 = a3;
  float v6 = a4;
  *((float *)this + 1) = v5;
  *((float *)this + OZChannelEnum::~OZChannelEnum(this - 2) = v6;
  float v7 = a5;
  *((float *)this + 3) = v7;
}

BOOL OZSnap::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 0;
  }
  float v2 = *(float *)(a1 + 4);
  float v3 = *(float *)(a2 + 4);
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  float v4 = *(float *)(a1 + 8);
  float v5 = *(float *)(a2 + 8);
  if (v4 < v5) {
    return 1;
  }
  return v4 <= v5 && *(float *)(a1 + 12) < *(float *)(a2 + 12);
}

void OZSingleChannelBehavior::OZSingleChannelBehavior(OZSingleChannelBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F115F750;
  *(void *)(v5 + 16) = &unk_1F115FA90;
  *(void *)(v5 + 48) = &unk_1F115FCE8;
  *(void *)(v5 + 336) = &unk_1F115FD40;
  *(void *)(v5 + 536) = &unk_1F115FD68;
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)(v5 + 544));
  *((_OWORD *)this + 39) = xmmword_1B83835A0;
  PCString::PCString(&v6, "Affecting Object (Hidden)");
  OZChanObjectManipRef::OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640), &v6, (OZChannelFolder *)((char *)this + 56), 0xC7u, 2u);
  PCString::~PCString(&v6);
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 105);
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *((unsigned char *)this + 85OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *((void *)this + 107) = 0x4014000000000000;
}

void sub_1B7CDE330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChanObjectManipRef::~OZChanObjectManipRef(v12);
  OZChannelInfo::~OZChannelInfo(v11);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::OZSingleChannelBehavior(OZSingleChannelBehavior *this, const OZSingleChannelBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F115F750;
  *(void *)(v5 + 16) = &unk_1F115FA90;
  *(void *)(v5 + 48) = &unk_1F115FCE8;
  *(void *)(v5 + 336) = &unk_1F115FD40;
  *(void *)(v5 + 536) = &unk_1F115FD68;
  uint64_t v6 = v5 + 544;
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)(v5 + 544));
  *((_OWORD *)this + 39) = *((_OWORD *)a2 + 39);
  OZChanObjectManipRef::OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640), (const OZChannelBase *)((char *)a2 + 640), (OZChannelFolder *)((char *)this + 56));
  *((_OWORD *)this + 50) = *((_OWORD *)a2 + 50);
  *((_OWORD *)this + 51) = *((_OWORD *)a2 + 51);
  PCString::PCString((PCString *)this + 105, (const PCString *)a2 + 105);
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = *((_DWORD *)a2 + 212);
  *((unsigned char *)this + 85OZChannelEnum::~OZChannelEnum(this - 2) = *((unsigned char *)a2 + 852);
  *((void *)this + 107) = *((void *)a2 + 107);
  if ((*(uint64_t (**)(const OZSingleChannelBehavior *))(*(void *)a2 + 320))(a2))
  {
    if (*((void *)a2 + 49))
    {
      float v7 = *(OZChannelBase **)(*((void *)a2 + 47) + 32);
      if (v7)
      {
        ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(a2, v7);
        *((_OWORD *)this + 50) = *(_OWORD *)(*(void *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                       + 8)
                                           + 8);
        *((_OWORD *)this + 51) = *(_OWORD *)(*(void *)(*(void *)(*((void *)a2 + 47) + 32) + 8) + 8);
        OZChannelInfo::operator=(v6, (uint64_t)a2 + 544);
        Internalunsigned int Name = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
        PCString::set((PCString *)this + 105, InternalName);
        (*(void (**)(OZObjectManipulator *))(*(void *)ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
        operator new();
      }
    }
  }
  *((_OWORD *)this + 50) = *((_OWORD *)a2 + 50);
  *((_OWORD *)this + 51) = *((_OWORD *)a2 + 51);
  PCString::set((PCString *)this + 105, (const PCString *)a2 + 105);
  OZChannelInfo::operator=(v6, (uint64_t)a2 + 544);
  if (*((void *)a2 + 104)) {
    operator new();
  }
  *((void *)this + 104) = 0;
}

void sub_1B7CDE64C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v5, 0x1012C40EC159624);
  PCString::~PCString(v4);
  OZChanObjectManipRef::~OZChanObjectManipRef(v3);
  OZChannelInfo::~OZChannelInfo(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::getChanBase(OZSingleChannelBehavior *this)
{
  if (*((void *)this + 49)) {
    return *(void *)(*((void *)this + 47) + 32);
  }
  else {
    return 0;
  }
}

void *OZSingleChannelBehavior::getObjectManipulatorForChannel(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t ObjectManipulator = (void *)OZChannelBase::getObjectManipulator(a2);
  float v4 = ObjectManipulator;
  if (!ObjectManipulator) {
    return v4;
  }
  uint64_t v5 = *ObjectManipulator;
  uint64_t v6 = *ObjectManipulator;
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(v5 + 232))(v4);
    if (v10 != (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this))
    {
      unint64_t v11 = *(void *)((*(uint64_t (**)(void *))(*v4 + 256))(v4) + 8);
      long long v12 = xmmword_1B8381360;
      if (OZFactory::isKindOfClass(v11, (int32x4_t *)&v12))
      {
        float v4 = (void *)(*(uint64_t (**)(void *))(*v4 + 232))(v4);
        if (v4)
        {
          while ((void *)(*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this) != v4)
          {
            float v4 = (void *)v4[120];
            if (!v4) {
              return v4;
            }
          }
          v4 += 2;
        }
      }
    }
    return v4;
  }
  long long v8 = *(OZChannelBase **)((*(uint64_t (**)(void *))(v5 + 216))(v4) + 48);

  return (void *)OZChannelBase::getObjectManipulator(v8);
}

void OZSingleChannelBehavior::~OZSingleChannelBehavior(OZSingleChannelBehavior *this)
{
  *(void *)this = &unk_1F115F750;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115FA90;
  *((void *)this + 6) = &unk_1F115FCE8;
  *((void *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F115FD40;
  *((void *)this + 67) = &unk_1F115FD68;
  float v2 = (void **)*((void *)this + 104);
  if (v2)
  {
    OZChannelRef::~OZChannelRef(v2);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 104) = 0;
  PCString::~PCString((PCString *)this + 105);
  OZChanObjectManipRef::~OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)((char *)this + 544));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZSingleChannelBehavior::~OZSingleChannelBehavior(OZSingleChannelBehavior *this)
{
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void **OZSingleChannelBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  OZChannelInfo::operator=(a1 + 544, (uint64_t)(v5 + 544));
  *(_OWORD *)(a1 + 624) = *((_OWORD *)v6 + 39);
  *(_DWORD *)(a1 + 848) = *((_DWORD *)v6 + 212);
  if ((*(uint64_t (**)(char *))(*(void *)v6 + 320))(v6))
  {
    if (*((void *)v6 + 49))
    {
      uint64_t v7 = *(OZChannelBase **)(*((void *)v6 + 47) + 32);
      if (v7)
      {
        ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)v6, v7);
        *(_OWORD *)(a1 + 800) = *(_OWORD *)(*(void *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                      + 8)
                                          + 8);
        *(_OWORD *)(a1 + 816) = *(_OWORD *)(*(void *)(*(void *)(*((void *)v6 + 47) + 32) + 8) + 8);
        Internalunsigned int Name = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
        PCString::set((PCString *)(a1 + 840), InternalName);
        (*(void (**)(OZObjectManipulator *))(*(void *)ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
        uint64_t v10 = *(void ***)(a1 + 832);
        if (v10)
        {
          OZChannelRef::~OZChannelRef(v10);
          MEMORY[0x1BA9BFBA0]();
        }
        *(void *)(a1 + 83OZChannelEnum::~OZChannelEnum(this - 2) = 0;
        operator new();
      }
    }
  }
  OZChanObjectManipRef::operator=(a1 + 640, v6 + 640);
  *(_OWORD *)(a1 + 800) = *((_OWORD *)v6 + 50);
  *(_OWORD *)(a1 + 816) = *((_OWORD *)v6 + 51);
  PCString::set((PCString *)(a1 + 840), (const PCString *)v6 + 105);
  float result = *(void ***)(a1 + 832);
  if (result)
  {
    OZChannelRef::~OZChannelRef(result);
    float result = (void **)MEMORY[0x1BA9BFBA0]();
  }
  *(void *)(a1 + 83OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  if (*((void *)v6 + 104)) {
    operator new();
  }
  if (v4)
  {
    uint64_t v12 = v4 + 1000;
    for (uint64_t i = *(void *)(v4 + 1008); i != v12; uint64_t i = *(void *)(i + 8))
    {
      if (*(void *)(i + 16) == a1) {
        goto LABEL_20;
      }
    }
    uint64_t i = v4 + 1000;
LABEL_20:
    uint64_t v14 = *(void *)(i + 8);
    if (v14 == v12) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    float v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104);
    return (void **)v16(a1, v4, v15);
  }
  return result;
}

void sub_1B7CDEEC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::didAddToNode(OZSingleChannelBehavior *this, OZSceneNode *a2)
{
  uint64_t result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 852))
  {
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 808);
      return v5(this);
    }
  }
  return result;
}

void **OZSingleChannelBehavior::commonDidAddToNode(void **this)
{
  if (!this[104]) {
    return this;
  }
  uint64_t v1 = this;
  uint64_t v2 = (*((uint64_t (**)(void **))*this + 40))(this);
  this = (void **)OZChanObjectManipRef::getObjectID((OZChannel *)(v1 + 80));
  float v3 = this;
  if (!this || *(_DWORD *)(v2 + 80) == this)
  {
    uint64_t v5 = v2 + 16;
    goto LABEL_15;
  }
  if (OZSceneNode::getEffect((OZSceneNode *)v2, (int)this))
  {
    this = (void **)OZSceneNode::getEffect((OZSceneNode *)v2, (int)v3);
    uint64_t v4 = this + 6;
  }
  else
  {
    if (OZSceneNode::getBehavior((OZSceneNode *)v2, (int)v3))
    {
      this = (void **)OZSceneNode::getBehavior((OZSceneNode *)v2, (int)v3);
    }
    else
    {
      this = (void **)(*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 328))(v2, v3);
      if (!this)
      {
        uint64_t v5 = 0;
        goto LABEL_15;
      }
      this = (void **)(*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 328))(v2, v3);
    }
    uint64_t v4 = this + 2;
  }
  if (this) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_15:
  int v6 = *((_DWORD *)v1 + 200);
  int v7 = *((_DWORD *)v1 + 201);
  unsigned int v8 = *((_DWORD *)v1 + 202);
  int v9 = *((_DWORD *)v1 + 203);
  if (!(v7 | v6 | v8 | v9))
  {
    BOOL v24 = 0;
    if (!v5) {
      return this;
    }
    goto LABEL_52;
  }
  if (v5)
  {
    this = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 256))(v5);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)this[1] + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
    {
      BOOL v24 = 0;
      goto LABEL_52;
    }
    int v6 = *((_OWORD *)v1 + 50);
    int v7 = HIDWORD(v1[100]);
    unsigned int v8 = v1[101];
    int v9 = HIDWORD(*((_OWORD *)v1 + 50));
  }
  uint64_t v10 = *(_DWORD **)(v2 + 8);
  int v11 = v10[2];
  int v12 = v10[3];
  int v14 = v10[4];
  int v13 = v10[5];
  if (v11 == v6 && v12 == v7 && v14 == v8 && v13 == v9)
  {
    BOOL v24 = 0;
    uint64_t v5 = v2 + 16;
  }
  else
  {
    uint64_t v18 = *(void *)(v2 + 984);
    if (v18 == v2 + 976) {
      goto LABEL_74;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v18 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v21 + 40) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
      {
        uint64_t v22 = v21 + 48;
        if (v20)
        {
          Internalunsigned int Name = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v21 + 48));
          this = (void **)PCString::size(InternalName);
          if (this)
          {
            this = (void **)PCString::compare(InternalName, (const PCString *)v1 + 105);
            if (!this) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          uint64_t v20 = *(void *)(v18 + 16);
          uint64_t v19 = v21 + 48;
        }
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18 != v2 + 976);
    uint64_t v22 = v19;
    if (!v19)
    {
LABEL_74:
      if (*((unsigned char *)v1 + 321) || (uint64_t v29 = *(void *)(v2 + 1008), v29 == v2 + 1000))
      {
LABEL_45:
        uint64_t v22 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v30 = *(void *)(v29 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v30 + 8)+ 8), *((int32x4_t *)v1 + 50))))) & 1) == 0&& (void **)v30 != v1)
          {
            break;
          }
          uint64_t v29 = *(void *)(v29 + 8);
          if (v29 == v2 + 1000) {
            goto LABEL_45;
          }
        }
        uint64_t v22 = v30 + 16;
      }
    }
LABEL_46:
    uint64_t v25 = v2 + 16;
    if (!v2) {
      uint64_t v25 = 0;
    }
    BOOL v24 = v22 == 0;
    if (v22) {
      uint64_t v5 = v22;
    }
    else {
      uint64_t v5 = v25;
    }
    if (!v5) {
      return this;
    }
  }
LABEL_52:
  this = (void **)(*(uint64_t (**)(uint64_t, void *, double))(*(void *)v5 + 224))(v5, v1[104], *((double *)v1 + 107));
  float v27 = (OZSingleChannelBehavior *)this;
  if (v3)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 256))(v5);
    this = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 56))(v28);
    if (!v27) {
      return this;
    }
    if (this != v3)
    {
      this = (void **)(*((uint64_t (**)(void **, OZSingleChannelBehavior *))*v1 + 96))(v1, v27);
      if (!this) {
        return this;
      }
    }
  }
  else if (!this)
  {
    return this;
  }
  if (*((double *)v1 + 107) < 3.0) {
    *((_DWORD *)v1 + 21OZChannelEnum::~OZChannelEnum(this - 2) = OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(v27, v26);
  }
  this = (void **)OZSingleChannelBehavior::addToChannelHelper((OZSingleChannelBehavior *)v1, (OZChannelBase *)v27, (OZChannelBase *)v27, v24);
  if (this)
  {
    this = (void **)v1[104];
    if (this)
    {
      OZChannelRef::~OZChannelRef(this);
      this = (void **)MEMORY[0x1BA9BFBA0]();
    }
    v1[104] = 0;
  }
  return this;
}

uint64_t OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  if (!this) {
    return 0;
  }
  {
    return 4;
  }
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t OZSingleChannelBehavior::addToChannelHelper(OZSingleChannelBehavior *this, OZChannelBase *a2, OZChannelBase *a3, int a4)
{
  int v4 = a4;
  if (a4
    && (int8x16_t v8 = *((int8x16_t *)this + 51),
        *(void *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a2->var1 + 8), (int32x4_t)v8)))))return 0; {
  }
    }
  else if (!a2)
  {
    return 1;
  }
  if (!v9)
  {
    if (v10)
    {
      int v11 = (const void ***)v10[14];
      if (v11)
      {
        int v12 = *v11;
        if (*v11 != v11[1])
        {
          int v13 = 1;
          while (1)
          {
            int v14 = *v12;
            if (*v12)
            {
              if (v15)
              {
                if ((*((_DWORD *)this + 212) & v13) == 0)
                {
                  if (((*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 792))(this) & 1) != 0
                    || (*((unsigned int (**)(OZChannel *))v15->var0 + 64))(v15))
                  {
                    OZChannelInfo::OZChannelInfo((OZChannelInfo *)v18, v15->var16);
                    if ((v4 & 1) != 0 && !OZChannelInfo::operator==((uint64_t)v18, (uint64_t)this + 544)) {
                      goto LABEL_28;
                    }
                    OZChannelBehavior::setAffectedChannel(this, a3);
                    OZSingleChannelBehavior::addToOneChannel(this, v15);
                    OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v18);
                    LOBYTE(v4) = 0;
                  }
                  else
                  {
                    (*(void (**)(OZSingleChannelBehavior *, OZChannel *))(*(void *)this + 800))(this, v15);
                  }
                }
                v13 *= 2;
              }
              else if (v16)
              {
                OZSingleChannelBehavior::addToChannelHelper(this, v16, a3, v4 & 1);
              }
            }
            if (++v12 == v11[1]) {
              return 1;
            }
          }
        }
      }
    }
    return 1;
  }
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)v18, v9->var16);
  if (!v4 || OZChannelInfo::operator==((uint64_t)v18, (uint64_t)this + 544))
  {
    OZChannelBehavior::setAffectedChannel(this, a2);
    OZSingleChannelBehavior::addToOneChannel(this, v9);
    OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v18);
    return 1;
  }
LABEL_28:
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v18);
  return 0;
}

void sub_1B7CDF7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)va);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::willRemove(PCString *this)
{
  uint64_t v2 = ((uint64_t (*)(PCString *))this->var0[10].isa)(this);
  if (this[49].var0)
  {
    CMTime var0 = this[47].var0;
    if (v2 && var0[1].isa != 0)
    {
      ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, (OZChannelBase *)var0[1].isa);
      *(_OWORD *)&this[100].CMTime var0 = *(_OWORD *)(*(void *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                         + 8)
                                             + 8);
      Internalunsigned int Name = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
      PCString::set(this + 105, InternalName);
      p_isa = &this[104].var0->isa;
      if (p_isa)
      {
        OZChannelRef::~OZChannelRef(p_isa);
        MEMORY[0x1BA9BFBA0]();
      }
      this[104].CMTime var0 = 0;
      operator new();
    }
  }

  OZChannelBehavior::willRemove((OZChannelBehavior *)this);
}

void sub_1B7CDF940(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::sceneNodeDidLoad(OZSingleChannelBehavior *this)
{
  (*(void (**)(OZSingleChannelBehavior *))(*(void *)this + 808))(this);
  uint64_t result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this);
  uint64_t v3 = *(void *)(result + 1008);
  if (v3 != result + 1000)
  {
    int v4 = *(OZSingleChannelBehavior **)(v3 + 16);
    if (v4 != this)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v3 = *(void *)(v3 + 8);
        if (v3 == result + 1000) {
          break;
        }
        int v4 = *(OZSingleChannelBehavior **)(v3 + 16);
      }
      while (v4 != this);
      if (v5) {
        uint64_t result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 112))(this);
      }
    }
  }
  *((unsigned char *)this + 85OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  return result;
}

uint64_t OZSingleChannelBehavior::didAddSceneNodeToScene(OZSingleChannelBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((unsigned char *)this + 852))
  {
    (*(void (**)(OZSingleChannelBehavior *))(*(void *)this + 808))(this);
    uint64_t result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this);
    uint64_t v4 = *(void *)(result + 1008);
    if (v4 != result + 1000)
    {
      uint64_t v5 = *(OZSingleChannelBehavior **)(v4 + 16);
      if (v5 == this)
      {
        int v6 = 0;
      }
      else
      {
        do
        {
          int v6 = v5;
          uint64_t v4 = *(void *)(v4 + 8);
          if (v4 == result + 1000) {
            break;
          }
          uint64_t v5 = *(OZSingleChannelBehavior **)(v4 + 16);
        }
        while (v5 != this);
      }
      if (v6)
      {
        int v7 = *(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 112);
        return v7(this);
      }
    }
  }
  return result;
}

void OZSingleChannelBehavior::willDeleteMaterialLayer(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  if (*((void *)this + 49)) {
    uint64_t v4 = *(OZChannelBase **)(*((void *)this + 47) + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  OZChannelBehavior::willDeleteMaterialLayer(this, a2);
  int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  if (ObjectManipulator) {
    uint64_t v7 = ObjectManipulator - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 192))(v7);
  if (ObjectID == (*(unsigned int (**)(uint64_t))(*(void *)v8 + 56))(v8))
  {
    if (v4 && OZChannelBase::getObjectManipulator(v4))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v4);
      *((_OWORD *)this + 50) = *(_OWORD *)(*(void *)((*(uint64_t (**)(void *))(*ObjectManipulatorForChannel
                                                                                           + 256))(ObjectManipulatorForChannel)
                                                     + 8)
                                         + 8);
      if (v4->var5) {
        var5 = v4->var5;
      }
      else {
        var5 = &v4->var4;
      }
      PCString::set((PCString *)this + 105, var5);
      int v11 = (void **)*((void *)this + 104);
      if (v11)
      {
        OZChannelRef::~OZChannelRef(v11);
        MEMORY[0x1BA9BFBA0]();
      }
      *((void *)this + 104) = 0;
      operator new();
    }
    *((_OWORD *)this + 50) = 0u;
    PCString::clear((PCString *)this + 105);
    int v12 = (void **)*((void *)this + 104);
    if (v12)
    {
      OZChannelRef::~OZChannelRef(v12);
      MEMORY[0x1BA9BFBA0]();
    }
    *((void *)this + 104) = 0;
    OZChannelBehavior::clearChannels(this);
  }
}

void sub_1B7CDFD6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::willDeleteObject(OZSingleChannelBehavior *this, OZObjectManipulator *a2)
{
  if (*((void *)this + 49)) {
    uint64_t v4 = *(OZChannelBase **)(*((void *)this + 47) + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  OZChannelBehavior::willDeleteObject(this, a2);
  int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  uint64_t v6 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  if (ObjectID == (*(unsigned int (**)(uint64_t))(*(void *)v6 + 56))(v6))
  {
    if (v4 && OZChannelBase::getObjectManipulator(v4))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v4);
      *((_OWORD *)this + 50) = *(_OWORD *)(*(void *)((*(uint64_t (**)(void *))(*ObjectManipulatorForChannel
                                                                                           + 256))(ObjectManipulatorForChannel)
                                                     + 8)
                                         + 8);
      if (v4->var5) {
        var5 = v4->var5;
      }
      else {
        var5 = &v4->var4;
      }
      PCString::set((PCString *)this + 105, var5);
      int v9 = (void **)*((void *)this + 104);
      if (v9)
      {
        OZChannelRef::~OZChannelRef(v9);
        MEMORY[0x1BA9BFBA0]();
      }
      *((void *)this + 104) = 0;
      operator new();
    }
    *((_OWORD *)this + 50) = 0u;
    PCString::clear((PCString *)this + 105);
    uint64_t v10 = (void **)*((void *)this + 104);
    if (v10)
    {
      OZChannelRef::~OZChannelRef(v10);
      MEMORY[0x1BA9BFBA0]();
    }
    *((void *)this + 104) = 0;
    OZChannelBehavior::clearChannels(this);
  }
}

void sub_1B7CDFF9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::didUndoDeleteOfObject(OZSingleChannelBehavior *this, OZObjectManipulator *a2)
{
  int ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  uint64_t v5 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  if (ObjectID == result)
  {
    (*(void (**)(OZSingleChannelBehavior *))(*(void *)this + 808))(this);
    uint64_t result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this);
    uint64_t v7 = *(void *)(result + 1008);
    if (v7 != result + 1000)
    {
      uint64_t v8 = *(OZSingleChannelBehavior **)(v7 + 16);
      if (v8 != this)
      {
        do
        {
          int v9 = v8;
          uint64_t v7 = *(void *)(v7 + 8);
          if (v7 == result + 1000) {
            break;
          }
          uint64_t v8 = *(OZSingleChannelBehavior **)(v7 + 16);
        }
        while (v8 != this);
        if (v9)
        {
          uint64_t v10 = *(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 112);
          return v10(this);
        }
      }
    }
  }
  return result;
}

void OZSingleChannelBehavior::willDeleteChannel(PCString *this, OZChannelBase *a2)
{
  if (this[49].var0) {
    isa = (OZChannelBase *)this[47].var0[1].isa;
  }
  else {
    isa = 0;
  }
  OZChannelBehavior::willDeleteChannel((OZChannelBehavior *)this, a2);
  if (isa && isa == a2)
  {
    if (OZChannelBase::getObjectManipulator(a2))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, a2);
      *(_OWORD *)&this[100].CMTime var0 = *(_OWORD *)(*(void *)((*(uint64_t (**)(void *))(*ObjectManipulatorForChannel
                                                                                               + 256))(ObjectManipulatorForChannel)
                                                         + 8)
                                             + 8);
      if (a2->var5) {
        var5 = a2->var5;
      }
      else {
        var5 = &a2->var4;
      }
      PCString::set(this + 105, var5);
      p_isa = &this[104].var0->isa;
      if (p_isa)
      {
        OZChannelRef::~OZChannelRef(p_isa);
        MEMORY[0x1BA9BFBA0]();
      }
      this[104].CMTime var0 = 0;
      operator new();
    }
    *(_OWORD *)&this[100].CMTime var0 = 0u;
    PCString::clear(this + 105);
    uint64_t v8 = &this[104].var0->isa;
    if (v8)
    {
      OZChannelRef::~OZChannelRef(v8);
      MEMORY[0x1BA9BFBA0]();
    }
    this[104].CMTime var0 = 0;
    OZChannelBehavior::clearChannels((OZChannelBehavior *)this);
  }
}

void sub_1B7CE02E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::didUndoDeleteChannel(unsigned __int8 **this, OZChannelBase *a2)
{
  if ((!this[49] || !*((void *)this[47] + 4)) && this[104])
  {
    ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, a2);
    uint64_t v5 = (const OZChannelBase *)(*(uint64_t (**)(void *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, a2, v5);
    if (OZChannelRef::operator==((unsigned __int8 *)v10, this[104]))
    {
      (*((void (**)(unsigned __int8 **))*this + 101))(this);
      uint64_t v6 = (*((uint64_t (**)(unsigned __int8 **))*this + 40))(this);
      uint64_t v7 = *(void *)(v6 + 1008);
      if (v7 != v6 + 1000)
      {
        uint64_t v8 = *(OZSingleChannelBehavior **)(v7 + 16);
        if (v8 != (OZSingleChannelBehavior *)this)
        {
          do
          {
            int v9 = v8;
            uint64_t v7 = *(void *)(v7 + 8);
            if (v7 == v6 + 1000) {
              break;
            }
            uint64_t v8 = *(OZSingleChannelBehavior **)(v7 + 16);
          }
          while (v8 != (OZSingleChannelBehavior *)this);
          if (v9) {
            (*((void (**)(unsigned __int8 **))*this + 14))(this);
          }
        }
      }
    }
    OZChannelRef::~OZChannelRef(v10);
  }
}

void sub_1B7CE0474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::updateChanRef(void *a1, uint64_t **a2)
{
  if (a1[104])
  {
    unint64_t v4 = *(void *)((*(uint64_t (**)(void *))(*a1 + 320))(a1) + 8);
    *(_OWORD *)&v33[0].CMTime var0 = xmmword_1B7E78220;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)v33))
    {
      uint64_t v5 = (const char *)a1[104];
      if (v5[23] < 0) {
        uint64_t v5 = *(const char **)v5;
      }
      PCString::PCString(&v32, v5);
      uint64_t v6 = PCString::cf_str(&v32);
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, @"/");
      uint64_t Count = CFArrayGetCount(ArrayBySeparatingStrings);
      if (Count < 1)
      {
        BOOL v26 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        CFIndex v9 = 0;
        MutableCopy = 0;
        int v11 = a2 + 1;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v9);
          if (CFStringCompare(ValueAtIndex, @".", 0))
          {
            unsigned int IntValue = CFStringGetIntValue(ValueAtIndex);
            int v14 = *v11;
            if (*v11)
            {
              uint64_t v15 = a2 + 1;
              do
              {
                unsigned int v16 = *((_DWORD *)v14 + 7);
                BOOL v17 = v16 >= IntValue;
                if (v16 >= IntValue) {
                  uint64_t v18 = v14;
                }
                else {
                  uint64_t v18 = v14 + 1;
                }
                if (v17) {
                  uint64_t v15 = (uint64_t **)v14;
                }
                int v14 = (uint64_t *)*v18;
              }
              while (*v18);
              if (v15 != v11 && IntValue >= *((_DWORD *)v15 + 7) && (int)IntValue >= 10000)
              {
                LODWORD(v31.var0) = IntValue;
                v33[0].CMTime var0 = (PC_Sp_counted_base *)&v31;
                uint64_t v20 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a2, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v33)+ 8);
                uint64_t v21 = *(uint64_t **)((*(uint64_t (**)(void *))(*a1 + 320))(a1) + 944);
                uint64_t v22 = *v21;
                uint64_t v23 = v21[1];
                while (v22 != v23)
                {
                  if (v20 == *(_DWORD *)(*(void *)v22 + 24))
                  {
                    if (!MutableCopy) {
                      MutableCopy = CFArrayCreateMutableCopy(allocator, Count, ArrayBySeparatingStrings);
                    }
                    CFStringRef v24 = CFStringCreateWithFormat(allocator, 0, @"%u", v20);
                    if (v24)
                    {
                      uint64_t v25 = MutableCopy;
                      CFArraySetValueAtIndex(MutableCopy, v9, v24);
                      CFRelease(v24);
                      BOOL v26 = MutableCopy != 0;
                      if (MutableCopy)
                      {
                        float v27 = (void **)a1[104];
                        if (v27)
                        {
                          OZChannelRef::~OZChannelRef(v27);
                          MEMORY[0x1BA9BFBA0]();
                        }
                        a1[104] = 0;
                        PCSharedCount::PCSharedCount(v33);
                        CFIndex v28 = 0;
                        while (1)
                        {
                          uint64_t v29 = CFArrayGetValueAtIndex(MutableCopy, v28);
                          PCURL::PCURL((PCURL *)&v31, v29);
                          PCString::append((PCString *)v33, &v31);
                          PCString::~PCString(&v31);
                          if (Count - 1 != v28) {
                            PCString::append((PCString *)v33, "/");
                          }
                          if (Count == ++v28) {
                            operator new();
                          }
                        }
                      }
                      goto LABEL_32;
                    }
                    break;
                  }
                  v22 += 8;
                }
              }
            }
          }
          ++v9;
        }
        while (v9 < Count);
        uint64_t v25 = MutableCopy;
        BOOL v26 = MutableCopy != 0;
      }
LABEL_32:
      CFRelease(ArrayBySeparatingStrings);
      if (v26) {
        CFRelease(v25);
      }
      PCString::~PCString(&v32);
    }
  }
}

void sub_1B7CE07E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, PCString a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x1012C40EC159624);
  PCString::~PCString(&a13);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void *OZSingleChannelBehavior::updateReferenceIDs(void *a1, uint64_t **a2)
{
  uint64_t result = OZChannelObjectRoot::updateReferenceIDs(a1 + 7, a2);
  if (*((unsigned char *)a1 + 852) || a1[104])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 320))(a1);
    if (result)
    {
      OZSingleChannelBehavior::updateChanRef(a1, a2);
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 808))(a1);
      *((unsigned char *)a1 + 85OZChannelEnum::~OZChannelEnum(this - 2) = 0;
    }
  }
  return result;
}

void *non-virtual thunk to'OZSingleChannelBehavior::updateReferenceIDs(uint64_t a1, uint64_t **a2)
{
  return OZSingleChannelBehavior::updateReferenceIDs((void *)(a1 - 16), a2);
}

uint64_t OZSingleChannelBehavior::getAffectedObject(OZSingleChannelBehavior *this)
{
  if (*((void *)this + 49) && (uint64_t v1 = *(OZChannelBase **)(*((void *)this + 47) + 32)) != 0) {
    return OZChannelBase::getObjectManipulator(v1);
  }
  else {
    return 0;
  }
}

void OZSingleChannelBehavior::setChannelRef(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  unint64_t v4 = (void **)*((void *)this + 104);
  if (v4)
  {
    OZChannelRef::~OZChannelRef(v4);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 104) = 0;
  }
  ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, a2);
  uint64_t v6 = (const OZChannelBase *)(*(uint64_t (**)(void *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
  OZChannelRef::OZChannelRef((OZChannelRef *)v9, a2, v6);
  uint64_t v7 = (*(uint64_t (**)(void *))(*ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
  OZChannel::setValue((OZChannel *)((char *)this + 640), MEMORY[0x1E4F1FA48], (double)v8, 0);
  operator new();
}

void sub_1B7CE0AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1BA9BFBA0](v2, 0x1012C40EC159624);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void *OZSingleChannelBehavior::addToOneChannel(OZSingleChannelBehavior *this, OZChannel *a2)
{
  unint64_t v4 = (void *)(*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 648))(this);
  OZChannel::appendCurveProcessingNode(a2, v4);

  return OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v4);
}

uint64_t OZSingleChannelBehavior::addToChannel(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  unint64_t v4 = (void **)*((void *)this + 104);
  if (v4)
  {
    OZChannelRef::~OZChannelRef(v4);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 104) = 0;
  }
  OZSingleChannelBehavior::addToChannelHelper(this, a2, a2, 0);
  if (!(*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this))
  {
    SceneNodeFromChauint64_t n = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, v5);
    (*(void (**)(OZSingleChannelBehavior *, OZChannelBehavior *))(*(void *)this + 776))(this, SceneNodeFromChan);
  }
  ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(this, a2);

  return OZChanObjectManipRef::setObject((OZSingleChannelBehavior *)((char *)this + 640), ObjectManipulatorForChannel, 0);
}

double OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double non-virtual thunk to'OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

__n128 OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.int64_t value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZSingleChannelBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 680))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZSingleChannelBehavior::solveNode((OZSingleChannelBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZSingleChannelBehavior::getNeededRange(OZSingleChannelBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

__n128 non-virtual thunk to'OZSingleChannelBehavior::getNeededRange(OZSingleChannelBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

void OZSingleChannelBehavior::conformToChannel(OZSingleChannelBehavior *this, OZChannel *a2, int a3, __n128 a4)
{
  BOOL var16 = a2->var16;
  double v8 = *((double *)var16 + 5);
  a4.n128_u64[0] = *((void *)this + 78);
  if (v8 != a4.n128_f64[0])
  {
    if (a3)
    {
      *((double *)this + 78) = v8;
      a4.n128_f64[0] = v8;
    }
    (*(void (**)(OZSingleChannelBehavior *, __n128))(*(void *)this + 752))(this, a4);
    BOOL var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    if (a3) {
      OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    }
    (*(void (**)(OZSingleChannelBehavior *, char *, OZChannel *))(*(void *)this + 760))(this, (char *)this + 544, a2);
  }
  if (a3)
  {
    double v9 = *((double *)a2->var16 + 2);
    (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
    double v11 = 3.40282347e38;
    if (v9 != -3.40282347e38 && v10.n128_f64[0] != 3.40282347e38) {
      double v11 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v10, 3.40282347e38)
    }
          - *((double *)a2->var16 + 2);
    *((double *)this + 79) = v11;
  }
}

void OZSingleChannelBehavior::createCurveNode(OZSingleChannelBehavior *this, OZChannel *a2, __n128 a3)
{
}

void sub_1B7CE100C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::addToSceneNode(OZSingleChannelBehavior *this, OZSceneNode *a2)
{
  return (*(uint64_t (**)(OZSceneNode *, OZSingleChannelBehavior *, void))(*(void *)a2 + 360))(a2, this, 0);
}

uint64_t OZSingleChannelBehavior::writeBody(OZSingleChannelBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  if (*((void *)this + 49) && *(void *)(*((void *)this + 47) + 32))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBehaviorScope);
    if (*((void *)this + 49)) {
      __n128 v10 = *(OZChannelBase **)(*((void *)this + 47) + 32);
    }
    else {
      __n128 v10 = 0;
    }
    PCSharedCount::PCSharedCount(&v19);
    long long v18 = 0uLL;
    if (v10)
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v10);
      CMTime v12 = ObjectManipulatorForChannel;
      if (ObjectManipulatorForChannel)
      {
        long long v18 = *(_OWORD *)(*(void *)((*(uint64_t (**)(void *))(*ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                    + 8)
                        + 8);
        CMTime v13 = (const OZChannelBase *)(*(uint64_t (**)(void *))(*v12 + 216))(v12);
        OZChannelRef::OZChannelRef((OZChannelRef *)v16, v10, v13);
        if (v17 >= 0) {
          CMTime v14 = (const char *)v16;
        }
        else {
          CMTime v14 = (const char *)v16[0];
        }
        PCString::set((PCString *)&v19, v14);
        OZChannelRef::~OZChannelRef(v16);
      }
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 71);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, long long *))(*(void *)a2 + 192))(a2, 1, &v18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCSharedCount *))(*(void *)a2 + 200))(a2, 2, &v19);
    if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0) {
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 3, *((double *)this + 79));
    }
    if (*((_DWORD *)this + 212)) {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 144))(a2, 4);
    }
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCSerializerWriteStream::popScope((uint64_t)a2);
    PCString::~PCString((PCString *)&v19);
  }
  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

void sub_1B7CE1320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCString a16)
{
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::writeBody(OZSingleChannelBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZSingleChannelBehavior::writeBody((OZSingleChannelBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZSingleChannelBehavior::parseBegin(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBehaviorScope);
  *((unsigned char *)this + 85OZChannelEnum::~OZChannelEnum(this - 2) = 1;
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 107) = (double)v4;
  return 1;
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::parseBegin(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin((OZSingleChannelBehavior *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBehaviorScope);
  *((unsigned char *)this + 804) = 1;
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 101) = (double)v4;
  return 1;
}

uint64_t OZSingleChannelBehavior::parseEnd(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::parseEnd(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZSingleChannelBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 71)
  {
    AttributeAsUUID = (_OWORD *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 1);
    uint64_t v7 = this + 100;
    if (AttributeAsUUID)
    {
      *uint64_t v7 = *AttributeAsUUID;
      MEMORY[0x1BA9BFBA0]();
    }
    else
    {
      *(void *)uint64_t v7 = 0;
      this[101] = 0;
    }
    PCSharedCount::PCSharedCount(&v10);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v10);
    double v8 = (void **)this[104];
    if (v8)
    {
      OZChannelRef::~OZChannelRef(v8);
      MEMORY[0x1BA9BFBA0]();
    }
    this[104] = 0;
    operator new();
  }
  return 1;
}

void sub_1B7CE1558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x1012C40EC159624);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZSingleChannelBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZMotionToForcesBehavior::OZMotionToForcesBehavior(OZMotionToForcesBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  uint64_t v5 = 0;
  *(void *)uint64_t v6 = &unk_1F115FE00;
  *(void *)(v6 + 16) = &unk_1F11600F8;
  *(void *)(v6 + 48) = &unk_1F1160350;
  *(void *)(v6 + 336) = &unk_1F11603A8;
  *(void *)(v6 + 344) = 0;
  *(unsigned char *)(v6 + 448) = 1;
  *(void *)(v6 + 456) = 0;
  *(void *)(v6 + 464) = 0;
  *(void *)(v6 + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(void *)(v6 + 480) = 0x3FF0000000000000;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 504) = 0;
  *(void *)(v6 + 488) = 0;
  *(unsigned char *)(v6 + 55OZChannelEnum::~OZChannelEnum(this - 2) = 1;
  *(void *)(v6 + 680) = 0x3FF0000000000000;
  *(void *)(v6 + 640) = 0x3FF0000000000000;
  *(void *)(v6 + 600) = 0x3FF0000000000000;
  *(void *)(v6 + 560) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  do
  {
    uint64_t v7 = (char *)this + v5;
    *((void *)v7 + 91) = 0;
    *(_OWORD *)((char *)this + v5 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0uLL;
    *((void *)v7 + 9OZChannelEnum::~OZChannelEnum(this - 2) = 0x3FF0000000000000;
    *((void *)v7 + 93) = 0;
    *((_OWORD *)v7 + 47) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  PCMutex::PCMutex((PCMutex *)this + 17);
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 2OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 23) = 0u;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (uint64_t i = 768; i != 1296; i += 88)
    *((unsigned char *)this + i) = 0;
  *((_DWORD *)this + 304) = 0;
}

void sub_1B7CE1714(_Unwind_Exception *a1)
{
  PCMutex::~PCMutex(v2);
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior::OZMotionToForcesBehavior(OZMotionToForcesBehavior *this, OZMotionToForcesBehavior *a2, char a3)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  uint64_t v5 = 0;
  *(void *)uint64_t v6 = &unk_1F115FE00;
  *(void *)(v6 + 16) = &unk_1F11600F8;
  *(void *)(v6 + 48) = &unk_1F1160350;
  *(void *)(v6 + 336) = &unk_1F11603A8;
  *(void *)(v6 + 344) = 0;
  uint64_t v7 = v6 + 344;
  *(void *)(v6 + 456) = 0;
  *(void *)(v6 + 464) = 0;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(void *)(v6 + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(void *)(v6 + 480) = 0x3FF0000000000000;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 504) = 0;
  *(void *)(v6 + 488) = 0;
  *(void *)(v6 + 680) = 0x3FF0000000000000;
  *(void *)(v6 + 640) = 0x3FF0000000000000;
  *(void *)(v6 + 600) = 0x3FF0000000000000;
  *(void *)(v6 + 560) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  do
  {
    double v8 = (char *)this + v5;
    *((void *)v8 + 91) = 0;
    *(_OWORD *)((char *)this + v5 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0uLL;
    *((void *)v8 + 9OZChannelEnum::~OZChannelEnum(this - 2) = 0x3FF0000000000000;
    *((void *)v8 + 93) = 0;
    *((_OWORD *)v8 + 47) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  PCMutex::PCMutex((PCMutex *)this + 17);
  if ((a3 & 0x20) != 0)
  {
    unsigned int v9 = OZSimulationBehavior::_MTF_IDGenerator--;
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), v9);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  *(void *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  uint64_t v10 = 768;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  do
  {
    *((unsigned char *)this + v10) = 0;
    v10 += 88;
  }
  while (v10 != 1296);
  *((_DWORD *)this + 304) = 0;
}

void sub_1B7CE18C4(_Unwind_Exception *a1)
{
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior::~OZMotionToForcesBehavior(PCMutex *this)
{
  this->_vptr$PCMutex = (void **)&unk_1F115FE00;
  *(void *)this->_Mutex.__opaque = &unk_1F11600F8;
  *(void *)&this->_Mutex.__opaque[32] = &unk_1F1160350;
  *(void *)&this[4]._Mutex.__opaque[32] = &unk_1F11603A8;
  uint64_t v2 = *(void *)&this[4]._Mutex.__opaque[40];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PCMutex::~PCMutex(this + 17);

  OZSimulationBehavior::~OZSimulationBehavior((OZSimulationBehavior *)this);
}

{
  uint64_t vars8;

  OZMotionToForcesBehavior::~OZMotionToForcesBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZMotionToForcesBehavior::~OZMotionToForcesBehavior(OZMotionToForcesBehavior *this)
{
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 48));
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZMotionToForcesBehavior::operator=(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 344) + 16))(*(void *)(a1 + 344), 16);
}

void *OZMotionToForcesBehavior::didAddToNode(OZMotionToForcesBehavior *this, OZSceneNode *a2)
{
  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  unint64_t v4 = (void *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  OZChannelObjectRoot::addBehavior(v4, (uint64_t)this);
  if (result)
  {
    if (!*((void *)this + 43)) {
      operator new();
    }
    operator new();
  }
  return result;
}

void sub_1B7CE1EF8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40FB7B41F7);
  _Unwind_Resume(a1);
}

OZScene *OZMotionToForcesBehavior::willRemove(void **this)
{
  Transformunint64_t Node = (char *)OZSimulationBehavior::getTransformNode((OZSimulationBehavior *)this);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1352), this[44]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1504), this[45]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1952), this[46]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2240), this[47]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2392), this[48]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2544), this[49]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3096), this[50]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3248), this[51]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3696), this[52]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3984), this[53]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 4136), this[54]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 4288), this[55]);
  uint64_t v3 = (void *)(*(uint64_t (**)(char *))(*(void *)TransformNode + 640))(TransformNode);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  __n128 result = (OZScene *)(*((uint64_t (**)(void **))*this + 42))(this);
  if (result) {
    __n128 result = (OZScene *)OZObjectSimulator::willRemoveFromScene(this[43], result);
  }
  this[41] = 0;
  return result;
}

uint64_t OZMotionToForcesBehavior::sceneNodeDidLoad(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 43) + 16))(*((void *)this + 43), 16);
}

void *OZMotionToForcesBehavior::didAddSceneNodeToScene(OZMotionToForcesBehavior *this, OZScene *a2)
{
  return OZObjectSimulator::didAddToScene(*((void **)this + 43), a2);
}

void *OZMotionToForcesBehavior::willRemoveSceneNodeFromScene(OZMotionToForcesBehavior *this, OZScene *a2)
{
  return OZObjectSimulator::willRemoveFromScene(*((void **)this + 43), a2);
}

uint64_t OZMotionToForcesBehavior::didFinishLoadingIntoMotionEffect(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 43) + 16))(*((void *)this + 43), 16);
}

uint64_t non-virtual thunk to'OZMotionToForcesBehavior::didFinishLoadingIntoMotionEffect(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 41) + 16))(*((void *)this + 41), 16);
}

OZObjectSimulator *OZMotionToForcesBehavior::dirty(OZObjectSimulator **this)
{
  OZBehavior::dirty((OZBehavior *)this);
  __n128 result = this[43];
  if (result)
  {
    return (OZObjectSimulator *)OZObjectSimulator::dirty(result);
  }
  return result;
}

OZObjectSimulator *non-virtual thunk to'OZMotionToForcesBehavior::dirty(OZObjectSimulator **this)
{
  return OZMotionToForcesBehavior::dirty(this - 2);
}

double OZMotionToForcesBehavior::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  uint64_t v7 = v6;
  OZBehavior::calcStaticHash(a1, lpsrc, a3);
  __n128 v10 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  (*(void (**)(int8x8_t *))(*(void *)v7 + 40))(v7);
  OZObjectSimulator::calcStaticHash(*(void *)(a1 + 344), lpsrc, a3);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v10, (int *)Hash);
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v7, &v10).n128_u64[0];
  return result;
}

double non-virtual thunk to'OZMotionToForcesBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZMotionToForcesBehavior::calcStaticHash(a1 - 16, a2, a3);
}

uint64_t OZMotionToForcesBehavior::calcHashForState(uint64_t result, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(result + 344);
  if (*(unsigned char *)(v3 + 208))
  {
    if (!*(unsigned char *)(v3 + 372))
    {
      long long v4 = *a3;
      uint64_t v5 = *((void *)a3 + 2);
      return (*(uint64_t (**)(uint64_t, long long *))(*(void *)a2 + 112))(a2, &v4);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZMotionToForcesBehavior::calcHashForState(uint64_t result, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(result + 328);
  if (*(unsigned char *)(v3 + 208))
  {
    if (!*(unsigned char *)(v3 + 372))
    {
      long long v4 = *a3;
      uint64_t v5 = *((void *)a3 + 2);
      return (*(uint64_t (**)(uint64_t, long long *))(*(void *)a2 + 112))(a2, &v4);
    }
  }
  return result;
}

BOOL OZMotionToForcesBehavior::canAddToSceneNode(OZMotionToForcesBehavior *this, OZSceneNode *a2)
{
  BOOL result = 1;
  if ((OZSimulationBehavior::canAddToSceneNode(this, a2) & 1) == 0)
  {
    unint64_t v3 = *((void *)a2 + 1);
    long long v5 = xmmword_1B7E78C30;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v5)
      || (OZSceneNode::isDescendantOf360Group((uint64_t)a2) & 1) == 0)
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZMotionToForcesBehavior::willBake(OZMotionToForcesBehavior *this)
{
  return OZObjectSimulator::willBake(*((void *)this + 43));
}

uint64_t OZMotionToForcesBehavior::didBake(OZMotionToForcesBehavior *this)
{
  return OZObjectSimulator::didBake(*((void *)this + 43));
}

uint64_t OZMotionToForcesBehavior::accumForces(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  memset(&v127, 0, sizeof(v127));
  Transformunint64_t Node = (char *)OZSimulationBehavior::getTransformNode(this);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(TransformNode + 56), &v147);
  uint64_t v6 = (_OWORD *)((char *)a2 + 176);
  *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *((_OWORD *)a2 + 11);
  time1.var0.int64_t var3 = *((void *)a2 + 24);
  *(__n128 *)&time2.int64_t value = v147;
  time2.CMTimeEpoch epoch = v148;
  double v7 = PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v127);
  memset(&v126, 0, sizeof(v126));
  uint64_t v8 = (*(uint64_t (**)(OZTransformNode *, double))(*(void *)a3 + 272))(a3, v7);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v126);
  memset(&v125, 0, sizeof(v125));
  operator*(&v126, &v125, 0.5001);
  *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *((_OWORD *)a2 + 11);
  time1.var0.int64_t var3 = *((void *)a2 + 24);
  CMTime time2 = *(CMTime *)((unsigned char *)this + 22);
  unsigned int v9 = (_OWORD *)((char *)this + 528);
  if (CMTimeCompare((CMTime *)&time1, &time2) < 1) {
    goto LABEL_56;
  }
  *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *v6;
  time1.var0.int64_t var3 = *((void *)a2 + 24);
  *(_OWORD *)&time2.int64_t value = *v9;
  time2.CMTimeEpoch epoch = *((void *)this + 68);
  PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v147);
  *(__n128 *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v147;
  time1.var0.int64_t var3 = v148;
  CMTime time2 = v125;
  uint64_t result = CMTimeCompare((CMTime *)&time1, &time2);
  if ((result & 0x80000000) == 0)
  {
LABEL_56:
    *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *v6;
    time1.var0.int64_t var3 = *((void *)a2 + 24);
    *(_OWORD *)&time2.int64_t value = *v9;
    time2.CMTimeEpoch epoch = *((void *)this + 68);
    uint64_t result = CMTimeCompare((CMTime *)&time1, &time2);
    if ((int)result > 0) {
      goto LABEL_57;
    }
    *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *v9;
    time1.var0.int64_t var3 = *((void *)this + 68);
    *(_OWORD *)&time2.int64_t value = *v6;
    time2.CMTimeEpoch epoch = *((void *)a2 + 24);
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)v144);
    *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v144[0];
    time1.var0.int64_t var3 = *(void *)&v144[1];
    CMTime time2 = v125;
    uint64_t result = CMTimeCompare((CMTime *)&time1, &time2);
    if ((result & 0x80000000) == 0)
    {
LABEL_57:
      if (*((unsigned char *)this + 448) || *((unsigned char *)this + 552))
      {
        uint64_t v11 = 0;
        double v151 = 0.0;
        long long v149 = 0u;
        long long v150 = 0u;
        __n128 v147 = 0u;
        long long v148 = 0u;
        uint64_t v146 = 0;
        long long v145 = 0u;
        memset(v144, 0, sizeof(v144));
        do
        {
          CMTime v12 = (CMTimeValue *)((char *)&time2.value + v11);
          *CMTime v12 = 0x3FF0000000000000;
          v12[1] = 0;
          void v12[2] = 0;
          PCString v12[3] = 0;
          v11 += 32;
        }
        while (v11 != 96);
        char v124 = 0;
        __int16 v123 = 0;
        long long v121 = 0uLL;
        int64_t v122 = 0;
        CMTime v120 = v127;
        CMTime v119 = v126;
        PC_CMTimeFloorToSampleDuration(&v120, &v119, (uint64_t)&v121);
        memset(&v118, 0, sizeof(v118));
        *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v121;
        time1.var0.int64_t var3 = v122;
        CMTime v130 = v126;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &v130, (uint64_t)&v118);
        unsigned int v117 = 3;
        uint64_t v109 = OZSimulationBehavior::getTransformNode(this);
        if (*((unsigned char *)this + 448))
        {
          var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (int64_t)(v109 + 169);
          *(void *)&var0.unint64_t var1 = v109 + 188;
          var0.int64_t var3 = (int64_t)(v109 + 244);
          v132[0] = v109 + 280;
          v132[1] = v109 + 299;
          v132[2] = v109 + 318;
          CMTime v116 = v118;
          CMTime v115 = v126;
          p_OZRenderState time1 = (CMTime *)&time1;
          if (OZMotionToForcesBehavior::findCachedValues((PCMutex *)this, (uint64_t)&v147, (uint64_t)&time2, (uint64_t)&v123, v117, &v116, &v115))
          {
            CMTime v113 = v118;
            if (v117)
            {
              unint64_t v13 = 0;
              CMTime v14 = &v147;
              uint64_t v15 = v144;
              do
              {
                if (!*((unsigned char *)&v123 + v13))
                {
                  uint64_t v16 = 0;
                  CMTimeValue v17 = (CMTimeValue)v14;
                  do
                  {
                    v130.int64_t value = v17;
                    LODWORD(v129.value) = 1;
                    OZChannel::getSamples(*(OZChannel **)((char *)&var0.var0 + v16), 0, &v113, &v126, (unsigned int *)&v129, &p_time1, (double **)&v130);
                    v16 += 8;
                    v17 += 24;
                  }
                  while (v16 != 24);
                  uint64_t v18 = 0;
                  CMTimeValue v19 = (CMTimeValue)v15;
                  do
                  {
                    v130.int64_t value = v19;
                    LODWORD(v129.value) = 1;
                    OZChannel::getSamples((OZChannel *)v132[v18++], 0, &v113, &v126, (unsigned int *)&v129, &p_time1, (double **)&v130);
                    v19 += 24;
                  }
                  while (v18 != 3);
                  uint64_t v20 = (double *)v144 + v13;
                  double v21 = v20[3];
                  double v111 = v20[6];
                  __double2 v22 = __sincos_stret(*v20 * 0.5);
                  double v23 = v22.__sinval * 0.0;
                  __double2 v24 = __sincos_stret(v21 * 0.5);
                  double v25 = v24.__sinval * 0.0;
                  __double2 v26 = __sincos_stret(v111 * 0.5);
                  double v27 = v22.__cosval * v24.__cosval - (v23 * v25 + v23 * v24.__sinval + v22.__sinval * v25);
                  double v28 = v22.__sinval * v24.__cosval + v22.__cosval * v25 + v23 * v24.__sinval - v23 * v25;
                  double v29 = v23 * v24.__cosval + v22.__cosval * v24.__sinval + v22.__sinval * v25 - v23 * v25;
                  double v30 = v23 * v25 - v22.__sinval * v24.__sinval + v23 * v24.__cosval + v22.__cosval * v25;
                  double v31 = v26.__sinval * 0.0 * v28;
                  double v32 = v26.__sinval * 0.0 * v29;
                  double v33 = v26.__sinval * 0.0 * v27;
                  double v34 = v26.__sinval * 0.0 * v30;
                  int32x4_t v35 = (double *)(&time2.value + 4 * v13);
                  *int32x4_t v35 = v26.__cosval * v27 - (v26.__sinval * v30 + v31 + v32);
                  v35[1] = v26.__sinval * v29 - v34 + v26.__cosval * v28 + v33;
                  _OWORD v35[2] = v34 - v26.__sinval * v28 + v26.__cosval * v29 + v33;
                  v35[3] = v31 - v32 + v26.__cosval * v30 + v26.__sinval * v27;
                }
                CMTime v129 = v113;
                CMTime v128 = v126;
                PC_CMTimeSaferAdd(&v129, &v128, (uint64_t)&v130);
                ++v13;
                CMTime v113 = v130;
                CMTime v14 = (__n128 *)((char *)v14 + 8);
                uint64_t v15 = (_OWORD *)((char *)v15 + 8);
              }
              while (v13 < v117);
            }
          }
          else
          {
            uint64_t v43 = 0;
            double v44 = &v147;
            do
            {
              v130.int64_t value = (CMTimeValue)v44;
              OZChannel::getSamples(*(OZChannel **)((char *)&var0.var0 + v43), 0, &v118, &v126, &v117, &p_time1, (double **)&v130);
              double v44 = (__n128 *)((char *)v44 + 24);
              v43 += 8;
            }
            while (v43 != 24);
            uint64_t v45 = 0;
            double v46 = v144;
            do
            {
              v130.int64_t value = (CMTimeValue)v46;
              OZChannel::getSamples((OZChannel *)v132[v45], 0, &v118, &v126, &v117, &p_time1, (double **)&v130);
              double v46 = (_OWORD *)((char *)v46 + 24);
              ++v45;
            }
            while (v45 != 3);
            uint64_t v47 = 0;
            p_CMTimeEpoch epoch = (double *)&time2.epoch;
            do
            {
              double v49 = *(double *)((char *)&v144[1] + v47 + 8);
              double v112 = *(double *)((char *)&v145 + v47);
              __double2 v50 = __sincos_stret(*(double *)((char *)v144 + v47) * 0.5);
              double v51 = v50.__sinval * 0.0;
              __double2 v52 = __sincos_stret(v49 * 0.5);
              double v53 = v52.__sinval * 0.0;
              __double2 v54 = __sincos_stret(v112 * 0.5);
              double v55 = v50.__cosval * v52.__cosval - (v51 * v53 + v51 * v52.__sinval + v50.__sinval * v53);
              double v56 = v50.__sinval * v52.__cosval + v50.__cosval * v53 + v51 * v52.__sinval - v51 * v53;
              double v57 = v51 * v52.__cosval + v50.__cosval * v52.__sinval + v50.__sinval * v53 - v51 * v53;
              double v58 = v51 * v53 - v50.__sinval * v52.__sinval + v51 * v52.__cosval + v50.__cosval * v53;
              double v59 = v54.__sinval * 0.0 * v56;
              double v60 = v54.__sinval * 0.0 * v57;
              double v61 = v54.__sinval * 0.0 * v55;
              double v62 = v54.__sinval * 0.0 * v58;
              *(p_epoch - OZChannelEnum::~OZChannelEnum(this - 2) = v54.__cosval * v55 - (v54.__sinval * v58 + v59 + v60);
              *(p_epoch - 1) = v54.__sinval * v57 - v62 + v54.__cosval * v56 + v61;
              *p_CMTimeEpoch epoch = v62 - v54.__sinval * v56 + v54.__cosval * v57 + v61;
              p_epoch[1] = v59 - v60 + v54.__cosval * v58 + v54.__sinval * v55;
              p_epoch += 4;
              v47 += 8;
            }
            while (v47 != 24);
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = *((void *)this + 57);
          uint64_t v38 = *((void *)this + 58);
          uint64_t v39 = *((void *)this + 59);
          float32x2_t v40 = (CMTime *)((char *)this + 480);
          float v41 = (void *)&v148 + 1;
          do
          {
            *(v41 - 3) = v37;
            *float v41 = v38;
            v41[3] = v39;
            float v42 = (char *)&time2 + v36;
            if ((CMTime *)((char *)&time2 + v36) != v40)
            {
              *(void *)float v42 = v40->value;
              *(_OWORD *)(v42 + 8) = *(_OWORD *)((char *)this + 488);
              *((void *)v42 + 3) = *((void *)this + 63);
            }
            v36 += 32;
            ++v41;
          }
          while (v36 != 96);
        }
        uint64_t v63 = (const void *)v109[120];
        if (v63)
        {
          if (v64)
          {
            uint64_t v65 = v64;
            memset(&var0, 0, sizeof(var0));
            int v66 = (char *)OZSimulationBehavior::getTransformNode(this);
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v66 + 56), (__n128 *)&v129);
            time1.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v118;
            CMTime v130 = v129;
            PC_CMTimeSaferAdd((CMTime *)&time1, &v130, (uint64_t)&var0);
            if (*((unsigned char *)this + 552))
            {
              OZRenderState::OZRenderState(&time1);
              if (v117)
              {
                unint64_t v67 = 0;
                double v68 = &v147;
                do
                {
                  if (!*((unsigned char *)&v123 + v67))
                  {
                    time1.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = var0;
                    time1.var8 = 0;
                    (*(void (**)(void *, __n128 *, uint64_t *, __n128 *, OZRenderState *))(*(void *)v65 + 1224))(v65, v68, &v68[1].n128_i64[1], v68 + 3, &time1);
                  }
                  CMTime v129 = (CMTime)var0;
                  CMTime v128 = v126;
                  PC_CMTimeSaferAdd(&v129, &v128, (uint64_t)&v130);
                  ++v67;
                  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v130;
                  double v68 = (__n128 *)((char *)v68 + 8);
                }
                while (v67 < v117);
              }
            }
            else if (v117)
            {
              for (unint64_t i = 0; i < v117; ++i)
              {
                if (!*((unsigned char *)&v123 + i))
                {
                  double v70 = &v147.n128_i64[i];
                  int64_t v71 = v70[3];
                  int64_t v72 = v70[6];
                  time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *v70;
                  *(void *)&time1.var0.unint64_t var1 = v71;
                  time1.var0.int64_t var3 = v72;
                  PCMatrix44Tmpl<double>::transform<double>((double *)this + 70, (double *)&time1.var0.var0, (double *)&time1.var0.var0);
                  *double v70 = time1.var0.var0;
                  v70[3] = *(void *)&time1.var0.var1;
                  v70[6] = time1.var0.var3;
                }
                CMTime v130 = (CMTime)var0;
                CMTime v129 = v126;
                PC_CMTimeSaferAdd(&v130, &v129, (uint64_t)&time1);
                $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = time1.var0;
              }
            }
          }
        }
        PCMutex::lock((PCMutex *)this + 17);
        CMTime v129 = v118;
        if (v117)
        {
          unint64_t v73 = 0;
          HGRect v74 = (uint64_t *)&v148 + 1;
          p_CMTime time2 = &time2;
          do
          {
            if (!*((unsigned char *)&v123 + v73))
            {
              int v76 = *((_DWORD *)this + 304);
              *((_DWORD *)this + 304) = (v76 + 1) % 6;
              int v77 = (char *)this + 88 * v76;
              *(CMTime *)(v77 + 688) = v129;
              uint64_t v78 = *v74;
              uint64_t v79 = v74[3];
              *((void *)v77 + 89) = *(v74 - 3);
              *((void *)v77 + 90) = v78;
              *((void *)v77 + 91) = v79;
              PCString v80 = (CMTime *)(v77 + 736);
              if (p_time2 != v80)
              {
                v80->int64_t value = p_time2->value;
                CMTime v81 = (char *)this + 88 * v76;
                *((void *)v81 + 95) = p_time2[1].value;
                *(_OWORD *)(v81 + 744) = *(_OWORD *)&p_time2->timescale;
              }
              *((unsigned char *)this + 88 * v76 + 768) = 1;
            }
            time1.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v129;
            CMTime v130 = v126;
            PC_CMTimeSaferAdd((CMTime *)&time1, &v130, (uint64_t)&v129);
            ++v73;
            p_CMTime time2 = (CMTime *)((char *)p_time2 + 32);
            ++v74;
          }
          while (v73 < v117);
        }
        uint64_t result = PCMutex::unlock((PCMutex *)this + 17);
        double v82 = *((double *)this + 64);
        double v83 = v82 * (v82 * (v151 - *((double *)&v150 + 1)) - v82 * (*((double *)&v150 + 1) - *(double *)&v150));
        double v84 = v82
            * (v82 * (*((double *)&v149 + 1) - *(double *)&v149) - v82 * (*(double *)&v149 - *((double *)&v148 + 1)))
            + *((double *)a2 + 17);
        *((double *)a2 + 16) = *((double *)a2 + 16)
                             + v82
                             * (v82 * (*(double *)&v148 - v147.n128_f64[1]) - v82
                                                                            * (v147.n128_f64[1] - v147.n128_f64[0]));
        *((double *)a2 + 17) = v84;
        double v85 = (v82 + v82) * (v136 - *(double *)&time2.value);
        double v86 = (v82 + v82) * (v137 - *(double *)&time2.timescale);
        double v87 = (v82 + v82) * (v138 - *(double *)&time2.epoch);
        double v88 = (v82 + v82) * (v139 - v135);
        double v89 = *(double *)&time2.value * v87 - v85 * *(double *)&time2.epoch;
        double v90 = *(double *)&time2.value * v88 - v85 * v135;
        double v91 = *(double *)&time2.timescale * v87 - *(double *)&time2.epoch * v86;
        double v92 = *(double *)&time2.value * v86
            - *(double *)&time2.timescale * v85
            + *(double *)&time2.epoch * v88
            - v135 * v87;
        double v93 = v89 + v86 * v135 - *(double *)&time2.timescale * v88;
        double v94 = v91 + v90;
        double v95 = (v82 + v82) * (v140 - v136);
        double v96 = (v82 + v82) * (v141 - v137);
        double v97 = (v82 + v82) * (v142 - v138);
        double v98 = (v82 + v82) * (v143 - v139);
        double v99 = v136 * v97 - v138 * v95;
        double v100 = v136 * v98 - v139 * v95;
        double v101 = v136 * v96 - v137 * v95 + v138 * v98 - v139 * v97;
        double v102 = v99 + v139 * v96 - v137 * v98;
        double v103 = v137 * v97 - v138 * v96 + v100;
        double v104 = v103 * 0.0 + v101 + v102 * 0.0;
        double v105 = v101 * 0.0;
        double v106 = *((double *)a2 + 19) + v82 * (v104 - (v94 * 0.0 + v92 + v93 * 0.0));
        *((double *)a2 + 18) = v83 + *((double *)a2 + 18);
        *((double *)a2 + 19) = v106;
        double v107 = *((double *)a2 + 20) + v82 * (v103 * 0.0 + v102 + v105 - (v94 * 0.0 + v93 + v92 * 0.0));
        double v108 = *((double *)a2 + 21) + v82 * (v103 + v105 + v102 * 0.0 - (v94 + v92 * 0.0 + v93 * 0.0));
        *((double *)a2 + 20) = v107;
        *((double *)a2 + 21) = v108;
      }
    }
  }
  return result;
}

uint64_t OZMotionToForcesBehavior::findCachedValues(PCMutex *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7)
{
  double v25 = a1 + 17;
  PCMutex::lock(a1 + 17);
  char v14 = 0;
  uint64_t v15 = -528;
  do
  {
    uint64_t v16 = (char *)a1 + v15;
    if (*((unsigned char *)&a1[18]._vptr$PCMutex + v15))
    {
      CMTimeValue v17 = (CMTime *)(v16 + 1216);
      CMTime time1 = *a6;
      CMTime time2 = *(CMTime *)(v16 + 1216);
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        memset(&v28, 0, sizeof(v28));
        CMTime time1 = *v17;
        CMTime time2 = *a6;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        CMTime v27 = v28;
        CMTime v26 = *a7;
        uint64_t SampleNumber = PC_CMTimeGetSampleNumber(&v27, &v26);
        if (SampleNumber < a5)
        {
          CMTimeValue v19 = (char *)a1 + v15;
          uint64_t v20 = (void *)(a2 + 8 * SampleNumber);
          void *v20 = *(void *)&a1[17]._Mutex.__opaque[v15];
          void v20[3] = *(void *)&a1[17]._Mutex.__opaque[v15 + 8];
          v20[6] = *(void *)&a1[17]._Mutex.__opaque[v15 + 16];
          double v21 = &a1[17]._Mutex.__opaque[v15 + 24];
          uint64_t v22 = a3 + 32 * SampleNumber;
          if (v21 != (char *)v22)
          {
            *(void *)uint64_t v22 = *(void *)v21;
            long long v23 = *(_OWORD *)(v19 + 1272);
            *(void *)(v22 + 24) = *((void *)v19 + 161);
            *(_OWORD *)(v22 + 8) = v23;
          }
          char v14 = 1;
          *(unsigned char *)(a4 + SampleNumber) = 1;
        }
      }
    }
    v15 += 88;
  }
  while (v15);
  PCMutex::unlock(v25);
  return v14 & 1;
}

void OZMotionToForcesBehavior::accumInitialValuesHelper(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3, int a4)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  memset(&v122, 0, sizeof(v122));
  Transformunint64_t Node = (char *)OZSimulationBehavior::getTransformNode(this);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(TransformNode + 56), &v133);
  *(_OWORD *)&v126.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *((_OWORD *)a2 + 11);
  v126.var0.int64_t var3 = *((void *)a2 + 24);
  *(__n128 *)&v108.int64_t value = v133;
  v108.CMTimeEpoch epoch = v134;
  double v9 = PC_CMTimeSaferSubtract((CMTime *)&v126, &v108, (uint64_t)&v122);
  memset(&v121, 0, sizeof(v121));
  uint64_t v10 = (*(uint64_t (**)(OZTransformNode *, double))(*(void *)a3 + 272))(a3, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v121);
  LOWORD(v108.value) = 1;
  int v113 = 0;
  uint64_t v114 = 0;
  char v115 = 0;
  long long v109 = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)&v108.CMTimeScale timescale = 0;
  CMTimeEpoch v110 = v11;
  long long v111 = v109;
  CMTimeEpoch v112 = v11;
  unsigned int v118 = 0;
  CMTime v119 = 0;
  char v120 = 0;
  *(_OWORD *)&v116.int64_t value = v109;
  *(_OWORD *)&v117.int64_t value = v109;
  v116.CMTimeEpoch epoch = v11;
  v117.CMTimeEpoch epoch = v11;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  __n128 v133 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  memset(&v107, 0, sizeof(v107));
  CMTime v106 = v122;
  CMTime v105 = v121;
  PC_CMTimeFloorToSampleDuration(&v106, &v105, (uint64_t)&v107);
  if (a4) {
    unsigned int v12 = 2;
  }
  else {
    unsigned int v12 = 1;
  }
  unsigned int v104 = v12;
  CMTime v116 = v107;
  unsigned int v118 = v12;
  CMTime v117 = v121;
  unint64_t v13 = OZSimulationBehavior::getTransformNode(this);
  uint64_t v14 = 0;
  v129[0] = v13 + 169;
  v129[1] = v13 + 188;
  v129[2] = v13 + 244;
  v128[0] = v13 + 280;
  v128[1] = v13 + 299;
  void v128[2] = v13 + 318;
  uint64_t v15 = &v133;
  double v103 = (CMTime *)&v127;
  do
  {
    v126.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (int64_t)v15;
    CMTime v119 = v15;
    OZChannel::getSamples((OZChannel *)v129[v14++], 0, &v107, &v121, &v104, &v103, (double **)&v126);
    ++v15;
  }
  while (v14 != 3);
  uint64_t v16 = 0;
  CMTimeValue v17 = (__n128 *)&v130;
  do
  {
    v126.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (int64_t)v17;
    CMTime v119 = v17;
    OZChannel::getSamples((OZChannel *)v128[v16++], 0, &v107, &v121, &v104, &v103, (double **)&v126);
    ++v17;
  }
  while (v16 != 3);
  double v18 = *(double *)&v131;
  double v101 = *(double *)&v132;
  __double2 v19 = __sincos_stret(*(double *)&v130 * 0.5);
  double v20 = v19.__sinval * 0.0;
  __double2 v21 = __sincos_stret(v18 * 0.5);
  double v22 = v21.__sinval * 0.0;
  __double2 v23 = __sincos_stret(v101 * 0.5);
  double v24 = v19.__cosval * v21.__cosval - (v20 * v22 + v20 * v21.__sinval + v19.__sinval * v22);
  double v25 = v19.__sinval * v21.__cosval + v19.__cosval * v22 + v20 * v21.__sinval - v20 * v22;
  double v26 = v20 * v21.__cosval + v19.__cosval * v21.__sinval + v19.__sinval * v22 - v20 * v22;
  double v27 = v20 * v22 - v19.__sinval * v21.__sinval + v20 * v21.__cosval + v19.__cosval * v22;
  double v28 = v23.__sinval * 0.0 * v25;
  double v29 = v23.__sinval * 0.0 * v26;
  double v30 = v23.__cosval * v24 - (v23.__sinval * v27 + v28 + v29);
  double v31 = v23.__sinval * 0.0 * v24;
  double v32 = v23.__sinval * 0.0 * v27;
  double v33 = v23.__sinval * v26 - v32 + v23.__cosval * v25 + v31;
  double v34 = v32 - v23.__sinval * v25 + v23.__cosval * v26 + v31;
  double v35 = v28 - v29 + v23.__cosval * v27 + v23.__sinval * v24;
  double v36 = *((double *)&v131 + 1);
  double v37 = *((double *)&v132 + 1);
  __double2 v38 = __sincos_stret(*((double *)&v130 + 1) * 0.5);
  __double2 v39 = __sincos_stret(v36 * 0.5);
  __double2 v40 = __sincos_stret(v37 * 0.5);
  if (!*((unsigned char *)this + 448))
  {
    uint64_t v41 = v134;
    uint64_t v42 = v135;
    *((void *)this + 57) = v133.n128_u64[0];
    *((void *)this + 58) = v41;
    *((void *)this + 59) = v42;
    *((double *)this + 60) = v30;
    *((double *)this + 61) = v33;
    *((double *)this + 6OZChannelEnum::~OZChannelEnum(this - 2) = v34;
    *((double *)this + 63) = v35;
  }
  uint64_t v43 = (const void *)v13[120];
  if (v43)
  {
    if (v44)
    {
      uint64_t v45 = v44;
      OZRenderState::OZRenderState(&v126);
      memset(&v102, 0, sizeof(v102));
      double v46 = (char *)OZSimulationBehavior::getTransformNode(this);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)(v46 + 56), (__n128 *)&v123);
      CMTime v125 = v107;
      CMTime v124 = v123;
      PC_CMTimeSaferAdd(&v125, &v124, (uint64_t)&v102);
      if (v104)
      {
        unint64_t v47 = 0;
        uint64_t v48 = &v133;
        do
        {
          v126.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v102;
          v126.var8 = 0;
          (*(void (**)(void *, __n128 *, __n128 *, __n128 *, OZRenderState *))(*(void *)v45 + 1224))(v45, v48, v48 + 1, v48 + 2, &v126);
          CMTime v124 = (CMTime)v102;
          CMTime v123 = v121;
          PC_CMTimeSaferAdd(&v124, &v123, (uint64_t)&v125);
          $3CC8671D27C23BF42ADDB32F2B5E48AE v102 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v125;
          ++v47;
          uint64_t v48 = (__n128 *)((char *)v48 + 8);
        }
        while (v47 < v104);
      }
    }
  }
  uint64_t v49 = (*(uint64_t (**)(OZMotionToForcesBehavior *))(*(void *)this + 336))(this);
  if (v49)
  {
    double v50 = *(double *)(v49 + 368);
    if (a4) {
      goto LABEL_17;
    }
LABEL_21:
    float64x2_t v53 = 0uLL;
    double v54 = 0.0;
    goto LABEL_22;
  }
  double v50 = 30.0;
  if (!a4) {
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v51 = 0;
  __double2 v52 = &v133.n128_f64[1];
  do
  {
    *(double *)((char *)&v126.var0.var0 + v51) = v50 * (*v52 - *(v52 - 1));
    v51 += 8;
    v52 += 2;
  }
  while (v51 != 24);
  float64x2_t v53 = *(float64x2_t *)&v126.var0.var0;
  double v54 = *(double *)&v126.var0.var3;
LABEL_22:
  uint64_t v55 = v134;
  uint64_t v56 = v135;
  *(void *)a2 = v133.n128_u64[0];
  *((void *)a2 + 1) = v55;
  double v57 = *((double *)a2 + 9) + v54;
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), v53);
  *((double *)a2 + 9) = v57;
  *((void *)a2 + OZChannelEnum::~OZChannelEnum(this - 2) = v56;
  *((double *)a2 + 3) = v30;
  *((double *)a2 + 4) = v33;
  *((double *)a2 + 5) = v34;
  *((double *)a2 + 6) = v35;
  if (a4)
  {
    double v58 = v38.__sinval * (v39.__sinval * 0.0);
    double v59 = v38.__sinval * 0.0 * v39.__sinval;
    double v60 = v38.__sinval * 0.0 * (v39.__sinval * 0.0);
    double v61 = v38.__sinval * 0.0 * v39.__cosval;
    double v62 = v38.__cosval * (v39.__sinval * 0.0);
    double v63 = v59 + v58;
    double v64 = v38.__sinval * v39.__cosval + v62;
    double v65 = v61 + v38.__cosval * v39.__sinval;
    double v66 = v61 + v62;
    double v67 = v60 - v38.__sinval * v39.__sinval;
    double v68 = v64 + v59 - v60;
    double v69 = v65 + v58 - v60;
    double v70 = v38.__cosval * v39.__cosval - (v60 + v63);
    double v71 = v67 + v66;
    double v72 = v40.__sinval * 0.0 * v68;
    double v73 = v40.__sinval * 0.0 * v69;
    double v74 = v40.__sinval * v71;
    double v75 = v40.__sinval * 0.0 * v70;
    double v76 = v40.__cosval * v71;
    double v77 = v40.__sinval * 0.0 * v71;
    double v78 = v74 + v72 + v73;
    double v79 = v40.__cosval * v68 + v75;
    double v80 = v40.__cosval * v69 + v75;
    double v81 = v40.__sinval * v69 - v77;
    double v82 = v77 - v40.__sinval * v68;
    double v83 = v50 + v50;
    double v84 = v83 * (v40.__cosval * v70 - v78 - v30);
    double v85 = v83 * (v81 + v79 - v33);
    double v86 = v83 * (v82 + v80 - v34);
    double v87 = v83 * (v72 - v73 + v76 + v40.__sinval * v70 - v35);
    double v88 = v30 * v85 - v33 * v84;
    double v89 = v30 * v86 - v34 * v84;
    double v90 = v30 * v87 - v84 * v35;
    double v91 = v88 + v34 * v87 - v35 * v86;
    double v92 = v89 + v35 * v85 - v33 * v87;
    double v93 = v33 * v86 - v34 * v85 + v90;
    double v94 = *((double *)a2 + 11) + v92;
    *((double *)a2 + 10) = *((double *)a2 + 10) + v91;
    *((double *)a2 + 11) = v94;
    double v95 = *((double *)a2 + 13);
    double v96 = v92 * 0.0;
    double v97 = v93 * 0.0 + v91 + v92 * 0.0;
    double v98 = v91 * 0.0;
    double v99 = v93 * 0.0 + v92 + v98;
    *((double *)a2 + 1OZChannelEnum::~OZChannelEnum(this - 2) = v93 + *((double *)a2 + 12);
    *((double *)a2 + 13) = v95 + v97;
    double v100 = v93 + v98 + v96 + *((double *)a2 + 15);
    *((double *)a2 + 14) = v99 + *((double *)a2 + 14);
    *((double *)a2 + 15) = v100;
  }
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v108);
}

void sub_1B7CE3B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

__n128 OZMotionToForcesBehavior::accumInitialValues(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  long long v3 = *((_OWORD *)a2 + 11);
  *((void *)this + 68) = *((void *)a2 + 24);
  *((_OWORD *)this + 33) = v3;
  OZMotionToForcesBehavior::accumInitialValuesHelper(this, a2, a3, 1);
  return result;
}

void OZMotionToForcesBehavior::getInitialPosition(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
}

void *OZMotionToForcesBehavior::updateCache(OZMotionToForcesBehavior *this)
{
  *((unsigned char *)this + 448) = 1;
  *((unsigned char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 1;
  __n128 result = (void *)(*(uint64_t (**)(OZMotionToForcesBehavior *))(*(void *)this + 336))(this);
  if (result)
  {
    *((void *)this + 64) = result[46];
    *((void *)this + 65) = result[48];
    __n128 result = OZSimulationBehavior::getTransformNode(this);
    if (result)
    {
      long long v3 = result;
      long long v4 = (OZRigWidget *)(result + 152);
      uint64_t IsChannelRigged = (*(uint64_t (**)(void *))(result[152] + 560))(result + 152);
      if ((IsChannelRigged & 1) == 0)
      {
        uint64_t IsChannelRigged = (*(uint64_t (**)(void *))(v3[263] + 560))(v3 + 263);
        if ((IsChannelRigged & 1) == 0)
        {
          uint64_t IsChannelRigged = OZRigWidget::IsChannelRigged(v4, v6);
          if ((IsChannelRigged & 1) == 0)
          {
            uint64_t IsChannelRigged = OZRigWidget::IsChannelRigged((OZRigWidget *)(v3 + 263), v7);
            if ((IsChannelRigged & 1) == 0) {
              *((unsigned char *)this + 448) = 0;
            }
          }
        }
      }
      uint64_t v8 = (OZSceneNode *)v3;
      while (v8)
      {
        uint64_t v8 = (OZSceneNode *)*((void *)v8 + 120);
        uint64_t IsChannelRigged = OZMotionToForcesBehavior::isSceneNodeAnimated((OZMotionToForcesBehavior *)IsChannelRigged, v8);
        if (IsChannelRigged)
        {
          *((unsigned char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 1;
          goto LABEL_15;
        }
      }
      *((unsigned char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0;
      OZRenderState::OZRenderState(&v13);
      v13.var8 = 0;
      double v9 = (const void *)v3[120];
      *((void *)this + 85) = 0x3FF0000000000000;
      *((void *)this + 80) = 0x3FF0000000000000;
      *((void *)this + 75) = 0x3FF0000000000000;
      *((void *)this + 70) = 0x3FF0000000000000;
      *(_OWORD *)((char *)this + 584) = 0u;
      *(_OWORD *)((char *)this + 568) = 0u;
      *((_OWORD *)this + 38) = 0u;
      *((_OWORD *)this + 39) = 0u;
      *(_OWORD *)((char *)this + 664) = 0u;
      *(_OWORD *)((char *)this + 648) = 0u;
      if (v9)
      {
        if (v10) {
          (*(void (**)(void *, char *, OZRenderState *))(*(void *)v10 + 1256))(v10, (char *)this + 560, &v13);
        }
      }
LABEL_15:
      uint64_t v11 = MEMORY[0x1E4F1FA48];
      *((_OWORD *)this + 33) = *MEMORY[0x1E4F1FA48];
      *((void *)this + 68) = *(void *)(v11 + 16);
      PCMutex::lock((PCMutex *)this + 17);
      for (uint64_t i = 0; i != 528; i += 88)
        *((unsigned char *)this + i + 768) = 0;
      *((_DWORD *)this + 304) = 0;
      return (void *)PCMutex::unlock((PCMutex *)this + 17);
    }
  }
  return result;
}

void OZMotionToForcesBehavior::getSimState(OZObjectSimulator **this, CMTime *a2, CMTime *a3)
{
}

void non-virtual thunk to'OZMotionToForcesBehavior::getSimState(OZObjectSimulator **this, CMTime *a2, CMTime *a3)
{
}

uint64_t OZMotionToForcesBehavior::isSceneNodeAnimated(OZMotionToForcesBehavior *this, OZSceneNode *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (!v2) {
    return 0;
  }
  long long v3 = v2;
  if (((*(uint64_t (**)(void))(v2[152] + 560))() & 1) != 0
    || ((*(uint64_t (**)(void *))(v3[318] + 560))(v3 + 318) & 1) != 0
    || ((*(uint64_t (**)(void *))(v3[555] + 560))(v3 + 555) & 1) != 0
    || ((*(uint64_t (**)(void *))(v3[629] + 560))(v3 + 629) & 1) != 0)
  {
    return 1;
  }
  uint64_t v4 = 1;
  if ((OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 169), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 188), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 318), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 572), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 591), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 610), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 646), (const OZChannelBase *)1) & 1) != 0)
  {
    return v4;
  }

  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 665), (const OZChannelBase *)1);
}

double OZSimulationState::stepFrom(OZSimulationState *this, OZSimulationState *a2, CMTime *a3, double a4)
{
  return OZSimulationState::stepFrom((uint64_t)this, (uint64_t)a2, (uint64_t)a2, a3, a4);
}

double OZSimulationState::stepFrom(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, double a5)
{
  double v6 = *(double *)(a3 + 72) * a5 + *(double *)(a2 + 16);
  *(float64x2_t *)a1 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 56), a5), *(float64x2_t *)a2);
  *(double *)(a1 + 16) = v6;
  double v7 = *(double *)(a3 + 144) * a5 + *(double *)(a2 + 72);
  *(float64x2_t *)(a1 + 56) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 128), a5), *(float64x2_t *)(a2 + 56));
  *(double *)(a1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = v7;
  double v8 = a5 * 0.5 * 0.125;
  double v9 = v8 * 0.0;
  double v10 = v8 * *(double *)(a3 + 80);
  double v11 = v8 * *(double *)(a3 + 88);
  double v12 = v8 * *(double *)(a3 + 96);
  double v13 = *(double *)(a2 + 24);
  double v14 = *(double *)(a2 + 32);
  double v15 = *(double *)(a2 + 40);
  double v16 = *(double *)(a2 + 48);
  int v17 = 8;
  do
  {
    double v18 = v10 * v13 + v9 * v14 + v11 * v16 - v12 * v15;
    double v19 = v11 * v13 + v9 * v15 + v12 * v14 - v10 * v16;
    double v20 = v10 * v15 - v11 * v14 + v12 * v13 + v9 * v16;
    double v21 = v13 + v9 * v13 - (v10 * v14 + v11 * v15 + v12 * v16);
    double v22 = v14 + v18;
    double v23 = v15 + v19;
    double v24 = v16 + v20;
    double v25 = sqrt(v21 * v21 + v24 * v24 + v22 * v22 + v23 * v23);
    if (v25 == 0.0)
    {
      double v13 = 1.0;
      double v14 = 0.0;
      double v15 = 0.0;
      double v16 = 0.0;
    }
    else
    {
      double v13 = v21 / v25;
      double v14 = v22 / v25;
      double v15 = v23 / v25;
      double v16 = v24 / v25;
    }
    --v17;
  }
  while (v17);
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 3OZChannelEnum::~OZChannelEnum(this - 2) = v14;
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  double v26 = *(double *)(a3 + 168) * a5 + *(double *)(a2 + 120);
  *(float64x2_t *)(a1 + 104) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 152), a5), *(float64x2_t *)(a2 + 104));
  *(double *)(a1 + 120) = v26;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a1 + 120);
  uint64_t v27 = *(void *)(a3 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 128);
  *(void *)(a1 + 144) = v27;
  uint64_t v28 = *(void *)(a3 + 168);
  *(_OWORD *)(a1 + 15OZChannelEnum::~OZChannelEnum(this - 2) = *(_OWORD *)(a3 + 152);
  *(void *)(a1 + 168) = v28;
  CMTime v33 = *(CMTime *)(a2 + 176);
  CMTime v32 = *a4;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v30);
  double result = *(double *)&v30;
  *(_OWORD *)(a1 + 176) = v30;
  *(void *)(a1 + 19OZChannelEnum::~OZChannelEnum(this - 2) = v31;
  return result;
}

void *OZSimulationState::GetCommonGroup(OZSimulationState *this, OZTransformNode *a2, OZTransformNode *a3)
{
  if (!this) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CommonAncestor = OZSceneNode::getCommonAncestor(this, (OZSceneNode *)a2, 1);
  if (!CommonAncestor) {
    return 0;
  }
}

void *OZSimulationState::TransformToWorld(uint64_t a1, uint64_t a2, OZSimulationState *a3, uint64_t a4)
{
  double result = *(void **)(a2 + 960);
  if (result)
  {
    if (result)
    {
      double v9 = result;
      OZRenderState::OZRenderState(&v14);
      *(_OWORD *)&v14.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)a1;
      v14.var0.int64_t var3 = *(void *)(a1 + 16);
      if (a3)
      {
        CommonGroup = (OZTransformNode *)OZSimulationState::GetCommonGroup(a3, (OZTransformNode *)a2, v10);
        double v12 = CommonGroup;
        if (CommonGroup)
        {
          char v13 = 0;
          v14.int64_t var3 = (*(double (**)(OZTransformNode *))(*(void *)CommonGroup + 1328))(CommonGroup);
          goto LABEL_8;
        }
      }
      else
      {
        double v12 = 0;
      }
      char v13 = 1;
LABEL_8:
      v14.var5 = v12;
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, OZRenderState *))(*(void *)v9 + 1232))(v9, a4, &v14);
      if ((v13 & 1) == 0)
      {
        v14.int64_t var3 = 1.0;
        v14.var5 = 0;
        v14.var8 = 0;
        return (void *)(*(uint64_t (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(void *)v12 + 1232))(v12, a4, &v14);
      }
    }
  }
  return result;
}

void *OZSimulationState::GetNodePosition(CMTime *a1, uint64_t a2, OZSimulationState *a3, void *a4)
{
  __n128 v19 = 0uLL;
  CMTimeEpoch v20 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v19);
  memset(&v18, 0, sizeof(v18));
  CMTime v16 = *a1;
  *(__n128 *)&v15.int64_t value = v19;
  v15.CMTimeEpoch epoch = v20;
  PC_CMTimeFloorToSampleDuration(&v16, &v15, (uint64_t)&v17);
  CMTime v22 = v17;
  *(__n128 *)&v21.int64_t value = v19;
  v21.CMTimeEpoch epoch = v20;
  PC_CMTimeSaferSubtract(&v22, &v21, (uint64_t)&v18);
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1352), &v18, 0.0);
  uint64_t v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1504), &v18, 0.0);
  uint64_t v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1952), &v18, 0.0);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v13;
  return OZSimulationState::TransformToWorld((uint64_t)&v18, a2, a3, (uint64_t)a4);
}

void *OZSimulationState::getNodePosition(uint64_t a1, CMTime *a2, uint64_t a3, OZSimulationState *a4, void *a5)
{
  return OZSimulationState::GetNodePosition(a2, a3, a4, a5);
}

double OZSimulationState::getTransformedCorners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v83 = 0.0;
  double v84 = 0.0;
  float64_t v81 = 0.0;
  double v82 = 0.0;
  double v79 = 0.0;
  double v80 = 0.0;
  double v77 = 0.0;
  double v78 = 0.0;
  double v13 = *(double *)a1;
  double v12 = *(double *)(a1 + 8);
  double v14 = *(double *)(a1 + 16);
  OZRenderState::OZRenderState(&v76);
  *(_OWORD *)&v76.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)(a1 + 176);
  v76.var0.int64_t var3 = *(void *)(a1 + 192);
  v76.var8 = 0;
  (*(void (**)(uint64_t, double *, double *, double *, OZRenderState *, void))(*(void *)a2 + 1312))(a2, &v84, &v83, &v82, &v76, 0);
  OZTransformNode::getShear((OZTransformNode *)a2, &v81, &v80, (const CMTime *)(a1 + 176));
  OZTransformNode::getPivot((OZTransformNode *)a2, &v79, &v78, &v77, (const CMTime *)(a1 + 176));
  uint64_t v75 = 0x3FF0000000000000;
  uint64_t v72 = 0x3FF0000000000000;
  uint64_t v69 = 0x3FF0000000000000;
  double v66 = 1.0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  CMTime v15 = *(const void **)(a2 + 960);
  if (v15) {
  else
  }
    CMTime v16 = 0;
  double v17 = *(double *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2) + 384);
  if (v16)
  {
    double v18 = (*(double (**)(void *))(*(void *)v16 + 1328))(v16);
    v76.int64_t var3 = v17;
    double v17 = v18;
  }
  if (v17 == 0.0) {
    double v17 = 1.0;
  }
  double v24 = (*(double (**)(uint64_t))(*(void *)a2 + 1328))(a2);
  double v25 = v84 * (v24 / v17);
  double v84 = v25;
  if (v16)
  {
    uint64_t v65 = 0x3FF0000000000000;
    uint64_t v62 = 0x3FF0000000000000;
    uint64_t v59 = 0x3FF0000000000000;
    uint64_t v57 = 0x3FF0000000000000;
    *(void *)double v58 = 0x3FF0000000000000;
    memset(&v58[8], 0, 32);
    long long v60 = 0u;
    long long v61 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v54 = 0x3FF0000000000000;
    uint64_t v51 = 0x3FF0000000000000;
    *(void *)double v50 = 0x3FF0000000000000;
    memset(&v50[8], 0, 32);
    long long v52 = 0u;
    long long v53 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    (*(void (**)(void *, unsigned char *, OZRenderState *))(*(void *)v16 + 1264))(v16, v50, &v76);
    *(double *)&long long v48 = v13;
    *((double *)&v48 + 1) = v12;
    *(double *)&long long v49 = v14;
    *((void *)&v49 + 1) = 0x3FF0000000000000;
    PCMatrix44Tmpl<double>::transform<double>((double *)v50, (double *)&v48, (double *)&v48);
    double v31 = PCMatrix44Tmpl<double>::setTransformation((uint64_t)&v66, (double *)(a1 + 24), 0, *(double *)&v48, *((double *)&v48 + 1), *(double *)&v49, v84, v83, v82, v81, v80, v26, v27, v28, v29, v30, v79, v78, v77,
            *(uint64_t *)&v17);
    (*(void (**)(void *, unsigned char *, OZRenderState *, double))(*(void *)v16 + 1256))(v16, v58, &v76, v31);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v58, (long long *)&v66, (uint64_t)&v46);
    for (uint64_t i = 0; i != 128; i += 32)
    {
      CMTime v33 = (_OWORD *)((char *)&v66 + i);
      long long v34 = *(long long *)((char *)&v46 + i + 16);
      *CMTime v33 = *(long long *)((char *)&v46 + i);
      v33[1] = v34;
    }
  }
  else
  {
    PCMatrix44Tmpl<double>::setTransformation((uint64_t)&v66, (double *)(a1 + 24), 0, v13, v12, v14, v25, v83, v82, v81, v80, v19, v20, v21, v22, v23, v79, v78, v77,
      *(uint64_t *)&v17);
  }
  *(_OWORD *)double v58 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v58[16] = _Q0;
  (*(void (**)(uint64_t, unsigned char *, OZRenderState *))(*(void *)a2 + 1488))(a2, v58, &v76);
  *(void *)double v50 = *(void *)v58;
  *(double *)&v50[8] = *(double *)&v58[8] + *(double *)&v58[24];
  *(_OWORD *)&v50[16] = xmmword_1B7E733E0;
  *(double *)&long long v46 = *(double *)v58 + *(double *)&v58[16];
  *((double *)&v46 + 1) = *(double *)&v58[8] + *(double *)&v58[24];
  long long v47 = xmmword_1B7E733E0;
  long long v48 = *(_OWORD *)v58;
  long long v49 = xmmword_1B7E733E0;
  *(double *)&long long v44 = *(double *)v58 + *(double *)&v58[16];
  *((void *)&v44 + 1) = *(void *)&v58[8];
  long long v45 = xmmword_1B7E733E0;
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)v50, (double *)v50);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v46, (double *)&v46);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v48, (double *)&v48);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v44, (double *)&v44);
  uint64_t v40 = *(void *)&v50[16];
  *(_OWORD *)a3 = *(_OWORD *)v50;
  *(void *)(a3 + 16) = v40;
  uint64_t v41 = v47;
  *(_OWORD *)a4 = v46;
  *(void *)(a4 + 16) = v41;
  uint64_t v42 = v45;
  *(_OWORD *)a5 = v44;
  *(void *)(a5 + 16) = v42;
  double result = *(double *)&v49;
  *(_OWORD *)a6 = v48;
  *(double *)(a6 + 16) = result;
  return result;
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, double *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, float64_t a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, double a17, double a18, double a19, uint64_t a20)
{
  double v27 = a19;
  uint64_t v26 = a20;
  double v29 = a17;
  double v28 = a18;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  *(void *)(a1 + 80) = 0x3FF0000000000000;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(void *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  switch(a3)
  {
    case 0:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      goto LABEL_5;
    case 1:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_8;
    case 2:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_5:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_11;
    case 3:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_10;
    case 4:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_8:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      goto LABEL_11;
    case 5:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
LABEL_10:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_11:
      double v28 = a18;
      double v27 = a19;
      double v29 = a17;
      uint64_t v26 = a20;
      break;
    default:
      break;
  }
  *(double *)(a1 + 3OZChannelEnum::~OZChannelEnum(this - 2) = *(double *)(a1 + 32) * *(double *)&v26;
  *(double *)(a1 + 64) = *(double *)(a1 + 64) * *(double *)&v26;
  *(float64x2_t *)(a1 + 8) = vdivq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_lane_s64(v26, 0));
  double v34 = -v27;

  return PCMatrix44Tmpl<double>::rightTranslate((double *)a1, -v29, -v28, v34);
}

__n128 OZSimulationState::initializeState(__n128 *this, const CMTime *a2)
{
  this->n128_u64[0] = 0;
  this->n128_u64[1] = 0;
  this[1].n128_u64[0] = 0;
  this[1].n128_u64[1] = 0x3FF0000000000000;
  this[2] = 0u;
  this[3] = 0u;
  this[4] = 0u;
  this[5] = 0u;
  this[6] = 0u;
  this[7] = 0u;
  this[8] = 0u;
  this[9] = 0u;
  this[10] = 0u;
  __n128 result = *(__n128 *)&a2->value;
  this[12].n128_u64[0] = a2->epoch;
  this[11] = result;
  return result;
}

void OZRetimingBehavior::OZRetimingBehavior(OZRetimingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F1160418;
  *(void *)(v4 + 16) = &unk_1F1160708;
  *(void *)(v4 + 48) = &unk_1F1160960;
  *(void *)(v4 + 336) = &unk_1F11609B8;
  *(void *)(v4 + 536) = &unk_1F11609E0;
  *(unsigned char *)(v4 + 544) = 0;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v4 + 548) = *MEMORY[0x1E4F1FA48];
  *(void *)(v4 + 564) = *(void *)(v5 + 16);
}

void OZRetimingBehavior::OZRetimingBehavior(OZRetimingBehavior *this, const OZRetimingBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v3 = &unk_1F1160418;
  *(void *)(v3 + 16) = &unk_1F1160708;
  *(void *)(v3 + 48) = &unk_1F1160960;
  *(void *)(v3 + 336) = &unk_1F11609B8;
  *(void *)(v3 + 536) = &unk_1F11609E0;
  *(unsigned char *)(v3 + 544) = 0;
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v3 + 548) = *MEMORY[0x1E4F1FA48];
  *(void *)(v3 + 564) = *(void *)(v4 + 16);
}

void non-virtual thunk to'OZRetimingBehavior::~OZRetimingBehavior(OZRetimingBehavior *this)
{
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 336));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZRetimingBehavior::~OZRetimingBehavior(OZRetimingBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRetimingBehavior::addRetimingNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  uint64_t v2 = (OZRetimingUtil *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  uint64_t result = OZRetimingUtil::GetRetimeFrameChannel(v2, v3);
  if (result) {
    operator new();
  }
  return result;
}

void sub_1B7CE517C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

OZImageElement *OZRetimingBehavior::didAddSceneNodeToScene(OZRetimingBehavior *this, OZScene *a2)
{
  uint64_t result = (OZImageElement *)OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((unsigned char *)this + 544))
  {
    uint64_t v4 = (OZSceneNode *)(*(uint64_t (**)(OZRetimingBehavior *))(*(void *)this + 320))(this);
    uint64_t result = (OZImageElement *)OZRetimingBehavior::addRetimingNode(this, v4);
    if (v4)
    {
      if (result) {
        uint64_t result = (OZImageElement *)OZImageElement::updateRetimingState(result, v5);
      }
    }
    *((unsigned char *)this + 544) = 1;
  }
  return result;
}

void OZRetimingBehavior::willRemove(OZRetimingBehavior *this)
{
  *((unsigned char *)this + 544) = 0;
  uint64_t v2 = (const void *)(*(uint64_t (**)(OZRetimingBehavior *))(*(void *)this + 320))(this);
  uint64_t v3 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v2 + 640))();
  CMTime v7 = *(CMTime *)((char *)this + 548);
  OZRetimingUtil::FixForRemovedBehavior(v3, &v7, v4);
  OZChannelBehavior::willRemove(this);
  if (v5) {
    OZImageElement::updateRetimingState(v5, v6);
  }
}

unint64_t OZRetimingBehavior::canAddToSceneNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  unint64_t result = OZBehavior::canAddToSceneNode(this, a2);
  if (result)
  {
    return OZRetimingUtil::CanRetimeFull(a2, v4);
  }
  return result;
}

double OZRetimingBehavior::solveNode(OZRetimingBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double non-virtual thunk to'OZRetimingBehavior::solveNode(OZRetimingBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

__n128 OZRetimingBehavior::solveNode(OZRetimingBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.int64_t value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZRetimingBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZRetimingBehavior::solveNode(OZRetimingBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZRetimingBehavior::solveNode((OZRetimingBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZRetimingBehavior::getNeededRange(OZRetimingBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

__n128 non-virtual thunk to'OZRetimingBehavior::getNeededRange(OZRetimingBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

uint64_t OZChannelEnumDimension_Factory::getInstance(OZChannelEnumDimension_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnumDimension_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelEnumDimension_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumDimension_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumDimension_Factory::_instance;
}

void OZChannelEnumDimension::OZChannelEnumDimension(OZChannelEnumDimension *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, 0);
  *(void *)unint64_t v9 = &unk_1F11507B0;
  *((void *)v9 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1150B20;
  *((void *)this + 1) = OZChannelEnumDimension_Factory::getInstance(v9);
}

void sub_1B7CE5634(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumDimension_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CE5694(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumDimension_Factory::OZChannelEnumDimension_Factory(OZChannelEnumDimension_Factory *this)
{
  long long v3 = xmmword_1B8378BA0;
  long long v4 = xmmword_1B8383620;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1160A78;
  *((void *)this + 16) = &unk_1F1160B48;
}

void sub_1B7CE5764(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumDimension_Factory::create(OZChannelEnumDimension_Factory *this, const PCString *a2)
{
}

void sub_1B7CE581C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumDimension_Factory::createCopy(OZChannelEnumDimension_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CE5910(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumDimension_Factory::createChannelCopy(OZChannelEnumDimension_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CE5A04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZLiFilter::OZLiFilter(OZLiFilter *this, OZEffect *a2, const OZRenderParams *a3, const OZRenderParams *a4, char a5)
{
  LiImageFilter::LiImageFilter(this, (uint64_t *)a2 + 1);
  uint64_t v10 = *(void *)a2;
  *CMTime v11 = *(void *)a2;
  *(void *)((char *)this + *(void *)(v10 - 24)) = *((void *)a2 + 7);
  *((void *)this + 5) = a3;
  *((unsigned char *)this + 48) = a5;
  OZRenderParams::OZRenderParams((OZLiFilter *)((char *)this + 56), a4);
}

void sub_1B7CE5B10(_Unwind_Exception *a1)
{
  LiImageFilter::~LiImageFilter(v1, v2);
  _Unwind_Resume(a1);
}

void OZLiFilter::OZLiFilter(OZLiFilter *this, OZEffect *a2, const OZRenderParams *a3, char a4)
{
  *((void *)this + 185) = &unk_1F1199AC8;
  *((void *)this + 186) = 0;
  *((unsigned char *)this + 1496) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F1160CB0);
  *(void *)this = &unk_1F1160BA8;
  *((void *)this + 185) = &unk_1F1160C90;
  *((void *)this + 5) = a2;
  *((unsigned char *)this + 48) = a4;
  OZRenderParams::OZRenderParams((OZLiFilter *)((char *)this + 56), a3);
}

void sub_1B7CE5BF0(_Unwind_Exception *a1)
{
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1F1160CB0);
  *(void *)(v1 + 1480) = v2;
  *(unsigned char *)(v1 + 1496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1488));
  _Unwind_Resume(a1);
}

void OZLiFilter::clone(OZLiFilter *this)
{
}

void sub_1B7CE5CE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40D5751B1ALL);
  _Unwind_Resume(a1);
}

void OZLiFilter::getSourceAtTime(OZLiFilter *this@<X0>, CMTime *a2@<X1>, const OZRenderParams *a3@<X3>, int a4@<W2>, PCSharedCount *a5@<X8>)
{
  uint64_t v10 = *((void *)this + 2);
  if (!v10) {
    throw_PCNullPointerException(1);
  }
  CMTime v20 = *a2;
  (*(void (**)(PC_Sp_counted_base **__return_ptr))(*(void *)v10 + 136))(&v21);
  if (a4)
  {
    a5->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v21;
    PCSharedCount::PCSharedCount(a5 + 1, &v22);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)&v16, a3);
    long long v16 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    CMTimeEpoch v17 = epoch;
    (*(void (**)(PCSharedCount *__return_ptr))(**((void **)this + 5) + 648))(&v12);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, &v12);
    PCSharedCount::~PCSharedCount(&v13);
    if (v14.var0)
    {
      (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(void *)v14.var0 + 168))(v14.var0, v21);
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, &v14);
    }
    else
    {
      a5->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v21;
      PCSharedCount::PCSharedCount(a5 + 1, &v22);
    }
    PCSharedCount::~PCSharedCount(&v15);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v16);
  }
  PCSharedCount::~PCSharedCount(&v22);
}

void sub_1B7CE5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount(v5 + 1);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 - 72));
  _Unwind_Resume(a1);
}

void OZLiFilter::getHelium(const PCSharedCount *this, LiAgent *a2)
{
  long long v4 = (FxColorDescription *)&this[7];
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v4, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v4, *(float *)(*((void *)a2 + 6) + 192));
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[5].var0;
  unint64_t v9 = this[2].var0;
  PCSharedCount::PCSharedCount(&v10, this + 3);
  long long v7 = *(_OWORD *)&this[7].var0;
  uint64_t v8 = this[9].var0;
  (*(void (**)(PC_Sp_counted_base *, LiAgent *, PC_Sp_counted_base **, long long *, FxColorDescription *))(*(void *)var0 + 224))(var0, a2, &v9, &v7, v4);
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B7CE5FF8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLiFilter::pixelTransformSupport(OZLiFilter *this, const LiRenderParameters *a2)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    if (result)
    {
      uint64_t v4 = result;
      long long v7 = *(_OWORD *)((char *)this + 56);
      uint64_t v8 = *((void *)this + 9);
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)result + 656))(result, &v7))
      {
        return 6;
      }
      else
      {
        long long v5 = *(_OWORD *)((char *)this + 56);
        uint64_t v6 = *((void *)this + 9);
        return (*(uint64_t (**)(uint64_t, long long *))(*(void *)(v4 + 368) + 248))(v4 + 368, &v5);
      }
    }
  }
  return result;
}

uint64_t OZLiFilter::filteredEdges(OZLiFilter *this)
{
  return 0;
}

uint64_t OZLiFilter::setFilmSpace(OZLiFilter *this, int a2)
{
  *((unsigned char *)this + 48) = a2;
  if (a2) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }
  return (*(uint64_t (**)(OZLiFilter *, uint64_t))(*(void *)this + 88))(this, v2);
}

uint64_t OZLiFilter::getBoundary(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  (*(void (**)(void, float64x2_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), a3, a1 + 56);
  v11[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v11[1] = _Q0;
  if (LiImageFilter::getBoundary(a1)) {
    PCRect<double>::operator|=(a3, v11);
  }
  return 1;
}

void OZLiFilter::~OZLiFilter(PCSharedCount *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160BA8;
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160C90;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160D00;
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160DE8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1160CB8);
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[186].var0);
}

{
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160BA8;
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160C90;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160D00;
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160DE8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1160CB8);
  this[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[186].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiFilter::~OZLiFilter(OZLiFilter *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160BA8;
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160C90;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160D00;
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160DE8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1160CB8);
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[187].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[186].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160BA8;
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1160C90;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160D00;
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F1160DE8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1160CB8);
  v1[185].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[186].var0);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL GLRenderer::inDesperationMode(GLRenderer *this)
{
  return v1 != 0;
}

uint64_t GLRenderer::getFrameNode@<X0>(GLRenderer *this@<X0>, OZScene *a2@<X1>, HGRenderJob *a3@<X2>, PCString *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t RenderNodeList = HGRenderJob::GetRenderNodeList(a3);
  if (*(_DWORD *)(*(void *)RenderNodeList + 8)) {
    FxDeviceGetVirtualScreenForComputeDevice(RenderNodeList);
  }
  PCSharedCount v13 = (PGContext *)PGGetPerThreadContext();
  PGContext::setVirtualScreen(v13);
  int v14 = *((unsigned __int8 *)a3 + 496);
  OZChannelBase::setRangeName((OZChannelBase *)_F, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&v19, a4);
  *a6 = 0;
  if (v14) {
    GLRenderer::getFrameNodeWithMotionBlur(this, a2, (OZRenderParams *)a3, (HGRenderer *)a4, a5, &v18);
  }
  else {
    GLRenderer::getFrameNodeIncludingFields(this, a2, (OZRenderParams *)a3, (HGRenderer *)a4, a5, &v18);
  }
  if (v18) {
    *a6 = v18;
  }
  if (OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a3)
    && OZRenderParams::wantsHLGToPQPostProcessingStep((OZRenderParams *)a3))
  {
    uint64_t WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
    OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
    FxConvertHLGToPQ(a6, WorkingColorSpace, (CGColorSpace *)1);
  }
  OZImageElementFinalizer::~OZImageElementFinalizer((OZImageElementFinalizer *)&v19);
  return OZChannelBase::setRangeName((OZChannelBase *)_F, v16);
}

void sub_1B7CE67B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OZChannelBase *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, OZChannelBase *))(*(void *)a9 + 24))(a9, a2, a3, a4, a5);
  }
  if (*v13) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, OZChannelBase *))(*(void *)*v13 + 24))(*v13, a2, a3, a4, a5);
  }
  OZImageElementFinalizer::~OZImageElementFinalizer((OZImageElementFinalizer *)&a12);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

CGColorSpace **GLRenderer::getFrameNodeWithMotionBlur@<X0>(GLRenderer *this@<X0>, OZScene *a2@<X1>, OZRenderParams *a3@<X2>, HGRenderer *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  unint64_t v12 = *((int *)a3 + 125);
  if (v12 == 1)
  {
    return (CGColorSpace **)GLRenderer::getFrameNodeIncludingFields(this, a2, a3, a4, a5, a6);
  }
  else
  {
    *a6 = 0;
    OutputColorDescriptiouint64_t n = OZRenderParams::getOutputColorDescription(a3);
    PCSharedCount v15 = *(CGColorSpace **)OutputColorDescription;
    v50._pcColorDesc._colorSpaceRef._obuint64_t j = v15;
    if (v15) {
      PCCFRefTraits<CGColorSpace *>::retain(v15);
    }
    uint64_t v16 = *((void *)OutputColorDescription + 1);
    v50._pcColorDesc._toneMapMethod._gaiuint64_t n = *((float *)OutputColorDescription + 4);
    *(void *)&v50._pcColorDesc._dynamicRange = v16;
    v50._isPremultiplied = OutputColorDescription[24];
    WorkingColorDescriptiouint64_t n = OZRenderParams::getWorkingColorDescription(a3);
    uint64_t v18 = *(CGColorSpace **)WorkingColorDescription;
    v49._pcColorDesc._colorSpaceRef._obuint64_t j = v18;
    if (v18) {
      PCCFRefTraits<CGColorSpace *>::retain(v18);
    }
    uint64_t v19 = *(void *)(WorkingColorDescription + 8);
    v49._pcColorDesc._toneMapMethod._gaiuint64_t n = *(float *)(WorkingColorDescription + 16);
    *(void *)&v49._pcColorDesc._dynamicRange = v19;
    v49._isPremultiplied = *(unsigned char *)(WorkingColorDescription + 24);
    OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v49);
    if (*((_DWORD *)a3 + 123)) {
      double v20 = *((double *)a3 + 63) * 0.5;
    }
    else {
      double v20 = *((double *)a3 + 63);
    }
    long long v47 = *(_OWORD *)a3;
    uint64_t v48 = *((void *)a3 + 2);
    *(_OWORD *)&v41._pcColorDesc._colorSpaceRef._obuint64_t j = *(_OWORD *)a3;
    *(void *)&v41._pcColorDesc._toneMapMethod._gaiuint64_t n = *((void *)a3 + 2);
    double v21 = FigTimeToFrameWithRate((const CMTime *)&v41, *((double *)a2 + 46));
    long long v44 = 0;
    long long v45 = 0;
    unint64_t v46 = 0;
    std::vector<FxBalancedBlendRecord>::reserve((uint64_t *)&v44, v12);
    if (v12)
    {
      int v22 = 0;
      float v23 = v20;
      float v24 = (float)(1.0 / (float)(int)v12) * v23;
      float v25 = v21;
      int v26 = v12 - 1;
      do
      {
        OZScene::getTimeForFrame(a2, (float)((float)(v24 * (float)v22) + v25), (__n128 *)&v41);
        *(_OWORD *)a3 = *(_OWORD *)&v41._pcColorDesc._colorSpaceRef._obj;
        *((void *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = *(void *)&v41._pcColorDesc._toneMapMethod._gain;
        *((void *)a3 + 49) = 0;
        *((void *)a3 + 50) = 0;
        GLRenderer::getFrameNodeIncludingFields(this, a2, a3, a4, a5, &v43);
        FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)&v41, &v43, 1.0);
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
        }
        double v27 = v45;
        if ((unint64_t)v45 >= v46)
        {
          uint64_t v29 = std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>((uint64_t *)&v44, (uint64_t *)&v41);
        }
        else
        {
          obuint64_t j = v41._pcColorDesc._colorSpaceRef._obj;
          *(void *)long long v45 = v41._pcColorDesc._colorSpaceRef._obj;
          if (obj) {
            (*(void (**)(CGColorSpace *))(*(void *)obj + 16))(obj);
          }
          *((void *)v27 + 1) = *(void *)&v41._pcColorDesc._dynamicRange;
          uint64_t v29 = (uint64_t)v27 + 16;
        }
        long long v45 = (FxBalancedBlendRecord *)v29;
        uint64_t v30 = *a5;
        if (v41._pcColorDesc._colorSpaceRef._obj) {
          (*(void (**)(CGColorSpace *))(*(void *)v41._pcColorDesc._colorSpaceRef._obj + 24))(v41._pcColorDesc._colorSpaceRef._obj);
        }
        if (v30) {
          break;
        }
      }
      while (v26 != v22++);
    }
    if (*a5)
    {
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v50);
    }
    else
    {
      CMTime v32 = v44;
      if (v44 == v45)
      {
        int v38 = 0;
        __double2 v39 = (double *)v44;
      }
      else
      {
        while (1)
        {
          FxBalancedBlendRecord::node(v32, &v41);
          unsigned int v34 = LiHeUtil::isLiHeLightSurfaceFinalPass(v41._pcColorDesc._colorSpaceRef._obj, v33);
          if (v41._pcColorDesc._colorSpaceRef._obj) {
            (*(void (**)(CGColorSpace *))(*(void *)v41._pcColorDesc._colorSpaceRef._obj + 24))(v41._pcColorDesc._colorSpaceRef._obj);
          }
          if (v34)
          {
            int v38 = 1;
            double v37 = v45;
            goto LABEL_40;
          }
          FxBalancedBlendRecord::node(v32, &v41);
          hasHGAnisotropicXForuint64_t m = LiHeUtil::hasHGAnisotropicXForm(v41._pcColorDesc._colorSpaceRef._obj, v35);
          if (v41._pcColorDesc._colorSpaceRef._obj) {
            (*(void (**)(CGColorSpace *))(*(void *)v41._pcColorDesc._colorSpaceRef._obj + 24))(v41._pcColorDesc._colorSpaceRef._obj);
          }
          double v37 = v45;
          if (hasHGAnisotropicXForm) {
            break;
          }
          CMTime v32 = (FxBalancedBlendRecord *)((char *)v32 + 16);
          if (v32 == v45)
          {
            int v38 = 0;
            goto LABEL_40;
          }
        }
        int v38 = 1;
LABEL_40:
        __double2 v39 = (double *)v44;
        CMTime v32 = v37;
      }
      makeBalancedBlendTree<std::__wrap_iter<FxBalancedBlendRecord *>>(v39, (double *)v32, &v42, v38);
      v41._pcColorDesc._colorSpaceRef._obuint64_t j = v50._pcColorDesc._colorSpaceRef._obj;
      if (v50._pcColorDesc._colorSpaceRef._obj) {
        PCCFRefTraits<CGColorSpace *>::retain(v50._pcColorDesc._colorSpaceRef._obj);
      }
      *(void *)&v41._pcColorDesc._dynamicRange = *(void *)&v50._pcColorDesc._dynamicRange;
      v41._pcColorDesc._toneMapMethod._gaiuint64_t n = v50._pcColorDesc._toneMapMethod._gain;
      v41._isPremultiplied = v50._isPremultiplied;
      FxApplyColorConform(&v42, &v49, &v41, &v40);
      if (v40) {
        *a6 = v40;
      }
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v41);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v41._pcColorDesc._colorSpaceRef._obj);
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
      }
    }
    *(_OWORD *)a3 = v47;
    *((void *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v48;
    *((void *)a3 + 49) = 0;
    *((void *)a3 + 50) = 0;
    v41._pcColorDesc._colorSpaceRef._obuint64_t j = (CGColorSpace *)&v44;
    std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v49._pcColorDesc._colorSpaceRef._obj);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v50._pcColorDesc._colorSpaceRef._obj);
  }
}

void sub_1B7CE6CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  long long v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  va_copy((va_list)v5, va1);
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v3 - 136));
  _Unwind_Resume(a1);
}

GLRenderer *GLRenderer::getFrameNodeIncludingFields@<X0>(GLRenderer *this@<X0>, OZScene *a2@<X1>, OZRenderParams *a3@<X2>, HGRenderer *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = this;
  *a5 = 0;
  int v11 = *((_DWORD *)a3 + 123);
  if ((v11 - 1) < 2)
  {
    memset(&v39, 0, sizeof(v39));
    OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&v39);
    v39.value /= 2;
    v30.CMTimeEpoch epoch = *((void *)a3 + 2);
    v50[0].CMTimeEpoch epoch = *((void *)a3 + 2);
    *(_OWORD *)&v30.int64_t value = *(_OWORD *)a3;
    memset(v28, 0, sizeof(v28));
    *(_OWORD *)&v50[0].int64_t value = *(_OWORD *)a3;
    CMTime v47 = v39;
    PC_CMTimeSaferAdd(v50, &v47, (uint64_t)v28);
    OZRenderParams::OZRenderParams((OZRenderParams *)v50, a3);
    v50[0] = v30;
    long long v51 = 0uLL;
    GLRenderer::getFrameNodeForSingleTime(v10, a2, (OZRenderParams *)v50, a4, 0.5, -0.25, a5);
  }
  if ((v11 - 3) < 2)
  {
    OZRenderParams::getPixelTransform(a3, (uint64_t)&v47);
    *(_OWORD *)&v39.CMTimeScale timescale = 0u;
    *(_OWORD *)uint64_t v40 = 0u;
    v39.int64_t value = 0x3FF0000000000000;
    *(void *)&v40[16] = 0x4000000000000000;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v43 = 0x3FF0000000000000;
    uint64_t v46 = 0x3FF0000000000000;
    double v12 = -0.5;
    if (v11 == 3) {
      double v12 = 0.5;
    }
    if (*(double *)&v47.value * v49 - *(double *)&v47.timescale * v48 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = -v12;
    }
    if (v13 != 0.0)
    {
      *(float64x2_t *)&unsigned char v40[8] = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v13 * 0.0), 0), (float64x2_t)xmmword_1B7E73460);
      *(void *)&long long v41 = *(void *)&v40[8];
      *((double *)&v41 + 1) = v13;
    }
    uint64_t v38 = 0x3FF0000000000000;
    uint64_t v35 = 0x3FF0000000000000;
    uint64_t v32 = 0x3FF0000000000000;
    v30.int64_t value = 0x3FF0000000000000;
    *(_OWORD *)&v30.CMTimeScale timescale = 0uLL;
    long long v31 = 0uLL;
    long long v33 = 0uLL;
    long long v34 = 0uLL;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
    PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v30, (double *)&v39.value, 0.0);
    OZRenderParams::OZRenderParams((OZRenderParams *)v50, a3);
    OZRenderParams::getPixelTransform(a3, (uint64_t)&v25);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v39, (long long *)&v25, (uint64_t)v28);
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v15 = &v56[i];
      long long v16 = *(_OWORD *)&v28[i + 16];
      _OWORD *v15 = *(_OWORD *)&v28[i];
      v15[1] = v16;
    }
    v56[128] = 1;
    if (OZRenderParams::hasROI(a3))
    {
      OZRenderParams::getROI(a3, &v25);
      *(double *)double v28 = (double)SLODWORD(v25.f64[0]);
      *(double *)&_OWORD v28[8] = (double)SHIDWORD(v25.f64[0]);
      *(double *)&v28[16] = (double)SLODWORD(v25.f64[1]);
      double v29 = (double)SHIDWORD(v25.f64[1]);
      double v17 = (double)SHIDWORD(v25.f64[0]) + 0.5;
      double v18 = (double)SLODWORD(v25.f64[1]) + -1.0;
      double v19 = (double)SHIDWORD(v25.f64[1]) + -1.0;
      v25.f64[0] = (double)SLODWORD(v25.f64[0]) + 0.5;
      v25.f64[1] = v17;
      double v26 = v18;
      double v27 = v19;
      PCMatrix44Tmpl<double>::transformRect<double>((double *)&v39.value, v25.f64, (uint64_t)v28);
      v20.f64[0] = *(float64_t *)v28;
      int8x16_t v21 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v28[8], (float64x2_t)xmmword_1B8383660);
      float64x2_t v22 = (float64x2_t)vextq_s8(v21, v21, 8uLL);
      v20.f64[1] = v29;
      float64x2_t v23 = vaddq_f64(v20, (float64x2_t)xmmword_1B8383660);
      float64x2_t v24 = vaddq_f64(v22, v23);
      v22.f64[0] = v23.f64[0];
      int32x2_t v54 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v22, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
      int32x2_t v55 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v24))), v54);
    }
    int v53 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    GLRenderer::getFrameNodeForSingleTime(v10, a2, (OZRenderParams *)v50, a4, 1.0, 0.0, a5);
  }
  if (!v11) {
    GLRenderer::getFrameNodeForSingleTime(this, a2, a3, a4, 1.0, 0.0, a5);
  }
  *a6 = 0;
  return this;
}

void sub_1B7CE755C(_Unwind_Exception *a1)
{
  if (STACK[0x200]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x200] + 24))(STACK[0x200]);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void GLRenderer::getFrameNodeForSingleTime(GLRenderer *this, OZScene *a2, OZRenderParams *a3, HGRenderer *a4, double a5, double a6, uint64_t *a7)
{
  long long v18 = *(_OWORD *)a3;
  uint64_t v19 = *((void *)a3 + 2);
  OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)v14);
  operator/(&v18, (uint64_t)v14, (uint64_t)&time);
  CMTimeGetSeconds(&time);
  *a7 = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v18, a3);
  float64x2_t v22 = this;
  uint64_t RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a3);
  if (*(_DWORD *)(*(void *)RenderNodeList + 8)) {
    FxDeviceGetVirtualScreenForComputeDevice(RenderNodeList);
  }
  double v12 = (PGContext *)PGGetPerThreadContext();
  PGContext::setVirtualScreen(v12);
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v17);
  uint64_t v15 = 0;
  PCSharedCount::PCSharedCount(&v16);
  uint64_t v20 = 0x3FF0000000000000;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v13 = v21;
  OZScene::setupFxPlugRenderContext(a2, a3);
  if (v13) {
    operator new();
  }
  OZScene::buildSceneRenderGraph(a2, (OZRenderParams *)&v18);
}

void sub_1B7CE7E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,CGColorSpace *a63)
{
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 24))(v64);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a63);
  PCSharedCount::~PCSharedCount(v63);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&STACK[0x290]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void GLRenderer::getSceneHeNodeFromLiWorld(void *a1@<X3>, uint64_t a2@<X6>, void *a3@<X7>, void *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  memset(v24, 0, 32);
  PCColorDescription::PCColorDescription(v24);
  char v9 = 1;
  LOBYTE(v24[1]._colorSpaceRef._obj) = 1;
  uint64_t v10 = *(CGColorSpace **)a2;
  obuint64_t j = v24[0]._colorSpaceRef._obj;
  if (*(void *)a2) {
    BOOL v12 = v10 == v24[0]._colorSpaceRef._obj;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    PCCFRefTraits<CGColorSpace *>::release(v10);
    obuint64_t j = v24[0]._colorSpaceRef._obj;
    char v9 = (char)v24[1]._colorSpaceRef._obj;
  }
  *(void *)a2 = obj;
  v24[0]._colorSpaceRef._obuint64_t j = 0;
  *(_DWORD *)(a2 + 8) = v24[0]._dynamicRange;
  *(PCToneMapMethod *)(a2 + 1OZChannelEnum::~OZChannelEnum(this - 2) = v24[0]._toneMapMethod;
  *(unsigned char *)(a2 + 24) = v9;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v24[0]._colorSpaceRef._obj);
  *a3 = 0;
  uint64_t v13 = (void *)a1[160];
  long long v33 = v13;
  if (v13) {
    int v14 = (PCShared_base *)((char *)v13 + *(void *)(*v13 - 24));
  }
  else {
    int v14 = 0;
  }
  PCSharedCount::PCSharedCount(v34, v14);
  if (!v33) {
    throw_PCNullPointerException(1);
  }
  if ((*(uint64_t (**)(void *))(*v33 + 704))(v33))
  {
    OZRenderParams::getPixelTransform((OZRenderParams *)a1, (uint64_t)v27);
    if (!v33) {
      throw_PCNullPointerException(1);
    }
    double v15 = (*(double (**)(void *))(*v33 + 688))(v33);
    if (v15 != 1.0)
    {
      v27[0] = v15 * v27[0];
      v28.f64[0] = v15 * v28.f64[0];
      double v30 = v15 * v30;
      v31.f64[0] = v15 * v31.f64[0];
    }
    OZRenderParams::getROI((OZRenderParams *)a1, &v26);
    long long v25 = xmmword_1B7E74760;
    OZRenderParams::getROI((OZRenderParams *)a1, (float64x2_t *)v24);
    long long v25 = *(_OWORD *)&v24[0]._colorSpaceRef._obj;
    if (LiRenderingTechnology::getUseHalfHeightFields((LiRenderingTechnology *)((char *)a1 + 1316)))
    {
      double v16 = (double)SDWORD1(v25) * a5 + a6;
      unsigned int v17 = vcvtmd_s64_f64((double)(int)v25 + 0.0000001);
      unsigned int v18 = vcvtpd_s64_f64((double)(int)v25 + (double)SDWORD2(v25)) - v17;
      *(void *)&long long v25 = __PAIR64__(vcvtmd_s64_f64(v16 + 0.0000001), v17);
      DWORD2(v25) = v18;
      HIDWORD(v25) = vcvtpd_s64_f64(v16 + (double)SHIDWORD(v25) * a5) - DWORD1(v25);
    }
    if (LiRenderingTechnology::getUseHalfHeightFields((LiRenderingTechnology *)((char *)a1 + 1316)))
    {
      if (a5 != 1.0)
      {
        float64x2_t v28 = vmulq_n_f64(v28, a5);
        float64x2_t v29 = vmulq_n_f64(v29, a5);
      }
      if (a6 != 0.0)
      {
        float64x2_t v28 = vaddq_f64(v28, vmulq_n_f64(v31, a6));
        float64x2_t v29 = vaddq_f64(v29, vmulq_n_f64(v32, a6));
      }
    }
    operator new();
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"GLRenderer::renderSingleFrame: error: invalid camera", 52);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet((const std::locale *)v24, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)v24);
  std::ostream::put();
  std::ostream::flush();
  *a3 = 2;
  *a4 = 0;
  PCSharedCount::~PCSharedCount(v34);
}

void sub_1B7CE8984(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, void *a16)
{
  PCSharedCount::~PCSharedCount(v17);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x238]);
  if (a2 == 3)
  {
    __cxa_begin_catch(a1);
    *double v16 = 1;
    __cxa_end_catch();
  }
  else if (a2 == 2)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v20 + 40))(v20);
    *double v16 = 2;
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {
      if (*a16) {
        (*(void (**)(void))(*(void *)*a16 + 24))(*a16);
      }
      PCSharedCount::~PCSharedCount(a13);
      PCSharedCount::~PCSharedCount(a10);
      _Unwind_Resume(a1);
    }
    __cxa_begin_catch(a1);
    *double v16 = 2;
    __cxa_end_catch();
  }
  JUMPOUT(0x1B7CE8934);
}

void **std::vector<FxBalancedBlendRecord>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B7CE8C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void makeBalancedBlendTree<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>, int a4@<W2>)
{
  if (a4 == 1) {
    makeBalancedBlendTree_RetimeAddBlend2<std::__wrap_iter<FxBalancedBlendRecord *>>(a1, a2, a3);
  }
  else {
    makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(a1, a2, a3);
  }
}

void *PCPtr<LiAnimCamera>::operator=<LiCamera>(void *a1, void *a2)
{
  lpsrc = a2;
  if (a2) {
    a2 = (void *)((char *)a2 + *(void *)(*a2 - 24));
  }
  PCSharedCount::PCSharedCount(&v9, (PCShared_base *)a2);
  if (!lpsrc)
  {
    *a1 = 0;
    goto LABEL_7;
  }
  *a1 = v3;
  if (!v3)
  {
LABEL_7:
    PCSharedCount::PCSharedCount(&v7);
    uint64_t v4 = &v7;
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v7);
    goto LABEL_8;
  }
  PCSharedCount::PCSharedCount(&v6, &v9);
  uint64_t v4 = &v6;
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
LABEL_8:
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B7CE8DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void *PCPtr<OZNodeCamera>::operator=<LiCamera>(void *a1, void *a2)
{
  lpsrc = a2;
  if (a2) {
    a2 = (void *)((char *)a2 + *(void *)(*a2 - 24));
  }
  PCSharedCount::PCSharedCount(&v9, (PCShared_base *)a2);
  if (!lpsrc)
  {
    *a1 = 0;
    goto LABEL_7;
  }
  *a1 = v3;
  if (!v3)
  {
LABEL_7:
    PCSharedCount::PCSharedCount(&v7);
    uint64_t v4 = &v7;
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v7);
    goto LABEL_8;
  }
  PCSharedCount::PCSharedCount(&v6, &v9);
  uint64_t v4 = &v6;
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
LABEL_8:
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B7CE8EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void fadeObjects2(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    throw_PCNullPointerException(1);
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 136))(v6);
  if (v7 >= 1)
  {
    int v8 = v7;
    uint64_t v9 = 0;
    while (1)
    {
      if (!*a1) {
        throw_PCNullPointerException(1);
      }
      uint64_t v10 = (double *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 144))(*a1, v9);
      int v11 = v10;
      if (!v10) {
        break;
      }
      int v13 = *((_DWORD *)v11 + 130);
      if (v13 == a2 && v12 != 0) {
        goto LABEL_21;
      }
      if (v12)
      {
        uint64_t v19 = v12;
        PCSharedCount::PCSharedCount(&v20, (PCShared_base *)((char *)v12 + *(void *)(*v12 - 24)));
        fadeObjects2(&v19, a2, a3);
        double v15 = &v20;
LABEL_20:
        PCSharedCount::~PCSharedCount(v15);
        goto LABEL_21;
      }
      if (v13 != a2) {
        goto LABEL_18;
      }
LABEL_21:
      uint64_t v9 = (v9 + 1);
      if (v8 == v9) {
        return;
      }
    }
    if (MEMORY[0x208] == a2) {
      goto LABEL_21;
    }
LABEL_18:
    v11[68] = v11[68] * a3;
    if (v16)
    {
      unsigned int v17 = v16;
      PCSharedCount::PCSharedCount(&v18, (PCShared_base *)((char *)v16 + *(void *)(*v16 - 24)));
      fadeObjects2(&v17, a2, a3);
      double v15 = &v18;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
}

void sub_1B7CE9158(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void makeBalancedBlendTree_RetimeAddBlend2<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  int v11 = 0;
  unint64_t v12 = 0;
  uint64_t v10 = &v11;
  v13[0] = &v10;
  v13[1] = &v11;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = (FxSupport *)std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100]((uint64_t)v13, v5);
      v5 += 2;
    }
    while (v5 != a2);
    if (v12 >= 2)
    {
      int v7 = v10[1];
      if (v7)
      {
        do
          int v7 = (void *)*v7;
        while (v7);
      }
      else
      {
        int v8 = v10;
        do
        {
          BOOL v9 = *v8[2] == (void)v8;
          int v8 = (void **)v8[2];
        }
        while (!v9);
      }
      FxSupport::makeRetimeAddBlend2(v6);
    }
  }
  FxBalancedBlendRecord::node((FxBalancedBlendRecord *)(v10 + 4), a3);
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy((uint64_t)&v10, v11);
}

void sub_1B7CE954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void OZCloneGenerator::registerRetiming(OZCloneGenerator *this)
{
  {
    OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZCloneGenerator::registerRetiming(void)::sRetimer);
    OZCloneGenerator::registerRetiming(void)::sRetimer = (uint64_t)&unk_1F1161C40;
    __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZCloneGenerator::registerRetiming(void)::sRetimer, &dword_1B73F3000);
  }
}

void sub_1B7CE9730(_Unwind_Exception *a1)
{
}

void OZCloneGenerator::OZCloneGenerator(OZCloneGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *(void *)uint64_t v6 = &unk_1F1160F98;
  *(void *)(v6 + 16) = &unk_1F11618A0;
  *(void *)(v6 + 48) = &unk_1F1161AF8;
  *(void *)(v6 + 6528) = &unk_1F1161B50;
  int v7 = (OZChannelFolder *)(v6 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18776), a3, (OZChannelFolder *)(v6 + 448), 1u, 0, 0);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Source Node");
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904), &v9, v7, 0x12Cu, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Time Remap Enum");
  PCURL::PCURL((PCURL *)&v8, @"Channel Clone Time Remap Label");
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19064), 0, &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x130u, 2, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Time Scale");
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 19320), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x131u, 4259840, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Time Reverse");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19472), 0, &v9, (OZChannelFolder *)((char *)this + 320), 0x132u, 0x410000u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone End Condition Enum");
  PCURL::PCURL((PCURL *)&v8, @"Channel Clone End Condition Label");
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19624), &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x133u, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Loop Duration");
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 19880), 0.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x134u, 32770, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Retime Frame");
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20032), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x135u, 131074, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Retime Sampling Enum");
  PCURL::PCURL((PCURL *)&v8, @"Channel Clone Retime Sampling Label");
  OZChannelEnumRetime::OZChannelEnumRetime((OZCloneGenerator *)((char *)this + 20184), &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x136u, 2u);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Retime Frame Cache");
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20440), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x137u, 131074, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Channel Clone Duration Cache");
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20592), 0.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x138u, 2, 0, 0);
  PCString::~PCString(&v9);
  *((_DWORD *)this + 5186) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19880), 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 20032), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19472), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19064), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20184), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19624), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19880), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19880), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 19880), 3.40282347e38);
}

void sub_1B7CE9C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, OZChanElementOrFootageRef *a12, OZChannelFolder *a13, OZChannelEnum *a14, PCString a15, PCString a16)
{
  PCString::~PCString(&a16);
  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelBool::~OZChannelBool(v20);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a12);
  OZChannelFolder::~OZChannelFolder(a13);
  OZElement::~OZElement(v16);
  _Unwind_Resume(a1);
}

void OZCloneGenerator::OZCloneGenerator(OZCloneGenerator *this, const OZCloneGenerator *a2, uint64_t a3)
{
  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1160F98;
  *(void *)(v5 + 16) = &unk_1F11618A0;
  *(void *)(v5 + 48) = &unk_1F1161AF8;
  *(void *)(v5 + 6528) = &unk_1F1161B50;
  uint64_t v6 = (OZChannelFolder *)(v5 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 448));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904), (const OZCloneGenerator *)((char *)a2 + 18904), v6);
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19064), (const OZCloneGenerator *)((char *)a2 + 19064), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19320), (const OZChannelBase *)((char *)a2 + 19320), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2415) = &unk_1F1100CF0;
  *((void *)this + 2417) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19472), (const OZChannelBase *)((char *)a2 + 19472), (OZChannelFolder *)((char *)this + 320));
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19624), (const OZCloneGenerator *)((char *)a2 + 19624), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19880), (const OZChannelBase *)((char *)a2 + 19880), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2485) = &unk_1F1100CF0;
  *((void *)this + 2487) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20032), (const OZChannelBase *)((char *)a2 + 20032), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2504) = &unk_1F1100CF0;
  *((void *)this + 2506) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 20184), (const OZCloneGenerator *)((char *)a2 + 20184), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2523) = &unk_1F113DAE8;
  *((void *)this + 2525) = &unk_1F113DE58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20440), (const OZChannelBase *)((char *)a2 + 20440), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2555) = &unk_1F1100CF0;
  *((void *)this + 2557) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20592), (const OZChannelBase *)((char *)a2 + 20592), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2574) = &unk_1F1100CF0;
  *((void *)this + 2576) = &unk_1F1101050;
  *((_DWORD *)this + 5186) = 0;
}

void sub_1B7CEA188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChanElementOrFootageRef *a11, OZChannelFolder *a12)
{
  OZChannel::~OZChannel(v13);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelBool::~OZChannelBool(v17);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a11);
  OZChannelFolder::~OZChannelFolder(a12);
  OZElement::~OZElement(v12);
  _Unwind_Resume(a1);
}

void sub_1B7CEA20C()
{
}

void sub_1B7CEA214()
{
}

void sub_1B7CEA21C()
{
}

void sub_1B7CEA224()
{
}

void sub_1B7CEA22C()
{
}

void sub_1B7CEA234()
{
}

void OZCloneGenerator::~OZCloneGenerator(OZCloneGenerator *this)
{
  *(void *)this = &unk_1F1160F98;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11618A0;
  *((void *)this + 6) = &unk_1F1161AF8;
  *((void *)this + 816) = &unk_1F1161B50;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 5186);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20440));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2523);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19880));
  OZChannelEnum::~OZChannelEnum((OZCloneGenerator *)((char *)this + 19624));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19320));
  OZChannelEnum::~OZChannelEnum((OZCloneGenerator *)((char *)this + 19064));
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));

  OZElement::~OZElement((OZElement *)this);
}

{
  uint64_t vars8;

  OZCloneGenerator::~OZCloneGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZCloneGenerator::~OZCloneGenerator(OZCloneGenerator *this)
{
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 48));
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZCloneGenerator::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 18904, (uint64_t)v4 + 18904);
  OZChannelBase::operator=(a1 + 19320, (uint64_t)v5 + 19320);
  OZChannelBase::operator=(a1 + 19472, (uint64_t)v5 + 19472);
  OZChannelBase::operator=(a1 + 19064, (uint64_t)v5 + 19064);
  OZChannelBase::operator=(a1 + 20032, (uint64_t)v5 + 20032);
  OZChannelBase::operator=(a1 + 20440, (uint64_t)v5 + 20440);
  OZChannelBase::operator=(a1 + 20184, (uint64_t)v5 + 20184);
  OZChannelBase::operator=(a1 + 19624, (uint64_t)v5 + 19624);
  OZChannelBase::operator=(a1 + 19880, (uint64_t)v5 + 19880);

  return OZChannelBase::operator=(a1 + 20592, (uint64_t)v5 + 20592);
}

uint64_t OZCloneGenerator::getTimeScale(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 19320;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 19320;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 19320;
  }
  if (v2 == 1) {
    return (uint64_t)this + 19320;
  }
  return 0;
}

uint64_t OZCloneGenerator::getTimeReverse(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 19472;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 19472;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 19472;
  }
  if (v2 == 1) {
    return (uint64_t)this + 19472;
  }
  return 0;
}

uint64_t OZCloneGenerator::getTimeRemap(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 19064;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 19064;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 19064;
  }
  if (v2 == 1) {
    return (uint64_t)this + 19064;
  }
  return 0;
}

uint64_t OZCloneGenerator::getRetimeFrame(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 20032;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 20032;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 20032;
  }
  if (v2 == 1) {
    return (uint64_t)this + 20032;
  }
  return 0;
}

uint64_t OZCloneGenerator::getRetimeFrameCache(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 20440;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 20440;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 20440;
  }
  if (v2 == 1) {
    return (uint64_t)this + 20440;
  }
  return 0;
}

uint64_t OZCloneGenerator::getEndCondition(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 19624;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 19624;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 19624;
  }
  if (v2 == 1) {
    return (uint64_t)this + 19624;
  }
  return 0;
}

uint64_t OZCloneGenerator::getLoopDuration(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 19880;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 19880;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 19880;
  }
  if (v2 == 1) {
    return (uint64_t)this + 19880;
  }
  return 0;
}

uint64_t OZCloneGenerator::getDurationCache(OZCloneGenerator *this)
{
  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this)) {
    return (uint64_t)this + 20592;
  }
  if (!*(void *)((*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this) + 1584)) {
    return (uint64_t)this + 20592;
  }
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 121) + 1584) + 320);
  if (!v2) {
    return (uint64_t)this + 20592;
  }
  if (v2 == 1) {
    return (uint64_t)this + 20592;
  }
  return 0;
}

uint64_t OZCloneGenerator::eval(OZCloneGenerator *this, OZRenderParams *a2)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  double TimeRemappedParams = OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v10);
  uint64_t v8 = (*(uint64_t (**)(void *, unsigned char *, double))(*(void *)v6 + 96))(v6, v10, TimeRemappedParams);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  return v8;
}

void sub_1B7CEAC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *OZCloneGenerator::getSourceNode(OZCloneGenerator *this)
{
  unsigned int v1 = (OZChannelBase *)((char *)this + 18904);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 18904), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v3 = *(void *)OZChannelBase::getObjectManipulator(v1);
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(void))(v3 + 264))();
  if (!v4) {
    return 0;
  }
  unint64_t Node = OZScene::getNode(v4, ValueAsUint);
  if (!Node) {
    return 0;
  }
}

double OZCloneGenerator::getTimeRemappedParams@<D0>(OZCloneGenerator *this@<X0>, const OZRenderParams *a2@<X1>, OZRenderParams *a3@<X8>)
{
  OZRenderParams::OZRenderParams(a3, a2);
  CMTime v7 = *(CMTime *)a2;
  OZCloneGenerator::getTimeRemappedFrame(this, &v7, (uint64_t)&v8);
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *((void *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v9;
  *((void *)a3 + 49) = 0;
  *((void *)a3 + 50) = 0;
  return result;
}

void sub_1B7CEADA0(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams(v1);
  _Unwind_Resume(a1);
}

void *OZCloneGenerator::buildRenderGraph(OZCloneGenerator *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  double result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v34, a4);
    LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)&v23);
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v10 = &v34[i];
      long long v11 = *(_OWORD *)((char *)&v23.var0.var3 + i);
      *((_OWORD *)v10 + 6) = *(_OWORD *)((char *)&v23.var0.var0 + i);
      *((_OWORD *)v10 + 7) = v11;
    }
    uint64_t v33 = 0x3FF0000000000000;
    uint64_t v30 = 0x3FF0000000000000;
    uint64_t v27 = 0x3FF0000000000000;
    uint64_t v24 = 0x3FF0000000000000;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    OZRenderState::OZRenderState(&v23, a2);
    v23.var4 = 1;
    (*(void (**)(OZCloneGenerator *, uint64_t *, OZRenderState *))(*(void *)this + 1256))(this, &v24, &v23);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v36, (long long *)&v24, (uint64_t)v22);
    for (uint64_t j = 0; j != 128; j += 32)
    {
      int v13 = &v34[j];
      long long v14 = *(_OWORD *)&v22[j + 16];
      *((_OWORD *)v13 + 6) = *(_OWORD *)&v22[j];
      *((_OWORD *)v13 + 7) = v14;
    }
    Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
    if (SourceNode)
    {
      if (v16)
      {
        unsigned int v17 = v16;
        uint64_t v18 = *v16;
        int v20 = (*(uint64_t (**)(void *))(v18 + 1608))(v17);
        if (v19) {
          int v21 = v20;
        }
        else {
          int v21 = 0;
        }
        if (v21 == 1 && OZImageElement::isBackgroundDropZone(v19)) {
          v37[32] = 0;
        }
      }
    }
    OZElement::buildRenderGraph((OZElement *)this, (CMTime *)a2, a3, (const OZRenderGraphState *)v34);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v37);
    return std::__list_imp<unsigned int>::clear(v35);
  }
  return result;
}

void sub_1B7CEAFFC(_Unwind_Exception *a1)
{
}

void *non-virtual thunk to'OZCloneGenerator::buildRenderGraph(OZCloneGenerator *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  return OZCloneGenerator::buildRenderGraph((OZCloneGenerator *)((char *)this - 6528), a2, a3, a4);
}

void OZCloneGenerator::makeRenderImageSource(OZCloneGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (SourceNode
  {
    uint64_t v10 = v9;
    OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)&v29);
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v28, (OZImageNode *)(v10 + 6528), (OZRenderParams *)&v29);
    OZRenderState::OZRenderState(&v27, &v29);
    if ((*(unsigned int (**)(char *))(*(void *)v10 + 1600))(v10)) {
      v27.var19 = 0;
    }
    OZRenderParams::setState((OZRenderParams *)&v29, &v27);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v20, a3);
    uint64_t v18 = 0;
    *(void *)&long long v19 = 0;
    unsigned int v17 = &unk_1F10AD5F8;
    BYTE8(v19) = 0;
    if (v23 < 0) {
      int v11 = 1;
    }
    else {
      int v11 = v23;
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v22, 0, v11);
    char v24 = BYTE8(v19);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v17);
    if ((*(unsigned int (**)(char *))(*(void *)v10 + 1608))(v10)) {
      char v25 = 0;
    }
    char v26 = 1;
    (*(void (**)(char *, OZRenderState *, unsigned char *, uint64_t))(*(void *)v10 + 1936))(v10, &v29, v20, 1);
    if (OZElement::isOwner360((OZElement *)this))
    {
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v19 = _Q0;
      (*(void (**)(OZCloneGenerator *, void **, OZRenderState *))(*(void *)this + 1480))(this, &v17, &v27);
      operator new();
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v22);
    std::__list_imp<unsigned int>::clear(v21);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v28);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v29);
  }
  else
  {
    a4->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
    PCSharedCount::PCSharedCount(a4 + 1, 0);
  }
}

void sub_1B7CEB3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 72));
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v16 + 1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v17);
  std::__list_imp<unsigned int>::clear(va);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x270]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZCloneGenerator::makeRenderImageSource(OZCloneGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
}

uint64_t OZCloneGenerator::doesTransformFromLocalToScreenSpace(OZCloneGenerator *this, const OZRenderParams *a2)
{
  return 0;
}

uint64_t OZCloneGenerator::areEffectsAppliedInScreenSpace(OZCloneGenerator *this)
{
  unsigned int v1 = *(uint64_t (**)(void))(*(void *)OZCloneGenerator::getSourceNode(this) + 144);

  return v1();
}

uint64_t non-virtual thunk to'OZCloneGenerator::areEffectsAppliedInScreenSpace(OZCloneGenerator *this)
{
  unsigned int v1 = *(uint64_t (**)(void))(*(void *)OZCloneGenerator::getSourceNode((OZCloneGenerator *)((char *)this - 6528))
                           + 144);

  return v1();
}

uint64_t *OZCloneGenerator::getImageBounds(OZCloneGenerator *a1, uint64_t a2, const OZRenderState *a3)
{
  double result = (uint64_t *)OZCloneGenerator::getSourceNode(a1);
  if (result)
  {
    CMTime v7 = result;
    OZRenderState::OZRenderState(&v19, a3);
    $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a3->var0;
    OZCloneGenerator::getTimeRemappedFrame(a1, (CMTime *)&var0, (uint64_t)&v17);
    *(_OWORD *)&v19.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v17;
    v19.var0.int64_t var3 = v18;
    if (v8)
    {
      uint64_t v9 = v8;
      if ((*(unsigned int (**)(void *))(*(void *)v8 + 1608))(v8)) {
        v19.var18 = 0;
      }
      if ((*(unsigned int (**)(void *))(*(void *)v9 + 1600))(v9)) {
        v19.var19 = 0;
      }
    }
    uint64_t v10 = *v7;
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, OZRenderState *))(v10 + 16))(v7, a2, &v19);
    }
    else
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, OZRenderState *))(v10 + 80))(v7, a2, &v19);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 16) = _Q0;
  }
  return result;
}

double OZCloneGenerator::getTimeRemappedFrame@<D0>(OZCloneGenerator *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 640))(this);
  OZRetimingUtil::RemapTimeValue(v6, (OZChannelObjectRoot *)a2, (uint64_t *)a3);
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, OZCloneGenerator *))(*(void *)this + 2264))(&v16, this);
  v13[0] = *(CMTime *)a3;
  uint64_t v7 = MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(v13, &time2) < 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)v7;
    CMTimeEpoch epoch = *(void *)(v7 + 16);
  }
  else
  {
    v13[0] = *(CMTime *)a3;
    CMTime time2 = v16;
    if (CMTimeCompare(v13, &time2) < 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (*(uint64_t (**)(OZCloneGenerator *))(*(void *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v14);
    v13[0] = v16;
    *(__n128 *)&time2.int64_t value = v14;
    time2.CMTimeEpoch epoch = v15;
    PC_CMTimeSaferSubtract(v13, &time2, (uint64_t)&v17);
    *(_OWORD *)a3 = *(_OWORD *)&v17.value;
    CMTimeEpoch epoch = v17.epoch;
  }
  *(void *)(a3 + 16) = epoch;
LABEL_6:
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (v12)
    {
      (*(void (**)(CMTime *__return_ptr))(*(void *)v12 + 1128))(v13);
      CMTime v17 = v13[0];
      CMTime time2 = *(CMTime *)a3;
      PC_CMTimeSaferAdd(&time2, &v17, (uint64_t)v13);
      double result = *(double *)&v13[0].value;
      *(CMTime *)a3 = v13[0];
    }
  }
  return result;
}

uint64_t *non-virtual thunk to'OZCloneGenerator::getImageBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZCloneGenerator::getImageBounds((OZCloneGenerator *)(a1 - 6528), a2, a3);
}

uint64_t OZCloneGenerator::getImageBoundsWithEffects(OZCloneGenerator *a1, uint64_t a2, const OZRenderState *a3)
{
  if ((*(uint64_t (**)(OZCloneGenerator *))(*(void *)a1 + 416))(a1))
  {
    OZRenderState::OZRenderState(&v15, a3);
    $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a3->var0;
    OZCloneGenerator::getTimeRemappedFrame(a1, (CMTime *)&var0, (uint64_t)&v13);
    *(_OWORD *)&v15.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v13;
    v15.var0.int64_t var3 = v14;
    Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
    if (SourceNode)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *v7;
        {
          if ((*(unsigned int (**)(void *))(v9 + 1608))(v8)) {
            v15.var18 = 0;
          }
          if ((*(unsigned int (**)(void *))(*v8 + 1600))(v8)) {
            v15.var19 = 0;
          }
        }
      }
    }
    *(void *)(*(void *)(*((void *)a1 + 122) + 16) + 24) = (char *)a1 + 6528;
    return (*(uint64_t (**)(void, uint64_t, OZRenderState *))(**(void **)(*((void *)a1 + 123) + 16)
                                                                       + 80))(*(void *)(*((void *)a1 + 123) + 16), a2, &v15);
  }
  else
  {
    int v11 = *(uint64_t (**)(OZCloneGenerator *, uint64_t, const OZRenderState *))(*(void *)a1 + 1520);
    return v11(a1, a2, a3);
  }
}

uint64_t non-virtual thunk to'OZCloneGenerator::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZCloneGenerator::getImageBoundsWithEffects((OZCloneGenerator *)(a1 - 6528), a2, a3);
}

uint64_t OZCloneGenerator::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1560))();
}

uint64_t non-virtual thunk to'OZCloneGenerator::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 6528) + 1560))();
}

uint64_t OZCloneGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v6, a3);
  *(_WORD *)&v6.var18 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, OZRenderState *))(*(void *)a1 + 1488))(a1, a2, &v6);
}

void OZCloneGenerator::getDimensions(OZCloneGenerator *this, float *a2, float *a3, const OZRenderState *a4)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  *a3 = 0.0;
  *a2 = 0.0;
  OZRenderState::OZRenderState(&v12, a4);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a4->var0;
  OZCloneGenerator::getTimeRemappedFrame(this, (CMTime *)&var0, (uint64_t)&v10);
  *(_OWORD *)&v12.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v10;
  v12.var0.int64_t var3 = v11;
  *(_WORD *)&v12.var18 = 0;
  if (SourceNode) {
    (*(void (**)(void *, float *, float *, OZRenderState *))(*(void *)SourceNode + 96))(SourceNode, a2, a3, &v12);
  }
}

void non-virtual thunk to'OZCloneGenerator::getDimensions(OZCloneGenerator *this, float *a2, float *a3, const OZRenderState *a4)
{
}

uint64_t OZCloneGenerator::hasDescendants(OZCloneGenerator *this)
{
  return 0;
}

uint64_t OZCloneGenerator::hasEnabledMasks(OZCloneGenerator *this)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (v3)
    {
      if ((*(uint64_t (**)(void *))(*(void *)v3 + 1864))(v3)) {
        return 1;
      }
    }
  }

  return OZElement::hasEnabledMasks((OZElement *)this);
}

void *OZCloneGenerator::shouldWrapTexture(OZCloneGenerator *this)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (result) {
      return (void *)((*(unsigned int (**)(void *))(*(void *)result + 1864))(result) ^ 1);
    }
  }
  double result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result) {
      return (void *)((*(unsigned int (**)(void *))(*(void *)result + 1864))(result) ^ 1);
    }
  }
  return result;
}

void *OZCloneGenerator::getMasks(OZCloneGenerator *a1, void *a2)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
  if (SourceNode)
  {
    if (v5) {
      (*(void (**)(void *, void *))(*(void *)v5 + 1904))(v5, a2);
    }
  }

  return OZElement::getMasks((uint64_t)a1, a2);
}

void OZCloneGenerator::setName(OZCloneGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18776), a2, 0);

  OZObjectManipulator::setName((OZCloneGenerator *)((char *)this + 16), a2, a3);
}

void non-virtual thunk to'OZCloneGenerator::setName(OZCloneGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18760), a2, 0);

  OZObjectManipulator::setName(this, a2, a3);
}

uint64_t OZCloneGenerator::numberOfDescendants(OZCloneGenerator *this)
{
  return 0;
}

void *OZCloneGenerator::getNaturalDuration@<X0>(OZCloneGenerator *this@<X0>, uint64_t a2@<X8>)
{
  double result = OZCloneGenerator::getSourceNode(this);
  if (result
  {
    double result = (*(void *(**)(void *__return_ptr))(*result + 1128))(v6);
    *(_OWORD *)a2 = v7;
    uint64_t v4 = v8;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    uint64_t v4 = *(void *)(v5 + 16);
  }
  *(void *)(a2 + 16) = v4;
  return result;
}

void *non-virtual thunk to'OZCloneGenerator::getNaturalDuration@<X0>(OZCloneGenerator *this@<X0>, uint64_t a2@<X8>)
{
  return OZCloneGenerator::getNaturalDuration((OZCloneGenerator *)((char *)this - 16), a2);
}

uint64_t OZCloneGenerator::getNaturalDurationFlags(OZCloneGenerator *this)
{
  return 6;
}

uint64_t non-virtual thunk to'OZCloneGenerator::getNaturalDurationFlags(OZCloneGenerator *this)
{
  return 6;
}

double OZCloneGenerator::getPixelAspectRatio(OZCloneGenerator *this)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 1.0;
  }
  if (!v2) {
    return 1.0;
  }
  uint64_t v3 = *(void (**)(void))(*(void *)v2 + 1328);

  v3();
  return result;
}

double OZCloneGenerator::getPixelAspectRatioRN(OZCloneGenerator *this)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 1.0;
  }
  if (!v2) {
    return 1.0;
  }
  uint64_t v3 = v2;
  if (v4)
  {
    OZRenderState v6 = *(void (**)(void *))(*(void *)v4 + 1328);
    v6(v4);
    return result;
  }
  if (!v5) {
    return 1.0;
  }
  uint64_t v8 = *(void (**)(void))(*(void *)v5 + 1368);

  v8();
  return result;
}

double non-virtual thunk to'OZCloneGenerator::getPixelAspectRatioRN(OZCloneGenerator *this)
{
  return OZCloneGenerator::getPixelAspectRatioRN((OZCloneGenerator *)((char *)this - 6528));
}

uint64_t OZCloneGenerator::parseEnd(OZCloneGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZCloneGenerator::parseEnd(OZCloneGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZCloneGenerator::didFinishLoadingIntoScene(OZElement *this)
{
  OZElement::didFinishLoadingIntoScene(this);
  int v2 = (OZRetimingUtil *)(*(uint64_t (**)(OZElement *))(*(void *)this + 640))(this);
  uint64_t v3 = (*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v6);
  return OZRetimingUtil::FixLoadedRetimingState(v2, (OZChannelObjectRoot *)&v6, v4);
}

uint64_t non-virtual thunk to'OZCloneGenerator::didFinishLoadingIntoScene(OZCloneGenerator *this)
{
  return OZCloneGenerator::didFinishLoadingIntoScene((OZElement *)((char *)this - 16));
}

uint64_t OZCloneGenerator::openMedia(OZCloneGenerator *this)
{
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 104);

  return v3();
}

uint64_t OZCloneGenerator::prerollBegin(OZCloneGenerator *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode) {
    return 0;
  }
  if (!v11) {
    return 0;
  }
  OZRenderState v12 = v11;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v15);
  uint64_t v13 = (*(uint64_t (**)(void *, unsigned char *, uint64_t, uint64_t, double))(*(void *)v12 + 112))(v12, v15, a3, a4, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v13;
}

void sub_1B7CEC6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZCloneGenerator::prerollEnd(OZCloneGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  double TimeRemappedParams = OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v12);
  uint64_t v10 = (*(uint64_t (**)(void *, unsigned char *, PMFrameRequest *, double))(*(void *)v8 + 120))(v8, v12, a3, TimeRemappedParams);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v12);
  return v10;
}

void sub_1B7CEC7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZCloneGenerator::setRate(OZCloneGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode) {
    return 0;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v13);
  uint64_t v11 = (*(uint64_t (**)(void *, unsigned char *, PMFrameRequest *, double))(*(void *)v10 + 128))(v10, v13, a3, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v13);
  return v11;
}

void sub_1B7CEC8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZCloneGenerator::scheduleTokens(OZCloneGenerator *a1, const OZRenderParams *a2, long long **a3, uint64_t a4, uint64_t a5)
{
  OZSceneNode::scheduleTokens((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode) {
    return 0;
  }
  if (!v11) {
    return 0;
  }
  OZRenderState v12 = v11;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v16);
  memset(v15, 0, sizeof(v15));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v15, a4);
  uint64_t v13 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t, uint64_t))(*(void *)v12 + 136))(v12, v16, v15, a4, a5);
  CMTime v17 = (void **)v15;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v16);
  return v13;
}

void sub_1B7CECA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::hintTokensWillImage(OZCloneGenerator *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode) {
    return 0;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v14);
  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v13, a4);
  uint64_t v11 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t))(*(void *)v10 + 144))(v10, v14, v13, a4);
  OZRenderState v15 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v14);
  return v11;
}

void sub_1B7CECBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::getTokensImage(OZCloneGenerator *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  Sourceunint64_t Node = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode) {
    return 0;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v14);
  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v13, a4);
  uint64_t v11 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t))(*(void *)v10 + 152))(v10, v14, v13, a4);
  OZRenderState v15 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v14);
  return v11;
}

void sub_1B7CECD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void OZCloneGenerator::remapTokens(OZCloneGenerator *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  OZSceneNode::remapTokens((uint64_t)a1, a2, (uint64_t)a3, a4);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = v7 + 48 * v8;
      uint64_t v13 = *(void *)(v10 + 24);
      OZRenderState v12 = (uint64_t *)(v10 + 24);
      uint64_t v11 = v13;
      if (v12[1] != v13)
      {
        uint64_t v14 = 0;
        unsigned int v15 = 1;
        do
        {
          uint64_t v16 = 3 * v14;
          CMTime v23 = *(CMTime *)(v11 + 24 * v14);
          long long v21 = 0uLL;
          uint64_t v22 = 0;
          CMTime v20 = v23;
          OZCloneGenerator::getTimeRemappedFrame(a1, &v20, (uint64_t)&v21);
          uint64_t v17 = *(void *)(*a3 + 48 * v8 + 24) + 8 * v16;
          long long v18 = v21;
          *(void *)(v17 + 16) = v22;
          *(_OWORD *)uint64_t v17 = v18;
          uint64_t v14 = v15;
          uint64_t v11 = *v12;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3) > v15++);
        uint64_t v7 = *a3;
        uint64_t v6 = a3[1];
      }
      uint64_t v8 = ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) > v9);
  }
}

void *OZCloneGenerator::pruneTokensAtTime(OZCloneGenerator *this, CMTime *a2, const char *a3)
{
  CMTime v9 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v9, a3);
  double result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
    {
      long long v7 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 160))(result, &v7, a3);
    }
  }
  return result;
}

void *OZCloneGenerator::pruneTokensExceptAtTime(OZCloneGenerator *this, CMTime *a2, const char *a3)
{
  CMTime v9 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v9, a3);
  double result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
    {
      long long v7 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 168))(result, &v7, a3);
    }
  }
  return result;
}

void *OZCloneGenerator::pruneAllTokens(OZCloneGenerator *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  double result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 176);
      return (void *)v4();
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  double result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (v3) {
      return v3 + 18264;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getTimeScale(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getTimeReverse(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getTimeRemap(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getRetimeFrame(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getRetimeFrameCache(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getEndCondition(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getLoopDuration(v3);
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  int v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }

  return OZCloneGenerator::getDurationCache(v3);
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
}

void sub_1B7CED7C4(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(OZChan3DEngineSceneFileRefWithPicker_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChan3DEngineSceneFileRefWithPicker_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChan3DEngineSceneFileRefWithPicker_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChan3DEngineSceneFileRefWithPicker_Factory::_instance;
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7CED8C4(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, const OZChan3DEngineSceneFileRefWithPicker *a2, OZChannelFolder *a3)
{
}

void sub_1B7CED958(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChan3DEngineSceneFileRefWithPicker::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = *(void *)((*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 256))(a2) + 8);
  long long v6 = xmmword_1B8380D70;
  uint64_t result = OZFactory::isKindOfClass(v4, (int32x4_t *)&v6);
  if (result) {
    return OZChanObjectRefWithPicker::canReferenceObject(this, a2);
  }
  return result;
}

void std::__call_once_param<std::tuple<OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7CEDA4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker_Factory::OZChan3DEngineSceneFileRefWithPicker_Factory(OZChan3DEngineSceneFileRefWithPicker_Factory *this)
{
  long long v3 = xmmword_1B8381310;
  long long v4 = xmmword_1B8381320;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11620C0;
  *((void *)this + 16) = &unk_1F1162190;
}

void sub_1B7CEDB1C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker_Factory::create(OZChan3DEngineSceneFileRefWithPicker_Factory *this, const PCString *a2)
{
}

void sub_1B7CEDB90(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker_Factory::createCopy(OZChan3DEngineSceneFileRefWithPicker_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7CEDC48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker_Factory::createChannelCopy(OZChan3DEngineSceneFileRefWithPicker_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7CEDD00(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t **OZRenderParams::setFFInputPixelTransform(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  unsigned int v9 = a2;
  uint64_t v4 = *(void *)(a1 + 1240);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  uint64_t v10 = &v9;
  uint64_t result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v4 + 64), &v9, (uint64_t)&std::piecewise_construct, &v10);
  long long v6 = result + 5;
  if (result + 5 != a3)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v6[j] = a3[j];
      v6 += 4;
      a3 += 4;
    }
  }
  return result;
}

uint64_t OZXGetFrameAsRenderGraph(void *a1, const CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8, void *a9, HGRenderer *a10, METimeRemap **a11)
{
  RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
  double v49 = RenderEngineMutex;
  PCMutex::lock(RenderEngineMutex);
  char v75 = 1;
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v73);
  OZRenderParams::OZRenderParams((OZRenderParams *)v57);
  if (v66 != a8)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      CMTime v20 = &v66[i];
      long long v21 = *(_OWORD *)&a8[i + 16];
      _OWORD *v20 = *(_OWORD *)&a8[i];
      v20[1] = v21;
    }
  }
  v66[128] = 1;
  uint64_t v22 = *(void *)(a7 + 64);
  uint64_t v23 = *(void *)(a7 + 72);
  if (a1)
  {
    if (*a1)
    {
      uint64_t v24 = *(void *)(*a1 + 24);
      if (v24) {
        OZScene::setRawWorkingGamut(v24, *(unsigned __int8 *)(a7 + 80));
      }
    }
  }
  CMTime v56 = *a2;
  OZX_prepareForRender(a1, &v56, *(_DWORD *)(a7 + 48), *(_DWORD *)(a7 + 56) != 0, *(_DWORD *)(a7 + 52), *(float *)a7, *(float *)(a7 + 4), v22, v23, *(unsigned char *)(a7 + 80), *(_DWORD *)(a7 + 84), 1, 1, 0, (HGComputeDeviceManager *)v57);
  OZPlaybackEngine::OZPlaybackEngine(&v55, 1);
  OZPlaybackEngine::operator=((double *)v67, &v55);
  int v61 = *(_DWORD *)(a7 + 56);
  long long v59 = 0u;
  long long v60 = 0u;
  LiRenderingTechnology::setRasterizeEdges((uint64_t)&v72, 0);
  OZRenderParams::setTextRenderQuality((uint64_t)v57, 0);
  FxColorDescription v50 = a1;
  *(void *)&v67[13] = a3;
  v52[0] = 0;
  if (*(_DWORD *)(a5 + 16))
  {
    unsigned int v25 = 0;
    do
    {
      *(void *)&v54[0].f64[0] = v52;
      char v26 = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a5, v52, (uint64_t)&std::piecewise_construct, v54);
      LODWORD(v53[0]) = v25;
      *(void *)&v54[0].f64[0] = v53;
      OZRenderState v27 = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v68, (unsigned int *)v53, (uint64_t)&std::piecewise_construct, v54);
      long long v28 = *(_OWORD *)(v26 + 5);
      *(_OWORD *)(v27 + 7) = *(_OWORD *)(v26 + 7);
      *(_OWORD *)(v27 + 5) = v28;
      unsigned int v25 = v52[0] + 1;
      v52[0] = v25;
    }
    while (v25 < *(_DWORD *)(a5 + 16));
  }
  v52[0] = 0;
  if (*(_DWORD *)(a4 + 16))
  {
    unsigned int v29 = 0;
    do
    {
      *(void *)&v54[0].f64[0] = v52;
      int v30 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a4, v52, (uint64_t)&std::piecewise_construct, (unsigned int **)v54)+ 8);
      LODWORD(v53[0]) = v29;
      *(void *)&v54[0].f64[0] = v53;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v69, (unsigned int *)v53, (uint64_t)&std::piecewise_construct, (unsigned int **)v54)+ 8) = v30;
      *(void *)&v54[0].f64[0] = v52;
      long long v31 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a4, v52, (uint64_t)&std::piecewise_construct, (unsigned int **)v54);
      unsigned int v32 = v52[0];
      LODWORD(v53[0]) = *((_DWORD *)v31 + 8);
      *(void *)&v54[0].f64[0] = v53;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v70, (unsigned int *)v53, (uint64_t)&std::piecewise_construct, (unsigned int **)v54)+ 8) = v32;
      unsigned int v29 = v52[0] + 1;
      v52[0] = v29;
    }
    while (v29 < *(_DWORD *)(a4 + 16));
  }
  LODWORD(v53[0]) = 0;
  if (*(_DWORD *)(a6 + 16))
  {
    unsigned int v33 = 0;
    do
    {
      *(void *)&v54[0].f64[0] = v53;
      long long v34 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a6, (unsigned int *)v53, (uint64_t)&std::piecewise_construct, v54);
      OZRenderParams::setFFInputPixelTransform((uint64_t)v57, v33, v34 + 5);
      unsigned int v33 = LODWORD(v53[0]) + 1;
      LODWORD(v53[0]) = v33;
    }
    while (v33 < *(_DWORD *)(a6 + 16));
  }
  *(double *)&v70[3] = *(float *)(a7 + 8);
  if (CGRectIsEmpty(*(CGRect *)(a7 + 16)))
  {
    OZRenderParams::getROI((OZRenderParams *)v57, v54);
    float v35 = 0.0;
    float v36 = 0.0;
    if (*(float *)a7 != 0.0) {
      float v36 = fabsf(*(float *)(a7 + 8) / *(float *)a7);
    }
    v37.f64[0] = v36;
    float v38 = *(float *)(a7 + 4);
    if (v38 != 0.0) {
      float v35 = fabsf(*(float *)(a7 + 8) / v38);
    }
    int32x2_t v64 = 0;
    v39.i64[0] = SLODWORD(v54[0].f64[1]);
    v39.i64[1] = SHIDWORD(v54[0].f64[1]);
    v37.f64[1] = v35;
    int32x2_t v65 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(v37, vcvtq_f64_s64(v39))));
  }
  else
  {
    float64x2_t v40 = *(float64x2_t *)(a7 + 16);
    int32x2_t v41 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v40, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    *(int32x2_t *)&v40.f64[0] = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v40, *(float64x2_t *)(a7 + 32))))), v41);
    int32x2_t v64 = v41;
    int32x2_t v65 = *(int32x2_t *)&v40.f64[0];
  }
  OZProcessControl::OZProcessControl((OZProcessControl *)v54);
  OZProcessControl::setHeliumRenderer((uint64_t)v54, a10);
  double v58 = v54;
  if (v50)
  {
    long long v42 = (int (*)(void))v50[2];
    if (v42) {
      OZProcessControl::setProgressHandler((uint64_t)v54, v42);
    }
    if (*v50)
    {
      uint64_t v43 = *(OZScene **)(*v50 + 24);
      if (v43)
      {
        uint64_t v44 = *((void *)v43 + 43);
        v45.i64[0] = (int)v44;
        v45.i64[1] = SHIDWORD(v44);
        long long v62 = 0u;
        float64x2_t v63 = vcvtq_f64_s64(v45);
        long long v59 = 0u;
        long long v60 = 0u;
        char v71 = *(unsigned char *)(a7 + 88);
        if (OZScene::getActiveCamera(v43, a2)) {
          operator new();
        }
      }
    }
    else
    {
      uint64_t v43 = 0;
    }
    OZRenderParams::OZRenderParams((OZRenderParams *)v51, (const OZRenderParams *)v57);
    OZXGetRenderGraph(v43, (uint64_t)v51, a9, (GLRenderer *)v50[1], (PCString *)a10, (CGColorSpace **)v53);
    uint64_t v46 = *a11;
    CMTime v47 = v53[0];
    if (*a11 == v53[0])
    {
      if (v46) {
        (*(void (**)(METimeRemap *))(v46->_introDuration.value + 24))(v46);
      }
    }
    else
    {
      if (v46)
      {
        (*(void (**)(METimeRemap *))(v46->_introDuration.value + 24))(v46);
        CMTime v47 = v53[0];
      }
      *a11 = v47;
      v53[0] = 0;
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)v51);
  }
  OZProcessControl::~OZProcessControl((OZProcessControl *)v54);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v57);
  PCAutoreleasePool::~PCAutoreleasePool(&v73);
  if (v49) {
    PCMutex::unlock(v49);
  }
  return 0;
}

void sub_1B7CEE430(void *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount(v2);
  OZProcessControl::~OZProcessControl((OZProcessControl *)&STACK[0x610]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x668]);
  PCAutoreleasePool::~PCAutoreleasePool((id *)(v3 - 120));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(void *)(v3 - 112)) {
    JUMPOUT(0x1B7CEE408);
  }
  JUMPOUT(0x1B7CEE400);
}

void sub_1B7CEE544(_Unwind_Exception *a1)
{
  PCConsoleLock::~PCConsoleLock((PCMutex **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZRigWidget,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7CEE600(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXSetRigValueWithName(void *a1, PCString *a2, double a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  OZScene::begin_t<OZRigWidget,false,true>(*(uint64_t **)(*(void *)a1 + 24), (uint64_t)v12);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  while (v12[0] != v3 + 1200)
  {
    if (v12[0] == v12[2] || (long long v6 = *(const void **)(v12[0] + 16)) == 0) {
      long long v7 = 0;
    }
    else {
    unsigned int Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v7 + 2));
    }
    if (!PCString::compare(Name, a2))
    {
      (*(void (**)(void *, void, void, double))(*v7[136] + 712))(v7[136], MEMORY[0x1E4F1FA48], 0, a3);
      break;
    }
    OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
  return 0;
}

void sub_1B7CEE854(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CEE834);
}

CFComparisonResult OZXSetPublishedTextSize(void *a1, PCString *a2, float a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unsigned int v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    long long v6 = (OZPublishSettings *)(v3 + 720);
    long long v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10)
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13) {
              (*(void (**)(void *, float))(*(void *)v13 + 112))(v13, a3);
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B7CEEA0C(void *a1)
{
}

CFComparisonResult __OZXGetPublishedChannel(void *a1, const PCString *a2, OZChannel **a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t v4 = *(OZChannelBase ****)(v3 + 864);
  if (v4)
  {
    for (uint64_t i = *v4; i != v4[1]; ++i)
    {
      uint64_t v8 = *i;
      if (*i)
      {
        if (!OZChannelBase::testFlag(v8, 2))
        {
          if (v9)
          {
            CFComparisonResult result = PCString::compare(&v9->var4, a2);
            if (!result)
            {
              *a3 = v9;
              return result;
            }
          }
        }
      }
      else
      {
        OZChannelBase::testFlag(0, 2);
      }
    }
  }
  return 11;
}

CFComparisonResult OZXSetPublishedTextScale(void *a1, PCString *a2, float a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unsigned int v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    long long v6 = (OZPublishSettings *)(v3 + 720);
    long long v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10)
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13) {
              (*(void (**)(void *, float))(*(void *)v13 + 104))(v13, a3);
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B7CEECC4(void *a1)
{
}

CFComparisonResult OZXSetPublishedTextLocale(void *a1, PCString *a2, NSString *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unsigned int v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    long long v6 = (OZPublishSettings *)(v3 + 720);
    long long v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10)
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13) {
              (*(void (**)(void *, NSString *))(*(void *)v13 + 136))(v13, a3);
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B7CEEE5C(void *a1)
{
}

CFComparisonResult OZXSetPublishedTextFont(void *a1, PCString *a2, NSString *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t v17 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v17);
  if (!v5)
  {
    long long v6 = v17;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v3 + 720), (OZChannelBase *)v17);
    uint64_t v8 = TargetChannelForProxy;
    if (TargetChannelForProxy && TargetChannelForProxy != (OZChannelBase *)v6)
    {
      if (v10)
      {
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (!ObjectManipulator) {
          return v5;
        }
        if (!v12) {
          return v5;
        }
      }
      else
      {
        if (!v15) {
          return v5;
        }
        uint64_t v16 = (void *)OZChannelBase::getObjectManipulator(v15);
        if (v16) {
        uint64_t v13 = (void *)(*(uint64_t (**)(void *))(*(void *)v16 + 280))(v16);
        }
      }
      if (v13) {
        (*(void (**)(void *, NSString *))(*(void *)v13 + 96))(v13, a3);
      }
    }
  }
  return v5;
}

void sub_1B7CEF09C(void *a1)
{
}

uint64_t OZXSetPublishedRGBColor(void *a1, PCString *a2, double a3, double a4, double a5)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  uint64_t v6 = *(void *)(v5 + 864);
  if (!v6) {
    return 11;
  }
  long long v7 = *(OZChannelBase ***)v6;
  if (*(void *)v6 == *(void *)(v6 + 8)) {
    return 11;
  }
  BOOL v9 = (OZPublishSettings *)(v5 + 720);
  float v10 = a3;
  float v11 = a4;
  float v12 = a5;
  uint64_t v13 = 11;
  do
  {
    uint64_t v14 = *v7;
    if (*v7) {
    else
    }
      unsigned int v15 = 0;
    BOOL v16 = OZChannelBase::testFlag(v14, 2);
    if (v15) {
      char v17 = v16;
    }
    else {
      char v17 = 1;
    }
    if ((v17 & 1) == 0 && !PCString::compare(&v15->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v9, v15);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v14)
        {
          if (v19)
          {
            CMTime v20 = v19;
            DeviceRGB = CGColorSpaceCreateDeviceRGB();
            PCColor::PCColor(&v23, v10, v11, v12, 1.0, DeviceRGB);
            (*(void (**)(void *, void, PCColor *, void))(*(void *)v20 + 840))(v20, MEMORY[0x1E4F1FA48], &v23, 0);
            CGColorSpaceRelease(DeviceRGB);
            PCCFRef<CGColorSpace *>::~PCCFRef(&v23.var1._obj);
            uint64_t v13 = 0;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != *(OZChannelBase ***)(v6 + 8));
  return v13;
}

uint64_t OZXSetPublishedPopup(void *a1, PCString *a2, unsigned int Tag)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t v4 = *(void *)(v3 + 864);
  if (!v4) {
    return 11;
  }
  uint64_t v5 = *(OZChannelBase ***)v4;
  if (*(void *)v4 == *(void *)(v4 + 8)) {
    return 11;
  }
  uint64_t v8 = (OZPublishSettings *)(v3 + 720);
  uint64_t v9 = 11;
  do
  {
    float v10 = *v5;
    if (*v5) {
    else
    }
      float v11 = 0;
    BOOL v12 = OZChannelBase::testFlag(v10, 2);
    if (v11) {
      char v13 = v12;
    }
    else {
      char v13 = 1;
    }
    if ((v13 & 1) == 0 && !PCString::compare(&v11->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v8, v11);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v10)
        {
          if (v15)
          {
            BOOL v16 = v15;
            if (Tag < OZChannelEnum::getNumberOfStrings(v15))
            {
              if (*((void *)v16 + 22) != *((void *)v16 + 21)) {
                signed int Tag = OZChannelEnum::getTag(v16, Tag);
              }
              (*(void (**)(OZChannelEnum *, void, void, double))(*(void *)v16 + 712))(v16, MEMORY[0x1E4F1FA48], 0, (double)Tag);
              uint64_t v9 = 0;
            }
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != *(OZChannelBase ***)(v4 + 8));
  return v9;
}

uint64_t OZXSetPublishedPosition(void *a1, PCString *a2, double a3, double a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = *(void *)(v4 + 864);
  if (!v5) {
    return 11;
  }
  uint64_t v6 = *(OZChannelBase ***)v5;
  if (*(void *)v5 == *(void *)(v5 + 8)) {
    return 11;
  }
  float v10 = (OZPublishSettings *)(v4 + 720);
  uint64_t v11 = 11;
  do
  {
    BOOL v12 = *v6;
    if (*v6) {
    else
    }
      char v13 = 0;
    BOOL v14 = OZChannelBase::testFlag(v12, 2);
    if (v13) {
      char v15 = v14;
    }
    else {
      char v15 = 1;
    }
    if ((v15 & 1) == 0 && !PCString::compare(&v13->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v10, v13);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v12)
        {
          if (v17)
          {
            OZChannelPosition::setPosition(v17, MEMORY[0x1E4F1FA48], a3, a4);
            uint64_t v11 = 0;
          }
        }
      }
    }
    ++v6;
  }
  while (v6 != *(OZChannelBase ***)(v5 + 8));
  return v11;
}

uint64_t OZXSetPublishedCheckBox(void *a1, PCString *a2, unsigned int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t v4 = *(void *)(v3 + 864);
  if (!v4) {
    return 11;
  }
  uint64_t v5 = *(OZChannelBase ***)v4;
  if (*(void *)v4 == *(void *)(v4 + 8)) {
    return 11;
  }
  double v7 = (double)a3;
  uint64_t v8 = (OZPublishSettings *)(v3 + 720);
  uint64_t v9 = 11;
  do
  {
    float v10 = *v5;
    if (*v5) {
    else
    }
      uint64_t v11 = 0;
    BOOL v12 = OZChannelBase::testFlag(v10, 2);
    if (v11) {
      char v13 = v12;
    }
    else {
      char v13 = 1;
    }
    if ((v13 & 1) == 0 && !PCString::compare(&v11->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v8, v11);
      char v15 = TargetChannelForProxy;
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v10)
        {
          if (v16)
          {
            (*(void (**)(void *, void, void, double))(*(void *)v16 + 712))(v16, MEMORY[0x1E4F1FA48], 0, v7);
            uint64_t v9 = 0;
          }
          else if (v17)
          {
            (*(void (**)(void *, void, void))(*(void *)v17 + 104))(v17, a3, 0);
            uint64_t v9 = 0;
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != *(OZChannelBase ***)(v4 + 8));
  return v9;
}

uint64_t OZXSetSeedValue(void *a1, unsigned int a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  char v2 = *(OZScene **)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  OZScene::begin(*(OZScene **)(*(void *)a1 + 24), (uint64_t)v16);
  OZScene::end_sel(v2, (uint64_t)v14);
  while (v16[0] != v14[0])
  {
    if (v16[0] != v16[2])
    {
      uint64_t v4 = *(void *)(v16[0] + 16);
      if (v4)
      {
        uint64_t v5 = v4 + 1000;
        for (uint64_t i = *(void *)(v4 + 1008); i != v5; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(i + 16) + 312))(*(void *)(i + 16));
          if (v7)
          {
            uint64_t v8 = *(OZChannelBase ****)(v7 + 112);
            if (v8)
            {
              for (uint64_t j = *v8; j != v8[1]; ++j)
              {
                if (!OZChannelBase::testFlag(*j, 2))
                {
                  float v10 = *j;
                  unint64_t var1 = (unint64_t)(*j)->var1;
                  long long v18 = xmmword_1B8378D00;
                  if (OZFactory::isKindOfClass(var1, (int32x4_t *)&v18))
                  {
                    (*(void (**)(double))(v12 + 712))((double)a2);
                  }
                }
              }
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v16);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v17);
  return 0;
}

void sub_1B7CEFB20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CEFAF8);
}

uint64_t OZXSetBorderScaleAndTranslation(void *a1, double a2, double a3, double a4, double a5)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v5 = *(OZScene **)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  OZScene::begin(*(OZScene **)(*(void *)a1 + 24), (uint64_t)v17);
  OZScene::end_sel(v5, (uint64_t)v15);
  float v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while (v17[0] != v15[0])
  {
    if (v17[0] != v17[2])
    {
      uint64_t v11 = *(const void **)(v17[0] + 16);
      if (v11)
      {
        if (v12)
        {
          char v13 = (OZTransformNode *)(v12 + 200);
          OZTransformNode::setScale((OZTransformNode *)(v12 + 200), a2, a3, 1.0, v10);
          OZTransformNode::setTranslation(v13, a4, a5, 0.0, v10);
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
  return 0;
}

void sub_1B7CEFCD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CEFCB0);
}

uint64_t OZXSetCutawayFadeInOut(void *a1, const CMTime *a2, const CMTime *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  OZScene::begin(*(OZScene **)(*(void *)a1 + 24), (uint64_t)v22);
  OZScene::end_sel(v3, (uint64_t)v20);
  while (v22[0] != v20[0])
  {
    if (v22[0] != v22[2])
    {
      uint64_t v6 = *(const void **)(v22[0] + 16);
      if (v6)
      {
        if (v7)
        {
          uint64_t v8 = (OZChannel *)(v7 + 6680);
          if (OZChannel::isAnimated((OZChannel *)(v7 + 6680)))
          {
            CMTime time = *a2;
            if (CMTimeGetSeconds(&time) > 0.0)
            {
              FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe(v8);
              OZChannel::setKeyframeValue(v8, FirstEnabledKeyframe, 0.0);
              uint64_t NextEnabledKeyframe = OZChannel::getNextEnabledKeyframe(v8, FirstEnabledKeyframe);
              (*((void (**)(OZChannel *, uint64_t, const CMTime *, void, void))v8->var0 + 105))(v8, NextEnabledKeyframe, a2, 0, 0);
            }
            CMTime v18 = *a3;
            if (CMTimeGetSeconds(&v18) > 0.0)
            {
              double v16 = 0.0;
              LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v8);
              OZChannel::setKeyframeValue(v8, LastEnabledKeyframe, 0.0);
              OZChannel::getKeyframe(v8, LastEnabledKeyframe, &v17, &v16);
              uint64_t PreviousEnabledKeyframe = OZChannel::getPreviousEnabledKeyframe(v8, LastEnabledKeyframe);
              CMTime v25 = v17;
              CMTime v24 = *a3;
              double v13 = PC_CMTimeSaferSubtract(&v25, &v24, (uint64_t)v15);
              (*((void (**)(OZChannel *, uint64_t, unsigned char *, void, void, double))v8->var0 + 105))(v8, PreviousEnabledKeyframe, v15, 0, 0, v13);
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  return 0;
}

void sub_1B7CEFFAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

__n128 OZXGetPosterFrameTime(void *a1, CMTime *a2)
{
  if (a1)
  {
    if (a2)
    {
      if (*(void *)a1)
      {
        uint64_t v3 = *(void *)(*(void *)a1 + 24);
        if (v3)
        {
          uint64_t v4 = *(OZTimeMarkerSet **)(v3 + 1136);
          CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          for (uint64_t i = OZTimeMarkerSet::findNextMarker(v4, &v9);
                (char *)v4 + 16 != i;
                uint64_t i = OZTimeMarkerSet::findNextMarker(v4, &v8))
          {
            uint64_t v7 = (__n128 *)(i + 40);
            if (*((_DWORD *)i + 27) == 8)
            {
              __n128 result = *v7;
              a2->CMTimeEpoch epoch = *((void *)i + 7);
              *(__n128 *)&a2->int64_t value = result;
              return result;
            }
            *(__n128 *)&v8.int64_t value = *v7;
            v8.CMTimeEpoch epoch = *((void *)i + 7);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B7CF00D8(void *a1)
{
}

uint64_t OZXGetTopLevelGroupID(void *a1, unsigned int *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 120))(*(void *)(*(void *)a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v2);
  if (v4 == v5)
  {
LABEL_7:
    uint64_t v8 = 13;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v4 + 16);
      unint64_t v7 = *(void *)(v6 + 8);
      int32x4_t v23 = (int32x4_t)xmmword_1B8380BF0;
      if (OZFactory::isKindOfClass(v7, &v23)) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = 0;
    *a2 = *(_DWORD *)(v6 + 80);
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  if (OZHostApplicationDelegateHandler::wantsToAssertThatTopLevelGroupSpansEntireScene(HostApplicationDelegate))
  {
    unint64_t Node = OZScene::getNode((OZScene *)v2, *a2);
    CMTimeEpoch v12 = *(void *)(v2 + 1368);
    int32x4_t v23 = *(int32x4_t *)(v2 + 1352);
    *(_OWORD *)&v25.int64_t value = *(_OWORD *)(v2 + 1376);
    CMTimeEpoch v13 = *(void *)(v2 + 1392);
    CMTimeEpoch v24 = v12;
    v25.CMTimeEpoch epoch = v13;
    __n128 v21 = 0uLL;
    CMTimeEpoch v22 = 0;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v2 + 336), &v21);
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    *(int32x4_t *)&v28.int64_t value = v23;
    v28.CMTimeEpoch epoch = v24;
    CMTime v27 = v25;
    PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v26);
    CMTime v28 = v26;
    *(__n128 *)&v27.int64_t value = v21;
    v27.CMTimeEpoch epoch = v22;
    PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v19);
    CMTimeEpoch v18 = v24;
    uint64_t v14 = Node[2];
    Node += 2;
    int32x4_t v17 = v23;
    (*(void (**)(void *, int32x4_t *, uint64_t, uint64_t, uint64_t))(v14 + 104))(Node, &v17, 1, 1, 1);
    uint64_t v16 = v20;
    long long v15 = v19;
    (*(void (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(*Node + 104))(Node, &v15, 1, 1, 1);
  }
  return v8;
}

void sub_1B7CF034C(void *a1)
{
}

uint64_t OZXGetObjectBounds(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v5 = *(OZScene **)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  unint64_t Node = OZScene::getNode(v5, a3);
  if (!Node) {
    return 11;
  }
  if (!v10) {
    return 11;
  }
  uint64_t v11 = v10;
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)a2;
  v13.var0.int64_t var3 = *(void *)(a2 + 16);
  v13.var20 = a4 & 1;
  v13.var26 = (a4 & 4) != 0;
  v13.var27 = (a4 & 2) != 0;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(void *)v11 + 1488))(v11, a5, &v13);
  return 0;
}

uint64_t OZXGetWorldToFilmTransform(uint64_t *a1, const CMTime *a2, METimeRemap **a3)
{
  if (!a1) {
    return 7;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    return 7;
  }
  if (OZScene::getActiveCamera(*(OZScene **)(v3 + 24), a2)) {
    operator new();
  }
  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)v13);
  float64x2_t v12 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(v4 + 344)));
  LiSimpleCamera::setFilmback(v13, (__n128 *)&v12);
  LiSimpleCamera::setPixelAspectRatio((uint64_t)v13, *(double *)(v4 + 384));
  OZScene::calcWorldToFilmSpaceMatrixForCamera((OZScene *)v4, (const LiCamera *)v13, v11);
  if (v11 != (_OWORD *)a3)
  {
    for (unint64_t i = 0; i != 128; i += 32)
    {
      CMTime v9 = &a3[i / 8];
      long long v10 = v11[i / 0x10 + 1];
      *(_OWORD *)CMTime v9 = v11[i / 0x10];
      *((_OWORD *)v9 + OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20440), 0x20000, 1) = v10;
    }
  }
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v13, v7);
  return 0;
}

void sub_1B7CF0690(void *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t OZXGetObjectTransform(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v5 = *(OZScene **)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  unint64_t Node = OZScene::getNode(v5, a4);
  if (!Node) {
    return 11;
  }
  if (!v10) {
    return 11;
  }
  uint64_t v11 = v10;
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)a2;
  v13.var0.int64_t var3 = *(void *)(a2 + 16);
  v13.BOOL var16 = (a3 & 2) != 0;
  v13.var8 = a3 & 1;
  v13.var4 = a3 & 4;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(void *)v11 + 1256))(v11, a5, &v13);
  return 0;
}

uint64_t OZXSetObjectTransform(uint64_t a1, const CMTime *a2, unsigned int a3, long long *a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  unint64_t Node = OZScene::getNode(v4, a3);
  if (!Node) {
    return 11;
  }
  if (!v8) {
    return 11;
  }
  CMTime v9 = v8;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  int v14 = 4;
  long long v15 = 0u;
  long long v16 = 0u;
  double v17 = 0.0;
  if (!PCMatrix44Tmpl<double>::getTransformation(a4, (uint64_t)&v11)) {
    return 11;
  }
  OZTransformNode::setTranslation(v9, *(double *)&v11, *((double *)&v11 + 1), *(double *)&v12, a2);
  OZTransformNode::setRotation(v9, *(double *)&v15, *((double *)&v15 + 1), *(double *)&v16, a2);
  OZTransformNode::setScale(v9, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1), a2);
  OZTransformNode::setShear(v9, *((double *)&v16 + 1), v17, a2);
  return 0;
}

uint64_t OZXGetObjectOpacity(void *a1, const CMTime *a2, unsigned int a3, double *a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  unint64_t Node = OZScene::getNode(v4, a3);
  if (!Node) {
    return 11;
  }
  if (!v8) {
    return 11;
  }
  OZElement::getOpacity(v8, a2, 0);
  uint64_t result = 0;
  *(void *)a4 = v10;
  return result;
}