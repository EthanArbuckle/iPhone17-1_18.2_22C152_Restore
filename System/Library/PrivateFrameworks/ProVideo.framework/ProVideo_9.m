_DWORD *std::__tree<std::__value_type<PCUUID,OZFactory *>,std::__map_value_compare<PCUUID,std::__value_type<PCUUID,OZFactory *>,std::less<PCUUID>,true>,std::allocator<std::__value_type<PCUUID,OZFactory *>>>::__lower_bound<PCUUID>(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  void *v14;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    do
    {
      v8 = a3[8];
      v9 = v8 >= v5;
      if (v8 == v5)
      {
        v10 = a3[9];
        v9 = v10 >= v6;
        if (v10 == v6)
        {
          v11 = a3[10];
          v9 = v11 >= v7;
          if (v11 == v7) {
            v9 = a3[11] >= a2[3];
          }
        }
      }
      v12 = !v9;
      v13 = v12 == 0;
      if (v12) {
        v14 = a3 + 2;
      }
      else {
        v14 = a3;
      }
      if (v13) {
        result = a3;
      }
      a3 = (_DWORD *)*v14;
    }
    while (*v14);
  }
  return result;
}

void sub_1B79779A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void sub_1B7977AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7977BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7977CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZFactory::OZFactory(uint64_t a1, _OWORD *a2, _OWORD *a3, int a4)
{
  *(void *)a1 = &unk_1F1100390;
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 24) = *a3;
  *(void *)(a1 + 48) = 0;
  PCMutex::PCMutex((PCMutex *)(a1 + 56));
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void sub_1B7977E2C(_Unwind_Exception *a1)
{
  PCMutex::~PCMutex(v1);
  _Unwind_Resume(a1);
}

void OZFactory::~OZFactory(OZFactory *this)
{
  *(void *)this = &unk_1F1100390;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 56));
}

uint64_t OZFactory::needsSaving(OZFactory *this, const OZFactory *a2)
{
}

uint64_t anonymous namespace'::getThreadSpecificForFactory(_anonymous_namespace_ *this, const OZFactory *a2)
{
  if (!v3) {
    operator new();
  }
  v4 = (void *)v3[1];
  if (!v4) {
    goto LABEL_14;
  }
  v5 = v3 + 1;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= (unint64_t)this;
    if (v6 >= (unint64_t)this) {
      v8 = v4;
    }
    else {
      v8 = v4 + 1;
    }
    if (v7) {
      v5 = v4;
    }
    v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v3 + 1 || v5[4] > (unint64_t)this) {
LABEL_14:
  }
    operator new();
  return v5[5];
}

unsigned char *OZFactory::setNeedsSaving(OZFactory *this, const OZFactory *a2)
{
  char v2 = (char)a2;
  unsigned char *result = v2;
  return result;
}

uint64_t OZFactory::fileRefID(OZFactory *this, const OZFactory *a2)
{
}

uint64_t OZFactory::setFileRefID(OZFactory *this, const OZFactory *a2)
{
  int v2 = (int)a2;
  *(_DWORD *)(result + 4) = v2;
  return result;
}

unint64_t OZFactory::getSuperFactory(OZFactory *this)
{
  v1 = (unint64_t *)((char *)this + 48);
  if (!atomic_load((unint64_t *)this + 6))
  {
    v8 = (PCMutex *)((char *)this + 56);
    v4 = (OZFactories *)PCMutex::lock((PCMutex *)((char *)this + 56));
    if (!atomic_load(v1))
    {
      uint64_t Instance = OZFactories::getInstance(v4);
      atomic_store(OZFactories::findFactory(Instance, (unsigned int *)this + 6), (unint64_t *)this + 6);
    }
    if (v8) {
      PCMutex::unlock(v8);
    }
  }
  return atomic_load(v1);
}

void sub_1B7978128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t OZFactory::isKindOfClass(unint64_t result, int32x4_t *a2)
{
  if (result)
  {
    while (1)
    {
      int32x4_t v3 = *(int32x4_t *)(result + 8);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL))) {
        return 0;
      }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v3, *a2)))) & 1) == 0) {
        break;
      }
      uint64_t result = OZFactory::getSuperFactory((OZFactory *)result);
      if (!result) {
        return result;
      }
    }
    return 1;
  }
  return result;
}

void OZFactory::getIconName(OZFactory *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (this)
  {
    SuperFactory = this;
    while (1)
    {
      (*(void (**)(PCString *__return_ptr, OZFactory *))(*(void *)SuperFactory + 136))(&v5, SuperFactory);
      BOOL v4 = PCString::empty(&v5);
      PCString::~PCString(&v5);
      if (!v4) {
        break;
      }
      SuperFactory = (OZFactory *)OZFactory::getSuperFactory(SuperFactory);
      if (!SuperFactory) {
        goto LABEL_5;
      }
    }
    (*(void (**)(OZFactory *))(*(void *)SuperFactory + 136))(SuperFactory);
  }
  else
  {
LABEL_5:
    PCSharedCount::PCSharedCount(a2);
  }
}

void sub_1B7978278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZFactory::getIconNameBW(OZFactory *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (this)
  {
    SuperFactory = this;
    while (1)
    {
      (*(void (**)(PCString *__return_ptr, OZFactory *))(*(void *)SuperFactory + 144))(&v5, SuperFactory);
      BOOL v4 = PCString::empty(&v5);
      PCString::~PCString(&v5);
      if (!v4) {
        break;
      }
      SuperFactory = (OZFactory *)OZFactory::getSuperFactory(SuperFactory);
      if (!SuperFactory) {
        goto LABEL_5;
      }
    }
    (*(void (**)(OZFactory *))(*(void *)SuperFactory + 144))(SuperFactory);
  }
  else
  {
LABEL_5:
    PCSharedCount::PCSharedCount(a2);
  }
}

void sub_1B7978350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZFactory::getIconID(OZFactory *this)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  SuperFactory = this;
  while ((*(unsigned int (**)(OZFactory *))(*(void *)SuperFactory + 152))(SuperFactory) == -1)
  {
    SuperFactory = (OZFactory *)OZFactory::getSuperFactory(SuperFactory);
    if (!SuperFactory) {
      return 0xFFFFFFFFLL;
    }
  }
  int32x4_t v3 = *(uint64_t (**)(OZFactory *))(*(void *)SuperFactory + 152);

  return v3(SuperFactory);
}

uint64_t anonymous namespace'::freeThreadSpecific(_anonymous_namespace_ **this, void *a2)
{
  int32x4_t v3 = this + 1;
  BOOL v4 = *this;
  if (*this != (_anonymous_namespace_ *)(this + 1))
  {
    do
    {
      uint64_t v5 = *((void *)v4 + 5);
      if (v5) {
        MEMORY[0x1BA9BFBA0](v5, 0x1000C404A09149ALL);
      }
      unint64_t v6 = (_anonymous_namespace_ *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = (_anonymous_namespace_ **)v6;
          unint64_t v6 = *(_anonymous_namespace_ **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (_anonymous_namespace_ **)*((void *)v4 + 2);
          BOOL v8 = *v7 == v4;
          BOOL v4 = (_anonymous_namespace_ *)v7;
        }
        while (!v8);
      }
      BOOL v4 = (_anonymous_namespace_ *)v7;
    }
    while (v7 != v3);
  }
  MEMORY[0x1BA9BFBA0](this, 0x1020C4062D53EE8);

  return pthread_setspecific(v9, 0);
}

void OZFactory::getLibraryIconName(OZFactory *this@<X0>, PCURL *a2@<X8>)
{
  if (this)
  {
    SuperFactory = this;
    while (1)
    {
      (*(void (**)(PCString *__return_ptr, OZFactory *))(*(void *)SuperFactory + 160))(&v9, SuperFactory);
      BOOL v4 = PCString::empty(&v9);
      PCString::~PCString(&v9);
      if (!v4) {
        break;
      }
      SuperFactory = (OZFactory *)OZFactory::getSuperFactory(SuperFactory);
      if (!SuperFactory) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = (const char *)(*(uint64_t (**)(OZFactory *))(*(void *)SuperFactory + 128))(SuperFactory);
    PCString::PCString(&v9, v5);
    unint64_t v6 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:PCString::ns_str(&v9)];
    (*(void (**)(PCString *__return_ptr, OZFactory *))(*(void *)SuperFactory + 160))(&v8, SuperFactory);
    BOOL v7 = (const void *)[v6 pathForResource:PCString::ns_str(&v8) ofType:@"icns"];
    PCString::~PCString(&v8);
    PCURL::PCURL(a2, v7);
    PCString::~PCString(&v9);
  }
  else
  {
LABEL_5:
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B7978628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZChanObjectRef::createOZChanObjectRefInfo(OZChanObjectRef *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanObjectRef::createOZChanObjectRefInfo(void)::_OZChanObjectRefInfo_once, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    int32x4_t v3 = &v4;
    std::__call_once(&OZChanObjectRef::createOZChanObjectRefInfo(void)::_OZChanObjectRefInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectRef::createOZChanObjectRefInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectRef::_OZChanObjectRefInfo;
}

uint64_t OZChanObjectRef::createOZChanObjectRefImpl(OZChanObjectRef *this, double a2)
{
  double v3 = a2;
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanObjectRef::createOZChanObjectRefImpl(double)::_OZChanObjectRefImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    BOOL v4 = &v5;
    std::__call_once(&OZChanObjectRef::createOZChanObjectRefImpl(double)::_OZChanObjectRefImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectRef::createOZChanObjectRefImpl(double)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectRef::_OZChanObjectRefImpl;
}

void OZChanObjectRef::OZChanObjectRef(OZChanObjectRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  *(void *)BOOL v7 = &unk_1F1100458;
  *((void *)v7 + 2) = &unk_1F11007C8;
  OZChanObjectRefInfo = (OZChanObjectRef *)OZChanObjectRef::createOZChanObjectRefInfo(v7);
  uint64_t v9 = OZChanObjectRef::_OZChanObjectRefInfo;
  *((void *)this + 16) = OZChanObjectRef::_OZChanObjectRefInfo;
  *((void *)this + 17) = v9;
  OZChanObjectRef::createOZChanObjectRefImpl(OZChanObjectRefInfo, 0.0);
  uint64_t v10 = OZChanObjectRef::_OZChanObjectRefImpl;
  *((void *)this + 14) = OZChanObjectRef::_OZChanObjectRefImpl;
  *((void *)this + 15) = v10;
  *((void *)this + 7) |= 0x1000010000uLL;
}

void sub_1B79787D0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRef::OZChanObjectRef(OZChanObjectRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(void *)uint64_t v5 = &unk_1F1100458;
  *((void *)v5 + 2) = &unk_1F11007C8;
  OZChanObjectRefInfo = (OZChanObjectRef *)OZChanObjectRef::createOZChanObjectRefInfo(v5);
  uint64_t v7 = OZChanObjectRef::_OZChanObjectRefInfo;
  *((void *)this + 16) = OZChanObjectRef::_OZChanObjectRefInfo;
  *((void *)this + 17) = v7;
  OZChanObjectRef::createOZChanObjectRefImpl(OZChanObjectRefInfo, 0.0);
  uint64_t v8 = OZChanObjectRef::_OZChanObjectRefImpl;
  *((void *)this + 14) = OZChanObjectRef::_OZChanObjectRefImpl;
  *((void *)this + 15) = v8;
  *((void *)this + 7) |= 0x1000010000uLL;
}

void sub_1B7978888(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRef::OZChanObjectRef(OZChanObjectRef *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  void *v3 = &unk_1F1100458;
  v3[2] = &unk_1F11007C8;
}

void non-virtual thunk to'OZChanObjectRef::~OZChanObjectRef(OZChanObjectRef *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanObjectRef::~OZChanObjectRef(OZChannel *this)
{
  OZChannel::~OZChannel(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanObjectRef::clone(OZChanObjectRef *this)
{
}

void sub_1B7978A00(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanObjectRef::createOZChanObjectRefInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChanObjectRef::_OZChanObjectRefInfo) {
    operator new();
  }
}

void sub_1B7978A78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChanObjectRefInfo::OZChanObjectRefInfo(OZChanObjectRefInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4294967300.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1100838;
  *((void *)this + 10) = &unk_1F1100858;
}

void sub_1B7978B28(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanObjectRef::createOZChanObjectRefImpl(double)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChanObjectRef::_OZChanObjectRefImpl) {
    operator new();
  }
}

void sub_1B7978BD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

uint64_t OZCoreGlobals::getInstance(OZCoreGlobals *this)
{
  if (OZCoreGlobals::getInstance(void)::once != -1) {
    dispatch_once(&OZCoreGlobals::getInstance(void)::once, &__block_literal_global_63);
  }
  return OZCoreGlobals::_instance;
}

void ___ZN13OZCoreGlobals11getInstanceEv_block_invoke()
{
}

void sub_1B7978CD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40A1FA7B50);
  _Unwind_Resume(a1);
}

void OZCoreGlobals::~OZCoreGlobals(OZCoreGlobals *this)
{
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannel::OZChannel(OZChannel *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4, a5, a6);
  *uint64_t v10 = &unk_1F1100908;
  v10[2] = &unk_1F1100C68;
  v10[16] = a8;
  v10[17] = a8;
  v10[14] = a7;
  v10[15] = a7;
  v10[18] = 0;
}

void OZChannel::OZChannel(OZChannel *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4);
  void *v8 = &unk_1F1100908;
  v8[2] = &unk_1F1100C68;
  v8[16] = a6;
  v8[17] = a6;
  v8[14] = a5;
  v8[15] = a5;
  v8[18] = 0;
}

void OZChannel::OZChannel(OZChannel *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3);
  void *v5 = &unk_1F1100908;
  v5[2] = &unk_1F1100C68;
  v5[14] = 0;
  v5[15] = 0;
  var0 = (OZChannelImpl *)a2[1].var0;
  if (var0 && !*((unsigned char *)var0 + 32)) {
    operator new();
  }
  var1 = (OZChannelImpl *)a2[1].var1;
  this->var14 = var0;
  this->var15 = var1;
  this->var16 = 0;
  this->var17 = 0;
  var2 = (OZChannelInfo *)a2[1].var2;
  if (!*((unsigned char *)var2 + 72)) {
    operator new();
  }
  uint64_t v10 = *(OZChannelInfo **)&a2[1].var3;
  uint64_t v9 = (OZCurve *)a2[1].var4.var0;
  this->var16 = var2;
  this->var17 = v10;
  if (v9) {
    uint64_t v9 = (OZCurve *)(*(uint64_t (**)(OZCurve *))(*(void *)v9 + 1224))(v9);
  }
  this->var18 = v9;
}

void sub_1B7978F2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10A1C407F0BD61ELL);
  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannel::~OZChannel(OZChannel *this)
{
  this->var0 = (void **)&unk_1F1100908;
  this->var2 = (void **)&unk_1F1100C68;
  var14 = this->var14;
  if (var14 && !*((unsigned char *)var14 + 32))
  {
    (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
    this->var14 = 0;
  }
  var16 = this->var16;
  if (var16 && !*((unsigned char *)var16 + 72))
  {
    (*(void (**)(OZChannelInfo *))(*(void *)var16 + 8))(var16);
    this->var16 = 0;
  }
  this->var15 = 0;
  this->var17 = 0;
  var18 = this->var18;
  if (var18) {
    (*(void (**)(OZCurve *))(*(void *)var18 + 8))(var18);
  }
  this->var18 = 0;

  OZChannelBase::~OZChannelBase((OZChannelBase *)this);
}

{
  uint64_t vars8;

  OZChannel::~OZChannel(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannel::~OZChannel(OZChannel *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelImpl::createLocalCopy(OZChannelImpl *this)
{
}

void sub_1B797915C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

uint64_t OZChannel::resetLocalChannelImplementation(OZChannel *this)
{
  uint64_t result = (uint64_t)this->var14;
  if (!*(unsigned char *)(result + 32))
  {
    uint64_t result = OZChannelImpl::shouldKeepLocalCopy((OZChannelImpl *)result);
    if ((result & 1) == 0)
    {
      uint64_t result = OZChannelImpl::operator==((uint64_t)this->var14, (uint64_t)this->var15);
      if (result)
      {
        var14 = this->var14;
        this->var14 = this->var15;
        if (var14) {
          (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
        }
        return (uint64_t)OZChannel::installPrototypeCurveInterface(this);
      }
    }
  }
  return result;
}

OZChannel *OZChannel::installPrototypeCurveInterface(OZChannel *this)
{
  if (this->var18)
  {
    uint64_t v1 = this;
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v3 = *((void *)var14 + 1);
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 8))(*((void *)var14 + 1));
      var14 = v1->var14;
    }
    *((void *)var14 + 1) = 0;
    this = (OZChannel *)(*(uint64_t (**)(OZCurve *))(*(void *)v1->var18 + 1224))(v1->var18);
    *((void *)v1->var14 + 1) = this;
    this[1].var0 = (void **)&v1->var0;
  }
  return this;
}

void OZChannelInfo::createLocalCopy(OZChannelInfo *this)
{
}

void sub_1B797930C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403099BD59);
  _Unwind_Resume(a1);
}

uint64_t OZChannel::clone(OZChannel *this)
{
  return 0;
}

void OZChannel::copy(OZChannel *this, const OZChannelBase *a2, char a3)
{
  if ((a3 & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  }
  OZChannelBase::copy((OZChannelBase *)this, a2);
  if (a2)
  {
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = v5[16];
      var16 = this->var16;
      if (*(unsigned char *)(v7 + 72))
      {
        if (var16 && !*((unsigned char *)var16 + 72))
        {
          (*(void (**)(OZChannelInfo *))(*(void *)var16 + 8))(var16);
          this->var16 = 0;
          uint64_t v7 = v6[16];
        }
        this->var16 = (OZChannelInfo *)v7;
      }
      else
      {
        if (!var16 || *((unsigned char *)var16 + 72)) {
          operator new();
        }
        OZChannelInfo::operator=((uint64_t)var16, v7);
      }
      var14 = this->var14;
      uint64_t v10 = v6[14];
      if (var14)
      {
        if (v10)
        {
          if (!*(unsigned char *)(v10 + 32)
            || (BOOL shouldKeepLocalCopy = OZChannelImpl::shouldKeepLocalCopy(var14), var14 = this->var14,
                                                                                 shouldKeepLocalCopy))
          {
            if (*((unsigned char *)var14 + 32)) {
              operator new();
            }
            uint64_t v12 = v6[14];
            OZChannelImpl::operator=(var14, v12);
            return;
          }
          if (!*((unsigned char *)var14 + 32))
          {
            (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
            this->var14 = 0;
          }
          uint64_t v10 = v6[14];
LABEL_29:
          this->var14 = (OZChannelImpl *)v10;
          return;
        }
        if (!*((unsigned char *)var14 + 32))
        {
          (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
          this->var14 = 0;
        }
      }
      else if (v10)
      {
        if (!*(unsigned char *)(v10 + 32)) {
          operator new();
        }
        goto LABEL_29;
      }
      this->var14 = 0;
    }
  }
}

void sub_1B79795B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

uint64_t OZChannel::compare(OZChannel *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  BOOL v4 = v3;
  var14 = this->var14;
  if (!var14) {
    return 0;
  }
  uint64_t v6 = v4[14];
  if (!v6) {
    return 0;
  }

  return OZChannelImpl::operator==((uint64_t)var14, v6);
}

void OZChannel::assign(OZChannel *this, const OZChannelBase *a2)
{
  if (!(*((unsigned int (**)(OZChannel *))this->var0 + 33))(this)) {
    return;
  }
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  OZChannelBase::assign((OZChannelBase *)this, a2);
  if (!a2) {
    return;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = v4;
  var14 = this->var14;
  uint64_t v8 = (OZChannelImpl *)*((void *)v6 + 14);
  if (!var14)
  {
    if (v8)
    {
      if (!*((unsigned char *)v8 + 32)) {
        operator new();
      }
      this->var14 = v8;
      goto LABEL_22;
    }
LABEL_16:
    this->var14 = 0;
    return;
  }
  if (!v8)
  {
    if (!*((unsigned char *)var14 + 32))
    {
      (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
      this->var14 = 0;
    }
    goto LABEL_16;
  }
  if (*((unsigned char *)v8 + 32)
    && (BOOL shouldKeepLocalCopy = OZChannelImpl::shouldKeepLocalCopy(var14), var14 = this->var14, !shouldKeepLocalCopy))
  {
    if (!*((unsigned char *)var14 + 32))
    {
      (*(void (**)(OZChannelImpl *))(*(void *)var14 + 8))(var14);
      this->var14 = 0;
    }
    uint64_t v8 = (OZChannelImpl *)*((void *)v6 + 14);
    this->var14 = v8;
  }
  else
  {
    if (*((unsigned char *)var14 + 32)) {
      operator new();
    }
    OZChannelImpl::operator=(var14, *((void *)v6 + 14));
    uint64_t v8 = this->var14;
  }
  if (v8)
  {
LABEL_22:
    double v10 = *((double *)this->var16 + 5);
    double v11 = *(double *)(*((void *)v6 + 16) + 40);
    if (vabdd_f64(v10, v11) >= 0.0000001)
    {
      if (*((unsigned char *)v8 + 32)) {
        OZChannelImpl::createLocalCopy(v8);
      }
      v5.n128_f64[0] = v11 / v10;
      uint64_t v12 = *(void (**)(__n128))(**((void **)v8 + 1) + 448);
      v12(v5);
    }
  }
}

void sub_1B7979934(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

uint64_t OZChannel::allowsAssignment(OZChannel *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t result = OZChannelBase::allowsAssignment((OZChannelBase *)this, lpsrc);
    if (result)
    {
      if (!(*((unsigned int (**)(const OZChannelBase *, void))lpsrc->var0 + 69))(lpsrc, 0)
        || (uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 64))(this), result))
      {
        double v7 = 0.0;
        (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 264))(*((void *)this->var14 + 1), &v7);
        double v5 = v7;
        if (v7 <= -3.40282347e38
          || (double v7 = 0.0,
              (*(void (**)(void, double *, void))(**((void **)this->var14 + 1) + 248))(*((void *)this->var14 + 1), &v7, 0), uint64_t result = 0, v7 >= v5))
        {
          double v7 = 0.0;
          (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 256))(*((void *)this->var14 + 1), &v7);
          double v6 = v7;
          if (v7 >= 3.40282347e38) {
            return 1;
          }
          double v7 = 0.0;
          (*(void (**)(void, double *, void))(**((void **)this->var14 + 1) + 248))(*((void *)this->var14 + 1), &v7, 0);
          uint64_t result = 0;
          if (v7 <= v6) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZChannel::lock(OZChannel *this, int a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 2);
  uint64_t result = OZChannelBase::lock((OZChannelBase *)this, a2);
  if ((a2 & 1) == 0)
  {
    uint64_t result = (*((uint64_t (**)(OZChannel *, void))this->var0 + 69))(this, 0);
    if (result)
    {
      double v5 = *(uint64_t (**)(void))(**((void **)this->var14 + 1) + 96);
      return v5();
    }
  }
  return result;
}

uint64_t OZChannel::lockFromParent(OZChannel *this)
{
  return (*((uint64_t (**)(void))this->var0 + 12))();
}

OZChannelBase *OZChannel::willBeModified(OZChannel *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 1) != 0
    && (!(*((unsigned int (**)(OZChannel *))this->var0 + 64))(this)
     || ((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0))
  {
    uint64_t v2 = 2;
  }
  var6 = this->var6;
  if (var6 && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)) {
    OZChannelBase::willBeModified((OZChannelBase *)this->var6, v2);
  }

  return OZChannelBase::willBeModified((OZChannelBase *)this, v2);
}

OZChannelBase *OZChannel::parentWillBeModified(OZChannel *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 1) != 0
    && (!(*((unsigned int (**)(OZChannel *))this->var0 + 64))(this)
     || ((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0))
  {
    uint64_t v2 = 2;
  }

  return OZChannelBase::willBeModified((OZChannelBase *)this, v2);
}

uint64_t OZChannel::resetToDefault(OZChannel *this, char a2)
{
  uint64_t result = (uint64_t)this->var6;
  if (result
    && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 120))(result), result)
    && (uint64_t result = OZChannelFolder::testFoldFlag(this->var6, 0x100000), result))
  {
    var6 = this->var6;
    if (var6) {
    double v6 = *(uint64_t (**)(const void *, OZChannel *, void))(*(void *)var6 + 776);
    }
    return v6(var6, this, 0);
  }
  else
  {
    if ((a2 & 1) == 0) {
      uint64_t result = (*((uint64_t (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    }
    var14 = this->var14;
    if (!*((unsigned char *)var14 + 32))
    {
      uint64_t v8 = *((void *)var14 + 2);
      if (v8)
      {
        MEMORY[0x1BA9BFBA0](v8, 0x1000C4021716A34);
        var14 = this->var14;
        *((void *)var14 + 2) = 0;
      }
      (*(void (**)(void))(**((void **)var14 + 1) + 184))(*((void *)var14 + 1));
      return OZChannel::resetLocalChannelImplementation(this);
    }
  }
  return result;
}

__CFString *OZChannel::getObjCWrapperName(OZChannel *this)
{
  return @"CHChannel";
}

uint64_t OZChannel::writeHeader(OZChannel *this, OZFactory *a2, int a3)
{
  if (OZChannelBase::testFlag((OZChannelBase *)this, 128))
  {
    uint64_t result = (*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2);
    if (result) {
      return result;
    }
  }
  if (a3)
  {
    return OZChannelBase::writeHeader((OZChannelBase *)this, a2, 1);
  }
  int v13 = 0;
  double v11 = 0.0;
  double v12 = 0.0;
  (*(void (**)(void, int *))(**((void **)this->var14 + 1) + 152))(*((void *)this->var14 + 1), &v13);
  if (v13
    && (v13 != 1
     || (*(unsigned int (**)(void))(**((void **)this->var14 + 1) + 512))(*((void *)this->var14 + 1))))
  {
    return OZChannelBase::writeHeader((OZChannelBase *)this, a2, 0);
  }
  var14 = this->var14;
  uint64_t v8 = (long long *)*((void *)var14 + 2);
  if (v8)
  {
    long long v9 = *v8;
    time1.epoch = *((void *)v8 + 2);
    *(_OWORD *)&time1.value = v9;
    double v10 = (CMTime *)MEMORY[0x1E4F1FA48];
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2)) {
      return OZChannelBase::writeHeader((OZChannelBase *)this, a2, 0);
    }
    CMTime time1 = *(CMTime *)(*((void *)this->var14 + 2) + 24);
    CMTime time2 = *v10;
    if (CMTimeCompare(&time1, &time2)) {
      return OZChannelBase::writeHeader((OZChannelBase *)this, a2, 0);
    }
    var14 = this->var14;
  }
  (*(void (**)(void, double *))(**((void **)var14 + 1) + 208))(*((void *)var14 + 1), &v12);
  (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 192))(*((void *)this->var14 + 1), &v11);
  TXSequenceChannels::pushChannelIntoChannelList((TXSequenceChannels *)a2, (OZChannelBase *)&OZChannelScope);
  (*(void (**)(OZFactory *, uint64_t))(*(void *)a2 + 16))(a2, 110);
  (*(void (**)(OZFactory *, uint64_t, PCString *))(*(void *)a2 + 216))(a2, 110, &this->var4);
  (*(void (**)(OZFactory *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, this->var3);
  OZChannelBase::writeFlags((uint64_t)this, (TXSequenceChannels *)a2, 0);
  if (((*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2) & 1) == 0) {
    (*(void (**)(OZFactory *, uint64_t, double))(*(void *)a2 + 184))(a2, 115, v11);
  }
  (*(void (**)(OZFactory *, uint64_t, double))(*(void *)a2 + 184))(a2, 114, v12);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZChannel::writeHeader(OZChannel *this, OZFactory *a2, int a3)
{
  return OZChannel::writeHeader((OZChannel *)((char *)this - 16), a2, a3);
}

uint64_t OZChannel::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3)
{
  if (!OZChannelBase::testFlag((OZChannelBase *)this, 128)
    || (uint64_t result = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2), (result & 1) == 0))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
    OZChannelBase::writeBody((OZChannelBase *)this, a2, a3);
    var14 = this->var14;
    uint64_t v8 = (long long *)*((void *)var14 + 2);
    long long v9 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (v8)
    {
      long long v10 = *v8;
      time1.epoch = *((void *)v8 + 2);
      *(_OWORD *)&time1.value = v10;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      int32_t v11 = CMTimeCompare(&time1, &time2);
      var14 = this->var14;
      if (v11)
      {
        double v12 = (long long *)*((void *)var14 + 2);
        long long v13 = *v12;
        uint64_t v27 = *((void *)v12 + 2);
        long long v26 = v13;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 119);
        (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v26);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        var14 = this->var14;
      }
    }
    v14 = (CMTime *)*((void *)var14 + 2);
    if (v14)
    {
      CMTime time1 = v14[1];
      CMTime time2 = *v9;
      int32_t v15 = CMTimeCompare(&time1, &time2);
      var14 = this->var14;
      if (v15)
      {
        uint64_t v16 = *((void *)var14 + 2);
        uint64_t v25 = *(void *)(v16 + 40);
        long long v24 = *(_OWORD *)(v16 + 24);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 120);
        (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v24);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        var14 = this->var14;
      }
    }
    uint64_t v17 = *((void *)var14 + 2);
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v17 + 48);
      if (!v18
        || ((*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 130),
            (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v18),
            (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2),
            var14 = this->var14,
            (uint64_t v17 = *((void *)var14 + 2)) != 0))
      {
        uint64_t v19 = *(unsigned int *)(v17 + 52);
        if (v19)
        {
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 131);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v19);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          var14 = this->var14;
        }
      }
    }
    int v23 = 0;
    (*(void (**)(void, int *))(**((void **)var14 + 1) + 152))(*((void *)var14 + 1), &v23);
    if ((a3 & 1) != 0
      || (*(unsigned int (**)(void))(**((void **)this->var14 + 1) + 512))(*((void *)this->var14 + 1))
      || (v21 = (long long *)*((void *)this->var14 + 2)) != 0
      && ((long long v22 = *v21,
           time1.epoch = *((void *)v21 + 2),
           *(_OWORD *)&time1.value = v22,
           CMTime time2 = *v9,
           CMTimeCompare(&time1, &time2))
       || (time1 = *(CMTime *)(*((void *)this->var14 + 2) + 24), CMTime time2 = *v9, CMTimeCompare(&time1, &time2))))
    {
      uint64_t v20 = *((void *)this->var14 + 1);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v20 + 16))(v20, a2, 0);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v20 + 24))(v20, a2, 0, 1, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  return result;
}

uint64_t non-virtual thunk to'OZChannel::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannel::writeBody((OZChannel *)((char *)this - 16), a2, a3);
}

uint64_t OZChannel::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelScope);
  (*(void (**)(void, PCSerializerReadStream *))(**((void **)this->var14 + 1) + 40))(*((void *)this->var14 + 1), a2);
  var14 = this->var14;
  if (!*((unsigned char *)var14 + 32))
  {
    uint64_t v5 = *((void *)var14 + 2);
    if (v5)
    {
      MEMORY[0x1BA9BFBA0](v5, 0x1000C4021716A34);
      *((void *)this->var14 + 2) = 0;
    }
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannel::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannel::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannel::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannel::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  unsigned int v11 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 119)
  {
    if (v6 == 118)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      PCSerializerReadStream::pushHandler(a2, *((PCSerializer **)var14 + 1));
      (*(void (**)(void, PCSerializerReadStream *, PCStreamElement *))(**((void **)this->var14 + 1) + 56))(*((void *)this->var14 + 1), a2, a3);
    }
    else if (v6 == 119)
    {
      (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 88))(a3, &v12);
      OZChannel::setFadeInOffset(this, &v12, 0);
    }
  }
  else
  {
    switch(v6)
    {
      case 120:
        (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 88))(a3, &v12);
        OZChannel::setFadeOutOffset(this, &v12, 0);
        break;
      case 130:
        (*(void (**)(PCStreamElement *, unsigned int *))(*(void *)a3 + 32))(a3, &v11);
        int v8 = v11;
        if (v11 >= 4)
        {
          int v8 = 0;
          unsigned int v11 = 0;
        }
        OZChannel::setFadeInCurve(this, v8);
        break;
      case 131:
        (*(void (**)(PCStreamElement *, unsigned int *))(*(void *)a3 + 32))(a3, &v11);
        int v7 = v11;
        if (v11 >= 4)
        {
          int v7 = 0;
          unsigned int v11 = 0;
        }
        OZChannel::setFadeOutCurve(this, v7);
        break;
    }
  }
  return 1;
}

__n128 OZChannel::setFadeInOffset(OZChannel *this, const CMTime *a2, int a3)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    int v7 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (*((void *)this->var14 + 2)) {
      goto LABEL_9;
    }
    CMTime time1 = *a2;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    int32_t v8 = CMTimeCompare(&time1, &time2);
    var14 = this->var14;
    if (v8 >= 1)
    {
      if (var14)
      {
        if (*((unsigned char *)var14 + 32)) {
          OZChannelImpl::createLocalCopy(var14);
        }
      }
      operator new();
    }
    if (*((void *)var14 + 2))
    {
LABEL_9:
      CMTime v21 = *a2;
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      CMTime time1 = v21;
      CMTime time2 = *v7;
      if (CMTimeCompare(&time1, &time2) < 0) {
        CMTime v21 = *v7;
      }
      AncestorRootBase = OZChannelBase::getAncestorRootBase((OZChannelBase *)this);
      if (AncestorRootBase)
      {
        if (a3)
        {
          unsigned int v11 = AncestorRootBase;
          (*((void (**)(CMTime *__return_ptr))AncestorRootBase->var0 + 90))(&time1);
          memset(&v18, 0, sizeof(v18));
          (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v11->var0 + 110))(&v18, v11);
          memset(&v17, 0, sizeof(v17));
          CMTime time2 = time1;
          CMTime v23 = v20;
          PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v22);
          CMTime time2 = v22;
          CMTime v23 = v18;
          PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v17);
          CMTime v22 = time1;
          CMTime time2 = v21;
          CMTime v23 = time1;
          PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v16);
          CMTime v12 = (CMTime *)*((void *)this->var14 + 2);
          CMTime time2 = v17;
          CMTime v23 = v12[1];
          PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v15);
          CMTime time2 = v16;
          CMTime v23 = v15;
          if (CMTimeCompare(&time2, &v23) >= 1)
          {
            long long v13 = (CMTime *)*((void *)this->var14 + 2);
            CMTime time2 = v17;
            CMTime v23 = v13[1];
            PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v16);
            CMTime time2 = v16;
            CMTime v23 = v22;
            PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v21);
          }
        }
      }
      v14 = (__n128 *)*((void *)this->var14 + 2);
      __n128 result = *(__n128 *)&v21.value;
      v14[1].n128_u64[0] = v21.epoch;
      __n128 *v14 = result;
    }
  }
  return result;
}

double OZChannel::setFadeOutOffset(OZChannel *this, const CMTime *a2, int a3)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    int v7 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (*((void *)this->var14 + 2)) {
      goto LABEL_9;
    }
    CMTime time1 = *a2;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    int32_t v8 = CMTimeCompare(&time1, &time2);
    var14 = this->var14;
    if (v8 >= 1)
    {
      if (var14)
      {
        if (*((unsigned char *)var14 + 32)) {
          OZChannelImpl::createLocalCopy(var14);
        }
      }
      operator new();
    }
    if (*((void *)var14 + 2))
    {
LABEL_9:
      CMTime v22 = *a2;
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      CMTime time1 = v22;
      CMTime time2 = *v7;
      if (CMTimeCompare(&time1, &time2) < 0) {
        CMTime v22 = *v7;
      }
      AncestorRootBase = OZChannelBase::getAncestorRootBase((OZChannelBase *)this);
      if (AncestorRootBase && a3)
      {
        unsigned int v11 = AncestorRootBase;
        (*((void (**)(CMTime *__return_ptr))AncestorRootBase->var0 + 90))(&time1);
        memset(&v19, 0, sizeof(v19));
        (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v11->var0 + 110))(&v19, v11);
        memset(&v18, 0, sizeof(v18));
        CMTime time2 = time1;
        CMTime v24 = v21;
        PC_CMTimeSaferAdd(&time2, &v24, (uint64_t)&v23);
        CMTime time2 = v23;
        CMTime v24 = v19;
        PC_CMTimeSaferSubtract(&time2, &v24, (uint64_t)&v18);
        CMTime v23 = time1;
        CMTime time2 = v18;
        CMTime v24 = v22;
        PC_CMTimeSaferSubtract(&time2, &v24, (uint64_t)&v17);
        CMTime time2 = v17;
        CMTime v24 = v23;
        if (CMTimeCompare(&time2, &v24) < 0)
        {
          CMTime time2 = v18;
          CMTime v24 = v23;
          PC_CMTimeSaferSubtract(&time2, &v24, (uint64_t)&v22);
        }
        CMTime time2 = v18;
        CMTime v24 = v22;
        PC_CMTimeSaferSubtract(&time2, &v24, (uint64_t)&v17);
        CMTime v12 = (long long *)*((void *)this->var14 + 2);
        long long v13 = *v12;
        time2.epoch = *((void *)v12 + 2);
        *(_OWORD *)&time2.value = v13;
        CMTime v24 = v23;
        PC_CMTimeSaferAdd(&time2, &v24, (uint64_t)&v16);
        CMTime time2 = v17;
        CMTime v24 = v16;
        if (CMTimeCompare(&time2, &v24) < 0)
        {
          v14 = (long long *)*((void *)this->var14 + 2);
          long long v15 = *v14;
          time2.epoch = *((void *)v14 + 2);
          *(_OWORD *)&time2.value = v15;
          CMTime v24 = v23;
          PC_CMTimeSaferAdd(&time2, &v24, (uint64_t)&v16);
          CMTime time2 = v18;
          CMTime v24 = v16;
          PC_CMTimeSaferSubtract(&time2, &v24, (uint64_t)&v17);
          CMTime v22 = v17;
        }
      }
      double result = *(double *)&v22.value;
      *(CMTime *)(*((void *)this->var14 + 2) + 24) = v22;
    }
  }
  return result;
}

uint64_t OZChannel::setFadeInCurve(OZChannel *this, int a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)this->var14;
    uint64_t v5 = *(void *)(result + 16);
    if (a2 && !v5)
    {
      if (*(unsigned char *)(result + 32)) {
        OZChannelImpl::createLocalCopy((OZChannelImpl *)result);
      }
      operator new();
    }
    if (v5)
    {
      uint64_t result = (*((uint64_t (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      *(_DWORD *)(*((void *)this->var14 + 2) + 48) = a2;
    }
  }
  return result;
}

uint64_t OZChannel::setFadeOutCurve(OZChannel *this, int a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)this->var14;
    uint64_t v5 = *(void *)(result + 16);
    if (a2 && !v5)
    {
      if (*(unsigned char *)(result + 32)) {
        OZChannelImpl::createLocalCopy((OZChannelImpl *)result);
      }
      operator new();
    }
    if (v5)
    {
      uint64_t result = (*((uint64_t (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      *(_DWORD *)(*((void *)this->var14 + 2) + 52) = a2;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZChannel::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZChannel::calcHashForState(OZChannel *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::testFlag((OZChannelBase *)this, 128);
  if ((result & 1) == 0)
  {
    OZChannelBase::calcHashForState((OZChannelBase *)this, a2, a3);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
    OZChannel::getValueAsDouble(this, a3, 0.0);
    double v8 = v7;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 110);
    (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v8);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    long long v9 = (long long *)*((void *)this->var14 + 2);
    if (v9)
    {
      long long v10 = *v9;
      uint64_t v17 = *((void *)v9 + 2);
      long long v16 = v10;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 119);
      (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v16);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v11 = *((void *)this->var14 + 2);
      uint64_t v15 = *(void *)(v11 + 40);
      long long v14 = *(_OWORD *)(v11 + 24);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 120);
      (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v14);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v12 = *(unsigned int *)(*((void *)this->var14 + 2) + 48);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 130);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v12);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v13 = *(unsigned int *)(*((void *)this->var14 + 2) + 52);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 131);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v13);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  return result;
}

void OZChannel::getValueAsDouble(OZChannel *this, const CMTime *a2, double a3)
{
  uint64_t v11 = 0;
  if (*((void *)this->var14 + 1))
  {
    int v10 = 0;
    if (!(*((unsigned int (**)(OZChannel *))this->var0 + 104))(this)
      && ((*(unsigned int (**)(void, int *))(**((void **)this->var14 + 1) + 1152))(*((void *)this->var14 + 1), &v10)? (BOOL v6 = v10 == 0): (BOOL v6 = 0), v6))
    {
      (*(void (**)(void, uint64_t *))(**((void **)this->var14 + 1) + 208))(*((void *)this->var14 + 1), &v11);
    }
    else
    {
      BOOL v7 = OZChannelBase::testFlag((OZChannelBase *)this, 0x80000000);
      uint64_t v8 = *((void *)this->var14 + 1);
      if (v7)
      {
        (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v9, this, a2);
        (*(void (**)(uint64_t, CMTime *, uint64_t *, double))(*(void *)v8 + 624))(v8, &v9, &v11, a3);
      }
      else
      {
        (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v9, this, a2);
        (*(void (**)(uint64_t, CMTime *, uint64_t *, double))(*(void *)v8 + 616))(v8, &v9, &v11, a3);
      }
    }
    if ((*((unsigned int (**)(OZChannel *))this->var0 + 83))(this))
    {
      if (!OZChannelBase::testFlag((OZChannelBase *)this, 0x800000000))
      {
        (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v9, this, a2);
        OZChannel::getFadeRatio(this, &v9);
      }
    }
  }
}

__n128 OZChannel::getFadeInOffset@<Q0>(OZChannel *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)*((void *)this->var14 + 2);
  if (!v2) {
    uint64_t v2 = (__n128 *)MEMORY[0x1E4F1FA48];
  }
  __n128 result = *v2;
  *a2 = *v2;
  a2[1].n128_u64[0] = v2[1].n128_u64[0];
  return result;
}

OZChannel *OZChannel::getFadeOutOffset@<X0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this->var14 + 2);
  if (v2)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 24);
    uint64_t v3 = *(void *)(v2 + 40);
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    uint64_t v3 = *(void *)(v4 + 16);
  }
  *(void *)(a2 + 16) = v3;
  return this;
}

uint64_t OZChannel::getFadeInCurve(OZChannel *this)
{
  uint64_t v1 = *((void *)this->var14 + 2);
  if (v1) {
    return *(unsigned int *)(v1 + 48);
  }
  else {
    return 0;
  }
}

uint64_t OZChannel::getFadeOutCurve(OZChannel *this)
{
  uint64_t v1 = *((void *)this->var14 + 2);
  if (v1) {
    return *(unsigned int *)(v1 + 52);
  }
  else {
    return 0;
  }
}

double OZChannel::getFadeRatio(OZChannel *this, const CMTime *a2)
{
  AncestorRootBase = OZChannelBase::getAncestorRootBase((OZChannelBase *)this);
  int v5 = (*((uint64_t (**)(OZChannel *))this->var0 + 83))(this);
  v6.n128_u64[0] = 1.0;
  if (v5) {
    BOOL v7 = AncestorRootBase == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    memset(&v26, 0, sizeof(v26));
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))AncestorRootBase->var0 + 110))(&v26, AncestorRootBase, v6);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, OZChannel *))AncestorRootBase->var0 + 90))(v25, AncestorRootBase, this);
    memset(&v24, 0, sizeof(v24));
    CMTime time1 = v25[0];
    CMTime time2 = v25[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
    CMTime time1 = v27;
    CMTime time2 = v26;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    CMTime v27 = v25[0];
    var13 = this->var13;
    if (!var13 || ((*(uint64_t (**)(OZChannelTimeConverter *))(*(void *)var13 + 32))(var13) & 1) == 0)
    {
      (*((void (**)(CMTime *__return_ptr, OZChannel *, CMTime *))this->var0 + 41))(&time1, this, &v24);
      CMTime v24 = time1;
      (*((void (**)(CMTime *__return_ptr, OZChannel *, CMTime *))this->var0 + 41))(&time1, this, &v27);
      CMTime v27 = time1;
    }
    CMTime v9 = (long long *)*((void *)this->var14 + 2);
    long long v10 = *v9;
    time1.epoch = *((void *)v9 + 2);
    *(_OWORD *)&time1.value = v10;
    uint64_t v11 = (CMTime *)MEMORY[0x1E4F1FA48];
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (!CMTimeCompare(&time1, &time2)) {
      goto LABEL_10;
    }
    CMTime time1 = *a2;
    CMTime time2 = v27;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
    uint64_t v12 = *((void *)this->var14 + 2);
    CMTime time1 = v23;
    CMTimeEpoch v13 = *(void *)(v12 + 16);
    *(_OWORD *)&time2.value = *(_OWORD *)v12;
    time2.epoch = v13;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTime time1 = *a2;
      CMTime time2 = v27;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      operator/((long long *)&v23.value, *((void *)this->var14 + 2), (uint64_t)&v22);
      double Seconds = CMTimeGetSeconds(&v22);
      long long v16 = (int *)(*((void *)this->var14 + 2) + 48);
    }
    else
    {
LABEL_10:
      CMTime time1 = *(CMTime *)(*((void *)this->var14 + 2) + 24);
      CMTime time2 = *v11;
      if (!CMTimeCompare(&time1, &time2)
        || (long long v14 = (CMTime *)*((void *)this->var14 + 2),
            CMTime time1 = v24,
            CMTime time2 = v14[1],
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23),
            CMTime time1 = *a2,
            CMTime time2 = v23,
            CMTimeCompare(&time1, &time2) < 1))
      {
        v6.n128_u64[0] = 1.0;
        return v6.n128_f64[0];
      }
      CMTime time1 = v24;
      CMTime time2 = *a2;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      operator/((long long *)&v23.value, *((void *)this->var14 + 2) + 24, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      long long v16 = (int *)(*((void *)this->var14 + 2) + 52);
    }
    int v17 = *v16;
    double v18 = 1.0;
    if (Seconds <= 1.0) {
      double v18 = Seconds;
    }
    BOOL v19 = Seconds < 0.0;
    v6.n128_u64[0] = 0;
    if (!v19) {
      v6.n128_f64[0] = v18;
    }
    switch(v17)
    {
      case 3:
        v6.n128_f64[0] = 0.5 - cos(v6.n128_f64[0] * 3.14159265) * 0.5;
        break;
      case 2:
        v6.n128_f64[0] = sin((v6.n128_f64[0] + -1.0) * 1.57079633) + 1.0;
        break;
      case 1:
        v6.n128_f64[0] = sin(v6.n128_f64[0] * 1.57079633);
        break;
    }
  }
  return v6.n128_f64[0];
}

BOOL OZChannel::hasFadeHandles(OZChannel *this)
{
  uint64_t v1 = (long long *)*((void *)this->var14 + 2);
  if (!v1) {
    return 0;
  }
  long long v3 = *v1;
  time1.epoch = *((void *)v1 + 2);
  *(_OWORD *)&time1.value = v3;
  uint64_t v4 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &v6)) {
    return 1;
  }
  CMTime time1 = *(CMTime *)(*((void *)this->var14 + 2) + 24);
  CMTime v6 = *v4;
  return CMTimeCompare(&time1, &v6) != 0;
}

uint64_t OZChannel::scaleFadeHandles(OZChannel *this, Float64 a2)
{
  uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 83))(this);
  if (result)
  {
    int v5 = (long long *)*((void *)this->var14 + 2);
    long long v6 = *v5;
    time1.epoch = *((void *)v5 + 2);
    *(_OWORD *)&time1.value = v6;
    BOOL v7 = (CMTime *)MEMORY[0x1E4F1FA48];
    CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v10))
    {
      operator*(*((CMTime **)this->var14 + 2), &time1, a2);
      uint64_t v8 = *((void *)this->var14 + 2);
      long long v9 = *(_OWORD *)&time1.value;
      *(void *)(v8 + 16) = time1.epoch;
      *(_OWORD *)uint64_t v8 = v9;
    }
    CMTime time1 = *(CMTime *)(*((void *)this->var14 + 2) + 24);
    CMTime v10 = *v7;
    uint64_t result = CMTimeCompare(&time1, &v10);
    if (result)
    {
      uint64_t result = (uint64_t)operator*((CMTime *)(*((void *)this->var14 + 2) + 24), &time1, a2);
      *(CMTime *)(*((void *)this->var14 + 2) + 24) = time1;
    }
  }
  return result;
}

uint64_t OZChannel::setValue(OZChannel *this, const CMTime *a2, double a3, int a4)
{
  var6 = this->var6;
  if (var6
    && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
    && OZChannelFolder::testFoldFlag(this->var6, 0x100000))
  {
    CMTime v10 = this->var6;
    if (v10) {
    uint64_t v11 = *(uint64_t (**)(const void *, OZChannel *, const CMTime *, __n128))(*(void *)v10 + 744);
    }
    v9.n128_f64[0] = a3;
    return v11(v10, this, a2, v9);
  }
  else
  {
    uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
    if ((result & 1) == 0)
    {
      if (!a4) {
        (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      }
      if (((*((uint64_t (**)(OZChannel *))this->var0 + 64))(this) & 1) != 0
        || (*(void *)&long long v18 = 0,
            uint64_t result = (*(uint64_t (**)(void, long long *))(**((void **)this->var14 + 1) + 208))(*((void *)this->var14 + 1), &v18), vabdd_f64(a3, *(double *)&v18) >= 0.0000001))
      {
        var14 = this->var14;
        if (var14 && *((unsigned char *)var14 + 32)) {
          OZChannelImpl::createLocalCopy(var14);
        }
        ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
        if (ChannelRootBase)
        {
          uint64_t v15 = ChannelRootBase;
          (*(void (**)(void *, OZChannel *, const CMTime *, double))(*(void *)ChannelRootBase + 728))(ChannelRootBase, this, a2, a3);
          if (((*((uint64_t (**)(OZChannel *, void))this->var0 + 69))(this, 0) & 1) == 0)
          {
            (*(void (**)(long long *__return_ptr, void *))(*(void *)v15 + 712))(&v18, v15);
            long long v20 = v18;
            uint64_t v21 = v19;
            if ((*(unsigned int (**)(void *, const CMTime *))(*(void *)v15 + 800))(v15, a2))
            {
              uint64_t v16 = *((void *)this->var14 + 1);
              (*((void (**)(long long *__return_ptr, OZChannel *, long long *))this->var0 + 41))(&v18, this, &v20);
              OZChannel::getValueAsDouble(this, MEMORY[0x1E4F1FA48], 0.0);
              (*(void (**)(uint64_t, long long *, void))(*(void *)v16 + 552))(v16, &v18, 0);
            }
          }
        }
        uint64_t v17 = *((void *)this->var14 + 1);
        (*((void (**)(long long *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v18, this, a2);
        (*(void (**)(uint64_t, long long *, void, double))(*(void *)v17 + 552))(v17, &v18, 0, a3);
        uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 99))(this);
        if (result) {
          return (*((uint64_t (**)(OZChannel *, const CMTime *))this->var0 + 100))(this, a2);
        }
      }
    }
  }
  return result;
}

double OZChannel::getInitialValue(OZChannel *this)
{
  double v2 = 0.0;
  (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 208))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setValue(OZChannel *this, const OZChannelBase *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    if (result)
    {
      uint64_t v5 = result;
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      unint64_t v11 = 0;
      (*(void (**)(void, unint64_t *))(**((void **)var14 + 1) + 264))(*((void *)var14 + 1), &v11);
      (*(void (**)(void))(**((void **)this->var14 + 1) + 256))();
      OZChannelImpl::copyCurveInterface(this->var14, *(OZCurve **)(*(void *)(v5 + 112) + 8));
      v7.n128_u64[0] = v11;
      (*(void (**)(__n128))(**((void **)this->var14 + 1) + 280))(v7);
      v8.n128_u64[0] = 0;
      uint64_t result = (*(uint64_t (**)(__n128))(**((void **)this->var14 + 1) + 272))(v8);
      double v9 = *((double *)this->var16 + 5);
      double v10 = *(double *)(*(void *)(v5 + 128) + 40);
      if (vabdd_f64(v9, v10) >= 0.0000001) {
        return (*(uint64_t (**)(void, double))(**((void **)this->var14 + 1) + 448))(*((void *)this->var14 + 1), v10 / v9);
      }
    }
  }
  return result;
}

uint64_t OZChannel::setValueOffsetByBehaviors(OZChannel *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble(this, a2, 0.0);
  double v7 = a3 - v6;
  double v12 = 0.0;
  uint64_t v8 = *((void *)this->var14 + 1);
  (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v11, this, a2);
  (*(void (**)(uint64_t, void *, double *, double))(*(void *)v8 + 624))(v8, v11, &v12, 0.0);
  v9.n128_f64[0] = v7 + v12;
  return (*((uint64_t (**)(OZChannel *, const CMTime *, void, __n128))this->var0 + 89))(this, a2, 0, v9);
}

uint64_t OZChannel::setValueAndIgnoreRecordOption(OZChannel *this, const CMTime *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v6 = *((void *)var14 + 1);
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v7, this, a2);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 544))(v6, v7, 1);
    uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 99))(this);
    if (result) {
      return (*((uint64_t (**)(OZChannel *, const CMTime *))this->var0 + 100))(this, a2);
    }
  }
  return result;
}

uint64_t OZChannel::setValue(OZChannel *this, const CMTime *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    if (ChannelRootBase)
    {
      double v7 = ChannelRootBase;
      if (((*((uint64_t (**)(OZChannel *, void))this->var0 + 69))(this, 0) & 1) == 0)
      {
        if ((*(unsigned int (**)(void *, const CMTime *))(*(void *)v7 + 800))(v7, a2))
        {
          uint64_t v8 = *((void *)this->var14 + 1);
          (*(void (**)(long long *__return_ptr, void *))(*(void *)v7 + 712))(&v10, v7);
          long long v12 = v10;
          uint64_t v13 = v11;
          (*((void (**)(void *__return_ptr, OZChannel *, long long *))this->var0 + 41))(v14, this, &v12);
          (*(void (**)(uint64_t, void *, void))(*(void *)v8 + 544))(v8, v14, 0);
        }
      }
    }
    uint64_t v9 = *((void *)this->var14 + 1);
    (*((void (**)(long long *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v10, this, a2);
    (*(void (**)(uint64_t, long long *, void))(*(void *)v9 + 544))(v9, &v10, 0);
    uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 99))(this);
    if (result) {
      return (*((uint64_t (**)(OZChannel *, const CMTime *))this->var0 + 100))(this, a2);
    }
  }
  return result;
}

uint64_t OZChannel::getValueAsInt(OZChannel *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble(this, a2, a3);
  return (int)v3;
}

uint64_t OZChannel::getValueAsUint(OZChannel *this, const CMTime *a2, double a3)
{
  OZChannel::getValueAsDouble(this, a2, a3);
  return v3;
}

uint64_t OZChannel::setDefaultValue(OZChannel *this, double a2)
{
  double v6 = 0.0;
  uint64_t result = (*(uint64_t (**)(void, double *))(**((void **)this->var14 + 1) + 192))(*((void *)this->var14 + 1), &v6);
  if (vabdd_f64(v6, a2) >= 0.0000001)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    (*(void (**)(void, double))(**((void **)var14 + 1) + 200))(*((void *)var14 + 1), a2);
    uint64_t result = OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000);
    if (result) {
      return (uint64_t)OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
    }
  }
  return result;
}

double OZChannel::getDefaultValue(OZChannel *this)
{
  double v2 = 0.0;
  (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 192))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setDefaultAtCurrentTime(OZChannel *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble(this, a2, 0.0);

  return OZChannel::setDefaultValue(this, v3);
}

uint64_t OZChannel::setDefaultToCurrentValue(OZChannel *this)
{
  OZChannel::getValueAsDouble(this, MEMORY[0x1E4F1FA48], 0.0);

  return OZChannel::setDefaultValue(this, v2);
}

uint64_t OZChannel::setInitialValue(OZChannel *this, double a2, char a3)
{
  double v8 = 0.0;
  uint64_t result = (*(uint64_t (**)(void, double *))(**((void **)this->var14 + 1) + 208))(*((void *)this->var14 + 1), &v8);
  if (vabdd_f64(v8, a2) >= 0.0000001)
  {
    if ((a3 & 1) == 0) {
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    }
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    return (*(uint64_t (**)(void, double))(**((void **)var14 + 1) + 216))(*((void *)var14 + 1), a2);
  }
  return result;
}

BOOL OZChannel::removeValue(OZChannel *this, const CMTime *a2)
{
  BOOL v4 = 0;
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    uint64_t v9 = 0;
    uint64_t v5 = *((void *)this->var14 + 1);
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v8, this, a2);
    (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v5 + 696))(v5, v8, &v9);
    BOOL v4 = v9 != 0;
    if (v9)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      (*(void (**)(void))(**((void **)var14 + 1) + 672))(*((void *)var14 + 1));
    }
  }
  return v4;
}

uint64_t OZChannel::removeAllValues(OZChannel *this, const CMTime *a2, uint64_t a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v8 = *((void *)var14 + 1);
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v9, this, a2);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 688))(v8, v9, a3);
  }
  return result;
}

BOOL OZChannel::moveValue(OZChannel *this, const CMTime *a2, const CMTime *a3, uint64_t a4)
{
  BOOL v8 = 0;
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    uint64_t v15 = 0;
    uint64_t v9 = *((void *)this->var14 + 1);
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v14, this, a2);
    (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v9 + 696))(v9, v14, &v15);
    uint64_t v10 = v15;
    BOOL v8 = v15 != 0;
    if (v15)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      uint64_t v12 = *((void *)var14 + 1);
      (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v14, this, a3);
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t, void, void))(*(void *)v12 + 656))(v12, v10, v14, a4, 0, 0);
    }
  }
  return v8;
}

uint64_t OZChannel::offsetChannel(OZChannel *this, const CMTime *a2, double a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v8 = *((void *)var14 + 1);
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v9, this, a2);
    return (*(uint64_t (**)(uint64_t, void *, double))(*(void *)v8 + 440))(v8, v9, a3);
  }
  return result;
}

uint64_t OZChannel::scaleChannel(OZChannel *this, double a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0 && fabs(a2 + -1.0) >= 0.0000001)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v7 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 448);
    v5.n128_f64[0] = a2;
    return v7(v5);
  }
  return result;
}

void OZChannel::copyKeyframesFromChannel(OZChannel *this, const CMTime *a2, OZChannelBase *a3)
{
  char isLocked = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if (!a3) {
    return;
  }
  if (isLocked) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  var14 = this->var14;
  if (var14 && *((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  double v10 = *((double *)v8->var16 + 5);
  memset(&v43, 0, sizeof(v43));
  (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v43, this, a2);
  OZChannel::getKeyframes(v8, 0, &v41);
  if (v42 != (unsigned char *)v41)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 1;
    uint64_t v13 = (CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      CMTime v40 = *v13;
      unint64_t v38 = 0;
      double v39 = 0.0;
      unint64_t v36 = 0;
      double v37 = 0.0;
      double v35 = 0.0;
      (*(void (**)(void))(**((void **)v8->var14 + 1) + 752))();
      (*(void (**)(void, void, unint64_t *, double *))(**((void **)v8->var14 + 1) + 1032))(*((void *)v8->var14 + 1), v41[v11], &v38, &v37);
      (*(void (**)(void, void, unint64_t *, double *))(**((void **)v8->var14 + 1) + 1040))(*((void *)v8->var14 + 1), v41[v11], &v36, &v35);
      uint64_t v14 = v41[v11];
      LODWORD(v45.value) = 0;
      (*(void (**)(void, uint64_t, CMTime *, void))(**((void **)v8->var14 + 1) + 1072))(*((void *)v8->var14 + 1), v14, &v45, 0);
      uint64_t value_low = LODWORD(v45.value);
      LODWORD(v45.value) = 0;
      (*(void (**)(void))(**((void **)v8->var14 + 1) + 840))();
      LOBYTE(v45.value) = 0;
      (*(void (**)(void))(**((void **)v8->var14 + 1) + 864))();
      int v16 = LOBYTE(v45.value);
      double v39 = v10 * v39;
      double v37 = v10 * v37;
      double v35 = v10 * v35;
      if (v12 == 1)
      {
        CMTime v45 = v43;
        CMTime v44 = v40;
        PC_CMTimeSaferSubtract(&v45, &v44, (uint64_t)&v34);
        CMTime v43 = v34;
      }
      v33 = 0;
      double v17 = *((double *)this->var16 + 5);
      uint64_t v18 = *((void *)this->var14 + 1);
      CMTime v45 = v43;
      CMTime v44 = v40;
      double v19 = PC_CMTimeSaferAdd(&v45, &v44, (uint64_t)&v34);
      (*(void (**)(uint64_t, CMTime *, void **, double))(*(void *)v18 + 696))(v18, &v34, &v33, v19);
      if (v33)
      {
        LOBYTE(v45.value) = 0;
        (*(void (**)(void, void *, CMTime *))(**((void **)this->var14 + 1) + 888))(*((void *)this->var14 + 1), v33, &v45);
        if (LOBYTE(v45.value)) {
          goto LABEL_26;
        }
      }
      CMTime v45 = v43;
      CMTime v44 = v40;
      PC_CMTimeSaferAdd(&v45, &v44, (uint64_t)&v34);
      OZChannel::setKeyframe(this, &v34, v39 / v17, 0);
      uint64_t v20 = *((void *)this->var14 + 1);
      CMTime v45 = v43;
      CMTime v44 = v40;
      double v21 = PC_CMTimeSaferAdd(&v45, &v44, (uint64_t)&v34);
      (*(void (**)(uint64_t, CMTime *, void **, double))(*(void *)v20 + 696))(v20, &v34, &v33, v21);
      OZChannel::setKeyframeFlags(this, v33);
      (*(void (**)(void, void *, BOOL, uint64_t))(**((void **)this->var14 + 1) + 856))(*((void *)this->var14 + 1), v33, v16 != 0, 1);
      (*(void (**)(void, void *, uint64_t, uint64_t))(**((void **)this->var14 + 1) + 1064))(*((void *)this->var14 + 1), v33, value_low, 1);
      CMTime v45 = v43;
      CMTime v44 = v40;
      double v22 = PC_CMTimeSaferAdd(&v45, &v44, (uint64_t)&v34);
      v45.CMTimeValue value = 0;
      (*(void (**)(void, CMTime *, CMTime *, double))(**((void **)this->var14 + 1) + 712))(*((void *)this->var14 + 1), &v34, &v45, v22);
      CMTimeValue value = v45.value;
      double v32 = 0.0;
      (*(void (**)(void, CMTimeValue, void, double *))(**((void **)this->var14 + 1) + 752))(*((void *)this->var14 + 1), v45.value, 0, &v32);
      CMTime v45 = v43;
      CMTime v44 = v40;
      double v24 = PC_CMTimeSaferAdd(&v45, &v44, (uint64_t)&v34);
      v45.CMTimeValue value = 0;
      (*(void (**)(void, CMTime *, CMTime *, double))(**((void **)this->var14 + 1) + 728))(*((void *)this->var14 + 1), &v34, &v45, v24);
      CMTimeValue v25 = v45.value;
      v45.CMTimeValue value = 0;
      (*(void (**)(void, CMTimeValue, void, CMTime *))(**((void **)this->var14 + 1) + 752))(*((void *)this->var14 + 1), v25, 0, &v45);
      if ((unint64_t)(v42 - (unsigned char *)v41) > 8 || value && vabdd_f64(v32, v39 / v17) >= 0.0000001)
      {
        v26.n128_u64[0] = v38;
        v27.n128_f64[0] = v37 / v17;
        v28 = (void (**)(__n128, __n128))(**((void **)this->var14 + 1) + 1016);
      }
      else
      {
        if (!v25) {
          goto LABEL_22;
        }
        v28 = (void (**)(__n128, __n128))(**((void **)this->var14 + 1) + 1024);
        v26.n128_u64[0] = 0;
        v27.n128_u64[0] = 0;
      }
      (*v28)(v26, v27);
      if ((unint64_t)(v42 - (unsigned char *)v41) > 8 || v25 && vabdd_f64(*(double *)&v45.value, v39 / v17) >= 0.0000001)
      {
        v26.n128_u64[0] = v36;
        v27.n128_f64[0] = v35 / v17;
        v29 = (void (**)(__n128, __n128))(**((void **)this->var14 + 1) + 1024);
        goto LABEL_25;
      }
LABEL_22:
      if (value)
      {
        v29 = (void (**)(__n128, __n128))(**((void **)this->var14 + 1) + 1016);
        v26.n128_u64[0] = 0;
        v27.n128_u64[0] = 0;
LABEL_25:
        (*v29)(v26, v27);
      }
LABEL_26:
      unint64_t v11 = v12;
      v30 = v41;
      ++v12;
      if (v11 >= (v42 - (unsigned char *)v41) >> 3)
      {
        if (v41) {
          goto LABEL_28;
        }
        return;
      }
    }
  }
  (*((void (**)(OZChannel *, void))this->var0 + 36))(this, 0);
  OZChannel::getValueAsDouble(v8, MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setInitialValue(this, v10 * v31 / *((double *)this->var16 + 5), 0);
  v30 = v41;
  if (v41)
  {
LABEL_28:
    v42 = v30;
    operator delete(v30);
  }
}

void sub_1B797E114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannel::getKeyframes@<X0>(OZChannel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = **((void **)this->var14 + 1);
  if (a2) {
    BOOL v4 = (uint64_t (**)(void))(v3 + 800);
  }
  else {
    BOOL v4 = (uint64_t (**)(void))(v3 + 792);
  }
  return (*v4)();
}

void sub_1B797E1D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannel::getKeyframe(OZChannel *this, void *a2, CMTime *a3, double *a4)
{
  return (*(uint64_t (**)(void, void *, CMTime *, double *))(**((void **)this->var14 + 1) + 752))(*((void *)this->var14 + 1), a2, a3, a4);
}

uint64_t OZChannel::getKeyframeInputTangents(OZChannel *this, void *a2, double *a3, double *a4, int a5)
{
  uint64_t v5 = **((void **)this->var14 + 1);
  if (a5) {
    return (*(uint64_t (**)(void))(v5 + 1000))();
  }
  else {
    return (*(uint64_t (**)(void))(v5 + 1032))();
  }
}

uint64_t OZChannel::getKeyframeOutputTangents(OZChannel *this, void *a2, double *a3, double *a4, int a5)
{
  uint64_t v5 = **((void **)this->var14 + 1);
  if (a5) {
    return (*(uint64_t (**)(void))(v5 + 1008))();
  }
  else {
    return (*(uint64_t (**)(void))(v5 + 1040))();
  }
}

uint64_t OZChannel::getKeyframeInterpolation(OZChannel *this, void *a2)
{
  unsigned int v3 = 0;
  (*(void (**)(void, void *, unsigned int *, void))(**((void **)this->var14 + 1) + 1072))(*((void *)this->var14 + 1), a2, &v3, 0);
  return v3;
}

uint64_t OZChannel::getKeyframeFlags(OZChannel *this, void *a2)
{
  unsigned int v3 = 0;
  (*(void (**)(void, void *, unsigned int *))(**((void **)this->var14 + 1) + 840))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getKeyframeEnabled(OZChannel *this, void *a2)
{
  unsigned __int8 v3 = 0;
  (*(void (**)(void, void *, unsigned __int8 *))(**((void **)this->var14 + 1) + 864))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::setKeyframe(OZChannel *this, const CMTime *a2, double a3, int a4)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v10 = **((void **)var14 + 1);
    if (a4)
    {
      unint64_t v11 = *(uint64_t (**)(__n128))(v10 + 552);
      v8.n128_f64[0] = a3;
    }
    else
    {
      unint64_t v11 = *(uint64_t (**)(__n128))(v10 + 568);
      v8.n128_f64[0] = a3;
    }
    return v11(v8);
  }
  return result;
}

uint64_t OZChannel::setKeyframeFlags(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 848);
    return v5();
  }
  return result;
}

uint64_t OZChannel::getPreviousEnabledKeyframe(OZChannel *this, const CMTime *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, const CMTime *, uint64_t *))(**((void **)this->var14 + 1) + 712))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getNextEnabledKeyframe(OZChannel *this, const CMTime *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, const CMTime *, uint64_t *))(**((void **)this->var14 + 1) + 728))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getTimeForValue(OZChannelBase *a1, uint64_t *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v25 = *((void *)a3 + 2);
  long long v24 = *a3;
  long long v26 = *(long long *)((char *)a3 + 24);
  uint64_t v27 = *((void *)a3 + 5);
  if (!*((void *)a1[1].var0 + 1)) {
    return 0;
  }
  uint64_t v10 = (long long *)((char *)a3 + 24);
  ChannelRootBase = OZChannelBase::getChannelRootBase(a1);
  if (ChannelRootBase)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)ChannelRootBase + 880))(&v22);
  }
  else
  {
    long long v22 = *a4;
    uint64_t v23 = *((void *)a4 + 2);
  }
  long long v20 = *a3;
  uint64_t v21 = *((void *)a3 + 2);
  (*((void (**)(long long *__return_ptr, OZChannelBase *, long long *))a1->var0 + 41))(&v24, a1, &v20);
  long long v26 = *v10;
  uint64_t v27 = *((void *)v10 + 2);
  uint64_t result = (*(uint64_t (**)(double))(**((void **)a1[1].var0 + 1) + 432))(a5);
  if (result)
  {
    uint64_t v13 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v14 = 0;
      unsigned int v15 = 1;
      do
      {
        uint64_t v16 = 3 * v14;
        (*((void (**)(long long *__return_ptr, OZChannelBase *, uint64_t))a1->var0 + 42))(&v20, a1, v13 + 24 * v14);
        uint64_t v17 = *a2 + 8 * v16;
        long long v18 = v20;
        *(void *)(v17 + 16) = v21;
        *(_OWORD *)uint64_t v17 = v18;
        uint64_t v14 = v15;
        uint64_t v13 = *a2;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v15++);
    }
    return 1;
  }
  return result;
}

uint64_t OZChannel::beginPlayback(OZChannel *this, const CMTime *a2, uint64_t a3, uint64_t a4, const CMTime *a5)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    return OZChannelImpl::beginPlayback(var14, a2, a3, a4, a5);
  }
  return result;
}

uint64_t OZChannel::endPlayback(OZChannel *this, const CMTime *a2)
{
  return OZChannelImpl::endPlayback(this->var14, a2);
}

uint64_t OZChannel::beginRecording(OZChannel *this, const CMTime *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(this->var14);
    }
    (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v6, this, a2);
    OZChannelImpl::beginRecording(var14, &v6);
    uint64_t result = (uint64_t)OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    if (result) {
      return (*(uint64_t (**)(uint64_t, OZChannel *, const CMTime *))(*(void *)result + 736))(result, this, a2);
    }
  }
  return result;
}

void *OZChannel::endRecording(OZChannel *this, const CMTime *a2)
{
  var14 = this->var14;
  (*((void (**)(CMTime *__return_ptr))this->var0 + 41))(&v6);
  OZChannelImpl::endRecording(var14, &v6);
  uint64_t result = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (result) {
    return (void *)(*(uint64_t (**)(void *, OZChannel *, const CMTime *))(*(void *)result + 744))(result, this, a2);
  }
  return result;
}

uint64_t OZChannel::updateCurrentRecordingTime(OZChannel *this, const CMTime *a2)
{
  var14 = this->var14;
  (*((void (**)(CMTime *__return_ptr))this->var0 + 41))(&v4);
  return OZChannelImpl::updateCurrentRecordingTime(var14, &v4);
}

OZChannelImpl *OZChannel::didRecordValue(OZChannel *this, const CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OZChannelImpl::didRecordValue(this->var14, (OZChannelBase *)this, a2, a4, a5, a6, a7, a8);
}

uint64_t OZChannel::isPlaying(OZChannel *this, unsigned int *a2, unsigned int *a3, CMTime *a4)
{
  return OZChannelImpl::isPlaying(this->var14, a2, a3, a4);
}

uint64_t OZChannel::isRecording(OZChannel *this)
{
  return OZChannelImpl::isRecording(this->var14);
}

void OZChannel::registerRecordingCallback(OZChannel *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3, char a4)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    OZChannelImpl::registerRecordingCallback(var14, a2, a3, a4);
  }
}

OZChannelImpl *OZChannel::unregisterRecordingCallback(OZChannel *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3)
{
  return OZChannelImpl::unregisterRecordingCallback(this->var14, a2, a3);
}

void OZChannel::setInfo(OZChannel *this, const OZChannelInfo *a2)
{
  var16 = this->var16;
  if (*((unsigned char *)var16 + 72)) {
    OZChannelInfo::createLocalCopy(var16);
  }

  OZChannelInfo::operator=((uint64_t)var16, (uint64_t)a2);
}

OZChannelInfo *OZChannel::replaceInfo(OZChannel *this, OZChannelInfo *a2)
{
  uint64_t result = this->var16;
  if (!*((unsigned char *)result + 72)) {
    uint64_t result = (OZChannelInfo *)(*(uint64_t (**)(OZChannelInfo *))(*(void *)result + 8))(result);
  }
  this->var16 = a2;
  if (*((unsigned char *)a2 + 72)) {
    this->var17 = a2;
  }
  return result;
}

uint64_t OZChannel::setMin(OZChannel *this, double a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    double v6 = 0.0;
    uint64_t result = (*(uint64_t (**)(void, double *))(**((void **)this->var14 + 1) + 264))(*((void *)this->var14 + 1), &v6);
    if (vabdd_f64(a2, v6) >= 0.0000001)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      uint64_t result = (*(uint64_t (**)(void, double))(**((void **)var14 + 1) + 280))(*((void *)var14 + 1), a2);
      if (*((double *)this->var16 + 2) < a2) {
        return (uint64_t)OZChannel::setSliderMin(this, a2);
      }
    }
  }
  return result;
}

OZChannelInfo *OZChannel::setSliderMin(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 2)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 2) = a2;
  }
  return result;
}

void OZChannel::setMax(OZChannel *this, double a2)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0)
  {
    double v5 = 0.0;
    (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 256))(*((void *)this->var14 + 1), &v5);
    if (vabdd_f64(a2, v5) >= 0.0000001)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      (*(void (**)(void, double))(**((void **)var14 + 1) + 272))(*((void *)var14 + 1), a2);
      if ((*((double (**)(OZChannel *))this->var0 + 101))(this) > a2) {
        OZChannel::setSliderMax(this, a2);
      }
    }
  }
}

OZChannelInfo *OZChannel::setSliderMax(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 1)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 1) = a2;
  }
  return result;
}

OZChannelInfo *OZChannel::setCoarseDelta(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 4)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 4) = a2;
  }
  return result;
}

OZChannelInfo *OZChannel::setFineDelta(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 3)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 3) = a2;
  }
  return result;
}

OZChannelInfo *OZChannel::setScale(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 5)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 5) = a2;
  }
  return result;
}

OZChannelInfo *OZChannel::setOffset(OZChannel *this, double a2)
{
  uint64_t result = this->var16;
  if (vabdd_f64(a2, *((double *)result + 6)) >= 0.0000001)
  {
    if (*((unsigned char *)result + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    *((double *)result + 6) = a2;
  }
  return result;
}

void OZChannel::setSuffix(OZChannel *this, PCString *a2)
{
  if (PCString::compare(a2, (const PCString *)this->var16 + 7))
  {
    var16 = this->var16;
    if (*((unsigned char *)var16 + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    double v5 = (PCString *)((char *)var16 + 56);
    PCString::set(v5, a2);
  }
}

void OZChannel::setSuffix(OZChannel *this, const char *a2)
{
  PCString::PCString(&v3, a2);
  OZChannel::setSuffix(this, &v3);
  PCString::~PCString(&v3);
}

void sub_1B797F194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZChannel::setSliderTransformerName(OZChannel *this, const __CFString *a2)
{
  if (CFStringCompare(*((CFStringRef *)this->var16 + 8), a2, 0x20uLL))
  {
    var16 = this->var16;
    if (*((unsigned char *)var16 + 72)) {
      OZChannelInfo::createLocalCopy(this->var17);
    }
    OZChannelInfo::setSliderTransformerName(var16, a2);
  }
}

void *OZChannel::isChannelAffectedByBehaviors(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (result)
  {
    double v5 = *(uint64_t (**)(void *, OZChannel *, uint64_t))(*(void *)result + 808);
    return (void *)v5(result, this, a2);
  }
  return result;
}

uint64_t OZChannel::getCurveInterface(OZChannel *this)
{
  return *((void *)this->var14 + 1);
}

uint64_t OZChannel::isAnimated(OZChannel *this)
{
  unsigned __int8 v2 = 1;
  (*(void (**)(void, unsigned __int8 *))(**((void **)this->var14 + 1) + 72))(*((void *)this->var14 + 1), &v2);
  return v2;
}

void OZChannel::setIsSpline(OZChannel *this, uint64_t a2)
{
  var6 = this->var6;
  if (var6
    && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
    && OZChannelFolder::testFoldFlag(this->var6, 0x100000))
  {
    double v5 = this->var6;
    if (v5) {
    double v6 = *(void (**)(const void *, OZChannel *, uint64_t, void))(*(void *)v5 + 784);
    }
    v6(v5, this, a2, 0);
  }
  else if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0 {
         && (*((unsigned int (**)(OZChannel *))this->var0 + 61))(this) != a2)
  }
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    if (a2)
    {
      __n128 v8 = (OZCurve *)*((void *)var14 + 1);
      uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZCurve::setIsSpline(v8, 1, v9);
    }
    else
    {
      CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
      if (ChannelRootBase) {
        (*(void (**)(CMTime *__return_ptr))(*(void *)ChannelRootBase + 848))(&v11);
      }
      OZCurve::setIsSpline(*((OZCurve **)this->var14 + 1), 0, &v11);
    }
  }
}

uint64_t OZChannel::isSpline(OZChannel *this)
{
  int v2 = 0;
  LODWORD(result) = (*(uint64_t (**)(void, int *))(**((void **)this->var14 + 1) + 152))(*((void *)this->var14 + 1), &v2);
  if (v2 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t OZChannel::isModified(OZChannel *this)
{
  if ((*((uint64_t (**)(OZChannel *, void))this->var0 + 69))(this, 0)) {
    return 1;
  }
  if ((*((uint64_t (**)(OZChannel *))this->var0 + 83))(this)) {
    return 1;
  }
  OZChannel::getValueAsDouble(this, MEMORY[0x1E4F1FA48], 0.0);
  double v3 = v2;
  double v5 = 0.0;
  (*(void (**)(void, double *))(**((void **)this->var14 + 1) + 192))(*((void *)this->var14 + 1), &v5);
  if (vabdd_f64(v3, v5) >= 0.0000001) {
    return 1;
  }
  else {
    return (uint64_t)OZChannel::isChannelAffectedByBehaviors(this, 0);
  }
}

uint64_t OZChannel::setKeyframable(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    if ((*((unsigned int (**)(OZChannel *))this->var0 + 64))(this) != a2
      || (uint64_t result = (*((uint64_t (**)(OZChannel *))this->var0 + 61))(this), result != a2))
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      (*(void (**)(void, uint64_t))(**((void **)var14 + 1) + 80))(*((void *)var14 + 1), a2);
      double v6 = (uint64_t (*)(OZChannel *, uint64_t))*((void *)this->var0 + 60);
      return v6(this, a2);
    }
  }
  return result;
}

uint64_t OZChannel::isKeyframable(OZChannel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 88))();
}

void OZChannel::keyframesWithChannels(void *a1, _OWORD *a2, uint64_t *a3)
{
  long long v5 = a2[1];
  long long v83 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)&range.start.CMTimeValue value = *a2;
  *(_OWORD *)&range.start.epoch = v5;
  uint64_t v84 = *((void *)a2 + 2);
  memset(&v82, 0, sizeof(v82));
  *(_OWORD *)&range.duration.timescale = v6;
  CMTimeRangeGetEnd(&v82, &range);
  uint64_t v80 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  uint64_t v7 = *(void *)(a1[14] + 8);
  (*(void (**)(unsigned char *__return_ptr, void *, long long *))(*a1 + 328))(time1, a1, &v83);
  if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v7 + 696))(v7, time1, &v80))
  {
    __n128 v8 = v78;
    if (v78 >= v79)
    {
      uint64_t v10 = (v78 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
LABEL_80:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      unint64_t v11 = (v79 - (unsigned char *)__p) >> 2;
      if (v11 <= v10 + 1) {
        unint64_t v11 = v10 + 1;
      }
      if ((unint64_t)(v79 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v79, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v10];
      unsigned int v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = v80;
      uint64_t v9 = v14 + 8;
      uint64_t v17 = (char *)__p;
      uint64_t v16 = v78;
      if (v78 != __p)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)__p;
      }
      __p = v14;
      v78 = v9;
      v79 = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(void *)v78 = v80;
      uint64_t v9 = v8 + 8;
    }
    v78 = v9;
  }
  while ((*(unsigned int (**)(void, long long *, long long *, void))(**(void **)(a1[14] + 8) + 736))(*(void *)(a1[14] + 8), &v83, &v83, 0))
  {
    *(_OWORD *)CMTime time1 = v83;
    *(void *)&time1[16] = v84;
    CMTime time2 = v82;
    if (CMTimeCompare((CMTime *)time1, &time2) > 0) {
      break;
    }
    uint64_t v19 = *(void *)(a1[14] + 8);
    (*(void (**)(unsigned char *__return_ptr, void *, long long *))(*a1 + 328))(time1, a1, &v83);
    if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v19 + 696))(v19, time1, &v80))
    {
      long long v20 = v78;
      if (v78 >= v79)
      {
        uint64_t v22 = (v78 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          goto LABEL_80;
        }
        unint64_t v23 = (v79 - (unsigned char *)__p) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v79 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v79, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        long long v26 = &v25[8 * v22];
        *(void *)long long v26 = v80;
        uint64_t v21 = v26 + 8;
        v28 = (char *)__p;
        uint64_t v27 = v78;
        if (v78 != __p)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          uint64_t v27 = (char *)__p;
        }
        __p = v26;
        v78 = v21;
        v79 = &v25[8 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)v78 = v80;
        uint64_t v21 = v20 + 8;
      }
      v78 = v21;
    }
  }
  v30 = __p;
  if (v78 == __p)
  {
    double v39 = v75;
  }
  else
  {
    uint64_t v31 = 0;
    unsigned int v32 = 0;
    do
    {
      uint64_t v33 = v30[v31];
      (*(void (**)(void, uint64_t, unsigned char *, unsigned char *))(**(void **)(a1[14] + 8) + 752))(*(void *)(a1[14] + 8), v33, time1, &time1[24]);
      (*(void (**)(void, uint64_t, long long *))(**(void **)(a1[14] + 8) + 864))(*(void *)(a1[14] + 8), v33, &v70);
      (*(void (**)(void, uint64_t, char *))(**(void **)(a1[14] + 8) + 952))(*(void *)(a1[14] + 8), v33, (char *)&v73 + 8);
      (*(void (**)(void, uint64_t, char *, void))(**(void **)(a1[14] + 8) + 1072))(*(void *)(a1[14] + 8), v33, (char *)&v73 + 4, 0);
      (*(void (**)(void, uint64_t, long long *))(**(void **)(a1[14] + 8) + 840))(*(void *)(a1[14] + 8), v33, &v73);
      (*(void (**)(void, uint64_t, char *))(**(void **)(a1[14] + 8) + 1056))(*(void *)(a1[14] + 8), v33, (char *)&v70 + 8);
      (*(void (**)(void, uint64_t, long long *, long long *))(**(void **)(a1[14] + 8) + 1000))(*(void *)(a1[14] + 8), v33, &v71, &v72);
      (*(void (**)(void, uint64_t, char *, char *))(**(void **)(a1[14] + 8) + 1008))(*(void *)(a1[14] + 8), v33, (char *)&v71 + 8, (char *)&v72 + 8);
      CMTime v34 = v75;
      if (v75 >= v76)
      {
        CMTime v40 = (char *)v74;
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v75 - (unsigned char *)v74) >> 5);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0x2AAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v76 - (unsigned char *)v74) >> 5) > v42) {
          unint64_t v42 = 0x5555555555555556 * ((v76 - (unsigned char *)v74) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v76 - (unsigned char *)v74) >> 5) >= 0x155555555555555) {
          unint64_t v43 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          CMTime v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_OZKeyframeInfo>>((uint64_t)&v76, v43);
          CMTime v40 = (char *)v74;
          CMTime v34 = v75;
        }
        else
        {
          CMTime v44 = 0;
        }
        CMTime v45 = &v44[96 * v41];
        long long v46 = *(_OWORD *)&time1[16];
        *(_OWORD *)CMTime v45 = *(_OWORD *)time1;
        *((_OWORD *)v45 + 1) = v46;
        long long v47 = v70;
        long long v48 = v71;
        long long v49 = v73;
        *((_OWORD *)v45 + 4) = v72;
        *((_OWORD *)v45 + 5) = v49;
        *((_OWORD *)v45 + 2) = v47;
        *((_OWORD *)v45 + 3) = v48;
        if (v34 == v40)
        {
          v55 = &v44[96 * v41];
        }
        else
        {
          v50 = &v44[96 * v41];
          do
          {
            long long v51 = *((_OWORD *)v34 - 5);
            *((_OWORD *)v50 - 6) = *((_OWORD *)v34 - 6);
            *((_OWORD *)v50 - 5) = v51;
            long long v52 = *((_OWORD *)v34 - 4);
            long long v53 = *((_OWORD *)v34 - 3);
            long long v54 = *((_OWORD *)v34 - 1);
            v55 = v50 - 96;
            *((_OWORD *)v50 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v50 - 1) = v54;
            *((_OWORD *)v50 - 4) = v52;
            *((_OWORD *)v50 - 3) = v53;
            v34 -= 96;
            v50 -= 96;
          }
          while (v34 != v40);
        }
        double v39 = v45 + 96;
        v74 = v55;
        v75 = v45 + 96;
        v76 = &v44[96 * v43];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        long long v35 = *(_OWORD *)&time1[16];
        *(_OWORD *)v75 = *(_OWORD *)time1;
        *((_OWORD *)v34 + 1) = v35;
        long long v36 = v70;
        long long v37 = v71;
        long long v38 = v73;
        *((_OWORD *)v34 + 4) = v72;
        *((_OWORD *)v34 + 5) = v38;
        *((_OWORD *)v34 + 2) = v36;
        *((_OWORD *)v34 + 3) = v37;
        double v39 = v34 + 96;
      }
      v75 = v39;
      v30 = __p;
      uint64_t v31 = ++v32;
    }
    while (v32 < (unint64_t)((v78 - (unsigned char *)__p) >> 3));
  }
  if (v39 != v74)
  {
    time2.CMTimeValue value = (CMTimeValue)a1;
    *(void *)&time2.timescale = 0;
    time2.epoch = 0;
    CMTimeValue v68 = 0;
    std::vector<_OZKeyframeInfo>::__init_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(&time2.timescale, v74, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (unsigned char *)v74) >> 5));
    unint64_t v56 = a3[2];
    unint64_t v57 = a3[1];
    if (v57 >= v56)
    {
      uint64_t v58 = (uint64_t)(v57 - *a3) >> 5;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v60 = v56 - *a3;
      if (v60 >> 4 > v59) {
        unint64_t v59 = v60 >> 4;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v61 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v59;
      }
      *(void *)&long long v70 = a3 + 2;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a3 + 2), v61);
      v63 = (CMTimeValue *)&v62[32 * v58];
      *(void *)CMTime time1 = v62;
      *(void *)&time1[8] = v63;
      *(void *)&time1[24] = &v62[32 * v64];
      CMTimeValue *v63 = time2.value;
      v63[1] = 0;
      v63[2] = 0;
      v63[3] = 0;
      *(_OWORD *)(v63 + 1) = *(_OWORD *)&time2.timescale;
      v63[3] = v68;
      *(void *)&time2.timescale = 0;
      time2.epoch = 0;
      CMTimeValue v68 = 0;
      *(void *)&time1[16] = v63 + 4;
      std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__swap_out_circular_buffer(a3, time1);
      uint64_t v65 = a3[1];
      std::__split_buffer<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::~__split_buffer((uint64_t)time1);
      v66 = *(void **)&time2.timescale;
      a3[1] = v65;
      if (v66)
      {
        time2.epoch = (CMTimeEpoch)v66;
        operator delete(v66);
      }
    }
    else
    {
      *(void *)(v57 + 8) = 0;
      *(void *)(v57 + 16) = 0;
      *(void *)(v57 + 24) = 0;
      *(CMTime *)unint64_t v57 = time2;
      *(void *)(v57 + 24) = v68;
      a3[1] = v57 + 32;
    }
    double v39 = (char *)v74;
  }
  if (v39)
  {
    v75 = v39;
    operator delete(v39);
  }
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B7980048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t OZChannel::setKeyframesWithInfo(OZChannelBase *a1, CMTime *a2, uint64_t *a3)
{
  uint64_t result = OZChannelBase::isLocked(a1, 0);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)a1[1].var0;
    if (result && *(unsigned char *)(result + 32)) {
      OZChannelImpl::createLocalCopy((OZChannelImpl *)result);
    }
    uint64_t v7 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v8 = 0;
      unsigned int v9 = 1;
      do
      {
        uint64_t v10 = v7 + 96 * v8;
        CMTime v34 = *(CMTime *)v10;
        uint64_t v35 = 0;
        double v11 = *(double *)(v10 + 24);
        double v13 = *(double *)(v10 + 40);
        double v12 = *(double *)(v10 + 48);
        double v14 = *(double *)(v10 + 56);
        double v15 = *(double *)(v10 + 64);
        double v16 = *(double *)(v10 + 72);
        double v17 = *(double *)(v10 + 88);
        CMTime v37 = v34;
        CMTimeEpoch v18 = *(void *)(v7 + 16);
        *(_OWORD *)&v36.CMTimeValue value = *(_OWORD *)v7;
        v36.epoch = v18;
        PC_CMTimeSaferSubtract(&v37, &v36, (uint64_t)&v32);
        CMTime v37 = *a2;
        CMTime v36 = v32;
        PC_CMTimeSaferAdd(&v37, &v36, (uint64_t)&v33);
        OZChannel::setKeyframe((OZChannel *)a1, &v33, v11, 0);
        uint64_t v19 = *((void *)a1[1].var0 + 1);
        uint64_t v20 = *a3;
        CMTime v37 = v34;
        CMTimeEpoch v21 = *(void *)(v20 + 16);
        *(_OWORD *)&v36.CMTimeValue value = *(_OWORD *)v20;
        v36.epoch = v21;
        PC_CMTimeSaferSubtract(&v37, &v36, (uint64_t)&v32);
        CMTime v37 = *a2;
        CMTime v36 = v32;
        v22.n128_f64[0] = PC_CMTimeSaferAdd(&v37, &v36, (uint64_t)&v33);
        (*(void (**)(uint64_t, CMTime *, uint64_t *, __n128))(*(void *)v19 + 696))(v19, &v33, &v35, v22);
        (*(void (**)(void))(**((void **)a1[1].var0 + 1) + 856))();
        (*(void (**)(double))(**((void **)a1[1].var0 + 1) + 960))(v17);
        (*(void (**)(void))(**((void **)a1[1].var0 + 1) + 1064))();
        (*(void (**)(void))(**((void **)a1[1].var0 + 1) + 848))();
        (*(void (**)(double))(**((void **)a1[1].var0 + 1) + 1048))(v13);
        uint64_t v23 = *a3;
        CMTime v37 = v34;
        CMTimeEpoch v24 = *(void *)(v23 + 16);
        *(_OWORD *)&v36.CMTimeValue value = *(_OWORD *)v23;
        v36.epoch = v24;
        PC_CMTimeSaferSubtract(&v37, &v36, (uint64_t)&v32);
        CMTime v37 = *a2;
        CMTime v36 = v32;
        v25.n128_f64[0] = PC_CMTimeSaferAdd(&v37, &v36, (uint64_t)&v33);
        v37.CMTimeValue value = 0;
        (*(void (**)(__n128))(**((void **)a1[1].var0 + 1) + 712))(v25);
        CMTimeValue value = v37.value;
        (*(void (**)(void))(**((void **)a1[1].var0 + 1) + 752))();
        uint64_t v27 = *a3;
        CMTime v37 = v34;
        CMTimeEpoch v28 = *(void *)(v27 + 16);
        *(_OWORD *)&v36.CMTimeValue value = *(_OWORD *)v27;
        v36.epoch = v28;
        PC_CMTimeSaferSubtract(&v37, &v36, (uint64_t)&v32);
        CMTime v37 = *a2;
        CMTime v36 = v32;
        v29.n128_f64[0] = PC_CMTimeSaferAdd(&v37, &v36, (uint64_t)&v33);
        v37.CMTimeValue value = 0;
        (*(void (**)(__n128))(**((void **)a1[1].var0 + 1) + 728))(v29);
        CMTimeValue v30 = v37.value;
        v37.CMTimeValue value = 0;
        uint64_t result = (*(uint64_t (**)(void))(**((void **)a1[1].var0 + 1) + 752))();
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) > 1 || value && vabdd_f64(0.0, v11) >= 0.0000001)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, double, double))(**((void **)a1[1].var0 + 1)
                                                                                       + 984))(*((void *)a1[1].var0 + 1), v35, 1, v12, v15);
        }
        else
        {
          if (!v30) {
            goto LABEL_16;
          }
          uint64_t result = (*(uint64_t (**)(void, CMTimeValue, uint64_t, double, double))(**((void **)a1[1].var0 + 1)
                                                                                           + 1024))(*((void *)a1[1].var0 + 1), value, 1, 0.0, 0.0);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= 1
          && (!v30 || vabdd_f64(*(double *)&v37.value, v11) < 0.0000001))
        {
LABEL_16:
          if (value) {
            uint64_t result = (*(uint64_t (**)(void, CMTimeValue, uint64_t, double, double))(**((void **)a1[1].var0
          }
                                                                                                + 1)
                                                                                             + 1016))(*((void *)a1[1].var0 + 1), v30, 1, 0.0, 0.0);
          goto LABEL_19;
        }
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, double, double))(**((void **)a1[1].var0 + 1)
                                                                                     + 992))(*((void *)a1[1].var0 + 1), v35, 1, v14, v16);
LABEL_19:
        uint64_t v8 = v9;
        uint64_t v7 = *a3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) > v9++);
    }
  }
  return result;
}

BOOL OZChannel::hasKeypoints(OZChannel *this)
{
  return (*(unsigned int (**)(void))(**((void **)this->var14 + 1) + 512))(*((void *)this->var14 + 1)) != 0;
}

BOOL OZChannel::hasMoreThanOneKeypoint(OZChannel *this)
{
  return (*(unsigned int (**)(void))(**((void **)this->var14 + 1) + 512))(*((void *)this->var14 + 1)) > 1;
}

uint64_t OZChannel::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  uint64_t v5 = 0;
  uint64_t v2 = *((void *)this->var14 + 1);
  (*((void (**)(void *__return_ptr))this->var0 + 41))(v4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v2 + 696))(v2, v4, &v5);
}

uint64_t OZChannel::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  uint64_t v5 = 0;
  uint64_t v2 = *((void *)this->var14 + 1);
  (*((void (**)(void *__return_ptr))this->var0 + 41))(v4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v2 + 696))(v2, v4, &v5);
}

uint64_t OZChannel::numberOfKeypointsAt(OZChannel *this, const CMTime *a2)
{
  uint64_t v5 = 0;
  uint64_t v2 = *((void *)this->var14 + 1);
  (*((void (**)(void *__return_ptr))this->var0 + 41))(v4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v2 + 696))(v2, v4, &v5);
}

uint64_t OZChannel::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  var6 = this->var6;
  if (var6
    && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
    && OZChannelFolder::testFoldFlag(this->var6, 0x100000))
  {
    uint64_t v5 = this->var6;
    if (v5) {
    long long v6 = *(uint64_t (**)(const void *, OZChannel *, const CMTime *, void))(*(void *)v5 + 752);
    }
    return v6(v5, this, a2, 0);
  }
  else
  {
    uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
    if ((result & 1) == 0)
    {
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      var14 = this->var14;
      if (var14 && *((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
        (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
      }
      uint64_t v9 = *((void *)this->var14 + 1);
      (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v10, this, a2);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 544))(v9, v10, 1);
    }
  }
  return result;
}

uint64_t OZChannel::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  var6 = this->var6;
  if (var6
    && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
    && OZChannelFolder::testFoldFlag(this->var6, 0x100000))
  {
    uint64_t v5 = this->var6;
    if (v5) {
    long long v6 = *(uint64_t (**)(const void *, OZChannel *, const CMTime *, void))(*(void *)v5 + 768);
    }
    return v6(v5, this, a2, 0);
  }
  else
  {
    uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
    if ((result & 1) == 0)
    {
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      uint64_t v11 = 0;
      uint64_t v9 = *((void *)var14 + 1);
      (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v10, this, a2);
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v9 + 696))(v9, v10, &v11);
      if (v11) {
        return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this->var14 + 1) + 672))(*((void *)this->var14 + 1), v11, 1);
      }
    }
  }
  return result;
}

uint64_t OZChannel::deleteKeypoints(OZChannel *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    long long v6 = *(uint64_t (**)(void))(**((void **)this->var14 + 1) + 680);
    return v6();
  }
  return result;
}

uint64_t OZChannel::previousKeypoint(OZChannel *this, CMTime *a2)
{
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v9 = 0;
  uint64_t v4 = *((void *)this->var14 + 1);
  (*((void (**)(long long *__return_ptr))this->var0 + 41))(&v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, long long *, uint64_t *))(*(void *)v4 + 744))(v4, &v7, &v10, &v9);
  if (v5)
  {
    (*((void (**)(long long *__return_ptr, OZChannel *, long long *))this->var0 + 42))(&v7, this, &v10);
    *(_OWORD *)&a2->CMTimeValue value = v7;
    a2->epoch = v8;
  }
  return v5;
}

uint64_t OZChannel::nextKeypoint(OZChannel *this, CMTime *a2)
{
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v9 = 0;
  uint64_t v4 = *((void *)this->var14 + 1);
  (*((void (**)(long long *__return_ptr))this->var0 + 41))(&v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, long long *, uint64_t *))(*(void *)v4 + 736))(v4, &v7, &v10, &v9);
  if (v5)
  {
    (*((void (**)(long long *__return_ptr, OZChannel *, long long *))this->var0 + 42))(&v7, this, &v10);
    *(_OWORD *)&a2->CMTimeValue value = v7;
    a2->epoch = v8;
  }
  return v5;
}

void *OZChannel::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  CMTime v21 = *a3;
  var6 = this->var6;
  if (var6
    && (*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
    && OZChannelFolder::testFoldFlag(this->var6, 0x100000))
  {
    double v12 = this->var6;
    if (v12) {
    return (void *)(*(uint64_t (**)(const void *, OZChannel *, const CMTime *, CMTime *, uint64_t, uint64_t, void))(*(void *)v12 + 760))(v12, this, a2, &v21, a4, a5, 0);
    }
  }
  else
  {
    uint64_t result = (void *)OZChannelBase::isLocked((OZChannelBase *)this, 0);
    if (result)
    {
      *(_OWORD *)a6 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
    }
    else
    {
      uint64_t v20 = 0;
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      var14 = this->var14;
      if (var14 && *((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
        (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
      }
      uint64_t v16 = *((void *)this->var14 + 1);
      (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v19, this, a2);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, CMTime *, uint64_t *))(*(void *)v16 + 696))(v16, &v19, &v20);
      uint64_t v17 = v20;
      if (v20)
      {
        uint64_t v18 = *((void *)this->var14 + 1);
        (*((void (**)(CMTime *__return_ptr, OZChannel *, CMTime *))this->var0 + 41))(&v19, this, &v21);
        (*(void (**)(uint64_t, uint64_t, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 656))(v18, v17, &v19, 1, a5, a4);
        (*(void (**)(void))(**((void **)this->var14 + 1) + 752))();
        uint64_t result = (*((void *(**)(CMTime *__return_ptr, OZChannel *, CMTime *))this->var0 + 42))(&v19, this, &v21);
        CMTime v21 = v19;
      }
      *(_OWORD *)a6 = *(_OWORD *)&v21.value;
      CMTimeEpoch epoch = v21.epoch;
    }
    *(void *)(a6 + 16) = epoch;
  }
  return result;
}

uint64_t OZChannel::retimeKeypoints(OZChannel *this, double a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t result = OZChannelBase::testFlag((OZChannelBase *)this, 0x20000);
    if ((result & 1) == 0)
    {
      CMTimeEpoch v8 = *(uint64_t (**)(__n128))(**((void **)this->var14 + 1) + 456);
      v7.n128_f64[0] = a2;
      return v8(v7);
    }
  }
  return result;
}

uint64_t OZChannel::adjustToFrameDuration(OZChannel *this, const CMTime *a2)
{
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  double v3 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 464);

  return v3();
}

void OZChannel::bake(OZChannel *this, const PCTimeRange *a2, const CMTime *a3)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) == 0) {
    (*(void (**)(void))(**((void **)this->var14 + 1) + 1144))();
  }
}

void sub_1B7981AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double OZChannel::getBakeParameters(OZChannel *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  CMTime v14 = *(CMTime *)a2;
  (*((void (**)(CMTime *__return_ptr))this->var0 + 41))(&v15);
  *a3 = v15;
  CMTime v15 = *(CMTime *)a2;
  CMTime v14 = *(CMTime *)((unsigned char *)a2 + 1);
  v10.n128_f64[0] = PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)v13);
  (*((void (**)(CMTime *__return_ptr, OZChannel *, unsigned char *, __n128))this->var0 + 41))(&v15, this, v13, v10);
  *a4 = v15;
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase) {
    (*(void (**)(CMTime *__return_ptr))(*(void *)ChannelRootBase + 880))(&v15);
  }
  else {
    CMTimeMake(&v15, 1, 30);
  }
  double result = *(double *)&v15.value;
  *a5 = v15;
  return result;
}

uint64_t OZChannel::simplify(OZChannel *this, const CMTime *a2, const CMTime *a3, const CMTime *a4, double a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v24 = 0.0;
    double v25 = 0.0;
    (*(void (**)(void, double *, void))(**((void **)var14 + 1) + 240))(*((void *)var14 + 1), &v25, 0);
    (*(void (**)(void, double *, void))(**((void **)this->var14 + 1) + 248))(*((void *)this->var14 + 1), &v24, 0);
    double v18 = vabdd_f64(v25, v24);
    if (v18 >= 0.0000001)
    {
      double v19 = a5 / 100.0 * v18;
      if (!a8)
      {
LABEL_10:
        uint64_t v20 = *((void *)this->var14 + 1);
        (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v23, this, a2);
        (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(v22, this, a3);
        v21.n128_u64[0] = *((void *)this->var16 + 5);
        return (*(uint64_t (**)(uint64_t, void *, void *, const CMTime *, uint64_t, uint64_t, double, __n128))(*(void *)v20 + 496))(v20, v23, v22, a4, a6, a7, v19, v21);
      }
    }
    else
    {
      double v19 = *((double *)this->var16 + 3);
      if (!a8) {
        goto LABEL_10;
      }
    }
    if (v19 > *((double *)this->var16 + 4)) {
      double v19 = *((double *)this->var16 + 4);
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t OZChannel::generateKeys(OZChannel *this)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v4 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 824);
    return v4();
  }
  return result;
}

BOOL OZChannel::getCurrentMinAndMax(OZChannel *this, CMTime *a2, CMTime *a3, unint64_t a4, unint64_t a5)
{
  BOOL v5 = (a4 | a5) != 0;
  if (a4 | a5)
  {
    OZChannelSegmentVisitor::OZChannelSegmentVisitor((OZChannelSegmentVisitor *)_8);
    _8[0].CMTimeValue value = (CMTimeValue)&unk_1F1103AB0;
    *(_OWORD *)&_8[0].timescale = xmmword_1B8379640;
    OZChannelSegmentVisitor::visitSegments(this, a2, a3, _8, v11);
    if (a4) {
      *(void *)a4 = *(void *)&_8[0].timescale;
    }
    if (a5) {
      *(void *)a5 = _8[0].epoch;
    }
    OZChannelBase::setRangeName((OZChannelBase *)_8, v12);
  }
  return v5;
}

void sub_1B7982090(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

OZChannelImpl *OZChannel::setOwnerChannel(OZChannel *this, OZChannel *a2)
{
  uint64_t result = this->var14;
  uint64_t v3 = *((void *)result + 1);
  if (*(OZChannel **)(v3 + 152) != a2)
  {
    if (*((unsigned char *)result + 32)) {
      OZChannelImpl::createLocalCopy(result);
    }
    *(void *)(v3 + 152) = a2;
  }
  return result;
}

uint64_t OZChannel::setParametric(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    char v6 = 0;
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this->var14 + 1) + 112))(*((void *)this->var14 + 1), &v6);
    if ((v6 != 0) != a2)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      return (*(uint64_t (**)(void, uint64_t))(**((void **)var14 + 1) + 104))(*((void *)var14 + 1), a2);
    }
  }
  return result;
}

uint64_t OZChannel::isParametric(OZChannel *this)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void, unsigned __int8 *))(**((void **)this->var14 + 1) + 112))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setDiscrete(OZChannel *this, uint64_t a2, char a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    char v8 = 0;
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this->var14 + 1) + 176))(*((void *)this->var14 + 1), &v8);
    if ((v8 != 0) != a2)
    {
      var14 = this->var14;
      if ((a3 & 1) == 0)
      {
        if (*((unsigned char *)var14 + 32)) {
          OZChannelImpl::createLocalCopy(var14);
        }
      }
      return (*(uint64_t (**)(void, uint64_t))(**((void **)var14 + 1) + 168))(*((void *)var14 + 1), a2);
    }
  }
  return result;
}

uint64_t OZChannel::isDiscrete(OZChannel *this)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void, unsigned __int8 *))(**((void **)this->var14 + 1) + 176))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setShouldCreateTangents(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    unsigned __int8 v6 = 0;
    uint64_t result = (*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this->var14 + 1) + 144))(*((void *)this->var14 + 1), &v6);
    if (v6 != a2)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      return (*(uint64_t (**)(void, uint64_t))(**((void **)var14 + 1) + 136))(*((void *)var14 + 1), a2);
    }
  }
  return result;
}

uint64_t OZChannel::reparametrizeChannel(OZChannel *this)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v4 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 472);
    return v4();
  }
  return result;
}

uint64_t OZChannel::setInterpolation(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    int v6 = 0;
    uint64_t result = (*(uint64_t (**)(void, int *))(**((void **)this->var14 + 1) + 304))(*((void *)this->var14 + 1), &v6);
    if (v6 != a2)
    {
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      BOOL v5 = this->var14;
      if (*((unsigned char *)v5 + 32)) {
        OZChannelImpl::createLocalCopy(v5);
      }
      return (*(uint64_t (**)(void, uint64_t))(**((void **)v5 + 1) + 296))(*((void *)v5 + 1), a2);
    }
  }
  return result;
}

uint64_t OZChannel::getInterpolation(OZChannel *this)
{
  unsigned int v2 = 0;
  (*(void (**)(void, unsigned int *))(**((void **)this->var14 + 1) + 304))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setCustomInterpolator(OZChannelBase *a1)
{
  uint64_t result = OZChannelBase::isLocked(a1, 0);
  if ((result & 1) == 0)
  {
    var0 = a1[1].var0;
    if (*((unsigned char *)var0 + 32)) {
      OZChannelImpl::createLocalCopy((OZChannelImpl *)var0);
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)var0[1] + 320);
    return v4();
  }
  return result;
}

uint64_t OZChannel::setExtrapolation(OZChannel *this, uint64_t a2, uint64_t a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    int v8 = 0;
    uint64_t result = (*(uint64_t (**)(void, int *, uint64_t))(**((void **)this->var14 + 1) + 336))(*((void *)this->var14 + 1), &v8, a3);
    if (v8 != a2)
    {
      (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)var14 + 1) + 328))(*((void *)var14 + 1), a2, a3);
    }
  }
  return result;
}

uint64_t OZChannel::getExtrapolation(OZChannel *this, uint64_t a2)
{
  unsigned int v3 = 0;
  (*(void (**)(void, unsigned int *, uint64_t))(**((void **)this->var14 + 1) + 336))(*((void *)this->var14 + 1), &v3, a2);
  return v3;
}

uint64_t OZChannel::closeParametricCurve(OZChannel *this)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    char v4 = 0;
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this->var14 + 1) + 128))(*((void *)this->var14 + 1), &v4);
    if (!v4)
    {
      var14 = this->var14;
      if (*((unsigned char *)var14 + 32)) {
        OZChannelImpl::createLocalCopy(var14);
      }
      return (*(uint64_t (**)(void))(**((void **)var14 + 1) + 120))(*((void *)var14 + 1));
    }
  }
  return result;
}

uint64_t OZChannel::isParametricCurveClosed(OZChannel *this)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void, unsigned __int8 *))(**((void **)this->var14 + 1) + 128))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::setUseRetimingExtrapolation(OZChannel *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)var14 + 1) + 344))(*((void *)var14 + 1), a2);
    *(void *)(*((void *)this->var14 + 1) + 152) = this;
  }
  return result;
}

uint64_t OZChannel::useRetimingExtrapolation(OZChannel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 352))();
}

uint64_t OZChannel::resetCurve(OZChannel *this)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    (*(void (**)(void))(**((void **)var14 + 1) + 184))(*((void *)var14 + 1));
    return OZChannel::resetLocalChannelImplementation(this);
  }
  return result;
}

uint64_t OZChannel::getKeyframeMinTime@<X0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 232))();
}

uint64_t OZChannel::getKeyframeMaxTime@<X0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 224))();
}

double OZChannel::getKeyframeMinValue(OZChannel *this, uint64_t a2)
{
  double v3 = 0.0;
  (*(void (**)(void, double *, uint64_t))(**((void **)this->var14 + 1) + 248))(*((void *)this->var14 + 1), &v3, a2);
  return v3;
}

double OZChannel::getKeyframeMaxValue(OZChannel *this, uint64_t a2)
{
  double v3 = 0.0;
  (*(void (**)(void, double *, uint64_t))(**((void **)this->var14 + 1) + 240))(*((void *)this->var14 + 1), &v3, a2);
  return v3;
}

double OZChannel::getCurveValue(OZChannel *this, const CMTime *a2, int a3)
{
  uint64_t v3 = **((void **)this->var14 + 1);
  if (a3) {
    (*(void (**)(double))(v3 + 616))(0.0);
  }
  else {
    (*(void (**)(double))(v3 + 624))(0.0);
  }
  return 0.0;
}

uint64_t OZChannel::getKeyframe(OZChannel *this, const CMTime *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, const CMTime *, uint64_t *))(**((void **)this->var14 + 1) + 696))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getKeyframeParametricRange@<X0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 288))();
}

uint64_t OZChannel::getSamples(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 112) + 8) + 368))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 112) + 8) + 376))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 112) + 8) + 392))();
}

uint64_t OZChannel::getSamples(OZChannel *this, double a2, double a3, unsigned int *a4, double **a5, double **a6, double a7)
{
  return (*(uint64_t (**)(void, unsigned int *, double **, double **, double, double, double))(**((void **)this->var14 + 1) + 384))(*((void *)this->var14 + 1), a4, a5, a6, a2, a3, a7);
}

uint64_t OZChannel::getSamples(OZChannel *this, void *a2, const CMTime *a3, const CMTime *a4, unsigned int *a5, CMTime **a6, double **a7)
{
  return (*(uint64_t (**)(void, void *, const CMTime *, const CMTime *, unsigned int *, CMTime **, double **))(**((void **)this->var14 + 1) + 400))(*((void *)this->var14 + 1), a2, a3, a4, a5, a6, a7);
}

uint64_t OZChannel::getSamples(OZChannel *this, const CMTime *a2, const CMTime *a3, unsigned int *a4, CMTime **a5, double **a6)
{
  return (*(uint64_t (**)(void, const CMTime *, const CMTime *, unsigned int *, CMTime **, double **))(**((void **)this->var14 + 1) + 408))(*((void *)this->var14 + 1), a2, a3, a4, a5, a6);
}

double OZChannel::getCurveValueForNode(OZChannel *this, const CMTime *a2, void *a3, double a4)
{
  double v5 = 0.0;
  (*(void (**)(void, const CMTime *, double *, void *, double))(**((void **)this->var14 + 1) + 632))(*((void *)this->var14 + 1), a2, &v5, a3, a4);
  return v5;
}

uint64_t OZChannel::setKeyframe(OZChannel *this, const CMTime *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 544);
    return v5();
  }
  return result;
}

uint64_t OZChannel::setKeyframe(OZChannel *this, void *a2, const CMTime *a3, double a4)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v9 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 560);
    v7.n128_f64[0] = a4;
    return v9(v7);
  }
  return result;
}

uint64_t OZChannel::appendKeyframe(OZChannel *this, const CMTime *a2, double a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    int v8 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 576);
    v6.n128_f64[0] = a3;
    return v8(v6);
  }
  return result;
}

uint64_t OZChannel::appendKeyframes(OZChannel *this, unsigned int a2, CMTime *a3, double *a4)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v7 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 584);
    return v7();
  }
  return result;
}

uint64_t OZChannel::setKeyframeValue(OZChannel *this, void *a2, double a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    int v8 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 592);
    v6.n128_f64[0] = a3;
    return v8(v6);
  }
  return result;
}

uint64_t OZChannel::setKeyframesValue(OZChannel *this, double a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v7 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 600);
    v5.n128_f64[0] = a2;
    return v7(v5);
  }
  return result;
}

uint64_t OZChannel::getNumberOfKeyframes(OZChannel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this->var14 + 1) + 512))();
}

uint64_t OZChannel::getNextEnabledKeyframe(OZChannel *this, void *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, void *, uint64_t *))(**((void **)this->var14 + 1) + 720))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getPreviousEnabledKeyframe(OZChannel *this, void *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, void *, uint64_t *))(**((void **)this->var14 + 1) + 704))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::getFirstEnabledKeyframe(OZChannel *this)
{
  uint64_t v2 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this->var14 + 1) + 768))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::getLastEnabledKeyframe(OZChannel *this)
{
  uint64_t v2 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this->var14 + 1) + 784))(*((void *)this->var14 + 1), &v2);
  return v2;
}

uint64_t OZChannel::hasDifferentValuesForRange(OZChannel *this, CMTimeRange *a2)
{
  return 0;
}

void sub_1B7983558(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannel::getNextKeyframe(OZChannel *this, const CMTime *a2, CMTime *a3, double *a4)
{
  return (*(uint64_t (**)(void, const CMTime *, CMTime *, double *))(**((void **)this->var14 + 1) + 736))(*((void *)this->var14 + 1), a2, a3, a4);
}

uint64_t OZChannel::getPreviousKeyframe(OZChannel *this, const CMTime *a2, CMTime *a3, double *a4)
{
  return (*(uint64_t (**)(void, const CMTime *, CMTime *, double *))(**((void **)this->var14 + 1) + 744))(*((void *)this->var14 + 1), a2, a3, a4);
}

uint64_t OZChannel::getFirstKeyframe(OZChannel *this, CMTime *a2, double *a3)
{
  return (*(uint64_t (**)(void, CMTime *, double *))(**((void **)this->var14 + 1) + 760))(*((void *)this->var14 + 1), a2, a3);
}

uint64_t OZChannel::getLastKeyframe(OZChannel *this, CMTime *a2, double *a3)
{
  return (*(uint64_t (**)(void, CMTime *, double *))(**((void **)this->var14 + 1) + 776))(*((void *)this->var14 + 1), a2, a3);
}

uint64_t OZChannel::deleteKeyframe(OZChannel *this, void *a2)
{
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0)) {
    return 0;
  }
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  __n128 v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 672);

  return v5();
}

uint64_t OZChannel::deleteAllKeyframes(OZChannel *this, const CMTime *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 688);
    return v5();
  }
  return result;
}

uint64_t OZChannel::moveKeyframe(OZChannel *this, void *a2, const CMTime *a3)
{
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0)) {
    return 0;
  }
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  __n128 v6 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 656);

  return v6();
}

uint64_t OZChannel::generateKeyframesFromDynamicCurve(OZChannel *this, const CMTime *a2, OZDynamicCurve *a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v6 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 488);
    return v6();
  }
  return result;
}

uint64_t OZChannel::linearTimeWarp(OZChannel *this, double a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    int v8 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 456);
    v6.n128_f64[0] = a2;
    return v8(v6);
  }
  return result;
}

uint64_t OZChannel::createCurveSegment(OZChannel *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  if ((OZChannelBase::isLocked((OZChannelBase *)this, 0) & 1) != 0 || !*((void *)this->var14 + 1)) {
    return 0;
  }
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  __n128 v6 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 520);

  return v6();
}

uint64_t OZChannel::setCurveSegmentValue(OZChannel *this, const CMTime *a2, double a3, int a4)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0 && *((void *)this->var14 + 1))
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v11 = *((void *)var14 + 1);
    if (a4)
    {
      unint64_t v12 = *((void *)this->var16 + 2);
      v13.n128_u64[0] = (*((double (**)(OZChannel *))this->var0 + 101))(this);
      CMTime v14 = *(uint64_t (**)(uint64_t, const CMTime *, uint64_t, __n128, __n128, __n128))(*(void *)v11 + 536);
      v15.n128_f64[0] = a3;
      v16.n128_u64[0] = v12;
      return v14(v11, a2, 1, v15, v16, v13);
    }
    else
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, const CMTime *, uint64_t, __n128))(*(void *)v11 + 528);
      uint64_t v18 = *((void *)var14 + 1);
      v9.n128_f64[0] = a3;
      return v17(v18, a2, 1, v9);
    }
  }
  return result;
}

uint64_t OZChannel::deriveKeyframe(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 928);
    return v5();
  }
  return result;
}

uint64_t OZChannel::smoothKeyframe(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    __n128 v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 936);
    return v5();
  }
  return result;
}

BOOL OZChannel::isSmoothKeyframe(OZChannel *this, void *a2)
{
  LODWORD(v6) = 0;
  (*(void (**)(void, void *, double *, void))(**((void **)this->var14 + 1) + 1072))(*((void *)this->var14 + 1), a2, &v6, 0);
  BOOL result = 1;
  if (LODWORD(v6) != 1)
  {
    if (LODWORD(v6) != 4) {
      return 0;
    }
    double v5 = 0.0;
    double v6 = 0.0;
    (*(void (**)(void, void *, double *, double *))(**((void **)this->var14 + 1) + 1000))(*((void *)this->var14 + 1), a2, &v6, &v5);
    if (fabs(v6) >= 0.0000001) {
      return 0;
    }
    if (fabs(v5) >= 0.0000001) {
      return 0;
    }
    (*(void (**)(void, void *, double *, double *))(**((void **)this->var14 + 1) + 1008))(*((void *)this->var14 + 1), a2, &v6, &v5);
    if (fabs(v6) >= 0.0000001 || fabs(v5) >= 0.0000001) {
      return 0;
    }
  }
  return result;
}

uint64_t OZChannel::setKeyframeInputTangents(OZChannel *this, void *a2, double a3, double a4, int a5)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v13 = **((void **)var14 + 1);
    if (a5)
    {
      CMTime v14 = *(uint64_t (**)(__n128, __n128))(v13 + 984);
      v10.n128_f64[0] = a3;
      v11.n128_f64[0] = a4;
    }
    else
    {
      CMTime v14 = *(uint64_t (**)(__n128, __n128))(v13 + 1016);
      v10.n128_f64[0] = a3;
      v11.n128_f64[0] = a4;
    }
    return v14(v10, v11);
  }
  return result;
}

uint64_t OZChannel::setKeyframeOutputTangents(OZChannel *this, void *a2, double a3, double a4, int a5)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    uint64_t v13 = **((void **)var14 + 1);
    if (a5)
    {
      CMTime v14 = *(uint64_t (**)(__n128, __n128))(v13 + 992);
      v10.n128_f64[0] = a3;
      v11.n128_f64[0] = a4;
    }
    else
    {
      CMTime v14 = *(uint64_t (**)(__n128, __n128))(v13 + 1024);
      v10.n128_f64[0] = a3;
      v11.n128_f64[0] = a4;
    }
    return v14(v10, v11);
  }
  return result;
}

uint64_t OZChannel::setKeyframeNormal(OZChannel *this, void *a2, double a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    int v8 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 960);
    v6.n128_f64[0] = a3;
    return v8(v6);
  }
  return result;
}

double OZChannel::getKeyframeNormal(OZChannel *this, void *a2)
{
  double v3 = 0.0;
  (*(void (**)(void, void *, double *))(**((void **)this->var14 + 1) + 952))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

double OZChannel::getKeyframeNormal(OZChannel *this, const CMTime *a2)
{
  double v3 = 0.0;
  (*(void (**)(void, const CMTime *, double *))(**((void **)this->var14 + 1) + 968))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::setKeyframeEnabled(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 856);
    return v5();
  }
  return result;
}

uint64_t OZChannel::setKeyframeTangentsBroken(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 896);
    return v5();
  }
  return result;
}

uint64_t OZChannel::setKeyframeInterpolation(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0)
  {
    var14 = this->var14;
    if (var14 && *((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    double v5 = *(uint64_t (**)(void))(**((void **)this->var14 + 1) + 1064);
    return v5();
  }
  return result;
}

uint64_t OZChannel::setCurveSegmentSpeed(OZChannel *this, void *a2)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0 && *((void *)this->var14 + 1))
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    double v5 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 1080);
    return v5();
  }
  return result;
}

uint64_t OZChannel::getCurveSegmentSpeed(OZChannel *this, void *a2)
{
  unsigned int v3 = 0;
  (*(void (**)(void, void *, unsigned int *))(**((void **)this->var14 + 1) + 1088))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::offsetCurveSegmentSpeed(OZChannel *this, void *a2, double a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 0);
  if ((result & 1) == 0 && *((void *)this->var14 + 1))
  {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
    var14 = this->var14;
    if (*((unsigned char *)var14 + 32)) {
      OZChannelImpl::createLocalCopy(var14);
    }
    int v8 = *(uint64_t (**)(__n128))(**((void **)var14 + 1) + 1096);
    v6.n128_f64[0] = a3;
    return v8(v6);
  }
  return result;
}

uint64_t OZChannel::appendCurveProcessingNode(OZChannel *this, void *a2)
{
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  unsigned int v3 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 1104);

  return v3();
}

uint64_t OZChannel::insertCurveProcessingNode(OZChannel *this, void *a2, void *a3)
{
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  char v4 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 1112);

  return v4();
}

uint64_t OZChannel::deleteCurveProcessingNode(OZChannel *this, void *a2)
{
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  unsigned int v3 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 1120);

  return v3();
}

uint64_t OZChannel::removeCurveProcessingNode(OZChannel *this, void *a2)
{
  var14 = this->var14;
  if (*((unsigned char *)var14 + 32)) {
    OZChannelImpl::createLocalCopy(var14);
  }
  unsigned int v3 = *(uint64_t (**)(void))(**((void **)var14 + 1) + 1128);

  return v3();
}

uint64_t OZChannel::getPreviousProcessingNode(OZChannel *this, void *a2)
{
  uint64_t v3 = 0;
  (*(void (**)(void, void *, uint64_t *))(**((void **)this->var14 + 1) + 1136))(*((void *)this->var14 + 1), a2, &v3);
  return v3;
}

uint64_t OZChannel::enumerateCurveProcessingNodes@<X0>(OZChannel *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return (*(uint64_t (**)(void, void *))(**((void **)this->var14 + 1) + 1144))(*((void *)this->var14 + 1), a2);
}

void sub_1B7984970(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannel::getNumberOfCurveProcessingNodes(OZChannel *this)
{
  unsigned int v2 = 0;
  (*(void (**)(void, unsigned int *))(**((void **)this->var14 + 1) + 1152))(*((void *)this->var14 + 1), &v2);
  return v2;
}

void OZChannel::visibleKeypoints(OZChannel *this@<X0>, CMTimeRange *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  long long v10 = *(_OWORD *)&a2->start.epoch;
  long long v66 = *(_OWORD *)&a2->start.value;
  long long v67 = v10;
  long long v68 = *(_OWORD *)&a2->duration.timescale;
  (*((void (**)(long long *__return_ptr))this->var0 + 41))(&v69);
  *(void *)&long long v67 = v70;
  long long v66 = v69;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v11 = *((void *)this->var14 + 1);
  long long v70 = v67;
  __p = 0;
  long long v71 = v68;
  (*(void (**)(void))(*(void *)v11 + 808))();
  std::vector<CMTime>::reserve((void **)a5, 0);
  long long v69 = *(_OWORD *)&a2->start.value;
  *(void *)&long long v70 = a2->start.epoch;
  if (a3 && (*((unsigned int (**)(OZChannel *, long long *, uint64_t))this->var0 + 78))(this, &v69, a4))
  {
    unint64_t v12 = a5[2];
    uint64_t v13 = a5[1];
    if (v13 >= v12)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a5) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_62;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a5) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v19);
      }
      else {
        uint64_t v20 = 0;
      }
      __n128 v21 = &v20[24 * v16];
      __n128 v22 = &v20[24 * v19];
      long long v23 = v69;
      *((void *)v21 + 2) = v70;
      *(_OWORD *)__n128 v21 = v23;
      __n128 v15 = v21 + 24;
      double v25 = *a5;
      double v24 = a5[1];
      if (v24 != *a5)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 24);
          *((void *)v21 - 1) = *((void *)v24 - 1);
          *(_OWORD *)(v21 - 24) = v26;
          v21 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        double v24 = *a5;
      }
      *a5 = v21;
      a5[1] = v15;
      a5[2] = v22;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      long long v14 = v69;
      *((void *)v13 + 2) = v70;
      *(_OWORD *)uint64_t v13 = v14;
      __n128 v15 = v13 + 24;
    }
    a5[1] = v15;
  }
  uint64_t v27 = __p;
  if (v64 != __p)
  {
    uint64_t v28 = 0;
    unsigned int v29 = 0;
    do
    {
      (*((void (**)(CMTime *__return_ptr, OZChannel *, uint64_t))this->var0 + 42))(&v62, this, (uint64_t)v27 + 40 * v28);
      uint64_t v31 = a5[1];
      CMTimeValue v30 = a5[2];
      if (v31 >= v30)
      {
        unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *a5) >> 3);
        unint64_t v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *a5) >> 3);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x555555555555555) {
          unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v37);
        }
        else {
          long long v38 = 0;
        }
        double v39 = &v38[24 * v34];
        long long v40 = *(_OWORD *)&v62.value;
        *((void *)v39 + 2) = v62.epoch;
        *(_OWORD *)double v39 = v40;
        unint64_t v42 = *a5;
        unint64_t v41 = a5[1];
        unint64_t v43 = v39;
        if (v41 != *a5)
        {
          do
          {
            long long v44 = *(_OWORD *)(v41 - 24);
            *((void *)v43 - 1) = *((void *)v41 - 1);
            *(_OWORD *)(v43 - 24) = v44;
            v43 -= 24;
            v41 -= 24;
          }
          while (v41 != v42);
          unint64_t v41 = *a5;
        }
        CMTime v33 = v39 + 24;
        *a5 = v43;
        a5[1] = v39 + 24;
        a5[2] = &v38[24 * v37];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        long long v32 = *(_OWORD *)&v62.value;
        *((void *)v31 + 2) = v62.epoch;
        *(_OWORD *)uint64_t v31 = v32;
        CMTime v33 = v31 + 24;
      }
      a5[1] = v33;
      uint64_t v27 = __p;
      uint64_t v28 = ++v29;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v64 - (unsigned char *)__p) >> 3) > v29);
  }
  if (a3)
  {
    long long v45 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v45;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)&a2->duration.timescale;
    CMTimeRangeGetEnd(&v62, &range);
    long long v69 = *(_OWORD *)&v62.value;
    *(void *)&long long v70 = v62.epoch;
    if ((*((unsigned int (**)(OZChannel *, long long *, void))this->var0 + 79))(this, &v69, a4))
    {
      long long v46 = a5[2];
      long long v47 = a5[1];
      if (v47 < v46)
      {
        long long v48 = v69;
        *((void *)v47 + 2) = v70;
        *(_OWORD *)long long v47 = v48;
        long long v49 = v47 + 24;
LABEL_57:
        a5[1] = v49;
        goto LABEL_58;
      }
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a5) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v46 - *a5) >> 3);
        if (2 * v52 > v51) {
          unint64_t v51 = 2 * v52;
        }
        if (v52 >= 0x555555555555555) {
          unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53) {
          long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v53);
        }
        else {
          long long v54 = 0;
        }
        v55 = &v54[24 * v50];
        unint64_t v56 = &v54[24 * v53];
        long long v57 = v69;
        *((void *)v55 + 2) = v70;
        *(_OWORD *)v55 = v57;
        long long v49 = v55 + 24;
        unint64_t v59 = *a5;
        uint64_t v58 = a5[1];
        if (v58 != *a5)
        {
          do
          {
            long long v60 = *(_OWORD *)(v58 - 24);
            *((void *)v55 - 1) = *((void *)v58 - 1);
            *(_OWORD *)(v55 - 24) = v60;
            v55 -= 24;
            v58 -= 24;
          }
          while (v58 != v59);
          uint64_t v58 = *a5;
        }
        *a5 = v55;
        a5[1] = v49;
        a5[2] = v56;
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_57;
      }
LABEL_62:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_58:
  if (__p)
  {
    uint64_t v64 = __p;
    operator delete(__p);
  }
}

void sub_1B7984F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  double v25 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CMTime>::reserve(void **a1, unint64_t a2)
{
  char v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    __n128 v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v3, a2);
    __n128 v7 = &v6[24 * v5];
    __n128 v9 = &v6[24 * v8];
    uint64_t v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__CFString *OZChannelDouble::getObjCWrapperName(OZChannelDouble *this)
{
  return @"CHChannelDouble";
}

__CFString *OZChannelAngle::getObjCWrapperName(OZChannelAngle *this)
{
  return @"CHChannelAngle";
}

__CFString *OZChannelUint32::getObjCWrapperName(OZChannelUint32 *this)
{
  return @"CHChannelUint32";
}

__CFString *OZChannelUint16::getObjCWrapperName(OZChannelUint16 *this)
{
  return @"CHChannelUint16";
}

__CFString *OZChannelShearAngle::getObjCWrapperName(OZChannelShearAngle *this)
{
  return @"CHChannelShearAngle";
}

__CFString *OZChannelAspectRatio::getObjCWrapperName(OZChannelAspectRatio *this)
{
  return @"CHChannelAspectRatio";
}

__CFString *OZChannelAspectRatioFootage::getObjCWrapperName(OZChannelAspectRatioFootage *this)
{
  return @"CHChannelAspectRatioFootage";
}

__CFString *OZChannelGammaFootage::getObjCWrapperName(OZChannelGammaFootage *this)
{
  return @"CHChannelGammaFootage";
}

__CFString *OZChannelSeed::getObjCWrapperName(OZChannelSeed *this)
{
  return @"CHChannelSeed";
}

__CFString *OZChannelDecibel::getObjCWrapperName(OZChannelDecibel *this)
{
  return @"CHChannelDecibel";
}

__CFString *OZChannelFrame::getObjCWrapperName(OZChannelFrame *this)
{
  return @"CHChannelFrame";
}

__CFString *OZChannelTimecode::getObjCWrapperName(OZChannelTimecode *this)
{
  return @"CHChannelTimecode";
}

void OZChannelDouble::~OZChannelDouble(OZChannel *this)
{
  OZChannel::~OZChannel(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelDouble::clone(OZChannelDouble *this)
{
}

void sub_1B7985234(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZChannelDouble::~OZChannelDouble(OZChannelDouble *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelAngle::clone(OZChannelAngle *this)
{
}

void sub_1B7985324(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelUint32::clone(OZChannelUint32 *this)
{
}

void sub_1B79853D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelUint16::clone(OZChannelUint16 *this)
{
}

void sub_1B798547C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelShearAngle::clone(OZChannelShearAngle *this)
{
}

void sub_1B7985528(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatio::clone(OZChannelAspectRatio *this)
{
}

void sub_1B79855D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatioFootage::clone(OZChannelAspectRatioFootage *this)
{
}

void sub_1B7985680(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelGammaFootage::clone(OZChannelGammaFootage *this)
{
}

void sub_1B798572C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelSeed::clone(OZChannelSeed *this)
{
}

void sub_1B79857D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelDecibel::clone(OZChannelDecibel *this)
{
}

void sub_1B7985884(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelFrame::clone(OZChannelFrame *this)
{
}

void sub_1B7985930(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelTimecode::clone(OZChannelTimecode *this)
{
}

void sub_1B79859DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void *std::vector<_OZKeyframeInfo>::__init_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __n128 v6 = result;
    uint64_t result = std::vector<_OZKeyframeInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B7985A60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_OZKeyframeInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_OZKeyframeInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_OZKeyframeInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

void anonymous namespace'::MinMaxValuesVisitor::~MinMaxValuesVisitor(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t anonymous namespace'::MinMaxValuesVisitor::visitConstant(uint64_t this, double a2, const CMTime *a3, const CMTime *a4)
{
  double v4 = *(double *)(this + 8);
  if (v4 >= a2) {
    double v4 = a2;
  }
  if (*(double *)(this + 16) > a2) {
    a2 = *(double *)(this + 16);
  }
  *(double *)(this + 8) = v4;
  *(double *)(this + 16) = a2;
  return this;
}

void anonymous namespace'::MinMaxValuesVisitor::visitLinear(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, char *a3, char *a4, const CMTime *a5, const CMTime *a6, const CMTime *a7, const CMTime *a8, __n128 a9)
{
  if (a3 && a4)
  {
    double v13 = a9.n128_f64[0];
    OZLinearInterpolator::OZLinearInterpolator((OZLinearInterpolator *)v25);
    OZLinearInterpolator::interpolate((OZLinearInterpolator *)v25, a2, MEMORY[0x1E4F1FA48], a3, a4, a5);
    double v18 = v17;
    OZLinearInterpolator::interpolate((OZLinearInterpolator *)v25, a2, MEMORY[0x1E4F1FA48], a3, a4, a6);
    double v19 = v18 + v13;
    double v21 = v20 + v13;
    OZLinearInterpolator::~OZLinearInterpolator((OZLinearInterpolator *)v25);
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4F1FA48];
    double v19 = (*(double (**)(OZSpline *, const CMTime *, void, void, const CMTime *, const CMTime *, __n128))(*(void *)a2 + 240))(a2, a7, MEMORY[0x1E4F1FA48], 0, a5, a6, a9);
    double v21 = (*(double (**)(OZSpline *, const CMTime *, uint64_t, void))(*(void *)a2 + 240))(a2, a8, v22, 0);
  }
  if (v19 <= v21) {
    double v23 = v19;
  }
  else {
    double v23 = v21;
  }
  if (v19 <= v21) {
    double v24 = v21;
  }
  else {
    double v24 = v19;
  }
  if (*((double *)this + 1) < v23) {
    double v23 = *((double *)this + 1);
  }
  if (v24 < *((double *)this + 2)) {
    double v24 = *((double *)this + 2);
  }
  *((double *)this + 1) = v23;
  *((double *)this + 2) = v24;
}

void sub_1B7985CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLinearInterpolator::~OZLinearInterpolator((OZLinearInterpolator *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MinMaxValuesVisitor::visitBezier(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, const CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v21 = 0.0;
  double v22 = 0.0;
  OZBezierInterpolator::OZBezierInterpolator((OZBezierInterpolator *)v23);
  CMTime time1 = *a5;
  CMTime time2 = *a6;
  int32_t v16 = CMTimeCompare(&time1, &time2);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZBezierInterpolator::getMinMaxValues((OZBezierInterpolator *)v23, a2, a3, a4, v17, v18, &v22, &v21);
  double v21 = v21 + a9;
  double v22 = v22 + a9;
  OZBezierInterpolator::~OZBezierInterpolator((OZBezierInterpolator *)v23);
  double v19 = v22;
  if (*((double *)this + 1) < v22) {
    double v19 = *((double *)this + 1);
  }
  double v20 = v21;
  if (v21 < *((double *)this + 2)) {
    double v20 = *((double *)this + 2);
  }
  *((double *)this + 1) = v19;
  *((double *)this + 2) = v20;
}

void sub_1B7985DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZBezierInterpolator::~OZBezierInterpolator((OZBezierInterpolator *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MinMaxValuesVisitor::visitCatmullRom(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, const CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v21 = 0.0;
  double v22 = 0.0;
  OZCatmullRomInterpolator::OZCatmullRomInterpolator((OZCatmullRomInterpolator *)v23);
  CMTime time1 = *a5;
  CMTime time2 = *a6;
  int32_t v16 = CMTimeCompare(&time1, &time2);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZBezierInterpolator::getMinMaxValues((OZBezierInterpolator *)v23, a2, a3, a4, v17, v18, &v22, &v21);
  double v21 = v21 + a9;
  double v22 = v22 + a9;
  OZCatmullRomInterpolator::~OZCatmullRomInterpolator((OZCatmullRomInterpolator *)v23);
  double v19 = v22;
  if (*((double *)this + 1) < v22) {
    double v19 = *((double *)this + 1);
  }
  double v20 = v21;
  if (v21 < *((double *)this + 2)) {
    double v20 = *((double *)this + 2);
  }
  *((double *)this + 1) = v19;
  *((double *)this + 2) = v20;
}

void sub_1B7985EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZCatmullRomInterpolator::~OZCatmullRomInterpolator((OZCatmullRomInterpolator *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::MinMaxValuesVisitor::visitEaseIn(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v23 = 0.0;
  double v24 = 0.0;
  OZInterpolator::OZInterpolator((OZInterpolator *)&v25);
  v25.var0 = (void **)&unk_1F1104C20;
  *(CMTime *)&v25.var5 = *a5;
  *(CMTime *)&v25.var1 = *a6;
  int32_t v16 = CMTimeCompare((CMTime *)&v25.var5, (CMTime *)&v25.var1);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZEaseInInterpolator::getMinMaxValues((uint64_t)&v25, (uint64_t)a2, a3, a4, v17, v18, &v24, &v23);
  double v23 = v23 + a9;
  double v24 = v24 + a9;
  uint64_t result = OZChannelBase::setRangeName(&v25, v19);
  double v21 = v24;
  if (*((double *)this + 1) < v24) {
    double v21 = *((double *)this + 1);
  }
  double v22 = v23;
  if (v23 < *((double *)this + 2)) {
    double v22 = *((double *)this + 2);
  }
  *((double *)this + 1) = v21;
  *((double *)this + 2) = v22;
  return result;
}

void sub_1B7986024(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t anonymous namespace'::MinMaxValuesVisitor::visitEaseOut(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v23 = 0.0;
  double v24 = 0.0;
  OZInterpolator::OZInterpolator((OZInterpolator *)&v25);
  v25.var0 = (void **)&unk_1F1104CB8;
  *(CMTime *)&v25.var5 = *a5;
  *(CMTime *)&v25.var1 = *a6;
  int32_t v16 = CMTimeCompare((CMTime *)&v25.var5, (CMTime *)&v25.var1);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZEaseInInterpolator::getMinMaxValues((uint64_t)&v25, (uint64_t)a2, a3, a4, v17, v18, &v24, &v23);
  double v23 = v23 + a9;
  double v24 = v24 + a9;
  uint64_t result = OZChannelBase::setRangeName(&v25, v19);
  double v21 = v24;
  if (*((double *)this + 1) < v24) {
    double v21 = *((double *)this + 1);
  }
  double v22 = v23;
  if (v23 < *((double *)this + 2)) {
    double v22 = *((double *)this + 2);
  }
  *((double *)this + 1) = v21;
  *((double *)this + 2) = v22;
  return result;
}

void sub_1B7986154(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void anonymous namespace'::MinMaxValuesVisitor::visitEase(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v21 = 0.0;
  double v22 = 0.0;
  OZLinearInterpolator::OZLinearInterpolator((OZLinearInterpolator *)&v23);
  double v23 = &unk_1F1104B88;
  CMTime time1 = *a5;
  CMTime time2 = *a6;
  int32_t v16 = CMTimeCompare(&time1, &time2);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZLinearInterpolator::getMinMaxValues((uint64_t)&v23, (uint64_t)a2, a3, a4, v17, v18, &v22, &v21);
  double v21 = v21 + a9;
  double v22 = v22 + a9;
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v23);
  double v19 = v22;
  if (*((double *)this + 1) < v22) {
    double v19 = *((double *)this + 1);
  }
  double v20 = v21;
  if (v21 < *((double *)this + 2)) {
    double v20 = *((double *)this + 2);
  }
  *((double *)this + 1) = v19;
  *((double *)this + 2) = v20;
}

void sub_1B7986284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MinMaxValuesVisitor::visitAccelerate(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v21 = 0.0;
  double v22 = 0.0;
  OZLinearInterpolator::OZLinearInterpolator((OZLinearInterpolator *)&v23);
  double v23 = &unk_1F11046E8;
  CMTime time1 = *a5;
  CMTime time2 = *a6;
  int32_t v16 = CMTimeCompare(&time1, &time2);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZLinearInterpolator::getMinMaxValues((uint64_t)&v23, (uint64_t)a2, a3, a4, v17, v18, &v22, &v21);
  double v21 = v21 + a9;
  double v22 = v22 + a9;
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v23);
  double v19 = v22;
  if (*((double *)this + 1) < v22) {
    double v19 = *((double *)this + 1);
  }
  double v20 = v21;
  if (v21 < *((double *)this + 2)) {
    double v20 = *((double *)this + 2);
  }
  *((double *)this + 1) = v19;
  *((double *)this + 2) = v20;
}

void sub_1B79863B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MinMaxValuesVisitor::visitDecelerate(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v21 = 0.0;
  double v22 = 0.0;
  OZLinearInterpolator::OZLinearInterpolator((OZLinearInterpolator *)&v23);
  double v23 = &unk_1F1104AF0;
  CMTime time1 = *a5;
  CMTime time2 = *a6;
  int32_t v16 = CMTimeCompare(&time1, &time2);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZLinearInterpolator::getMinMaxValues((uint64_t)&v23, (uint64_t)a2, a3, a4, v17, v18, &v22, &v21);
  double v21 = v21 + a9;
  double v22 = v22 + a9;
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v23);
  double v19 = v22;
  if (*((double *)this + 1) < v22) {
    double v19 = *((double *)this + 1);
  }
  double v20 = v21;
  if (v21 < *((double *)this + 2)) {
    double v20 = *((double *)this + 2);
  }
  *((double *)this + 1) = v19;
  *((double *)this + 2) = v20;
}

void sub_1B79864E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::MinMaxValuesVisitor::visitExponential(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v23 = 0.0;
  double v24 = 0.0;
  OZInterpolator::OZInterpolator((OZInterpolator *)&v25);
  v25.var0 = (void **)&unk_1F1104D50;
  *(CMTime *)&v25.var5 = *a5;
  *(CMTime *)&v25.var1 = *a6;
  int32_t v16 = CMTimeCompare((CMTime *)&v25.var5, (CMTime *)&v25.var1);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZEaseInInterpolator::getMinMaxValues((uint64_t)&v25, (uint64_t)a2, a3, a4, v17, v18, &v24, &v23);
  double v23 = v23 + a9;
  double v24 = v24 + a9;
  uint64_t result = OZChannelBase::setRangeName(&v25, v19);
  double v21 = v24;
  if (*((double *)this + 1) < v24) {
    double v21 = *((double *)this + 1);
  }
  double v22 = v23;
  if (v23 < *((double *)this + 2)) {
    double v22 = *((double *)this + 2);
  }
  *((double *)this + 1) = v21;
  *((double *)this + 2) = v22;
  return result;
}

void sub_1B7986614(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t anonymous namespace'::MinMaxValuesVisitor::visitLogarithmic(_anonymous_namespace_::MinMaxValuesVisitor *this, OZSpline *a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, const CMTime *a7, const CMTime *a8, double a9)
{
  double v23 = 0.0;
  double v24 = 0.0;
  OZInterpolator::OZInterpolator((OZInterpolator *)&v25);
  v25.var0 = (void **)&unk_1F1105018;
  *(CMTime *)&v25.var5 = *a5;
  *(CMTime *)&v25.var1 = *a6;
  int32_t v16 = CMTimeCompare((CMTime *)&v25.var5, (CMTime *)&v25.var1);
  if (v16 <= 0) {
    double v17 = a5;
  }
  else {
    double v17 = a6;
  }
  if (v16 <= 0) {
    double v18 = a6;
  }
  else {
    double v18 = a5;
  }
  OZEaseInInterpolator::getMinMaxValues((uint64_t)&v25, (uint64_t)a2, a3, a4, v17, v18, &v24, &v23);
  double v23 = v23 + a9;
  double v24 = v24 + a9;
  uint64_t result = OZChannelBase::setRangeName(&v25, v19);
  double v21 = v24;
  if (*((double *)this + 1) < v24) {
    double v21 = *((double *)this + 1);
  }
  double v22 = v23;
  if (v23 < *((double *)this + 2)) {
    double v22 = *((double *)this + 2);
  }
  *((double *)this + 1) = v21;
  *((double *)this + 2) = v22;
  return result;
}

void sub_1B7986744(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>,std::reverse_iterator<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void OZCurve::OZCurve(OZCurve *this, double a2, double a3, double a4, double a5)
{
  *(void *)this = &unk_1F1103B40;
  uint64_t v6 = (OZSplineNode *)((char *)this + 40);
  OZConstantNode::OZConstantNode((OZConstantNode *)((char *)this + 16), a5);
  OZSplineNode::OZSplineNode(v6, this);
  *((void *)this + 13) = 0;
  operator new();
}

void sub_1B7986C98(_Unwind_Exception *a1)
{
  OZSplineNode::~OZSplineNode(v2);
  OZConstantNode::~OZConstantNode(v1);
  _Unwind_Resume(a1);
}

void OZCurve::OZCurve(OZCurve *this, const OZCurve *a2)
{
  *(void *)this = &unk_1F1103B40;
  double v4 = (OZSplineNode *)((char *)this + 40);
  OZConstantNode::OZConstantNode((OZConstantNode *)((char *)this + 16), 0.0);
  OZSplineNode::OZSplineNode(v4, this);
  *((void *)this + 13) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  uint64_t v5 = *((void *)a2 + 20);
  if (!*(unsigned char *)(v5 + 44)) {
    operator new();
  }
  *((void *)this + 20) = v5;
  operator new();
}

void sub_1B7986E28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v3, 0x1000C40C6C45C81);
  OZSplineNode::~OZSplineNode(v2);
  OZConstantNode::~OZConstantNode(v1);
  _Unwind_Resume(a1);
}

void OZCurve::cloneTree(OZCurve *this, const OZCurve *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a2 + 14);
  uint64_t v3 = *v2;
  if (v2[1] != *v2)
  {
    LODWORD(v6) = 0;
    do
    {
      uint64_t v7 = (void **)*((void *)this + 14);
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)v3 + 128))();
      uint64_t v9 = (uint64_t *)v7[1];
      unint64_t v10 = (unint64_t)v7[2];
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v12 = ((char *)v9 - (unsigned char *)*v7) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v10 - (void)*v7;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          int32_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 2), v15);
        }
        else {
          int32_t v16 = 0;
        }
        double v17 = (uint64_t *)&v16[8 * v12];
        *double v17 = v8;
        uint64_t v11 = v17 + 1;
        double v19 = (char *)*v7;
        double v18 = (char *)v7[1];
        if (v18 != *v7)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *--double v17 = v20;
          }
          while (v18 != v19);
          double v18 = (char *)*v7;
        }
        *uint64_t v7 = v17;
        v7[1] = v11;
        v7[2] = &v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v9 = v8;
        uint64_t v11 = v9 + 1;
      }
      v7[1] = v11;
      unint64_t v6 = (v6 + 1);
      v3 += 8;
    }
    while (v6 < (uint64_t)(*(void *)(*((void *)a2 + 14) + 8) - **((void **)a2 + 14)) >> 3);
  }
}

void OZCurve::~OZCurve(OZCurve *this)
{
  *(void *)this = &unk_1F1103B40;
  uint64_t v2 = *((void *)this + 14);
LABEL_2:
  uint64_t v3 = *(void **)v2;
  while (1)
  {
    double v4 = *(void **)(v2 + 8);
    if (v3 == v4) {
      break;
    }
    uint64_t v5 = *(v4 - 1);
    *(void *)(v2 + 8) = v4 - 1;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      uint64_t v2 = *((void *)this + 14);
      goto LABEL_2;
    }
  }
  if (v3)
  {
    *(void *)(v2 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1BA9BFBA0](v2, 0x80C40D6874129);
  *((void *)this + 14) = 0;
  uint64_t v6 = *((void *)this + 13);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *((void *)this + 13) = 0;
  }
  if (!*(unsigned char *)(*((void *)this + 20) + 44))
  {
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 20) = 0;
  }
  OZSplineNode::~OZSplineNode((OZSplineNode *)((char *)this + 40));
  OZConstantNode::~OZConstantNode((OZConstantNode *)((char *)this + 16));
}

__n128 OZCurve::operator=(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  uint64_t v5 = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  if (*(unsigned char *)(v5 + 44))
  {
    if (!*(unsigned char *)(v6 + 44))
    {
      MEMORY[0x1BA9BFBA0]();
      *(void *)(a1 + 160) = 0;
      uint64_t v5 = *(void *)(a2 + 160);
    }
    *(void *)(a1 + 160) = v5;
  }
  else
  {
    if (*(unsigned char *)(v6 + 44)) {
      operator new();
    }
    OZSplineState::operator=(v6, v5, a3);
  }
  OZConstantNode::operator=(a1 + 16, a2 + 16);
  uint64_t v7 = a1 + 40;
  OZSplineNode::operator=((OZSplineNode *)(a1 + 40), a2 + 40);
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    if (!v9) {
      operator new();
    }
    OZRecordingNode::operator=(v9, v8);
  }
  else if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    *(void *)(a1 + 104) = 0;
  }
  int v10 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 168) = v10;
  if (v10)
  {
    if (v10 != 1) {
      uint64_t v7 = *(void *)(a1 + 104);
    }
  }
  else
  {
    uint64_t v7 = a1 + 16;
  }
  *(void *)(a1 + 8) = v7;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = result;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  return result;
}

void sub_1B7987280(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C406D9F4237);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::operator==(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 120) != *(double *)(a2 + 120)
    || *(double *)(a1 + 128) != *(double *)(a2 + 128)
    || !OZConstantNode::operator==(a1 + 16)
    || *(unsigned __int8 *)(a1 + 136) != *(unsigned __int8 *)(a2 + 136)
    || *(unsigned __int8 *)(a1 + 137) != *(unsigned __int8 *)(a2 + 137)
    || *(unsigned __int8 *)(a1 + 138) != *(unsigned __int8 *)(a2 + 138)
    || !OZConstantNode::operator==(a1 + 40)
    || !OZSplineState::operator==(*(unsigned __int8 **)(a1 + 160), *(unsigned __int8 **)(a2 + 160), v4, v5))
  {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 136);

  return v6();
}

uint64_t OZCurve::setSplineState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4 && !*(unsigned char *)(v4 + 44)) {
    MEMORY[0x1BA9BFBA0]();
  }
  *(void *)(a1 + 160) = a2;
  uint64_t v5 = (PVInstructionGraphContext *)(a1 + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache(v5);
  if (result)
  {
    uint64_t result = PVInstructionGraphContext::HGNodeCache(v5);
    *(void *)(result + 168) = a2;
  }
  return result;
}

uint64_t OZCurve::createLocalSplineState(OZCurve *this)
{
  *((void *)this + 20) = OZSplineState::createLocalCopy(*((void *)this + 20));
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return *((void *)this + 20);
  }
  uint64_t v2 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  uint64_t result = *((void *)this + 20);
  *(void *)(v2 + 168) = result;
  return result;
}

uint64_t OZSplineState::createLocalCopy(uint64_t this)
{
  if (*(unsigned char *)(this + 44)) {
    operator new();
  }
  return this;
}

void sub_1B79874C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1000C40C6C45C81);
  _Unwind_Resume(a1);
}

double OZCurve::setRootNode(OZCurve *this, const CMTime *a2, double a3)
{
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  *((void *)this + 1) = (char *)this + 40;
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || (uint64_t v6 = PVInstructionGraphContext::HGNodeCache(v5),
        ((*(void *)(v6 + 24) - *(void *)(v6 + 16)) & 0x7FFFFFFF8) == 0))
  {
    *((double *)this + 6) = a3;
  }
  double result = *((double *)this + 4);
  *((double *)this + 7) = result;
  *((double *)this + 3) = a3;
  *((_DWORD *)this + 42) = 1;
  return result;
}

uint64_t OZCurve::getCurrentRangeU(OZCurve *this, CMTime *a2)
{
  if (a2)
  {
    (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 112))(&v4);
    *a2 = v4;
  }
  return 1;
}

uint64_t OZCurve::getCurrentMaxValueV(OZCurve *this, double *a2, uint64_t a3)
{
  *a2 = (*(double (**)(void, uint64_t))(**((void **)this + 1) + 144))(*((void *)this + 1), a3);
  return 1;
}

uint64_t OZCurve::getCurrentMinValueV(OZCurve *this, double *a2, uint64_t a3)
{
  *a2 = (*(double (**)(void, uint64_t))(**((void **)this + 1) + 152))(*((void *)this + 1), a3);
  return 1;
}

uint64_t OZCurve::getCurrentMaxValueU(OZCurve *this, CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 160))(&v4);
  *a2 = v4;
  return 1;
}

uint64_t OZCurve::getCurrentMinValueU(OZCurve *this, CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 168))(&v4);
  *a2 = v4;
  return 1;
}

uint64_t OZCurve::getCurveDefaultValue(OZCurve *this, double *a2)
{
  if (a2) {
    *a2 = (*(double (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  }
  return 1;
}

uint64_t OZCurve::getCurveInitialValue(OZCurve *this, double *a2)
{
  if (a2)
  {
    double v4 = (*(double (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
    double v5 = *((double *)this + 16);
    if (v4 <= v5) {
      double v5 = v4;
    }
    if (v4 >= *((double *)this + 15)) {
      double v6 = v5;
    }
    else {
      double v6 = *((double *)this + 15);
    }
    *a2 = v6;
  }
  return 1;
}

uint64_t OZCurve::setCurveToDefault(OZCurve *this)
{
  return 1;
}

void OZCurve::setIsSpline(OZCurve *this, int a2, const CMTime *a3)
{
  int v4 = *((_DWORD *)this + 42);
  if (a2)
  {
    if (!v4)
    {
      (*(void (**)(void, void, const CMTime *, double, double))(**((void **)this + 1) + 16))(*((void *)this + 1), MEMORY[0x1E4F1FA48], a3, 0.0, 0.0);
      OZCurve::setRootNode(this, v5, v6);
    }
  }
  else if (v4 == 1)
  {
    double v7 = OZSplineNode::solveNode((OZSplineNode *)((char *)this + 40), a3, 0.0, 0.0);
    *((double *)this + 6) = v7;
    uint64_t v8 = *((void *)this + 7);
    *((double *)this + 3) = v7;
    *((void *)this + 4) = v8;
    *((void *)this + 1) = (char *)this + 16;
    *((_DWORD *)this + 42) = 0;
  }
}

BOOL OZCurve::isAnimated(OZCurve *this)
{
  BOOL result = 0;
  if (*((unsigned char *)this + 138))
  {
    if (*(unsigned char *)(OZCoreGlobals::getInstance((OZCoreGlobals *)this) + 8)) {
      return 1;
    }
    uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
    if (PVInstructionGraphContext::HGNodeCache(v3))
    {
      uint64_t v4 = PVInstructionGraphContext::HGNodeCache(v3);
      if (((*(void *)(v4 + 24) - *(void *)(v4 + 16)) & 0x7FFFFFFF8) != 0) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t OZCurve::setCurveKeyframable(OZCurve *this, char a2)
{
  *((unsigned char *)this + 138) = a2;
  return 1;
}

uint64_t OZCurve::isCurveKeyframable(OZCurve *this)
{
  return *((unsigned __int8 *)this + 138);
}

uint64_t OZCurve::getAbsoluteMaxValueV(OZCurve *this, double *a2)
{
  *a2 = *((double *)this + 16);
  return 1;
}

uint64_t OZCurve::getAbsoluteMinValueV(OZCurve *this, double *a2)
{
  *a2 = *((double *)this + 15);
  return 1;
}

uint64_t OZCurve::setAbsoluteMaxValueV(OZCurve *this, double a2)
{
  *((double *)this + 16) = a2;
  return 1;
}

uint64_t OZCurve::setAbsoluteMinValueV(OZCurve *this, double a2)
{
  *((double *)this + 15) = a2;
  return 1;
}

BOOL OZCurve::isCurveAnimated(OZCurve *this, BOOL *a2)
{
  BOOL v4 = 1;
  if (!*(unsigned char *)(OZCoreGlobals::getInstance((OZCoreGlobals *)this) + 8))
  {
    if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
      || (uint64_t v5 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)),
          ((*(void *)(v5 + 24) - *(void *)(v5 + 16)) & 0x7FFFFFFF8) == 0))
    {
      BOOL v4 = 0;
    }
  }
  *a2 = v4;

  return OZCurve::isAnimated(this);
}

BOOL OZCurve::getCurveType(OZCurve *this, unsigned int *a2)
{
  if (a2) {
    *a2 = (*((_DWORD *)this + 42) - 1) < 2;
  }
  return a2 != 0;
}

uint64_t OZCurve::setCurveType(OZCurve *this, int a2)
{
  uint64_t v2 = 0;
  if (!a2) {
    goto LABEL_5;
  }
  if (a2 == 3 || a2 == 1)
  {
    LODWORD(v2) = 1;
LABEL_5:
    OZCurve::setIsSpline(this, v2, MEMORY[0x1E4F1FA48]);
    return 1;
  }
  return v2;
}

uint64_t OZCurve::setCurveDeriveTangents(OZCurve *this, int a2)
{
  if ((*(unsigned char *)(*((void *)this + 20) + 2) != 0) != a2)
  {
    char v2 = a2;
    uint64_t LocalSplineState = OZCurve::createLocalSplineState(this);
    *((void *)this + 20) = LocalSplineState;
    *(unsigned char *)(LocalSplineState + 2) = v2;
  }
  return 1;
}

uint64_t OZCurve::isCurveDeriveTangents(OZCurve *this, BOOL *a2)
{
  *a2 = *(unsigned char *)(*((void *)this + 20) + 2);
  return 1;
}

OZCurve *OZCurve::setTreeProperties(OZCurve *this)
{
  *((_WORD *)this + 68) = 1;
  uint64_t v1 = (uint64_t *)*((void *)this + 14);
  uint64_t v2 = *v1;
  if (v1[1] != *v1)
  {
    uint64_t v3 = this;
    do
    {
      if (((*(uint64_t (**)(void))(**(void **)v2 + 176))() & 1) == 0) {
        *((unsigned char *)v3 + 136) = 0;
      }
      this = (OZCurve *)(*(uint64_t (**)(void))(**(void **)v2 + 184))();
      if (this) {
        *((unsigned char *)v3 + 137) = 1;
      }
      v2 += 8;
    }
    while (v2 != *(void *)(*((void *)v3 + 14) + 8));
  }
  return this;
}

uint64_t OZCurve::processCurve(OZCurve *this, OZCurveNodeParam *a2, double *a3, void *a4)
{
  if (!a4)
  {
    __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    operator new();
  }
  BOOL v4 = (void ***)*((void *)this + 14);
  double v6 = *v4;
  uint64_t v5 = v4[1];
  if (v6 != v5)
  {
    do
    {
      double v7 = *v6;
      v6 += *v6 != a4;
    }
    while (v6 != v5 && v7 != a4);
    if (v7 == a4)
    {
      __p = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      operator new();
    }
  }
  return 0;
}

void sub_1B7988354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<OZCurveNode *,OZCurveNodeParam *>>::reserve(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t OZCurve::processTree(OZCurve *this, OZCurveNodeParam *a2, CMTime **a3, double **a4)
{
  CMTime v16 = *(CMTime *)((unsigned char *)a2 + 4);
  double v6 = (uint64_t *)*((void *)this + 14);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v8 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void **)(v7 - 8);
  }
  uint64_t v10 = OZCurve::processCurve(this, a2, (double *)a3, v9);
  if (a3 && *((_DWORD *)a2 + 36))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = &(*a3)[v11];
      long long v14 = *(_OWORD *)&v16.value;
      v13->CMTimeEpoch epoch = v16.epoch;
      *(_OWORD *)&v13->CMTimeValue value = v14;
      CMTime v18 = v16;
      CMTime v17 = *(CMTime *)((unsigned char *)a2 + 5);
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v16);
      ++v12;
      ++v11;
    }
    while (v12 < *((unsigned int *)a2 + 36));
  }
  return v10;
}

uint64_t OZCurve::processTree(OZCurve *this, OZCurveNodeParam *a2, CMTime **a3, double **a4, void *a5)
{
  CMTime v13 = *(CMTime *)((unsigned char *)a2 + 4);
  uint64_t v7 = OZCurve::processCurve(this, a2, (double *)a3, a5);
  if (a3 && *a3 && *((_DWORD *)a2 + 36))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = &(*a3)[v8];
      long long v11 = *(_OWORD *)&v13.value;
      v10->CMTimeEpoch epoch = v13.epoch;
      *(_OWORD *)&v10->CMTimeValue value = v11;
      CMTime v15 = v13;
      CMTime v14 = *(CMTime *)((unsigned char *)a2 + 5);
      PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)&v13);
      ++v9;
      ++v8;
    }
    while (v9 < *((unsigned int *)a2 + 36));
  }
  return v7;
}

BOOL OZCurve::getSplineSamplesAndIgnoreLinear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = (PVInstructionGraphContext *)(a1 + 40);
  uint64_t v12 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(a1 + 40));
  if (v12)
  {
    uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 80))(v13, a2, a3, a4, a5, a6);
  }
  return v12 != 0;
}

uint64_t OZCurve::getCurveDerivativesSamples(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(a1 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 64))(v11, a2, a3, a4, a5, a6, MEMORY[0x1E4F1FA48]);
  return 1;
}

uint64_t OZCurve::getCurveSamples(OZCurve *a1, unsigned int *a2, uint64_t a3, uint64_t a4, Float64 a5, Float64 a6)
{
  __int16 v29 = 1;
  uint64_t v30 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  CMTime v31 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v32 = v31;
  int v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  CMTime v36 = v31;
  CMTime v37 = v31;
  uint64_t v28 = 0;
  if (a4) {
    operator new[]();
  }
  OZFigTimeForChannelSeconds(&v27, a5, 0x40000);
  CMTime v36 = v27;
  int v38 = *a2;
  OZFigTimeForChannelSeconds(&v27, a6, 0x40000);
  CMTime v37 = v27;
  HIBYTE(v29) = 0;
  uint64_t v39 = 0;
  uint64_t v30 = 0;
  v27.CMTimeValue value = 0;
  if (a3) {
    operator new[]();
  }
  OZCurve::processTree(a1, (OZCurveNodeParam *)&v29, 0, &v28);
  if (v27.value)
  {
    std::vector<double>::reserve(0, *a2);
    if (*a2)
    {
      unint64_t v10 = 0;
      do
      {
        CMTimeValue v11 = v27.value + 24 * v10;
        CMTimeEpoch v12 = *(void *)(v11 + 16);
        *(_OWORD *)&v26.CMTimeValue value = *(_OWORD *)v11;
        v26.CMTimeEpoch epoch = v12;
        double Seconds = CMTimeGetSeconds(&v26);
        double v14 = Seconds;
        CMTime v15 = (char *)MEMORY[8];
        if (MEMORY[8] >= MEMORY[0x10])
        {
          CMTime v17 = (char *)MEMORY[0];
          uint64_t v18 = (uint64_t)(MEMORY[8] - MEMORY[0]) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = MEMORY[0x10] - MEMORY[0];
          if ((uint64_t)(MEMORY[0x10] - MEMORY[0]) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            double v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(16, v21);
            CMTime v17 = (char *)MEMORY[0];
            CMTime v15 = (char *)MEMORY[8];
          }
          else
          {
            double v22 = 0;
          }
          double v23 = &v22[8 * v18];
          *(double *)double v23 = v14;
          CMTime v16 = v23 + 8;
          while (v15 != v17)
          {
            uint64_t v24 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          MEMORY[0] = v23;
          MEMORY[8] = v16;
          MEMORY[0x10] = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *MEMORY[8] = Seconds;
          CMTime v16 = v15 + 8;
        }
        MEMORY[8] = v16;
        ++v10;
      }
      while (v10 < *a2);
    }
    if (v27.value) {
      MEMORY[0x1BA9BFB70](v27.value, 0x1000C80504FFAC1);
    }
    v27.CMTimeValue value = 0;
  }
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v29);
  return 1;
}

void sub_1B7988B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    CMTimeValue v11 = (char *)a1[1];
    CMTimeEpoch v12 = v7;
    if (v11 != *a1)
    {
      CMTimeEpoch v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t OZCurve::getCurveSamples(OZCurve *a1, long long *a2, long long *a3, int *a4, uint64_t a5, uint64_t a6)
{
  __int16 v8 = 1;
  uint64_t v9 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v12 = v10;
  uint64_t v13 = v11;
  int v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v18 = v11;
  long long v17 = v10;
  long long v19 = v10;
  uint64_t v20 = v11;
  uint64_t v7 = 0;
  if (a6) {
    operator new[]();
  }
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  int v21 = *a4;
  long long v19 = *a3;
  uint64_t v20 = *((void *)a3 + 2);
  uint64_t v22 = 0;
  HIBYTE(v8) = 0;
  uint64_t v9 = 0;
  if (a5) {
    operator new[]();
  }
  OZCurve::processTree(a1, (OZCurveNodeParam *)&v8, 0, &v7);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v8);
  return 1;
}

void sub_1B7989028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::getCurveSamples(OZCurve *a1, void *a2, long long *a3, long long *a4, int *a5, uint64_t a6, uint64_t a7)
{
  __int16 v8 = 1;
  uint64_t v9 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v12 = v10;
  uint64_t v13 = v11;
  int v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v18 = v11;
  long long v17 = v10;
  long long v19 = v10;
  uint64_t v20 = v11;
  if (a7) {
    operator new[]();
  }
  long long v17 = *a3;
  uint64_t v18 = *((void *)a3 + 2);
  int v21 = *a5;
  long long v19 = *a4;
  uint64_t v20 = *((void *)a4 + 2);
  uint64_t v22 = 0;
  HIBYTE(v8) = 0;
  uint64_t v9 = 0;
  if (a6) {
    operator new[]();
  }
  OZCurve::processCurve(a1, (OZCurveNodeParam *)&v8, (double *)a3, a2);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v8);
  return 1;
}

void sub_1B7989450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::getCurveSamples(OZCurve *this, Float64 a2, Float64 a3, unsigned int *a4, double **a5, double **a6, double a7)
{
  __int16 v15 = 1;
  double v16 = 0.0;
  int v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v18 = v17;
  unsigned int v24 = 0;
  OZChannelBase v25 = 0;
  char v26 = 0;
  CMTime v22 = v17;
  CMTime v23 = v17;
  OZFigTimeForChannelSeconds(&v14, a2, 0x40000);
  CMTime v22 = v14;
  unsigned int v24 = *a4;
  OZFigTimeForChannelSeconds(&v14, a3, 0x40000);
  CMTime v23 = v14;
  OZChannelBase v25 = *a6;
  HIBYTE(v15) = 0;
  double v16 = a7;
  if (a5) {
    operator new[]();
  }
  OZCurve::processTree(this, (OZCurveNodeParam *)&v15, 0, a6);
  *a4 = v24;
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v15);
  return 1;
}

void sub_1B7989658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::getCurveSamples(OZCurve *this, void *a2, const CMTime *a3, const CMTime *a4, unsigned int *a5, CMTime **a6, double **a7)
{
  __int16 v9 = 1;
  int v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  long long v11 = *MEMORY[0x1E4F1FA48];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v13 = v11;
  uint64_t v14 = v12;
  char v22 = 0;
  CMTime v18 = *a3;
  unsigned int v20 = *a5;
  CMTime v19 = *a4;
  char v21 = *a7;
  uint64_t v10 = 0;
  OZCurve::processTree(this, (OZCurveNodeParam *)&v9, a6, a7, a2);
  *a5 = v20;
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v9);
  return 1;
}

void sub_1B7989734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::getCurveSamples(OZCurve *this, const CMTime *a2, const CMTime *a3, unsigned int *a4, CMTime **a5, double **a6)
{
  v9[0] = 1;
  int v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  long long v11 = *MEMORY[0x1E4F1FA48];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v13 = v11;
  uint64_t v14 = v12;
  char v23 = 0;
  CMTime v18 = *a2;
  unsigned int v21 = *a4;
  long long v7 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  long long v19 = v7;
  char v22 = *a6;
  v9[1] = 0;
  uint64_t v10 = 0;
  OZCurve::processTree(this, (OZCurveNodeParam *)v9, a5, a6);
  *a4 = v21;
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)v9);
  return 1;
}

void sub_1B7989804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  _Unwind_Resume(a1);
}

void OZCurve::getValue(OZCurve *this, const CMTime *a2, void *a3, __n128 a4, __n128 a5)
{
  uint64_t v36 = 0;
  if (a3)
  {
    if (*((unsigned char *)this + 136))
    {
      if (*((unsigned char *)this + 137))
      {
        __int16 v8 = (void ***)*((void *)this + 14);
        __int16 v9 = *v8;
        uint64_t v10 = v8[1];
        int v11 = 1;
        if (v9 != v10)
        {
          do
          {
            uint64_t v12 = *v9;
            BOOL v13 = *v9 == a3;
            v9 += *v9 != a3;
            if (!v13) {
              ++v11;
            }
            BOOL v13 = v9 == v10 || v12 == a3;
          }
          while (!v13);
        }
        operator new[]();
      }
      v17.n128_u64[0] = (*(double (**)(void, const CMTime *, double, double))(**((void **)this + 1) + 16))(*((void *)this + 1), a2, 0.0, 0.0);
      CMTime v18 = (void **)**((void **)this + 14);
      long long v19 = *v18;
      if (*v18 != a3)
      {
        unsigned int v20 = v18 + 1;
        do
        {
          v17.n128_u64[0] = (*(double (**)(void *, const CMTime *, double, __n128))(*(void *)v19 + 16))(v19, a2, 0.0, v17);
          unsigned int v21 = *v20++;
          long long v19 = v21;
        }
        while (v21 != a3);
      }
      v16.n128_u64[0] = 0;
      (*(void (**)(void *, const CMTime *, __n128, __n128))(*(void *)a3 + 16))(a3, a2, v16, v17);
    }
    else
    {
      __int16 v22 = 1;
      uint64_t v23 = 0;
      int v26 = 0;
      uint64_t v27 = 0;
      char v28 = 0;
      CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime v25 = v24;
      int v33 = 0;
      char v34 = 0;
      CMTime v31 = v24;
      long long v14 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      long long v29 = v14;
      int v32 = 1;
      CMTimeMake(&v35, 1, 1);
      CMTime v31 = v35;
      int v33 = &v36;
      OZCurve::processCurve(this, (OZCurveNodeParam *)&v22, v15, a3);
      OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v22);
    }
  }
  else
  {
    a4.n128_u64[0] = 0;
    a5.n128_u64[0] = 0;
    (*(void (**)(void, const CMTime *, __n128, __n128))(**((void **)this + 1) + 16))(*((void *)this + 1), a2, a4, a5);
  }
}

void sub_1B7989C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZCurve::getValue(OZCurve *this, const CMTime *a2, double a3)
{
  uint64_t v29 = 0;
  double v6 = (uint64_t *)*((void *)this + 14);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
    (*(void (**)(void, const CMTime *, double, double))(**((void **)this + 1) + 16))(*((void *)this + 1), a2, a3, 0.0);
  }
  else if (*((unsigned char *)this + 136))
  {
    if (*((unsigned char *)this + 137))
    {
      is_mul_ok((((v8 - v7) << 29) + 0x100000000) >> 32, 0x18uLL);
      operator new[]();
    }
    double v11 = (*(double (**)(void, const CMTime *, double, double))(**((void **)this + 1) + 16))(*((void *)this + 1), a2, a3, 0.0);
    uint64_t v12 = (uint64_t **)*((void *)this + 14);
    for (i = *v12; i != v12[1]; ++i)
    {
      uint64_t v14 = *i;
      double v11 = (*(double (**)(uint64_t, const CMTime *, double, double))(*(void *)v14 + 16))(v14, a2, a3, v11);
      uint64_t v12 = (uint64_t **)*((void *)this + 14);
    }
  }
  else
  {
    __int16 v15 = 1;
    uint64_t v16 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v18 = v17;
    int v26 = 0;
    char v27 = 0;
    CMTime v24 = v17;
    long long v9 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    long long v22 = v9;
    int v25 = 1;
    CMTimeMake(&v28, 1, 1);
    CMTime v24 = v28;
    int v26 = &v29;
    OZCurve::processCurve(this, (OZCurveNodeParam *)&v15, v10, *(void **)(*(void *)(*((void *)this + 14) + 8) - 8));
    OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v15);
  }
}

void sub_1B7989FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZCurve::getPoint(OZCurve *this, const CMTime *a2, double a3, double *a4)
{
  if (a4) {
    *a4 = (*(double (**)(OZCurve *, const CMTime *, double))(*(void *)this + 1256))(this, a2, a3);
  }
  return 1;
}

uint64_t OZCurve::getPointWithoutBehavior(OZCurve *this, const CMTime *a2, double a3, double *a4)
{
  if (a4) {
    *a4 = (*(double (**)(OZCurve *, const CMTime *, void, double))(*(void *)this + 1248))(this, a2, 0, a3);
  }
  return 1;
}

uint64_t OZCurve::getPointFromCurveNode(OZCurve *this, const CMTime *a2, double a3, double *a4, void *a5)
{
  if (a4) {
    *a4 = (*(double (**)(OZCurve *, const CMTime *, void *, double))(*(void *)this + 1248))(this, a2, a5, a3);
  }
  return 1;
}

uint64_t OZCurve::setKeyValue(OZCurve *this, const CMTime *a2, double a3)
{
  double v4 = *((double *)this + 16);
  if (v4 >= a3)
  {
    if (*((double *)this + 15) > a3) {
      double v4 = *((double *)this + 15);
    }
    else {
      double v4 = a3;
    }
  }
  (*(void (**)(void, const CMTime *, double))(**((void **)this + 1) + 64))(*((void *)this + 1), a2, v4);
  if (!*((_DWORD *)this + 42)) {
    *((double *)this + 6) = v4;
  }
  return 1;
}

uint64_t OZCurve::setKeyValue(OZCurve *this, char *a2, const CMTime *a3, double a4)
{
  double v7 = *((double *)this + 16);
  if (v7 >= a4)
  {
    if (*((double *)this + 15) > a4) {
      double v7 = *((double *)this + 15);
    }
    else {
      double v7 = a4;
    }
  }
  if (*((_DWORD *)this + 42)
    && PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    if ((*(unsigned int (**)(OZCurve *))(*(void *)this + 1208))(this))
    {
      uint64_t v8 = 1;
      (*(void (**)(void, const CMTime *, uint64_t, double))(**((void **)this + 13) + 64))(*((void *)this + 13), a3, 1, v7);
    }
    else if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)) {
           && (uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)),
    }
               OZSpline::isValidHandle(v10, a2)))
    {
      uint64_t v11 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
      (*(void (**)(uint64_t, char *, const CMTime *, void, double))(*(void *)v11 + 200))(v11, a2, a3, MEMORY[0x1E4F1FA48], v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = 1;
    (*(void (**)(void, const CMTime *, uint64_t, double))(**((void **)this + 1) + 64))(*((void *)this + 1), a3, 1, v7);
    *((double *)this + 6) = v7;
  }
  return v8;
}

uint64_t OZCurve::setKeyValue(OZCurve *this, char *a2, double a3)
{
  double v5 = *((double *)this + 16);
  if (v5 >= a3)
  {
    if (*((double *)this + 15) > a3) {
      double v5 = *((double *)this + 15);
    }
    else {
      double v5 = a3;
    }
  }
  if (*((_DWORD *)this + 42)
    && PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    double v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    if (OZSpline::isValidHandle(v6, a2))
    {
      if ((*(unsigned int (**)(OZCurve *))(*(void *)this + 1208))(this))
      {
        uint64_t v7 = MEMORY[0x1E4F1FA48];
        long long v12 = *MEMORY[0x1E4F1FA48];
        uint64_t v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        uint64_t v8 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
        (*(void (**)(uint64_t, char *, long long *, void, uint64_t))(*(void *)v8 + 264))(v8, a2, &v12, 0, v7);
        uint64_t v9 = 1;
        (*(void (**)(void, long long *, uint64_t, double))(**((void **)this + 13) + 64))(*((void *)this + 13), &v12, 1, v5);
      }
      else
      {
        uint64_t v10 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
        (*(void (**)(uint64_t, char *, void, double))(*(void *)v10 + 208))(v10, a2, MEMORY[0x1E4F1FA48], v5);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = 1;
    (*(void (**)(void, void, uint64_t, double))(**((void **)this + 1) + 64))(*((void *)this + 1), MEMORY[0x1E4F1FA48], 1, v5);
    *((double *)this + 6) = v5;
  }
  return v9;
}

BOOL OZCurve::setKeyAtCurrentValue(OZCurve *this, const CMTime *a2)
{
  int v2 = *((_DWORD *)this + 42);
  if (v2)
  {
    if ((*(unsigned int (**)(OZCurve *))(*(void *)this + 1208))(this)) {
      uint64_t v5 = *((void *)this + 13);
    }
    else {
      uint64_t v5 = *((void *)this + 1);
    }
    (*(void (**)(OZCurve *, const CMTime *, void))(*(void *)this + 1248))(this, a2, 0);
    (*(void (**)(uint64_t, const CMTime *, uint64_t))(*(void *)v5 + 64))(v5, a2, 1);
  }
  return v2 != 0;
}

BOOL OZCurve::lockCurve(OZCurve *this, int a2)
{
  uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v4 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v4)
  {
    uint64_t v5 = PVInstructionGraphContext::HGNodeCache(v3);
    OZSpline::lockSpline(v5, a2);
  }
  return v4 != 0;
}

uint64_t OZCurve::setCurveDefaultValue(OZCurve *this, double a2)
{
  *((double *)this + 7) = a2;
  *((double *)this + 4) = a2;
  return 1;
}

uint64_t OZCurve::setCurveInitialValue(OZCurve *this, double a2)
{
  *((double *)this + 6) = a2;
  *((double *)this + 3) = a2;
  return 1;
}

uint64_t OZCurve::setKeypoint(OZCurve *this, const CMTime *a2, int a3)
{
  if (!*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a3) {
    return 0;
  }
  OZCurve::setKeyAtCurrentValue(this, a2);
  return 1;
}

BOOL OZCurve::setKeypointValue(OZCurve *this, char *a2, double a3, int a4)
{
  if (a2)
  {
    uint64_t Instance = OZCoreGlobals::getInstance((OZCoreGlobals *)this);
    if (!*((unsigned char *)this + 138)) {
      goto LABEL_8;
    }
    int v9 = *(unsigned __int8 *)(Instance + 10);
    BOOL isAnimated = OZCurve::isAnimated(this);
    char v11 = a4 ^ 1;
    if (!v9) {
      char v11 = 0;
    }
    if ((v11 & 1) == 0 && isAnimated | a4) {
      OZCurve::setKeyValue(this, a2, a3);
    }
    else {
LABEL_8:
    }
      (*(void (**)(OZCurve *, void, double))(*(void *)this + 440))(this, MEMORY[0x1E4F1FA48], a3);
  }
  return a2 != 0;
}

uint64_t OZCurve::setKeypointsValue(OZCurve *this, double a2)
{
  if (*((_DWORD *)this + 42))
  {
    double v2 = *((double *)this + 16);
    if (v2 >= a2)
    {
      double v2 = a2;
      if (*((double *)this + 15) > a2) {
        double v2 = *((double *)this + 15);
      }
    }
    uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
    *((double *)this + 6) = v2;
    if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    {
      uint64_t v4 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v3);
      OZSpline::setAllVerticesValues(v4, v2, MEMORY[0x1E4F1FA48]);
    }
  }
  else
  {
    OZCurve::setKeyValue(this, MEMORY[0x1E4F1FA48], a2);
  }
  return 1;
}

uint64_t OZCurve::setCurveOffset(OZCurve *this, const CMTime *a2, double a3)
{
  if (*((_DWORD *)this + 42))
  {
    double v5 = *((double *)this + 16);
    if (v5 >= a3)
    {
      double v5 = a3;
      if (*((double *)this + 15) > a3) {
        double v5 = *((double *)this + 15);
      }
    }
    if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    {
      double v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
      OZSpline::offsetSpline(v6, a2, v5, *((double *)this + 16), *((double *)this + 15), 0, 0, MEMORY[0x1E4F1FA48]);
    }
    else
    {
      *((double *)this + 6) = v5;
    }
  }
  else
  {
    OZCurve::setKeyValue(this, MEMORY[0x1E4F1FA48], a3);
  }
  return 1;
}

uint64_t OZCurve::setCurveSegmentValue(OZCurve *this, const CMTime *a2, double a3, int a4)
{
  if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
  {
    if (*((_DWORD *)this + 42))
    {
      double v8 = *((double *)this + 16);
      if (v8 >= a3)
      {
        double v8 = a3;
        if (*((double *)this + 15) > a3) {
          double v8 = *((double *)this + 15);
        }
      }
      if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
      {
        int v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
        OZSpline::offsetSpline(v9, a2, v8, *((double *)this + 16), *((double *)this + 15), 1, 0, MEMORY[0x1E4F1FA48]);
      }
      else
      {
        *((double *)this + 6) = v8;
      }
    }
    else
    {
      OZCurve::setKeyValue(this, MEMORY[0x1E4F1FA48], a3);
    }
  }
  return 1;
}

uint64_t OZCurve::setCurveSegmentValueBounded(OZCurve *this, const CMTime *a2, double a3, double a4, double a5, int a6)
{
  if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a6))
  {
    if (*((_DWORD *)this + 42))
    {
      if (a3 < a4) {
        double v12 = a4;
      }
      else {
        double v12 = a3;
      }
      if (a3 <= a5) {
        double v13 = v12;
      }
      else {
        double v13 = a5;
      }
      if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
      {
        uint64_t v14 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
        OZSpline::offsetSpline(v14, a2, v13, a5, a4, 1, 1, MEMORY[0x1E4F1FA48]);
      }
      else
      {
        *((double *)this + 6) = v13;
      }
    }
    else
    {
      OZCurve::setKeyValue(this, MEMORY[0x1E4F1FA48], a3);
    }
  }
  return 1;
}

uint64_t OZCurve::createCurveSegment(OZCurve *this, const CMTime *a2, const CMTime *a3, const CMTime *a4, int a5, int a6)
{
  if (!*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a6 || !*((_DWORD *)this + 42)) {
    return 0;
  }
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    if (*(unsigned char *)(*((void *)this + 20) + 44)) {
      *((void *)this + 20) = OZCurve::createLocalSplineState(this);
    }
    OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
  }
  double v12 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));

  return OZSpline::createSegment(v12, a2, a3, a4, a5);
}

BOOL OZCurve::setKeypoint(OZCurve *this, char *a2, const CMTime *a3, double a4, int a5)
{
  if (a2)
  {
    uint64_t Instance = OZCoreGlobals::getInstance((OZCoreGlobals *)this);
    if (!*((unsigned char *)this + 138)) {
      goto LABEL_8;
    }
    int v11 = *(unsigned __int8 *)(Instance + 10);
    BOOL isAnimated = OZCurve::isAnimated(this);
    char v13 = a5 ^ 1;
    if (!v11) {
      char v13 = 0;
    }
    if ((v13 & 1) == 0 && isAnimated | a5) {
      OZCurve::setKeyValue(this, a2, a3, a4);
    }
    else {
LABEL_8:
    }
      (*(void (**)(OZCurve *, const CMTime *, double))(*(void *)this + 440))(this, a3, a4);
  }
  return a2 != 0;
}

uint64_t OZCurve::setKeypoint(OZCurve *this, const CMTime *a2, double a3, int a4)
{
  uint64_t v10 = 0;
  if (*(unsigned char *)(OZCoreGlobals::getInstance((OZCoreGlobals *)this) + 10)) {
    int v8 = a4 ^ 1;
  }
  else {
    int v8 = 0;
  }
  if (*((unsigned char *)this + 138) && ((v8 | (OZCurve::isAnimated(this) | a4) ^ 1) & 1) == 0)
  {
    if (!(*(unsigned int (**)(OZCurve *, const CMTime *, void **))(*(void *)this + 696))(this, a2, &v10))
    {
      OZCurve::setKeyValue(this, a2, a3);
      return 1;
    }
    goto LABEL_10;
  }
  if (!v8
    && (*(unsigned int (**)(OZCurve *, const CMTime *, void **))(*(void *)this + 696))(this, a2, &v10))
  {
LABEL_10:
    OZCurve::setKeyValue(this, (char *)v10, a2, a3);
    return 1;
  }
  (*(void (**)(OZCurve *, const CMTime *, double))(*(void *)this + 440))(this, a2, a3);
  return 1;
}

uint64_t OZCurve::setKeypointNoTangents(OZCurve *this, const CMTime *a2, double a3, int a4)
{
  uint64_t v7 = this;
  int v9 = 0;
  if (*((unsigned char *)this + 138))
  {
    this = (OZCurve *)OZCurve::isAnimated(this);
    if ((this & 1) != 0 || a4)
    {
      if (!(*(unsigned int (**)(OZCurve *, const CMTime *, void **))(*(void *)v7 + 696))(v7, a2, &v9))
      {
        OZCurve::setKeyValue(v7, a2, a3);
        return 1;
      }
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(OZCoreGlobals::getInstance((OZCoreGlobals *)this) + 10) || (a4)
    && (*(unsigned int (**)(OZCurve *, const CMTime *, void **))(*(void *)v7 + 696))(v7, a2, &v9))
  {
LABEL_9:
    OZCurve::setKeyValue(v7, (char *)v9, a2, a3);
    return 1;
  }
  (*(void (**)(OZCurve *, const CMTime *, double))(*(void *)v7 + 440))(v7, a2, a3);
  return 1;
}

uint64_t OZCurve::appendKeypointNoTangents(OZCurve *this, const CMTime *a2, double a3, int a4)
{
  if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
  {
    if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    {
      if (*(unsigned char *)(*((void *)this + 20) + 44)) {
        *((void *)this + 20) = OZCurve::createLocalSplineState(this);
      }
      OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
    }
    int v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    OZSpline::appendVertexNoTangents(v8, a2, a3, MEMORY[0x1E4F1FA48]);
  }
  (*(void (**)(OZCurve *, const CMTime *, double))(*(void *)this + 440))(this, a2, a3);
  return 1;
}

uint64_t OZCurve::appendKeypointsNoTangents(OZCurve *this, int a2, CMTime *a3, double *a4, int a5)
{
  LODWORD(v7) = a2;
  if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a5))
  {
    if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    {
      if (*(unsigned char *)(*((void *)this + 20) + 44)) {
        *((void *)this + 20) = OZCurve::createLocalSplineState(this);
      }
      OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
    }
    int v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    OZSpline::appendVertexesNoTangents(v11, v7, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else if (v7)
  {
    uint64_t v7 = v7;
    do
    {
      double v10 = *a4++;
      (*(void (**)(OZCurve *, CMTime *, double))(*(void *)this + 440))(this, a3++, v10);
      --v7;
    }
    while (v7);
  }
  return 1;
}

uint64_t OZCurve::scaleCurve(OZCurve *this, double a2)
{
  uint64_t v4 = (PVInstructionGraphContext *)((char *)this + 40);
  double v5 = *((double *)this + 7) * a2;
  *((double *)this + 7) = v5;
  double v6 = *((double *)this + 16);
  if (v5 > v6)
  {
    *((double *)this + 7) = v6;
    double v5 = v6;
  }
  double v7 = *((double *)this + 15);
  if (v5 < v7) {
    *((double *)this + 7) = v7;
  }
  if (*((double *)this + 6) * a2 <= v6) {
    double v6 = *((double *)this + 6) * a2;
  }
  if (v6 < v7) {
    double v6 = v7;
  }
  *((double *)this + 6) = v6;
  if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    int v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v4);
    OZSpline::scaleSpline(v8, a2, *((double *)this + 15), *((double *)this + 16), MEMORY[0x1E4F1FA48]);
  }
  return 1;
}

uint64_t OZCurve::getUForValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

OZCurve *OZCurve::appendCurveProcessingNode(OZCurve *this, OZCurveNode *a2)
{
  uint64_t v4 = (void **)*((void *)this + 14);
  double v5 = v4[1];
  unint64_t v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v6 - (void)*v4;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 2), v11);
    }
    else {
      double v12 = 0;
    }
    char v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)char v13 = a2;
    double v7 = v13 + 8;
    uint64_t v16 = (char *)*v4;
    __int16 v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      __int16 v15 = (char *)*v4;
    }
    PVInstructionGraphContext *v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a2;
    double v7 = v5 + 1;
  }
  v4[1] = v7;

  return OZCurve::setTreeProperties(this);
}

OZCurve *OZCurve::insertCurveProcessingNode(OZCurve *this, OZCurveNode *a2, void *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = (char **)*((void *)this + 14);
  double v5 = *v4;
  if (a3)
  {
    unint64_t v6 = v4[1];
    if (v5 != v6)
    {
      while (*(void **)v5 != a3)
      {
        v5 += 8;
        if (v5 == v6)
        {
          double v5 = v4[1];
          break;
        }
      }
    }
    v5 += 8;
  }
  std::vector<OZCurveNode *>::insert((uint64_t)v4, v5, (char *)&v8);
  return OZCurve::setTreeProperties(this);
}

char *std::vector<OZCurveNode *>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    __p = v19;
    char v27 = v20;
    CMTime v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        char v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        char v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    CMTime v28 = v20 + 8;
    uint64_t v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1B798B524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL OZCurve::delProcessNode(OZCurve *this, void *a2)
{
  uint64_t v3 = *((void *)this + 14);
  uint64_t v5 = *(void *)v3;
  uint64_t v4 = *(void ***)(v3 + 8);
  BOOL v6 = v5 != (void)v4;
  if ((void **)v5 != v4)
  {
    uint64_t v7 = -v5;
    while (*(void **)v5 != a2)
    {
      v5 += 8;
      v7 -= 8;
      BOOL v6 = v5 != (void)v4;
      if ((void **)v5 == v4) {
        goto LABEL_11;
      }
    }
    if (a2) {
      (*(void (**)(void *))(*(void *)a2 + 8))(a2);
    }
    *(void *)uint64_t v5 = 0;
    uint64_t v8 = *((void *)this + 14);
    uint64_t v9 = -v7;
    uint64_t v10 = (const void *)(8 - v7);
    size_t v11 = *(void *)(v8 + 8) - (8 - v7);
    if (v11) {
      memmove((void *)v9, v10, v11);
    }
    *(void *)(v8 + 8) = v9 + v11;
  }
LABEL_11:
  OZCurve::setTreeProperties(this);
  return v6;
}

BOOL OZCurve::removeProcessNode(OZCurve *this, void *a2)
{
  uint64_t v3 = *((void *)this + 14);
  uint64_t v5 = *(void *)v3;
  uint64_t v4 = *(void ***)(v3 + 8);
  BOOL v6 = *(void *)v3 != (void)v4;
  if (*(void ***)v3 != v4)
  {
    uint64_t v7 = -v5;
    while (*(void **)v5 != a2)
    {
      v5 += 8;
      v7 -= 8;
      BOOL v6 = v5 != (void)v4;
      if ((void **)v5 == v4) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = -v7;
    uint64_t v9 = (char *)v4 - (8 - v7);
    if (v4 != (void **)(8 - v7)) {
      memmove((void *)-v7, (const void *)(8 - v7), (size_t)v4 - (8 - v7));
    }
    *(void *)(v3 + 8) = &v9[v8];
  }
LABEL_9:
  OZCurve::setTreeProperties(this);
  return v6;
}

BOOL OZCurve::enumerateCurveProcessingNodes(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if ((char *)v2 != a2 && v2 != 0) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a2, *(char **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  }
  return v2 != 0;
}

uint64_t OZCurve::getPreviousProcessingNode(OZCurve *this, void *a2, void **a3)
{
  uint64_t v3 = (void ***)*((void *)this + 14);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    goto LABEL_9;
  }
  BOOL v6 = *v3;
  while (*v6 != a2)
  {
    if (++v6 == v5)
    {
      BOOL v6 = v5;
      break;
    }
  }
  if (v6 == v4)
  {
LABEL_9:
    uint64_t result = 0;
    if (!a3) {
      return result;
    }
    uint64_t v7 = 0;
  }
  else
  {
    if (!a3) {
      return 1;
    }
    uint64_t v7 = *(v6 - 1);
    uint64_t result = 1;
  }
  *a3 = v7;
  return result;
}

uint64_t OZCurve::getNumCurveProcessingNodes(OZCurve *this, unsigned int *a2)
{
  *a2 = (*(void *)(*((void *)this + 14) + 8) - **((void **)this + 14)) >> 3;
  return 1;
}

uint64_t OZCurve::setCustomInterpolator(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 80) = a2;
  *(void *)(result + 88) = a3;
  return result;
}

uint64_t OZCurve::bakeCurve(OZCurve *this, void *a2, const CMTime *a3, const CMTime *a4, const CMTime *a5, double a6, double a7)
{
  uint64_t v7 = (OZSplineNode *)*((void *)this + 1);
  if (v7 == (OZSplineNode *)((char *)this + 40))
  {
    if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v7)) {
      OZSplineNode::createSpline(v7);
    }
    __int16 v17 = 1;
    int v23 = 0;
    uint64_t v24 = 0;
    char v25 = 0;
    long long v19 = *MEMORY[0x1E4F1FA48];
    uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v18 = 0;
    uint64_t v20 = v11;
    long long v21 = v19;
    uint64_t v22 = v11;
    unsigned int Seconds = 0;
    uint64_t v31 = 0;
    char v32 = 0;
    CMTimeEpoch epoch = a3->epoch;
    long long v26 = *(_OWORD *)&a3->value;
    long long v28 = *(_OWORD *)&a4->value;
    CMTimeEpoch v13 = a4->epoch;
    CMTimeEpoch v27 = epoch;
    CMTimeEpoch v29 = v13;
    CMTime v34 = *a5;
    CMTime v33 = *a3;
    PC_CMTimeSaferSubtract(&v34, &v33, (uint64_t)&v15);
    operator/(&v15, (uint64_t)a4, (uint64_t)&time);
    unsigned int Seconds = CMTimeGetSeconds(&time);
    operator new[]();
  }
  return 0;
}

void sub_1B798BEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&a32);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::simplifyCurve(OZCurve *this, const CMTime *a2, const CMTime *a3, CMTime *a4, double a5, double a6, int a7, int a8)
{
  uint64_t v84 = 0;
  v85 = 0;
  uint64_t v86 = 0;
  v81 = 0;
  CMTime v82 = 0;
  long long v83 = 0;
  uint64_t v8 = (PVInstructionGraphContext *)*((void *)this + 1);
  if (v8 == (PVInstructionGraphContext *)((char *)this + 40)
    && PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 1))
    && (uint64_t v19 = PVInstructionGraphContext::HGNodeCache(v8),
        (*(void (**)(uint64_t, void **))(*(void *)v19 + 24))(v19, &v84),
        (unint64_t)(v85 - (unsigned char *)v84) >= 0x10))
  {
    if (a7 == 4)
    {
      v78.CMTimeValue value = 0;
      __p.CMTimeValue value = 0;
      CMTime v87 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      v57.CMTimeValue value = 0;
      uint64_t v30 = PVInstructionGraphContext::HGNodeCache(v8);
      (*(void (**)(uint64_t, void, void, CMTime *, void))(*(void *)v30 + 264))(v30, *v84, 0, &v78, MEMORY[0x1E4F1FA48]);
      if ((unint64_t)(((v85 - (unsigned char *)v84) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v31 = 1;
        uint64_t v32 = MEMORY[0x1E4F1FA48];
        LODWORD(v33) = 1;
        do
        {
          uint64_t v34 = PVInstructionGraphContext::HGNodeCache(v8);
          (*(void (**)(uint64_t, void, CMTime *, CMTime *, uint64_t))(*(void *)v34 + 264))(v34, v84[v31], &v87, &__p, v32);
          CMTime time1 = v87;
          CMTime time2 = *a2;
          if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v87, CMTime time2 = *a3, CMTimeCompare(&time1, &time2) > 0))
          {
            v78.CMTimeValue value = __p.value;
            unint64_t v33 = (v33 + 1);
          }
          else
          {
            uint64_t v35 = PVInstructionGraphContext::HGNodeCache(v8);
            unint64_t v33 = (v33 + 1);
            (*(void (**)(uint64_t, void, void, CMTime *, uint64_t))(*(void *)v35 + 264))(v35, v84[v33], 0, &v57, v32);
            double v36 = *(double *)&v57.value - *(double *)&__p.value;
            if ((*(double *)&__p.value - *(double *)&v78.value <= 0.0 || v36 >= 0.0)
              && (*(double *)&__p.value - *(double *)&v78.value >= 0.0 || v36 <= 0.0))
            {
              uint64_t v37 = PVInstructionGraphContext::HGNodeCache(v8);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, v84[v31], 1, v32);
            }
            else
            {
              v78.CMTimeValue value = __p.value;
            }
          }
          uint64_t v31 = v33;
        }
        while (((v85 - (unsigned char *)v84) >> 3) - 1 > v33);
      }
    }
    else if (a7 == 2)
    {
      int v80 = 0;
      (*(void (**)(OZCurve *, int *))(*(void *)this + 304))(this, &v80);
      if (fabs((double)a8) >= 0.0000001 || v80 != 1)
      {
        unint64_t v56 = a4;
        int v38 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (v85 != (unsigned char *)v84)
        {
          uint64_t v39 = 0;
          unsigned int v40 = 0;
          do
          {
            CMTime v87 = *v38;
            uint64_t v41 = PVInstructionGraphContext::HGNodeCache(v8);
            (*(void (**)(uint64_t, void, CMTime *, void, CMTime *))(*(void *)v41 + 264))(v41, v84[v39], &v87, 0, v38);
            CMTime time1 = v87;
            CMTime time2 = *a2;
            if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v87, CMTime time2 = *a3, CMTimeCompare(&time1, &time2) >= 1))
            {
              unint64_t v42 = v84;
              unint64_t v43 = v82;
              if (v82 >= v83)
              {
                uint64_t v45 = (v82 - v81) >> 3;
                if ((unint64_t)(v45 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v46 = (v83 - v81) >> 2;
                if (v46 <= v45 + 1) {
                  unint64_t v46 = v45 + 1;
                }
                if ((unint64_t)(v83 - v81) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v46;
                }
                if (v47) {
                  long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v83, v47);
                }
                else {
                  long long v48 = 0;
                }
                long long v49 = &v48[8 * v45];
                *(void *)long long v49 = v42[v39];
                long long v44 = v49 + 8;
                unint64_t v51 = v81;
                unint64_t v50 = v82;
                if (v82 != v81)
                {
                  do
                  {
                    uint64_t v52 = *((void *)v50 - 1);
                    v50 -= 8;
                    *((void *)v49 - 1) = v52;
                    v49 -= 8;
                  }
                  while (v50 != v51);
                  unint64_t v50 = v81;
                }
                v81 = v49;
                CMTime v82 = v44;
                long long v83 = &v48[8 * v47];
                if (v50) {
                  operator delete(v50);
                }
              }
              else
              {
                *(void *)CMTime v82 = v84[v39];
                long long v44 = v43 + 8;
              }
              CMTime v82 = v44;
            }
            uint64_t v39 = ++v40;
          }
          while (v40 < (unint64_t)((v85 - (unsigned char *)v84) >> 3));
        }
        LOWORD(time1.value) = 1;
        int v64 = 0;
        uint64_t v65 = 0;
        char v66 = 0;
        long long v60 = *(_OWORD *)&v38->value;
        CMTimeEpoch epoch = v38->epoch;
        *(void *)&time1.timescale = 0;
        CMTimeEpoch v61 = epoch;
        long long v62 = v60;
        CMTimeEpoch v63 = epoch;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        char v72 = 0;
        long long v67 = v60;
        *(_OWORD *)&v69.CMTimeValue value = v60;
        CMTimeEpoch v68 = epoch;
        v69.CMTimeEpoch epoch = epoch;
        memset(&v78, 0, sizeof(v78));
        CMTime time2 = *a3;
        CMTime v87 = *a2;
        PC_CMTimeSaferSubtract(&time2, &v87, (uint64_t)&v78);
        CMTime time2 = v78;
        CMTime v87 = *v56;
        int32_t v54 = CMTimeCompare(&time2, &v87);
        if (a5 / 100.0 / a6 > 1.0 || v54 >= 1)
        {
          CMTime v69 = *v56;
          CMTime time2 = *a3;
          CMTime v87 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v87, (uint64_t)&__p);
          operator/((long long *)&__p.value, (uint64_t)v56, (uint64_t)&v58);
          unsigned int Seconds = CMTimeGetSeconds(&v58);
        }
        else
        {
          CMTime v69 = v78;
          operator*(&v69, &time2, 0.001);
          CMTime v69 = time2;
          unsigned int Seconds = 1000;
        }
        unsigned int v70 = Seconds;
        long long v67 = *(_OWORD *)&a2->value;
        CMTimeEpoch v68 = a2->epoch;
        operator new[]();
      }
      CMTime v87 = *a2;
      v57.CMTimeValue value = 0;
      v79 = 0;
      uint64_t v20 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      CMTime v78 = v87;
      double v21 = (*(double (**)(OZSpline *, CMTime *, void, void))(*(void *)v20 + 240))(v20, &v87, MEMORY[0x1E4F1FA48], 0);
      if (!OZSpline::getVertexHandle(v20, &v78, (void **)&v57, 0)) {
        (*(void (**)(OZSpline *, CMTime *, void, uint64_t, double))(*(void *)v20 + 192))(v20, &v78, MEMORY[0x1E4F1FA48], 1, v21);
      }
      uint64_t v22 = (const CMTime *)MEMORY[0x1E4F1FA48];
      int NextValidVertexWithLock = OZSpline::getNextValidVertexWithLock(v20, &v87, (void **)&v57, MEMORY[0x1E4F1FA48], 0);
      CMTimeValue value = (void *)v57.value;
      if (v57.value) {
        int v25 = NextValidVertexWithLock;
      }
      else {
        int v25 = 0;
      }
      if (v25 == 1)
      {
        do
        {
          if (!OZSpline::getNextValidVertexWithLock(v20, value, &v79, v22)) {
            break;
          }
          double v76 = 0.0;
          double v77 = 0.0;
          CMTime __p = *v22;
          (*(void (**)(OZSpline *, CMTimeValue, CMTime *, double *, const CMTime *))(*(void *)v20 + 264))(v20, v57.value, &v87, &v77, v22);
          (*(void (**)(OZSpline *, void *, CMTime *, double *, const CMTime *))(*(void *)v20 + 264))(v20, v79, &__p, &v76, v22);
          double v26 = v77;
          CMTime time1 = v87;
          CMTime time2 = v78;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
          double v27 = CMTimeGetSeconds(&time);
          double v28 = v76;
          double v29 = v77;
          CMTime time1 = __p;
          CMTime time2 = v87;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v73);
          if (vabdd_f64((v28 - v29) / CMTimeGetSeconds(&v73), (v26 - v21) / v27) >= 0.0000001)
          {
            CMTime v78 = v87;
            double v21 = v77;
          }
          else
          {
            (*(void (**)(OZSpline *, CMTimeValue, uint64_t, const CMTime *))(*(void *)v20 + 32))(v20, v57.value, 1, v22);
          }
          v57.CMTimeValue value = (CMTimeValue)v79;
          CMTime time1 = __p;
          CMTime time2 = *a3;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
            break;
          }
          CMTimeValue value = (void *)v57.value;
        }
        while (v57.value);
      }
      if (!OZSpline::getVertexHandle(v20, a3, (void **)&v57, 0))
      {
        (*(void (**)(OZSpline *, const CMTime *, void, void))(*(void *)v20 + 240))(v20, a3, MEMORY[0x1E4F1FA48], 0);
        (*(void (**)(OZSpline *, const CMTime *, void, uint64_t))(*(void *)v20 + 192))(v20, a3, MEMORY[0x1E4F1FA48], 1);
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v81)
  {
    CMTime v82 = v81;
    operator delete(v81);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  return v9;
}

void sub_1B798D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&a35);
  uint64_t v37 = *(void **)(v35 - 256);
  if (v37)
  {
    *(void *)(v35 - 248) = v37;
    operator delete(v37);
  }
  int v38 = *(void **)(v35 - 232);
  if (v38)
  {
    *(void *)(v35 - 224) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t OZCurve::smoothCurve(OZCurve *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  long long v44 = 0;
  uint64_t v4 = (PVInstructionGraphContext *)*((void *)this + 1);
  if (v4 == (PVInstructionGraphContext *)((char *)this + 40))
  {
    if (PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 1)))
    {
      uint64_t v9 = PVInstructionGraphContext::HGNodeCache(v4);
      (*(void (**)(uint64_t, void **))(*(void *)v9 + 24))(v9, &v45);
      if ((unint64_t)(v46 - (unsigned char *)v45) >= 0x10)
      {
        int v41 = 0;
        (*(void (**)(OZCurve *, int *))(*(void *)this + 304))(this, &v41);
        uint64_t v10 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (v46 != (unsigned char *)v45)
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          do
          {
            CMTime v48 = *v10;
            uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v4);
            (*(void (**)(uint64_t, void, CMTime *, void, CMTime *))(*(void *)v13 + 264))(v13, v45[v11], &v48, 0, v10);
            CMTime time1 = v48;
            CMTime time2 = *a2;
            if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v48, CMTime time2 = *a3, CMTimeCompare(&time1, &time2) >= 1))
            {
              unint64_t v14 = v45;
              long long v15 = v43;
              if (v43 >= v44)
              {
                uint64_t v17 = (v43 - v42) >> 3;
                if ((unint64_t)(v17 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v18 = (v44 - v42) >> 2;
                if (v18 <= v17 + 1) {
                  unint64_t v18 = v17 + 1;
                }
                if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v19 = v18;
                }
                if (v19) {
                  uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v19);
                }
                else {
                  uint64_t v20 = 0;
                }
                double v21 = &v20[8 * v17];
                *(void *)double v21 = v14[v11];
                uint64_t v16 = v21 + 8;
                int v23 = v42;
                uint64_t v22 = v43;
                if (v43 != v42)
                {
                  do
                  {
                    uint64_t v24 = *((void *)v22 - 1);
                    v22 -= 8;
                    *((void *)v21 - 1) = v24;
                    v21 -= 8;
                  }
                  while (v22 != v23);
                  uint64_t v22 = v42;
                }
                unint64_t v42 = v21;
                unint64_t v43 = v16;
                long long v44 = &v20[8 * v19];
                if (v22) {
                  operator delete(v22);
                }
              }
              else
              {
                *(void *)unint64_t v43 = v45[v11];
                uint64_t v16 = v15 + 8;
              }
              unint64_t v43 = v16;
            }
            uint64_t v11 = ++v12;
          }
          while (v12 < (unint64_t)((v46 - (unsigned char *)v45) >> 3));
        }
        LOWORD(time1.value) = 1;
        *(void *)&time1.timescale = 0;
        int v33 = 0;
        uint64_t v34 = 0;
        char v35 = 0;
        CMTime v31 = *v10;
        CMTime v32 = v31;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        char v40 = 0;
        CMTime v36 = v31;
        CMTime v37 = v31;
        memset(&v29, 0, sizeof(v29));
        CMTime time2 = *a3;
        CMTime v48 = *a2;
        PC_CMTimeSaferSubtract(&time2, &v48, (uint64_t)&v29);
        CMTime time2 = v29;
        CMTime v48 = *a4;
        if (CMTimeCompare(&time2, &v48) < 1)
        {
          CMTime v37 = v29;
          operator*(&v37, &time2, 0.001);
          CMTime v37 = time2;
          unsigned int Seconds = 1000;
        }
        else
        {
          CMTime v37 = *a4;
          CMTime time2 = *a3;
          CMTime v48 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v48, (uint64_t)&v27);
          operator/(&v27, (uint64_t)a4, (uint64_t)&time);
          unsigned int Seconds = CMTimeGetSeconds(&time);
        }
        unsigned int v38 = Seconds;
        CMTime v36 = *a2;
        operator new[]();
      }
    }
  }
  if (v45)
  {
    unint64_t v46 = v45;
    operator delete(v45);
  }
  return 0;
}

void sub_1B798D858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)va);
  uint64_t v17 = *(void **)(v15 - 208);
  if (v17)
  {
    *(void *)(v15 - 200) = v17;
    operator delete(v17);
  }
  unint64_t v18 = *(void **)(v15 - 184);
  if (v18)
  {
    *(void *)(v15 - 176) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t OZCurve::moveKeypoint(OZCurve *this, char *a2, const CMTime *a3, int a4, int a5, char a6)
{
  if (!a2) {
    return 0;
  }
  unsigned int v12 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
    {
      unint64_t v14 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v12);
      uint64_t result = OZSpline::isValidHandle(v14, a2);
      if (result)
      {
        uint64_t v15 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v12);
        return OZSpline::moveVertex(v15, a2, a3, MEMORY[0x1E4F1FA48], 0, a6, a5) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZCurve::cloneKeypoint(OZCurve *this, char *a2, const CMTime *a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
    {
      uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      uint64_t result = OZSpline::isValidHandle(v10, a2);
      if (result)
      {
        uint64_t v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
        return OZSpline::moveVertex(v11, a2, a3, MEMORY[0x1E4F1FA48], 1, 0, 0) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZCurve::setCurveExtrapolation(OZCurve *this, int a2, int a3)
{
  uint64_t v5 = *((void *)this + 20);
  if (a3)
  {
    if (*(_DWORD *)(v5 + 40) != a2)
    {
      uint64_t LocalSplineState = OZCurve::createLocalSplineState(this);
      *((void *)this + 20) = LocalSplineState;
      uint64_t v7 = (_DWORD *)(LocalSplineState + 40);
LABEL_6:
      *uint64_t v7 = a2;
    }
  }
  else if (*(_DWORD *)(v5 + 36) != a2)
  {
    uint64_t v8 = OZCurve::createLocalSplineState(this);
    *((void *)this + 20) = v8;
    uint64_t v7 = (_DWORD *)(v8 + 36);
    goto LABEL_6;
  }
  return 1;
}

uint64_t OZCurve::getCurveExtrapolation(OZCurve *this, unsigned int *a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = 40;
    if (!a3) {
      uint64_t v3 = 36;
    }
    *a2 = *(_DWORD *)(*((void *)this + 20) + v3);
  }
  return 1;
}

OZCurve *OZCurve::setRetimingExtrapolation(OZCurve *this, int a2)
{
  if ((*(unsigned char *)(*((void *)this + 20) + 4) != 0) != a2)
  {
    char v2 = a2;
    uint64_t v3 = this;
    this = (OZCurve *)OZCurve::createLocalSplineState(this);
    *((void *)v3 + 20) = this;
    *((unsigned char *)this + 4) = v2;
  }
  return this;
}

uint64_t OZCurve::getRetimingExtrapolation(OZCurve *this)
{
  return *(unsigned __int8 *)(*((void *)this + 20) + 4);
}

BOOL OZCurve::getKeypointHandle(OZCurve *this, const CMTime *a2, void **a3)
{
  if (!*((_DWORD *)this + 42)) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  BOOL v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);

  return OZSpline::getVertexHandle(v6, a2, a3, 1);
}

uint64_t OZCurve::getNumberOfKeypoints(OZCurve *this)
{
  if (!*((_DWORD *)this + 42)) {
    return 0;
  }
  uint64_t v1 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v3 = PVInstructionGraphContext::HGNodeCache(v1);
    return (*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 3;
  }
  return result;
}

uint64_t OZCurve::getKeypointHandleList(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 168)) {
    return 0;
  }
  uint64_t v1 = (PVInstructionGraphContext *)(a1 + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(a1 + 40))) {
    return 0;
  }
  char v2 = *(uint64_t (**)(void))(*(void *)PVInstructionGraphContext::HGNodeCache(v1) + 24);

  return v2();
}

uint64_t OZCurve::getKeypointValidHandleList(uint64_t a1, void **a2)
{
  if (!*(_DWORD *)(a1 + 168)) {
    return 0;
  }
  uint64_t v3 = (PVInstructionGraphContext *)(a1 + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(a1 + 40))) {
    return 0;
  }
  uint64_t v4 = (os_unfair_lock_s *)PVInstructionGraphContext::HGNodeCache(v3);
  uint64_t v5 = MEMORY[0x1E4F1FA48];

  return OZSpline::getAllValidVerticesHandles(v4, a2, v5);
}

__n128 OZCurve::getKeypointsTimeAndValue(uint64_t a1, _OWORD *a2, uint64_t a3, __n128 *a4, __n128 *a5)
{
  if (*(_DWORD *)(a1 + 168)
    && (uint64_t v9 = (PVInstructionGraphContext *)(a1 + 40),
        PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(a1 + 40))))
  {
    uint64_t v11 = (os_unfair_lock_s *)PVInstructionGraphContext::HGNodeCache(v9);
    long long v12 = a2[1];
    v14[0] = *a2;
    v14[1] = v12;
    v14[2] = a2[2];
    OZSpline::getVerticesTimeAndValue(v11, (uint64_t)v14, (void **)a3, (uint64_t)a4, (uint64_t)a5);
  }
  else
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t v13 = (__n128 *)MEMORY[0x1E4F1F9F8];
    if (a4)
    {
      __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
      a4[1].n128_u64[0] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *a4 = result;
    }
    if (a5)
    {
      __n128 result = *v13;
      a5[1].n128_u64[0] = v13[1].n128_u64[0];
      *a5 = result;
    }
  }
  return result;
}

uint64_t OZCurve::getFirstKeypoint(OZCurve *this, CMTime *a2, double *a3)
{
  if (*((_DWORD *)this + 42)
    && (uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40),
        PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    && (uint64_t v13 = 0,
        BOOL v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5),
        uint64_t v7 = (long long *)MEMORY[0x1E4F1FA48],
        OZSpline::getFirstValidVertexWithLock(v6, &v13, MEMORY[0x1E4F1FA48])))
  {
    long long v11 = *v7;
    CMTimeEpoch v12 = *((void *)v7 + 2);
    uint64_t v8 = PVInstructionGraphContext::HGNodeCache(v5);
    (*(void (**)(uint64_t, void *, long long *, double *, long long *))(*(void *)v8 + 264))(v8, v13, &v11, a3, v7);
    if (a2)
    {
      *(_OWORD *)&a2->CMTimeValue value = v11;
      a2->CMTimeEpoch epoch = v12;
    }
    return 1;
  }
  else
  {
    if (a2)
    {
      long long v10 = *MEMORY[0x1E4F1FA48];
      a2->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(_OWORD *)&a2->CMTimeValue value = v10;
    }
    uint64_t result = 0;
    if (a3) {
      *a3 = 0.0;
    }
  }
  return result;
}

uint64_t OZCurve::getFirstValidKeypointHandle(OZCurve *this, void **a2)
{
  uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v5 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v3);
    BOOL v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getFirstValidVertexWithLock(v5, a2, v6);
  }
  return result;
}

uint64_t OZCurve::getLastKeypoint(OZCurve *this, CMTime *a2, double *a3)
{
  if (*((_DWORD *)this + 42)
    && (uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40),
        PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
    && (uint64_t v13 = 0,
        BOOL v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5),
        uint64_t v7 = (long long *)MEMORY[0x1E4F1FA48],
        OZSpline::getLastValidVertexWithLock(v6, &v13, MEMORY[0x1E4F1FA48])))
  {
    long long v11 = *v7;
    CMTimeEpoch v12 = *((void *)v7 + 2);
    uint64_t v8 = PVInstructionGraphContext::HGNodeCache(v5);
    (*(void (**)(uint64_t, void *, long long *, double *, long long *))(*(void *)v8 + 264))(v8, v13, &v11, a3, v7);
    if (a2)
    {
      *(_OWORD *)&a2->CMTimeValue value = v11;
      a2->CMTimeEpoch epoch = v12;
    }
    return 1;
  }
  else
  {
    if (a2)
    {
      long long v10 = *MEMORY[0x1E4F1FA48];
      a2->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(_OWORD *)&a2->CMTimeValue value = v10;
    }
    uint64_t result = 0;
    if (a3) {
      *a3 = 0.0;
    }
  }
  return result;
}

uint64_t OZCurve::getLastValidKeypointHandle(OZCurve *this, void **a2)
{
  uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v5 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v3);
    BOOL v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getLastValidVertexWithLock(v5, a2, v6);
  }
  return result;
}

uint64_t OZCurve::getNextKeypoint(OZCurve *this, const CMTime *a2, CMTime *a3, double *a4)
{
  uint64_t v16 = 0;
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    if (*((_DWORD *)this + 42))
    {
      long long v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      long long v11 = (long long *)MEMORY[0x1E4F1FA48];
      int NextValidVertexWithLock = OZSpline::getNextValidVertexWithLock(v10, a2, &v16, MEMORY[0x1E4F1FA48], 0);
      uint64_t result = 0;
      if (NextValidVertexWithLock)
      {
        long long v14 = *v11;
        CMTimeEpoch v15 = *((void *)v11 + 2);
        uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v8);
        (*(void (**)(uint64_t, void *, long long *, double *, long long *))(*(void *)v13 + 264))(v13, v16, &v14, a4, v11);
        if (a3)
        {
          *(_OWORD *)&a3->CMTimeValue value = v14;
          a3->CMTimeEpoch epoch = v15;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZCurve::getPreviousKeypoint(OZCurve *this, const CMTime *a2, CMTime *a3, double *a4)
{
  uint64_t v16 = 0;
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    if (*((_DWORD *)this + 42))
    {
      long long v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      long long v11 = (long long *)MEMORY[0x1E4F1FA48];
      int PreviousValidVertexWithLock = OZSpline::getPreviousValidVertexWithLock(v10, a2, &v16, MEMORY[0x1E4F1FA48], 0);
      uint64_t result = 0;
      if (PreviousValidVertexWithLock)
      {
        long long v14 = *v11;
        CMTimeEpoch v15 = *((void *)v11 + 2);
        uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v8);
        (*(void (**)(uint64_t, void *, long long *, double *, long long *))(*(void *)v13 + 264))(v13, v16, &v14, a4, v11);
        if (a3)
        {
          *(_OWORD *)&a3->CMTimeValue value = v14;
          a3->CMTimeEpoch epoch = v15;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZCurve::getKeypoint(OZCurve *this, char *a2, CMTime *a3, double *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v7);
    uint64_t result = OZSpline::isValidHandle(v9, a2);
    if (result)
    {
      uint64_t v10 = MEMORY[0x1E4F1FA48];
      long long v12 = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v7);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, long long *, double *, uint64_t))(*(void *)v11 + 264))(v11, a2, &v12, a4, v10);
      if (a3)
      {
        *(_OWORD *)&a3->CMTimeValue value = v12;
        a3->CMTimeEpoch epoch = v13;
      }
    }
  }
  return result;
}

char *OZCurve::delKeypoint(OZCurve *this, char *a2, int a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    BOOL v6 = (PVInstructionGraphContext *)((char *)this + 40);
    if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
      && *((unsigned char *)this + 138)
      && (OZCurve::isAnimated(this) || a3)
      && (uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v6), OZSpline::isValidHandle(v7, v3)))
    {
      double v16 = 0.0;
      uint64_t v8 = PVInstructionGraphContext::HGNodeCache(v6);
      uint64_t v9 = MEMORY[0x1E4F1FA48];
      int v10 = (*(uint64_t (**)(uint64_t, char *, void, double *, void))(*(void *)v8 + 264))(v8, v3, 0, &v16, MEMORY[0x1E4F1FA48]);
      uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v6);
      uint64_t v3 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, v3, 1, v9);
      uint64_t v12 = PVInstructionGraphContext::HGNodeCache(v6);
      if (((*(void *)(v12 + 24) - *(void *)(v12 + 16)) & 0x7FFFFFFF8) != 0)
      {
        if (**((unsigned char **)this + 20))
        {
          uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v6);
          OZSpline::reparametrize(v13);
        }
      }
      else
      {
        if (v10) {
          (*(void (**)(OZCurve *, double))(*(void *)this + 216))(this, v16);
        }
        uint64_t v15 = *((void *)this + 8);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        *((void *)this + 8) = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t OZCurve::delKeypoints(OZCurve *this, const CMTime *a2, const CMTime *a3, int a4)
{
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  uint64_t v9 = OZSpline::deleteVertices(v11, a2, a3);
  uint64_t v12 = PVInstructionGraphContext::HGNodeCache(v8);
  if (((*(void *)(v12 + 24) - *(void *)(v12 + 16)) & 0x7FFFFFFF8) != 0)
  {
    if (**((unsigned char **)this + 20))
    {
      uint64_t v13 = PVInstructionGraphContext::HGNodeCache(v8);
      OZSpline::reparametrize(v13);
    }
  }
  else
  {
    uint64_t v14 = *((void *)this + 8);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    *((void *)this + 8) = 0;
  }
  return v9;
}

uint64_t OZCurve::delAllKeypoints(OZCurve *this, const CMTime *a2, int a3)
{
  if (*((unsigned char *)this + 138)
    && (OZCurve::isAnimated(this) || a3)
    && PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    uint64_t v6 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    if (((*(void *)(v6 + 24) - *(void *)(v6 + 16)) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v7 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
      (*(void (**)(uint64_t, const CMTime *, void, void))(*(void *)v7 + 240))(v7, a2, MEMORY[0x1E4F1FA48], 0);
      (*(void (**)(OZCurve *))(*(void *)this + 216))(this);
    }
    uint64_t v8 = *((void *)this + 8);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)this + 8) = 0;
  }
  return 0;
}

uint64_t OZCurve::getKeypointFlags(OZCurve *this, char *a2, unsigned int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
  if (!OZSpline::isValidHandle(v6, a2)) {
    return 0;
  }
  uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);

  return OZSpline::getVertexFlags(v7, a2, a3);
}

BOOL OZCurve::setKeypointFlags(OZCurve *this, char *a2, uint64_t a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((_DWORD *)this + 42)
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  int v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);

  return OZSpline::setVertexFlags(v10, a2, a3);
}

uint64_t OZCurve::getKeypointNormal(OZCurve *this, char *a2, double *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
  if (!OZSpline::isValidHandle(v6, a2)) {
    return 0;
  }
  uint64_t v7 = PVInstructionGraphContext::HGNodeCache(v5);
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(uint64_t (**)(uint64_t, char *, double *, uint64_t))(*(void *)v7 + 168);

  return v9(v7, a2, a3, v8);
}

uint64_t OZCurve::setKeypointNormal(OZCurve *this, char *a2, double a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((_DWORD *)this + 42)
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = PVInstructionGraphContext::HGNodeCache(v8);
  uint64_t v11 = MEMORY[0x1E4F1FA48];
  uint64_t v12 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(*(void *)v10 + 160);
  v13.n128_f64[0] = a3;

  return v12(v10, a2, v11, v13);
}

uint64_t OZCurve::getKeypointNormal(OZCurve *this, const CMTime *a2, double *a3)
{
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t v8 = MEMORY[0x1E4F1FA48];
    uint64_t v9 = *(uint64_t (**)(uint64_t, const CMTime *, double *, uint64_t))(*(void *)v7 + 184);
    return v9(v7, a2, a3, v8);
  }
  return result;
}

uint64_t OZCurve::setKeypointNormal(OZCurve *this, const CMTime *a2, double a3, int a4)
{
  if (!*((_DWORD *)this + 42) || !*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache(v8)) {
    return 0;
  }
  uint64_t v9 = PVInstructionGraphContext::HGNodeCache(v8);
  uint64_t v10 = MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(uint64_t (**)(uint64_t, const CMTime *, uint64_t, __n128))(*(void *)v9 + 176);
  v12.n128_f64[0] = a3;

  return v11(v9, a2, v10, v12);
}

uint64_t OZCurve::enableKeypoint(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (uint64_t *)PVInstructionGraphContext::HGNodeCache(v8);
  uint64_t v11 = *v10;
  if (a3)
  {
    __n128 v12 = *(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 88);
    uint64_t v13 = MEMORY[0x1E4F1FA48];
    uint64_t v14 = a2;
  }
  else
  {
    __n128 v12 = *(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 96);
    uint64_t v13 = MEMORY[0x1E4F1FA48];
    uint64_t v14 = a2;
  }
  return v12(v10, v14, v13);
}

uint64_t OZCurve::isEnabledKeypoint(OZCurve *this, char *a2, BOOL *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t result = OZSpline::isValidHandle(v7, a2);
    if (result)
    {
      uint64_t v8 = PVInstructionGraphContext::HGNodeCache(v5);
      *a3 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)v8 + 104))(v8, a2, MEMORY[0x1E4F1FA48]);
      return 1;
    }
  }
  return result;
}

BOOL OZCurve::selectKeypoint(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((_DWORD *)this + 42)
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (a3)
  {
    return OZSpline::setVertexFlag(v10, a2, 16);
  }
  else
  {
    return OZSpline::resetVertexFlag(v10, a2, 16);
  }
}

BOOL OZCurve::lockKeypoint(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (a3)
  {
    return OZSpline::setVertexFlag(v10, a2, 2);
  }
  else
  {
    return OZSpline::resetVertexFlag(v10, a2, 2);
  }
}

uint64_t OZCurve::isLockedKeypoint(OZCurve *this, char *a2, BOOL *a3)
{
  unsigned int v10 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t result = OZSpline::isValidHandle(v7, a2);
    if (result)
    {
      uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
      uint64_t result = OZSpline::getVertexFlags(v8, a2, &v10);
      int v9 = (v10 >> 1) & 1;
    }
    else
    {
      LOBYTE(v9) = 0;
    }
    *a3 = v9;
  }
  return result;
}

BOOL OZCurve::weightHandles(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  int v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  unsigned int v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (a3)
  {
    return OZSpline::setVertexFlag(v10, a2, 8);
  }
  else
  {
    return OZSpline::resetVertexFlag(v10, a2, 8);
  }
}

uint64_t OZCurve::areHandlesWeighted(OZCurve *this, char *a2, BOOL *a3)
{
  unsigned int v10 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t result = OZSpline::isValidHandle(v7, a2);
    if (result)
    {
      uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
      uint64_t result = OZSpline::getVertexFlags(v8, a2, &v10);
      int v9 = (v10 >> 3) & 1;
    }
    else
    {
      LOBYTE(v9) = 0;
    }
    *a3 = v9;
  }
  return result;
}

BOOL OZCurve::breakKeypointHandles(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a4)
  {
    return 0;
  }
  int v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  unsigned int v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (a3)
  {
    return OZSpline::setVertexFlag(v10, a2, 1);
  }
  else
  {
    return OZSpline::resetVertexFlag(v10, a2, 1);
  }
}

uint64_t OZCurve::areHandlesBroken(OZCurve *this, char *a2, BOOL *a3)
{
  unsigned int v10 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t result = OZSpline::isValidHandle(v7, a2);
    if (result)
    {
      uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
      uint64_t result = OZSpline::getVertexFlags(v8, a2, &v10);
      BOOL v9 = v10 & 1;
    }
    else
    {
      BOOL v9 = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t OZCurve::flattenHandles(OZCurve *this, char *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v6 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a3)
  {
    return 0;
  }
  uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v6);
  if (!OZSpline::isValidHandle(v7, a2)) {
    return 0;
  }
  uint64_t v8 = PVInstructionGraphContext::HGNodeCache(v6);
  BOOL v9 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v8 + 144);
  uint64_t v10 = MEMORY[0x1E4F1FA48];

  return v9(v8, a2, v10);
}

uint64_t OZCurve::setKeypointInputNormalizedTangents(OZCurve *this, char *a2, double a3, double a4, int a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a5)
  {
    return 0;
  }
  uint64_t v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v10);
  if (!OZSpline::isValidHandle(v11, a2)) {
    return 0;
  }
  uint64_t v12 = PVInstructionGraphContext::HGNodeCache(v10);
  uint64_t v13 = *(uint64_t (**)(uint64_t, char *, uint64_t, void, __n128, __n128))(*(void *)v12 + 112);
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  v15.n128_f64[0] = a3;
  v16.n128_f64[0] = a4;

  return v13(v12, a2, v14, 0, v15, v16);
}

uint64_t OZCurve::setKeypointOutputNormalizedTangents(OZCurve *this, char *a2, double a3, double a4, int a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a5)
  {
    return 0;
  }
  uint64_t v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v10);
  if (!OZSpline::isValidHandle(v11, a2)) {
    return 0;
  }
  uint64_t v12 = PVInstructionGraphContext::HGNodeCache(v10);
  uint64_t v13 = *(uint64_t (**)(uint64_t, char *, uint64_t, void, __n128, __n128))(*(void *)v12 + 120);
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  v15.n128_f64[0] = a3;
  v16.n128_f64[0] = a4;

  return v13(v12, a2, v14, 0, v15, v16);
}

uint64_t OZCurve::setKeypointInputHandles(OZCurve *this, char *a2, double a3, double a4, int a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a5)
  {
    return 0;
  }
  int v11 = **((unsigned __int8 **)this + 20);
  uint64_t v12 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v10);
  if (!OZSpline::isValidHandle(v12, a2)) {
    return 0;
  }
  double v13 = 1.0;
  if (!v11) {
    double v13 = 12.0;
  }
  double v14 = a4 / v13;
  double v15 = a3 / v13;
  uint64_t v16 = PVInstructionGraphContext::HGNodeCache(v10);
  uint64_t v17 = *(uint64_t (**)(uint64_t, char *, uint64_t, void, __n128, __n128))(*(void *)v16 + 112);
  uint64_t v18 = MEMORY[0x1E4F1FA48];
  v19.n128_f64[0] = v15;
  v20.n128_f64[0] = v14;

  return v17(v16, a2, v18, 0, v19, v20);
}

uint64_t OZCurve::setKeypointOutputHandles(OZCurve *this, char *a2, double a3, double a4, int a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))
    || !*((unsigned char *)this + 138)
    || !OZCurve::isAnimated(this) && !a5)
  {
    return 0;
  }
  int v11 = **((unsigned __int8 **)this + 20);
  uint64_t v12 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v10);
  if (!OZSpline::isValidHandle(v12, a2)) {
    return 0;
  }
  double v13 = 1.0;
  if (!v11) {
    double v13 = 12.0;
  }
  double v14 = a4 / v13;
  double v15 = a3 / v13;
  uint64_t v16 = PVInstructionGraphContext::HGNodeCache(v10);
  uint64_t v17 = *(uint64_t (**)(uint64_t, char *, uint64_t, void, __n128, __n128))(*(void *)v16 + 120);
  uint64_t v18 = MEMORY[0x1E4F1FA48];
  v19.n128_f64[0] = v15;
  v20.n128_f64[0] = v14;

  return v17(v16, a2, v18, 0, v19, v20);
}

uint64_t OZCurve::getKeypointInputNormalizedTangents(OZCurve *this, char *a2, double *a3, double *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v7);
  if (!OZSpline::isValidHandle(v8, a2)) {
    return 0;
  }
  uint64_t v9 = PVInstructionGraphContext::HGNodeCache(v7);
  uint64_t v10 = *(uint64_t (**)(uint64_t, char *, double *, double *, uint64_t, void))(*(void *)v9 + 128);
  uint64_t v11 = MEMORY[0x1E4F1FA48];

  return v10(v9, a2, a3, a4, v11, 0);
}

uint64_t OZCurve::getKeypointOutputNormalizedTangents(OZCurve *this, char *a2, double *a3, double *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v7);
  if (!OZSpline::isValidHandle(v8, a2)) {
    return 0;
  }
  uint64_t v9 = PVInstructionGraphContext::HGNodeCache(v7);
  uint64_t v10 = *(uint64_t (**)(uint64_t, char *, double *, double *, uint64_t, void))(*(void *)v9 + 136);
  uint64_t v11 = MEMORY[0x1E4F1FA48];

  return v10(v9, a2, a3, a4, v11, 0);
}

uint64_t OZCurve::getKeypointInputHandles(OZCurve *this, char *a2, double *a3, double *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
    uint64_t result = OZSpline::isValidHandle(v10, a2);
    if (result)
    {
      uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, double *, double *, void, void))(*(void *)v11 + 128))(v11, a2, a3, a4, MEMORY[0x1E4F1FA48], 0);
    }
    double v12 = 1.0;
    if (!**((unsigned char **)this + 20)) {
      double v12 = 12.0;
    }
    if (a3) {
      *a3 = v12 * *a3;
    }
    if (a4) {
      *a4 = v12 * *a4;
    }
  }
  return result;
}

uint64_t OZCurve::getKeypointOutputHandles(OZCurve *this, char *a2, double *a3, double *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
    uint64_t result = OZSpline::isValidHandle(v10, a2);
    if (result)
    {
      uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, double *, double *, void, void))(*(void *)v11 + 136))(v11, a2, a3, a4, MEMORY[0x1E4F1FA48], 0);
    }
    double v12 = 1.0;
    if (!**((unsigned char **)this + 20)) {
      double v12 = 12.0;
    }
    if (a3) {
      *a3 = v12 * *a3;
    }
    if (a4) {
      *a4 = v12 * *a4;
    }
  }
  return result;
}

BOOL OZCurve::getPointInputTangents(OZCurve *this, const CMTime *a2, double *a3, double *a4, int a5)
{
  uint64_t v9 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v10 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v10)
  {
    uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v9);
    (*(void (**)(uint64_t, const CMTime *, double *, double *, void))(*(void *)v11 + 224))(v11, a2, a3, a4, MEMORY[0x1E4F1FA48]);
    double v12 = 1.0;
    if (a5) {
      double v12 = 12.0;
    }
    if (a3) {
      *a3 = v12 * *a3;
    }
    if (a4) {
      *a4 = v12 * *a4;
    }
  }
  return v10 != 0;
}

BOOL OZCurve::getPointOutputTangents(OZCurve *this, const CMTime *a2, double *a3, double *a4, int a5)
{
  uint64_t v9 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v10 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v10)
  {
    uint64_t v11 = PVInstructionGraphContext::HGNodeCache(v9);
    (*(void (**)(uint64_t, const CMTime *, double *, double *, void))(*(void *)v11 + 232))(v11, a2, a3, a4, MEMORY[0x1E4F1FA48]);
    double v12 = 1.0;
    if (a5) {
      double v12 = 12.0;
    }
    if (a3) {
      *a3 = v12 * *a3;
    }
    if (a4) {
      *a4 = v12 * *a4;
    }
  }
  return v10 != 0;
}

uint64_t OZCurve::deriveKeypoint(OZCurve *this, char *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v5 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v3);
    uint64_t result = OZSpline::isValidHandle(v5, a2);
    if (result)
    {
      uint64_t v6 = PVInstructionGraphContext::HGNodeCache(v3);
      (*(void (**)(uint64_t, char *, void))(*(void *)v6 + 216))(v6, a2, MEMORY[0x1E4F1FA48]);
      uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v3);
      OZSpline::resetVertexFlag(v7, a2, 128);
      return 1;
    }
  }
  return result;
}

BOOL OZCurve::setKeypointInterpolation(OZCurve *this, char *a2, uint64_t a3, int a4)
{
  if (!a2 || !*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache(v8)) {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);

  return OZSpline::setVertexInterpolation(v10, a2, a3);
}

BOOL OZCurve::setCurveInterpolation(OZCurve *this, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)this + 138);
  if (*((unsigned char *)this + 138))
  {
    OZCurve::isAnimated(this);
    if (*(_DWORD *)(*((void *)this + 20) + 32) != a2)
    {
      uint64_t LocalSplineState = OZCurve::createLocalSplineState(this);
      *((void *)this + 20) = LocalSplineState;
      *(_DWORD *)(LocalSplineState + 32) = a2;
      uint64_t v6 = (PVInstructionGraphContext *)((char *)this + 40);
      if (PVInstructionGraphContext::HGNodeCache(v6))
      {
        uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v6);
        OZSpline::setInterpolation(v7, a2);
      }
    }
  }
  return v2 != 0;
}

uint64_t OZCurve::setKeypointSpeed(OZCurve *this, char *a2, int a3, int a4)
{
  if (!a2 || !*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache(v8)) {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);

  return OZSpline::setVertexSpeed(v10, a2, a3);
}

uint64_t OZCurve::getKeypointSpeed(OZCurve *this, char *a2, unsigned int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
  if (!OZSpline::isValidHandle(v6, a2)) {
    return 0;
  }
  uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);

  return OZSpline::getVertexSpeed(v7, a2, a3);
}

uint64_t OZCurve::adjustKeypointSpeed(OZCurve *this, char *a2, double a3, int a4)
{
  if (!a2 || !*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache(v8)) {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = (void ***)PVInstructionGraphContext::HGNodeCache(v8);

  return OZSpline::adjustVertexSpeed(v10, a2, a3);
}

uint64_t OZCurve::setCurveParametric(OZCurve *this, int a2)
{
  if ((**((unsigned char **)this + 20) != 0) != a2)
  {
    char v2 = a2;
    uint64_t LocalSplineState = (unsigned char *)OZCurve::createLocalSplineState(this);
    *((void *)this + 20) = LocalSplineState;
    *uint64_t LocalSplineState = v2;
  }
  return 1;
}

uint64_t OZCurve::isCurveParametric(OZCurve *this, BOOL *a2)
{
  *a2 = **((unsigned char **)this + 20);
  return 1;
}

uint64_t OZCurve::getCurveInterpolation(OZCurve *this, unsigned int *a2)
{
  uint64_t v4 = (PVInstructionGraphContext *)((char *)this + 40);
  if (PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    uint64_t v5 = PVInstructionGraphContext::HGNodeCache(v4);
    (*(void (**)(uint64_t, unsigned int *, void, void))(*(void *)v5 + 16))(v5, a2, 0, 0);
    return 1;
  }
  if (a2)
  {
    *a2 = *(_DWORD *)(*((void *)this + 20) + 32);
    return 1;
  }
  return 0;
}

BOOL OZCurve::closeCurve(OZCurve *this)
{
  uint64_t v1 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v2 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v2)
  {
    uint64_t v3 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v1);
    OZSpline::setClosed(v3, 1, 0);
  }
  return v2 != 0;
}

BOOL OZCurve::isClosedCurve(OZCurve *this, BOOL *a2)
{
  uint64_t v3 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v4 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v4) {
    *a2 = *(unsigned char *)(PVInstructionGraphContext::HGNodeCache(v3) + 144);
  }
  return v4 != 0;
}

BOOL OZCurve::getKeypointInterpolation(OZCurve *this, char *a2, unsigned int *a3, BOOL *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v7);
  if (!OZSpline::isValidHandle(v8, a2)) {
    return 0;
  }
  uint64_t v9 = (OZInterpolators **)PVInstructionGraphContext::HGNodeCache(v7);

  return OZSpline::getVertexInterpolation(v9, a2, a3, a4);
}

uint64_t OZCurve::generateKeypoints(OZCurve *this, unsigned int a2, unsigned int a3, int a4)
{
  if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
  {
    uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
    if (PVInstructionGraphContext::HGNodeCache(v8))
    {
      uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZSpline::generateExtrapolatedVertices(v9, a2, a3, v10);
    }
  }
  return 0;
}

uint64_t OZCurve::warpCurveLinear(OZCurve *this, Float64 a2, const CMTime *a3, int a4)
{
  if (!*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v9 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    OZSpline::warpSplineLinear(v9, a2, a3, MEMORY[0x1E4F1FA48]);
    return 1;
  }
  return result;
}

uint64_t OZCurve::forceRetimeCurve(OZCurve *this, const CMTime *a2, const CMTime *a3)
{
  if (!*((unsigned char *)this + 138)) {
    return 0;
  }
  uint64_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    OZSpline::forceWarpSplineLinear(v7, a2, a3);
    return 1;
  }
  return result;
}

uint64_t OZCurve::reverseKeypoints(OZCurve *this, void *a2, void *a3, int a4)
{
  if (!*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    OZSpline::reverseVertices(v9, a2, a3);
    return 1;
  }
  return result;
}

BOOL OZCurve::purgeCurve(OZCurve *this)
{
  uint64_t v1 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v2 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v2)
  {
    uint64_t v3 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v1);
    OZSpline::purge(v3);
  }
  return v2 != 0;
}

uint64_t OZCurve::setKeypointSmooth(OZCurve *this, char *a2, uint64_t a3, int a4)
{
  if (!*((unsigned char *)this + 138) || !OZCurve::isAnimated(this) && !a4) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache(v8)) {
    return 0;
  }
  uint64_t v9 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
  if (!OZSpline::isValidHandle(v9, a2)) {
    return 0;
  }
  uint64_t v10 = PVInstructionGraphContext::HGNodeCache(v8);
  uint64_t v11 = MEMORY[0x1E4F1FA48];
  double v12 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v10 + 152);

  return v12(v10, a2, a3, v11);
}

uint64_t OZCurve::offsetKeypointInTime(OZCurve *this, char *a2, const CMTime *a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    if (*((unsigned char *)this + 138) && (OZCurve::isAnimated(this) || a4))
    {
      uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
      uint64_t result = OZSpline::isValidHandle(v10, a2);
      if (result)
      {
        uint64_t v11 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v8);
        OZSpline::offsetVertexInTime(v11, a2, a3, MEMORY[0x1E4F1FA48]);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZCurve::setRoundingInUSpace(OZCurve *this, int a2)
{
  if ((*(unsigned char *)(*((void *)this + 20) + 1) != 0) != a2)
  {
    uint64_t LocalSplineState = OZCurve::createLocalSplineState(this);
    *((void *)this + 20) = LocalSplineState;
    *(unsigned char *)(LocalSplineState + 1) = a2;
    if (a2) {
      int32_t v5 = 30;
    }
    else {
      int32_t v5 = 3000000;
    }
    CMTimeMake(&v8, 1, v5);
    long long v6 = *(_OWORD *)&v8.value;
    *(void *)(LocalSplineState + 24) = v8.epoch;
    *(_OWORD *)(LocalSplineState + 8) = v6;
  }
  return 1;
}

uint64_t OZCurve::isRoundingInUSpace(OZCurve *this, BOOL *a2)
{
  *a2 = *(unsigned char *)(*((void *)this + 20) + 1);
  return 1;
}

uint64_t OZCurve::setKeypointBiasLinear(OZCurve *this, char *a2, double a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  long long v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
  if (!OZSpline::isValidHandle(v6, a2)) {
    return 0;
  }
  uint64_t v7 = PVInstructionGraphContext::HGNodeCache(v5);
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(*(void *)v7 + 272);
  v10.n128_f64[0] = a3;

  return v9(v7, a2, v8, v10);
}

uint64_t OZCurve::getKeypointBiasLinear(OZCurve *this, char *a2, double *a3)
{
  if (!a3) {
    return 0;
  }
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
    return 0;
  }
  long long v6 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
  if (!OZSpline::isValidHandle(v6, a2)) {
    return 0;
  }
  uint64_t v7 = PVInstructionGraphContext::HGNodeCache(v5);
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(uint64_t (**)(uint64_t, char *, double *, uint64_t))(*(void *)v7 + 280);

  return v9(v7, a2, a3, v8);
}

BOOL OZCurve::hasInterpolation(OZCurve *this, int a2, BOOL *a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v6 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  uint64_t v7 = v6;
  if (a3 && v6)
  {
    uint64_t v8 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    *a3 = OZSpline::hasInterpolation(v8, a2);
  }
  return v7 != 0;
}

uint64_t OZCurve::getPreviousValidKeypointHandle(OZCurve *this, void *a2, void **a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getPreviousValidVertexWithLock(v7, a2, a3, v8);
  }
  return result;
}

uint64_t OZCurve::getNextValidKeypointHandle(OZCurve *this, void *a2, void **a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getNextValidVertexWithLock(v7, a2, a3, v8);
  }
  return result;
}

uint64_t OZCurve::getPreviousValidKeypointHandle(OZCurve *this, const CMTime *a2, void **a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getPreviousValidVertexWithLock(v7, a2, a3, v8, 0);
  }
  return result;
}

uint64_t OZCurve::getNextValidKeypointHandle(OZCurve *this, const CMTime *a2, void **a3)
{
  int32_t v5 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t result = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (result)
  {
    uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v5);
    uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZSpline::getNextValidVertexWithLock(v7, a2, a3, v8, 0);
  }
  return result;
}

BOOL OZCurve::reparametrizeCurve(OZCurve *this)
{
  uint64_t v1 = (PVInstructionGraphContext *)((char *)this + 40);
  uint64_t v2 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
  if (v2)
  {
    uint64_t v3 = PVInstructionGraphContext::HGNodeCache(v1);
    OZSpline::reparametrize(v3);
  }
  return v2 != 0;
}

void OZCurve::loadVertices(OZCurve *this, int a2, int a3)
{
  if (a3)
  {
    if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40))) {
      OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
    }
    uint64_t v6 = (void **)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
    if (a2) {
      OZSpline::reserveMemoryForKeypoints(v6, a3);
    }
    else {
      OZSpline::setDirty((OZSpline *)v6, 1);
    }
  }
  *((unsigned char *)this + 96) = a2;
  uint64_t v7 = (OZSpline *)*((void *)this + 8);
  if (v7)
  {
    OZSpline::setDirty(v7, 1);
  }
}

uint64_t OZCurve::generateCurveFromDynamicCurve(OZCurve *this, const CMTime *a2, OZDynamicCurve *a3)
{
  uint64_t v6 = (OZSplineNode *)((char *)this + 40);
  if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
  {
    if (*(unsigned char *)(*((void *)this + 20) + 44)) {
      *((void *)this + 20) = OZCurve::createLocalSplineState(this);
    }
    OZSplineNode::createSpline(v6);
  }
  uint64_t v7 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v6);
  OZSpline::generateSplineFromDynamicSpline(v7, a2, (OZDynamicCurve *)((char *)a3 + 8));
  return 1;
}

CMTime *OZCurve::getFrameDuration@<X0>(OZCurve *this@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = (OZChannelBase *)*((void *)this + 19);
  if (v2) {
    return OZChannelBase::getFrameDuration(v2, a2);
  }
  else {
    return CMTimeMake(a2, 1, 30);
  }
}

void OZCurve::beginPlayback(OZCurve *this, const CMTime *a2, int a3, int a4, const CMTime *a5)
{
  int32_t v5 = (OZRecordingNode *)*((void *)this + 13);
  if (!v5) {
    operator new();
  }

  OZRecordingNode::beginPlayback(v5, a2, a3, a4, a5);
}

void sub_1B7990BDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C406D9F4237);
  _Unwind_Resume(a1);
}

void OZCurve::endPlayback(OZCurve *this, const CMTime *a2)
{
}

uint64_t OZCurve::beginRecording(OZCurve *this, const CMTime *a2)
{
  uint64_t result = OZRecordingNode::beginRecording(*((OZRecordingNode **)this + 13), a2);
  *((void *)this + 1) = *((void *)this + 13);
  *((_DWORD *)this + 42) = 2;
  return result;
}

void OZCurve::endRecording(OZCurve *this, const CMTime *a2)
{
  *((void *)this + 1) = (char *)this + 40;
  *((_DWORD *)this + 42) = 1;
}

void OZCurve::updateCurrentRecordingTime(OZCurve *this, const CMTime *a2)
{
}

BOOL OZCurve::isPlaying(OZCurve *this, unsigned int *a2, unsigned int *a3, CMTime *a4)
{
  uint64_t v4 = *((void *)this + 13);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(unsigned char *)(v4 + 16))
  {
    if (a2) {
      *a2 = *(_DWORD *)(v4 + 8);
    }
    if (a3) {
      *a3 = *(_DWORD *)(v4 + 12);
    }
    if (a4)
    {
      long long v6 = *(_OWORD *)(v4 + 88);
      a4->CMTimeEpoch epoch = *(void *)(v4 + 104);
      *(_OWORD *)&a4->CMTimeValue value = v6;
    }
  }
  return v5 != 0;
}

BOOL OZCurve::isRecording(OZCurve *this)
{
  return *((void *)this + 1) == *((void *)this + 13);
}

uint64_t OZCurve::writeHeader(OZCurve *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCurveScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 118);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void OZCurve::writeBody(OZCurve *this, PCSerializerWriteStream *a2)
{
  double v39 = 0.0;
  long long v37 = *MEMORY[0x1E4F1FA48];
  uint64_t v38 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  double v35 = 0.0;
  double v36 = 0.0;
  double v33 = 0.0;
  double v34 = 0.0;
  double v31 = 0.0;
  double v32 = 0.0;
  unsigned int v30 = 0;
  char v29 = 0;
  double v27 = 0.0;
  uint64_t v28 = 0;
  CMTime __p = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCurveScope);
  uint64_t v4 = (*(uint64_t (**)(OZCurve *))(*(void *)this + 1216))(this);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 512))(v4);
  (*(void (**)(OZCurve *, uint64_t *))(*(void *)this + 152))(this, &v28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 4, v28);
  (*(void (**)(OZCurve *, double *))(*(void *)this + 192))(this, &v39);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 8, v39);
  }
  if (v28)
  {
    (*(void (**)(OZCurve *, double *))(*(void *)this + 208))(this, &v39);
    v6.n128_f64[0] = v39;
  }
  else
  {
    v6.n128_f64[0] = OZConstantNode::solveNode((OZConstantNode *)((char *)this + 16), MEMORY[0x1E4F1FA48], 0.0, 0.0);
    double v39 = v6.n128_f64[0];
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, __n128))(*(void *)a2 + 184))(a2, 1, v6);
  (*(void (**)(OZCurve *, char *))(*(void *)this + 112))(this, &v29);
  if (v29) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 5, 1);
  }
  (*(void (**)(OZCurve *, char *))(*(void *)this + 176))(this, &v29);
  if (!v29) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 6, 0);
  }
  if ((*(unsigned int (**)(OZCurve *))(*(void *)this + 352))(this)) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 7, 1);
  }
  if (v5)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 62);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v5);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (((*(uint64_t (**)(OZCurve *))(*(void *)this + 1240))(this) & 1) == 0)
  {
    double v7 = *((double *)this + 15);
    if (v7 > -1.79769313e308)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 64);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v7);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    double v8 = *((double *)this + 16);
    if (v8 < 1.79769313e308)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 65);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v8);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
  }
  unsigned int v23 = 0;
  (*(void (**)(OZCurve *, unsigned int *, uint64_t))(*(void *)this + 336))(this, &v23, 1);
  uint64_t v9 = v23;
  if (v23)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 52);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v9);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  (*(void (**)(OZCurve *, unsigned int *, void))(*(void *)this + 336))(this, &v23, 0);
  uint64_t v10 = v23;
  if (v23)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 51);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  char v22 = 0;
  (*(void (**)(OZCurve *, char *))(*(void *)this + 128))(this, &v22);
  if (v22)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 61);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (v5)
  {
    std::vector<void *>::reserve(&__p, v5);
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 792))(v4, &__p);
  }
  if (v25 != __p)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 1;
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 53);
      (*(void (**)(uint64_t, void, char *, void))(*(void *)v4 + 1072))(v4, *((void *)__p + v11), (char *)&v28 + 4, 0);
      if (HIDWORD(v28) != 4) {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 144))(a2, 10);
      }
      (*(void (**)(uint64_t, void, char *))(*(void *)v4 + 864))(v4, *((void *)__p + v11), &v29);
      if (!v29) {
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 9, 0);
      }
      (*(void (**)(uint64_t, void, unsigned int *))(*(void *)v4 + 840))(v4, *((void *)__p + v11), &v30);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 11, v30);
      (*(void (**)(uint64_t, void, double *))(*(void *)v4 + 1056))(v4, *((void *)__p + v11), &v27);
      (*(void (**)(uint64_t, void, long long *, double *))(*(void *)v4 + 752))(v4, *((void *)__p + v11), &v37, &v36);
      (*(void (**)(uint64_t, void, double *))(*(void *)v4 + 952))(v4, *((void *)__p + v11), &v31);
      uint64_t v21 = v38;
      long long v20 = v37;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 54);
      (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v20);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v13 = v36;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 55);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v13);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v14 = v27;
      if (fabs(v27 + -1.0) >= 0.0000001)
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 60);
        (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v14);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      double v15 = v31;
      if (v31 <= -0.0000001 || v31 >= 0.0000001)
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 63);
        (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v15);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      if (*(unsigned char *)(*((void *)this + 20) + 2) || HIDWORD(v28) == 18)
      {
        (*(void (**)(uint64_t, void, double *, double *))(*(void *)v4 + 1000))(v4, *((void *)__p + v11), &v35, &v34);
        (*(void (**)(uint64_t, void, double *, double *))(*(void *)v4 + 1008))(v4, *((void *)__p + v11), &v33, &v32);
        double v16 = v35;
        if (fabs(v35) >= 0.0000001 || fabs(v34) >= 0.0000001)
        {
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 56);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v16);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          double v17 = v34;
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 57);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v17);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
        double v18 = v33;
        if (fabs(v33) >= 0.0000001 || fabs(v32) >= 0.0000001)
        {
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 58);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v18);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          double v19 = v32;
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 59);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v19);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
      }
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      unint64_t v11 = v12++;
    }
    while (v11 < (v25 - (unsigned char *)__p) >> 3);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (__p)
  {
    int v25 = __p;
    operator delete(__p);
  }
}

void sub_1B7991D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<void *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    __n128 v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t OZCurve::parseBegin(OZCurve *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZCurve::parseEnd(OZCurve *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = *((void *)this + 18);
  if (v3)
  {
    (*(void (**)(OZCurve *, void, void, uint64_t))(*(void *)this + 848))(this, *(void *)v3, *(unsigned int *)(v3 + 12), 1);
    uint64_t v4 = *((void *)this + 18);
    if (v4) {
      MEMORY[0x1BA9BFBA0](v4, 0x1080C4003FABA15);
    }
    *((void *)this + 18) = 0;
  }
  *((unsigned char *)this + 96) = 0;
  int64_t v5 = (OZSpline *)*((void *)this + 8);
  if (v5) {
    OZSpline::setDirty(v5, 1);
  }
  return 1;
}

uint64_t OZCurve::parseElement(OZCurve *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  double v27 = 0.0;
  uint64_t v28 = 0;
  unsigned __int8 v26 = 0;
  Float64 v25 = 0.0;
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case '3':
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v28 + 4);
      (*(void (**)(OZCurve *, void, void))(*(void *)this + 328))(this, HIDWORD(v28), 0);
      return 1;
    case '4':
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v28 + 4);
      (*(void (**)(OZCurve *, void, uint64_t))(*(void *)this + 328))(this, HIDWORD(v28), 1);
      return 1;
    case '5':
      uint64_t v8 = *((void *)this + 18);
      if (v8)
      {
        (*(void (**)(OZCurve *, void, void, uint64_t))(*(void *)this + 848))(this, *(void *)v8, *(unsigned int *)(v8 + 12), 1);
        uint64_t v9 = *((void *)this + 18);
        if (v9) {
          MEMORY[0x1BA9BFBA0](v9, 0x1080C4003FABA15);
        }
        *((void *)this + 18) = 0;
      }
      operator new();
    case '6':
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v25);
        CMTime v23 = *(CMTime *)((char *)a2 + 112);
        operator*(&v23, &v24, v25);
      }
      else
      {
        PCSerializerReadStream::getAsFigTime((uint64_t)a2, (uint64_t)a3, (uint64_t)&v24);
      }
      uint64_t v20 = *((void *)this + 18);
      CMTimeEpoch epoch = v24.epoch;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)&v24.value;
      *(void *)(v20 + 36) = epoch;
      return 1;
    case '7':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 80);
      if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
      {
        if (*(unsigned char *)(*((void *)this + 20) + 44)) {
          *((void *)this + 20) = OZCurve::createLocalSplineState(this);
        }
        OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
      }
      uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
      OZSpline::appendVertexNoTangents(v10, (const CMTime *)(*((void *)this + 18) + 20), *(double *)(*((void *)this + 18) + 80), MEMORY[0x1E4F1FA48]);
    case '8':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 48);
      if (*((_DWORD *)a2 + 26) <= 4u) {
        *(double *)(*((void *)this + 18) + 48) = *((double *)a2 + 17) * *(double *)(*((void *)this + 18) + 48);
      }
      return 1;
    case '9':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 56);
      uint64_t v11 = *((void *)this + 18);
      if (*(unsigned char *)(*((void *)this + 20) + 2) || *(_DWORD *)(v11 + 8) == 18) {
        (*(void (**)(OZCurve *, void, uint64_t, double, double))(*(void *)this + 984))(this, *(void *)v11, 1, *(double *)(v11 + 48), *(double *)(v11 + 56));
      }
      return 1;
    case ':':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 64);
      if (*((_DWORD *)a2 + 26) <= 4u) {
        *(double *)(*((void *)this + 18) + 64) = *((double *)a2 + 17) * *(double *)(*((void *)this + 18) + 64);
      }
      return 1;
    case ';':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 72);
      uint64_t v12 = *((void *)this + 18);
      if (*(unsigned char *)(*((void *)this + 20) + 2) || *(_DWORD *)(v12 + 8) == 18)
      {
        (*(void (**)(OZCurve *, void, uint64_t, double, double))(*(void *)this + 992))(this, *(void *)v12, 1, *(double *)(v12 + 64), *(double *)(v12 + 72));
        uint64_t v12 = *((void *)this + 18);
      }
      if (!*(unsigned char *)(v12 + 16)) {
        (*(void (**)(OZCurve *, void, void, uint64_t))(*(void *)this + 856))(this, *(void *)v12, 0, 1);
      }
      return 1;
    case '<':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 88);
      uint64_t v13 = (void *)*((void *)this + 18);
      v14.n128_u64[0] = v13[11];
      (*(void (**)(OZCurve *, void, __n128))(*(void *)this + 1048))(this, *v13, v14);
      return 1;
    case '=':
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v28 + 4);
      if (HIDWORD(v28)) {
        (*(void (**)(OZCurve *))(*(void *)this + 120))(this);
      }
      return 1;
    case '>':
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v28 + 4);
      (*(void (**)(OZCurve *, void, uint64_t))(*(void *)this + 688))(this, MEMORY[0x1E4F1FA48], 1);
      if (!PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40)))
      {
        if (*(unsigned char *)(*((void *)this + 20) + 44)) {
          *((void *)this + 20) = OZCurve::createLocalSplineState(this);
        }
        OZSplineNode::createSpline((OZSplineNode *)((char *)this + 40));
      }
      double v15 = (void **)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)((char *)this + 40));
      OZSpline::reserveMemoryForKeypoints(v15, SHIDWORD(v28));
      *((unsigned char *)this + 96) = 1;
      double v16 = (OZSpline *)*((void *)this + 8);
      if (v16) {
        OZSpline::setDirty(v16, 1);
      }
      return 1;
    case '?':
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, *((void *)this + 18) + 96);
      double v17 = (void *)*((void *)this + 18);
      v18.n128_u64[0] = v17[12];
      (*(void (**)(OZCurve *, void, uint64_t, __n128))(*(void *)this + 960))(this, *v17, 1, v18);
      return 1;
    case '@':
      double v19 = (char *)this + 120;
      goto LABEL_47;
    case 'A':
      double v19 = (char *)this + 128;
LABEL_47:
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)v19);
      break;
    default:
      if (v6 == 118)
      {
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)&v28);
        double v7 = *(void (**)(OZCurve *))(*(void *)this + 160);
        if (v28)
        {
          v7(this);
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v27)) {
            (*(void (**)(OZCurve *, double))(*(void *)this + 216))(this, v27);
          }
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v27)) {
            (*(void (**)(OZCurve *, double))(*(void *)this + 200))(this, v27);
          }
        }
        else
        {
          v7(this);
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v27)) {
            *((double *)this + 3) = v27;
          }
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v27)) {
            *((double *)this + 4) = v27;
          }
        }
        if (PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 5, (uint64_t)&v26)) {
          (*(void (**)(OZCurve *, void))(*(void *)this + 104))(this, v26);
        }
        if (PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 6, (uint64_t)&v26)) {
          (*(void (**)(OZCurve *, void))(*(void *)this + 168))(this, v26);
        }
        if (PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v26)) {
          (*(void (**)(OZCurve *, void))(*(void *)this + 344))(this, v26);
        }
      }
      break;
  }
  return 1;
}

uint64_t OZCurve::getCurveWorkingCopy(OZCurve *this)
{
  return 0;
}

double OZCurveNodeParam::OZCurveNodeParam(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  long long v3 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E4F1FA48];
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 96) = v3;
  *(void *)(a1 + 136) = v4;
  *(_OWORD *)(a1 + 120) = v3;
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v8;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_WORD *)a1 = *(_WORD *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

void OZCurveNodeParam::~OZCurveNodeParam(OZCurveNodeParam *this)
{
  if (*((unsigned char *)this + 160))
  {
    uint64_t v2 = *((void *)this + 19);
    if (v2) {
      MEMORY[0x1BA9BFB70](v2, 0x1000C8000313F17);
    }
  }
  if (*((unsigned char *)this + 88))
  {
    uint64_t v3 = *((void *)this + 10);
    if (v3) {
      MEMORY[0x1BA9BFB70](v3, 0x1000C8000313F17);
    }
  }
}

void PCException::PCException(PCException *this, const PCException *a2)
{
  *(void *)this = &unk_1F10C25D0;
  uint64_t v4 = (const void *)*((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    CFRetain(v4);
  }
  PCString::PCString((PCString *)this + 2, (const PCString *)a2 + 2);
  PCString::PCString((PCString *)this + 3, (const PCString *)a2 + 3);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  uint64_t v5 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1B7992A50(_Unwind_Exception *a1)
{
  PCString::~PCString(v4);
  PCString::~PCString(v3);
  PCCFRef<__CFArray const*>::~PCCFRef(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B7992BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void sub_1B7993724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
}

void sub_1B7993838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZDynamicCurve::OZDynamicCurve(OZDynamicCurve *this)
{
  *(void *)this = &unk_1F1104058;
  OZDynamicSpline::OZDynamicSpline((OZDynamicCurve *)((char *)this + 8), (OZDynamicCurve *)((char *)this + 184));
}

void sub_1B7993EF0(_Unwind_Exception *a1)
{
  OZDynamicSpline::~OZDynamicSpline(v1);
  _Unwind_Resume(a1);
}

void OZDynamicCurve::~OZDynamicCurve(OZDynamicCurve *this)
{
  *(void *)this = &unk_1F1104058;
  uint64_t v2 = (OZDynamicCurve *)((char *)this + 8);
  OZSpline::deleteAllVertices((OZDynamicCurve *)((char *)this + 8));
  (*(void (**)(OZDynamicCurve *))(*(void *)this + 56))(this);
  OZDynamicSpline::~OZDynamicSpline(v2);
}

{
  uint64_t vars8;

  OZDynamicCurve::~OZDynamicCurve(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZDynamicCurve::operator=(uint64_t a1, os_unfair_lock_s *a2)
{
  OZSpline::operator=((OZSpline *)(a1 + 8), a2 + 2);
}

BOOL OZDynamicCurve::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = OZSpline::operator==(a1 + 8, a2 + 8);
  if (result)
  {
    return OZSplineState::operator==((unsigned __int8 *)(a1 + 184), (unsigned __int8 *)(a2 + 184), v5, v6);
  }
  return result;
}

uint64_t OZDynamicCurve::setCurveExtrapolation(OZDynamicCurve *this, int a2, int a3)
{
  return 1;
}

uint64_t OZDynamicCurve::getCurveExtrapolation(OZDynamicCurve *this, unsigned int *a2, int a3)
{
  if (a2) {
    *a2 = OZSpline::getExtrapolation((OZDynamicCurve *)((char *)this + 8), a3);
  }
  return 1;
}

uint64_t OZDynamicCurve::getCurveSamples(OZDynamicCurve *this, const CMTime *a2, Float64 a3, Float64 a4, unsigned int *a5, double *a6, double *a7)
{
  if (((*((void *)this + 4) - *((void *)this + 3)) & 0x7FFFFFFF8) != 0) {
    return OZDynamicSpline::sampleSpline((OZDynamicCurve *)((char *)this + 8), a3, a4, a5, a6, a7, a2);
  }
  else {
    return 0;
  }
}

uint64_t OZDynamicCurve::getCurveSamples(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Float64 a6, Float64 a7)
{
  if (((*(void *)(a1 + 32) - *(void *)(a1 + 24)) & 0x7FFFFFFF8) != 0) {
    return OZDynamicSpline::sampleSpline(a1 + 8, a3, a4, a5, a2, a6, a7);
  }
  else {
    return 0;
  }
}

uint64_t OZDynamicCurve::closeCurve(OZDynamicCurve *this)
{
  if (!*((unsigned char *)this + 152) && ((*((void *)this + 4) - *((void *)this + 3)) & 0x7FFFFFFF8) != 0) {
    OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 1, 0);
  }
  return 1;
}

uint64_t OZDynamicCurve::openCurve(OZDynamicCurve *this, void *a2)
{
  if (*((unsigned char *)this + 152) && ((*((void *)this + 4) - *((void *)this + 3)) & 0x7FFFFFFF8) != 0) {
    OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, a2);
  }
  return 1;
}

uint64_t OZDynamicCurve::isClosedCurve(OZDynamicCurve *this, BOOL *a2)
{
  if (a2) {
    *a2 = *((unsigned char *)this + 152);
  }
  return 1;
}

uint64_t OZDynamicCurve::resetCurve(OZDynamicCurve *this)
{
  return 1;
}

uint64_t OZDynamicCurve::getNumberOfKeypoints(OZDynamicCurve *this)
{
  return (*((void *)this + 4) - *((void *)this + 3)) >> 3;
}

unint64_t OZDynamicCurve::getNumberOfValidKeypoints(os_unfair_lock_s *this, const CMTime *a2)
{
  uint64_t v5 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  OZSpline::getAllValidVerticesHandles(this + 2, (void **)&v5, (uint64_t)a2);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  if (v5)
  {
    long long v6 = v5;
    operator delete(v5);
  }
  return (unint64_t)(v3 - v2) >> 3;
}

void sub_1B7994250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZDynamicCurve::getCurrentMaxValueV(OZDynamicCurve *this, const CMTime *a2, double *a3, double *a4)
{
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  *a3 = OZSpline::getMaxValueV((OZDynamicCurve *)((char *)this + 8), a2, &v7);
  if (a4)
  {
    CMTime v6 = v7;
    *a4 = CMTimeGetSeconds(&v6);
  }
  return 1;
}

uint64_t OZDynamicCurve::getCurrentMinValueV(OZDynamicCurve *this, const CMTime *a2, double *a3, double *a4)
{
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  *a3 = OZSpline::getMinValueV((OZDynamicCurve *)((char *)this + 8), a2, &v7);
  if (a4)
  {
    CMTime v6 = v7;
    *a4 = CMTimeGetSeconds(&v6);
  }
  return 1;
}

uint64_t OZDynamicCurve::getCurrentMaxValueU(OZDynamicCurve *this, const CMTime *a2, double *a3)
{
  CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  OZSpline::getMaxValueU((OZDynamicCurve *)((char *)this + 8), a2, 1, (uint64_t)&v6);
  if (a3)
  {
    CMTime v5 = v6;
    *a3 = CMTimeGetSeconds(&v5);
  }
  return 1;
}

uint64_t OZDynamicCurve::getCurrentMinValueU(OZDynamicCurve *this, const CMTime *a2, double *a3)
{
  CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  OZSpline::getMinValueU((OZDynamicCurve *)((char *)this + 8), a2, 1, (uint64_t)&v6);
  if (a3)
  {
    CMTime v5 = v6;
    *a3 = CMTimeGetSeconds(&v5);
  }
  return 1;
}

uint64_t OZDynamicCurve::getCurrentRangeU(OZDynamicCurve *this, const CMTime *a2, double *a3)
{
  if (a3)
  {
    OZSpline::getRangeU((OZDynamicCurve *)((char *)this + 8), a2, &time);
    *a3 = CMTimeGetSeconds(&time);
  }
  return 1;
}

uint64_t OZDynamicCurve::setKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3, Float64 a4, double a5)
{
  uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    OZFigTimeForChannelSeconds(&v11, a4, 0x40000);
    return OZDynamicSpline::setVertex(v9, (unsigned char **)a2, &v11, a5, a3);
  }
  return result;
}

void OZDynamicCurve::setKeypoint(OZDynamicCurve *this, const CMTime *a2, Float64 a3, void **a4)
{
  CMTime v6 = (OZDynamicCurve *)((char *)this + 8);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  OZFigTimeForChannelSeconds(&v8, a3, 0x40000);
  double VertexValue = OZSpline::getVertexValue(v6, &v8, a2, 0);
  OZDynamicSpline::addVertex((os_unfair_lock_s *)v6, &v9, VertexValue, a2);
}

void OZDynamicCurve::setKeypoint(OZDynamicCurve *this, const CMTime *a2, Float64 a3, double a4, void **a5)
{
  CMTime v9 = (OZDynamicCurve *)((char *)this + 8);
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (((*((void *)this + 4) - *((void *)this + 3)) & 0x7FFFFFFF8) != 0)
  {
    DepthBuffer = (void *)DepthBufferManager::getDepthBuffer((OZDynamicCurve *)((char *)this + 8));
    OZSpline::getVertex(v9, DepthBuffer, &v12, 0, a2);
  }
  else
  {
    CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  }
  OZFigTimeForChannelSeconds(&v11, a3, 0x40000);
  CMTime time1 = v11;
  CMTime time2 = v12;
  if (CMTimeCompare(&time1, &time2) >= 1 && !*((unsigned char *)this + 152))
  {
    OZFigTimeForChannelSeconds(&time1, a3, 0x40000);
    OZDynamicSpline::appendVertex((os_unfair_lock_s *)v9, &time1, a4, a2);
  }
  OZFigTimeForChannelSeconds(&time1, a3, 0x40000);
  OZDynamicSpline::addVertex((os_unfair_lock_s *)v9, &time1, a4, a2);
}

uint64_t OZDynamicCurve::setKeypointBiasLinear(OZDynamicCurve *this, char *a2, const CMTime *a3, double a4)
{
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::setVertexBiasLinear(v7, a2, a4, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::getKeypointBiasLinear(OZDynamicCurve *this, char *a2, const CMTime *a3, double *a4)
{
  if (!a4) {
    return 0;
  }
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  if (!OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2)) {
    return 0;
  }

  return OZSpline::getVertexBiasLinear(v7, a2, a4, a3);
}

uint64_t OZDynamicCurve::moveKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3, Float64 a4)
{
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    OZFigTimeForChannelSeconds(&v9, a4, 0x40000);
    return OZSpline::moveVertex(v7, a2, &v9, a3, 0, 0, 0) != 0;
  }
  return result;
}

uint64_t OZDynamicCurve::cloneKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3, Float64 a4)
{
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    OZFigTimeForChannelSeconds(&v9, a4, 0x40000);
    return OZSpline::moveVertex(v7, a2, &v9, a3, 1, 0, 0) != 0;
  }
  return result;
}

uint64_t OZDynamicCurve::getPoint(OZDynamicCurve *this, const CMTime *a2, Float64 a3, double *a4)
{
  if (a4)
  {
    CMTime v6 = (OZDynamicCurve *)((char *)this + 8);
    OZFigTimeForChannelSeconds(&v8, a3, 0x40000);
    *a4 = OZSpline::getVertexValue(v6, &v8, a2, 0);
  }
  return 1;
}

BOOL OZDynamicCurve::getKeypointHandle(OZDynamicCurve *this, const CMTime *a2, Float64 a3, void **a4)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  OZFigTimeForChannelSeconds(&v7, a3, 0x40000);
  return OZSpline::getVertexHandle(v5, &v7, a4, 0);
}

uint64_t OZDynamicCurve::getKeypointHandleList(uint64_t a1, char **a2)
{
  return OZDynamicSpline::getAllVerticesHandles((OZSpline *)(a1 + 8), a2);
}

uint64_t OZDynamicCurve::getKeypointValidHandleList(os_unfair_lock_s *a1, uint64_t a2, void **a3)
{
  return OZSpline::getAllValidVerticesHandles(a1 + 2, a3, a2);
}

uint64_t OZDynamicCurve::getFirstKeypoint(OZDynamicCurve *this, const CMTime *a2, double *a3, double *a4)
{
  CMTime v11 = 0;
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  OZSpline::getFirstValidVertex((OZDynamicCurve *)((char *)this + 8), &v11, MEMORY[0x1E4F1FA48]);
  if (v11)
  {
    OZSpline::getVertex(v7, v11, &v10, a4, a2);
    if (a3)
    {
      CMTime v9 = v10;
      *a3 = CMTimeGetSeconds(&v9);
    }
  }
  return 1;
}

BOOL OZDynamicCurve::getLastKeypoint(OZDynamicCurve *this, const CMTime *a2, double *a3, double *a4)
{
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v12 = 0;
  CMTime v7 = (OZDynamicCurve *)((char *)this + 8);
  OZSpline::getLastValidVertex((OZDynamicCurve *)((char *)this + 8), &v12, MEMORY[0x1E4F1FA48]);
  CMTime v8 = v12;
  if (v12)
  {
    OZSpline::getVertex(v7, v12, &v11, a4, a2);
    if (a3)
    {
      CMTime v10 = v11;
      *a3 = CMTimeGetSeconds(&v10);
    }
  }
  return v8 != 0;
}

BOOL OZDynamicCurve::getKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3, double *a4, double *a5)
{
  CMTime v9 = (OZDynamicCurve *)((char *)this + 8);
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2)) {
    return 0;
  }
  BOOL Vertex = OZSpline::getVertex(v9, a2, &v13, a5, a3);
  if (a4)
  {
    CMTime v12 = v13;
    *a4 = CMTimeGetSeconds(&v12);
  }
  return Vertex;
}

uint64_t OZDynamicCurve::delKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3)
{
  CMTime v6 = (char **)((char *)this + 8);
  if (!OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2)) {
    return 0;
  }
  uint64_t v7 = OZDynamicSpline::deleteVertex(v6, a2, 1, a3);
  if (((*((void *)this + 4) - *((void *)this + 3)) & 0x7FFFFFFF8) == 0) {
    (*(void (**)(OZDynamicCurve *))(*(void *)this + 56))(this);
  }
  OZSpline::reparametrize((uint64_t)v6);
  return v7;
}

BOOL OZDynamicCurve::delAllKeypoints(OZDynamicCurve *this)
{
  BOOL v2 = OZSpline::deleteAllVertices((OZDynamicCurve *)((char *)this + 8));
  (*(void (**)(OZDynamicCurve *))(*(void *)this + 56))(this);
  return v2;
}

uint64_t OZDynamicCurve::getKeypointFlags(OZDynamicCurve *this, char *a2, unsigned int *a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::getVertexFlags(v5, a2, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::setKeypointFlags(OZDynamicCurve *this, char *a2, uint64_t a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::setVertexFlags(v5, a2, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::enableKeypoint(OZDynamicCurve *this, char *a2, int a3, const CMTime *a4)
{
  uint64_t v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZDynamicSpline::enableVertex(v7, a2, a4);
    }
    else
    {
      return OZDynamicSpline::disableVertex(v7, a2, a4);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::isEnabledKeypoint(OZDynamicCurve *this, char *a2, const CMTime *a3, BOOL *a4)
{
  uint64_t v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    *a4 = OZSpline::isEnabledVertex(v7, a2, a3);
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::selectKeypoint(OZDynamicCurve *this, char *a2, int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZSpline::setVertexFlag(v5, a2, 16);
    }
    else
    {
      return OZSpline::resetVertexFlag(v5, a2, 16);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::isSelectedKeypoint(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  unsigned int v8 = 0;
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle)
  {
    OZSpline::getVertexFlags(v5, a2, &v8);
    *a3 = (v8 & 0x10) != 0;
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::lockKeypoint(OZDynamicCurve *this, char *a2, int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZSpline::setVertexFlag(v5, a2, 2);
    }
    else
    {
      return OZSpline::resetVertexFlag(v5, a2, 2);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::isLockedKeypoint(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  unsigned int v8 = 0;
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle)
  {
    OZSpline::getVertexFlags(v5, a2, &v8);
    *a3 = (v8 & 2) != 0;
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::setOpenEdgeKeypoint(OZDynamicCurve *this, char *a2, int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZSpline::setVertexFlag(v5, a2, 512);
    }
    else
    {
      return OZSpline::resetVertexFlag(v5, a2, 512);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::isOpenEdgeKeypoint(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  unsigned int v8 = 0;
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle)
  {
    OZSpline::getVertexFlags(v5, a2, &v8);
    *a3 = (v8 & 0x200) != 0;
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::enableBehaviorForKeypoint(OZDynamicCurve *this, char *a2, uint64_t a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    OZDynamicSpline::enableBehaviorForVertex(v5, a2, a3);
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::isBehaviorEnabledForKeypoint(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    *a3 = OZDynamicSpline::enabledBehaviorForVertex(v5, a2);
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::weightHandles(OZDynamicCurve *this, char *a2, int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZSpline::setVertexFlag(v5, a2, 8);
    }
    else
    {
      return OZSpline::resetVertexFlag(v5, a2, 8);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::areHandlesWeighted(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  unsigned int v8 = 0;
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle)
  {
    OZSpline::getVertexFlags(v5, a2, &v8);
    *a3 = (v8 & 8) != 0;
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::breakKeypointHandles(OZDynamicCurve *this, char *a2, int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    if (a3)
    {
      return OZSpline::setVertexFlag(v5, a2, 1);
    }
    else
    {
      return OZSpline::resetVertexFlag(v5, a2, 1);
    }
  }
  return result;
}

uint64_t OZDynamicCurve::areHandlesBroken(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  unsigned int v8 = 0;
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle)
  {
    OZSpline::getVertexFlags(v5, a2, &v8);
    *a3 = v8 & 1;
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::flattenHandles(OZDynamicCurve *this, char *a2, const CMTime *a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::flattenHandles(v5, a2, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::setKeypointInputHandles(OZDynamicCurve *this, char *a2, const CMTime *a3, double a4)
{
  uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZDynamicSpline::setVertexInputHandles(v7, a2, 0.0, a4, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::setKeypointOutputHandles(OZDynamicCurve *this, char *a2, const CMTime *a3, double a4)
{
  uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZDynamicSpline::setVertexOutputHandles(v7, a2, 0.0, a4, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::getKeypointInputHandles(OZDynamicCurve *this, char *a2, const CMTime *a3, double *a4)
{
  uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZDynamicSpline::getVertexInputHandles(v7, a2, 0, a4, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::getKeypointOutputHandles(OZDynamicCurve *this, char *a2, const CMTime *a3, double *a4)
{
  uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZDynamicSpline::getVertexOutputHandles(v7, a2, 0, a4, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::setKeypointInterpolation(OZDynamicCurve *this, char *a2, uint64_t a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::setVertexInterpolation(v5, a2, a3);
  }
  return result;
}

uint64_t OZDynamicCurve::setCurveInterpolation(OZDynamicCurve *this, uint64_t a2)
{
  int v2 = a2;
  OZSpline::setInterpolation((OZDynamicCurve *)((char *)this + 8), a2);
  *((_DWORD *)this + 54) = v2;
  return 1;
}

BOOL OZDynamicCurve::getCurveInterpolation(OZDynamicCurve *this, unsigned int *a2, BOOL *a3, BOOL *a4)
{
  return OZDynamicSpline::getInterpolation((OZDynamicCurve *)((char *)this + 8), a2, a3, a4);
}

uint64_t OZDynamicCurve::getKeypointInterpolation(OZDynamicCurve *this, char *a2, unsigned int *a3, BOOL *a4)
{
  uint64_t v7 = (OZInterpolators **)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    return OZSpline::getVertexInterpolation(v7, a2, a3, a4);
  }
  return result;
}

void OZDynamicCurve::generateKeypoints(OZDynamicCurve *this, unsigned int a2, unsigned int a3)
{
}

uint64_t OZDynamicCurve::reparametrizeCurve(OZDynamicCurve *this)
{
  return 1;
}

uint64_t OZDynamicCurve::reverseWindingOrder(OZDynamicCurve *this)
{
  return 1;
}

uint64_t OZDynamicCurve::getVertexChannel(OZDynamicCurve *this, char *a2, OZChannelVertexFolder **a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  unsigned int isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (a3) {
    uint64_t v7 = isValidHandle;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == 1) {
    *a3 = (OZChannelVertexFolder *)OZDynamicSpline::getVertexChannel(v5, a2);
  }
  return v7;
}

uint64_t OZDynamicCurve::setVertexChannel(OZDynamicCurve *this, char *a2, OZChannelVertexFolder *a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  unsigned int isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (a3) {
    uint64_t v7 = isValidHandle;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == 1) {
    OZDynamicSpline::setVertexChannel(v5, a2, a3);
  }
  return v7;
}

uint64_t OZDynamicCurve::getPreviousKeypointHandle(OZDynamicCurve *this, const CMTime *a2, char *a3, void **a4)
{
  CMTime v6 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a3);
  if (result)
  {
    PreviousBOOL Vertex = (void *)OZSpline::getPreviousVertex(v6, a3);
    if (a4) {
      *a4 = PreviousVertex;
    }
    return PreviousVertex != 0;
  }
  return result;
}

uint64_t OZDynamicCurve::getNextKeypointHandle(OZDynamicCurve *this, const CMTime *a2, char *a3, void **a4)
{
  CMTime v6 = (void ***)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a3);
  if (result)
  {
    NextBOOL Vertex = OZSpline::getNextVertex(v6, a3);
    if (a4) {
      *a4 = NextVertex;
    }
    return NextVertex != 0;
  }
  return result;
}

uint64_t OZDynamicCurve::getPreviousValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, char *a3, void **a4)
{
  uint64_t v7 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a3);
  if (result)
  {
    CMTime v10 = 0;
    OZSpline::getPreviousValidVertex(v7, a3, &v10, a2);
    CMTime v9 = v10;
    if (a4) {
      *a4 = v10;
    }
    return v9 != 0;
  }
  return result;
}

uint64_t OZDynamicCurve::getNextValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, char *a3, void **a4)
{
  uint64_t v7 = (void ***)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a3);
  if (result)
  {
    CMTime v10 = 0;
    OZSpline::getNextValidVertex(v7, a3, &v10, a2);
    CMTime v9 = v10;
    if (a4) {
      *a4 = v10;
    }
    return v9 != 0;
  }
  return result;
}

BOOL OZDynamicCurve::getPreviousValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, Float64 a3, void **a4)
{
  CMTime v6 = (OZDynamicCurve *)((char *)this + 8);
  OZFigTimeForChannelSeconds(&v8, a3, 0x40000);
  OZSpline::getPreviousValidVertex(v6, &v8, a4, a2, 0);
  return *a4 != 0;
}

BOOL OZDynamicCurve::getNextValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, Float64 a3, void **a4)
{
  CMTime v6 = (OZDynamicCurve *)((char *)this + 8);
  OZFigTimeForChannelSeconds(&v8, a3, 0x40000);
  OZSpline::getNextValidVertex(v6, &v8, a4, a2, 0);
  return *a4 != 0;
}

uint64_t OZDynamicCurve::deriveKeypoint(OZDynamicCurve *this, char *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t result = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (result)
  {
    OZSpline::deriveVertex(v3, a2, MEMORY[0x1E4F1FA48]);
    return 1;
  }
  return result;
}

uint64_t OZDynamicCurve::isValidHandle(OZDynamicCurve *this, char *a2)
{
  return OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
}

uint64_t OZDynamicCurve::flattenCurve(OZDynamicCurve *this)
{
  return 1;
}

uint64_t OZDynamicCurve::isCurveFlattened(OZDynamicCurve *this)
{
  return OZDynamicSpline::isSplineFlattened((OZDynamicCurve *)((char *)this + 8));
}

uint64_t OZDynamicCurve::isKeypointFlattened(OZDynamicCurve *this, char *a2, BOOL *a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    *a3 = OZDynamicSpline::isVertexFlattened(v5, a2);
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::getLastValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, void **a3)
{
  return OZSpline::getLastValidVertex((OZDynamicCurve *)((char *)this + 8), a3, a2);
}

BOOL OZDynamicCurve::getFirstValidKeypointHandle(OZDynamicCurve *this, const CMTime *a2, void **a3)
{
  return OZSpline::getFirstValidVertex((OZDynamicCurve *)((char *)this + 8), a3, a2);
}

uint64_t OZDynamicCurve::setDefaultAtCurrentTime(OZDynamicCurve *this, const CMTime *a2)
{
  return 1;
}

uint64_t OZDynamicCurve::setDefaultAtCurrentTime(OZDynamicCurve *this, char *a2, const CMTime *a3)
{
  CMTime v5 = (os_unfair_lock_s *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    OZDynamicSpline::setDefaultValueAtCurrentTime(v5, a2, a3);
  }
  return isValidHandle;
}

uint64_t OZDynamicCurve::updateKeypointBias(OZDynamicCurve *this, void *a2)
{
  return 1;
}

uint64_t OZDynamicCurve::getVertexToInsert(OZDynamicCurve *this, const CMTime *a2, Float64 a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  __n128 v14 = (OZDynamicCurve *)((char *)this + 8);
  OZFigTimeForChannelSeconds(&v16, a3, 0x40000);
  OZDynamicSpline::getVertexToInsert(v14, a2, &v16, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t OZDynamicCurve::setKeypointID(OZDynamicCurve *this, char *a2, unsigned int a3)
{
  CMTime v5 = (OZDynamicCurve *)((char *)this + 8);
  uint64_t isValidHandle = OZSpline::isValidHandle((OZDynamicCurve *)((char *)this + 8), a2);
  if (isValidHandle) {
    OZDynamicSpline::setVertexID(v5, a2, a3);
  }
  return isValidHandle;
}

void OZSplineState::OZSplineState(OZSplineState *this)
{
  *(_WORD *)this = 256;
  *((unsigned char *)this + 2) = 1;
  *((void *)this + 4) = 1;
  *((_DWORD *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0;
  *((unsigned char *)this + 44) = 1;
  *((unsigned char *)this + 4) = 0;
  CMTimeMake(&v2, 1, 30);
  *(CMTime *)((char *)this + OZSpline::reparametrize((uint64_t)this + 8) = v2;
  *((unsigned char *)this + 3) = 1;
}

void OZSplineState::OZSplineState(OZSplineState *this, const OZSplineState *a2, uint8x8_t a3)
{
  a3.i32[0] = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 4) = *((void *)a2 + 4);
  *((_DWORD *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *((_DWORD *)a2 + 10);
  *((unsigned char *)this + 4) = *((unsigned char *)a2 + 4);
  *((unsigned char *)this + 44) = 0;
  if (vmovl_u8(a3).i8[2]) {
    int32_t v4 = 30;
  }
  else {
    int32_t v4 = 3000000;
  }
  CMTimeMake(&v5, 1, v4);
  *(CMTime *)((char *)this + OZSpline::reparametrize((uint64_t)this + 8) = v5;
}

double OZSplineState::operator=(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  a3.i32[0] = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  if (vmovl_u8(a3).i8[2]) {
    int32_t v4 = 30;
  }
  else {
    int32_t v4 = 3000000;
  }
  CMTimeMake(&v6, 1, v4);
  double result = *(double *)&v6.value;
  *(CMTime *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v6;
  return result;
}

BOOL OZSplineState::operator==(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, const CMTime *a4)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && *((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8)
      && *((_DWORD *)a1 + 9) == *((_DWORD *)a2 + 9)
      && *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10)
      && a1[4] == a2[4]
      && PCMath::equal((PCMath *)(a1 + 8), (const CMTime *)(a2 + 8), MEMORY[0x1E4F1FA48], a4);
}

void OZChannelHelpButton::OZChannelHelpButton(OZChannelHelpButton *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelHelpButton_Factory::getInstance(this);
  OZChannelButton::OZChannelButton((OZChannelButton *)this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1104318;
  *((void *)this + 2) = &unk_1F1104678;
}

void OZChannelHelpButton::OZChannelHelpButton(OZChannelHelpButton *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelButton::OZChannelButton((OZChannelButton *)this, a2, a3, a4);
  void *v4 = &unk_1F1104318;
  v4[2] = &unk_1F1104678;
}

void OZChannelHelpButton::OZChannelHelpButton(OZChannelHelpButton *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelButton::OZChannelButton((OZChannelButton *)this, a2, a3);
  void *v3 = &unk_1F1104318;
  v3[2] = &unk_1F1104678;
}

void OZChannelHelpButton::clone(OZChannelHelpButton *this)
{
}

void sub_1B79961B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C400C70C378);
  _Unwind_Resume(a1);
}

__CFString *OZChannelHelpButton::getObjCWrapperName(OZChannelHelpButton *this)
{
  return @"CHChannelHelpButton";
}

void OZChannelHelpButton::~OZChannelHelpButton(OZChannelButton *this)
{
  OZChannelButton::~OZChannelButton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelHelpButton::~OZChannelHelpButton(OZChannelHelpButton *this)
{
}

{
  uint64_t vars8;

  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZAccelerateInterpolator::easeTime(CMTime *a1@<X2>, unsigned char **a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v8 = (2.0 - (*((double (**)(unsigned char **, void))*a2 + 5))(a2, MEMORY[0x1E4F1FA48])) * 0.5;
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = *a1;
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  memset(&v15, 0, sizeof(v15));
  CMTime v18 = *(CMTime *)(a3 + 16);
  CMTime v17 = *(CMTime *)(a2 + 2);
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v15);
  CMTime v14 = v15;
  Float64 v10 = CMTimeGetSeconds(&v14);
  Float64 v13 = 0.0;
  PCMath::easeInOut(&v13, Seconds / v10, v8, 0.0, 0.0, 1.0, 0, v11);
  operator*(&v15, &v12, v13);
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = v12;
  PC_CMTimeSaferAdd(&v18, &v17, a4);
}

void OZAccelerateInterpolator::~OZAccelerateInterpolator(OZAccelerateInterpolator *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B7996584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelDecibel::OZChannelDecibel(OZChannelDecibel *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelDecibel_FactoryBase = (OZFactory *)getOZChannelDecibel_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDecibel_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1102F40;
  this->var2 = (void **)&unk_1F11032A0;
  OZChannelDecibelInfo = (OZChannelDecibel *)OZChannelDecibel::createOZChannelDecibelInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelDecibel::_OZChannelDecibelInfo;
    this->var17 = (OZChannelInfo *)OZChannelDecibel::_OZChannelDecibelInfo;
  }
  this->var16 = var17;
  OZChannelDecibel::createOZChannelDecibelImpl(OZChannelDecibelInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelDecibel::_OZChannelDecibelImpl;
    this->var15 = (OZChannelImpl *)OZChannelDecibel::_OZChannelDecibelImpl;
  }
  this->var14 = var15;
}

void sub_1B7996710(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelImpl::OZChannelImpl(OZChannelImpl *this, OZCurve *a2, double a3, int a4, char a5)
{
  *(void *)this = &unk_1F1104780;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  atomic_store(0, (unint64_t *)this + 3);
  *((unsigned char *)this + 32) = a5;
  BOOL v7 = a4 == 1;
  OZCurve::setIsSpline(a2, v7, MEMORY[0x1E4F1FA48]);
  (*(void (**)(void, BOOL))(**((void **)this + 1) + 80))(*((void *)this + 1), v7);
  (*(void (**)(void, double))(**((void **)this + 1) + 200))(*((void *)this + 1), a3);
  (*(void (**)(void, double))(**((void **)this + 1) + 216))(*((void *)this + 1), a3);
}

void OZChannelImpl::operator=(OZChannelImpl *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!(v4 | v5)) {
    goto LABEL_13;
  }
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    MEMORY[0x1BA9BFBA0]();
LABEL_13:
    *((void *)this + 2) = 0;
    goto LABEL_14;
  }
  if (v4) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7) {
    operator new();
  }
  long long v8 = *(_OWORD *)v5;
  *(void *)(v4 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = v8;
  long long v9 = *(_OWORD *)(v5 + 24);
  *(void *)(v4 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *(void *)(v5 + 40);
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)(v4 + 4OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(v5 + 48);
LABEL_14:
  OZChannelImpl::copyCurveInterface(this, *(OZCurve **)(a2 + 8));
  *((unsigned char *)this + 32) = 0;
}

void OZChannelImpl::OZChannelImpl(OZChannelImpl *this, const OZChannelImpl *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F1104780;
  atomic_store(0, (unint64_t *)this + 3);
  *((unsigned char *)this + 32) = 0;
  OZChannelImpl::operator=(this, (uint64_t)a2);
}

void OZChannelImpl::~OZChannelImpl(OZChannelImpl *this)
{
  *(void *)this = &unk_1F1104780;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 1) = 0;
  }
  if (atomic_load((unint64_t *)this + 3))
  {
    unint64_t v4 = atomic_load((unint64_t *)this + 3);
    if (v4)
    {
      uint64_t v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + OZSpline::reparametrize((uint64_t)this + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x1BA9BFBA0](v4, 0x20C40960023A9);
    }
    atomic_store(0, (unint64_t *)this + 3);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    MEMORY[0x1BA9BFBA0](v6, 0x1000C4021716A34);
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  OZChannelImpl::~OZChannelImpl(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelImpl::copyCurveInterface(OZChannelImpl *this, OZCurve *a2)
{
  uint64_t v3 = (OZCurve *)*((void *)this + 1);
  if (v3 == a2) {
    return;
  }
  if (!v3)
  {
LABEL_11:
    *((void *)this + 1) = (*(uint64_t (**)(OZCurve *))(*(void *)a2 + 1224))(a2);
    return;
  }
  if (!(*(unsigned int (**)(OZCurve *))(*(void *)v3 + 1232))(v3)
    || !(*(unsigned int (**)(OZCurve *))(*(void *)a2 + 1232))(a2))
  {
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *((void *)this + 1) = 0;
    goto LABEL_11;
  }
  uint64_t v6 = *((void *)this + 1);

  OZCurve::operator=(v6, (uint64_t)a2, v5);
}

uint64_t OZChannelImpl::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(long long **)(a1 + 16);
  uint64_t v3 = *(long long **)(a2 + 16);
  if ((v2 != 0) == (v3 == 0)) {
    return 0;
  }
  if (!v2 || v3 == 0) {
    return OZCurve::operator==(*(void *)(a1 + 8), *(void *)(a2 + 8));
  }
  long long v8 = *v2;
  time1.CMTimeEpoch epoch = *((void *)v2 + 2);
  *(_OWORD *)&time1.CMTimeValue value = v8;
  long long v9 = *v3;
  v13.CMTimeEpoch epoch = *((void *)v3 + 2);
  *(_OWORD *)&v13.CMTimeValue value = v9;
  if (!CMTimeCompare(&time1, &v13)
    && (uint64_t v10 = *(void *)(a2 + 16),
        CMTime time1 = *(CMTime *)(*(void *)(a1 + 16) + 24),
        CMTime v13 = *(CMTime *)(v10 + 24),
        !CMTimeCompare(&time1, &v13))
    && (v11 = *(void *)(a1 + 16), uint64_t v12 = *(void *)(a2 + 16), *(_DWORD *)(v11 + 48) == *(_DWORD *)(v12 + 48))
    && *(_DWORD *)(v11 + 52) == *(_DWORD *)(v12 + 52))
  {
    return OZCurve::operator==(*(void *)(a1 + 8), *(void *)(a2 + 8));
  }
  else
  {
    return 0;
  }
}

BOOL OZChannelImpl::shouldKeepLocalCopy(OZChannelImpl *this)
{
  BOOL result = 0;
  if (!*((unsigned char *)this + 32))
  {
    int v3 = 0;
    (*(void (**)(void, int *))(**((void **)this + 1) + 1152))(*((void *)this + 1), &v3);
    if (v3 || *(void *)(*((void *)this + 1) + 152)) {
      return 1;
    }
  }
  return result;
}

uint64_t OZChannelImpl::beginPlayback(OZChannelImpl *this, const CMTime *a2, uint64_t a3, uint64_t a4, const CMTime *a5)
{
  return (*(uint64_t (**)(void, const CMTime *, uint64_t, uint64_t, const CMTime *))(**((void **)this + 1)
                                                                                             + 1160))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t OZChannelImpl::endPlayback(OZChannelImpl *this, const CMTime *a2)
{
  return (*(uint64_t (**)(void, const CMTime *))(**((void **)this + 1) + 1168))(*((void *)this + 1), a2);
}

uint64_t OZChannelImpl::beginRecording(OZChannelImpl *this, const CMTime *a2)
{
  if (!atomic_load((unint64_t *)this + 3)) {
    operator new();
  }
  int v3 = (void *)atomic_load((unint64_t *)this + 3);
  v3[1] = *v3;
  unint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 1) + 1176);

  return v4();
}

uint64_t OZChannelImpl::endRecording(OZChannelImpl *this, const CMTime *a2)
{
  return (*(uint64_t (**)(void, const CMTime *))(**((void **)this + 1) + 1184))(*((void *)this + 1), a2);
}

uint64_t OZChannelImpl::updateCurrentRecordingTime(OZChannelImpl *this, const CMTime *a2)
{
  return (*(uint64_t (**)(void, const CMTime *))(**((void **)this + 1) + 1192))(*((void *)this + 1), a2);
}

OZChannelImpl *OZChannelImpl::didRecordValue(OZChannelImpl *this, OZChannelBase *a2, const CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = (void *)atomic_load((unint64_t *)this + 3);
  if (v8[1] != *v8)
  {
    uint64_t v11 = this;
    uint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      CMTime v14 = (void *)atomic_load((unint64_t *)v11 + 3);
      uint64_t v15 = *v14 + 24 * v12;
      long long v18 = *(_OWORD *)&a3->value;
      CMTimeEpoch epoch = a3->epoch;
      if (*(unsigned char *)(v15 + 16)) {
        OZChannelBase::ensureObjCWrapperExists(a2, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      this = (OZChannelImpl *)(*(uint64_t (**)(OZChannelBase *, long long *, void))v15)(a2, &v18, *(void *)(v15 + 8));
      uint64_t v12 = v13;
      CMTime v16 = (void *)atomic_load((unint64_t *)v11 + 3);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[1] - *v16) >> 3) > v13++);
  }
  return this;
}

uint64_t OZChannelImpl::isPlaying(OZChannelImpl *this, unsigned int *a2, unsigned int *a3, CMTime *a4)
{
  return (*(uint64_t (**)(void, unsigned int *, unsigned int *, CMTime *))(**((void **)this + 1) + 1200))(*((void *)this + 1), a2, a3, a4);
}

uint64_t OZChannelImpl::isRecording(OZChannelImpl *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 1208))();
}

void OZChannelImpl::registerRecordingCallback(OZChannelImpl *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3, char a4)
{
  if (!atomic_load((unint64_t *)this + 3)) {
    operator new();
  }
  long long v8 = (void **)atomic_load((unint64_t *)this + 3);
  long long v9 = (char *)v8[1];
  uint64_t v10 = (char *)v8[2];
  if (v9 >= v10)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)*v8) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v8) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      CMTime v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(v8 + 2), v15);
    }
    else {
      CMTime v16 = 0;
    }
    CMTime v17 = &v16[24 * v12];
    long long v18 = &v16[24 * v15];
    *(void *)CMTime v17 = a2;
    *((void *)v17 + 1) = a3;
    v17[16] = a4;
    uint64_t v11 = v17 + 24;
    uint64_t v20 = (char *)*v8;
    double v19 = (char *)v8[1];
    if (v19 != *v8)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 24);
        *(v17 - OZSpline::reparametrize((uint64_t)this + 8) = *(v19 - 8);
        *(_OWORD *)(v17 - 24) = v21;
        v17 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      double v19 = (char *)*v8;
    }
    void *v8 = v17;
    v8[1] = v11;
    v8[2] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(void *)long long v9 = a2;
    *((void *)v9 + 1) = a3;
    uint64_t v11 = v9 + 24;
    v9[16] = a4;
  }
  v8[1] = v11;
}

OZChannelImpl *OZChannelImpl::unregisterRecordingCallback(OZChannelImpl *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3)
{
  int v3 = (unint64_t *)((char *)this + 24);
  if (!atomic_load((unint64_t *)this + 3)) {
    operator new();
  }
  uint8x8_t v5 = (uint64_t *)atomic_load(v3);
  uint64_t v6 = *v5;
  unint64_t v7 = atomic_load(v3);
  if (v6 != *(void *)(v7 + 8))
  {
    uint64_t v8 = -v6;
    while (*(void (**)(OZChannelBase *, const CMTime *, void *))v6 != a2 || *(void **)(v6 + 8) != a3)
    {
      v6 += 24;
      unint64_t v9 = atomic_load((unint64_t *)this + 3);
      v8 -= 24;
      if (v6 == *(void *)(v9 + 8)) {
        return this;
      }
    }
    uint64_t v10 = (unint64_t *)((char *)this + 24);
    unint64_t v11 = atomic_load((unint64_t *)this + 3);
    uint64_t v12 = -v8;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = v13 - (24 - v8);
    if (v13 != 24 - v8) {
      this = (OZChannelImpl *)memmove((void *)-v8, (const void *)(24 - v8), v14 - 7);
    }
    *(void *)(v11 + OZSpline::reparametrize((uint64_t)this + 8) = v12 + v14;
    atomic_load(v10);
  }
  return this;
}

uint64_t OZChannelImpl::setMin(OZChannelImpl *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 1) + 280))(a2);
}

uint64_t OZChannelImpl::setMax(OZChannelImpl *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 1) + 272))(a2);
}

uint64_t OZChannelImpl::setDiscrete(OZChannelImpl *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 168))();
}

uint64_t OZChannelImpl::setParametric(OZChannelImpl *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 104))();
}

uint64_t OZChannelImpl::setInterpolation(OZChannelImpl *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 296))();
}

uint64_t OZChannelImpl::setShouldCreateTangents(OZChannelImpl *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 136))();
}

void sub_1B79974F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C4011F1C4E7);
  _Unwind_Resume(a1);
}

void OZBezierInterpolator::OZBezierInterpolator(OZBezierInterpolator *this)
{
  OZSplineInterpolator::OZSplineInterpolator(this);
  void *v1 = &unk_1F11047B0;
  v1[1] = 0x3FF0000000000000;
}

void OZBezierInterpolator::~OZBezierInterpolator(OZBezierInterpolator *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZBezierInterpolator::computeTangents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, a6, a7, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 56))(a4, a8, a9, a5);
  if (!**(unsigned char **)(a2 + 168))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a6, a7);
    CMTime v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
    return v17(a1, a2, a8, a9);
  }
  return result;
}

double OZBezierInterpolator::getControlPoints(OZBezierInterpolator *this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, CMTime *a6, CMTime *a7, double *a8, double *a9)
{
  long long v17 = *((_OWORD *)a3 + 1);
  a6->CMTimeEpoch epoch = *((void *)a3 + 4);
  *(_OWORD *)&a6->CMTimeValue value = v17;
  long long v18 = *((_OWORD *)a4 + 1);
  a7->CMTimeEpoch epoch = *((void *)a4 + 4);
  *(_OWORD *)&a7->CMTimeValue value = v18;
  CMTime time1 = *a6;
  CMTime time2 = *a7;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v29);
    CMTime time1 = *a6;
    CMTime time2 = v29;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v30);
    *(_OWORD *)&a7->CMTimeValue value = v30;
    a7->CMTimeEpoch epoch = v31;
  }
  *a9 = (*(double (**)(void *, const CMTime *))(*(void *)a3 + 24))(a3, a5);
  a9[3] = (*(double (**)(void *, const CMTime *))(*(void *)a4 + 24))(a4, a5);
  *a8 = 0.0;
  a8[3] = 1.0;
  (*(void (**)(OZBezierInterpolator *, OZSpline *, void *, void *, const CMTime *, double *, double *, double *, double *))(*(void *)this + 128))(this, a2, a3, a4, a5, a8 + 1, a9 + 1, a8 + 2, a9 + 2);
  CMTime time1 = *a7;
  CMTime time2 = *a6;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  v22.i64[0] = 0x3EE4F8B580000000;
  if (Seconds >= 0.00000999999975) {
    *(double *)v22.i64 = Seconds;
  }
  double v23 = a8[2];
  double v24 = *((double *)this + 1) * a8[1];
  a8[1] = v24;
  *(double *)v21.i64 = *((double *)this + 1) * v23;
  a8[1] = v24 / *(double *)v22.i64;
  a8[2] = (Seconds + *(double *)v21.i64) / *(double *)v22.i64;
  a9[1] = *a9 + a9[1] * *((double *)this + 1);
  double v25 = *((double *)this + 1);
  *(double *)v22.i64 = a9[2] * v25;
  double result = a9[3] + *(double *)v22.i64;
  a9[2] = result;
  double v27 = (unsigned char *)*((void *)a2 + 21);
  if (!*v27)
  {
    if (v27[3]) {
      return OZBezierSanitizeControlPolygon(a8, a9, v19, result, v22, v25, v21);
    }
  }
  return result;
}

void OZBezierInterpolator::interpolate(OZBezierInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, const CMTime *a6, char a7, char a8)
{
  v35[4] = *(double *)MEMORY[0x1E4F143B8];
  CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v29 = v30;
  OZBezierInterpolator::getControlPoints(this, a2, a4, a5, a3, &v30, &v29, v35, v34);
  CMTime v31 = *a6;
  CMTime time1 = v29;
  CMTime time2 = v30;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  if (Seconds >= 0.00000999999975) {
    double v14 = Seconds;
  }
  else {
    double v14 = 0.00000999999975;
  }
  CMTime time1 = v31;
  CMTime time2 = v30;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
  v18.n128_f64[0] = CMTimeGetSeconds(&v27);
  if (a8)
  {
    memset(&v26, 0, sizeof(v26));
    CMTimeMake(&v25, 1, 1000);
    CMTime time1 = *a6;
    CMTime time2 = v25;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
    memset(&v25, 0, sizeof(v25));
    CMTimeMake(&v24, 1, 1000);
    CMTime time1 = *a6;
    CMTime time2 = v24;
    double v22 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v25);
    double v23 = (const CMTime *)MEMORY[0x1E4F1FA48];
    (*(void (**)(OZSpline *, CMTime *, void, void, double))(*(void *)a2 + 240))(a2, &v26, MEMORY[0x1E4F1FA48], 0, v22);
    (*(void (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)a2 + 240))(a2, &v25, v23, 0);
    OZSpline::getMinValueU(a2, v23, 0, (uint64_t)&v24);
    CMTime time1 = v26;
    CMTime time2 = v24;
    if (CMTimeCompare(&time1, &time2) < 0
      || (OZSpline::getMaxValueU(a2, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v24),
          CMTime time1 = v25,
          CMTime time2 = v24,
          CMTimeCompare(&time1, &time2) >= 1))
    {
      (*(double (**)(OZSpline *, const CMTime *, void, void))(*(void *)a2 + 240))(a2, a6, MEMORY[0x1E4F1FA48], 0);
    }
  }
  else
  {
    v18.n128_f64[0] = v18.n128_f64[0] / v14;
    if ((a7 & 1) == 0) {
      v18.n128_f64[0] = OZBezierFindParameter(v35, v18.n128_f64[0], v19, v20, v21, v15, v16, v17);
    }
    (*(void (**)(OZBezierInterpolator *, double *, __n128))(*(void *)this + 112))(this, v34, v18);
  }
}

double OZBezierInterpolator::eval(OZBezierInterpolator *this, const double *a2, double a3)
{
  return OZBezierEval(a2, a3);
}

uint64_t OZBezierInterpolator::eval(OZBezierInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, unsigned char **a5, double a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CMTime time1 = *(CMTime *)(a4 + 16);
  CMTime v16 = *(CMTime *)(a5 + 2);
  int32_t v12 = CMTimeCompare(&time1, &v16);
  uint64_t v13 = *(void *)a4;
  if (v12 < 1)
  {
    (*(void (**)(char *, void, CMTimeScale *, const CMTime *))(v13 + 64))(a4, 0, &time1.timescale, a3);
    (*((void (**)(unsigned char **, void, CMTimeEpoch *, const CMTime *))*a5 + 7))(a5, 0, &time1.epoch, a3);
  }
  else
  {
    (*(void (**)(char *, void, CMTimeScale *, const CMTime *))(v13 + 56))(a4, 0, &time1.timescale, a3);
    (*((void (**)(unsigned char **, void, CMTimeEpoch *, const CMTime *))*a5 + 8))(a5, 0, &time1.epoch, a3);
  }
  if (!**((unsigned char **)a2 + 21))
  {
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeScale *))(*(void *)this + 48))(this, a2, 0, &time1.timescale);
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeEpoch *))(*(void *)this + 48))(this, a2, 0, &time1.epoch);
  }
  time1.CMTimeValue value = (*(double (**)(char *, const CMTime *))(*(void *)a4 + 24))(a4, a3);
  double v18 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  *(void *)&v14.f64[0] = time1.value;
  v14.f64[1] = v18;
  *(float64x2_t *)&time1.timescale = vaddq_f64(v14, vmulq_n_f64(*(float64x2_t *)&time1.timescale, *((double *)this + 1)));
  return (*(uint64_t (**)(OZBezierInterpolator *, CMTime *, double))(*(void *)this + 112))(this, &time1, a6);
}

uint64_t OZBezierInterpolator::subDivide(OZBezierInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, char *a5, unsigned char **a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CMTime v27 = *(CMTime *)(a4 + 16);
  CMTime v26 = *(CMTime *)(a5 + 16);
  CMTime time1 = *(CMTime *)(a4 + 16);
  CMTime time2 = *(CMTime *)(a5 + 16);
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v30);
    CMTime time1 = v27;
    CMTime time2 = v30;
    v12.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v26);
  }
  time2.CMTimeValue value = (*(double (**)(char *, const CMTime *, __n128))(*(void *)a4 + 24))(a4, a3, v12);
  double v33 = (*(double (**)(char *, const CMTime *))(*(void *)a5 + 24))(a5, a3);
  time1.CMTimeValue value = 0;
  uint64_t v35 = 0x3FF0000000000000;
  (*(void (**)(char *, CMTimeScale *, CMTimeScale *, const CMTime *))(*(void *)a4 + 64))(a4, &time1.timescale, &time2.timescale, a3);
  (*(void (**)(char *, CMTimeEpoch *, CMTimeEpoch *, const CMTime *))(*(void *)a5 + 56))(a5, &time1.epoch, &time2.epoch, a3);
  if (!**((unsigned char **)a2 + 21))
  {
    (*(void (**)(OZBezierInterpolator *, OZSpline *, CMTimeScale *, CMTimeScale *))(*(void *)this + 48))(this, a2, &time1.timescale, &time2.timescale);
    (*(void (**)(OZBezierInterpolator *, OZSpline *, CMTimeEpoch *, CMTimeEpoch *))(*(void *)this + 48))(this, a2, &time1.epoch, &time2.epoch);
  }
  CMTime v30 = v26;
  CMTime v28 = v27;
  PC_CMTimeSaferSubtract(&v30, &v28, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  *(double *)&time1.timescale = *(double *)&time1.timescale / Seconds;
  *(double *)&time1.CMTimeEpoch epoch = (Seconds + *(double *)&time1.epoch) / Seconds;
  *(void *)&v14.f64[0] = time2.value;
  v14.f64[1] = v33;
  *(float64x2_t *)&time2.timescale = vaddq_f64(v14, vmulq_n_f64(*(float64x2_t *)&time2.timescale, *((double *)this + 1)));
  CMTime v30 = *(CMTime *)(a6 + 2);
  CMTime v28 = v27;
  PC_CMTimeSaferSubtract(&v30, &v28, (uint64_t)&v24);
  v20.n128_f64[0] = CMTimeGetSeconds(&v24) / Seconds;
  double v15 = *(double *)&time2.value + v20.n128_f64[0] * (*(double *)&time2.timescale - *(double *)&time2.value);
  double v16 = *(double *)&time2.timescale + v20.n128_f64[0] * (*(double *)&time2.epoch - *(double *)&time2.timescale);
  double v17 = (1.0 - v20.n128_f64[0]) * v15 + v20.n128_f64[0] * v16;
  double v18 = *(double *)&time2.epoch + v20.n128_f64[0] * (v33 - *(double *)&time2.epoch);
  double v19 = (1.0 - v20.n128_f64[0]) * v16 + v20.n128_f64[0] * v18;
  v20.n128_f64[0] = (1.0 - v20.n128_f64[0]) * v17 + v20.n128_f64[0] * v19;
  v30.CMTimeValue value = time2.value;
  *(double *)&v30.timescale = v15 - *(double *)&time2.value;
  *(double *)&v30.CMTimeEpoch epoch = v17 - v20.n128_f64[0];
  unint64_t v31 = v20.n128_u64[0];
  v28.CMTimeValue value = v20.n128_u64[0];
  *(double *)&v28.timescale = v19 - v20.n128_f64[0];
  *(double *)&v28.CMTimeEpoch epoch = v18 - v33;
  double v29 = v33;
  if (!**((unsigned char **)a2 + 21))
  {
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeEpoch *))(*(void *)this + 40))(this, a2, 0, &v30.epoch);
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeScale *))(*(void *)this + 40))(this, a2, 0, &v30.timescale);
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeEpoch *))(*(void *)this + 40))(this, a2, 0, &v28.epoch);
    (*(void (**)(OZBezierInterpolator *, OZSpline *, void, CMTimeScale *))(*(void *)this + 40))(this, a2, 0, &v28.timescale);
    v20.n128_u64[0] = v31;
  }
  (*((void (**)(unsigned char **, const CMTime *, __n128))*a6 + 4))(a6, a3, v20);
  (*((void (**)(unsigned char **, const CMTime *, double, double))*a6 + 9))(a6, a3, 1.0, *(double *)&v30.epoch);
  (*((void (**)(unsigned char **, const CMTime *, double, double))*a6 + 10))(a6, a3, 1.0, *(double *)&v28.timescale);
  uint64_t v21 = (*(uint64_t (**)(char *))(*(void *)a4 + 168))(a4);
  (*(void (**)(char *, uint64_t))(*(void *)a4 + 160))(a4, 2);
  (*(void (**)(char *, const CMTime *, double, double))(*(void *)a4 + 80))(a4, a3, 1.0, *(double *)&v30.timescale);
  (*(void (**)(char *, uint64_t))(*(void *)a4 + 176))(a4, v21);
  uint64_t v22 = (*(uint64_t (**)(char *))(*(void *)a5 + 168))(a5);
  (*(void (**)(char *, uint64_t))(*(void *)a5 + 160))(a5, 2);
  (*(void (**)(char *, const CMTime *, double, double))(*(void *)a5 + 72))(a5, a3, 1.0, *(double *)&v28.epoch);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)a5 + 176))(a5, v22);
}

void OZBezierInterpolator::getMinMaxValues(OZBezierInterpolator *this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, const CMTime *a6, double *a7, double *a8)
{
  v52[4] = *(double *)MEMORY[0x1E4F143B8];
  OZBezierInterpolator::getControlPoints(this, a2, a3, a4, MEMORY[0x1E4F1FA48], &v45, &v44, v52, &v48);
  CMTime time1 = v45;
  CMTime time2 = *a5;
  double Parameter = 0.0;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    CMTime time1 = *a5;
    CMTime time2 = v45;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    CMTime time1 = v44;
    CMTime time2 = v45;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
    Float64 v15 = CMTimeGetSeconds(&v42);
    double Parameter = OZBezierFindParameter(v52, Seconds / v15, v19, v20, v21, v16, v17, v18);
  }
  CMTime time1 = v44;
  CMTime time2 = *a6;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
    double v30 = 1.0;
  }
  else
  {
    CMTime time1 = *a6;
    CMTime time2 = v45;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v41);
    double v22 = CMTimeGetSeconds(&v41);
    CMTime time1 = v44;
    CMTime time2 = v45;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
    Float64 v23 = CMTimeGetSeconds(&v40);
    double v30 = OZBezierFindParameter(v52, v22 / v23, v27, v28, v29, v24, v25, v26);
  }
  *a7 = (*(double (**)(OZBezierInterpolator *, double *, double))(*(void *)this + 112))(this, &v48, Parameter);
  double v32 = (*(double (**)(OZBezierInterpolator *, double *, double))(*(void *)this + 112))(this, &v48, v30);
  *a8 = v32;
  v34.i64[0] = *(uint64_t *)a7;
  if (*a7 > v32)
  {
    *a7 = v32;
    *a8 = *(double *)v34.i64;
  }
  *(double *)v34.i64 = v48 * 6.0 + v49 * -12.0 + v50 * 6.0;
  time1.CMTimeValue value = 0;
  time2.CMTimeValue value = 0;
  v33.i64[0] = 0;
  int v35 = PCMath::quadratic((PCMath *)&time1, v48 * -3.0 + v49 * 9.0 - v50 * 9.0 + v51 * 3.0, v34, v48 * -3.0 + v49 * 3.0, (double *)&time2.value, v31, v33);
  if (v35 == 2)
  {
    if (*(double *)&time1.value >= Parameter && *(double *)&time1.value <= v30)
    {
      double v37 = (*(double (**)(OZBezierInterpolator *, double *))(*(void *)this + 112))(this, &v48);
      uint64_t v38 = a7;
      if (v37 < *a7 || (uint64_t v38 = a8, v37 > *a8)) {
        *uint64_t v38 = v37;
      }
    }
    double v36 = *(double *)&time2.value;
  }
  else
  {
    if (v35 != 1) {
      return;
    }
    double v36 = *(double *)&time1.value;
  }
  if (v36 >= Parameter && v36 <= v30)
  {
    double v39 = (*(double (**)(OZBezierInterpolator *, double *))(*(void *)this + 112))(this, &v48);
    if (v39 >= *a7)
    {
      if (v39 > *a8) {
        *a8 = v39;
      }
    }
    else
    {
      *a7 = v39;
    }
  }
}

BOOL OZBezierInterpolator::uForCurveValue(OZBezierInterpolator *a1, OZSpline *a2, void *a3, void *a4, CMTime *a5, CMTime *a6, void **a7, double a8)
{
  v48[4] = *(double *)MEMORY[0x1E4F143B8];
  CMTime v43 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v42 = v43;
  OZBezierInterpolator::getControlPoints(a1, a2, a3, a4, MEMORY[0x1E4F1FA48], &v43, &v42, v48, v47);
  int Roots = OZBezierGetRoots(v47, a8, v46, v13, v14, v15, v16, v17);
  if (!Roots) {
    return 0;
  }
  CMTime time1 = v42;
  CMTime time2 = v43;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  for (uint64_t i = 0; i != Roots; ++i)
  {
    double v21 = v46[i];
    if ((v21 > 0.0 || fabs(v21) < 0.0000001) && (v21 < 1.0 || fabs(v21 + -1.0) < 0.0000001))
    {
      memset(&v40, 0, sizeof(v40));
      double v22 = (*(double (**)(OZBezierInterpolator *, double *))(*(void *)a1 + 112))(a1, v48);
      OZFigTimeForChannelSeconds(&v39, Seconds * v22, 0x40000);
      CMTime time1 = v43;
      CMTime time2 = v39;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
      CMTime time1 = v40;
      CMTime time2 = *a5;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        CMTime time1 = v40;
        CMTime time2 = *a6;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          uint64_t v24 = (char *)a7[1];
          Float64 v23 = (char *)a7[2];
          if (v24 >= v23)
          {
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*a7) >> 3);
            unint64_t v28 = v27 + 1;
            if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)*a7) >> 3);
            if (2 * v29 > v28) {
              unint64_t v28 = 2 * v29;
            }
            if (v29 >= 0x555555555555555) {
              unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30) {
              unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a7 + 2), v30);
            }
            else {
              unint64_t v31 = 0;
            }
            double v32 = &v31[24 * v27];
            long long v33 = *(_OWORD *)&v40.value;
            *((void *)v32 + 2) = v40.epoch;
            *(_OWORD *)double v32 = v33;
            int v35 = (char *)*a7;
            int8x16_t v34 = (char *)a7[1];
            double v36 = v32;
            if (v34 != *a7)
            {
              do
              {
                long long v37 = *(_OWORD *)(v34 - 24);
                *((void *)v36 - 1) = *((void *)v34 - 1);
                *(_OWORD *)(v36 - 24) = v37;
                v36 -= 24;
                v34 -= 24;
              }
              while (v34 != v35);
              int8x16_t v34 = (char *)*a7;
            }
            CMTime v26 = v32 + 24;
            *a7 = v36;
            a7[1] = v32 + 24;
            a7[2] = &v31[24 * v30];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v40.value;
            *((void *)v24 + 2) = v40.epoch;
            *(_OWORD *)uint64_t v24 = v25;
            CMTime v26 = v24 + 24;
          }
          a7[1] = v26;
        }
      }
    }
  }
  return *a7 != a7[1];
}

__n128 OZInterpolator::easeTime@<Q0>(__n128 *a1@<X2>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

double OZBezierEval(const double *a1, double a2)
{
  return *a1
       + (a1[1] * 3.0
        - *a1 * 3.0
        + (*a1 * 3.0 + a1[1] * -6.0 + a1[2] * 3.0 + (a1[3] + a1[1] * 3.0 - *a1 - a1[2] * 3.0) * a2) * a2)
       * a2;
}

double OZBezierSanitizeControlPolygon(double *a1, double *a2, double *a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  a7.i64[0] = (uint64_t)a1[1];
  double v7 = *a1 * -3.0;
  double v8 = a1[2];
  double result = v7 + *(double *)a7.i64 * 9.0 - v8 * 9.0 + a1[3] * 3.0;
  if (result > 0.0)
  {
    *(double *)a5.i64 = *a1 * 6.0 + *(double *)a7.i64 * -12.0 + v8 * 6.0;
    double v10 = -*(double *)a5.i64 / (result + result);
    if (v10 >= 0.0 && v10 <= 1.0)
    {
      double v14 = v7 + *(double *)a7.i64 * 3.0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      a7.i64[0] = 0;
      if (PCMath::quadratic((PCMath *)&v29, result, a5, v14, (double *)&v28, a3, a7) == 2)
      {
        double v15 = *a1;
        double v16 = a1[1] - *a1;
        double v17 = a1[3];
        double v18 = v17 - a1[2];
        double v19 = 0.5;
        if (vabdd_f64(v16, v18) >= 0.0000001)
        {
          double v20 = (v16 - sqrt(v16 * v18)) / (v16 - v18);
          double v21 = 1.0;
          if (v20 <= 1.0) {
            double v21 = v20;
          }
          BOOL v22 = v20 < 0.0;
          double v19 = 0.0;
          if (!v22) {
            double v19 = v21;
          }
        }
        double v23 = (1.0 - v19 * 3.0 + v19 * (v19 * 3.0)) / (v17 - v15);
        double v24 = v15 + v19 * v19 / v23;
        double v25 = v15 + (v19 * (v19 + v19) - v19) / v23;
        double v26 = (v24 - v15) / v16;
        if (v18 > v16) {
          double v26 = (v17 - v25) / v18;
        }
        a1[1] = v24;
        a1[2] = v25;
        double v27 = *a2 + v26 * (a2[1] - *a2);
        double result = a2[3] + v26 * (a2[2] - a2[3]);
        a2[1] = v27;
        a2[2] = result;
      }
    }
  }
  return result;
}

uint64_t OZBezierGetRoots(double *a1, double a2, double *a3, double *a4, double *a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  a7.i64[0] = *(uint64_t *)a1;
  double v8 = a1[1];
  *(double *)a6.i64 = v8 * 3.0;
  double v9 = a1[2] * 3.0;
  double v10 = a1[3] + v8 * 3.0 - *a1 - v9;
  double v11 = *a1 * 3.0;
  double v12 = v11 + v8 * -6.0 + v9;
  if (v10 <= -0.0000001 || v10 >= 0.0000001)
  {
    *(double *)a7.i64 = (*(double *)a7.i64 - a2) / v10;
    return PCMath::cubic((PCMath *)a3, v12 / v10, (*(double *)a6.i64 - v11) / v10, a7, a3 + 1, a3 + 2, a5);
  }
  else
  {
    *(double *)a6.i64 = *(double *)a6.i64 - v11;
    a8.i64[0] = 0;
    return PCMath::quadratic((PCMath *)a3, v12, a6, *(double *)a7.i64 - a2, a3 + 1, a4, a8);
  }
}

double OZBezierFindParameter(double *a1, double a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, uint64_t a6, double *a7, double *a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int Roots = OZBezierGetRoots(a1, a2, &v20, a7, a8, a3, a4, a5);
  if (Roots == 3)
  {
    double result = v20;
    double v11 = 0.0;
    double v12 = v20 + -1.0;
    if (v20 <= 1.0) {
      double v12 = 0.0;
    }
    if (v20 < 0.0) {
      double v12 = 0.0 - v20;
    }
    if (v21 >= 0.0)
    {
      if (v21 > 1.0) {
        double v11 = v21 + -1.0;
      }
    }
    else
    {
      double v11 = 0.0 - v21;
    }
    if (v12 >= v11)
    {
      double v16 = 0.0;
      if (v22 >= 0.0)
      {
        if (v22 > 1.0) {
          double v16 = v22 + -1.0;
        }
      }
      else
      {
        double v16 = 0.0 - v22;
      }
      BOOL v17 = v22 < 0.0;
      BOOL v18 = v21 < 0.0;
      BOOL v19 = v11 < v16;
      if (v11 >= v16) {
        double result = v22;
      }
      else {
        double result = v21;
      }
    }
    else
    {
      double v14 = 0.0;
      if (v22 >= 0.0)
      {
        if (v22 > 1.0) {
          double v14 = v22 + -1.0;
        }
      }
      else
      {
        double v14 = 0.0 - v22;
      }
      BOOL v17 = v22 < 0.0;
      BOOL v18 = v20 < 0.0;
      BOOL v19 = v12 < v14;
      if (v12 >= v14) {
        double result = v22;
      }
    }
  }
  else
  {
    if (Roots != 2)
    {
      double result = 0.0;
      if (Roots == 1)
      {
        double v10 = 1.0;
        if (v20 <= 1.0) {
          double v10 = v20;
        }
        double result = 0.0;
        if (v20 >= 0.0) {
          return v10;
        }
      }
      return result;
    }
    double result = v20;
    double v13 = 0.0;
    if (v20 >= 0.0)
    {
      if (v20 > 1.0) {
        double v13 = v20 + -1.0;
      }
    }
    else
    {
      double v13 = 0.0 - v20;
    }
    double v15 = 0.0;
    if (v21 >= 0.0)
    {
      if (v21 > 1.0) {
        double v15 = v21 + -1.0;
      }
    }
    else
    {
      double v15 = 0.0 - v21;
    }
    BOOL v17 = v21 < 0.0;
    BOOL v18 = v20 < 0.0;
    BOOL v19 = v13 < v15;
    if (v13 >= v15) {
      double result = v21;
    }
  }
  if (v19) {
    BOOL v17 = v18;
  }
  if (result > 1.0) {
    double result = 1.0;
  }
  if (v17) {
    return 0.0;
  }
  return result;
}

void OZBSplineInterpolator::OZBSplineInterpolator(OZBSplineInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  *(void *)uint64_t v1 = &unk_1F1104860;
  *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *(void *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 4;
  *(_DWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 116) = 0;
}

void OZBSplineInterpolator::OZBSplineInterpolator(OZBSplineInterpolator *this, const OZBSplineInterpolator *a2)
{
  OZInterpolator::OZInterpolator(this);
  *(void *)uint64_t v4 = &unk_1F1104860;
  *(void *)(v4 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  uint8x8_t v5 = (char *)(v4 + 8);
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0u;
  uint64_t v6 = (char *)(v4 + 40);
  *(_OWORD *)(v4 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  double v7 = (char *)(v4 + 88);
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = *((_DWORD *)a2 + 28);
  if ((const OZBSplineInterpolator *)v4 != a2)
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)this + 64, *((char **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v7, *((char **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v5, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v6, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  }
  *((_DWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 116) = *((unsigned char *)a2 + 116);
}

void sub_1B79994AC(_Unwind_Exception *a1)
{
  double v7 = (__CFString *)*v4;
  if (*v4)
  {
    v1->var12 = v7;
    operator delete(v7);
  }
  OZBSplineInterpolator::OZBSplineInterpolator(v5, v3, v2, v1);
  OZChannelBase::setRangeName(v1, v8);
  _Unwind_Resume(a1);
}

void OZBSplineInterpolator::~OZBSplineInterpolator(OZChannelBase *this, const PCString *a2)
{
  this->var0 = (void **)&unk_1F1104860;
  var11 = this->var11;
  if (var11)
  {
    this->var12 = var11;
    operator delete(var11);
  }
  var8 = (void *)this->var8;
  if (var8)
  {
    this->var9 = var8;
    operator delete(var8);
  }
  var5 = this->var5;
  if (var5)
  {
    this->var6 = (OZChannelFolder *)var5;
    operator delete(var5);
  }
  var1 = (void **)this->var1;
  if (var1)
  {
    this->var2 = var1;
    operator delete(var1);
  }

  OZChannelBase::setRangeName(this, a2);
}

{
  uint64_t vars8;

  OZBSplineInterpolator::~OZBSplineInterpolator(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZBSplineInterpolator::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
    return 0;
  }
  int v3 = *(double **)(a1 + 64);
  uint64_t v2 = *(double **)(a1 + 72);
  uint64_t v4 = *(double **)(a2 + 64);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 72) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(double **)(a1 + 88);
  uint8x8_t v5 = *(double **)(a1 + 96);
  double v7 = *(double **)(a2 + 88);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 96) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  double v9 = *(double **)(a1 + 40);
  double v8 = *(double **)(a1 + 48);
  double v10 = *(double **)(a2 + 40);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 48) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  double v13 = *(double **)(a2 + 8);
  if (v11 - v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  if (v12 == v11) {
    return 1;
  }
  uint64_t v14 = v12 + 8;
  do
  {
    double v15 = *v13++;
    BOOL result = *(double *)(v14 - 8) == v15;
    BOOL v17 = *(double *)(v14 - 8) != v15 || v14 == v11;
    v14 += 8;
  }
  while (!v17);
  return result;
}

double OZBSplineInterpolator::convertBSplineBiasToLinear(OZBSplineInterpolator *this, double a2)
{
  if (a2 >= 1.0)
  {
    double v2 = 25.0 - a2;
    double v3 = 24.0;
  }
  else
  {
    double v2 = 1.9 - a2;
    double v3 = 0.9;
  }
  return v2 / v3;
}

void OZBSplineInterpolator::generateOpenKnotVector(OZBSplineInterpolator *this, OZSpline *a2)
{
  double v3 = (void *)*((void *)this + 8);
  int v4 = *((_DWORD *)this + 8);
  uint64_t v5 = (*((_DWORD *)this + 28) + v4);
  *((void *)this + 9) = v3;
  double v7 = (void *)((char *)this + 80);
  unint64_t v6 = *((void *)this + 10);
  if ((unint64_t)v3 >= v6)
  {
    uint64_t v9 = v6 - (void)v3;
    uint64_t v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 80, v11);
    double v13 = (char *)*((void *)this + 8);
    uint64_t v14 = (char *)*((void *)this + 9);
    double v16 = &v12[v15];
    *uint64_t v12 = 0;
    double v8 = (double *)(v12 + 1);
    while (v14 != v13)
    {
      uint64_t v17 = *((void *)v14 - 1);
      v14 -= 8;
      *--uint64_t v12 = v17;
    }
    *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v12;
    *((void *)this + 9) = v8;
    *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = v16;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    void *v3 = 0;
    double v8 = (double *)(v3 + 1);
  }
  *((void *)this + 9) = v8;
  if (v5 >= 2)
  {
    unint64_t v18 = (v4 + 2);
    unint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19 - 1;
      BOOL v22 = v19++ >= *((unsigned int *)this + 28);
      double v21 = (double *)*((void *)this + 8);
      BOOL v22 = !v22 || v19 >= v18;
      if (v22)
      {
        if ((unint64_t)v8 >= *v7)
        {
          uint64_t v26 = v8 - v21;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            goto LABEL_56;
          }
          uint64_t v28 = *v7 - (void)v21;
          if (v28 >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v7, v29);
            unint64_t v31 = (double *)*((void *)this + 8);
            double v8 = (double *)*((void *)this + 9);
          }
          else
          {
            unint64_t v30 = 0;
            unint64_t v31 = (double *)*((void *)this + 8);
          }
          long long v37 = &v30[8 * v26];
          *(double *)long long v37 = v21[v20];
          double v25 = (double *)(v37 + 8);
          while (v8 != v31)
          {
            uint64_t v38 = *((void *)v8-- - 1);
            *((void *)v37 - 1) = v38;
            v37 -= 8;
          }
          *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v37;
          *((void *)this + 9) = v25;
          *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = &v30[8 * v29];
          if (!v31) {
            goto LABEL_54;
          }
          CMTime v39 = v31;
          goto LABEL_53;
        }
        double *v8 = v21[v20];
        uint64_t v23 = v8 + 1;
      }
      else
      {
        double v24 = v21[v20] + 1.0;
        if ((unint64_t)v8 >= *v7)
        {
          uint64_t v32 = v8 - v21;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
LABEL_56:
          }
            std::vector<double>::__throw_length_error[abi:ne180100]();
          uint64_t v34 = *v7 - (void)v21;
          if (v34 >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            double v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v7, v35);
            double v21 = (double *)*((void *)this + 8);
            double v8 = (double *)*((void *)this + 9);
          }
          else
          {
            double v36 = 0;
          }
          CMTime v40 = (double *)&v36[8 * v32];
          *CMTime v40 = v24;
          double v25 = v40 + 1;
          while (v8 != v21)
          {
            uint64_t v41 = *((void *)v8-- - 1);
            *((void *)v40-- - 1) = v41;
          }
          *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v40;
          *((void *)this + 9) = v25;
          *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = &v36[8 * v35];
          if (!v21) {
            goto LABEL_54;
          }
          CMTime v39 = v21;
LABEL_53:
          operator delete(v39);
          goto LABEL_54;
        }
        double *v8 = v24;
        uint64_t v23 = v8 + 1;
      }
      double v25 = v23;
LABEL_54:
      *((void *)this + 9) = v25;
      double v8 = v25;
    }
    while (v19 != v5);
  }
}

void OZBSplineInterpolator::generatePeriodicKnotVector(OZBSplineInterpolator *this, OZSpline *a2)
{
  double v3 = (void **)((char *)this + 64);
  int v4 = (void *)*((void *)this + 8);
  int v5 = *((_DWORD *)this + 28) + *((_DWORD *)this + 8);
  *((void *)this + 9) = v4;
  double v7 = (void *)((char *)this + 80);
  unint64_t v6 = *((void *)this + 10);
  if ((unint64_t)v4 >= v6)
  {
    uint64_t v9 = v6 - (void)v4;
    uint64_t v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 80, v11);
    double v13 = (char *)*((void *)this + 8);
    uint64_t v14 = (char *)*((void *)this + 9);
    double v16 = &v12[v15];
    *uint64_t v12 = 0;
    double v8 = (double *)(v12 + 1);
    while (v14 != v13)
    {
      uint64_t v17 = *((void *)v14 - 1);
      v14 -= 8;
      *--uint64_t v12 = v17;
    }
    *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v12;
    *((void *)this + 9) = v8;
    *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = v16;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    void *v4 = 0;
    double v8 = (double *)(v4 + 1);
  }
  *((void *)this + 9) = v8;
  if (v5 >= 2)
  {
    for (int i = 1; i != v5; ++i)
    {
      double v19 = (double)i;
      if ((unint64_t)v8 >= *v7)
      {
        double v21 = (double *)*v3;
        uint64_t v22 = ((char *)v8 - (unsigned char *)*v3) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = *v7 - (void)v21;
        if (v24 >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v7, v25);
          double v21 = (double *)*((void *)this + 8);
          double v8 = (double *)*((void *)this + 9);
        }
        else
        {
          uint64_t v26 = 0;
        }
        unint64_t v27 = (double *)&v26[8 * v22];
        *unint64_t v27 = v19;
        unint64_t v20 = v27 + 1;
        while (v8 != v21)
        {
          uint64_t v28 = *((void *)v8-- - 1);
          *((void *)v27-- - 1) = v28;
        }
        *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v27;
        *((void *)this + 9) = v20;
        *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = &v26[8 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        double *v8 = v19;
        unint64_t v20 = v8 + 1;
      }
      *((void *)this + 9) = v20;
      double v8 = v20;
    }
  }
}

uint64_t OZBSplineInterpolator::generateRationalBasisFunctions(uint64_t this, double a2)
{
  if (*(_DWORD *)(this + 112) + *(_DWORD *)(this + 32)) {
    operator new[]();
  }
  return this;
}

uint64_t OZBSplineInterpolator::useKeypoints(OZBSplineInterpolator *this)
{
  return 0;
}

CMTime *OZBSplineInterpolator::getAdjustedMaxU@<X0>(OZBSplineInterpolator *this@<X0>, OZSpline *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, CMTime *a5@<X8>)
{
  BOOL result = (CMTime *)OZSpline::getNumberOfValidVerticesWithMultiplicity(a2, MEMORY[0x1E4F1FA48]);
  if (result)
  {
    if ((*(unsigned int (**)(OZBSplineInterpolator *, OZSpline *))(*(void *)this + 88))(this, a2)) {
      (*(void (**)(OZBSplineInterpolator *, OZSpline *, const CMTime *))(*(void *)this + 16))(this, a2, a3);
    }
    if (*((unsigned char *)a2 + 144))
    {
      LODWORD(v11) = *((_DWORD *)this + 8);
      double v12 = (double)v11;
    }
    else
    {
      double v12 = (double)(unint64_t)(((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3) - 1);
    }
    return OZFigTimeForChannelSeconds(a5, v12, 0x40000);
  }
  else
  {
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&a4->value;
    a5->CMTimeEpoch epoch = a4->epoch;
  }
  return result;
}

CMTime *OZBSplineInterpolator::getAdjustedMinU@<X0>(OZBSplineInterpolator *this@<X0>, OZSpline *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, CMTime *a5@<X8>)
{
  uint64_t v10 = MEMORY[0x1E4F1FA48];
  BOOL result = (CMTime *)OZSpline::getNumberOfValidVerticesWithMultiplicity(a2, MEMORY[0x1E4F1FA48]);
  if (!result)
  {
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&a4->value;
    CMTimeEpoch epoch = a4->epoch;
LABEL_10:
    a5->CMTimeEpoch epoch = epoch;
    return result;
  }
  BOOL result = (CMTime *)(*(uint64_t (**)(OZBSplineInterpolator *, OZSpline *))(*(void *)this + 88))(this, a2);
  if (result) {
    BOOL result = (CMTime *)(*(uint64_t (**)(OZBSplineInterpolator *, OZSpline *, const CMTime *))(*(void *)this + 16))(this, a2, a3);
  }
  if (!*((unsigned char *)a2 + 144))
  {
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)v10;
    CMTimeEpoch epoch = *(void *)(v10 + 16);
    goto LABEL_10;
  }
  double v12 = (double)(*((_DWORD *)this + 28) - 1);

  return OZFigTimeForChannelSeconds(a5, v12, 0x40000);
}

void OZBSplineInterpolator::init(OZBSplineInterpolator *this, OZSpline *a2, const CMTime *a3)
{
  int v5 = *((unsigned __int8 *)a2 + 144);
  unsigned int NumberOfValidVerticesWithMultiplicity = OZSpline::getNumberOfValidVerticesWithMultiplicity(a2, MEMORY[0x1E4F1FA48]);
  if (v5)
  {
    *((_DWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = NumberOfValidVerticesWithMultiplicity + 3;
    *((_DWORD *)this + 2OZSpline::reparametrize((uint64_t)this + 8) = 4;
    OZBSplineInterpolator::generatePeriodicKnotVector(this, v7);
  }
  else
  {
    *((_DWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = NumberOfValidVerticesWithMultiplicity;
    if (NumberOfValidVerticesWithMultiplicity >= 4) {
      int v8 = 4;
    }
    else {
      int v8 = NumberOfValidVerticesWithMultiplicity;
    }
    *((_DWORD *)this + 2OZSpline::reparametrize((uint64_t)this + 8) = v8;
    OZBSplineInterpolator::generateOpenKnotVector(this, v7);
  }

  OZSpline::setDirty(a2, 0);
}

void OZBSplineInterpolator::fillTempArrays(OZBSplineInterpolator *this, OZSpline *a2, const CMTime *a3)
{
  unint64_t v20 = 0;
  double v21 = 0;
  double v19 = 0;
  double v7 = (void **)((char *)this + 40);
  uint64_t v6 = *((void *)this + 5);
  int v8 = (void **)((char *)this + 8);
  *((void *)this + 2) = *((void *)this + 1);
  *((void *)this + 6) = v6;
  if (*((unsigned char *)a2 + 144))
  {
    uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZSpline::getFirstValidVertex(a2, &v21, MEMORY[0x1E4F1FA48]);
    OZSpline::getLastValidVertex(a2, &v20, v9);
    std::vector<double>::reserve(v8, *((unsigned int *)this + 8));
    std::vector<double>::reserve(v7, *((unsigned int *)this + 8));
    *(double *)(*((void *)this + 5) + OZSpline::reparametrize((uint64_t)this + 8) = (*(double (**)(void *, const CMTime *))(*(void *)v21 + 40))(v21, a3);
    *(double *)(*((void *)this + 1) + OZSpline::reparametrize((uint64_t)this + 8) = (*(double (**)(void *, const CMTime *))(*(void *)v21 + 24))(v21, a3);
    double v19 = v21;
    unsigned int v10 = 1;
    if (OZSpline::getNextValidVertex((void ***)a2, v21, &v19, v9))
    {
      do
      {
        *((double *)*v7 + ++v1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = (*(double (**)(void *, const CMTime *))(*(void *)v19 + 40))(v19, a3);
        *((double *)*v8 + v1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = (*(double (**)(void *, const CMTime *))(*(void *)v19 + 24))(v19, a3);
      }
      while ((OZSpline::getNextValidVertex((void ***)a2, v19, &v19, v9) & 1) != 0);
    }
    unint64_t v11 = *v8;
    *((void *)*v8 + v10 + 1) = *((void *)*v8 + 1);
    double v12 = *v7;
    *((void *)*v7 + v10 + 1) = *((void *)*v7 + 1);
    unsigned int v13 = v10 + 2;
    v11[v13] = v11[2];
    v12[v13] = v12[2];
    *unint64_t v11 = v11[v10];
    *double v12 = v12[v10];
  }
  else
  {
    std::vector<double>::reserve((void **)this + 1, *((unsigned int *)this + 8));
    std::vector<double>::reserve(v7, *((unsigned int *)this + 8));
    uint64_t v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZSpline::getFirstValidVertex(a2, &v21, MEMORY[0x1E4F1FA48]);
    **((double **)this + 5) = (*(double (**)(void *, const CMTime *))(*(void *)v21 + 40))(v21, a3);
    **((double **)this + 1) = (*(double (**)(void *, const CMTime *))(*(void *)v21 + 24))(v21, a3);
    double v19 = v21;
    if (OZSpline::getNextValidVertex((void ***)a2, v21, &v19, v14))
    {
      unsigned int v15 = 1;
      do
      {
        *((double *)*v7 + v15) = (*(double (**)(void *, const CMTime *))(*(void *)v19 + 40))(v19, a3);
        *((double *)*v8 + v15++) = (*(double (**)(void *, const CMTime *))(*(void *)v19 + 24))(v19, a3);
      }
      while ((OZSpline::getNextValidVertex((void ***)a2, v19, &v19, v14) & 1) != 0);
    }
  }
  uint64_t v16 = *((unsigned int *)this + 8);
  if (v16)
  {
    uint64_t v17 = (double *)*v7;
    do
    {
      if (*v17 <= 1.0) {
        double v18 = *v17 * -24.0 + 25.0;
      }
      else {
        double v18 = *v17 * -0.9 + 1.9;
      }
      *v17++ = v18;
      --v16;
    }
    while (v16);
  }
  OZSpline::setDirty(a2, 0);
}

void OZBSplineInterpolator::interpolate(OZBSplineInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, const CMTime *a6, int a7)
{
  OZBSplineInterpolator::fillTempArrays(this, a2, a3);
  if (a7)
  {
    CMTime time = *a6;
    double Seconds = CMTimeGetSeconds(&time);
    if (!*((unsigned char *)a2 + 144))
    {
      CMTime v15 = *a6;
      double v13 = CMTimeGetSeconds(&v15);
      OZSpline::getMaxValueU(a2, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v14);
      double Seconds = v13
              / CMTimeGetSeconds(&v14)
              * *(double *)(*((void *)this + 8)
                          + 8 * (*((_DWORD *)this + 28) + *((_DWORD *)this + 8) - 1));
    }
    OZBSplineInterpolator::evalBSplineNURB(this, v11, Seconds);
  }
}

double OZBSplineInterpolator::evalBSplineNURB(OZBSplineInterpolator *this, OZSpline *a2, double a3)
{
  OZBSplineInterpolator::generateRationalBasisFunctions((uint64_t)this, a3);
  uint64_t v4 = *((unsigned int *)this + 8);
  if (!v4) {
    return 0.0;
  }
  int v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 11);
  double result = 0.0;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    double result = result + v9 * v10;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t OZBSplineInterpolator::needInit(OZBSplineInterpolator *this, OZSpline *a2)
{
  return OZSpline::isDirty(a2);
}

uint64_t OZBSplineInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned char **a5, unsigned char **a6)
{
  CMTime v17 = *(CMTime *)(a4 + 2);
  double v9 = (*((double (**)(unsigned char **, uint64_t))*a4 + 3))(a4, a3);
  CMTime v16 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, uint64_t))*a5 + 3))(a5, a3);
  CMTime v19 = *(CMTime *)(a6 + 2);
  CMTime v18 = v17;
  PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v19 = v16;
  CMTime v18 = v17;
  PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v14);
  Float64 v12 = CMTimeGetSeconds(&v14);
  return (*((uint64_t (**)(unsigned char **, void, double))*a6 + 4))(a6, MEMORY[0x1E4F1FA48], v9 + Seconds * ((v10 - v9) / v12));
}

void OZBSplineInterpolator::OZBSplineInterpolator(void **a1, void **a2, void **a3, void *a4)
{
  double v7 = *a1;
  if (v7)
  {
    a4[9] = v7;
    operator delete(v7);
  }
  double v8 = *a2;
  if (*a2)
  {
    a4[6] = v8;
    operator delete(v8);
  }
  double v9 = *a3;
  if (*a3)
  {
    a4[2] = v9;
    operator delete(v9);
  }
}

void OZCardinalInterpolator::OZCardinalInterpolator(OZCardinalInterpolator *this, double a2)
{
  OZHermiteInterpolator::OZHermiteInterpolator(this);
  *(void *)uint64_t v3 = &unk_1F11048F8;
  *(double *)(v3 + 16) = a2;
}

void OZCardinalInterpolator::~OZCardinalInterpolator(OZCardinalInterpolator *this)
{
  OZHermiteInterpolator::~OZHermiteInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZCardinalInterpolator::useTangents(OZCardinalInterpolator *this)
{
  return 0;
}

void OZCardinalInterpolator::computeTangents(OZCardinalInterpolator *this, OZSpline *a2, unsigned char **a3, unsigned char **a4, const CMTime *a5, double *a6, double *a7, double *a8, double *a9)
{
  CMTime v39 = 0;
  CMTime v40 = 0;
  uint64_t v38 = 0;
  double v36 = 0.0;
  double v35 = 0.0;
  double v16 = (1.0 - *((double *)this + 2)) * 0.5;
  if (OZSpline::getPreviousValidVertex(a2, a3, &v40, MEMORY[0x1E4F1FA48]))
  {
    CMTime v37 = *(CMTime *)((char *)v40 + 16);
    CMTime v42 = *(CMTime *)(a4 + 2);
    CMTime v41 = v37;
    PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    double v18 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a5);
    double v19 = v18 - (*(double (**)(void *, const CMTime *))(*(void *)v40 + 24))(v40, a5);
LABEL_5:
    double v36 = v16 * v19;
    goto LABEL_7;
  }
  if (*((unsigned char *)a2 + 144))
  {
    CMTime v34 = *(CMTime *)(a3 + 2);
    OZSpline::getSmallDeltaU(a2, &v33);
    CMTime v42 = v34;
    CMTime v41 = v33;
    PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v37);
    CMTime v42 = *(CMTime *)(a4 + 2);
    CMTime v41 = v37;
    PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v32);
    double Seconds = CMTimeGetSeconds(&v32);
    OZSpline::getLastValidVertex(a2, &v38, MEMORY[0x1E4F1FA48]);
    (*(void (**)(OZSpline *, void *, void, double *, const CMTime *))(*(void *)a2 + 264))(a2, v38, 0, &v36, a5);
    double v20 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a5);
    double v19 = v20 - v36;
    goto LABEL_5;
  }
  CMTime v33 = *(CMTime *)(a3 + 2);
  operator*(2, &v33, &v34);
  CMTime v41 = *(CMTime *)(a4 + 2);
  CMTime v42 = v34;
  PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v37);
  CMTime v42 = *(CMTime *)(a4 + 2);
  CMTime v41 = v37;
  PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v31);
  double Seconds = CMTimeGetSeconds(&v31);
  double v36 = 0.0;
LABEL_7:
  if (OZSpline::getNextValidVertex((void ***)a2, a4, &v39, MEMORY[0x1E4F1FA48]))
  {
    CMTime v34 = *(CMTime *)((char *)v39 + 16);
    CMTime v42 = *(CMTime *)(a3 + 2);
    CMTime v41 = v34;
    PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v26);
    double v21 = CMTimeGetSeconds(&v26);
    double v22 = (*((double (**)(unsigned char **, const CMTime *))*a3 + 3))(a3, a5);
    double v23 = v22 - (*(double (**)(void *, const CMTime *))(*(void *)v39 + 24))(v39, a5);
    goto LABEL_11;
  }
  if (*((unsigned char *)a2 + 144))
  {
    CMTime v33 = *(CMTime *)(a4 + 2);
    OZSpline::getSmallDeltaU(a2, &v29);
    CMTime v42 = v33;
    CMTime v41 = v29;
    PC_CMTimeSaferAdd(&v42, &v41, (uint64_t)&v34);
    CMTime v37 = v34;
    CMTime v42 = *(CMTime *)(a3 + 2);
    CMTime v41 = v34;
    PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v28);
    double v21 = CMTimeGetSeconds(&v28);
    OZSpline::getFirstValidVertex(a2, &v38, MEMORY[0x1E4F1FA48]);
    (*(void (**)(OZSpline *, void *, void, double *, const CMTime *))(*(void *)a2 + 264))(a2, v38, 0, &v35, a5);
    double v24 = (*((double (**)(unsigned char **, const CMTime *))*a3 + 3))(a3, a5);
    double v23 = v24 - v35;
LABEL_11:
    double v25 = v16 * v23;
    if (!a6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CMTime v29 = *(CMTime *)(a4 + 2);
  operator*(2, &v29, &v33);
  CMTime v41 = *(CMTime *)(a3 + 2);
  CMTime v42 = v33;
  PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v34);
  CMTime v37 = v34;
  CMTime v42 = *(CMTime *)(a3 + 2);
  CMTime v41 = v34;
  PC_CMTimeSaferSubtract(&v42, &v41, (uint64_t)&v27);
  double v21 = CMTimeGetSeconds(&v27);
  double v25 = 0.0;
  if (a6) {
LABEL_12:
  }
    *a6 = v16 * Seconds;
LABEL_13:
  if (a7) {
    *a7 = v36;
  }
  if (a8) {
    *a8 = v16 * v21;
  }
  if (a9) {
    *a9 = v25;
  }
}

void OZCatmullRomInterpolator::OZCatmullRomInterpolator(OZCatmullRomInterpolator *this)
{
  OZCardinalInterpolator::OZCardinalInterpolator(this, 0.0);
  void *v1 = &unk_1F11049A8;
}

void OZCatmullRomInterpolator::~OZCatmullRomInterpolator(OZCatmullRomInterpolator *this)
{
  OZCardinalInterpolator::~OZCardinalInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZConstantInterpolator::OZConstantInterpolator(OZConstantInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F1104A58;
}

void OZConstantInterpolator::~OZConstantInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZConstantInterpolator::interpolate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 24))(a4, a3);
  if (a8) {
    return 0.0;
  }
  return result;
}

uint64_t OZConstantInterpolator::subDivide(OZConstantInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, char *a5, void *a6)
{
  CMTime v14 = *(CMTime *)(a4 + 16);
  CMTime v13 = *(CMTime *)(a5 + 16);
  CMTime time1 = *(CMTime *)(a4 + 16);
  CMTime time2 = *(CMTime *)(a5 + 16);
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v15);
    CMTime time1 = v14;
    CMTime time2 = v15;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v13);
  }
  memset(&v12, 0, sizeof(v12));
  CMTime time1 = v13;
  CMTime time2 = v14;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
  operator*(&v15, &v12, 0.5);
  CMTime time2 = v12;
  CMTime v15 = v14;
  PC_CMTimeSaferAdd(&time2, &v15, (uint64_t)&time1);
  CMTime v12 = time1;
  (*(void (**)(OZConstantInterpolator *, OZSpline *, const CMTime *, char *, char *, CMTime *, void, void))(*(void *)this + 24))(this, a2, a3, a4, a5, &v12, 0, 0);
  return (*(uint64_t (**)(OZSpline *, CMTime *, const CMTime *, uint64_t))(*(void *)a2 + 192))(a2, &v12, a3, 1);
}

BOOL OZConstantInterpolator::uForCurveValue(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, void **a8)
{
  double v11 = (*(double (**)(uint64_t, void))(*(void *)a4 + 24))(a4, MEMORY[0x1E4F1FA48]);
  if (v11 == a1)
  {
    CMTime v12 = (char *)a8[2];
    CMTime v13 = (char *)a8[1];
    if (v13 >= v12)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a8) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a8) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v19);
      }
      else {
        double v20 = 0;
      }
      double v21 = &v20[24 * v16];
      double v22 = &v20[24 * v19];
      long long v23 = *a6;
      *((void *)v21 + 2) = *((void *)a6 + 2);
      *(_OWORD *)double v21 = v23;
      CMTime v15 = v21 + 24;
      double v25 = (char *)*a8;
      double v24 = (char *)a8[1];
      if (v24 != *a8)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 24);
          *((void *)v21 - 1) = *((void *)v24 - 1);
          *(_OWORD *)(v21 - 24) = v26;
          v21 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        double v24 = (char *)*a8;
      }
      *a8 = v21;
      a8[1] = v15;
      a8[2] = v22;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      long long v14 = *a6;
      *((void *)v13 + 2) = *((void *)a6 + 2);
      *(_OWORD *)CMTime v13 = v14;
      CMTime v15 = v13 + 24;
    }
    a8[1] = v15;
  }
  return v11 == a1;
}

void OZDecelerateInterpolator::easeTime(CMTime *a1@<X2>, unsigned char **a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v8 = (2.0 - (*((double (**)(unsigned char **, void))*a2 + 5))(a2, MEMORY[0x1E4F1FA48])) * 0.5;
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = *a1;
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  memset(&v15, 0, sizeof(v15));
  CMTime v18 = *(CMTime *)(a3 + 16);
  CMTime v17 = *(CMTime *)(a2 + 2);
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v15);
  CMTime v14 = v15;
  Float64 v10 = CMTimeGetSeconds(&v14);
  Float64 v13 = 0.0;
  PCMath::easeInOut(&v13, Seconds / v10, 0.0, v8, 0.0, 1.0, 0, v11);
  operator*(&v15, &v12, v13);
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = v12;
  PC_CMTimeSaferAdd(&v18, &v17, a4);
}

void OZEaseInterpolator::easeTime(CMTime *a1@<X2>, unsigned char **a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v8 = (2.0 - (*((double (**)(unsigned char **, void))*a2 + 5))(a2, MEMORY[0x1E4F1FA48])) * 0.25;
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = *a1;
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  memset(&v15, 0, sizeof(v15));
  CMTime v18 = *(CMTime *)(a3 + 16);
  CMTime v17 = *(CMTime *)(a2 + 2);
  PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v15);
  CMTime v14 = v15;
  Float64 v10 = CMTimeGetSeconds(&v14);
  Float64 v13 = 0.0;
  PCMath::easeInOut(&v13, Seconds / v10, v8, v8, 0.0, 1.0, 0, v11);
  operator*(&v15, &v12, v13);
  CMTime v17 = *(CMTime *)(a2 + 2);
  CMTime v18 = v12;
  PC_CMTimeSaferAdd(&v18, &v17, a4);
}

long double OZEaseInInterpolator::interpolate(OZEaseInInterpolator *this, OZSpline *a2, const CMTime *a3, unsigned char **a4, unsigned char **a5, const CMTime *a6)
{
  CMTime v19 = *(CMTime *)(a4 + 2);
  CMTime v18 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a3);
  double v11 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime time1 = v19;
  CMTime time2 = v18;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v17);
    CMTime time1 = v19;
    CMTime time2 = v17;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
  }
  CMTime time1 = *a6;
  CMTime time2 = v19;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
  operator*(&v15, &v17, 3.14159265);
  CMTime time1 = v18;
  CMTime time2 = v19;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v14);
  operator/((long long *)&v17.value, (uint64_t)v14, (uint64_t)&time);
  Float64 Seconds = CMTimeGetSeconds(&time);
  return v10 + (v11 - v10) * (1.0 - cos(Seconds * 0.5));
}

uint64_t OZEaseInInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *(_OWORD *)(a6 + 16);
  uint64_t v10 = *(void *)(a6 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 24))(a1, a2, a3, a4, a5, &v9, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a3);
}

void OZEaseInInterpolator::getMinMaxValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, double *a7, double *a8)
{
  long long v20 = *(_OWORD *)(a3 + 16);
  CMTimeEpoch epoch = *(void *)(a3 + 32);
  CMTime v19 = *(CMTime *)(a4 + 16);
  CMTime time1 = *a5;
  CMTime time2 = *(CMTime *)(a3 + 16);
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    long long v20 = *(_OWORD *)&a5->value;
    CMTimeEpoch epoch = a5->epoch;
  }
  CMTime time1 = *a6;
  CMTime time2 = v19;
  if (CMTimeCompare(&time1, &time2) < 0) {
    CMTime v19 = *a6;
  }
  uint64_t v16 = MEMORY[0x1E4F1FA48];
  *a7 = (*(double (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 24))(a1, a2, MEMORY[0x1E4F1FA48], a3, a4, &v20, 0, 0);
  double v17 = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, void, void))(*(void *)a1 + 24))(a1, a2, v16, a3, a4, &v19, 0, 0);
  *a8 = v17;
  double v18 = *a7;
  if (*a7 > v17)
  {
    *a7 = v17;
    *a8 = v18;
  }
}

BOOL OZEaseInInterpolator::uForCurveValue(double a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned char **a5, uint64_t a6, uint64_t a7, void **a8)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  double v15 = (*(double (**)(uint64_t, uint64_t, void, void))(*(void *)a3 + 240))(a3, a6, MEMORY[0x1E4F1FA48], 0);
  double v16 = (*(double (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 240))(a3, a7, v14, 0);
  if (v15 >= v16) {
    double v17 = v15;
  }
  else {
    double v17 = v16;
  }
  if (v15 <= v16) {
    double v16 = v15;
  }
  BOOL v18 = v16 <= a1 && v17 >= a1;
  if (v18)
  {
    uint64_t v19 = MEMORY[0x1E4F1FA48];
    double v20 = (*((double (**)(unsigned char **, void))*a4 + 3))(a4, MEMORY[0x1E4F1FA48]);
    double v21 = (*((double (**)(unsigned char **, uint64_t))*a5 + 3))(a5, v19);
    CMTime v45 = *(CMTime *)(a4 + 2);
    CMTime v47 = *(CMTime *)(a5 + 2);
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    CMTime v46 = *(CMTime *)(a4 + 2);
    PC_CMTimeSaferSubtract(&v47, &v46, (uint64_t)&v39);
    operator*(&v39, &v40, 2.0);
    operator/((long long *)&v40.value, (uint64_t)&v41, 3.14159265);
    long double v22 = acos((v20 - a1) / (v21 - v20) + 1.0);
    operator*(&v41, &v42, v22);
    CMTime v47 = v42;
    CMTime v46 = v45;
    PC_CMTimeSaferAdd(&v47, &v46, (uint64_t)&v43);
    long long v23 = (char *)a8[2];
    double v24 = (char *)a8[1];
    if (v24 >= v23)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*a8) >> 3);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)*a8) >> 3);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        CMTime v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v30);
      }
      else {
        CMTime v31 = 0;
      }
      CMTime v32 = &v31[24 * v27];
      CMTime v33 = &v31[24 * v30];
      long long v34 = v43;
      *((void *)v32 + 2) = v44;
      *(_OWORD *)CMTime v32 = v34;
      long long v26 = v32 + 24;
      double v36 = (char *)*a8;
      double v35 = (char *)a8[1];
      if (v35 != *a8)
      {
        do
        {
          long long v37 = *(_OWORD *)(v35 - 24);
          *((void *)v32 - 1) = *((void *)v35 - 1);
          *(_OWORD *)(v32 - 24) = v37;
          v32 -= 24;
          v35 -= 24;
        }
        while (v35 != v36);
        double v35 = (char *)*a8;
      }
      *a8 = v32;
      a8[1] = v26;
      a8[2] = v33;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      long long v25 = v43;
      *((void *)v24 + 2) = v44;
      *(_OWORD *)double v24 = v25;
      long long v26 = v24 + 24;
    }
    a8[1] = v26;
  }
  return v18;
}

void OZEaseInInterpolator::~OZEaseInInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

long double OZEaseOutInterpolator::interpolate(OZEaseOutInterpolator *this, OZSpline *a2, const CMTime *a3, unsigned char **a4, unsigned char **a5, const CMTime *a6)
{
  CMTime v19 = *(CMTime *)(a4 + 2);
  CMTime v18 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a3);
  double v11 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime time1 = v19;
  CMTime time2 = v18;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v17);
    CMTime time1 = v19;
    CMTime time2 = v17;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
  }
  CMTime time1 = *a6;
  CMTime time2 = v19;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
  operator*(&v15, &v17, 3.14159265);
  CMTime time1 = v18;
  CMTime time2 = v19;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v14);
  operator/((long long *)&v17.value, (uint64_t)v14, (uint64_t)&time);
  Float64 Seconds = CMTimeGetSeconds(&time);
  return v10 + (v11 - v10) * sin(Seconds * 0.5);
}

uint64_t OZEaseOutInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *(_OWORD *)(a6 + 16);
  uint64_t v10 = *(void *)(a6 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 24))(a1, a2, a3, a4, a5, &v9, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a3);
}

BOOL OZEaseOutInterpolator::uForCurveValue(double a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned char **a5, uint64_t a6, uint64_t a7, void **a8)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  double v15 = (*(double (**)(uint64_t, uint64_t, void, void))(*(void *)a3 + 240))(a3, a6, MEMORY[0x1E4F1FA48], 0);
  double v16 = (*(double (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 240))(a3, a7, v14, 0);
  if (v15 >= v16) {
    double v17 = v15;
  }
  else {
    double v17 = v16;
  }
  if (v15 <= v16) {
    double v16 = v15;
  }
  BOOL v18 = v16 <= a1 && v17 >= a1;
  if (v18)
  {
    uint64_t v19 = MEMORY[0x1E4F1FA48];
    double v20 = (*((double (**)(unsigned char **, void))*a4 + 3))(a4, MEMORY[0x1E4F1FA48]);
    double v21 = (*((double (**)(unsigned char **, uint64_t))*a5 + 3))(a5, v19);
    CMTime v45 = *(CMTime *)(a4 + 2);
    CMTime v47 = *(CMTime *)(a5 + 2);
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    CMTime v46 = *(CMTime *)(a4 + 2);
    PC_CMTimeSaferSubtract(&v47, &v46, (uint64_t)&v39);
    operator*(&v39, &v40, 2.0);
    operator/((long long *)&v40.value, (uint64_t)&v41, 3.14159265);
    long double v22 = asin((a1 - v20) / (v21 - v20));
    operator*(&v41, &v42, v22);
    CMTime v47 = v42;
    CMTime v46 = v45;
    PC_CMTimeSaferAdd(&v47, &v46, (uint64_t)&v43);
    long long v23 = (char *)a8[2];
    double v24 = (char *)a8[1];
    if (v24 >= v23)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*a8) >> 3);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)*a8) >> 3);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        CMTime v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v30);
      }
      else {
        CMTime v31 = 0;
      }
      CMTime v32 = &v31[24 * v27];
      CMTime v33 = &v31[24 * v30];
      long long v34 = v43;
      *((void *)v32 + 2) = v44;
      *(_OWORD *)CMTime v32 = v34;
      long long v26 = v32 + 24;
      double v36 = (char *)*a8;
      double v35 = (char *)a8[1];
      if (v35 != *a8)
      {
        do
        {
          long long v37 = *(_OWORD *)(v35 - 24);
          *((void *)v32 - 1) = *((void *)v35 - 1);
          *(_OWORD *)(v32 - 24) = v37;
          v32 -= 24;
          v35 -= 24;
        }
        while (v35 != v36);
        double v35 = (char *)*a8;
      }
      *a8 = v32;
      a8[1] = v26;
      a8[2] = v33;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      long long v25 = v43;
      *((void *)v24 + 2) = v44;
      *(_OWORD *)double v24 = v25;
      long long v26 = v24 + 24;
    }
    a8[1] = v26;
  }
  return v18;
}

double OZExponentialInterpolator::interpolate(OZExponentialInterpolator *this, OZSpline *a2, const CMTime *a3, unsigned char **a4, unsigned char **a5, const CMTime *a6)
{
  CMTime v23 = *(CMTime *)(a4 + 2);
  CMTime v22 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a3);
  double v11 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime time1 = v23;
  CMTime time2 = v22;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v21);
    CMTime time1 = v23;
    CMTime time2 = v21;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
  }
  memset(&v21, 0, sizeof(v21));
  CMTime time1 = v22;
  CMTime time2 = v23;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
  CMTime time1 = v21;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2))
  {
    double v12 = v11 - v10;
    double v13 = -(v11 - v10);
    if (v11 >= v10) {
      double v13 = v11 - v10;
    }
    double v14 = log(v13);
    CMTime time1 = *a6;
    CMTime time2 = v23;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    operator/(&v19, (uint64_t)&v21, (uint64_t)&time);
    Float64 Seconds = CMTimeGetSeconds(&time);
    double v16 = v14 + 9.21034037;
    double v17 = exp((v14 + 9.21034037) * Seconds + -9.21034037);
    return v10 + v12 * (v17 + -0.0001) / (exp(v16 + -9.21034037) + -0.0001);
  }
  return v10;
}

uint64_t OZExponentialInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *(_OWORD *)(a6 + 16);
  uint64_t v10 = *(void *)(a6 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 24))(a1, a2, a3, a4, a5, &v9, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a3);
}

BOOL OZExponentialInterpolator::uForCurveValue(double a1, uint64_t a2, OZSpline *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void **a8)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  double v15 = (*(double (**)(OZSpline *, uint64_t, void, void))(*(void *)a3 + 240))(a3, a6, MEMORY[0x1E4F1FA48], 0);
  v16.n128_f64[0] = (*(double (**)(OZSpline *, uint64_t, uint64_t, void))(*(void *)a3 + 240))(a3, a7, v14, 0);
  BOOL result = 0;
  if (v15 >= v16.n128_f64[0]) {
    double v18 = v15;
  }
  else {
    double v18 = v16.n128_f64[0];
  }
  if (v15 <= v16.n128_f64[0]) {
    v16.n128_f64[0] = v15;
  }
  if (v18 >= a1 && v16.n128_f64[0] <= a1)
  {
    double v20 = (CMTime *)MEMORY[0x1E4F1FA48];
    double v21 = (*(double (**)(uint64_t, void, __n128))(*(void *)a4 + 24))(a4, MEMORY[0x1E4F1FA48], v16);
    double v22 = (*(double (**)(uint64_t, CMTime *))(*(void *)a5 + 24))(a5, v20);
    CMTime v47 = *(CMTime *)(a4 + 16);
    CMTime v46 = *(CMTime *)(a5 + 16);
    CMTime time1 = *(CMTime *)(a4 + 16);
    CMTime time2 = *(CMTime *)(a5 + 16);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      OZSpline::getSmallDeltaU(a3, &v45);
      CMTime time1 = v47;
      CMTime time2 = v45;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v46);
    }
    memset(&v45, 0, sizeof(v45));
    CMTime time1 = v46;
    CMTime time2 = v47;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v45);
    CMTime time1 = v45;
    CMTime time2 = *v20;
    if (CMTimeCompare(&time1, &time2))
    {
      double v23 = -(v22 - v21);
      if (v22 >= v21) {
        double v23 = v22 - v21;
      }
      long double v24 = log(v23) + 9.21034037;
      long double v25 = exp(v24 + -9.21034037);
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      long double v26 = log((a1 - v21) * (v25 + -0.0001) / (v22 - v21));
      operator*(&v45, &v42, (v26 + 9.21034037) / v24);
      CMTime time1 = v42;
      CMTime time2 = v47;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v43);
      unint64_t v27 = (char *)a8[2];
      unint64_t v28 = (char *)a8[1];
      if (v28 >= v27)
      {
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (unsigned char *)*a8) >> 3);
        unint64_t v32 = v31 + 1;
        if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)*a8) >> 3);
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x555555555555555) {
          unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34) {
          double v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v34);
        }
        else {
          double v35 = 0;
        }
        double v36 = &v35[24 * v31];
        long long v37 = &v35[24 * v34];
        long long v38 = v43;
        *((void *)v36 + 2) = v44;
        *(_OWORD *)double v36 = v38;
        unint64_t v30 = v36 + 24;
        CMTime v40 = (char *)*a8;
        CMTime v39 = (char *)a8[1];
        if (v39 != *a8)
        {
          do
          {
            long long v41 = *(_OWORD *)(v39 - 24);
            *((void *)v36 - 1) = *((void *)v39 - 1);
            *(_OWORD *)(v36 - 24) = v41;
            v36 -= 24;
            v39 -= 24;
          }
          while (v39 != v40);
          CMTime v39 = (char *)*a8;
        }
        *a8 = v36;
        a8[1] = v30;
        a8[2] = v37;
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        long long v29 = v43;
        *((void *)v28 + 2) = v44;
        *(_OWORD *)unint64_t v28 = v29;
        unint64_t v30 = v28 + 24;
      }
      BOOL result = 0;
      a8[1] = v30;
    }
    else
    {
      return v21 != 0.0;
    }
  }
  return result;
}

void OZHermiteInterpolator::OZHermiteInterpolator(OZHermiteInterpolator *this)
{
  OZBezierInterpolator::OZBezierInterpolator(this);
  void *v1 = &unk_1F1104DE8;
  v1[1] = 0x3FD5555555555555;
}

void OZHermiteInterpolator::~OZHermiteInterpolator(OZHermiteInterpolator *this)
{
  OZAccelerateInterpolator::~OZAccelerateInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZInterpolator::OZInterpolator(OZInterpolator *this)
{
  *(void *)this = &unk_1F1104E98;
}

uint64_t OZInterpolator::useTangents(OZInterpolator *this)
{
  return 0;
}

uint64_t OZInterpolator::useKeypoints(OZInterpolator *this)
{
  return 1;
}

__n128 OZInterpolator::getAdjustedMaxU@<Q0>(__n128 *a1@<X3>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

__n128 OZInterpolator::getAdjustedMinU@<Q0>(__n128 *a1@<X3>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void OZInterpolators::OZInterpolators(OZInterpolators *this)
{
  *((void *)this + 2) = OZInterpolatorStrategies::getInstance(this);
}

void OZInterpolators::OZInterpolators(OZInterpolators *this, const OZInterpolators *a2)
{
  if (atomic_load((unint64_t *)a2)) {
    operator new();
  }
  atomic_store(0, (unint64_t *)this);
  if (atomic_load((unint64_t *)a2 + 1)) {
    operator new();
  }
  atomic_store(0, (unint64_t *)this + 1);
  *((void *)this + 2) = OZInterpolatorStrategies::getInstance(this);
}

void sub_1B799CC60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40701C9BA7);
  _Unwind_Resume(a1);
}

void OZInterpolators::~OZInterpolators(OZInterpolators *this)
{
  if (atomic_load((unint64_t *)this))
  {
    unint64_t v3 = atomic_load((unint64_t *)this);
    if (v3) {
      (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
    }
    atomic_store(0, (unint64_t *)this);
  }
  if (atomic_load((unint64_t *)this + 1))
  {
    unint64_t v5 = atomic_load((unint64_t *)this + 1);
    if (v5) {
      (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
    }
    atomic_store(0, (unint64_t *)this + 1);
  }
}

uint64_t OZInterpolators::getInterpolator(OZInterpolators *this, int a2)
{
  if (a2 == 10)
  {
    if (!atomic_load((unint64_t *)this)) {
      operator new();
    }
    return atomic_load((unint64_t *)this);
  }
  else if (a2 == 12)
  {
    if (!atomic_load((unint64_t *)this + 1)) {
      operator new();
    }
    return atomic_load((unint64_t *)this + 1);
  }
  else
  {
    unint64_t v5 = (OZInterpolatorStrategies *)*((void *)this + 2);
    return OZInterpolatorStrategies::getInterpolator(v5, a2);
  }
}

void sub_1B799CE6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40AD291579);
  _Unwind_Resume(a1);
}

uint64_t OZInterpolators::operator==(unint64_t *a1, unint64_t *a2)
{
  if (!atomic_load(a1))
  {
    if (atomic_load(a2)) {
      return 0;
    }
  }
  if (atomic_load(a1))
  {
    if (!atomic_load(a2)) {
      return 0;
    }
  }
  if (!atomic_load(a1 + 1))
  {
    if (atomic_load(a2 + 1)) {
      return 0;
    }
  }
  if (atomic_load(a1 + 1))
  {
    if (!atomic_load(a2 + 1)) {
      return 0;
    }
  }
  unint64_t v10 = atomic_load(a1);
  if (v10 || (unint64_t v11 = atomic_load(a2)) != 0)
  {
    uint64_t v12 = atomic_load(a1);
    uint64_t v13 = atomic_load(a2);
    if (!OZBSplineInterpolator::operator==(v12, v13)) {
      return 0;
    }
  }
  if (((v14 = atomic_load(a1 + 1)) != 0 || (unint64_t v15 = atomic_load(a2 + 1)) != 0)
    && (uint64_t v16 = atomic_load(a1 + 1), v17 = atomic_load(a2 + 1), !OZXSplineInterpolator::operator==(v16, v17)))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

void sub_1B799D0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40044ED5BALL);
  _Unwind_Resume(a1);
}

void OZInterpolatorStrategies::OZInterpolatorStrategies(OZInterpolatorStrategies *this)
{
  PCSingleton::PCSingleton(this, 0);
  void *v1 = &unk_1F1104F28;
  operator new();
}

void sub_1B799D654(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x81C40B8603338);
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZInterpolatorStrategies::~OZInterpolatorStrategies(OZInterpolatorStrategies *this)
{
  *(void *)this = &unk_1F1104F28;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 3) = 0;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 4) = 0;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 5) = 0;
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 6) = 0;
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 7) = 0;
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 9) = 0;
  uint64_t v11 = *((void *)this + 10);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0;
  uint64_t v12 = *((void *)this + 11);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 1atomic_store(0, (unint64_t *)this + 1) = 0;
  uint64_t v13 = *((void *)this + 12);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *((void *)this + 12) = 0;
  uint64_t v14 = *((void *)this + 13);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)this + 13) = 0;
  uint64_t v15 = *((void *)this + 14);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  *((void *)this + 14) = 0;

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  OZInterpolatorStrategies::~OZInterpolatorStrategies(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZInterpolatorStrategies::getInterpolator(OZInterpolatorStrategies *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = (char *)this + 8;
      break;
    case 1:
    case 18:
      uint64_t v2 = (char *)this + 16;
      break;
    case 6:
      uint64_t v2 = (char *)this + 32;
      break;
    case 7:
      uint64_t v2 = (char *)this + 40;
      break;
    case 8:
      uint64_t v2 = (char *)this + 48;
      break;
    case 13:
      uint64_t v2 = (char *)this + 56;
      break;
    case 14:
      uint64_t v2 = (char *)this + 64;
      break;
    case 15:
      uint64_t v2 = (char *)this + 88;
      break;
    case 16:
      uint64_t v2 = (char *)this + 72;
      break;
    case 17:
      uint64_t v2 = (char *)this + 80;
      break;
    case 19:
      uint64_t v2 = (char *)this + 96;
      break;
    case 20:
      uint64_t v2 = (char *)this + 104;
      break;
    case 21:
      uint64_t v2 = (char *)this + 112;
      break;
    default:
      uint64_t v2 = (char *)this + 24;
      break;
  }
  return *(void *)v2;
}

uint64_t OZInterpolatorStrategies::getInstance(OZInterpolatorStrategies *this)
{
  if (OZInterpolatorStrategies::getInstance(void)::once != -1) {
    dispatch_once(&OZInterpolatorStrategies::getInstance(void)::once, &__block_literal_global_64);
  }
  return OZInterpolatorStrategies::_instance;
}

void ___ZN24OZInterpolatorStrategies11getInstanceEv_block_invoke()
{
}

void sub_1B799DB9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C40706B6075);
  _Unwind_Resume(a1);
}

void OZLinearInterpolator::OZLinearInterpolator(OZLinearInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F1104F80;
}

void OZLinearInterpolator::~OZLinearInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLinearInterpolator::interpolate(OZLinearInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, char *a5, const CMTime *a6)
{
  CMTime v18 = *(CMTime *)(a4 + 16);
  CMTime v17 = *(CMTime *)(a5 + 16);
  CMTime time1 = *(CMTime *)(a4 + 16);
  CMTime time2 = *(CMTime *)(a5 + 16);
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v16);
    CMTime time1 = v18;
    CMTime time2 = v16;
    v12.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
  }
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, OZLinearInterpolator *, OZSpline *, const CMTime *, char *, char *, __n128))(*(void *)this + 104))(&v16, this, a2, a6, a4, a5, v12);
  CMTime time1 = v18;
  CMTime time2 = v17;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
  CMTimeGetSeconds(&time);
  CMTime time1 = v16;
  CMTime time2 = v17;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
  CMTimeGetSeconds(&v14);
  CMTime time1 = v16;
  CMTime time2 = v18;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v13);
  CMTimeGetSeconds(&v13);
  (*(void (**)(char *, const CMTime *))(*(void *)a4 + 24))(a4, a3);
  (*(double (**)(char *, const CMTime *))(*(void *)a5 + 24))(a5, a3);
}

uint64_t OZLinearInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *(_OWORD *)(a6 + 16);
  uint64_t v13 = *(void *)(a6 + 32);
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 104))(&v10);
  long long v12 = v10;
  uint64_t v13 = v11;
  (*(void (**)(uint64_t, long long *, uint64_t, void))(*(void *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a3);
}

void OZLinearInterpolator::getMinMaxValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, double *a7, double *a8)
{
  *(_OWORD *)&v23.CMTimeValue value = *(_OWORD *)(a3 + 16);
  v23.CMTimeEpoch epoch = *(void *)(a3 + 32);
  *(_OWORD *)&v22.CMTimeValue value = *(_OWORD *)(a4 + 16);
  v22.CMTimeEpoch epoch = *(void *)(a4 + 32);
  uint64_t v16 = MEMORY[0x1E4F1FA48];
  double v17 = (*(double (**)(uint64_t, void))(*(void *)a3 + 24))(a3, MEMORY[0x1E4F1FA48]);
  double v18 = (*(double (**)(uint64_t, uint64_t))(*(void *)a4 + 24))(a4, v16);
  CMTime time1 = *a5;
  CMTime time2 = v23;
  double v19 = v17;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    CMTime time1 = *a5;
    CMTime time2 = v22;
    double v19 = v18;
    if (CMTimeCompare(&time1, &time2) < 0) {
      double v19 = (*(double (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, CMTime *, void, void))(*(void *)a1 + 24))(a1, a2, MEMORY[0x1E4F1FA48], a3, a4, a5, 0, 0);
    }
  }
  CMTime time1 = *a6;
  CMTime time2 = v23;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    CMTime time1 = *a6;
    CMTime time2 = v22;
    double v17 = v18;
    if (CMTimeCompare(&time1, &time2) < 0) {
      double v17 = (*(double (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, CMTime *, void, void))(*(void *)a1 + 24))(a1, a2, MEMORY[0x1E4F1FA48], a3, a4, a6, 0, 0);
    }
  }
  if (v17 >= v19) {
    double v20 = v19;
  }
  else {
    double v20 = v17;
  }
  if (v17 >= v19) {
    double v21 = v17;
  }
  else {
    double v21 = v19;
  }
  *a7 = v20;
  *a8 = v21;
}

BOOL OZLinearInterpolator::uForCurveValue(double a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned char **a5, uint64_t a6, uint64_t a7, void **a8)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  double v15 = (*(double (**)(uint64_t, uint64_t, void, void))(*(void *)a3 + 240))(a3, a6, MEMORY[0x1E4F1FA48], 0);
  double v16 = (*(double (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 240))(a3, a7, v14, 0);
  if (v15 >= v16) {
    double v17 = v15;
  }
  else {
    double v17 = v16;
  }
  if (v15 <= v16) {
    double v16 = v15;
  }
  BOOL v18 = v16 <= a1 && v17 >= a1;
  if (v18)
  {
    CMTime v44 = *(CMTime *)(a4 + 2);
    CMTime v46 = *(CMTime *)(a5 + 2);
    uint64_t v19 = MEMORY[0x1E4F1FA48];
    double v20 = (*((double (**)(unsigned char **, void))*a4 + 3))(a4, MEMORY[0x1E4F1FA48]);
    double v21 = (*((double (**)(unsigned char **, uint64_t))*a5 + 3))(a5, v19) - v20;
    memset(&v43, 0, sizeof(v43));
    CMTime v45 = v44;
    PC_CMTimeSaferSubtract(&v46, &v45, (uint64_t)&v43);
    BOOL v22 = v21 >= 0.0000001 || v21 <= -0.0000001;
    double v23 = 0.001;
    if (v22) {
      double v23 = v21;
    }
    long long v41 = 0uLL;
    uint64_t v42 = 0;
    operator*(&v43, &v40, (a1 - v20) / v23);
    CMTime v46 = v44;
    CMTime v45 = v40;
    PC_CMTimeSaferAdd(&v46, &v45, (uint64_t)&v41);
    long double v24 = (char *)a8[2];
    long double v25 = (char *)a8[1];
    if (v25 >= v24)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (unsigned char *)*a8) >> 3);
      unint64_t v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*a8) >> 3);
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x555555555555555) {
        unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31) {
        unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v31);
      }
      else {
        unint64_t v32 = 0;
      }
      unint64_t v33 = &v32[24 * v28];
      unint64_t v34 = &v32[24 * v31];
      long long v35 = v41;
      *((void *)v33 + 2) = v42;
      *(_OWORD *)unint64_t v33 = v35;
      unint64_t v27 = v33 + 24;
      long long v37 = (char *)*a8;
      double v36 = (char *)a8[1];
      if (v36 != *a8)
      {
        do
        {
          long long v38 = *(_OWORD *)(v36 - 24);
          *((void *)v33 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v36 - 1);
          *(_OWORD *)(v33 - 24) = v38;
          v33 -= 24;
          v36 -= 24;
        }
        while (v36 != v37);
        double v36 = (char *)*a8;
      }
      *a8 = v33;
      a8[1] = v27;
      a8[2] = v34;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      long long v26 = v41;
      *((void *)v25 + 2) = v42;
      *(_OWORD *)long double v25 = v26;
      unint64_t v27 = v25 + 24;
    }
    a8[1] = v27;
  }
  return v18;
}

double OZLogarithmicInterpolator::interpolate(OZLogarithmicInterpolator *this, OZSpline *a2, const CMTime *a3, unsigned char **a4, unsigned char **a5, const CMTime *a6)
{
  CMTime v18 = *(CMTime *)(a4 + 2);
  CMTime v17 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, const CMTime *))*a4 + 3))(a4, a3);
  double v11 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime time1 = v18;
  CMTime time2 = v17;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v16);
    CMTime time1 = v18;
    CMTime time2 = v16;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
  }
  memset(&v16, 0, sizeof(v16));
  CMTime time1 = v17;
  CMTime time2 = v18;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
  CMTime time1 = v16;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2))
  {
    CMTime time1 = *a6;
    CMTime time2 = v18;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    operator/(&v14, (uint64_t)&v16, (uint64_t)&time);
    Float64 Seconds = CMTimeGetSeconds(&time);
    return v10 + (v11 - v10) / 6.90775528 * log(Seconds * 999.0 + 1.0);
  }
  return v10;
}

uint64_t OZLogarithmicInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *(_OWORD *)(a6 + 16);
  uint64_t v10 = *(void *)(a6 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 24))(a1, a2, a3, a4, a5, &v9, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a3);
}

uint64_t OZLogarithmicInterpolator::uForCurveValue(double a1, uint64_t a2, OZSpline *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void **a8)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  double v15 = (*(double (**)(OZSpline *, uint64_t, void, void))(*(void *)a3 + 240))(a3, a6, MEMORY[0x1E4F1FA48], 0);
  v16.n128_f64[0] = (*(double (**)(OZSpline *, uint64_t, uint64_t, void))(*(void *)a3 + 240))(a3, a7, v14, 0);
  if (v15 >= v16.n128_f64[0]) {
    double v17 = v15;
  }
  else {
    double v17 = v16.n128_f64[0];
  }
  if (v15 <= v16.n128_f64[0]) {
    v16.n128_f64[0] = v15;
  }
  if (v17 >= a1 && v16.n128_f64[0] <= a1)
  {
    uint64_t v19 = MEMORY[0x1E4F1FA48];
    double v20 = (*(double (**)(uint64_t, void, __n128))(*(void *)a4 + 24))(a4, MEMORY[0x1E4F1FA48], v16);
    double v21 = (*(double (**)(uint64_t, uint64_t))(*(void *)a5 + 24))(a5, v19);
    CMTime v44 = *(CMTime *)(a4 + 16);
    CMTime v43 = *(CMTime *)(a5 + 16);
    CMTime time1 = *(CMTime *)(a4 + 16);
    CMTime time2 = *(CMTime *)(a5 + 16);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      OZSpline::getSmallDeltaU(a3, &v42);
      CMTime time1 = v44;
      CMTime time2 = v42;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v43);
    }
    memset(&v42, 0, sizeof(v42));
    CMTime time1 = v43;
    CMTime time2 = v44;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    long double v22 = exp((a1 - v20) / ((v21 - v20) / 6.90775528));
    operator*(&v42, &v39, (v22 + -1.0) / 999.0);
    CMTime time1 = v39;
    CMTime time2 = v44;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
    double v23 = (char *)a8[2];
    long double v24 = (char *)a8[1];
    if (v24 >= v23)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*a8) >> 3);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)*a8) >> 3);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a8 + 2), v30);
      }
      else {
        unint64_t v31 = 0;
      }
      unint64_t v32 = &v31[24 * v27];
      unint64_t v33 = &v31[24 * v30];
      long long v34 = v40;
      *((void *)v32 + 2) = v41;
      *(_OWORD *)unint64_t v32 = v34;
      long long v26 = v32 + 24;
      double v36 = (char *)*a8;
      long long v35 = (char *)a8[1];
      if (v35 != *a8)
      {
        do
        {
          long long v37 = *(_OWORD *)(v35 - 24);
          *((void *)v32 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v35 - 1);
          *(_OWORD *)(v32 - 24) = v37;
          v32 -= 24;
          v35 -= 24;
        }
        while (v35 != v36);
        long long v35 = (char *)*a8;
      }
      *a8 = v32;
      a8[1] = v26;
      a8[2] = v33;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      long long v25 = v40;
      *((void *)v24 + 2) = v41;
      *(_OWORD *)long double v24 = v25;
      long long v26 = v24 + 24;
    }
    a8[1] = v26;
  }
  return 0;
}

void OZSplineInterpolator::OZSplineInterpolator(OZSplineInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F11050B0;
}

void OZSplineInterpolator::~OZSplineInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSplineInterpolator::useTangents(OZSplineInterpolator *this)
{
  return 1;
}

double OZSplineInterpolator::convertHandlesToTangents(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  double result = 0.333333333;
  if (!**(unsigned char **)(a2 + 168)) {
    double result = 12.0;
  }
  if (a3) {
    *a3 = *a3 / result;
  }
  if (a4)
  {
    double result = *a4 / result;
    *a4 = result;
  }
  return result;
}

double OZSplineInterpolator::convertTangentsToHandles(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  double result = 0.333333333;
  if (!**(unsigned char **)(a2 + 168)) {
    double result = 12.0;
  }
  if (a3) {
    *a3 = result * *a3;
  }
  if (a4)
  {
    double result = result * *a4;
    *a4 = result;
  }
  return result;
}

double OZSplineInterpolator::interpolate()
{
  return 0.0;
}

double OZSplineInterpolator::eval(OZSplineInterpolator *this, double *a2, double a3)
{
  return 0.0;
}

uint64_t OZSplineInterpolator::eval(OZSplineInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, double a6)
{
  v17[2] = *(double *)MEMORY[0x1E4F143B8];
  (*(void (**)(void *, void, double *, const CMTime *))(*(void *)a4 + 64))(a4, 0, &v16, a3);
  (*(void (**)(void *, void, double *, const CMTime *))(*(void *)a5 + 56))(a5, 0, v17, a3);
  if (!**((unsigned char **)a2 + 21))
  {
    (*(void (**)(OZSplineInterpolator *, OZSpline *, void, double *))(*(void *)this + 48))(this, a2, 0, &v16);
    (*(void (**)(OZSplineInterpolator *, OZSpline *, void, double *))(*(void *)this + 48))(this, a2, 0, v17);
  }
  double v12 = (*(double (**)(void *, const CMTime *))(*(void *)a4 + 24))(a4, a3);
  double v16 = v12 + v16;
  double v13 = (*(double (**)(void *, const CMTime *))(*(void *)a5 + 24))(a5, a3);
  v17[0] = v13 + v17[0];
  return (*(uint64_t (**)(OZSplineInterpolator *, unsigned char *, double))(*(void *)this + 112))(this, v15, a6);
}

void OZXSplineInterpolator::OZXSplineInterpolator(OZXSplineInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  *(void *)uint64_t v1 = &unk_1F1105158;
  *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 1;
}

void OZXSplineInterpolator::OZXSplineInterpolator(OZXSplineInterpolator *this, const OZXSplineInterpolator *a2)
{
  OZInterpolator::OZInterpolator(this);
  *(void *)uint64_t v3 = &unk_1F1105158;
  *(void *)(v3 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
  *(unsigned char *)(v3 + 36) = *((unsigned char *)a2 + 36);
}

void OZXSplineInterpolator::~OZXSplineInterpolator(OZChannelBase *this, const PCString *a2)
{
  this->var0 = (void **)&unk_1F1105158;
  var1 = (void **)this->var1;
  if (var1)
  {
    this->var2 = var1;
    operator delete(var1);
  }

  OZChannelBase::setRangeName(this, a2);
}

{
  uint64_t vars8;

  OZXSplineInterpolator::~OZXSplineInterpolator(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZXSplineInterpolator::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36) && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

uint64_t OZXSplineInterpolator::useKeypoints(OZXSplineInterpolator *this)
{
  return 0;
}

__n128 OZXSplineInterpolator::getAdjustedMaxU@<Q0>(OZXSplineInterpolator *this@<X0>, OZSpline *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, CMTime *a5@<X8>)
{
  if (OZSpline::getNumberOfValidVertices(a2, a3))
  {
    if ((*(unsigned int (**)(OZXSplineInterpolator *, OZSpline *))(*(void *)this + 88))(this, a2)) {
      (*(void (**)(OZXSplineInterpolator *, OZSpline *, const CMTime *))(*(void *)this + 16))(this, a2, a3);
    }
    int v10 = *((_DWORD *)this + 8);
    if (!*((unsigned char *)a2 + 144)) {
      --v10;
    }
    int32_t timescale = a4->timescale;
    OZFigTimeForChannelSeconds(a5, (double)v10, timescale);
  }
  else
  {
    __n128 result = *(__n128 *)&a4->value;
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&a4->value;
    a5->CMTimeEpoch epoch = a4->epoch;
  }
  return result;
}

uint64_t OZXSplineInterpolator::getAdjustedMinU@<X0>(OZXSplineInterpolator *this@<X0>, OZSpline *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = OZSpline::getNumberOfValidVertices(a2, a3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(OZXSplineInterpolator *, OZSpline *))(*(void *)this + 88))(this, a2);
    if (result) {
      uint64_t result = (*(uint64_t (**)(OZXSplineInterpolator *, OZSpline *, const CMTime *))(*(void *)this + 16))(this, a2, a3);
    }
    uint64_t v11 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a5 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = *(void *)(v11 + 16);
  }
  else
  {
    *(_OWORD *)a5 = *(_OWORD *)&a4->value;
    CMTimeEpoch epoch = a4->epoch;
  }
  *(void *)(a5 + 16) = epoch;
  return result;
}

void OZXSplineInterpolator::init(OZXSplineInterpolator *this, OZSpline *a2, const CMTime *a3)
{
  int v5 = *((unsigned __int8 *)a2 + 144);
  int NumberOfValidVertices = OZSpline::getNumberOfValidVertices(a2, a3);
  if (v5) {
    int v7 = NumberOfValidVertices;
  }
  else {
    int v7 = NumberOfValidVertices + 1;
  }
  *((_DWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = v7;

  OZSpline::setDirty(a2, 0);
}

void OZXSplineInterpolator::initTempArrays(OZXSplineInterpolator *this, OZSpline *a2, const CMTime *a3)
{
  CMTime v46 = 0;
  CMTime v47 = 0;
  uint64_t v6 = (char **)((char *)this + 8);
  *((void *)this + 2) = *((void *)this + 1);
  std::vector<void *>::reserve((void **)this + 1, *((int *)this + 8));
  OZSpline::getFirstValidVertex(a2, &v47, a3);
  OZSpline::getLastValidVertex(a2, &v46, a3);
  int v7 = (void **)*((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v6) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      goto LABEL_54;
    }
    uint64_t v11 = v8 - (void)*v6;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    double v15 = (void **)&v14[8 * v10];
    double v16 = &v14[8 * v13];
    *double v15 = v47;
    long long v9 = v15 + 1;
    CMTime v18 = (char *)*((void *)this + 1);
    double v17 = (char *)*((void *)this + 2);
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = (void *)*((void *)v17 - 1);
        v17 -= 8;
        *--double v15 = v19;
      }
      while (v17 != v18);
      double v17 = *v6;
    }
    *((void *)this + atomic_store(0, (unint64_t *)this + 1) = v15;
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v7 = v47;
    long long v9 = v7 + 1;
  }
  *((void *)this + 2) = v9;
  CMTime v45 = v47;
  if (OZSpline::getNextValidVertex((void ***)a2, v47, &v45, a3))
  {
    do
    {
      double v21 = (void **)*((void *)this + 2);
      unint64_t v20 = *((void *)this + 3);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = ((char *)v21 - *v6) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_54;
        }
        uint64_t v24 = v20 - (void)*v6;
        uint64_t v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
          uint64_t v25 = v23 + 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v26);
        }
        else {
          unint64_t v27 = 0;
        }
        unint64_t v28 = (void **)&v27[8 * v23];
        char *v28 = v45;
        long double v22 = v28 + 1;
        unint64_t v30 = (char *)*((void *)this + 1);
        unint64_t v29 = (char *)*((void *)this + 2);
        if (v29 != v30)
        {
          do
          {
            unint64_t v31 = (void *)*((void *)v29 - 1);
            v29 -= 8;
            *--unint64_t v28 = v31;
          }
          while (v29 != v30);
          unint64_t v29 = *v6;
        }
        *((void *)this + atomic_store(0, (unint64_t *)this + 1) = v28;
        *((void *)this + 2) = v22;
        *((void *)this + 3) = &v27[8 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        char *v21 = v45;
        long double v22 = v21 + 1;
      }
      *((void *)this + 2) = v22;
    }
    while ((OZSpline::getNextValidVertex((void ***)a2, v45, &v45, a3) & 1) != 0);
  }
  if (!*((unsigned char *)a2 + 144))
  {
    unint64_t v33 = (void **)*((void *)this + 2);
    unint64_t v32 = *((void *)this + 3);
    if ((unint64_t)v33 < v32)
    {
      char *v33 = v46;
      long long v34 = v33 + 1;
LABEL_52:
      *((void *)this + 2) = v34;
      goto LABEL_53;
    }
    uint64_t v35 = ((char *)v33 - *v6) >> 3;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      uint64_t v36 = v32 - (void)*v6;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        CMTime v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v38);
      }
      else {
        CMTime v39 = 0;
      }
      long long v40 = (void **)&v39[8 * v35];
      uint64_t v41 = &v39[8 * v38];
      *long long v40 = v46;
      long long v34 = v40 + 1;
      CMTime v43 = (char *)*((void *)this + 1);
      CMTime v42 = (char *)*((void *)this + 2);
      if (v42 != v43)
      {
        do
        {
          CMTime v44 = (void *)*((void *)v42 - 1);
          v42 -= 8;
          *--long long v40 = v44;
        }
        while (v42 != v43);
        CMTime v42 = *v6;
      }
      *((void *)this + atomic_store(0, (unint64_t *)this + 1) = v40;
      *((void *)this + 2) = v34;
      *((void *)this + 3) = v41;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_52;
    }
LABEL_54:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
LABEL_53:
  OZSpline::setDirty(a2, 0);
}

void OZXSplineInterpolator::interpolate(OZXSplineInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, const CMTime *a6, int a7)
{
  if (a7)
  {
    if (*((_DWORD *)this + 8)) {
      OZXSplineInterpolator::initTempArrays(this, a2, a3);
    }
    CMTime v12 = *a6;
    double Seconds = CMTimeGetSeconds(&v12);
    OZXSplineInterpolator::evalXSpline(this, a2, Seconds, a3);
  }
}

void OZXSplineInterpolator::evalXSpline(OZXSplineInterpolator *this, OZSpline *a2, double a3, const CMTime *a4)
{
  double v7 = floor(a3) + -1.0;
  int v8 = (int)v7;
  if (*((unsigned char *)a2 + 144))
  {
    if (v8 < -2) {
      return;
    }
    *(double *)&uint64_t v95 = v7;
    int v9 = *((_DWORD *)this + 8);
    int v10 = (v9 & (v8 >> 31)) + v8;
    uint64_t v11 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 1) % v9));
    BOOL v12 = (*(double (**)(uint64_t, const CMTime *, double))(*(void *)v11 + 40))(v11, a4, 0.0) <= 1.0;
    double v13 = 1.0;
    if (v12)
    {
      uint64_t v14 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 1) % *((_DWORD *)this + 8)));
      double v13 = (*(double (**)(uint64_t, const CMTime *, double))(*(void *)v14 + 40))(v14, a4, 1.0);
    }
    double v93 = v13;
    uint64_t v15 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 2) % *((_DWORD *)this + 8)));
    double v16 = (*(double (**)(uint64_t, const CMTime *))(*(void *)v15 + 40))(v15, a4);
    __asm { FMOV            V20.2D, #1.0 }
    _Q20.f64[1] = v93;
    if (v16 <= 1.0)
    {
      uint64_t v21 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 2) % *((_DWORD *)this + 8)));
      double v22 = (*(double (**)(uint64_t, const CMTime *))(*(void *)v21 + 40))(v21, a4);
      _Q20.f64[1] = v93;
      _Q20.f64[0] = v22;
    }
    double v23 = a3;
  }
  else
  {
    *(double *)&uint64_t v95 = v7;
    v99 = 0;
    v100 = 0;
    OZSpline::getFirstValidVertex(a2, &v100, a4);
    OZSpline::getLastValidVertex(a2, &v99, a4);
    if (v8 < 0) {
      int v10 = -1;
    }
    else {
      int v10 = v8;
    }
    _Q20.f64[0] = 0.0;
    double v24 = 0.0;
    if ((v8 & 0x80000000) == 0)
    {
      double v24 = 0.0;
      if (v10 < *((_DWORD *)this + 8) - 1)
      {
        uint64_t v25 = (v10 + 1);
        unint64_t v26 = *(void **)(*((void *)this + 1) + 8 * v25);
        double v24 = 1.0;
        if (v26 != v100 && v26 != v99)
        {
          double v28 = (*(double (**)(void *, const CMTime *))(*(void *)v26 + 40))(v26, a4);
          _Q20.f64[0] = 0.0;
          double v24 = 1.0;
          if (v28 <= 1.0)
          {
            uint64_t v29 = *(void *)(*((void *)this + 1) + 8 * v25);
            double v30 = (*(double (**)(uint64_t, const CMTime *))(*(void *)v29 + 40))(v29, a4);
            _Q20.f64[0] = 0.0;
            double v24 = v30;
          }
        }
      }
    }
    uint64_t v31 = (v10 + 2);
    double v23 = a3;
    if ((int)v31 < *((_DWORD *)this + 8) - 1)
    {
      unint64_t v32 = *(void **)(*((void *)this + 1) + 8 * v31);
      _Q20.f64[0] = 1.0;
      if (v32 != v100 && v32 != v99)
      {
        double v94 = v24;
        double v34 = (*(double (**)(void *, const CMTime *))(*(void *)v32 + 40))(v32, a4);
        double v24 = v94;
        double v23 = a3;
        _Q20.f64[0] = 1.0;
        if (v34 <= 1.0)
        {
          uint64_t v35 = *(void *)(*((void *)this + 1) + 8 * v31);
          double v36 = (*(double (**)(uint64_t, const CMTime *))(*(void *)v35 + 40))(v35, a4);
          double v24 = v94;
          double v23 = a3;
          _Q20.f64[0] = v36;
        }
      }
    }
    _Q20.f64[1] = v24;
  }
  int8x16_t v37 = (int8x16_t)vaddq_f64((float64x2_t)vdupq_lane_s64(v95, 0), (float64x2_t)xmmword_1B83799F0);
  float64x2_t v38 = vmaxnmq_f64(_Q20, (float64x2_t)0);
  float64x2_t v39 = vaddq_f64((float64x2_t)v37, v38);
  double v40 = v39.f64[1];
  float64x2_t v41 = vsubq_f64((float64x2_t)v37, v38);
  v42.f64[0] = v39.f64[0];
  v42.f64[1] = v41.f64[1];
  double v43 = *(double *)&v95 - v39.f64[1];
  double v44 = v43 * v43 + v43 * v43;
  float64x2_t v45 = vsubq_f64((float64x2_t)vextq_s8(v37, v37, 8uLL), v42);
  __n128 v48 = (__n128)vmulq_f64(v45, v45);
  float64x2_t v46 = vaddq_f64((float64x2_t)v48, (float64x2_t)v48);
  double v47 = *(double *)&v95 + 3.0 - v41.f64[0];
  v48.n128_f64[0] = v47 * v47 + v47 * v47;
  double v49 = v23 - v39.f64[1];
  if (*((unsigned char *)this + 36))
  {
    __asm { FMOV            V19.2D, #-0.5 }
    float64x2_t v51 = (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(_Q20, _Q19), (int8x16_t)vcltzq_f64(_Q20));
    double v52 = v49 / v43;
    double v53 = 0.0;
    if (v51.f64[1] <= 0.0) {
      double v54 = 0.0;
    }
    else {
      double v54 = v52
    }
          * (v51.f64[1] + v52 * (v51.f64[1] + v51.f64[1] - v52 * v52 * (v51.f64[1] + v51.f64[1] + v51.f64[1] * v52)));
    double v55 = v52
        * (v51.f64[1]
         + v52
         * (v51.f64[1]
          + v51.f64[1]
          + v52
          * (vmuld_lane_f64(-12.0, v51, 1)
           + 10.0
           - v44
           + v52 * (v52 * (vmuld_lane_f64(-5.0, v51, 1) + 6.0 - v44) + vmuld_lane_f64(14.0, v51, 1) + v44 + v44 + -15.0))));
    if (v40 >= v23) {
      double v56 = v55;
    }
    else {
      double v56 = v54;
    }
    double v57 = v51.f64[0] + v51.f64[0];
    __asm { FMOV            V7.2D, #-12.0 }
    float64x2_t v59 = vmulq_f64(v51, _Q7);
    __asm { FMOV            V7.2D, #14.0 }
    float64x2_t v61 = vmulq_f64(v51, _Q7);
    __asm { FMOV            V21.2D, #-5.0 }
    float64x2_t v63 = vdivq_f64(vsubq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0), v42), v45);
    __asm { FMOV            V4.2D, #10.0 }
    float64x2_t v65 = vaddq_f64(v59, _Q4);
    __asm
    {
      FMOV            V20.2D, #-15.0
      FMOV            V16.2D, #6.0
    }
    float64x2_t v68 = vaddq_f64(vmulq_f64(v51, _Q21), _Q16);
    v59.f64[0] = v51.f64[0] + v51.f64[0];
    v59.f64[1] = v51.f64[1] + v51.f64[1];
    float64x2_t v69 = vmulq_f64(v63, vaddq_f64(v51, vmulq_f64(v63, vaddq_f64(v59, vmulq_f64(v63, vaddq_f64(vsubq_f64(v65, v46), vmulq_f64(v63, vaddq_f64(vmulq_f64(v63, vsubq_f64(v68, v46)), vaddq_f64(vaddq_f64(v61, vaddq_f64(v46, v46)), _Q20)))))))));
    if (v41.f64[0] <= v23)
    {
      double v53 = (v23 - v41.f64[0])
          / v47
          * (v51.f64[0]
           + (v23 - v41.f64[0])
           / v47
           * (v57
            + (v23 - v41.f64[0])
            / v47
            * (v65.f64[0]
             - v48.n128_f64[0]
             + (v23 - v41.f64[0])
             / v47
             * ((v23 - v41.f64[0]) / v47 * (v68.f64[0] - v48.n128_f64[0])
              + v61.f64[0]
              + v48.n128_f64[0]
              + v48.n128_f64[0]
              + -15.0))));
    }
    else if (v51.f64[0] > 0.0)
    {
      double v53 = (v23 - v41.f64[0])
          / v47
          * (v51.f64[0]
           + (v23 - v41.f64[0])
           / v47
           * (v57
            - (v23 - v41.f64[0]) / v47 * ((v23 - v41.f64[0]) / v47) * (v57 + v51.f64[0] * ((v23 - v41.f64[0]) / v47))));
    }
  }
  else
  {
    if (v39.f64[1] >= v23 || (double v56 = 0.0, vabdd_f64(v23, v39.f64[1]) < 0.0000001)) {
      double v56 = v49
    }
          / v43
          * (v49
           / v43
           * (v49
            / v43))
          * (v49 / v43 * (v49 / v43 * (6.0 - v44)) + 10.0 - v44 + v49 / v43 * (v44 + v44 + -15.0));
    double v70 = v23 - v39.f64[0];
    if (v39.f64[0] >= v23 || (v69.f64[0] = 0.0, fabs(v70) < 0.0000001)) {
      v69.f64[0] = v70
    }
                 / v45.f64[0]
                 * (v70
                  / v45.f64[0]
                  * (v70
                   / v45.f64[0]))
                 * (v70 / v45.f64[0] * (v70 / v45.f64[0] * (6.0 - v46.f64[0]))
                  + 10.0
                  - v46.f64[0]
                  + v70 / v45.f64[0] * (v46.f64[0] + v46.f64[0] + -15.0));
    double v71 = v23 - v41.f64[1];
    if (v41.f64[1] <= v23 || (double v72 = 0.0, fabs(v71) < 0.0000001)) {
      double v72 = v71
    }
          / v45.f64[1]
          * (v71
           / v45.f64[1]
           * (v71
            / v45.f64[1]))
          * (v71 / v45.f64[1] * (v71 / v45.f64[1] * (6.0 - v46.f64[1]))
           + 10.0
           - v46.f64[1]
           + v71 / v45.f64[1] * (v46.f64[1] + v46.f64[1] + -15.0));
    double v73 = v23 - v41.f64[0];
    v69.f64[1] = v72;
    if (v41.f64[0] <= v23 || (double v53 = 0.0, fabs(v73) < 0.0000001)) {
      double v53 = v73
    }
          / v47
          * (v73
           / v47
           * (v73
            / v47))
          * (v73 / v47 * (v73 / v47 * (6.0 - v48.n128_f64[0]))
           + 10.0
           - v48.n128_f64[0]
           + v73 / v47 * (v48.n128_f64[0] + v48.n128_f64[0] + -15.0));
  }
  double v74 = v69.f64[1];
  double v75 = fabs(v56);
  float64_t v98 = v69.f64[0];
  if (*((unsigned char *)a2 + 144))
  {
    if (v10 < 0)
    {
      if (v75 < 0.0000001) {
        goto LABEL_61;
      }
      uint64_t v76 = *((int *)this + 8) - 1;
    }
    else
    {
      if (v75 < 0.0000001) {
        goto LABEL_61;
      }
      uint64_t v76 = (v10 % *((_DWORD *)this + 8));
    }
    uint64_t v78 = *(void *)(*((void *)this + 1) + 8 * v76);
    (*(double (**)(uint64_t, const CMTime *))(*(void *)v78 + 24))(v78, a4);
    v69.f64[0] = v98;
LABEL_61:
    if (fabs(v69.f64[0]) >= 0.0000001)
    {
      uint64_t v79 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 1) % *((_DWORD *)this + 8)));
      (*(double (**)(uint64_t, const CMTime *))(*(void *)v79 + 24))(v79, a4);
    }
    if (fabs(v74) >= 0.0000001)
    {
      uint64_t v80 = *(void *)(*((void *)this + 1) + 8 * ((v10 + 2) % *((_DWORD *)this + 8)));
      (*(double (**)(uint64_t, const CMTime *))(*(void *)v80 + 24))(v80, a4);
    }
    v48.n128_u64[0] = 0;
    if (fabs(v53) >= 0.0000001)
    {
      int v81 = (v10 + 3) % *((_DWORD *)this + 8);
      goto LABEL_87;
    }
    return;
  }
  if (v10 < 0)
  {
    if (v75 < 0.0000001) {
      goto LABEL_70;
    }
    double v77 = (void *)*((void *)this + 1);
  }
  else
  {
    if (v75 < 0.0000001) {
      goto LABEL_70;
    }
    double v77 = (void *)(*((void *)this + 1) + 8 * v10);
  }
  (*(double (**)(void, const CMTime *))(*(void *)*v77 + 24))(*v77, a4);
  v69.f64[0] = v98;
LABEL_70:
  int v82 = v10 + 1;
  int v83 = *((_DWORD *)this + 8);
  double v84 = fabs(v69.f64[0]);
  if (v10 + 1 >= v83)
  {
    if (v84 < 0.0000001) {
      goto LABEL_76;
    }
    int v82 = v83 - 1;
    goto LABEL_75;
  }
  if (v84 >= 0.0000001)
  {
LABEL_75:
    uint64_t v85 = *(void *)(*((void *)this + 1) + 8 * v82);
    (*(double (**)(uint64_t, const CMTime *))(*(void *)v85 + 24))(v85, a4);
  }
LABEL_76:
  int v86 = v10 + 2;
  int v87 = *((_DWORD *)this + 8);
  double v88 = fabs(v74);
  if (v10 + 2 >= v87)
  {
    if (v88 < 0.0000001) {
      goto LABEL_82;
    }
    int v86 = v87 - 1;
    goto LABEL_81;
  }
  if (v88 >= 0.0000001)
  {
LABEL_81:
    uint64_t v89 = *(void *)(*((void *)this + 1) + 8 * v86);
    (*(double (**)(uint64_t, const CMTime *))(*(void *)v89 + 24))(v89, a4);
  }
LABEL_82:
  int v81 = v10 + 3;
  int v90 = *((_DWORD *)this + 8);
  double v91 = fabs(v53);
  v48.n128_u64[0] = 0;
  if (v10 + 3 >= v90)
  {
    if (v91 < 0.0000001) {
      return;
    }
    int v81 = v90 - 1;
    goto LABEL_87;
  }
  if (v91 >= 0.0000001)
  {
LABEL_87:
    uint64_t v92 = *(void *)(*((void *)this + 1) + 8 * v81);
    (*(double (**)(uint64_t, const CMTime *, __n128))(*(void *)v92 + 24))(v92, a4, v48);
  }
}

uint64_t OZXSplineInterpolator::needInit()
{
  return 1;
}

uint64_t OZXSplineInterpolator::subDivide(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char **a4, unsigned char **a5, unsigned char **a6)
{
  CMTime v17 = *(CMTime *)(a4 + 2);
  double v9 = (*((double (**)(unsigned char **, uint64_t))*a4 + 3))(a4, a3);
  CMTime v16 = *(CMTime *)(a5 + 2);
  double v10 = (*((double (**)(unsigned char **, uint64_t))*a5 + 3))(a5, a3);
  CMTime v19 = *(CMTime *)(a6 + 2);
  CMTime v18 = v17;
  PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v19 = v16;
  CMTime v18 = v17;
  PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v14);
  Float64 v12 = CMTimeGetSeconds(&v14);
  return (*((uint64_t (**)(unsigned char **, void, double))*a6 + 4))(a6, MEMORY[0x1E4F1FA48], v9 + Seconds * ((v10 - v9) / v12));
}

void sub_1B79A0274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C401ABBD6EFLL);
  _Unwind_Resume(a1);
}

void sub_1B79A0680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void OZConstantNode::OZConstantNode(OZConstantNode *this, double a2)
{
  OZCurveNode::OZCurveNode(this);
  *(void *)uint64_t v3 = &unk_1F11051F0;
  *(double *)(v3 + OZSpline::reparametrize((uint64_t)this + 8) = a2;
  *(double *)(v3 + 16) = a2;
}

void OZConstantNode::OZConstantNode(OZConstantNode *this, const OZConstantNode *a2)
{
  OZCurveNode::OZCurveNode(this);
  *(void *)uint64_t v3 = &unk_1F11051F0;
  *(_OWORD *)(v3 + OZSpline::reparametrize((uint64_t)this + 8) = *(_OWORD *)((char *)a2 + 8);
}

void OZConstantNode::~OZConstantNode(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZConstantNode::getMaxValue(OZConstantNode *this)
{
  return *((double *)this + 1);
}

double OZConstantNode::getMinValue(OZConstantNode *this)
{
  return *((double *)this + 1);
}

double OZConstantNode::solveNode(OZConstantNode *this, const CMTime *a2, double a3, double a4)
{
  return *((double *)this + 1);
}

double OZConstantNode::solveNode(OZConstantNode *this, OZCurveNodeParam *a2)
{
  int v2 = *((_DWORD *)a2 + 36);
  if (v2)
  {
    uint64_t v3 = (double *)*((void *)a2 + 19);
    do
    {
      double result = *((double *)this + 1);
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

BOOL OZConstantNode::getUForValue(uint64_t a1, void **a2, long long *a3, double a4)
{
  double v4 = vabdd_f64(*(double *)(a1 + 8), a4);
  if (v4 < 0.0000001)
  {
    long long v22 = *a3;
    uint64_t v23 = *((void *)a3 + 2);
    uint64_t v6 = (uint64_t)(a2 + 2);
    double v7 = (char *)a2[2];
    int v8 = (char *)a2[1];
    if (v8 >= v7)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a2) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a2) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      CMTime v16 = &v15[24 * v11];
      CMTime v17 = &v15[24 * v14];
      *(_OWORD *)CMTime v16 = v22;
      *((void *)v16 + 2) = v23;
      uint64_t v10 = v16 + 24;
      CMTime v19 = (char *)*a2;
      CMTime v18 = (char *)a2[1];
      if (v18 != *a2)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *((void *)v16 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v18 - 1);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        CMTime v18 = (char *)*a2;
      }
      *a2 = v16;
      a2[1] = v10;
      a2[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      long long v9 = *a3;
      *((void *)v8 + 2) = *((void *)a3 + 2);
      *(_OWORD *)int v8 = v9;
      uint64_t v10 = v8 + 24;
    }
    a2[1] = v10;
  }
  return v4 < 0.0000001;
}

void OZConstantNode::cloneNode(OZConstantNode *this)
{
}

void sub_1B79A0984(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40468F112ELL);
  _Unwind_Resume(a1);
}

double *OZConstantNode::compare(OZConstantNode *this, const OZCurveNode *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result) {
    return (double *)(*((double *)this + 1) == result[1] && *((double *)this + 2) == result[2]);
  }
  return result;
}

__n128 OZConstantNode::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = result;
  return result;
}

uint64_t OZConstantNode::operator==(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

__n128 OZConstantNode::getNeededRange(OZConstantNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 1OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((void *)a2 + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *((void *)a2 + 19);
  return result;
}

uint64_t OZConstantNode::setValue(uint64_t this, const CMTime *a2, double a3)
{
  *(double *)(this + OZSpline::reparametrize((uint64_t)this + 8) = a3;
  return this;
}

uint64_t OZConstantNode::setDefaultValue(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

double OZConstantNode::getDefaultValue(OZConstantNode *this)
{
  return *((double *)this + 2);
}

double OZConstantNode::getInitialValue(OZConstantNode *this)
{
  return *((double *)this + 1);
}

double OZConstantNode::reset(OZConstantNode *this)
{
  double result = *((double *)this + 2);
  *((double *)this + atomic_store(0, (unint64_t *)this + 1) = result;
  return result;
}

void sub_1B79A0BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C4072D3B705);
  _Unwind_Resume(a1);
}

void OZCurveNode::OZCurveNode(OZCurveNode *this)
{
  *(void *)this = &unk_1F11052E8;
}

double OZCurveNode::getMaxValue(OZCurveNode *this)
{
  return 0.0;
}

double OZCurveNode::getMinValue(OZCurveNode *this)
{
  return 0.0;
}

uint64_t OZCurveNode::getTimeAndDistanceAlongCurve(OZCurveNode *this, const CMTime *a2, CMTime *a3, double *a4)
{
  return 0;
}

uint64_t OZCurveNode::getTimeAndDistanceAlongCurve(OZCurveNode *this, const CMTime *a2, unsigned int a3, CMTime *a4, double *a5)
{
  return 0;
}

uint64_t OZCurveNode::getParametricValueAndDoubleValueForTime(OZCurveNode *this, const CMTime *a2, CMTime *a3, double *a4)
{
  return 0;
}

double OZCurveNode::solveNode(OZCurveNode *this, const CMTime *a2, double a3, double a4)
{
  return a4;
}

uint64_t OZRecordingNode::OZRecordingNode(uint64_t a1, uint64_t a2)
{
  OZCurveNode::OZCurveNode((OZCurveNode *)a1);
  *(void *)(v4 + 12OZSpline::reparametrize((uint64_t)this + 8) = v4 + 120;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 12OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = v4 + 120;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_1F11053D8;
  *(void *)(v4 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  long long v6 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v4 + 56) = *MEMORY[0x1E4F1FA48];
  uint64_t v7 = *(void *)(v5 + 16);
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 4OZSpline::reparametrize((uint64_t)this + 8) = v7;
  *(void *)(v4 + 72) = v7;
  *(void *)(v4 + 8OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0;
  CMTimeMake(&v9, 1, 1);
  *(CMTime *)(a1 + 8OZSpline::reparametrize((uint64_t)this + 8) = v9;
  return a1;
}

void sub_1B79A10BC(_Unwind_Exception *a1)
{
  PCSpinLock::~PCSpinLock(v3);
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelBase::setRangeName(v1, v5);
  _Unwind_Resume(a1);
}

__n128 OZRecordingNode::OZRecordingNode(OZCurveNode *a1, uint64_t a2)
{
  OZCurveNode::OZCurveNode(a1);
  *(void *)uint64_t v3 = &unk_1F11053D8;
  *(void *)(v3 + 12OZSpline::reparametrize((uint64_t)this + 8) = v3 + 120;
  *(void *)(v3 + 136) = 0;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 112) = *(void *)(a2 + 112);
  *(void *)(v3 + 12OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = v3 + 120;
  *(void *)(v3 + OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(v3 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(v3 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(v3 + 4OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(_OWORD *)(v3 + 32) = v5;
  *(void *)(v3 + 8OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *(void *)(a2 + 80);
  __n128 result = *(__n128 *)(a2 + 88);
  *(void *)(v3 + 104) = *(void *)(a2 + 104);
  *(__n128 *)(v3 + 8OZSpline::reparametrize((uint64_t)this + 8) = result;
  return result;
}

void OZRecordingNode::~OZRecordingNode(PCSpinLock *this)
{
  *(void *)&this->_lock._os_unfair_lock_opaque = &unk_1F11053D8;
  int v2 = this + 30;
  PCSpinLock::~PCSpinLock(this + 36);
  std::__list_imp<unsigned int>::clear(v2);

  OZChannelBase::setRangeName((OZChannelBase *)this, v3);
}

{
  uint64_t vars8;

  OZRecordingNode::~OZRecordingNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZRecordingNode::cloneNode(OZRecordingNode *this)
{
}

void sub_1B79A1270(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C406D9F4237);
  _Unwind_Resume(a1);
}

char *OZRecordingNode::compare(OZRecordingNode *this, const OZCurveNode *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (!result) {
    return result;
  }
  long long v4 = result;
  if (*((_DWORD *)this + 2) != *((_DWORD *)result + 2)
    || *((_DWORD *)this + 3) != *((_DWORD *)result + 3)
    || *((void *)this + 17) != *((void *)result + 17))
  {
    return 0;
  }
  uint64_t v5 = *((void *)this + 16);
  if ((OZRecordingNode *)v5 == (OZRecordingNode *)((char *)this + 120))
  {
LABEL_11:
    CMTime time1 = *(CMTime *)((char *)this + 56);
    CMTime v10 = *(CMTime *)(v4 + 56);
    if (!CMTimeCompare(&time1, &v10))
    {
      CMTime time1 = *(CMTime *)((char *)this + 32);
      CMTime v10 = *(CMTime *)(v4 + 32);
      if (!CMTimeCompare(&time1, &v10)
        && vabdd_f64(*((double *)this + 10), *((double *)v4 + 10)) < 0.0000001
        && vabdd_f64(*((double *)this + 3), *((double *)v4 + 3)) < 0.0000001)
      {
        CMTime time1 = *(CMTime *)((char *)this + 88);
        CMTime v10 = *(CMTime *)(v4 + 88);
        return (char *)(CMTimeCompare(&time1, &v10) == 0);
      }
    }
    return 0;
  }
  long long v6 = result + 120;
  while (1)
  {
    long long v6 = (char *)*((void *)v6 + 1);
    long long v7 = *(_OWORD *)(v5 + 16);
    time1.CMTimeEpoch epoch = *(void *)(v5 + 32);
    *(_OWORD *)&time1.CMTimeValue value = v7;
    long long v8 = *((_OWORD *)v6 + 1);
    v10.CMTimeEpoch epoch = *((void *)v6 + 4);
    *(_OWORD *)&v10.CMTimeValue value = v8;
    int32_t v9 = CMTimeCompare(&time1, &v10);
    __n128 result = 0;
    if (v9 || *(double *)(v5 + 40) != *((double *)v6 + 5)) {
      return result;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if ((OZRecordingNode *)v5 == (OZRecordingNode *)((char *)this + 120)) {
      goto LABEL_11;
    }
  }
}

void OZRecordingNode::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = (os_unfair_lock_s *)(a2 + 144);
  PCSpinLock::lock((os_unfair_lock_t)(a2 + 144));
  *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(a2 + 8);
  if (a1 != a2) {
    std::list<std::pair<CMTime,double>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<CMTime,double>,void *>,std::__list_const_iterator<std::pair<CMTime,double>,void *>>((uint64_t *)(a1 + 120), *(void *)(a2 + 128), a2 + 120);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 8OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 8OZSpline::reparametrize((uint64_t)this + 8) = v7;

  PCSpinLock::unlock(v4);
}

__n128 OZRecordingNode::getNeededRange(OZRecordingNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 1OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((void *)a2 + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *((void *)a2 + 19);
  return result;
}

void OZRecordingNode::beginPlayback(OZRecordingNode *this, const CMTime *a2, int a3, int a4, const CMTime *a5)
{
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((unsigned char *)this + 16) = 1;
  long long v9 = *(_OWORD *)&a2->value;
  *((void *)this + 9) = a2->epoch;
  *(_OWORD *)((char *)this + 56) = v9;
  uint64_t v10 = PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
  double v11 = (*(double (**)(uint64_t, const CMTime *, void, void))(*(void *)v10 + 240))(v10, a2, MEMORY[0x1E4F1FA48], 0);
  *((double *)this + 1OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = v11;
  *((double *)this + 3) = v11;
  long long v12 = *(_OWORD *)&a5->value;
  *((void *)this + 13) = a5->epoch;
  *(_OWORD *)((char *)this + 8OZSpline::reparametrize((uint64_t)this + 8) = v12;
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  std::__list_imp<unsigned int>::clear((void *)this + 15);
  PCSpinLock::unlock((os_unfair_lock_t)this + 36);
  if (a3 == 3)
  {
    v13.n128_u64[0] = *((void *)this + 10);
    unint64_t v14 = *(void (**)(OZRecordingNode *, const CMTime *, void, __n128))(*(void *)this + 64);
    v14(this, a2, 0, v13);
  }
}

void OZRecordingNode::endPlayback(OZRecordingNode *this, const CMTime *a2)
{
  *((unsigned char *)this + 16) = 0;
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 2)
  {
    (*(void (**)(OZRecordingNode *, const CMTime *, void, double))(*(void *)this + 64))(this, a2, 0, *((double *)this + 3));
    PCSpinLock::lock((os_unfair_lock_t)this + 36);
    OZRecordingNode::commitChanges(this);
    PCSpinLock::unlock((os_unfair_lock_t)this + 36);
  }
}

void *OZRecordingNode::commitChanges(void *this)
{
  if (this[17])
  {
    uint64_t v1 = this;
    int v2 = this + 15;
    if (!*((_DWORD *)this + 3))
    {
      int v3 = *((_DWORD *)this + 2);
      long long v4 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)this[14]);
      if (v3)
      {
        uint64_t v5 = MEMORY[0x1E4F1FA48];
        (*(void (**)(OZSpline *, uint64_t, void, uint64_t, double))(*(void *)v4 + 192))(v4, v1[15] + 16, MEMORY[0x1E4F1FA48], 1, *(double *)(v1[15] + 40));
        long long v6 = (uint64_t *)v1[15];
        uint64_t v7 = *v6;
        *(void *)(v7 + OZSpline::reparametrize((uint64_t)this + 8) = v6[1];
        *(void *)v6[1] = v7;
        --v1[17];
        operator delete(v6);
        uint64_t v8 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v1[14]);
        long long v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v8 + 192))(v8, v1[16] + 16, v5, 1, *(double *)(v1[16] + 40));
        uint64_t v10 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v1[14]);
        OZSpline::setVertexInterpolation(v10, v9, 1);
        double v11 = (uint64_t *)v1[16];
        uint64_t v12 = v1[17];
        uint64_t v13 = *v11;
        *(void *)(v13 + OZSpline::reparametrize((uint64_t)this + 8) = v11[1];
        *(void *)v11[1] = v13;
        v1[17] = v12 - 1;
        operator delete(v11);
        unint64_t v14 = (OZSpline *)PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v1[14]);
        OZSpline::deleteVertices(v14, (const CMTime *)(v1[16] + 16), (const CMTime *)(v1[15] + 16));
        uint64_t v15 = v1[16];
        if ((void *)v15 != v2)
        {
          uint64_t v16 = MEMORY[0x1E4F1FA48];
          do
          {
            uint64_t v17 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v1[14]);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v17 + 192))(v17, v15 + 16, v16, 1, *(double *)(v15 + 40));
            uint64_t v15 = *(void *)(v15 + 8);
          }
          while ((void *)v15 != v2);
        }
      }
      else
      {
        OZSpline::deleteVertices(v4, (const CMTime *)(v1[16] + 16), (const CMTime *)(v1[15] + 16));
        uint64_t v18 = v1[16];
        if ((void *)v18 != v2)
        {
          uint64_t v19 = MEMORY[0x1E4F1FA48];
          do
          {
            uint64_t v20 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v1[14]);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v20 + 192))(v20, v18 + 16, v19, 1, *(double *)(v18 + 40));
            uint64_t v18 = *(void *)(v18 + 8);
          }
          while ((void *)v18 != v2);
        }
      }
    }
    return std::__list_imp<unsigned int>::clear(v2);
  }
  return this;
}

uint64_t OZRecordingNode::beginRecording(OZRecordingNode *this, const CMTime *a2)
{
  uint64_t result = (*(uint64_t (**)(void, double, double))(**((void **)this + 14) + 16))(*((void *)this + 14), 0.0, 0.0);
  int v6 = *((_DWORD *)this + 2);
  if ((v6 - 1) >= 2)
  {
    if (v6 != 3) {
      return result;
    }
    v5.n128_u64[0] = *((void *)this + 10);
  }
  uint64_t v7 = *(uint64_t (**)(OZRecordingNode *, const CMTime *, void, __n128))(*(void *)this + 64);

  return v7(this, a2, 0, v5);
}

void OZRecordingNode::endRecording(OZRecordingNode *this, const CMTime *a2)
{
  if (*((_DWORD *)this + 2) == 1) {
    (*(void (**)(OZRecordingNode *, const CMTime *, void, double))(*(void *)this + 64))(this, a2, 0, *((double *)this + 3));
  }
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) != 2) {
    OZRecordingNode::commitChanges(this);
  }

  PCSpinLock::unlock((os_unfair_lock_t)this + 36);
}

void OZRecordingNode::updateCurrentTime(OZRecordingNode *this, const CMTime *a2)
{
  long long v4 = (os_unfair_lock_s *)((char *)this + 144);
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  CMTime v22 = *(CMTime *)((char *)this + 88);
  if (*((void *)this + 17) && *((_DWORD *)this + 2))
  {
    __n128 v5 = (char *)this + 120;
    uint64_t v6 = **((void **)this + 15);
    CMTime time1 = *a2;
    long long v7 = *(_OWORD *)(v6 + 16);
    time2.CMTimeEpoch epoch = *(void *)(v6 + 32);
    *(_OWORD *)&time2.CMTimeValue value = v7;
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      CMTime time1 = *a2;
      long long v18 = *(_OWORD *)(v6 + 16);
      time2.CMTimeEpoch epoch = *(void *)(v6 + 32);
      *(_OWORD *)&time2.CMTimeValue value = v18;
      if (!CMTimeCompare(&time1, &time2)) {
        *(void *)(v6 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = *((void *)this + 3);
      }
    }
    else
    {
      uint64_t v8 = (uint64_t *)*((void *)this + 15);
      uint64_t v9 = *v8;
      *(void *)(v9 + OZSpline::reparametrize((uint64_t)this + 8) = v8[1];
      *(void *)v8[1] = v9;
      --*((void *)this + 17);
      operator delete(v8);
      uint64_t v10 = *((void *)this + 3);
      double v11 = operator new(0x30uLL);
      v11[1] = *(_OWORD *)&a2->value;
      *((void *)v11 + 4) = a2->epoch;
      *((void *)v11 + 5) = v10;
      uint64_t v12 = *((void *)this + 15);
      *(void *)double v11 = v12;
      *((void *)v11 + atomic_store(0, (unint64_t *)this + 1) = v5;
      *(void *)(v12 + OZSpline::reparametrize((uint64_t)this + 8) = v11;
      *((void *)this + 15) = v11;
      ++*((void *)this + 17);
      CMTime time1 = *a2;
      CMTime time2 = v22;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
      uint64_t v13 = PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
      CMTime time1 = *a2;
      CMTime time2 = v22;
      double v14 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v19);
      double v15 = (*(double (**)(uint64_t, unsigned char *, void, void, double))(*(void *)v13 + 240))(v13, v19, MEMORY[0x1E4F1FA48], 0, v14);
      uint64_t v16 = operator new(0x30uLL);
      v16[1] = v20;
      *((void *)v16 + 4) = v21;
      *((double *)v16 + 5) = v15;
      uint64_t v17 = *((void *)this + 15);
      *(void *)uint64_t v16 = v17;
      *((void *)v16 + atomic_store(0, (unint64_t *)this + 1) = v5;
      *(void *)(v17 + OZSpline::reparametrize((uint64_t)this + 8) = v16;
      *((void *)this + 15) = v16;
      ++*((void *)this + 17);
    }
  }
  PCSpinLock::unlock(v4);
}

double OZRecordingNode::getMaxValue(OZRecordingNode *this, char a2)
{
  long long v4 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
  if (a2) {
    double MaxValueVWithTangents = OZSpline::getMaxValueVWithTangents(v4, MEMORY[0x1E4F1FA48], 0);
  }
  else {
    double MaxValueVWithTangents = OZSpline::getMaxValueV(v4, MEMORY[0x1E4F1FA48], 0);
  }
  double v6 = MaxValueVWithTangents;
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  for (uint64_t i = *((void *)this + 16); (OZRecordingNode *)i != (OZRecordingNode *)((char *)this + 120); uint64_t i = *(void *)(i + 8))
  {
    if (*(double *)(i + 40) > v6) {
      double v6 = *(double *)(i + 40);
    }
  }
  PCSpinLock::unlock((os_unfair_lock_t)this + 36);
  return v6;
}

double OZRecordingNode::getMinValue(OZRecordingNode *this, char a2)
{
  long long v4 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
  if (a2) {
    double MinValueVWithTangents = OZSpline::getMinValueVWithTangents(v4, MEMORY[0x1E4F1FA48], 0);
  }
  else {
    double MinValueVWithTangents = OZSpline::getMinValueV(v4, MEMORY[0x1E4F1FA48], 0);
  }
  double v6 = MinValueVWithTangents;
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  for (uint64_t i = *((void *)this + 16); (OZRecordingNode *)i != (OZRecordingNode *)((char *)this + 120); uint64_t i = *(void *)(i + 8))
  {
    if (*(double *)(i + 40) < v6) {
      double v6 = *(double *)(i + 40);
    }
  }
  PCSpinLock::unlock((os_unfair_lock_t)this + 36);
  return v6;
}

double OZRecordingNode::solveNode(OZRecordingNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v8 = (os_unfair_lock_s *)((char *)this + 144);
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  if (!*((void *)this + 17)) {
    goto LABEL_5;
  }
  uint64_t v9 = (char *)this + 120;
  uint64_t v10 = *((void *)this + 16) + 16;
  if (!*((_DWORD *)this + 2))
  {
    *(void *)&v43[16] = a2->epoch;
    *(_OWORD *)double v43 = *(_OWORD *)&a2->value;
    long long v14 = *(_OWORD *)v10;
    time1.CMTimeEpoch epoch = *(void *)(v10 + 16);
    *(_OWORD *)&time1.CMTimeValue value = v14;
    if (CMTimeCompare((CMTime *)v43, &time1) < 0)
    {
      double v53 = 0;
      unint64_t v26 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
      if (!OZSpline::getPreviousValidVertexWithLock(v26, (const CMTime *)(*((void *)this + 16) + 16), &v53, MEMORY[0x1E4F1FA48], 0))goto LABEL_5; {
      unint64_t v27 = (unsigned char **)v53;
      }
      if (!v53) {
        goto LABEL_5;
      }
      CMTime time2 = *(CMTime *)((char *)v53 + 16);
      *(CMTime *)double v43 = time2;
      CMTime time1 = *a2;
      if ((CMTimeCompare((CMTime *)v43, &time1) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      uint64_t v28 = *((void *)this + 16);
      CMTime time2 = *(CMTime *)(v28 + 16);
      double v29 = *(double *)(v28 + 40);
      CMTime v49 = *(CMTime *)(v27 + 2);
      *(_OWORD *)double v43 = *(_OWORD *)&a2->value;
      *(void *)&v43[16] = a2->epoch;
      CMTime time1 = v49;
      double v30 = PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v50);
      uint64_t v31 = MEMORY[0x1E4F1FA48];
      double v32 = (*((double (**)(unsigned char **, void, double))*v27 + 3))(v27, MEMORY[0x1E4F1FA48], v30);
      operator*(&v50, &v51, v29 - v32);
      CMTime v46 = *(CMTime *)(v27 + 2);
      *(CMTime *)double v43 = time2;
      CMTime time1 = v46;
      PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v47);
      operator/((long long *)&v51.value, (uint64_t)&v47, (uint64_t)&v52);
      double Seconds = CMTimeGetSeconds(&v52);
      double v23 = (*((double (**)(unsigned char **, uint64_t))*v27 + 3))(v27, v31);
    }
    else
    {
      uint64_t v15 = *(void *)v9;
      *(void *)&v43[16] = a2->epoch;
      *(_OWORD *)double v43 = *(_OWORD *)&a2->value;
      long long v16 = *(_OWORD *)(v15 + 16);
      time1.CMTimeEpoch epoch = *(void *)(v15 + 32);
      *(_OWORD *)&time1.CMTimeValue value = v16;
      if (CMTimeCompare((CMTime *)v43, &time1) < 1)
      {
        uint64_t v33 = *((void *)this + 16);
        if ((char *)v33 != v9)
        {
          uint64_t v34 = *((void *)this + 16);
          do
          {
            uint64_t v35 = v34;
            uint64_t v34 = v33;
            *(_OWORD *)double v43 = *(_OWORD *)(v33 + 16);
            *(void *)&v43[16] = *(void *)(v33 + 32);
            CMTime time1 = *a2;
            if (CMTimeCompare((CMTime *)v43, &time1))
            {
              *(_OWORD *)double v43 = *(_OWORD *)(v34 + 16);
              *(void *)&v43[16] = *(void *)(v34 + 32);
              CMTime time1 = *a2;
              if (CMTimeCompare((CMTime *)v43, &time1) >= 1)
              {
                *(void *)&v43[16] = a2->epoch;
                *(_OWORD *)double v43 = *(_OWORD *)&a2->value;
                long long v36 = *(_OWORD *)(v35 + 16);
                time1.CMTimeEpoch epoch = *(void *)(v35 + 32);
                *(_OWORD *)&time1.CMTimeValue value = v36;
                PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v51);
                operator*(&v51, &time2, *(double *)(v34 + 40) - *(double *)(v35 + 40));
                long long v37 = *(_OWORD *)(v34 + 16);
                *(void *)&v43[16] = *(void *)(v34 + 32);
                *(_OWORD *)double v43 = v37;
                long long v38 = *(_OWORD *)(v35 + 16);
                time1.CMTimeEpoch epoch = *(void *)(v35 + 32);
                *(_OWORD *)&time1.CMTimeValue value = v38;
                PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v50);
                operator/((long long *)&time2.value, (uint64_t)&v50, (uint64_t)&v44);
                a4 = CMTimeGetSeconds(&v44) + *(double *)(v35 + 40);
              }
            }
            else
            {
              a4 = *(double *)(v34 + 40);
            }
            uint64_t v33 = *(void *)(v34 + 8);
          }
          while ((char *)v33 != v9);
        }
        goto LABEL_6;
      }
      v46.CMTimeValue value = 0;
      uint64_t v17 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
      if (!OZSpline::getNextValidVertexWithLock(v17, (const CMTime *)(*((void *)this + 15) + 16), (void **)&v46, MEMORY[0x1E4F1FA48], 0))goto LABEL_5; {
      CMTimeValue value = v46.value;
      }
      if (!v46.value) {
        goto LABEL_5;
      }
      CMTime time2 = *(CMTime *)(v46.value + 16);
      *(CMTime *)double v43 = time2;
      CMTime time1 = *a2;
      if (CMTimeCompare((CMTime *)v43, &time1) < 1) {
        goto LABEL_5;
      }
      uint64_t v19 = *(void *)v9;
      CMTime time2 = *(CMTime *)(*(void *)v9 + 16);
      double Seconds = *(double *)(v19 + 40);
      *(_OWORD *)double v43 = *(_OWORD *)&a2->value;
      *(void *)&v43[16] = a2->epoch;
      CMTime time1 = time2;
      double v21 = PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v50);
      double v22 = (*(double (**)(CMTimeValue, void, double))(*(void *)value + 24))(value, MEMORY[0x1E4F1FA48], v21);
      operator*(&v50, &v51, v22 - Seconds);
      uint64_t v48 = *(void *)(value + 32);
      long long v47 = *(_OWORD *)(value + 16);
      *(_OWORD *)double v43 = v47;
      *(void *)&v43[16] = v48;
      CMTime time1 = time2;
      PC_CMTimeSaferSubtract((CMTime *)v43, &time1, (uint64_t)&v49);
      operator/((long long *)&v51.value, (uint64_t)&v49, (uint64_t)&time);
      double v23 = CMTimeGetSeconds(&time);
    }
    a4 = Seconds + v23;
    goto LABEL_6;
  }
  long long v11 = *(_OWORD *)(*(void *)v9 + 32);
  *(_OWORD *)double v43 = *(_OWORD *)(*(void *)v9 + 16);
  *(_OWORD *)&v43[16] = v11;
  CMTime time1 = *a2;
  long long v12 = *(_OWORD *)v10;
  time2.CMTimeEpoch epoch = *(void *)(v10 + 16);
  *(_OWORD *)&time2.CMTimeValue value = v12;
  if (CMTimeCompare(&time1, &time2) < 0 || (time1 = *a2, CMTime time2 = *(CMTime *)v43, CMTimeCompare(&time1, &time2) >= 1))
  {
LABEL_5:
    a4 = (*(double (**)(void, const CMTime *, double, double))(**((void **)this + 14) + 16))(*((void *)this + 14), a2, a3, a4);
    goto LABEL_6;
  }
  uint64_t v24 = *((void *)this + 16);
  if ((char *)v24 != v9)
  {
    uint64_t v25 = v24;
    while (1)
    {
      CMTime time1 = *(CMTime *)(v25 + 16);
      CMTime time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        a4 = *(double *)(v25 + 40);
        goto LABEL_6;
      }
      CMTime time1 = *(CMTime *)(v25 + 16);
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) >= 1) {
        break;
      }
      uint64_t v24 = v25;
      uint64_t v25 = *(void *)(v25 + 8);
      if ((char *)v25 == v9) {
        goto LABEL_6;
      }
    }
    CMTime time1 = *a2;
    long long v39 = *(_OWORD *)(v24 + 16);
    time2.CMTimeEpoch epoch = *(void *)(v24 + 32);
    *(_OWORD *)&time2.CMTimeValue value = v39;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v50);
    operator*(&v50, &v51, *(double *)(v25 + 40) - *(double *)(v24 + 40));
    long long v40 = *(_OWORD *)(v25 + 16);
    time1.CMTimeEpoch epoch = *(void *)(v25 + 32);
    *(_OWORD *)&time1.CMTimeValue value = v40;
    long long v41 = *(_OWORD *)(v24 + 16);
    time2.CMTimeEpoch epoch = *(void *)(v24 + 32);
    *(_OWORD *)&time2.CMTimeValue value = v41;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v49);
    operator/((long long *)&v51.value, (uint64_t)&v49, (uint64_t)&v42);
    a4 = CMTimeGetSeconds(&v42) + *(double *)(v24 + 40);
  }
LABEL_6:
  PCSpinLock::unlock(v8);
  return a4;
}

__n128 OZRecordingNode::solveNode(OZRecordingNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  CMTime v8 = *(CMTime *)((unsigned char *)a2 + 5);
  __n128 result = *((__n128 *)a2 + 6);
  *(__n128 *)&v7.CMTimeValue value = result;
  v7.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    uint64_t v6 = 0;
    do
    {
      *(double *)(v2 + 8 * v6) = (*(double (**)(OZRecordingNode *, CMTime *, double, double))(*(void *)this + 16))(this, &v7, 0.0, *(double *)(v2 + 8 * v6));
      CMTime v10 = v7;
      CMTime v9 = v8;
      PC_CMTimeSaferAdd(&v10, &v9, (uint64_t)&v11);
      __n128 result = *(__n128 *)&v11.value;
      CMTime v7 = v11;
      ++v6;
    }
    while (v6 < *((_DWORD *)a2 + 36));
  }
  return result;
}

void OZRecordingNode::setValue(OZRecordingNode *this, const CMTime *a2, double a3)
{
  CMTime v39 = *(CMTime *)((char *)this + 88);
  uint64_t v6 = (os_unfair_lock_s *)((char *)this + 144);
  PCSpinLock::lock((os_unfair_lock_t)this + 36);
  CMTime v7 = (double **)((char *)this + 120);
  uint64_t v8 = *((void *)this + 17);
  if (!*((_DWORD *)this + 2))
  {
    if (v8)
    {
      long long v18 = *v7;
      CMTime time1 = *a2;
      long long v19 = *((_OWORD *)v18 + 1);
      time2.CMTimeEpoch epoch = (CMTimeEpoch)v18[4];
      *(_OWORD *)&time2.CMTimeValue value = v19;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        uint64_t v34 = *v7;
        CMTime time1 = *a2;
        long long v35 = *((_OWORD *)v34 + 1);
        time2.CMTimeEpoch epoch = (CMTimeEpoch)v34[4];
        *(_OWORD *)&time2.CMTimeValue value = v35;
        if (CMTimeCompare(&time1, &time2)) {
          goto LABEL_12;
        }
        (*v7)[5] = a3;
        goto LABEL_11;
      }
    }
    long long v20 = operator new(0x30uLL);
    v20[1] = *(_OWORD *)&a2->value;
    *((void *)v20 + 4) = a2->epoch;
    *((double *)v20 + 5) = a3;
    goto LABEL_10;
  }
  if (!v8)
  {
    CMTime time1 = *a2;
    CMTime time2 = v39;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v37);
    uint64_t v21 = PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
    CMTime time1 = *a2;
    CMTime time2 = v39;
    double v22 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v36);
    uint64_t v23 = MEMORY[0x1E4F1FA48];
    double v24 = (*(double (**)(uint64_t, unsigned char *, void, void, double))(*(void *)v21 + 240))(v21, v36, MEMORY[0x1E4F1FA48], 0, v22);
    uint64_t v25 = operator new(0x30uLL);
    v25[1] = v37;
    *((void *)v25 + 4) = v38;
    *((double *)v25 + 5) = v24;
    uint64_t v26 = *((void *)this + 15);
    *(void *)uint64_t v25 = v26;
    *((void *)v25 + atomic_store(0, (unint64_t *)this + 1) = v7;
    *(void *)(v26 + OZSpline::reparametrize((uint64_t)this + 8) = v25;
    *((void *)this + 15) = v25;
    uint64_t v27 = *((void *)this + 17);
    *((void *)this + 17) = v27 + 1;
    uint64_t v28 = operator new(0x30uLL);
    v28[1] = *(_OWORD *)&a2->value;
    *((void *)v28 + 4) = a2->epoch;
    *((double *)v28 + 5) = a3;
    *(void *)uint64_t v28 = v25;
    *((void *)v28 + atomic_store(0, (unint64_t *)this + 1) = v7;
    *((void *)v25 + atomic_store(0, (unint64_t *)this + 1) = v28;
    *((void *)this + 15) = v28;
    *((void *)this + 17) = v27 + 2;
    CMTime time1 = *a2;
    CMTime time2 = v39;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
    uint64_t v29 = PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
    CMTime time1 = *a2;
    CMTime time2 = v39;
    v30.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v36);
    double v17 = (*(double (**)(uint64_t, unsigned char *, uint64_t, void, __n128))(*(void *)v29 + 240))(v29, v36, v23, 0, v30);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)*v7;
  CMTime time1 = *a2;
  long long v10 = *(_OWORD *)(v9 + 16);
  time2.CMTimeEpoch epoch = *(void *)(v9 + 32);
  *(_OWORD *)&time2.CMTimeValue value = v10;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    CMTime v11 = (uint64_t *)*((void *)this + 15);
    uint64_t v12 = *v11;
    *(void *)(v12 + OZSpline::reparametrize((uint64_t)this + 8) = v11[1];
    *(void *)v11[1] = v12;
    --*((void *)this + 17);
    operator delete(v11);
    uint64_t v13 = operator new(0x30uLL);
    v13[1] = *(_OWORD *)&a2->value;
    *((void *)v13 + 4) = a2->epoch;
    *((double *)v13 + 5) = a3;
    uint64_t v14 = *((void *)this + 15);
    *(void *)uint64_t v13 = v14;
    *((void *)v13 + atomic_store(0, (unint64_t *)this + 1) = v7;
    *(void *)(v14 + OZSpline::reparametrize((uint64_t)this + 8) = v13;
    *((void *)this + 15) = v13;
    ++*((void *)this + 17);
    CMTime time1 = *a2;
    CMTime time2 = v39;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
    uint64_t v15 = PVInstructionGraphContext::HGNodeCache(*((PVInstructionGraphContext **)this + 14));
    CMTime time1 = *a2;
    CMTime time2 = v39;
    v16.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v36);
    double v17 = (*(double (**)(uint64_t, unsigned char *, void, void, __n128))(*(void *)v15 + 240))(v15, v36, MEMORY[0x1E4F1FA48], 0, v16);
LABEL_9:
    double v31 = v17;
    long long v20 = operator new(0x30uLL);
    v20[1] = v37;
    *((void *)v20 + 4) = v38;
    *((double *)v20 + 5) = v31;
LABEL_10:
    uint64_t v32 = *((void *)this + 15);
    *(void *)long long v20 = v32;
    *((void *)v20 + atomic_store(0, (unint64_t *)this + 1) = v7;
    *(void *)(v32 + OZSpline::reparametrize((uint64_t)this + 8) = v20;
    *((void *)this + 15) = v20;
    ++*((void *)this + 17);
    goto LABEL_11;
  }
  CMTime time1 = *a2;
  long long v33 = *(_OWORD *)(v9 + 16);
  time2.CMTimeEpoch epoch = *(void *)(v9 + 32);
  *(_OWORD *)&time2.CMTimeValue value = v33;
  if (CMTimeCompare(&time1, &time2)) {
    goto LABEL_12;
  }
  *(double *)(v9 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = a3;
LABEL_11:
  *((double *)this + 3) = a3;
LABEL_12:
  PCSpinLock::unlock(v6);
}

BOOL OZRecordingNode::getUForValue(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, double a6)
{
  uint64_t v11 = PVInstructionGraphContext::HGNodeCache(*(PVInstructionGraphContext **)(a1 + 112));

  return OZSpline::getUForValue(v11, a2, a3, a4, a5, a6);
}

uint64_t OZRecordingNode::setDefaultValue(OZRecordingNode *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 14) + 72))(a2);
}

uint64_t OZRecordingNode::getDefaultValue(OZRecordingNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 80))();
}

uint64_t OZRecordingNode::setInitialValue(OZRecordingNode *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 14) + 88))(a2);
}

uint64_t OZRecordingNode::getInitialValue(OZRecordingNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 96))();
}

uint64_t OZRecordingNode::getCurrentRange(OZRecordingNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 112))();
}

uint64_t OZRecordingNode::getMaxValueU(OZRecordingNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 160))();
}

uint64_t OZRecordingNode::getMinValueU(OZRecordingNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 168))();
}

uint64_t *std::list<std::pair<CMTime,double>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<CMTime,double>,void *>,std::__list_const_iterator<std::pair<CMTime,double>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    i[4] = *(void *)(a2 + 32);
    *((_OWORD *)i + atomic_store(0, (unint64_t *)this + 1) = v6;
    i[5] = *(void *)(a2 + 40);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<std::pair<CMTime,double>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<CMTime,double>,void *>,std::__list_const_iterator<std::pair<CMTime,double>,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<std::pair<CMTime,double>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<CMTime,double>,void *>,std::__list_const_iterator<std::pair<CMTime,double>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x30uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    long long v10 = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v8 + atomic_store(0, (unint64_t *)this + 1) = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = v10;
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = 1;
    if (v11 != a4)
    {
      uint64_t v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x30uLL);
        void *v8 = v13;
        v8[1] = 0;
        long long v14 = *(_OWORD *)(v11 + 32);
        *((_OWORD *)v8 + atomic_store(0, (unint64_t *)this + 1) = *(_OWORD *)(v11 + 16);
        *((_OWORD *)v8 + 2) = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v13 = v8;
      }
      while (v11 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + OZSpline::reparametrize((uint64_t)this + 8) = v9;
    *uint64_t v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_1B79A2D00(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B79A2D20(_Unwind_Exception *a1)
{
}

uint64_t *std::list<std::pair<CMTime,double>>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + OZSpline::reparametrize((uint64_t)this + 8) = v6;
    do
    {
      CMTime v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      CMTime __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

void OZSplineNode::allocOZSpline(OZSplineNode *this, OZSpline *a2)
{
}

void sub_1B79A2E20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C4049CA59C4);
  _Unwind_Resume(a1);
}

void OZSplineNode::OZSplineNode(OZSplineNode *this, OZCurve *a2)
{
  OZConstantNode::OZConstantNode(this, 0.0);
  *(void *)uint64_t v3 = &unk_1F11054D0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 4OZSpline::setClosed((OZDynamicCurve *)((char *)this + 8), 0, 0) = 0;
  *(void *)(v3 + 4OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(unsigned char *)(v3 + 56) = 0;
}

void OZSplineNode::~OZSplineNode(OZSplineNode *this)
{
  *(void *)this = &unk_1F11054D0;
  uint64_t v2 = (OZSpline *)*((void *)this + 3);
  if (v2)
  {
    OZSpline::deleteAllVertices(v2);
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 3) = 0;
  }

  OZEaseInInterpolator::~OZEaseInInterpolator(this);
}

{
  uint64_t vars8;

  OZSplineNode::~OZSplineNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZSplineNode::createSpline(OZSplineNode *this)
{
}

double OZSplineNode::getMinValue(OZSplineNode *this, char a2)
{
  uint64_t v3 = (OZSpline *)*((void *)this + 3);
  if (!v3) {
    return OZConstantNode::getMinValue(this);
  }
  if (a2) {
    return OZSpline::getMinValueVWithTangents(v3, MEMORY[0x1E4F1FA48], 0);
  }
  return OZSpline::getMinValueV(v3, MEMORY[0x1E4F1FA48], 0);
}

double OZSplineNode::getMaxValue(OZSplineNode *this, char a2)
{
  uint64_t v3 = (OZSpline *)*((void *)this + 3);
  if (!v3) {
    return OZConstantNode::getMaxValue(this);
  }
  if (a2) {
    return OZSpline::getMaxValueVWithTangents(v3, MEMORY[0x1E4F1FA48], 0);
  }
  return OZSpline::getMaxValueV(v3, MEMORY[0x1E4F1FA48], 0);
}

__n128 OZSplineNode::getCurrentRange@<Q0>(OZSplineNode *this@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = (OZSpline *)*((void *)this + 3);
  if (v2)
  {
    OZSpline::getRangeU(v2, MEMORY[0x1E4F1FA48], a2);
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1FA48];
    a2->CMTimeEpoch epoch = *(void *)(v4 + 16);
  }
  return result;
}

__n128 OZSplineNode::getMaxValueU@<Q0>(OZSplineNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (OZSpline *)*((void *)this + 3);
  if (v2)
  {
    result.n128_u64[0] = OZSpline::getMaxValueU(v2, MEMORY[0x1E4F1FA48], 1, a2).n128_u64[0];
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
  }
  return result;
}

__n128 OZSplineNode::getMinValueU@<Q0>(OZSplineNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (OZSpline *)*((void *)this + 3);
  if (v2)
  {
    OZSpline::getMinValueU(v2, MEMORY[0x1E4F1FA48], 1, a2);
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
  }
  return result;
}

double OZSplineNode::reset(OZSplineNode *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 3) = 0;
  }
  double result = *((double *)this + 2);
  *((double *)this + atomic_store(0, (unint64_t *)this + 1) = result;
  return result;
}

double OZSplineNode::solveNode(OZSplineNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v5 = (void *)*((void *)this + 3);
  if (!v5 || ((v5[3] - v5[2]) & 0x7FFFFFFF8) == 0) {
    return OZConstantNode::solveNode(this, a2, a3, a4);
  }
  (*(void (**)(void *, const CMTime *, void, uint64_t, double, double))(*v5 + 240))(v5, a2, MEMORY[0x1E4F1FA48], 1, a3, a4);
  return result;
}

void OZSplineNode::solveNode(OZSplineNode *this, OZCurveNodeParam *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3 && ((v3[3] - v3[2]) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = *v3;
    if (*((unsigned char *)a2 + 1)) {
      (*(void (**)(void))(v4 + 72))();
    }
    else {
      (*(void (**)(void))(v4 + 40))();
    }
  }
  else
  {
    OZConstantNode::solveNode(this, a2);
  }
}

BOOL OZSplineNode::getUForValue(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, double a6)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 && ((*(void *)(v6 + 24) - *(void *)(v6 + 16)) & 0x7FFFFFFF8) != 0) {
    return OZSpline::getUForValue(*(void *)(a1 + 24), a2, a3, a4, a5, a6);
  }
  else {
    return OZConstantNode::getUForValue(a1, (void **)a2, (long long *)&a3->value, a6);
  }
}

uint64_t OZSplineNode::setValue(OZSpline **this, const CMTime *a2, __n128 a3, int a4)
{
  if (!this[3]) {
    OZSplineNode::allocOZSpline((OZSplineNode *)this, 0);
  }
  uint64_t v4 = this[3];
  if (!a4)
  {
    CMTime v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZSpline::addVertexNoTangents(v4, a2, a3.n128_f64[0], v7);
  }
  uint64_t v5 = *(uint64_t (**)(__n128))(*(void *)v4 + 192);

  return v5(a3);
}

void OZSplineNode::cloneNode(OZSplineNode *this)
{
}

void sub_1B79A3340(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A6C35FEDLL);
  _Unwind_Resume(a1);
}

CMTime *OZSplineNode::getFrameDuration@<X0>(OZSplineNode *this@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = (OZCurve *)*((void *)this + 4);
  if (v2) {
    return OZCurve::getFrameDuration(v2, a2);
  }
  else {
    return CMTimeMake(a2, 1, 30);
  }
}

BOOL OZSplineNode::compare(OZSplineNode *this, const OZCurveNode *lpsrc)
{
  if (!lpsrc)
  {
    OZConstantNode::compare(this, 0);
    return 0;
  }
  if ((OZConstantNode::compare(this, lpsrc) & 1) == 0 || !v4) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = v4[3];
  BOOL result = (v5 | v6) == 0;
  if (v5 && v6) {
    return OZSpline::operator==(*((void *)this + 3), v6);
  }
  return result;
}

uint64_t OZSplineNode::operator=(OZSplineNode *a1, uint64_t a2)
{
  __n128 v4 = OZConstantNode::operator=((uint64_t)a1, a2);
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 8))(result, v4);
    *((void *)a1 + 3) = 0;
  }
  *((void *)a1 + 5) = *(void *)(a2 + 40);
  uint64_t v6 = *(OZSpline **)(a2 + 24);
  if (v6)
  {
    OZSplineNode::allocOZSpline(a1, v6);
  }
  return result;
}

__n128 OZSplineNode::getNeededRange(OZSplineNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 1OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((void *)a2 + 1OZSplineNode::allocOZSpline(this, 0) = *((void *)a2 + 19);
  return result;
}

void OZDynamicSpline::OZDynamicSpline(OZDynamicSpline *this, OZSplineState *a2)
{
}

void OZDynamicSpline::~OZDynamicSpline(OZDynamicSpline *this)
{
  OZSpline::~OZSpline(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZDynamicSpline::addVertex(os_unfair_lock_s *this, const CMTime *a2, double a3, const CMTime *a4)
{
}

void sub_1B79A3D28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40974A25EBLL);
  _Unwind_Resume(a1);
}

char *std::vector<OZVertex *>::insert(uint64_t a1, char *__src, void *a3)
{
  __n128 v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    long long v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    }
    else {
      long long v19 = 0;
    }
    CMTime __p = v19;
    double v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    double v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    __n128 v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = __src + 8;
  }
  else
  {
    long long v10 = __src + 8;
    uint64_t v11 = v6 - 8;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)__n128 v4 = *a3;
  }
  return v4;
}

void sub_1B79A3EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZDynamicSpline::subdivideWithAnimation(OZInterpolators **this, const CMTime *a2, OZDynamicVertex *a3, OZDynamicVertex *a4, OZDynamicVertex *a5)
{
  int v10 = (*(uint64_t (**)(OZDynamicVertex *))(*(void *)a5 + 208))(a5);
  uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v10);
  uint64_t v12 = (*(uint64_t (**)(OZDynamicVertex *))(*(void *)a5 + 208))(a5);
  (*(void (**)(OZDynamicVertex *, uint64_t))(*(void *)a3 + 200))(a3, v12);
  memset(&v36, 0, sizeof(v36));
  (*(void (**)(CMTime *__return_ptr))(*((void *)a5 + 42) + 328))(&v36);
  uint64_t v13 = (char *)a4 + 48;
  if ((*(unsigned int (**)(char *, void))(*((void *)a4 + 6) + 552))((char *)a4 + 48, 0))
  {
    long long v14 = (long long *)MEMORY[0x1E4F1FA08];
    long long v34 = *MEMORY[0x1E4F1FA08];
    uint64_t v35 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    while ((*(unsigned int (**)(char *, long long *, void))(*(void *)v13 + 632))((char *)a4 + 48, &v34, 0))
    {
      OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v27, a4);
      OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v26, a5);
      (*(void (**)(char *, long long *))(*((void *)a3 + 6) + 600))((char *)a3 + 48, &v34);
      (*(void (**)(uint64_t, OZInterpolators **, long long *, CMTime *, CMTime *, OZDynamicVertex *))(*(void *)Interpolator + 32))(Interpolator, this, &v34, v27, v26, a3);
      (*(void (**)(OZDynamicVertex *, uint64_t, long long *))(*(void *)a3 + 128))(a3, 1, &v34);
      unint64_t v15 = v32;
      if ((unint64_t)v32 >= v33)
      {
        uint64_t v16 = (OZDynamicVertex *)std::vector<OZDynamicVertex>::__push_back_slow_path<OZDynamicVertex const&>(&v31, (const OZDynamicVertex *)v27);
      }
      else
      {
        OZDynamicVertex::OZDynamicVertex(v32, (const OZDynamicVertex *)v27);
        uint64_t v16 = (OZDynamicVertex *)((char *)v15 + 944);
      }
      uint64_t v32 = v16;
      uint64_t v17 = v29;
      if ((unint64_t)v29 >= v30)
      {
        unint64_t v18 = (OZDynamicVertex *)std::vector<OZDynamicVertex>::__push_back_slow_path<OZDynamicVertex const&>(&v28, (const OZDynamicVertex *)v26);
      }
      else
      {
        OZDynamicVertex::OZDynamicVertex(v29, (const OZDynamicVertex *)v26);
        unint64_t v18 = (OZDynamicVertex *)((char *)v17 + 944);
      }
      uint64_t v29 = v18;
      OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v26);
      OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v27);
    }
    uint64_t v19 = (*(uint64_t (**)(OZDynamicVertex *))(*(void *)a4 + 168))(a4);
    (*(void (**)(OZDynamicVertex *, uint64_t))(*(void *)a4 + 160))(a4, 2);
    uint64_t v20 = (*(uint64_t (**)(OZDynamicVertex *))(*(void *)a5 + 168))(a5);
    (*(void (**)(OZDynamicVertex *, uint64_t))(*(void *)a5 + 160))(a5, 2);
    unsigned int v21 = 0;
    long long v34 = *v14;
    uint64_t v35 = *((void *)v14 + 2);
    while ((*(unsigned int (**)(char *, long long *, void))(*(void *)v13 + 632))((char *)a4 + 48, &v34, 0))
    {
      OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v27, a4);
      OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v26, a5);
      double v24 = 0.0;
      double v25 = 0.0;
      (*(void (**)(uint64_t, double *, double *, long long *))(*(void *)(v31 + 944 * v21) + 64))(v31 + 944 * v21, &v25, &v24, &v34);
      (*(void (**)(OZDynamicVertex *, long long *, double, double))(*(void *)a4 + 80))(a4, &v34, v25, v24);
      (*(void (**)(uint64_t, double *, double *, long long *))(*(void *)(v28 + 944 * v21) + 56))(v28 + 944 * v21, &v25, &v24, &v34);
      (*(void (**)(OZDynamicVertex *, long long *, double, double))(*(void *)a5 + 72))(a5, &v34, v25, v24);
      ++v21;
      OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v26);
      OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v27);
    }
    (*(void (**)(OZDynamicVertex *, uint64_t))(*(void *)a4 + 176))(a4, v19);
    (*(void (**)(OZDynamicVertex *, uint64_t))(*(void *)a5 + 176))(a5, v20);
    v27[0].CMTimeValue value = (CMTimeValue)&v28;
    std::vector<OZDynamicVertex>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
    v27[0].CMTimeValue value = (CMTimeValue)&v31;
    std::vector<OZDynamicVertex>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  }
  else
  {
    (*(void (**)(uint64_t, OZInterpolators **, const CMTime *, OZDynamicVertex *, OZDynamicVertex *, OZDynamicVertex *))(*(void *)Interpolator + 32))(Interpolator, this, a2, a4, a5, a3);
    (*(void (**)(OZDynamicVertex *, uint64_t, const CMTime *))(*(void *)a3 + 128))(a3, 1, a2);
  }
  v27[0] = v36;
  v26[0] = *a2;
  double v22 = PC_CMTimeSaferSubtract(v27, v26, (uint64_t)&v34);
  return (*(uint64_t (**)(OZDynamicVertex *, long long *, double))(*(void *)a3 + 248))(a3, &v34, v22);
}

void sub_1B79A454C(_Unwind_Exception *a1)
{
  STACK[0x3C0] = v1 - 192;
  std::vector<OZDynamicVertex>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  STACK[0x3C0] = v1 - 168;
  std::vector<OZDynamicVertex>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void OZDynamicSpline::appendVertex(os_unfair_lock_s *this, const CMTime *a2, double a3, const CMTime *a4)
{
}

void sub_1B79A4784(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40974A25EBLL);
  _Unwind_Resume(a1);
}

BOOL OZDynamicSpline::setVertex(os_unfair_lock_s *this, unsigned char **a2, const CMTime *a3, double a4, const CMTime *a5)
{
  int v10 = this + 2;
  PCSpinLock::lock(this + 2);
  if (a2)
  {
    CMTime v12 = *(CMTime *)(a2 + 2);
    CMTime time1 = *a3;
    if (CMTimeCompare(&time1, &v12))
    {
      (*((void (**)(unsigned char **, const CMTime *))*a2 + 2))(a2, a3);
      OZSpline::setDirty((OZSpline *)this, 1);
    }
    (*((void (**)(unsigned char **, const CMTime *, double))*a2 + 4))(a2, a5, a4);
  }
  PCSpinLock::unlock(v10);
  return a2 != 0;
}

uint64_t OZDynamicSpline::getVertexChannel(OZDynamicSpline *this, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    return 0;
}

void OZDynamicSpline::setVertexChannel(OZDynamicSpline *this, void *lpsrc, OZChannelVertexFolder *a3)
{
  if (lpsrc) {
  else
  }
    __n128 v4 = 0;

  OZDynamicVertex::setChannel(v4, a3);
}

uint64_t OZDynamicSpline::sampleSpline(OZDynamicSpline *this, Float64 a2, Float64 a3, unsigned int *a4, double *a5, double *a6, const CMTime *a7)
{
  if (a5) {
    operator new[]();
  }
  OZFigTimeForChannelSeconds(&v14, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v13, a3, 0x40000);
  (*(void (**)(OZDynamicSpline *, CMTime *, CMTime *, unsigned int *, void, double *, const CMTime *, void))(*(void *)this + 40))(this, &v14, &v13, a4, 0, a6, a7, 0);
  return 1;
}

uint64_t OZDynamicSpline::sampleSpline(OZInterpolators **this, const CMTime *a2, CMTime *a3, int32_t *a4, CMTime *a5, double *a6, const CMTime *a7, char a8)
{
  unsigned int v37 = 0;
  (*((void (**)(OZInterpolators **, unsigned int *, void, void))*this + 2))(this, &v37, 0, 0);
  uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v37);
  if ((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator))
  {
    OZSpline::sampleSpline((OZSpline *)this, a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  PCSpinLock::lock((os_unfair_lock_t)this + 2);
  memset(&v36, 0, sizeof(v36));
  operator*(a3, *a4, &v36);
  memset(&v35, 0, sizeof(v35));
  v39[0] = *a2;
  CMTime v38 = v36;
  PC_CMTimeSaferAdd(v39, &v38, (uint64_t)&v35);
  uint64_t v17 = OZInterpolators::getInterpolator(this[19], v37);
  (*(void (**)(CMTime *__return_ptr))(*(void *)v17 + 72))(v39);
  CMTime v35 = v39[0];
  memset(&v34, 0, sizeof(v34));
  uint64_t v18 = OZInterpolators::getInterpolator(this[19], v37);
  (*(void (**)(CMTime *__return_ptr))(*(void *)v18 + 80))(&v34);
  CMTime v33 = *a3;
  if (v37 == 10 || *((unsigned char *)this + 144))
  {
    v39[0] = v35;
    CMTime v38 = v34;
    PC_CMTimeSaferSubtract(v39, &v38, (uint64_t)&v32);
    double v19 = (double)(*a4 - 1);
  }
  else
  {
    if (v37 != 12) {
      goto LABEL_7;
    }
    v39[0] = v35;
    CMTime v38 = v34;
    double v29 = PC_CMTimeSaferSubtract(v39, &v38, (uint64_t)&v32);
    LODWORD(v29) = *a4;
    double v19 = (double)*(unint64_t *)&v29;
  }
  operator*(&v32, &v33, 1.0 / v19);
LABEL_7:
  if (*a4)
  {
    unsigned int v20 = 0;
    do
    {
      if (a6)
      {
        uint64_t v31 = 0;
        OZSpline::getFirstValidVertex((OZSpline *)this, &v31, a7);
        unint64_t v30 = 0;
        OZSpline::getLastValidVertex((OZSpline *)this, &v30, a7);
        operator*(&v33, v20, v39);
        CMTime v36 = v39[0];
        CMTimeEpoch epoch = v39[0].epoch;
        long long v22 = *(_OWORD *)&v39[0].value;
        double v24 = v30;
        uint64_t v23 = v31;
        v39[0] = v34;
        *(_OWORD *)&v38.CMTimeValue value = v22;
        v38.CMTimeEpoch epoch = epoch;
        PC_CMTimeSaferAdd(v39, &v38, (uint64_t)&v32);
        OZSpline::interpolate((OZSpline *)this, a7, v23, v24, &v32, a6++, 0);
      }
      if (a5)
      {
        operator*(&v33, v20, v39);
        CMTime v36 = v39[0];
        CMTimeEpoch v25 = v39[0].epoch;
        long long v26 = *(_OWORD *)&v39[0].value;
        v39[0] = v34;
        *(_OWORD *)&v38.CMTimeValue value = v26;
        v38.CMTimeEpoch epoch = v25;
        PC_CMTimeSaferAdd(v39, &v38, (uint64_t)&v32);
        long long v27 = *(_OWORD *)&v32.value;
        a5->CMTimeEpoch epoch = v32.epoch;
        *(_OWORD *)&a5->CMTimeValue value = v27;
        ++a5;
      }
      ++v20;
    }
    while (v20 < *a4);
  }
  PCSpinLock::unlock((os_unfair_lock_t)this + 2);
  return 1;
}

uint64_t OZDynamicSpline::sampleSpline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Float64 a6, Float64 a7)
{
  if (a3) {
    operator new();
  }
  OZFigTimeForChannelSeconds(&v14, a6, 0x40000);
  OZFigTimeForChannelSeconds(&v13, a7, 0x40000);
  (*(void (**)(uint64_t, CMTime *, CMTime *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a1 + 48))(a1, &v14, &v13, a2, 0, a4, a5, 0);
  return 1;
}

uint64_t OZDynamicSpline::sampleSpline(os_unfair_lock_s *a1, CMTime *a2, CMTime *a3, int32_t *a4, void **a5, uint64_t a6, const CMTime *a7, char a8)
{
  int v62 = 0;
  if (a5) {
    std::vector<CMTime>::reserve(a5, *a4);
  }
  if (a6) {
    std::vector<double>::reserve((void **)a6, *a4);
  }
  (*(void (**)(os_unfair_lock_s *, int *, void, void))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v62, 0, 0);
  uint64_t Interpolator = OZInterpolators::getInterpolator(*(OZInterpolators **)&a1[38]._os_unfair_lock_opaque, v62);
  if ((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator))
  {
    OZSpline::sampleSpline((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    PCSpinLock::lock(a1 + 2);
    memset(&v61, 0, sizeof(v61));
    operator*(a3, *a4, &v61);
    memset(&v60, 0, sizeof(v60));
    CMTime v64 = *a2;
    CMTime v63 = v61;
    PC_CMTimeSaferAdd(&v64, &v63, (uint64_t)&v60);
    uint64_t v17 = OZInterpolators::getInterpolator(*(OZInterpolators **)&a1[38]._os_unfair_lock_opaque, v62);
    (*(void (**)(CMTime *__return_ptr))(*(void *)v17 + 72))(&v64);
    CMTime v60 = v64;
    memset(&v59, 0, sizeof(v59));
    uint64_t v18 = OZInterpolators::getInterpolator(*(OZInterpolators **)&a1[38]._os_unfair_lock_opaque, v62);
    (*(void (**)(CMTime *__return_ptr))(*(void *)v18 + 80))(&v59);
    CMTime v58 = v59;
    if (v62 == 10 || LOBYTE(a1[36]._os_unfair_lock_opaque))
    {
      CMTime v64 = v60;
      CMTime v63 = v59;
      PC_CMTimeSaferSubtract(&v64, &v63, (uint64_t)&v57);
      operator*(&v57, &v58, 1.0 / (double)(*a4 - 1));
    }
    else if (v62 == 12)
    {
      CMTime v64 = v60;
      CMTime v63 = v59;
      double v53 = PC_CMTimeSaferSubtract(&v64, &v63, (uint64_t)&v57);
      LODWORD(v53) = *a4;
      operator*(&v57, &v64, 1.0 / (double)*(unint64_t *)&v53);
      CMTime v58 = v64;
    }
    if (*a4)
    {
      unsigned int v19 = 0;
      do
      {
        if (a6)
        {
          double v56 = 0;
          OZSpline::getFirstValidVertex((OZSpline *)a1, &v56, a7);
          double v55 = 0;
          OZSpline::getLastValidVertex((OZSpline *)a1, &v55, a7);
          double v54 = 0.0;
          operator*(&v58, v19, &v64);
          CMTime v61 = v64;
          CMTimeEpoch epoch = v64.epoch;
          long long v21 = *(_OWORD *)&v64.value;
          long long v22 = v55;
          uint64_t v23 = v56;
          CMTime v64 = v59;
          *(_OWORD *)&v63.CMTimeValue value = v21;
          v63.CMTimeEpoch epoch = epoch;
          PC_CMTimeSaferAdd(&v64, &v63, (uint64_t)&v57);
          OZSpline::interpolate((OZSpline *)a1, a7, v23, v22, &v57, &v54, 0);
          CMTimeEpoch v25 = *(double **)(a6 + 8);
          unint64_t v24 = *(void *)(a6 + 16);
          if ((unint64_t)v25 >= v24)
          {
            long long v27 = *(double **)a6;
            uint64_t v28 = ((uint64_t)v25 - *(void *)a6) >> 3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v24 - (void)v27;
            if (v30 >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              CMTime v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v31);
              long long v27 = *(double **)a6;
              CMTimeEpoch v25 = *(double **)(a6 + 8);
            }
            else
            {
              CMTime v32 = 0;
            }
            CMTime v33 = (double *)&v32[8 * v28];
            double *v33 = v54;
            long long v26 = v33 + 1;
            while (v25 != v27)
            {
              uint64_t v34 = *((void *)v25-- - 1);
              *((void *)v33-- - atomic_store(0, (unint64_t *)this + 1) = v34;
            }
            *(void *)a6 = v33;
            *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v26;
            *(void *)(a6 + 16) = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *CMTimeEpoch v25 = v54;
            long long v26 = v25 + 1;
          }
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v26;
        }
        if (a5)
        {
          operator*(&v58, v19, &v64);
          CMTime v61 = v64;
          CMTimeEpoch v35 = v64.epoch;
          long long v36 = *(_OWORD *)&v64.value;
          CMTime v64 = v59;
          *(_OWORD *)&v63.CMTimeValue value = v36;
          v63.CMTimeEpoch epoch = v35;
          PC_CMTimeSaferAdd(&v64, &v63, (uint64_t)&v57);
          CMTime v38 = (char *)a5[1];
          unsigned int v37 = (char *)a5[2];
          if (v38 >= v37)
          {
            unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (unsigned char *)*a5) >> 3);
            unint64_t v42 = v41 + 1;
            if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)*a5) >> 3);
            if (2 * v43 > v42) {
              unint64_t v42 = 2 * v43;
            }
            if (v43 >= 0x555555555555555) {
              unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44) {
              float64x2_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v44);
            }
            else {
              float64x2_t v45 = 0;
            }
            CMTime v46 = &v45[24 * v41];
            long long v47 = *(_OWORD *)&v57.value;
            *((void *)v46 + PCSpinLock::lock(this + 2) = v57.epoch;
            *(_OWORD *)CMTime v46 = v47;
            CMTime v49 = (char *)*a5;
            uint64_t v48 = (char *)a5[1];
            CMTime v50 = v46;
            if (v48 != *a5)
            {
              do
              {
                long long v51 = *(_OWORD *)(v48 - 24);
                *((void *)v50 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v48 - 1);
                *(_OWORD *)(v50 - 24) = v51;
                v50 -= 24;
                v48 -= 24;
              }
              while (v48 != v49);
              uint64_t v48 = (char *)*a5;
            }
            long long v40 = v46 + 24;
            *a5 = v50;
            a5[1] = v46 + 24;
            a5[2] = &v45[24 * v44];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            long long v39 = *(_OWORD *)&v57.value;
            *((void *)v38 + PCSpinLock::lock(this + 2) = v57.epoch;
            *(_OWORD *)CMTime v38 = v39;
            long long v40 = v38 + 24;
          }
          a5[1] = v40;
        }
        ++v19;
      }
      while (v19 < *a4);
    }
    PCSpinLock::unlock(a1 + 2);
  }
  return 1;
}

BOOL OZDynamicSpline::setVertexInputHandles(os_unfair_lock_s *this, void *a2, double a3, double a4, const CMTime *a5)
{
  unint64_t v9 = this + 2;
  PCSpinLock::lock(this + 2);
  if (a2) {
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a5, a3, a4);
  }
  PCSpinLock::unlock(v9);
  return a2 != 0;
}

BOOL OZDynamicSpline::setVertexOutputHandles(os_unfair_lock_s *this, void *a2, double a3, double a4, const CMTime *a5)
{
  int v10 = this + 2;
  PCSpinLock::lock(this + 2);
  VertexIter = OZSpline::getVertexIter((OZSpline *)this, a2);
  CMTime v12 = *(void ***)&this[6]._os_unfair_lock_opaque;
  if (v12 != VertexIter) {
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a5, a3, a4);
  }
  PCSpinLock::unlock(v10);
  return v12 != VertexIter;
}

BOOL OZDynamicSpline::getVertexInputHandles(os_unfair_lock_s *this, void *a2, double *a3, double *a4, const CMTime *a5)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v9 = this + 2;
  PCSpinLock::lock(this + 2);
  if (a2)
  {
    (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(void *)a2 + 56))(a2, &v12, &v11, a5);
    if (a3) {
      *(void *)a3 = v12;
    }
    if (a4) {
      *(void *)a4 = v11;
    }
  }
  PCSpinLock::unlock(v9);
  return a2 != 0;
}

BOOL OZDynamicSpline::getVertexOutputHandles(os_unfair_lock_s *this, void *a2, double *a3, double *a4, const CMTime *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v10 = this + 2;
  PCSpinLock::lock(this + 2);
  VertexIter = OZSpline::getVertexIter((OZSpline *)this, a2);
  uint64_t v12 = *(void ***)&this[6]._os_unfair_lock_opaque;
  if (v12 != VertexIter)
  {
    (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(void *)a2 + 64))(a2, &v15, &v14, a5);
    if (a3) {
      *(void *)a3 = v15;
    }
    if (a4) {
      *(void *)a4 = v14;
    }
  }
  PCSpinLock::unlock(v10);
  return v12 != VertexIter;
}

void OZDynamicSpline::reverseWindingOrder(OZDynamicSpline *this, const CMTime *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = (void *)(v4 - 8);
  if (v3 + 8 != v4 && (unint64_t)v5 > v3 + 8)
  {
    unint64_t v7 = v3 + 16;
    do
    {
      uint64_t v8 = *(void *)(v7 - 8);
      *(void *)(v7 - OZSpline::reparametrize((uint64_t)this + 8) = *v5;
      *v5-- = v8;
      BOOL v9 = v7 >= (unint64_t)v5;
      v7 += 8;
    }
    while (!v9);
  }
  OZSpline::reparametrize((uint64_t)this);
  for (uint64_t i = (uint64_t *)*((void *)this + 2); i != *((uint64_t **)this + 3); ++i)
  {
    uint64_t v11 = *i;
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
  }

  OZSpline::setDirty(this, 1);
}

BOOL OZDynamicSpline::getInterpolation(OZDynamicSpline *this, unsigned int *a2, BOOL *a3, BOOL *a4)
{
  if (a2)
  {
    int v8 = *(_DWORD *)(*((void *)this + 21) + 32);
    *a2 = v8;
    if (a3)
    {
      uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v8);
      *a3 = (*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 56))(Interpolator);
    }
    if (a4)
    {
      uint64_t v10 = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), *a2);
      *a4 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10) ^ 1;
    }
  }
  return a2 != 0;
}

void OZDynamicSpline::deriveCurve(OZDynamicSpline *this, OZVertex *lpsrc, const CMTime *a3)
{
  OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v29, v6);
  uint64_t v28 = 0;
  long long v27 = 0;
  lpsrca = 0;
  CMTimeEpoch v25 = 0;
  double v24 = 0.0;
  OZSpline::getPreviousValidVertex(this, lpsrc, &v28, a3);
  OZSpline::getNextValidVertex((void ***)this, lpsrc, &v27, a3);
  OZSpline::getFirstValidVertex(this, &v25, a3);
  OZSpline::getLastValidVertex(this, &lpsrca, a3);
  if (v28 && v27)
  {
    unint64_t v7 = (OZInterpolators *)*((void *)this + 19);
    int v8 = (*(uint64_t (**)(OZVertex *))(*(void *)lpsrc + 208))(lpsrc);
    uint64_t Interpolator = OZInterpolators::getInterpolator(v7, v8);
    (*(void (**)(uint64_t, OZDynamicSpline *, const CMTime *, void *, void *, unsigned char *))(*(void *)Interpolator
                                                                                                + 32))(Interpolator, this, a3, v28, v27, v29);
    OZDynamicVertex::getInputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
    (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 72))(lpsrc, a3, 0.0, v24);
    OZDynamicVertex::getOutputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
    (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 80))(lpsrc, a3, 0.0, v24);
    goto LABEL_15;
  }
  if (v28 || !v27)
  {
    if (v28 && !v27 && *((unsigned char *)this + 144) && v25)
    {
      OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v23, v15);
      CMTime v21 = *(CMTime *)((char *)lpsrc + 16);
      OZSpline::getStep(this, &v20);
      CMTime v31 = v21;
      CMTime v30 = v20;
      PC_CMTimeSaferAdd(&v31, &v30, (uint64_t)&v22);
      __n128 v16 = OZVertex::setValueU((OZVertex *)v23, &v22);
      uint64_t v17 = (OZInterpolators *)*((void *)this + 19);
      int v18 = (*(uint64_t (**)(OZVertex *, __n128))(*(void *)lpsrc + 208))(lpsrc, v16);
      uint64_t v19 = OZInterpolators::getInterpolator(v17, v18);
      (*(void (**)(uint64_t, OZDynamicSpline *, const CMTime *, void *, unsigned char *, unsigned char *))(*(void *)v19 + 32))(v19, this, a3, v28, v23, v29);
      OZDynamicVertex::getInputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 72))(lpsrc, a3, 0.0, v24);
      OZDynamicVertex::getOutputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 80))(lpsrc, a3, 0.0, v24);
      goto LABEL_14;
    }
  }
  else if (*((unsigned char *)this + 144) && lpsrca)
  {
    OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)v23, v10);
    CMTime v21 = *(CMTime *)((char *)lpsrc + 16);
    OZSpline::getStep(this, &v20);
    CMTime v31 = v21;
    CMTime v30 = v20;
    PC_CMTimeSaferSubtract(&v31, &v30, (uint64_t)&v22);
    __n128 v11 = OZVertex::setValueU((OZVertex *)v23, &v22);
    uint64_t v12 = (OZInterpolators *)*((void *)this + 19);
    int v13 = (*(uint64_t (**)(OZVertex *, __n128))(*(void *)lpsrc + 208))(lpsrc, v11);
    uint64_t v14 = OZInterpolators::getInterpolator(v12, v13);
    (*(void (**)(uint64_t, OZDynamicSpline *, const CMTime *, unsigned char *, void *, unsigned char *))(*(void *)v14 + 32))(v14, this, a3, v23, v27, v29);
    OZDynamicVertex::getInputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
    (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 72))(lpsrc, a3, 0.0, v24);
    OZDynamicVertex::getOutputTangents((OZDynamicVertex *)v29, 0, &v24, a3);
    (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)lpsrc + 80))(lpsrc, a3, 0.0, v24);
LABEL_14:
    OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v23);
  }
LABEL_15:
  OZDynamicVertex::~OZDynamicVertex((OZDynamicVertex *)v29);
}

void sub_1B79A60A8(_Unwind_Exception *a1)
{
}

uint64_t OZDynamicSpline::setVertexSmooth(OZDynamicSpline *this, void *a2, char a3, const CMTime *a4)
{
  if ((a3 & 1) == 0)
  {
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a4, 0.0, 0.0);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a4, 0.0, 0.0);
  }
  return 1;
}

BOOL OZDynamicSpline::enableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  *((unsigned char *)this + 11PCSpinLock::lock(this + 2) = 0;
  return OZSpline::enableVertex(this, a2, a3);
}

BOOL OZDynamicSpline::disableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  *((unsigned char *)this + 11PCSpinLock::lock(this + 2) = 0;
  return OZSpline::disableVertex(this, a2, a3);
}

OZChannelBase *OZDynamicSpline::setVertexID(OZDynamicSpline *this, void *lpsrc, unsigned int a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  uint64_t v5 = (OZChannelBase *)(v4 + 48);

  return OZChannelBase::setID(v5, a3);
}

void OZDynamicSpline::flattenSpline(OZDynamicSpline *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock((os_unfair_lock_t)this + 2);
  while (v2 != *((uint64_t **)this + 6))
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
  }

  PCSpinLock::unlock(v3);
}

uint64_t OZDynamicSpline::isSplineFlattened(OZDynamicSpline *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock((os_unfair_lock_t)this + 2);
  if (*((void *)this + 6) == v2)
  {
    uint64_t v4 = 1;
  }
  else
  {
    do
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)v2 + 144))();
      if ((v4 & 1) == 0) {
        break;
      }
      v2 += 8;
    }
    while (v2 != *((void *)this + 6));
  }
  PCSpinLock::unlock(v3);
  return v4;
}

uint64_t OZDynamicSpline::isVertexFlattened(OZDynamicSpline *this, void *a2)
{
  return (*(uint64_t (**)(void *))(*(void *)a2 + 144))(a2);
}

void OZDynamicSpline::setDefaultValueAtCurrentTime(OZDynamicSpline *this, const CMTime *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 5);
  uint64_t v5 = (os_unfair_lock_s *)((char *)this + 8);
  PCSpinLock::lock((os_unfair_lock_t)this + 2);
  while (v4 != *((uint64_t **)this + 6))
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, const CMTime *))(*(void *)v6 + 192))(v6, a2);
  }

  PCSpinLock::unlock(v5);
}

void OZDynamicSpline::setDefaultValueAtCurrentTime(os_unfair_lock_s *this, void *a2, const CMTime *a3)
{
  uint64_t v5 = this + 2;
  PCSpinLock::lock(this + 2);
  (*(void (**)(void *, const CMTime *))(*(void *)a2 + 192))(a2, a3);

  PCSpinLock::unlock(v5);
}

BOOL OZDynamicSpline::updateVertexBias(OZDynamicSpline *this, void *a2)
{
  if (a2) {
    (*(void (**)(void *))(*(void *)a2 + 224))(a2);
  }
  return a2 != 0;
}

uint64_t OZDynamicSpline::getVertexToInsert(OZDynamicSpline *this, const CMTime *a2, const CMTime *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  unsigned int v14 = 0;
  (*(void (**)(OZDynamicSpline *, unsigned int *, void, void))(*(void *)this + 16))(this, &v14, 0, 0);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t result = OZSpline::getPreviousValidVertex(this, a3, &v13, a2, 0);
  if (result)
  {
    uint64_t result = OZSpline::getNextValidVertex(this, a3, &v12, a2, 0);
    if ((result & 1) != 0
      || *((unsigned char *)this + 144) && (uint64_t result = OZSpline::getFirstValidVertex(this, &v12, a2), result))
    {
      operator new();
    }
  }
  return result;
}

void sub_1B79A69F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicSpline::enabledBehaviorForVertex(OZDynamicSpline *this, void *a2)
{
  return (*(uint64_t (**)(void *))(*(void *)a2 + 240))(a2);
}

uint64_t OZDynamicSpline::enableBehaviorForVertex(OZDynamicSpline *this, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)a2 + 232))(a2, a3);
}

uint64_t OZDynamicSpline::getAllVerticesHandles(OZSpline *a1, char **a2)
{
  OZSpline::preSplineAccess(a1, 1);
  uint64_t v4 = (uint64_t *)*((void *)a1 + 2);
  uint64_t v5 = (uint64_t *)*((void *)a1 + 3);
  if (v4 != v5)
  {
    uint64_t v6 = a2 + 2;
    unint64_t v7 = a2[1];
    do
    {
      uint64_t v8 = *v4;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = (v7 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v12);
        }
        else {
          int v13 = 0;
        }
        unsigned int v14 = &v13[8 * v9];
        *(void *)unsigned int v14 = v8;
        unint64_t v7 = v14 + 8;
        __n128 v16 = *a2;
        uint64_t v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - atomic_store(0, (unint64_t *)this + 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          uint64_t v15 = *a2;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)unint64_t v7 = v8;
        v7 += 8;
      }
      a2[1] = v7;
      ++v4;
    }
    while (v4 != v5);
  }
  OZSpline::postSplineAccess(a1, 1);
  return 1;
}

uint64_t OZDynamicSpline::deleteVertex(char **this, void *a2, int a3, const CMTime *a4)
{
  OZSpline::preSplineAccess((OZSpline *)this, 1);
  if (!a2) {
    goto LABEL_4;
  }
  uint64_t v9 = (uint64_t)v8;
  if (v8)
  {
    if ((*(uint64_t (**)(void *, uint64_t))(*(void *)v8 + 184))(v8, 2))
    {
LABEL_4:
      uint64_t v9 = 0;
      goto LABEL_15;
    }
    VertexIter = OZSpline::getVertexIter((OZSpline *)this, a2);
    uint64_t v11 = VertexIter;
    if (a3)
    {
      OZSpline::scaleTangentsBeforeDeletion((OZSpline *)this, (unsigned char **)*VertexIter, a4);
      *(_OWORD *)&v18.CMTimeValue value = *(_OWORD *)&a4->value;
      uint64_t v13 = v9 + 48;
      uint64_t v12 = *(void *)(v9 + 48);
      v18.CMTimeEpoch epoch = a4->epoch;
      if ((*(unsigned int (**)(uint64_t, CMTime *, void))(v12 + 624))(v9 + 48, &v18, 0))
      {
        do
          OZSpline::scaleTangentsBeforeDeletion((OZSpline *)this, (unsigned char **)*v11, &v18);
        while (((*(uint64_t (**)(uint64_t, CMTime *, void))(*(void *)v13 + 624))(v9 + 48, &v18, 0) & 1) != 0);
      }
      CMTime v17 = *a4;
      if ((*(unsigned int (**)(uint64_t, CMTime *, void))(*(void *)v13 + 632))(v9 + 48, &v17, 0))
      {
        do
          OZSpline::scaleTangentsBeforeDeletion((OZSpline *)this, (unsigned char **)*v11, &v17);
        while (((*(uint64_t (**)(uint64_t, CMTime *, void))(*(void *)v13 + 632))(v9 + 48, &v17, 0) & 1) != 0);
      }
    }
    unsigned int v14 = this[3];
    int64_t v15 = v14 - (char *)(v11 + 1);
    if (v14 != (char *)(v11 + 1)) {
      memmove(v11, v11 + 1, v14 - (char *)(v11 + 1));
    }
    this[3] = (char *)v11 + v15;
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (this[2] == this[3]) {
      *((unsigned char *)this + 144) = 0;
    }
    uint64_t v9 = 1;
    OZSpline::setDirty((OZSpline *)this, 1);
  }
LABEL_15:
  OZSpline::postSplineAccess((OZSpline *)this, 1);
  return v9;
}

void std::vector<OZDynamicVertex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 118;
      unint64_t v7 = v4 - 118;
      do
      {
        (**v7)(v7);
        v6 -= 118;
        BOOL v8 = v7 == v2;
        v7 -= 118;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<OZDynamicVertex>::__push_back_slow_path<OZDynamicVertex const&>(uint64_t *a1, const OZDynamicVertex *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCBEEA4E1A08AD8F3 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x456C797DD49C34) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCBEEA4E1A08AD8F3 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x22B63CBEEA4E1ALL) {
    unint64_t v9 = 0x456C797DD49C34;
  }
  else {
    unint64_t v9 = v5;
  }
  CMTime v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OZDynamicVertex>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unsigned int v14 = (OZDynamicVertex *)&v10[944 * v4];
  __n128 v16 = &v10[944 * v9];
  OZDynamicVertex::OZDynamicVertex(v14, a2);
  int64_t v15 = (char *)v14 + 944;
  std::vector<OZDynamicVertex>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<OZDynamicVertex>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B79A7034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OZDynamicVertex>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OZDynamicVertex>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZDynamicVertex>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OZDynamicVertex>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x456C797DD49C35) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(944 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZDynamicVertex>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        OZDynamicVertex::OZDynamicVertex((OZDynamicVertex *)(i + a7), (const OZDynamicVertex *)(i + a3)))
  {
    i -= 944;
  }
  return a6;
}

uint64_t std::__split_buffer<OZDynamicVertex>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 944;
    (**(void (***)(void))(i - 944))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZDynamicVertex>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>,std::reverse_iterator<OZDynamicVertex*>>(uint64_t (***a1)(void), uint64_t (***a2)(void))
{
  uint64_t v3 = a1;
  unint64_t v4 = a1;
  do
  {
    uint64_t result = (**v4)(v4);
    v4 += 118;
    v3 += 118;
  }
  while (v4 != a2);
  return result;
}

void sub_1B79A736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C400C70C378);
  _Unwind_Resume(a1);
}

void sub_1B79A74BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B79A767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B79A7804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C400C70C378);
  _Unwind_Resume(a1);
}

void OZSpline::OZSpline(OZSpline *this, OZSplineState *a2)
{
  *((_DWORD *)this + PCSpinLock::lock(this + 2) = 0;
  *(void *)this = &unk_1F1105740;
  *((_OWORD *)this + atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + PCSpinLock::lock(this + 2) = 0u;
  *((void *)this + 6) = 0;
  *(_OWORD *)((char *)this + 7PCSpinLock::lock(this + 2) = 0u;
  *(_OWORD *)((char *)this + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = a2;
  *((unsigned char *)this + 144) = 0;
  operator new();
}

void sub_1B79A78FC(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  MEMORY[0x1BA9BFBA0](v5, 0x20C40960023A9);
  uint64_t v7 = (void *)v1[11];
  if (v7)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    v1[3] = v8;
    operator delete(v8);
  }
  PCSpinLock::~PCSpinLock(v2);
  _Unwind_Resume(a1);
}

void OZSpline::OZSpline(OZSpline *this, const OZSpline *a2, OZSplineState *a3)
{
  *(void *)this = &unk_1F1105740;
  *((_DWORD *)this + PCSpinLock::lock(this + 2) = 0;
  *((_OWORD *)this + atomic_store(0, (unint64_t *)this + 1) = 0u;
  uint64_t v5 = (void **)((char *)this + 16);
  *((_OWORD *)this + PCSpinLock::lock(this + 2) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 7PCSpinLock::lock(this + 2) = 0u;
  *((void *)this + 2OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = a3;
  uint64_t v6 = *((void *)a2 + 20);
  if (!v6 || (uint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    uint64_t v7 = (os_unfair_lock_s *)((char *)a2 + 8);
  }
  PCSpinLock::lock(v7);
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
  if (*((void *)a2 + 19)) {
    operator new();
  }
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 145) = 1;
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = *((void *)a2 + 3);
  if (v8 != v9)
  {
    uint64_t v10 = *((void *)a2 + 5);
    std::vector<void *>::reserve(v5, (v9 - v8) >> 3);
    for (; v10 != *((void *)a2 + 6); v10 += 8)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v10 + 216))();
      uint64_t v12 = v11;
      unsigned int v14 = (uint64_t *)*((void *)this + 3);
      unint64_t v13 = *((void *)this + 4);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*v5) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*v5;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          CMTime v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v19);
        }
        else {
          CMTime v20 = 0;
        }
        CMTime v21 = (uint64_t *)&v20[8 * v16];
        uint64_t *v21 = v12;
        int64_t v15 = v21 + 1;
        uint64_t v23 = (char *)*((void *)this + 2);
        CMTime v22 = (char *)*((void *)this + 3);
        if (v22 != v23)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *--CMTime v21 = v24;
          }
          while (v22 != v23);
          CMTime v22 = (char *)*v5;
        }
        *((void *)this + PCSpinLock::lock(this + 2) = v21;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t *v14 = v11;
        int64_t v15 = v14 + 1;
      }
      *((void *)this + 3) = v15;
    }
  }
  *(_OWORD *)((char *)this + 12OZSplineNode::allocOZSpline(this, 0) = *(_OWORD *)((char *)a2 + 120);
  *((void *)this + 17) = *((void *)a2 + 17);
  *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
  *((unsigned char *)this + 11PCSpinLock::lock(this + 2) = *((unsigned char *)a2 + 112);
  *(_OWORD *)((char *)this + 7PCSpinLock::lock(this + 2) = *(_OWORD *)((char *)this + 88);
  *((void *)this + 7) = 0;
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  OZSpline::refreshValidVerticesList(this);
  uint64_t v25 = *((void *)a2 + 20);
  if (!v25 || (long long v26 = *(os_unfair_lock_s **)(v25 + 48)) == 0) {
    long long v26 = (os_unfair_lock_s *)((char *)a2 + 8);
  }
  PCSpinLock::unlock(v26);
}

void sub_1B79A7BB4(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v2[11];
  if (v5)
  {
    v2[12] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    v2[3] = v6;
    operator delete(v6);
  }
  PCSpinLock::~PCSpinLock(v1);
  _Unwind_Resume(a1);
}

void OZSpline::preSplineAccess(OZSpline *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)this + 20);
    if (!v2 || (uint64_t v3 = *(os_unfair_lock_s **)(v2 + 48)) == 0) {
      uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v3);
  }
}

void OZSpline::refreshValidVerticesList(OZSpline *this)
{
  uint64_t v2 = *((void *)this + 20);
  if ((!v2 || !*(unsigned char *)(v2 + 56)) && *((unsigned char *)this + 112))
  {
    uint64_t v3 = (char **)((char *)this + 88);
    *((void *)this + 1PCSpinLock::lock(this + 2) = *((void *)this + 11);
    std::vector<void *>::reserve((void **)this + 11, (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (*((void *)this + 6) > (unint64_t)v4)
    {
      uint64_t v5 = MEMORY[0x1E4F1FA48];
      do
      {
        if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v4 + 136))(*v4, v5))
        {
          uint64_t v7 = (void *)*((void *)this + 12);
          unint64_t v6 = *((void *)this + 13);
          if ((unint64_t)v7 >= v6)
          {
            uint64_t v9 = ((char *)v7 - *v3) >> 3;
            if ((unint64_t)(v9 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v10 = v6 - (void)*v3;
            uint64_t v11 = v10 >> 2;
            if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
              uint64_t v11 = v9 + 1;
            }
            if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v12 = v11;
            }
            if (v12) {
              unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 104, v12);
            }
            else {
              unint64_t v13 = 0;
            }
            unsigned int v14 = &v13[8 * v9];
            *(void *)unsigned int v14 = *v4;
            uint64_t v8 = v14 + 8;
            uint64_t v16 = (char *)*((void *)this + 11);
            int64_t v15 = (char *)*((void *)this + 12);
            if (v15 != v16)
            {
              do
              {
                uint64_t v17 = *((void *)v15 - 1);
                v15 -= 8;
                *((void *)v14 - atomic_store(0, (unint64_t *)this + 1) = v17;
                v14 -= 8;
              }
              while (v15 != v16);
              int64_t v15 = *v3;
            }
            *((void *)this + 1atomic_store(0, (unint64_t *)this + 1) = v14;
            *((void *)this + 1PCSpinLock::lock(this + 2) = v8;
            *((void *)this + 13) = &v13[8 * v12];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            *uint64_t v7 = *v4;
            uint64_t v8 = v7 + 1;
          }
          *((void *)this + 1PCSpinLock::lock(this + 2) = v8;
        }
        ++v4;
      }
      while ((unint64_t)v4 < *((void *)this + 6));
    }
    uint64_t v18 = (uint64_t *)*((void *)this + 11);
    unint64_t v19 = (uint64_t *)*((void *)this + 12);
    if (v18 == v19)
    {
      uint64_t v20 = 0;
      *((void *)this + 7) = 0;
    }
    else
    {
      *((void *)this + 7) = *(v19 - 1);
      uint64_t v20 = *v18;
    }
    *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v20;
    *((void *)this + 9) = v18;
    *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = v19;
  }
}

void OZSpline::postSplineAccess(OZSpline *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)this + 20);
    if (!v2 || (uint64_t v3 = *(os_unfair_lock_s **)(v2 + 48)) == 0) {
      uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v3);
  }
}

void OZSpline::~OZSpline(OZSpline *this)
{
  *(void *)this = &unk_1F1105740;
  uint64_t v2 = *((void *)this + 20);
  if (!v2 || (uint64_t v3 = *(os_unfair_lock_s **)(v2 + 48)) == 0) {
    uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v3);
  uint64_t v5 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); v5 != i; *((void *)this + 3) = i)
  {
    uint64_t v6 = *(void *)(i - 8);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      uint64_t i = *((void *)this + 3);
    }
    *(void *)(i - OZSpline::reparametrize((uint64_t)this + 8) = 0;
    uint64_t v5 = *((void *)this + 2);
    uint64_t i = *((void *)this + 3) - 8;
  }
  uint64_t v7 = (OZInterpolators *)*((void *)this + 19);
  if (v7)
  {
    OZInterpolators::~OZInterpolators(v7);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 19) = 0;
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v9);
  uint64_t v10 = (void *)*((void *)this + 11);
  if (v10)
  {
    *((void *)this + 1PCSpinLock::lock(this + 2) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 2);
  if (v11)
  {
    *((void *)this + 3) = v11;
    operator delete(v11);
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 2);
}

{
  uint64_t vars8;

  OZSpline::~OZSpline(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZSpline::copy(OZSpline *this, OZSpline *a2, void *a3, void *a4)
{
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
  *((unsigned char *)this + 145) = 1;
  VertexIter = OZSpline::getVertexIter(a2, a3);
  uint64_t v9 = OZSpline::getVertexIter(a2, a4);
  uint64_t v11 = *((void *)this + 2);
  uint64_t v10 = *((void *)this + 3);
  unint64_t v12 = (char **)((char *)this + 16);
  while (v11 != v10)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      uint64_t v10 = *((void *)this + 3);
    }
    *(void *)(v10 - OZSpline::reparametrize((uint64_t)this + 8) = 0;
    uint64_t v11 = *((void *)this + 2);
    uint64_t v10 = *((void *)this + 3) - 8;
    *((void *)this + 3) = v10;
  }
  uint64_t v14 = *((void *)a2 + 2);
  uint64_t v15 = *((void *)a2 + 3);
  if (v14 != v15 && a3 != 0 && a4 != 0)
  {
    std::vector<void *>::reserve((void **)this + 2, (v15 - v14) >> 3);
    for (; VertexIter != v9; ++VertexIter)
    {
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*VertexIter + 216))();
      uint64_t v19 = v18;
      CMTime v21 = (uint64_t *)*((void *)this + 3);
      unint64_t v20 = *((void *)this + 4);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = ((char *)v21 - *v12) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_51;
        }
        uint64_t v24 = v20 - (void)*v12;
        uint64_t v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
          uint64_t v25 = v23 + 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v26);
        }
        else {
          long long v27 = 0;
        }
        uint64_t v28 = (uint64_t *)&v27[8 * v23];
        uint64_t *v28 = v19;
        CMTime v22 = v28 + 1;
        CMTime v30 = (char *)*((void *)this + 2);
        unint64_t v29 = (char *)*((void *)this + 3);
        if (v29 != v30)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--uint64_t v28 = v31;
          }
          while (v29 != v30);
          unint64_t v29 = *v12;
        }
        *((void *)this + PCSpinLock::lock(this + 2) = v28;
        *((void *)this + 3) = v22;
        *((void *)this + 4) = &v27[8 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v21 = v18;
        CMTime v22 = v21 + 1;
      }
      *((void *)this + 3) = v22;
    }
    uint64_t v32 = (*(uint64_t (**)(void))(*(void *)*v9 + 216))();
    unint64_t v33 = *((void *)this + 4);
    uint64_t v34 = (uint64_t *)*((void *)this + 3);
    if ((unint64_t)v34 >= v33)
    {
      uint64_t v36 = ((char *)v34 - *v12) >> 3;
      if ((unint64_t)(v36 + 1) >> 61) {
LABEL_51:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      uint64_t v37 = v33 - (void)*v12;
      uint64_t v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
        uint64_t v38 = v36 + 1;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39) {
        long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v39);
      }
      else {
        long long v40 = 0;
      }
      unint64_t v41 = (uint64_t *)&v40[8 * v36];
      unint64_t v42 = &v40[8 * v39];
      uint64_t *v41 = v32;
      CMTimeEpoch v35 = v41 + 1;
      unint64_t v44 = (char *)*((void *)this + 2);
      unint64_t v43 = (char *)*((void *)this + 3);
      if (v43 != v44)
      {
        do
        {
          uint64_t v45 = *((void *)v43 - 1);
          v43 -= 8;
          *--unint64_t v41 = v45;
        }
        while (v43 != v44);
        unint64_t v43 = *v12;
      }
      *((void *)this + PCSpinLock::lock(this + 2) = v41;
      *((void *)this + 3) = v35;
      *((void *)this + 4) = v42;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *uint64_t v34 = v32;
      CMTimeEpoch v35 = v34 + 1;
    }
    *((void *)this + 3) = v35;
  }
  CMTime v46 = (OZInterpolators *)*((void *)this + 19);
  if (v46)
  {
    OZInterpolators::~OZInterpolators(v46);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 19) = 0;
  operator new();
}

void sub_1B79A8298(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void **OZSpline::getVertexIter(OZSpline *this, void *a2)
{
  uint64_t v2 = (void **)*((void *)this + 5);
  uint64_t v3 = *((void *)this + 15);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3) - v4;
  if (v3 < (unint64_t)(v5 >> 3) && *(void **)(v4 + 8 * v3) == a2)
  {
    v2 += v3;
  }
  else
  {
    uint64_t v6 = v3 - 1;
    if (v3 >= 1 && *(void **)(v4 + 8 * v6) == a2)
    {
      v2 += v6;
      *((void *)this + 15) = v6;
    }
    else
    {
      unint64_t v7 = v3 + 1;
      if (v7 < v5 >> 3 && *(void **)(v4 + 8 * v7) == a2)
      {
        v2 += v7;
        *((void *)this + 15) = v7;
      }
      else
      {
        uint64_t v8 = (void **)*((void *)this + 6);
        uint64_t v9 = (void **)*((void *)this + 5);
        if (v8 != v2)
        {
          while (*v9 != a2)
          {
            if (++v9 == v8)
            {
              uint64_t v9 = (void **)*((void *)this + 6);
              break;
            }
          }
        }
        *((void *)this + 15) = v9 - v2;
        if (v9 != v8) {
          return v9;
        }
      }
    }
  }
  return v2;
}

void OZSpline::operator=(OZSpline *a1, os_unfair_lock_s *a2)
{
  uint64_t v4 = *(void *)&a2[40]._os_unfair_lock_opaque;
  if (!v4 || (uint64_t v5 = *(os_unfair_lock_s **)(v4 + 48)) == 0) {
    uint64_t v5 = a2 + 2;
  }
  PCSpinLock::lock(v5);
  uint64_t v6 = *(void ***)&a2[4]._os_unfair_lock_opaque;
  unint64_t v7 = *(void ***)&a2[6]._os_unfair_lock_opaque;
  if (v6 == v7)
  {
    uint64_t v10 = a1;
    uint64_t v11 = (OZSpline *)a2;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = *v6;
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = a1;
    uint64_t v11 = (OZSpline *)a2;
  }
  OZSpline::copy(v10, v11, v8, v9);
}

BOOL OZSpline::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(const void **)(a1 + 16);
  size_t v6 = *(void *)(v5 + 8) - (void)v4;
  uint64_t v8 = a2 + 16;
  unint64_t v7 = *(const void **)(a2 + 16);
  return v6 == *(void *)(v8 + 8) - (void)v7
      && !memcmp(v4, v7, v6)
      && *(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144)
      && (OZInterpolators::operator==(*(unint64_t **)(a1 + 152), *(unint64_t **)(a2 + 152)) & 1) != 0;
}

void OZSpline::setInterpolation(OZSpline *this, uint64_t a2)
{
  if (a2 != 100)
  {
    uint64_t v5 = *((void *)this + 20);
    if (!v5 || (size_t v6 = *(os_unfair_lock_s **)(v5 + 48)) == 0) {
      size_t v6 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v6);
    for (uint64_t i = (void *)*((void *)this + 5); i != *((void **)this + 6); ++i)
    {
      if (!(*(unsigned int (**)(void, uint64_t))(*(void *)*i + 184))(*i, 2)
        || **((unsigned char **)this + 21))
      {
        (*(void (**)(void, uint64_t))(*(void *)*i + 200))(*i, a2);
      }
    }
    uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), a2);
    (*(void (**)(uint64_t, OZSpline *, void))(*(void *)Interpolator + 16))(Interpolator, this, MEMORY[0x1E4F1FA48]);
    uint64_t v9 = *((void *)this + 20);
    if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
      uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v10);
  }
}

uint64_t OZSpline::getInterpolation(OZSpline *this, unsigned int *a2, BOOL *a3, BOOL *a4)
{
  if (*((void *)this + 2) == *((void *)this + 3))
  {
    int v13 = *(_DWORD *)(*((void *)this + 21) + 32);
  }
  else
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 5);
    uint64_t v10 = *v8;
    uint64_t v9 = v8 + 1;
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 208))(v10);
    *a2 = v11;
    if (v9 == *((void **)this + 6))
    {
      int v13 = v11;
      goto LABEL_10;
    }
    while (1)
    {
      int v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 208))();
      if (v12 != *a2) {
        break;
      }
      int v13 = v12;
      if (++v9 == *((void **)this + 6)) {
        goto LABEL_10;
      }
    }
    int v13 = 100;
  }
  *a2 = v13;
LABEL_10:
  if (a3) {
    *a3 = OZSpline::interpolatorUsesTangents((OZInterpolators **)this, v13, 0);
  }
  if (a4)
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), *a2);
    *a4 = (*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator) ^ 1;
  }
  return 1;
}

uint64_t OZSpline::interpolatorUsesTangents(OZInterpolators **this, int a2, void *a3)
{
  uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], a2);
  size_t v6 = this[20];
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 5);
    if (v7)
    {
      if ((*(unsigned int (**)(uint64_t, OZInterpolators **, void *))(*(void *)v7 + 112))(v7, this, a3)) {
        uint64_t Interpolator = v7;
      }
    }
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)Interpolator + 56);

  return v8(Interpolator);
}

void OZSpline::setExtrapolation(OZSpline *this, int a2, int a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (uint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  uint64_t v8 = 36;
  if (a3) {
    uint64_t v8 = 40;
  }
  uint64_t v9 = *((void *)this + 20);
  *(_DWORD *)(*((void *)this + 21) + vOZSpline::reparametrize((uint64_t)this + 8) = a2;
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }

  PCSpinLock::unlock(v10);
}

uint64_t OZSpline::getExtrapolation(OZSpline *this, int a2)
{
  uint64_t v2 = 40;
  if (!a2) {
    uint64_t v2 = 36;
  }
  return *(unsigned int *)(*((void *)this + 21) + v2);
}

void OZSpline::getRangeU(OZSpline *this@<X0>, const CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a3->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = v6->epoch;
  unsigned int v16 = 0;
  uint64_t v7 = *((void *)this + 20);
  if (!v7 || (uint64_t v8 = *(os_unfair_lock_s **)(v7 + 48)) == 0) {
    uint64_t v8 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v8);
  (*(void (**)(OZSpline *, unsigned int *, void, void))(*(void *)this + 16))(this, &v16, 0, 0);
  OZSpline::getMaxValueU(this, a2, 0, (uint64_t)&v13);
  OZSpline::getMinValueU(this, a2, 0, (uint64_t)&v12);
  CMTime time1 = v13;
  CMTime time2 = v12;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
  *(_OWORD *)&a3->CMTimeValue value = v14;
  a3->CMTimeEpoch epoch = v15;
  uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator))
  {
    if (*((unsigned char *)this + 144))
    {
      CMTime time1 = *a3;
      CMTime time2 = *v6;
      if (CMTimeCompare(&time1, &time2))
      {
        OZSpline::getStep(this, &v13);
        CMTime time1 = *a3;
        CMTime time2 = v13;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v14);
        *(_OWORD *)&a3->CMTimeValue value = v14;
        a3->CMTimeEpoch epoch = v15;
      }
    }
  }
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (unsigned int v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    unsigned int v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v11);
}

__n128 OZSpline::getMaxValueU@<Q0>(OZSpline *this@<X0>, const CMTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v23 = 0;
  if (a3)
  {
    uint64_t v8 = *((void *)this + 20);
    if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
      uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v9);
    if ((OZSpline::getLastValidVertex(this, &v23, a2) & 1) == 0)
    {
      uint64_t v10 = *((void *)this + 20);
      if (!v10 || (unsigned int v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
        unsigned int v11 = (os_unfair_lock_s *)((char *)this + 8);
      }
      PCSpinLock::unlock(v11);
      goto LABEL_16;
    }
  }
  else if (!OZSpline::getLastValidVertex(this, &v23, a2))
  {
LABEL_16:
    uint64_t v20 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a4 = *MEMORY[0x1E4F1FA48];
    *(void *)(a4 + 16) = *(void *)(v20 + 16);
    return result;
  }
  CMTime v12 = v23;
  uint64_t v13 = *((void *)v23 + 4);
  *(_OWORD *)a4 = *((_OWORD *)v23 + 1);
  *(void *)(a4 + 16) = v13;
  long long v14 = (OZInterpolators *)*((void *)this + 19);
  int v15 = (*(uint64_t (**)(void *))(*(void *)v12 + 208))(v12);
  uint64_t Interpolator = OZInterpolators::getInterpolator(v14, v15);
  (*(void (**)(long long *__return_ptr))(*(void *)Interpolator + 72))(&v21);
  result.n128_u64[0] = v21;
  *(_OWORD *)a4 = v21;
  *(void *)(a4 + 16) = v22;
  if (a3)
  {
    uint64_t v18 = *((void *)this + 20);
    if (!v18 || (uint64_t v19 = *(os_unfair_lock_s **)(v18 + 48)) == 0) {
      uint64_t v19 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v19);
  }
  return result;
}

void OZSpline::getMinValueU(OZSpline *this@<X0>, const CMTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v20 = 0;
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a4 = *MEMORY[0x1E4F1FA48];
  *(void *)(a4 + 16) = *(void *)(v8 + 16);
  if (a3)
  {
    uint64_t v9 = *((void *)this + 20);
    if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
      uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v10);
  }
  if (OZSpline::getFirstValidVertex(this, &v20, a2))
  {
    unsigned int v11 = v20;
    uint64_t v12 = *((void *)v20 + 4);
    *(_OWORD *)a4 = *((_OWORD *)v20 + 1);
    *(void *)(a4 + 16) = v12;
    uint64_t v13 = (OZInterpolators *)*((void *)this + 19);
    int v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 208))(v11);
    uint64_t Interpolator = OZInterpolators::getInterpolator(v13, v14);
    (*(void (**)(long long *__return_ptr))(*(void *)Interpolator + 80))(&v18);
    *(_OWORD *)a4 = v18;
    *(void *)(a4 + 16) = v19;
  }
  if (a3)
  {
    uint64_t v16 = *((void *)this + 20);
    if (!v16 || (uint64_t v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
      uint64_t v17 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v17);
  }
}

CMTime *OZSpline::getStep@<X0>(OZSpline *this@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 21);
  if (*v2)
  {
    int32_t v3 = 1;
    return CMTimeMake(a2, 1, v3);
  }
  uint64_t v4 = (OZSplineNode *)*((void *)this + 20);
  if (!v4 || !v2[4])
  {
    int32_t v3 = 30;
    return CMTimeMake(a2, 1, v3);
  }
  return OZSplineNode::getFrameDuration(v4, a2);
}

BOOL OZSpline::getFirstValidVertex(OZSpline *this, void **a2, const CMTime *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v6 = (void *)*((void *)this + 8);
    BOOL result = v6 != 0;
    if (a2) {
LABEL_5:
    }
      *a2 = v6;
  }
  else
  {
    uint64_t v8 = (void *)*((void *)this + 5);
    if (*((void **)this + 6) == v8)
    {
      return 0;
    }
    else
    {
      while (!(*(unsigned int (**)(void, const CMTime *))(*(void *)*v8 + 136))(*v8, a3))
      {
        if (++v8 == *((void **)this + 6)) {
          return 0;
        }
      }
      if (a2)
      {
        uint64_t v6 = (void *)*v8;
        BOOL result = 1;
        goto LABEL_5;
      }
      return 1;
    }
  }
  return result;
}

uint64_t OZSpline::getLastValidVertex(OZSpline *this, void **a2, const CMTime *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v6 = (void *)*((void *)this + 7);
    if (v6)
    {
      if (a2) {
        *a2 = v6;
      }
      return 1;
    }
    if (a2)
    {
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    return 0;
  }
  uint64_t v8 = *((void *)this + 3);
  if (*((void *)this + 2) == v8) {
    return 0;
  }
  memset(&v12, 0, sizeof(v12));
  CMTime v11 = *(CMTime *)(*(void *)(v8 - 8) + 16);
  if (**((unsigned char **)this + 21)) {
    int32_t v9 = 1;
  }
  else {
    int32_t v9 = 100;
  }
  CMTimeMake(&v10, 1, v9);
  CMTime v14 = v11;
  CMTime v13 = v10;
  PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v12);
  return OZSpline::getPreviousValidVertex(this, &v12, a2, a3, 0);
}

double OZSpline::getMaxValueV(OZSpline *this, const CMTime *a2, CMTime *a3)
{
  uint64_t v16 = 0;
  if (!OZSpline::getFirstValidVertex(this, &v16, MEMORY[0x1E4F1FA48])) {
    return -1.79769313e308;
  }
  double v6 = (*(double (**)(void *, const CMTime *))(*(void *)v16 + 24))(v16, a2);
  if (v6 <= -1.79769313e308)
  {
    uint64_t v7 = v16;
    double v6 = -1.79769313e308;
  }
  else
  {
    uint64_t v7 = v16;
    if (a3)
    {
      long long v8 = *((_OWORD *)v16 + 1);
      a3->CMTimeEpoch epoch = *((void *)v16 + 4);
      *(_OWORD *)&a3->CMTimeValue value = v8;
    }
  }
  if (OZSpline::getNextValidVertex((void ***)this, v7, &v16, MEMORY[0x1E4F1FA48]))
  {
    int32_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      double v10 = (*(double (**)(void *, const CMTime *))(*(void *)v16 + 24))(v16, a2);
      BOOL v11 = v10 <= v6;
      if (v10 > v6) {
        double v6 = v10;
      }
      CMTime v12 = v16;
      if (!v11 && a3 != 0)
      {
        long long v14 = *((_OWORD *)v16 + 1);
        a3->CMTimeEpoch epoch = *((void *)v16 + 4);
        *(_OWORD *)&a3->CMTimeValue value = v14;
        double v6 = v10;
      }
    }
    while ((OZSpline::getNextValidVertex((void ***)this, v12, &v16, v9) & 1) != 0);
  }
  return v6;
}

uint64_t OZSpline::getNextValidVertex(void ***this, void *a2, void **a3, const CMTime *a4)
{
  if (*((unsigned char *)this + 112))
  {
    ValidVertexIter = OZSpline::getValidVertexIter((OZSpline *)this, a2);
    uint64_t v7 = this[10];
    long long v8 = ValidVertexIter + 1;
    if (v7 == ValidVertexIter || v8 == v7)
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = 0;
      }
    }
    else
    {
      if (a3) {
        *a3 = *v8;
      }
      return 1;
    }
  }
  else
  {
    VertexIter = OZSpline::getVertexIter((OZSpline *)this, a2);
    return OZSpline::getNextValidVertex((OZSpline *)this, &VertexIter, a3, (uint64_t)a4);
  }
  return result;
}

double OZSpline::getMaxValueVWithTangents(OZSpline *this, const CMTime *a2, CMTime *a3)
{
  double v25 = 0.0;
  double v26 = 0.0;
  uint64_t v24 = 0;
  if (!OZSpline::getFirstValidVertex(this, &v24, MEMORY[0x1E4F1FA48])) {
    return -1.79769313e308;
  }
  double v6 = (*(double (**)(void *, const CMTime *))(*(void *)v24 + 24))(v24, a2);
  uint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  (*(void (**)(void *, void, double *, void))(*(void *)v24 + 56))(v24, 0, &v26, MEMORY[0x1E4F1FA48]);
  (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 64))(v24, 0, &v25, v7);
  double v8 = v26 * 3.0 * 4.0;
  double v9 = v25 * 3.0 * 4.0;
  double v25 = v9;
  double v26 = v8;
  double v10 = v6 + v8;
  double v11 = -1.79769313e308;
  if (v6 + v8 > -1.79769313e308)
  {
    if (!a3)
    {
      double v13 = v6 + v9;
      if (v13 <= v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    CMTimeEpoch v12 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v12;
    double v11 = v6 + v8;
  }
  double v13 = v6 + v9;
  double v10 = v11;
  if (v13 <= v11) {
    goto LABEL_11;
  }
  if (a3)
  {
    CMTimeEpoch v14 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v14;
  }
LABEL_10:
  double v10 = v13;
LABEL_11:
  if (OZSpline::getNextValidVertex((void ***)this, v24, &v24, MEMORY[0x1E4F1FA48]))
  {
    while (1)
    {
      double v15 = (*(double (**)(void *, const CMTime *))(*(void *)v24 + 24))(v24, a2);
      (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 56))(v24, 0, &v26, v7);
      (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 64))(v24, 0, &v25, v7);
      double v16 = v25 * 3.0 * 4.0;
      double v25 = v16;
      double v26 = v26 * 3.0 * 4.0;
      double v17 = v15 + v26;
      if (v15 + v26 <= v10) {
        goto LABEL_15;
      }
      if (a3) {
        break;
      }
      double v22 = v15 + v16;
      if (v22 > v17) {
        double v10 = v22;
      }
      else {
        double v10 = v15 + v26;
      }
LABEL_23:
      if ((OZSpline::getNextValidVertex((void ***)this, v24, &v24, v7) & 1) == 0) {
        return v10;
      }
    }
    CMTimeEpoch v18 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v18;
    double v10 = v17;
LABEL_15:
    double v19 = v15 + v16;
    if (v19 <= v10)
    {
      BOOL v20 = 1;
    }
    else
    {
      double v10 = v19;
      BOOL v20 = a3 == 0;
    }
    if (!v20)
    {
      CMTimeEpoch v21 = *((void *)v24 + 4);
      *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
      a3->CMTimeEpoch epoch = v21;
      double v10 = v19;
    }
    goto LABEL_23;
  }
  return v10;
}

double OZSpline::getMinValueV(OZSpline *this, const CMTime *a2, CMTime *a3)
{
  double v16 = 0;
  if (!OZSpline::getFirstValidVertex(this, &v16, MEMORY[0x1E4F1FA48])) {
    return 1.79769313e308;
  }
  double v6 = (*(double (**)(void *, const CMTime *))(*(void *)v16 + 24))(v16, a2);
  if (v6 >= 1.79769313e308)
  {
    uint64_t v7 = v16;
    double v6 = 1.79769313e308;
  }
  else
  {
    uint64_t v7 = v16;
    if (a3)
    {
      long long v8 = *((_OWORD *)v16 + 1);
      a3->CMTimeEpoch epoch = *((void *)v16 + 4);
      *(_OWORD *)&a3->CMTimeValue value = v8;
    }
  }
  if (OZSpline::getNextValidVertex((void ***)this, v7, &v16, MEMORY[0x1E4F1FA48]))
  {
    double v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      double v10 = (*(double (**)(void *, const CMTime *))(*(void *)v16 + 24))(v16, a2);
      BOOL v11 = v10 < v6;
      if (v10 < v6) {
        double v6 = v10;
      }
      CMTimeEpoch v12 = v16;
      if (v11 && a3 != 0)
      {
        long long v14 = *((_OWORD *)v16 + 1);
        a3->CMTimeEpoch epoch = *((void *)v16 + 4);
        *(_OWORD *)&a3->CMTimeValue value = v14;
        double v6 = v10;
      }
    }
    while ((OZSpline::getNextValidVertex((void ***)this, v12, &v16, v9) & 1) != 0);
  }
  return v6;
}

double OZSpline::getMinValueVWithTangents(OZSpline *this, const CMTime *a2, CMTime *a3)
{
  double v25 = 0.0;
  double v26 = 0.0;
  uint64_t v24 = 0;
  if (!OZSpline::getFirstValidVertex(this, &v24, MEMORY[0x1E4F1FA48])) {
    return 1.79769313e308;
  }
  double v6 = (*(double (**)(void *, const CMTime *))(*(void *)v24 + 24))(v24, a2);
  uint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  (*(void (**)(void *, void, double *, void))(*(void *)v24 + 56))(v24, 0, &v26, MEMORY[0x1E4F1FA48]);
  (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 64))(v24, 0, &v25, v7);
  double v8 = v26 * 3.0 * 4.0;
  double v9 = v25 * 3.0 * 4.0;
  double v25 = v9;
  double v26 = v8;
  double v10 = v6 + v8;
  double v11 = 1.79769313e308;
  if (v6 + v8 < 1.79769313e308)
  {
    if (!a3)
    {
      double v13 = v6 + v9;
      if (v13 >= v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    CMTimeEpoch v12 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v12;
    double v11 = v6 + v8;
  }
  double v13 = v6 + v9;
  double v10 = v11;
  if (v13 >= v11) {
    goto LABEL_11;
  }
  if (a3)
  {
    CMTimeEpoch v14 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v14;
  }
LABEL_10:
  double v10 = v13;
LABEL_11:
  if (OZSpline::getNextValidVertex((void ***)this, v24, &v24, MEMORY[0x1E4F1FA48]))
  {
    while (1)
    {
      double v15 = (*(double (**)(void *, const CMTime *))(*(void *)v24 + 24))(v24, a2);
      (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 56))(v24, 0, &v26, v7);
      (*(void (**)(void *, void, double *, const CMTime *))(*(void *)v24 + 64))(v24, 0, &v25, v7);
      double v16 = v25 * 3.0 * 4.0;
      double v25 = v16;
      double v26 = v26 * 3.0 * 4.0;
      double v17 = v15 + v26;
      if (v15 + v26 >= v10) {
        goto LABEL_15;
      }
      if (a3) {
        break;
      }
      double v22 = v15 + v16;
      if (v22 < v17) {
        double v10 = v22;
      }
      else {
        double v10 = v15 + v26;
      }
LABEL_23:
      if ((OZSpline::getNextValidVertex((void ***)this, v24, &v24, v7) & 1) == 0) {
        return v10;
      }
    }
    CMTimeEpoch v18 = *((void *)v24 + 4);
    *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
    a3->CMTimeEpoch epoch = v18;
    double v10 = v17;
LABEL_15:
    double v19 = v15 + v16;
    if (v19 >= v10)
    {
      BOOL v20 = 1;
    }
    else
    {
      double v10 = v19;
      BOOL v20 = a3 == 0;
    }
    if (!v20)
    {
      CMTimeEpoch v21 = *((void *)v24 + 4);
      *(_OWORD *)&a3->CMTimeValue value = *((_OWORD *)v24 + 1);
      a3->CMTimeEpoch epoch = v21;
      double v10 = v19;
    }
    goto LABEL_23;
  }
  return v10;
}

void OZSpline::offsetSpline(OZSpline *this, const CMTime *a2, double a3, double a4, double a5, int a6, int a7, const CMTime *a8)
{
  uint64_t v16 = *((void *)this + 20);
  if (!v16 || (double v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
    double v17 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v17);
  double v18 = a3
      - (*(double (**)(OZSpline *, const CMTime *, void, void))(*(void *)this + 240))(this, a2, MEMORY[0x1E4F1FA48], 0);
  if (a6)
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0;
    double v19 = v18;
    if (OZSpline::getPreviousValidVertex(this, a2, &v43, MEMORY[0x1E4F1FA48], 0))
    {
      double v20 = v18 + (*(double (**)(void *, const CMTime *))(*(void *)v43 + 24))(v43, a8);
      double v21 = a4 - v20;
      if (v20 <= a4) {
        double v21 = -0.0;
      }
      if (v20 >= a5) {
        double v19 = v18 + v21;
      }
      else {
        double v19 = v18 + a5 - v20;
      }
    }
    NextValidBOOL Vertex = OZSpline::getNextValidVertex(this, a2, &v42, MEMORY[0x1E4F1FA48], 0);
    v36.n128_f64[0] = v18;
    if (NextValidVertex)
    {
      v36.n128_f64[0] = v18
                      + (*(double (**)(void *, const CMTime *, double))(*(void *)v42 + 24))(v42, a8, v18);
      double v37 = a4 - v36.n128_f64[0];
      if (v36.n128_f64[0] <= a4) {
        double v37 = -0.0;
      }
      if (v36.n128_f64[0] >= a5)
      {
        v36.n128_f64[0] = v18 + v37;
        if (!a7)
        {
LABEL_45:
          if (v43)
          {
            v38.n128_f64[0] = v18
                            + (*(double (**)(void *, const CMTime *, __n128))(*(void *)v43 + 24))(v43, a8, v36);
            if (v38.n128_f64[0] > a4) {
              v38.n128_f64[0] = a4;
            }
            if (v38.n128_f64[0] < a5) {
              v38.n128_f64[0] = a5;
            }
            (*(void (**)(void *, const CMTime *, __n128))(*(void *)v43 + 32))(v43, a8, v38);
          }
          if (v42)
          {
            v39.n128_f64[0] = v18
                            + (*(double (**)(void *, const CMTime *, __n128))(*(void *)v42 + 24))(v42, a8, v36);
            if (v39.n128_f64[0] > a4) {
              v39.n128_f64[0] = a4;
            }
            if (v39.n128_f64[0] < a5) {
              v39.n128_f64[0] = a5;
            }
            (*(void (**)(void *, const CMTime *, __n128))(*(void *)v42 + 32))(v42, a8, v39);
          }
          goto LABEL_57;
        }
LABEL_41:
        if (fabs(v19) < fabs(v18)) {
          double v18 = v19;
        }
        if (fabs(v36.n128_f64[0]) < fabs(v18)) {
          double v18 = v36.n128_f64[0];
        }
        goto LABEL_45;
      }
      v36.n128_f64[0] = v18 + a5 - v36.n128_f64[0];
    }
    if (!a7) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }
  if (a7)
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 5); i != *((uint64_t **)this + 6); ++i)
    {
      double v23 = (*(double (**)(uint64_t, const CMTime *))(*(void *)*i + 24))(*i, a8);
      double v24 = v18 + v23;
      double v25 = fabs(v18);
      double v26 = vabdd_f64(a4, v23);
      if (v18 + v23 > a4 && v25 > v26) {
        double v18 = a4 - v23;
      }
      BOOL v28 = v24 < a5;
      double v29 = fabs(v18);
      double v30 = vabdd_f64(v23, a5);
      if (v28 && v29 > v30) {
        double v18 = a5 - v23;
      }
    }
  }
  else
  {
    uint64_t i = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v32 = (uint64_t *)*((void *)this + 5);
  if (i != v32)
  {
    do
    {
      v33.n128_f64[0] = v18 + (*(double (**)(uint64_t, const CMTime *))(*(void *)*v32 + 24))(*v32, a8);
      if (v33.n128_f64[0] > a4) {
        v33.n128_f64[0] = a4;
      }
      if (v33.n128_f64[0] < a5) {
        v33.n128_f64[0] = a5;
      }
      uint64_t v34 = *v32++;
      (*(void (**)(uint64_t, const CMTime *, __n128))(*(void *)v34 + 32))(v34, a8, v33);
    }
    while (v32 != *((uint64_t **)this + 6));
  }
LABEL_57:
  uint64_t v40 = *((void *)this + 20);
  if (!v40 || (unint64_t v41 = *(os_unfair_lock_s **)(v40 + 48)) == 0) {
    unint64_t v41 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v41);
}

uint64_t OZSpline::getPreviousValidVertex(OZSpline *this, const CMTime *a2, void **a3, const CMTime *a4, int a5)
{
  if (a3) {
    *a3 = 0;
  }
  uint64_t v10 = *((void *)this + 3);
  if (*((void *)this + 2) == v10) {
    return 0;
  }
  double v11 = (uint64_t *)*((void *)this + 5);
  if (*((uint64_t **)this + 6) != v11)
  {
    CMTimeEpoch v12 = (uint64_t *)*((void *)this + 5);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, const CMTime *))(*(void *)*v12 + 136))(*v12, a4))
      {
        CMTimeEpoch v22 = *(void *)(*v12 + 32);
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v12 + 16);
        time1.CMTimeEpoch epoch = v22;
        CMTime time2 = *a2;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          double v11 = v12;
        }
        else
        {
          if (v12 == *((uint64_t **)this + 5))
          {
            uint64_t result = 0;
LABEL_33:
            if (!a3) {
              return result;
            }
            double v21 = 0;
            goto LABEL_30;
          }
          if (!a5) {
            goto LABEL_27;
          }
          double v13 = v12 + 1;
          do
          {
            CMTimeEpoch v14 = v13;
            uint64_t v15 = *v13++;
            char v16 = (*(uint64_t (**)(uint64_t, const CMTime *))(*(void *)v15 + 136))(v15, a4);
            double v17 = (uint64_t *)*((void *)this + 6);
          }
          while ((v16 & 1) == 0 && v14 != v17);
          if (v14 == v17)
          {
LABEL_27:
            uint64_t result = (*(uint64_t (**)(uint64_t, const CMTime *))(*(void *)*v11 + 136))(*v11, a4);
            if (result)
            {
              if (!a3) {
                return 1;
              }
              goto LABEL_29;
            }
            goto LABEL_33;
          }
          uint64_t v18 = *(v13 - 1);
          CMTimeEpoch v12 = v13 - 1;
          CMTimeEpoch v23 = *(void *)(v18 + 32);
          *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v18 + 16);
          time1.CMTimeEpoch epoch = v23;
          CMTime time2 = *a2;
          double v11 = v12;
          if (!CMTimeCompare(&time1, &time2))
          {
            double v11 = v12;
            if (a3) {
              goto LABEL_29;
            }
            return 1;
          }
        }
      }
      if (++v12 == *((uint64_t **)this + 6))
      {
        uint64_t v10 = *((void *)this + 3);
        break;
      }
    }
  }
  uint64_t v19 = *(void *)(v10 - 8);
  CMTimeEpoch v24 = *(void *)(v19 + 32);
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v19 + 16);
  time1.CMTimeEpoch epoch = v24;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) < 0
    && (*(unsigned int (**)(void, const CMTime *))(**(void **)(*((void *)this + 3) - 8) + 136))(*(void *)(*((void *)this + 3) - 8), a4))
  {
    if (!a3) {
      return 1;
    }
    double v11 = (uint64_t *)(*((void *)this + 3) - 8);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, const CMTime *))(*(void *)*v11 + 136))(*v11, a4);
    if (!a3 || !result) {
      return result;
    }
  }
LABEL_29:
  double v21 = (void *)*v11;
  uint64_t result = 1;
LABEL_30:
  *a3 = v21;
  return result;
}

uint64_t OZSpline::getNextValidVertex(OZSpline *this, const CMTime *a2, void **a3, const CMTime *a4, int a5)
{
  double v9 = (void *)*((void *)this + 5);
  if (a3) {
    *a3 = 0;
  }
  if (*((void *)this + 2) == *((void *)this + 3) || *((void **)this + 6) == v9) {
    return 0;
  }
  uint64_t v10 = 0;
  int v11 = a5 ^ 1;
  CMTimeEpoch v12 = (CMTime *)MEMORY[0x1E4F1FA48];
  while (!(*(unsigned int (**)(void, const CMTime *))(*(void *)*v9 + 136))(*v9, a4))
  {
    uint64_t v14 = v10;
LABEL_15:
    ++v9;
    uint64_t v10 = v14;
    if (v9 == *((void **)this + 6)) {
      return 0;
    }
  }
  CMTimeEpoch v16 = *(void *)(*v9 + 32);
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v9 + 16);
  time1.CMTimeEpoch epoch = v16;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
    CMTimeEpoch v17 = *(void *)(*v9 + 32);
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v9 + 16);
    time1.CMTimeEpoch epoch = v17;
    CMTime time2 = *v12;
    int v13 = CMTimeCompare(&time1, &time2) ? 1 : v11;
    uint64_t v14 = v13 ^ 1 | v10;
    if (v13 & 1) != 0 || ((v10 ^ 1)) {
      goto LABEL_15;
    }
  }
  if (a3) {
    *a3 = (void *)*v9;
  }
  return 1;
}

uint64_t OZSpline::createSegment(OZSpline *this, const CMTime *a2, const CMTime *a3, const CMTime *a4, int a5)
{
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (int v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    int v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v11);
  CMTime v33 = *a4;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  double v29 = 0;
  double v30 = 0;
  OZSpline::getVertexHandle(this, a2, &v32, 0);
  OZSpline::getVertexHandle(this, a3, &v31, 0);
  CMTime time1 = *a2;
  CMTime time2 = v33;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
  OZSpline::getVertexHandle(this, &v28, &v30, 0);
  CMTime time1 = *a3;
  CMTime time2 = v33;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
  OZSpline::getVertexHandle(this, &v28, &v29, 0);
  if (v32 && v31 && v30 && v29
    || (CMTime time1 = *a2,
        uint64_t v15 = (CMTime *)MEMORY[0x1E4F1FA08],
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08],
        int32_t v16 = CMTimeCompare(&time1, &time2),
        CMTimeEpoch v17 = (CMTime *)MEMORY[0x1E4F1FA10],
        !v16)
    && (time1 = *a3, CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10], !CMTimeCompare(&time1, &time2)))
  {
    uint64_t v12 = *((void *)this + 20);
    if (!v12 || (int v13 = *(os_unfair_lock_s **)(v12 + 48)) == 0) {
      int v13 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v13);
    return 0;
  }
  else
  {
    uint64_t v18 = *((void *)this + 20);
    if (!v18 || (uint64_t v19 = *(os_unfair_lock_s **)(v18 + 48)) == 0) {
      uint64_t v19 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v19);
    CMTime time1 = *a2;
    CMTime time2 = *v15;
    uint64_t v20 = 0;
    if (CMTimeCompare(&time1, &time2) && !v30)
    {
      CMTime time1 = *a2;
      CMTime time2 = v33;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      CMTime time1 = *a2;
      CMTime time2 = v33;
      double v21 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v27);
      uint64_t v22 = MEMORY[0x1E4F1FA48];
      (*(void (**)(OZSpline *, unsigned char *, void, void, double))(*(void *)this + 240))(this, v27, MEMORY[0x1E4F1FA48], 0, v21);
      uint64_t v20 = (*(uint64_t (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)this + 192))(this, &v28, v22, 1);
      (*(void (**)(OZSpline *, const CMTime *, uint64_t, void))(*(void *)this + 240))(this, a2, v22, 0);
      (*(void (**)(OZSpline *, const CMTime *, uint64_t, uint64_t))(*(void *)this + 192))(this, a2, v22, 1);
    }
    CMTime time1 = *a3;
    CMTime time2 = *v17;
    uint64_t v23 = 0;
    if (CMTimeCompare(&time1, &time2) && !v29)
    {
      uint64_t v24 = MEMORY[0x1E4F1FA48];
      (*(void (**)(OZSpline *, const CMTime *, void, void))(*(void *)this + 240))(this, a3, MEMORY[0x1E4F1FA48], 0);
      uint64_t v23 = (*(uint64_t (**)(OZSpline *, const CMTime *, uint64_t, uint64_t))(*(void *)this + 192))(this, a3, v24, 1);
      CMTime time1 = *a3;
      CMTime time2 = v33;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
      CMTime time1 = *a3;
      CMTime time2 = v33;
      double v25 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v27);
      (*(void (**)(OZSpline *, unsigned char *, uint64_t, void, double))(*(void *)this + 240))(this, v27, v24, 0, v25);
      (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)this + 192))(this, &v28, v24, 1);
    }
    if (a5)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 200))(v20, 15);
        (*(void (**)(uint64_t, void, double))(*(void *)v20 + 48))(v20, MEMORY[0x1E4F1FA48], 1.0);
      }
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 200))(v23, 15);
        (*(void (**)(uint64_t, void, double))(*(void *)v23 + 48))(v23, MEMORY[0x1E4F1FA48], 1.0);
      }
      return 1;
    }
    if (v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 200))(v20, 1);
    }
    if (!v23) {
      return 1;
    }
    uint64_t v14 = 1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 200))(v23, 1);
  }
  return v14;
}

BOOL OZSpline::getVertexHandle(OZSpline *this, const CMTime *a2, void **a3, int a4)
{
  if (a4)
  {
    uint64_t v8 = *((void *)this + 20);
    if (!v8 || (double v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
      double v9 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v9);
  }
  uint64_t v10 = *((void *)this + 5);
  if (*((void *)this + 6) == v10)
  {
    BOOL v14 = 0;
    if (!a4) {
      return v14;
    }
  }
  else
  {
    uint64_t v11 = v10 + 8;
    while (1)
    {
      uint64_t v12 = *(void *)(v11 - 8);
      CMTimeEpoch v18 = *(void *)(v12 + 32);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v12 + 16);
      time1.CMTimeEpoch epoch = v18;
      CMTime time2 = *a2;
      int32_t v13 = CMTimeCompare(&time1, &time2);
      if (!v13)
      {
        if (a3) {
          break;
        }
      }
      if (v11 != *((void *)this + 6))
      {
        v11 += 8;
        if (v13) {
          continue;
        }
      }
      BOOL v14 = v13 == 0;
      if (a4) {
        goto LABEL_17;
      }
      return v14;
    }
    *a3 = *(void **)(v11 - 8);
    BOOL v14 = 1;
    if (!a4) {
      return v14;
    }
  }
LABEL_17:
  uint64_t v15 = *((void *)this + 20);
  if (!v15 || (int32_t v16 = *(os_unfair_lock_s **)(v15 + 48)) == 0) {
    int32_t v16 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v16);
  return v14;
}

uint64_t OZSpline::setVertexSpeed(OZSpline *this, void *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  switch(a3)
  {
    case 0:
      uint64_t v4 = 1;
      (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, 1);
      return v4;
    case 1:
      (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, 17);
      goto LABEL_8;
    case 2:
      (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, 16);
      goto LABEL_8;
    case 3:
      (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, 15);
LABEL_8:
      (*(void (**)(void *, void, double))(*(void *)a2 + 48))(a2, MEMORY[0x1E4F1FA48], 1.0);
      uint64_t v4 = 1;
      break;
    default:
      return 0;
  }
  return v4;
}

void OZSpline::setClosed(OZSpline *this, char a2, void *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (uint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  if ((a2 & 1) == 0 && a3 && *((unsigned char *)this + 144))
  {
    char v43 = a2;
    CMTime __p = 0;
    uint64_t v45 = 0;
    CMTime v46 = 0;
    VertexIter = OZSpline::getVertexIter(this, a3);
    double v9 = VertexIter;
    uint64_t v11 = (void **)*((void *)this + 2);
    uint64_t v12 = (void **)*((void *)this + 3);
    uint64_t v10 = (char **)((char *)this + 16);
    if (v12 == VertexIter)
    {
      int32_t v13 = 0;
    }
    else
    {
      int32_t v13 = 0;
      BOOL v14 = VertexIter;
      do
      {
        if (v13 >= v46)
        {
          uint64_t v15 = (v13 - __p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
LABEL_71:
          }
            std::vector<double>::__throw_length_error[abi:ne180100]();
          unint64_t v16 = (v46 - __p) >> 2;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)(v46 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            CMTimeEpoch v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v17);
          }
          else {
            CMTimeEpoch v18 = 0;
          }
          uint64_t v19 = &v18[8 * v15];
          *(void *)uint64_t v19 = *v14;
          int32_t v13 = v19 + 8;
          uint64_t v20 = v45;
          if (v45 != __p)
          {
            do
            {
              uint64_t v21 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v19 - atomic_store(0, (unint64_t *)this + 1) = v21;
              v19 -= 8;
            }
            while (v20 != __p);
            uint64_t v20 = __p;
          }
          CMTime __p = v19;
          CMTime v46 = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)int32_t v13 = *v14;
          v13 += 8;
        }
        uint64_t v45 = v13;
        ++v14;
      }
      while (v14 != v12);
    }
    for (; v11 != v9; ++v11)
    {
      if (v13 >= v46)
      {
        uint64_t v22 = (v13 - __p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          goto LABEL_71;
        }
        unint64_t v23 = (v46 - __p) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v46 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          double v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v24);
        }
        else {
          double v25 = 0;
        }
        double v26 = &v25[8 * v22];
        *(void *)double v26 = *v11;
        int32_t v13 = v26 + 8;
        long long v27 = v45;
        if (v45 != __p)
        {
          do
          {
            uint64_t v28 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - atomic_store(0, (unint64_t *)this + 1) = v28;
            v26 -= 8;
          }
          while (v27 != __p);
          long long v27 = __p;
        }
        CMTime __p = v26;
        CMTime v46 = &v25[8 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)int32_t v13 = *v11;
        v13 += 8;
      }
      uint64_t v45 = v13;
    }
    double v29 = __p;
    double v30 = (char *)*((void *)this + 2);
    *((void *)this + 3) = v30;
    if (__p != v13)
    {
      uint64_t v31 = (void *)((char *)this + 32);
      do
      {
        if ((unint64_t)v30 >= *v31)
        {
          uint64_t v32 = (v30 - *v10) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_71;
          }
          uint64_t v33 = *v31 - (void)*v10;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            __n128 v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v35);
          }
          else {
            __n128 v36 = 0;
          }
          double v37 = &v36[8 * v32];
          *(void *)double v37 = *(void *)v29;
          double v30 = v37 + 8;
          __n128 v39 = (char *)*((void *)this + 2);
          __n128 v38 = (char *)*((void *)this + 3);
          if (v38 != v39)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v37 - atomic_store(0, (unint64_t *)this + 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            __n128 v38 = *v10;
          }
          *((void *)this + PCSpinLock::lock(this + 2) = v37;
          *((void *)this + 3) = v30;
          *((void *)this + 4) = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *(void *)double v30 = *(void *)v29;
          v30 += 8;
        }
        *((void *)this + 3) = v30;
        v29 += 8;
      }
      while (v29 != v45);
    }
    OZSpline::reparametrize((uint64_t)this);
    a2 = v43;
    if (__p) {
      operator delete(__p);
    }
  }
  *((unsigned char *)this + 144) = a2;
  *((unsigned char *)this + 145) = 1;
  *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
  OZSpline::refreshValidVerticesList(this);
  uint64_t v41 = *((void *)this + 20);
  if (!v41 || (unint64_t v42 = *(os_unfair_lock_s **)(v41 + 48)) == 0) {
    unint64_t v42 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v42);
}

void sub_1B79AAC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZSpline::reparametrize(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 40);
  if (*(uint64_t **)(this + 48) != v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*v1 + 168))();
      (*(void (**)(uint64_t, uint64_t))(*(void *)*v1 + 160))(*v1, 2);
      uint64_t v5 = *v1;
      OZFigTimeForChannelSeconds(&v7, (double)v3, 0x40000);
      (*(void (**)(uint64_t, CMTime *))(*(void *)v5 + 16))(v5, &v7);
      uint64_t v6 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v4);
      ++v3;
    }
    while (v1 != *(uint64_t **)(v2 + 48));
  }
  return this;
}

void OZSpline::setDirty(OZSpline *this, char a2)
{
  if (a2)
  {
    *((unsigned char *)this + 145) = 1;
    *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  else
  {
    *((unsigned char *)this + 145) = 0;
  }
}

BOOL OZSpline::getFirstValidVertexWithLock(OZSpline *this, void **a2, const CMTime *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (CMTime v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    CMTime v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  FirstValidBOOL Vertex = OZSpline::getFirstValidVertex(this, a2, a3);
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v10);
  return FirstValidVertex;
}

uint64_t OZSpline::getLastValidVertexWithLock(OZSpline *this, void **a2, const CMTime *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (CMTime v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    CMTime v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  LastValidBOOL Vertex = OZSpline::getLastValidVertex(this, a2, a3);
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v10);
  return LastValidVertex;
}

uint64_t OZSpline::getNextValidVertexWithLock(OZSpline *this, void *a2, void **a3, const CMTime *a4)
{
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v9);
  NextValidBOOL Vertex = OZSpline::getNextValidVertex((void ***)this, a2, a3, a4);
  uint64_t v11 = *((void *)this + 20);
  if (!v11 || (uint64_t v12 = *(os_unfair_lock_s **)(v11 + 48)) == 0) {
    uint64_t v12 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v12);
  return NextValidVertex;
}

uint64_t OZSpline::getPreviousValidVertexWithLock(OZSpline *this, void *a2, void **a3, const CMTime *a4)
{
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v9);
  PreviousValidBOOL Vertex = OZSpline::getPreviousValidVertex(this, a2, a3, a4);
  uint64_t v11 = *((void *)this + 20);
  if (!v11 || (uint64_t v12 = *(os_unfair_lock_s **)(v11 + 48)) == 0) {
    uint64_t v12 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v12);
  return PreviousValidVertex;
}

uint64_t OZSpline::getPreviousValidVertex(OZSpline *this, void *a2, void **a3, const CMTime *a4)
{
  if (*((unsigned char *)this + 112))
  {
    ValidVertexIter = OZSpline::getValidVertexIter(this, a2);
    if (*((void ***)this + 9) == ValidVertexIter)
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = 0;
      }
    }
    else
    {
      if (a3) {
        *a3 = *(ValidVertexIter - 1);
      }
      return 1;
    }
  }
  else
  {
    VertexIter = OZSpline::getVertexIter(this, a2);
    return OZSpline::getPreviousValidVertex(this, &VertexIter, a3, (uint64_t)a4);
  }
  return result;
}

uint64_t OZSpline::getNextValidVertex(OZSpline *this, void ***a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (a3) {
    *a3 = 0;
  }
  uint64_t v9 = (void **)*((void *)this + 6);
  if (*a2 == v9) {
    return 0;
  }
  if (!*((unsigned char *)this + 112))
  {
    uint64_t v12 = v8 + 1;
    if (v8 + 1 != v9)
    {
      while (1)
      {
        if ((*(unsigned int (**)(void *, uint64_t))(*(void *)*v12 + 136))(*v12, a4))
        {
          CMTimeEpoch v19 = *((void *)*v12 + 4);
          unint64_t v16 = **a2;
          long long v17 = *((_OWORD *)v16 + 1);
          CMTimeEpoch v18 = *((void *)v16 + 4);
          *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v12 + 1);
          time1.CMTimeEpoch epoch = v19;
          *(_OWORD *)&time2.CMTimeValue value = v17;
          time2.CMTimeEpoch epoch = v18;
          if (CMTimeCompare(&time1, &time2)) {
            break;
          }
        }
        if (++v12 == *((void ***)this + 6)) {
          return 0;
        }
      }
      goto LABEL_17;
    }
    return 0;
  }
  ValidVertexIter = OZSpline::getValidVertexIter(this, **a2);
  uint64_t v11 = (void **)*((void *)this + 10);
  uint64_t v12 = ValidVertexIter + 1;
  if (v11 == ValidVertexIter || v12 == v11)
  {
    uint64_t result = 0;
    if (!a3) {
      return result;
    }
    uint64_t v15 = 0;
    goto LABEL_19;
  }
LABEL_17:
  if (a3)
  {
    uint64_t v15 = *v12;
    uint64_t result = 1;
LABEL_19:
    *a3 = v15;
    return result;
  }
  return 1;
}

uint64_t OZSpline::getPreviousValidVertex(OZSpline *this, void ***a2, void *a3, uint64_t a4)
{
  if (a3) {
    *a3 = 0;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = (void **)*((void *)this + 5);
  if (*a2 == v9) {
    return 0;
  }
  if (*((unsigned char *)this + 112))
  {
    ValidVertexIter = OZSpline::getValidVertexIter(this, *v8);
    if (*((void ***)this + 9) != ValidVertexIter)
    {
      if (!a3) {
        return 1;
      }
      uint64_t v11 = *(ValidVertexIter - 1);
LABEL_8:
      *a3 = v11;
      return 1;
    }
    if (a3)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  *(_OWORD *)&v26.CMTimeValue value = *MEMORY[0x1E4F1FA08];
  v26.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  uint64_t v12 = v8 - 1;
  if (v12 == v9)
  {
    int32_t v13 = 0;
    if (!a3) {
      goto LABEL_19;
    }
  }
  else
  {
    int32_t v13 = 0;
    uint64_t v9 = v12;
    do
    {
      if (v13)
      {
        CMTimeEpoch v22 = *((void *)*v9 + 4);
        *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v9 + 1);
        time1.CMTimeEpoch epoch = v22;
        CMTime time2 = v26;
        if (CMTimeCompare(&time1, &time2))
        {
          if (a3) {
            *a3 = v13;
          }
          return 1;
        }
      }
      if ((*(unsigned int (**)(void *, uint64_t))(*(void *)*v9 + 136))(*v9, a4))
      {
        CMTimeEpoch v23 = *((void *)*v9 + 4);
        BOOL v14 = **a2;
        long long v15 = *((_OWORD *)v14 + 1);
        CMTimeEpoch v20 = *((void *)v14 + 4);
        *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v9 + 1);
        time1.CMTimeEpoch epoch = v23;
        *(_OWORD *)&time2.CMTimeValue value = v15;
        time2.CMTimeEpoch epoch = v20;
        if (CMTimeCompare(&time1, &time2))
        {
          int32_t v13 = *v9;
          *(_OWORD *)&v26.CMTimeValue value = *((_OWORD *)*v9 + 1);
          v26.CMTimeEpoch epoch = *((void *)*v9 + 4);
        }
      }
      --v9;
    }
    while (v9 != *((void ***)this + 5));
    if (!a3) {
      goto LABEL_19;
    }
  }
  *a3 = v13;
LABEL_19:
  if (v13)
  {
    CMTimeEpoch v24 = *((void *)*v9 + 4);
    *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v9 + 1);
    time1.CMTimeEpoch epoch = v24;
    CMTime time2 = v26;
    if (CMTimeCompare(&time1, &time2)) {
      return 1;
    }
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)*v9 + 136))(*v9, a4);
  if (result)
  {
    CMTimeEpoch v25 = *((void *)*v9 + 4);
    long long v17 = **a2;
    long long v18 = *((_OWORD *)v17 + 1);
    CMTimeEpoch v21 = *((void *)v17 + 4);
    *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v9 + 1);
    time1.CMTimeEpoch epoch = v25;
    *(_OWORD *)&time2.CMTimeValue value = v18;
    time2.CMTimeEpoch epoch = v21;
    int32_t v19 = CMTimeCompare(&time1, &time2);
    uint64_t result = v19 != 0;
    if (a3)
    {
      if (v19)
      {
        uint64_t v11 = *v9;
        goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t OZSpline::getNextValidVertexWithLock(OZSpline *this, const CMTime *a2, void **a3, const CMTime *a4, int a5)
{
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (uint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    uint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v11);
  NextValidBOOL Vertex = OZSpline::getNextValidVertex(this, a2, a3, a4, a5);
  uint64_t v13 = *((void *)this + 20);
  if (!v13 || (BOOL v14 = *(os_unfair_lock_s **)(v13 + 48)) == 0) {
    BOOL v14 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v14);
  return NextValidVertex;
}

uint64_t OZSpline::getPreviousValidVertexWithLock(OZSpline *this, const CMTime *a2, void **a3, const CMTime *a4, int a5)
{
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (uint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    uint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v11);
  PreviousValidBOOL Vertex = OZSpline::getPreviousValidVertex(this, a2, a3, a4, a5);
  uint64_t v13 = *((void *)this + 20);
  if (!v13 || (BOOL v14 = *(os_unfair_lock_s **)(v13 + 48)) == 0) {
    BOOL v14 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v14);
  return PreviousValidVertex;
}

void **OZSpline::getValidVertexIter(OZSpline *this, void *a2)
{
  uint64_t v2 = (void **)*((void *)this + 9);
  uint64_t v3 = *((void *)this + 16);
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = *((void *)this + 12) - v4;
  if (v3 < (unint64_t)(v5 >> 3) && *(void **)(v4 + 8 * v3) == a2)
  {
    v2 += v3;
  }
  else
  {
    uint64_t v6 = v3 - 1;
    if (v3 >= 1 && *(void **)(v4 + 8 * v6) == a2)
    {
      v2 += v6;
      *((void *)this + 16) = v6;
    }
    else
    {
      unint64_t v7 = v3 + 1;
      if (v7 < v5 >> 3 && *(void **)(v4 + 8 * v7) == a2)
      {
        v2 += v7;
        *((void *)this + 16) = v7;
      }
      else
      {
        uint64_t v8 = (void **)*((void *)this + 10);
        uint64_t v9 = (void **)*((void *)this + 9);
        if (v8 != v2)
        {
          while (*v9 != a2)
          {
            if (++v9 == v8)
            {
              uint64_t v9 = (void **)*((void *)this + 10);
              break;
            }
          }
        }
        *((void *)this + 16) = v9 - v2;
        if (v9 != v8) {
          return v9;
        }
      }
    }
  }
  return v2;
}

CMTime *OZSpline::getSmallDeltaU@<X0>(OZSpline *this@<X0>, CMTime *a2@<X8>)
{
  if (**((unsigned char **)this + 21)) {
    int32_t v2 = 1;
  }
  else {
    int32_t v2 = 100;
  }
  return CMTimeMake(a2, 1, v2);
}

uint64_t OZSpline::getFirstVertex(OZSpline *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 == *((void *)this + 3)) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t OZSpline::getPreviousVertex(OZSpline *this, void *a2)
{
  VertexIter = OZSpline::getVertexIter(this, a2);
  if (*((void ***)this + 5) == VertexIter) {
    return 0;
  }
  else {
    return (uint64_t)*(VertexIter - 1);
  }
}

void *OZSpline::getNextVertex(void ***this, void *a2)
{
  VertexIter = OZSpline::getVertexIter((OZSpline *)this, a2);
  uint64_t v4 = this[6];
  if (v4 == VertexIter || VertexIter + 1 == v4) {
    return 0;
  }
  else {
    return VertexIter[1];
  }
}

uint64_t OZSpline::getNextVertex(OZSpline *this, const CMTime *a2)
{
  if (*((void *)this + 2) == *((void *)this + 3)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (*((void *)this + 6) == v3) {
    return 0;
  }
  int v5 = 0;
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    CMTimeEpoch v9 = *(void *)(*(void *)v3 + 32);
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*(void *)v3 + 16);
    time1.CMTimeEpoch epoch = v9;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) > 0) {
      break;
    }
    CMTimeEpoch v10 = *(void *)(*(void *)v3 + 32);
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*(void *)v3 + 16);
    time1.CMTimeEpoch epoch = v10;
    CMTime time2 = *v6;
    BOOL v7 = CMTimeCompare(&time1, &time2) == 0;
    if (v7 & v5) {
      break;
    }
    v5 |= v7;
    v3 += 8;
    if (v3 == *((void *)this + 6)) {
      return 0;
    }
  }
  return *(void *)v3;
}

uint64_t OZSpline::findVertex(OZSpline *this, uint64_t a2, uint64_t a3, char *a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (a3 - a2 <= 1)
  {
    uint64_t v8 = *((void *)this + 2);
    if (*(char **)(v8 + 8 * a2) != a4) {
      return *(void *)(v8 + 8 * a3) == (void)a4;
    }
    return 1;
  }
  if (a3 < a2) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 2);
  if (*(char **)(v10 + 8 * a2) == a4) {
    return 1;
  }
  if (*(char **)(v10 + 8 * a3) == a4) {
    return 1;
  }
  uint64_t v11 = (uint64_t)((double)(a3 - a2) * 0.5 + (double)a2);
  uint64_t v12 = *(void *)(v10 + 8 * v11);
  if ((char *)v12 == a4) {
    return 1;
  }
  CMTime v37 = *(CMTime *)(a4 + 16);
  long long v13 = *(_OWORD *)(v12 + 16);
  CMTimeEpoch v35 = *(void *)(v12 + 32);
  CMTime time1 = *(CMTime *)(a4 + 16);
  *(_OWORD *)&time2.CMTimeValue value = v13;
  time2.CMTimeEpoch epoch = v35;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    long long v17 = this;
    uint64_t v18 = v6;
    uint64_t v19 = v11;
    return OZSpline::findVertex(v17, v18, v19, a4);
  }
  uint64_t v14 = *(void *)(*((void *)this + 2) + 8 * v11);
  long long v15 = *(_OWORD *)(v14 + 16);
  CMTimeEpoch v36 = *(void *)(v14 + 32);
  CMTime time1 = v37;
  *(_OWORD *)&time2.CMTimeValue value = v15;
  time2.CMTimeEpoch epoch = v36;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    long long v17 = this;
    uint64_t v18 = v11;
    uint64_t v19 = a3;
    return OZSpline::findVertex(v17, v18, v19, a4);
  }
  uint64_t v20 = *(void *)(*((void *)this + 2) + 8 * v6);
  long long v21 = *(_OWORD *)(v20 + 16);
  time1.CMTimeEpoch epoch = *(void *)(v20 + 32);
  *(_OWORD *)&time1.CMTimeValue value = v21;
  if (PCMath::equal((PCMath *)&v37, &time1, MEMORY[0x1E4F1FA48], v16)) {
    goto LABEL_19;
  }
  uint64_t v23 = *(void *)(*((void *)this + 2) + 8 * v11);
  long long v24 = *(_OWORD *)(v23 + 16);
  time1.CMTimeEpoch epoch = *(void *)(v23 + 32);
  *(_OWORD *)&time1.CMTimeValue value = v24;
  uint64_t v6 = v11;
  if (PCMath::equal((PCMath *)&v37, &time1, MEMORY[0x1E4F1FA48], v22)
    || (uint64_t v25 = *(void *)(*((void *)this + 2) + 8 * a3),
        long long v26 = *(_OWORD *)(v25 + 16),
        time1.CMTimeEpoch epoch = *(void *)(v25 + 32),
        *(_OWORD *)&time1.CMTimeValue value = v26,
        uint64_t result = PCMath::equal((PCMath *)&v37, &time1, MEMORY[0x1E4F1FA48], v22),
        uint64_t v6 = a3,
        result))
  {
LABEL_19:
    uint64_t v27 = *((void *)this + 2);
    uint64_t v28 = v6 - 1;
    double v29 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (v28 + 1 >= 1)
    {
      CMTime time1 = *(CMTime *)(*(void *)(v27 + 8 * v28) + 16);
      BOOL v30 = PCMath::equal((PCMath *)&v37, &time1, v29, v22);
      uint64_t v27 = *((void *)this + 2);
      if (!v30) {
        break;
      }
      uint64_t v31 = *(char **)(v27 + 8 * v28--);
      if (v31 == a4) {
        return 1;
      }
    }
    unint64_t v32 = v6 + 1;
    uint64_t v33 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (v32 < (*((void *)this + 3) - v27) >> 3)
    {
      CMTime time1 = *(CMTime *)(*(void *)(v27 + 8 * v32) + 16);
      uint64_t result = PCMath::equal((PCMath *)&v37, &time1, v33, v22);
      if (!result) {
        return result;
      }
      uint64_t v27 = *((void *)this + 2);
      uint64_t v34 = *(char **)(v27 + 8 * v32++);
      if (v34 == a4) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t OZSpline::isValidHandle(OZSpline *this, char *a2)
{
  uint64_t v4 = *((void *)this + 20);
  if (!v4 || (int v5 = *(os_unfair_lock_s **)(v4 + 48)) == 0) {
    int v5 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v5);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  if (v6) {
    uint64_t Vertex = OZSpline::findVertex(this, 0, (v6 >> 3) - 1, a2);
  }
  else {
    uint64_t Vertex = 0;
  }
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (CMTimeEpoch v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    CMTimeEpoch v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v9);
  return Vertex;
}

uint64_t OZSpline::lockSpline(uint64_t this, int a2)
{
  int32_t v2 = *(uint64_t ***)(this + 40);
  if (*(uint64_t ***)(this + 48) != v2)
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = **v2;
      if (a2) {
        this = (*(uint64_t (**)(void))(v5 + 152))();
      }
      else {
        this = (*(uint64_t (**)(void))(v5 + 160))();
      }
      ++v2;
    }
    while (v2 != *(uint64_t ***)(v4 + 48));
  }
  return this;
}

uint64_t OZSpline::getNumberOfValidVertices(OZSpline *this, const CMTime *a2)
{
  uint64_t v6 = 0;
  OZSpline::getFirstValidVertex(this, &v6, a2);
  if (!v6) {
    return 0;
  }
  LODWORD(v3) = 0;
  uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  do
    uint64_t v3 = (v3 + 1);
  while ((OZSpline::getNextValidVertex((void ***)this, v6, &v6, v4) & 1) != 0);
  return v3;
}

double OZSpline::getVertexValue(OZSpline *this, const CMTime *a2, const CMTime *a3, uint64_t a4)
{
  double v56 = 0;
  CMTime v57 = 0;
  double v55 = 0;
  uint64_t v8 = *((void *)this + 20);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
  }
  else {
    double v9 = 0.0;
  }
  double v54 = v9;
  if (a4)
  {
    uint64_t v10 = *((void *)this + 20);
    if (!v10 || (uint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
      uint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v11);
  }
  uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), *(_DWORD *)(*((void *)this + 21) + 32));
  if (((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator) & 1) == 0)
  {
    time2.CMTimeValue value = 0;
    LODWORD(v53.value) = 1;
    if (a4)
    {
      uint64_t v14 = *((void *)this + 20);
      if (!v14 || (long long v15 = *(os_unfair_lock_s **)(v14 + 48)) == 0) {
        long long v15 = (os_unfair_lock_s *)((char *)this + 8);
      }
      PCSpinLock::unlock(v15);
    }
    CMTimeMake(&time1, 1, 1);
    (*(void (**)(OZSpline *, const CMTime *, CMTime *, CMTime *, void, CMTime *, const CMTime *, uint64_t))(*(void *)this + 72))(this, a2, &time1, &v53, 0, &time2, a3, a4);
    return *(double *)&time2.value;
  }
  OZSpline::getMinValueU(this, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v53);
  CMTime time1 = *a2;
  CMTime time2 = v53;
  if (CMTimeCompare(&time1, &time2) < 0 && !*((unsigned char *)this + 144))
  {
    if (!OZSpline::getFirstValidVertex(this, &v57, a3)) {
      goto LABEL_63;
    }
    uint64_t v20 = (char *)v57;
    long long v21 = this;
    CMTimeEpoch v22 = a3;
    uint64_t v23 = a2;
    int v24 = 1;
    goto LABEL_33;
  }
  memset(&v53, 0, sizeof(v53));
  OZSpline::getMaxValueU(this, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v53);
  CMTime time1 = *a2;
  CMTime time2 = v53;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    if (!*(unsigned char *)(*((void *)this + 21) + 4) || (time1 = *a2, CMTime time2 = v53, CMTimeCompare(&time1, &time2) < 0))
    {
      char v13 = 0;
      goto LABEL_24;
    }
  }
  if (!*((unsigned char *)this + 144))
  {
    if (!OZSpline::getLastValidVertex(this, &v56, a3)) {
      goto LABEL_63;
    }
    uint64_t v20 = (char *)v56;
    long long v21 = this;
    CMTimeEpoch v22 = a3;
    uint64_t v23 = a2;
    int v24 = 0;
LABEL_33:
    OZSpline::extrapolate(v21, v20, v22, v23, &v54, v24);
    goto LABEL_63;
  }
  char v13 = 1;
LABEL_24:
  long long v17 = (void **)*((void *)this + 5);
  unint64_t v18 = *((void *)this + 17);
  if (v18 < (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3)
  {
    uint64_t v19 = &v17[v18];
    CMTime v52 = v19;
    if (v18)
    {
      CMTime v51 = *(CMTime *)((char *)*v19 + 16);
      CMTime time1 = *a2;
      CMTime time2 = v51;
      long long v17 = v19;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        if (v13)
        {
LABEL_52:
          if (!OZSpline::getLastValidVertex(this, &v55, a3)) {
            goto LABEL_61;
          }
          uint64_t v33 = *((void *)this + 17);
          if (v33 <= 0) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = v33 - 1;
          }
          *((void *)this + 17) = v34;
          if (*((unsigned char *)this + 144))
          {
            CMTime v57 = v55;
            OZSpline::getFirstValidVertex(this, &v56, a3);
            CMTimeEpoch v36 = v56;
            CMTimeEpoch v35 = v57;
            CMTime v37 = this;
            __n128 v38 = a3;
          }
          else
          {
            __n128 v39 = (OZInterpolators *)*((void *)this + 19);
            int v40 = (*(uint64_t (**)(void *))(*(void *)v55 + 208))(v55);
            uint64_t v41 = OZInterpolators::getInterpolator(v39, v40);
            if ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 64))(v41)) {
              goto LABEL_61;
            }
            CMTimeEpoch v35 = v55;
            double v56 = v55;
            CMTime v57 = v55;
            CMTime v37 = this;
            __n128 v38 = a3;
            CMTimeEpoch v36 = v55;
          }
          OZSpline::interpolate(v37, v38, v35, v36, a2, &v54, 0);
LABEL_61:
          if ((*((void *)this + 17) & 0x8000000000000000) != 0) {
            goto LABEL_62;
          }
          goto LABEL_63;
        }
        goto LABEL_36;
      }
      long long v17 = (void **)*((void *)this + 5);
    }
  }
  *((void *)this + 17) = 0;
  CMTime v52 = v17;
  uint64_t v19 = v17;
  if (v13) {
    goto LABEL_52;
  }
LABEL_36:
  if (v19 == *((void ***)this + 6)) {
    goto LABEL_52;
  }
  uint64_t v25 = v19 + 1;
  while (1)
  {
    long long v26 = v17;
    long long v17 = v25;
    memset(&v51, 0, sizeof(v51));
    CMTime v51 = *(CMTime *)((char *)*v19 + 16);
    CMTime time1 = v51;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2)
      || !(*(unsigned int (**)(void *, const CMTime *))(*(void *)*v19 + 136))(*v19, a3))
    {
      break;
    }
    if (v19 == *((void ***)this + 5))
    {
      BOOL v30 = (OZInterpolators *)*((void *)this + 19);
      int v31 = (*(uint64_t (**)(void))(*(void *)*v26 + 208))();
      uint64_t v32 = OZInterpolators::getInterpolator(v30, v31);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 64))(v32))
      {
        long long v47 = *v26;
        goto LABEL_72;
      }
      if (v26 + 1 != *((void ***)this + 6))
      {
        uint64_t v48 = *v26;
        CMTime v49 = v26[1];
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v27 = (OZInterpolators *)*((void *)this + 19);
      int v28 = (*(uint64_t (**)(void))(*(void *)*(v26 - 1) + 208))(*(v26 - 1));
      uint64_t v29 = OZInterpolators::getInterpolator(v27, v28);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v29 + 64))(v29))
      {
        long long v47 = *v19;
LABEL_72:
        double v54 = (*(double (**)(void *, const CMTime *))(*(void *)v47 + 24))(v47, a3);
        goto LABEL_76;
      }
      if (v26 + 1 != *((void ***)this + 6))
      {
        uint64_t v48 = *v19;
        CMTime v49 = v26[1];
LABEL_74:
        CMTime v46 = &v51;
        unint64_t v44 = this;
        uint64_t v45 = a3;
        goto LABEL_75;
      }
    }
LABEL_51:
    CMTime v52 = ++v19;
    ++*((void *)this + 17);
    uint64_t v25 = v17 + 1;
    if (v19 == *((void ***)this + 6)) {
      goto LABEL_52;
    }
  }
  CMTime time1 = v51;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) < 1) {
    goto LABEL_51;
  }
  if (!(*(unsigned int (**)(void *, const CMTime *))(*(void *)*v19 + 136))(*v19, a3)) {
    goto LABEL_51;
  }
  if (!OZSpline::getPreviousValidVertex(this, &v52, &v57, (uint64_t)a3)) {
    goto LABEL_51;
  }
  CMTime v49 = *v19;
  double v56 = v49;
  if (!v49) {
    goto LABEL_51;
  }
  uint64_t v48 = v57;
  unint64_t v44 = this;
  uint64_t v45 = a3;
  CMTime v46 = a2;
LABEL_75:
  OZSpline::interpolate(v44, v45, v48, v49, v46, &v54, 0);
LABEL_76:
  uint64_t v50 = *((void *)this + 17);
  *((void *)this + 17) = v50;
  if (v50 < 0) {
LABEL_62:
  }
    *((void *)this + 17) = 0;
LABEL_63:
  if (a4)
  {
    uint64_t v42 = *((void *)this + 20);
    if (!v42 || (char v43 = *(os_unfair_lock_s **)(v42 + 48)) == 0) {
      char v43 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v43);
  }
  return v54;
}

void OZSpline::extrapolate(OZSpline *this, char *a2, const CMTime *a3, const CMTime *a4, double *a5, int a6)
{
  memset(&v66, 0, sizeof(v66));
  uint64_t v12 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getMaxValueU(this, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v66);
  memset(&v65, 0, sizeof(v65));
  OZSpline::getMinValueU(this, v12, 0, (uint64_t)&v65);
  memset(&v64, 0, sizeof(v64));
  CMTime time1 = v66;
  CMTime time2 = v65;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v64);
  CMTime time1 = v66;
  CMTime time2 = v65;
  if (CMTimeCompare(&time1, &time2))
  {
    uint64_t v13 = *((void *)this + 21);
    if (!a6)
    {
      switch(*(_DWORD *)(v13 + 36))
      {
        case 0:
          memset(&v69, 0, sizeof(v69));
          OZSpline::getStep(this, &v69);
          if (!*(unsigned char *)(*((void *)this + 21) + 4)) {
            goto LABEL_4;
          }
          CMTime time1 = v64;
          CMTime time2 = v69;
          if (CMTimeCompare(&time1, &time2) < 0) {
            goto LABEL_4;
          }
          memset(&v68, 0, sizeof(v68));
          CMTime time1 = *(CMTime *)(a2 + 16);
          CMTime time2 = v69;
          v15.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          double v14 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, __n128))(*(void *)this + 240))(this, &v68, a3, 0, v15);
          goto LABEL_56;
        case 1:
          if (!(*(unsigned int (**)(char *))(*(void *)a2 + 208))(a2)) {
            goto LABEL_4;
          }
          memset(&v69, 0, sizeof(v69));
          CMTime v68 = *(CMTime *)(a2 + 16);
          if (**((unsigned char **)this + 21)) {
            int32_t v33 = 1;
          }
          else {
            int32_t v33 = 100;
          }
          CMTimeMake(&v67, 1, v33);
          CMTime time1 = v68;
          CMTime time2 = v67;
          double v34 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v69);
          double v35 = (*(double (**)(char *, const CMTime *, double))(*(void *)a2 + 24))(a2, a3, v34);
          double v36 = v35
              - (*(double (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)this + 240))(this, &v69, a3, 0);
          if (**((unsigned char **)this + 21)) {
            int32_t v37 = 1;
          }
          else {
            int32_t v37 = 100;
          }
          CMTimeMake(&v63, 1, v37);
          double Seconds = CMTimeGetSeconds(&v63);
          if (Seconds == 0.0) {
            double v39 = dbl_1B8379A80[v36 > 0.0];
          }
          else {
            double v39 = v36 / Seconds;
          }
          CMTime time2 = *(CMTime *)(a2 + 16);
          CMTime time1 = *a4;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          operator*(&v68, &v62, v39);
          uint64_t v23 = &v62;
LABEL_34:
          double v40 = CMTimeGetSeconds(v23);
          (*(void (**)(char *, const CMTime *))(*(void *)a2 + 24))(a2, a3);
          goto LABEL_42;
        case 2:
          memset(&v68, 0, sizeof(v68));
          OZSpline::getStep(this, &v68);
          if (!*(unsigned char *)(*((void *)this + 21) + 4)
            || (time1 = v64, CMTime time2 = v68, CMTimeCompare(&time1, &time2) < 0))
          {
            memset(&v69, 0, sizeof(v69));
            CMTime time1 = *a4;
            CMTime time2 = v65;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
            operator/((long long *)&v67.value, (uint64_t)&v64, (uint64_t)&v69);
            CMTime v56 = v69;
            if ((uint64_t)CMTimeGetSeconds(&v56))
            {
              CMTimeMake(&v60, 1, 1);
              CMTime time1 = v69;
              CMTime time2 = v60;
              PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v61);
              CMTime time1 = v69;
              CMTime time2 = v61;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
              CMTime v69 = v67;
              operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v61);
              CMTime time1 = v66;
              CMTime time2 = v61;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
            }
            else
            {
              CMTimeMake(&v60, 1, 1);
              CMTime time1 = v69;
              CMTime time2 = v60;
              PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v61);
              CMTime time1 = v69;
              CMTime time2 = v61;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
              CMTime v69 = v67;
              operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v61);
              CMTime time1 = v61;
              CMTime time2 = v65;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v67);
            }
            CMTime v69 = v67;
            PCMath::clamp(&v69, &v65, &v66, (uint64_t)&time1);
            __n128 v24 = *(__n128 *)&time1.value;
            *(_OWORD *)&v69.CMTimeValue value = *(_OWORD *)&time1.value;
            CMTimeEpoch epoch = time1.epoch;
LABEL_54:
            v69.CMTimeEpoch epoch = epoch;
LABEL_55:
            double v14 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, __n128))(*(void *)this
                                                                                                 + 240))(this, &v69, a3, 0, v24);
          }
          else
          {
            CMTime time1 = v64;
            CMTime time2 = v68;
            if (CMTimeCompare(&time1, &time2) <= 0)
            {
              *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)&v12->value;
              CMTimeEpoch v42 = v12->epoch;
            }
            else
            {
              CMTime time1 = v65;
              CMTime time2 = v64;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v69);
              CMTime time1 = *a4;
              CMTime time2 = v69;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
              memset(&v61, 0, sizeof(v61));
              CMTime time1 = v64;
              CMTime time2 = v68;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v61);
              operator*(&v61, &time2, 2.0);
              PCMath::mod((PCMath *)&v67, &time2, &time1);
              CMTime v67 = time1;
              CMTime time2 = v61;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CMTime time1 = v67;
                CMTime time2 = v68;
                PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v57);
                operator*(&v57, 2, &v58);
                CMTime time1 = v61;
                CMTime time2 = v58;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
                CMTime time1 = v59;
                CMTime time2 = v68;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v60);
                CMTime time2 = v67;
                CMTime v69 = v60;
                PC_CMTimeSaferAdd(&time2, &v69, (uint64_t)&time1);
                *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)&time1.value;
                CMTimeEpoch v42 = time1.epoch;
              }
              else
              {
                CMTime time1 = v67;
                CMTime time2 = v61;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v60);
                CMTime time1 = v60;
                CMTime time2 = v68;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v69);
                *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)&v69.value;
                CMTimeEpoch v42 = v69.epoch;
              }
            }
            v67.CMTimeEpoch epoch = v42;
            *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v67.value;
            time2.CMTimeEpoch epoch = v42;
            CMTime v69 = v65;
            PC_CMTimeSaferAdd(&time2, &v69, (uint64_t)&time1);
            CMTime v67 = time1;
            double v14 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, __n128))(*(void *)this
                                                                                                 + 240))(this, &v67, a3, 0, *(__n128 *)&time1.value);
          }
          goto LABEL_56;
        case 3:
          memset(&v61, 0, sizeof(v61));
          CMTime time1 = *a4;
          CMTime time2 = v65;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
          memset(&v60, 0, sizeof(v60));
          operator/((long long *)&v59.value, (uint64_t)&v64, (uint64_t)&v60);
          CMTimeMake(&v67, 1, 1);
          CMTime time1 = v60;
          CMTime time2 = v67;
          PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v68);
          CMTime time1 = v60;
          CMTime time2 = v68;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v69);
          operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&time1);
          CMTime v60 = time1;
          CMTimeEpoch v43 = time1.epoch;
          long long v44 = *(_OWORD *)&time1.value;
          CMTime time1 = v65;
          *(_OWORD *)&time2.CMTimeValue value = v44;
          time2.CMTimeEpoch epoch = v43;
          v45.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v61);
          double v14 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, __n128))(*(void *)this + 240))(this, &v61, a3, 0, v45);
          goto LABEL_56;
        case 4:
          memset(&v69, 0, sizeof(v69));
          CMTime time1 = *a4;
          CMTime time2 = v65;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          operator/((long long *)&v68.value, (uint64_t)&v64, (uint64_t)&v69);
          CMTime v55 = v69;
          double v46 = CMTimeGetSeconds(&v55);
          CMTimeMake(&v67, (uint64_t)v46, 1);
          CMTime time1 = v69;
          CMTime time2 = v67;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          CMTime v69 = v68;
          operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v67);
          CMTime time1 = v67;
          CMTime time2 = v65;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v68);
          CMTime v69 = v68;
          double v47 = (double)(uint64_t)v46;
          double v48 = (*(double (**)(char *, const CMTime *))(*(void *)a2 + 24))(a2, a3);
          double v40 = (v48
               - (*(double (**)(OZSpline *, CMTime *, void, void))(*(void *)this + 240))(this, &v65, MEMORY[0x1E4F1FA48], 0))* v47;
          double v41 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)this + 240))(this, &v69, a3, 0);
LABEL_42:
          double v14 = v40 + v41;
          goto LABEL_56;
        default:
          return;
      }
    }
    switch(*(_DWORD *)(v13 + 40))
    {
      case 0:
        goto LABEL_4;
      case 1:
        memset(&v69, 0, sizeof(v69));
        CMTime v68 = *(CMTime *)(a2 + 16);
        if (*(unsigned char *)v13) {
          int32_t v16 = 1;
        }
        else {
          int32_t v16 = 100;
        }
        CMTimeMake(&v67, 1, v16);
        CMTime time1 = v68;
        CMTime time2 = v67;
        double v17 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v69);
        double v18 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, double))(*(void *)this + 240))(this, &v69, a3, 0, v17);
        double v19 = v18 - (*(double (**)(char *, const CMTime *))(*(void *)a2 + 24))(a2, a3);
        if (**((unsigned char **)this + 21)) {
          int32_t v20 = 1;
        }
        else {
          int32_t v20 = 100;
        }
        CMTimeMake(&time, 1, v20);
        double v21 = CMTimeGetSeconds(&time);
        if (v21 == 0.0) {
          double v22 = dbl_1B8379A70[v19 < 0.0];
        }
        else {
          double v22 = v19 / v21;
        }
        CMTime time2 = *(CMTime *)(a2 + 16);
        CMTime time1 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        operator*(&v68, &v53, v22);
        uint64_t v23 = &v53;
        goto LABEL_34;
      case 2:
        memset(&v69, 0, sizeof(v69));
        CMTime time1 = v65;
        CMTime time2 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        operator/((long long *)&v68.value, (uint64_t)&v64, (uint64_t)&v69);
        CMTime v52 = v69;
        if ((uint64_t)CMTimeGetSeconds(&v52))
        {
          CMTimeMake(&v61, 1, 1);
          CMTime time1 = v69;
          CMTime time2 = v61;
          PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v67);
          CMTime time1 = v69;
          CMTime time2 = v67;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          CMTime v69 = v68;
          operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v67);
          CMTime time1 = v66;
          CMTime time2 = v67;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        }
        else
        {
          CMTimeMake(&v61, 1, 1);
          CMTime time1 = v69;
          CMTime time2 = v61;
          PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v67);
          CMTime time1 = v69;
          CMTime time2 = v67;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
          CMTime v69 = v68;
          operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v67);
          CMTime time1 = v67;
          CMTime time2 = v65;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v68);
        }
        CMTime v69 = v68;
        CMTime time1 = v68;
        CMTime time2 = v65;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          uint64_t v50 = &v65;
        }
        else
        {
          CMTime time1 = v69;
          CMTime time2 = v66;
          int32_t v49 = CMTimeCompare(&time1, &time2);
          uint64_t v50 = &v69;
          if (v49 > 0) {
            uint64_t v50 = &v66;
          }
        }
        __n128 v24 = *(__n128 *)&v50->value;
        v69.CMTimeEpoch epoch = v50->epoch;
        *(__n128 *)&v69.CMTimeValue value = v24;
        goto LABEL_55;
      case 3:
        memset(&v69, 0, sizeof(v69));
        CMTime time1 = v65;
        CMTime time2 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        operator/((long long *)&v68.value, (uint64_t)&v64, (uint64_t)&v69);
        CMTimeMake(&v61, 1, 1);
        CMTime time1 = v69;
        CMTime time2 = v61;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v67);
        CMTime time1 = v69;
        CMTime time2 = v67;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        CMTime v69 = v68;
        operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v67);
        CMTime time1 = v66;
        CMTime time2 = v67;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        __n128 v24 = *(__n128 *)&v68.value;
        *(_OWORD *)&v69.CMTimeValue value = *(_OWORD *)&v68.value;
        CMTimeEpoch epoch = v68.epoch;
        goto LABEL_54;
      case 4:
        memset(&v69, 0, sizeof(v69));
        CMTime time1 = v65;
        CMTime time2 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        operator/((long long *)&v68.value, (uint64_t)&v64, (uint64_t)&v69);
        CMTime v51 = v69;
        double v26 = CMTimeGetSeconds(&v51);
        CMTimeMake(&v67, (uint64_t)v26, 1);
        CMTime time1 = v69;
        CMTime time2 = v67;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        CMTime v69 = v68;
        operator*((long long *)&v69.value, (uint64_t)&v64, (uint64_t)&v67);
        CMTime time1 = v66;
        CMTime time2 = v67;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
        CMTime v69 = v68;
        uint64_t v27 = MEMORY[0x1E4F1FA48];
        double v28 = (*(double (**)(OZSpline *, CMTime *, void, void))(*(void *)this + 240))(this, &v66, MEMORY[0x1E4F1FA48], 0);
        double v29 = v28 - (*(double (**)(char *, uint64_t))(*(void *)a2 + 24))(a2, v27);
        double v30 = (double)(uint64_t)v26;
        double v31 = (*(double (**)(OZSpline *, CMTime *, uint64_t, void))(*(void *)this + 240))(this, &v66, v27, 0);
        double v32 = v29 + (v31 - (*(double (**)(char *, const CMTime *))(*(void *)a2 + 24))(a2, a3)) * v30;
        double v14 = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)this + 240))(this, &v69, a3, 0)- v32;
        goto LABEL_56;
      default:
        return;
    }
  }
  else
  {
LABEL_4:
    (*(void (**)(char *, const CMTime *))(*(void *)a2 + 24))(a2, a3);
LABEL_56:
    *a5 = v14;
  }
}

void OZSpline::interpolate(OZSpline *this, const CMTime *a2, void *a3, void *a4, const CMTime *a5, double *a6, uint64_t a7)
{
  uint64_t v14 = *((void *)this + 20);
  if (!v14
    || (uint64_t Interpolator = *(void *)(v14 + 40)) == 0
    || !(*(unsigned int (**)(uint64_t, OZSpline *, void *))(*(void *)Interpolator + 112))(Interpolator, this, a3))
  {
    int v16 = (*(uint64_t (**)(void *))(*(void *)a3 + 208))(a3);
    uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v16);
    if ((*(unsigned int (**)(uint64_t, OZSpline *))(*(void *)Interpolator + 88))(Interpolator, this)) {
      (*(void (**)(uint64_t, OZSpline *, const CMTime *))(*(void *)Interpolator + 16))(Interpolator, this, a2);
    }
  }
  *a6 = (*(double (**)(uint64_t, OZSpline *, const CMTime *, void *, void *, const CMTime *, void, uint64_t))(*(void *)Interpolator + 24))(Interpolator, this, a2, a3, a4, a5, **((unsigned __int8 **)this + 21), a7);
}

double OZSpline::getDerivativeValue(OZSpline *this, const CMTime *a2, const CMTime *a3, int a4)
{
  double v25 = 0.0;
  double v26 = 0;
  if (a4)
  {
    uint64_t v8 = *((void *)this + 20);
    if (!v8 || (double v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
      double v9 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v9);
    if (*((void *)this + 2) == *((void *)this + 3))
    {
      uint64_t v10 = *((void *)this + 20);
      if (!v10 || (uint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
        uint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
      }
      PCSpinLock::unlock(v11);
      return 0.0;
    }
  }
  else if (*((void *)this + 2) == *((void *)this + 3))
  {
    return 0.0;
  }
  OZSpline::getMinValueU(this, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v24);
  CMTime time1 = *a2;
  CMTime time2 = v24;
  if (CMTimeCompare(&time1, &time2) < 0) {
    return 0.0;
  }
  memset(&v24, 0, sizeof(v24));
  OZSpline::getMaxValueU(this, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v24);
  CMTime time1 = *a2;
  CMTime time2 = v24;
  int32_t v12 = CMTimeCompare(&time1, &time2);
  double result = 0.0;
  if (v12 <= 0)
  {
    uint64_t v14 = (void **)*((void *)this + 5);
    uint64_t v23 = v14;
    unint64_t v15 = *((void *)this + 17);
    if (v15 < (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3)
    {
      v14 += v15;
      uint64_t v23 = v14;
    }
    long long v16 = *((_OWORD *)*v14 + 1);
    CMTimeEpoch v21 = *((void *)*v14 + 4);
    CMTime time1 = *a2;
    *(_OWORD *)&time2.CMTimeValue value = v16;
    time2.CMTimeEpoch epoch = v21;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *((void *)this + 17) = 0;
      uint64_t v14 = (void **)*((void *)this + 5);
      uint64_t v23 = v14;
    }
    if (v14 == *((void ***)this + 6))
    {
      uint64_t v17 = *((void *)this + 17);
    }
    else
    {
      while (1)
      {
        CMTimeEpoch v22 = *((void *)*v14 + 4);
        *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)*v14 + 1);
        time1.CMTimeEpoch epoch = v22;
        CMTime time2 = *a2;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0
          && (*(unsigned int (**)(void *, const CMTime *))(*(void *)*v14 + 136))(*v14, a3)
          && OZSpline::getPreviousValidVertex(this, &v23, &v26, (uint64_t)a3)
          && *v14)
        {
          break;
        }
        uint64_t v23 = ++v14;
        uint64_t v17 = *((void *)this + 17) + 1;
        *((void *)this + 17) = v17;
        if (v14 == *((void ***)this + 6)) {
          goto LABEL_27;
        }
      }
      OZSpline::interpolate(this, a3, v26, *v14, a2, &v25, 1);
      uint64_t v17 = *((void *)this + 17) + 1;
    }
LABEL_27:
    if (v17 <= 0) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17 - 1;
    }
    *((void *)this + 17) = v18;
    if (a4)
    {
      uint64_t v19 = *((void *)this + 20);
      if (!v19 || (int32_t v20 = *(os_unfair_lock_s **)(v19 + 48)) == 0) {
        int32_t v20 = (os_unfair_lock_s *)((char *)this + 8);
      }
      PCSpinLock::unlock(v20);
    }
    return v25;
  }
  return result;
}

uint64_t OZSpline::isDirty(OZSpline *this)
{
  return *((unsigned __int8 *)this + 145);
}

void OZSpline::reserveMemoryForKeypoints(void **this, int a2)
{
  if (a2) {
    std::vector<void *>::reserve(this + 2, a2);
  }
}

uint64_t OZSpline::sampleSpline(OZSpline *this, const CMTime *a2, CMTime *a3, int32_t *a4, CMTime *a5, double *a6, const CMTime *a7, char a8)
{
  int v60 = 0;
  uint64_t v16 = *((void *)this + 20);
  if (!v16 || (uint64_t v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
    uint64_t v17 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v17);
  (*(void (**)(OZSpline *, int *, void, void))(*(void *)this + 16))(this, &v60, 0, 0);
  if (**((unsigned char **)this + 21))
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v60);
    if (((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator) & 1) == 0)
    {
      memset(&v59, 0, sizeof(v59));
      operator*(a3, *a4, &v59);
      memset(&v58, 0, sizeof(v58));
      CMTime time1 = *a2;
      CMTime time2 = v59;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
      uint64_t v24 = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v60);
      (*(void (**)(CMTime *__return_ptr))(*(void *)v24 + 72))(&time1);
      CMTime v58 = time1;
      memset(&v57, 0, sizeof(v57));
      uint64_t v25 = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v60);
      (*(void (**)(CMTime *__return_ptr))(*(void *)v25 + 80))(&v57);
      memset(&v56, 0, sizeof(v56));
      CMTime time1 = v58;
      CMTime time2 = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v55);
      operator*(&v55, &v56, 1.0 / (double)(*a4 - 1));
      if (*a4)
      {
        unsigned int v26 = 0;
        do
        {
          operator*(&v56, v26, &time1);
          CMTime v59 = time1;
          if (a6)
          {
            double v28 = (void **)*((void *)this + 2);
            uint64_t v27 = (void **)*((void *)this + 3);
            if (v28 == v27)
            {
              double v29 = 0;
              double v30 = 0;
            }
            else
            {
              double v29 = *v28;
              double v30 = *(v27 - 1);
            }
            CMTime time1 = v57;
            CMTime time2 = v59;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v55);
            OZSpline::interpolate(this, a7, v29, v30, &v55, a6++, 0);
          }
          if (a5)
          {
            CMTime time1 = v57;
            CMTime time2 = v59;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v55);
            long long v31 = *(_OWORD *)&v55.value;
            a5->CMTimeEpoch epoch = v55.epoch;
            *(_OWORD *)&a5->CMTimeValue value = v31;
            ++a5;
          }
          ++v26;
        }
        while (v26 < *a4);
      }
      goto LABEL_75;
    }
  }
  if ((a8 & 1) == 0)
  {
    if (*a4)
    {
      unsigned int v21 = 0;
      do
      {
        memset(&v59, 0, sizeof(v59));
        operator*(a3, v21, &v59);
        if (a6)
        {
          CMTime time1 = *a2;
          CMTime time2 = v59;
          double v22 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
          *a6++ = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, double))(*(void *)this
                                                                                                 + 240))(this, &v58, a7, 0, v22);
        }
        if (a5)
        {
          CMTime time1 = *a2;
          CMTime time2 = v59;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
          long long v23 = *(_OWORD *)&v58.value;
          a5->CMTimeEpoch epoch = v58.epoch;
          *(_OWORD *)&a5->CMTimeValue value = v23;
          ++a5;
        }
        ++v21;
      }
      while (v21 < *a4);
    }
    goto LABEL_75;
  }
  if (OZSpline::getNumberOfValidVertices(this, a7) > 1)
  {
    CMTime v53 = 0;
    double v54 = 0;
    CMTime v59 = *a2;
    CMTime v58 = v59;
    operator*(a3, *a4, &v56);
    CMTime time1 = *a2;
    CMTime time2 = v56;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v57);
    CMTime time1 = v58;
    CMTime time2 = v57;
    unsigned int v32 = 0;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
LABEL_74:
      *a4 = v32;
      goto LABEL_75;
    }
    int32_t v33 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      if (!OZSpline::getNextValidVertex(this, &v59, &v53, v33, 0)) {
        goto LABEL_40;
      }
      long long v34 = *((_OWORD *)v53 + 1);
      v58.CMTimeEpoch epoch = *((void *)v53 + 4);
      *(_OWORD *)&v58.CMTimeValue value = v34;
      *(_OWORD *)&time1.CMTimeValue value = v34;
      time1.CMTimeEpoch epoch = v58.epoch;
      CMTime time2 = v57;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        CMTime time1 = v58;
        CMTime time2 = v57;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v56);
        CMTime time1 = v56;
        CMTime time2 = *a3;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
LABEL_40:
        }
          CMTime v58 = v57;
      }
      if (!OZSpline::getVertexHandle(this, &v59, &v54, 0)
        && !OZSpline::getPreviousValidVertex(this, &v59, &v54, v33, 0))
      {
        break;
      }
      if (!v53)
      {
        unsigned int v39 = *(_DWORD *)(*((void *)this + 21) + 36);
LABEL_54:
        if (v39 < 2) {
          goto LABEL_55;
        }
        goto LABEL_66;
      }
      time1.CMTimeValue value = 0;
      time2.CMTimeValue value = 0;
      v56.CMTimeValue value = 0;
      v55.CMTimeValue value = 0;
      (*(void (**)(OZSpline *, void *, CMTime *, CMTime *, const CMTime *, void))(*(void *)this + 128))(this, v53, &time1, &time2, v33, 0);
      (*(void (**)(OZSpline *, void *, CMTime *, CMTime *, const CMTime *, void))(*(void *)this + 136))(this, v54, &v56, &v55, v33, 0);
      double v35 = *(double *)&time1.value;
      double v36 = *(double *)&time2.value;
      double v37 = *(double *)&v56.value;
      double v38 = *(double *)&v55.value;
      if ((*(unsigned int (**)(void *))(*(void *)v54 + 208))(v54) == 1
        || (*(unsigned int (**)(void *))(*(void *)v54 + 208))(v54) == 4
        && fabs(v35) < 0.0000001
        && fabs(v36) < 0.0000001
        && fabs(v37) < 0.0000001
        && fabs(v38) < 0.0000001)
      {
LABEL_55:
        if (a6)
        {
          if (!v32) {
            *a6++ = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)this + 240))(this, &v59, a7, 0);
          }
          *a6++ = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void))(*(void *)this + 240))(this, &v58, a7, 0);
        }
        if (a5)
        {
          if (!v32)
          {
            long long v40 = *(_OWORD *)&v59.value;
            a5->CMTimeEpoch epoch = v59.epoch;
            *(_OWORD *)&a5->CMTimeValue value = v40;
            ++a5;
          }
          long long v41 = *(_OWORD *)&v58.value;
          a5->CMTimeEpoch epoch = v58.epoch;
          *(_OWORD *)&a5->CMTimeValue value = v41;
          ++a5;
        }
        if (v32) {
          int v42 = 1;
        }
        else {
          int v42 = 2;
        }
        goto LABEL_73;
      }
LABEL_66:
      CMTime time1 = v58;
      CMTime time2 = v59;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      CMTime v51 = *a3;
      unsigned int v44 = (Seconds / CMTimeGetSeconds(&v51));
      unsigned int v45 = v32 != 0;
      int v42 = v44 - v45;
      if (v44 > v45)
      {
        do
        {
          memset(&v56, 0, sizeof(v56));
          operator*(a3, v45, &v56);
          if (a6)
          {
            CMTime time1 = v59;
            CMTime time2 = v56;
            double v46 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v55);
            *a6++ = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, double))(*(void *)this + 240))(this, &v55, a7, 0, v46);
          }
          if (a5)
          {
            CMTime time1 = v59;
            CMTime time2 = v56;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v55);
            long long v47 = *(_OWORD *)&v55.value;
            a5->CMTimeEpoch epoch = v55.epoch;
            *(_OWORD *)&a5->CMTimeValue value = v47;
            ++a5;
          }
          ++v45;
        }
        while (v44 != v45);
      }
      int32_t v33 = (const CMTime *)MEMORY[0x1E4F1FA48];
LABEL_73:
      v32 += v42;
      CMTime v59 = v58;
      CMTime time1 = v58;
      CMTime time2 = v57;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        goto LABEL_74;
      }
    }
    if (!v53) {
      goto LABEL_66;
    }
    unsigned int v39 = *(_DWORD *)(*((void *)this + 21) + 40);
    goto LABEL_54;
  }
  if (a6)
  {
    *a6 = (*(double (**)(OZSpline *, const CMTime *, const CMTime *, void))(*(void *)this + 240))(this, a2, a7, 0);
    if (*a4 >= 2)
    {
      operator*(a3, *a4 - 1, &v58);
      CMTime time1 = *a2;
      CMTime time2 = v58;
      double v19 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v59);
      a6[1] = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, double))(*(void *)this + 240))(this, &v59, a7, 0, v19);
    }
  }
  if (a5)
  {
    long long v20 = *(_OWORD *)&a2->value;
    a5->CMTimeEpoch epoch = a2->epoch;
    *(_OWORD *)&a5->CMTimeValue value = v20;
    if (*a4 < 2) {
      goto LABEL_75;
    }
    operator*(a3, *a4 - 1, &v58);
    CMTime time1 = *a2;
    CMTime time2 = v58;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v59);
    a5[1] = v59;
  }
  if (*a4 >= 2) {
    *a4 = 2;
  }
LABEL_75:
  uint64_t v48 = *((void *)this + 20);
  if (!v48 || (int32_t v49 = *(os_unfair_lock_s **)(v48 + 48)) == 0) {
    int32_t v49 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v49);
  return 1;
}

uint64_t OZSpline::sampleSplineDerivatives(OZSpline *this, const CMTime *a2, CMTime *a3, unsigned int *a4, CMTime *a5, double *a6, const CMTime *a7)
{
  int v25 = 0;
  uint64_t v14 = *((void *)this + 20);
  if (!v14 || (unint64_t v15 = *(os_unfair_lock_s **)(v14 + 48)) == 0) {
    unint64_t v15 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v15);
  (*(void (**)(OZSpline *, int *, void, void))(*(void *)this + 16))(this, &v25, 0, 0);
  if (*a4)
  {
    unsigned int v16 = 0;
    do
    {
      memset(&v24, 0, sizeof(v24));
      operator*(a3, v16, &v24);
      if (a6)
      {
        CMTime v27 = *a2;
        CMTime v26 = v24;
        double v17 = PC_CMTimeSaferAdd(&v27, &v26, (uint64_t)&v22);
        *a6++ = (*(double (**)(OZSpline *, long long *, const CMTime *, void, double))(*(void *)this
                                                                                                 + 248))(this, &v22, a7, 0, v17);
      }
      if (a5)
      {
        CMTime v27 = *a2;
        CMTime v26 = v24;
        PC_CMTimeSaferAdd(&v27, &v26, (uint64_t)&v22);
        long long v18 = v22;
        a5->CMTimeEpoch epoch = v23;
        *(_OWORD *)&a5->CMTimeValue value = v18;
        ++a5;
      }
      ++v16;
    }
    while (v16 < *a4);
  }
  uint64_t v19 = *((void *)this + 20);
  if (!v19 || (long long v20 = *(os_unfair_lock_s **)(v19 + 48)) == 0) {
    long long v20 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v20);
  return 1;
}

uint64_t OZSpline::sampleSplineDerivatives(os_unfair_lock_s *a1, CMTime *a2, CMTime *a3, unsigned int *a4, void **a5, uint64_t a6, uint64_t a7)
{
  int v52 = 0;
  uint64_t v14 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v14 || (unint64_t v15 = *(os_unfair_lock_s **)(v14 + 48)) == 0) {
    unint64_t v15 = a1 + 2;
  }
  PCSpinLock::lock(v15);
  (*(void (**)(os_unfair_lock_s *, int *, void, void))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v52, 0, 0);
  if (*a4)
  {
    unsigned int v16 = 0;
    do
    {
      memset(&v51, 0, sizeof(v51));
      operator*(a3, v16, &v51);
      if (a6)
      {
        CMTime v54 = *a2;
        CMTime v53 = v51;
        double v17 = PC_CMTimeSaferAdd(&v54, &v53, (uint64_t)&v49);
        double v18 = (*(double (**)(os_unfair_lock_s *, long long *, uint64_t, void, double))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                + 248))(a1, &v49, a7, 0, v17);
        double v19 = v18;
        unsigned int v21 = *(double **)(a6 + 8);
        unint64_t v20 = *(void *)(a6 + 16);
        if ((unint64_t)v21 >= v20)
        {
          CMTimeEpoch v23 = *(double **)a6;
          uint64_t v24 = ((uint64_t)v21 - *(void *)a6) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v20 - (void)v23;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            double v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v27);
            CMTimeEpoch v23 = *(double **)a6;
            unsigned int v21 = *(double **)(a6 + 8);
          }
          else
          {
            double v28 = 0;
          }
          double v29 = (double *)&v28[8 * v24];
          *double v29 = v19;
          long long v22 = v29 + 1;
          while (v21 != v23)
          {
            uint64_t v30 = *((void *)v21-- - 1);
            *((void *)v29-- - atomic_store(0, (unint64_t *)this + 1) = v30;
          }
          *(void *)a6 = v29;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v22;
          *(void *)(a6 + 16) = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          double *v21 = v18;
          long long v22 = v21 + 1;
        }
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v22;
      }
      if (a5)
      {
        CMTime v54 = *a2;
        CMTime v53 = v51;
        PC_CMTimeSaferAdd(&v54, &v53, (uint64_t)&v49);
        unsigned int v32 = (char *)a5[1];
        long long v31 = (char *)a5[2];
        if (v32 >= v31)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)*a5) >> 3);
          unint64_t v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (unsigned char *)*a5) >> 3);
          if (2 * v37 > v36) {
            unint64_t v36 = 2 * v37;
          }
          if (v37 >= 0x555555555555555) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38) {
            unsigned int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v38);
          }
          else {
            unsigned int v39 = 0;
          }
          long long v40 = &v39[24 * v35];
          long long v41 = v49;
          *((void *)v40 + PCSpinLock::lock(this + 2) = v50;
          *(_OWORD *)long long v40 = v41;
          CMTimeEpoch v43 = (char *)*a5;
          int v42 = (char *)a5[1];
          unsigned int v44 = v40;
          if (v42 != *a5)
          {
            do
            {
              long long v45 = *(_OWORD *)(v42 - 24);
              *((void *)v44 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v42 - 1);
              *(_OWORD *)(v44 - 24) = v45;
              v44 -= 24;
              v42 -= 24;
            }
            while (v42 != v43);
            int v42 = (char *)*a5;
          }
          long long v34 = v40 + 24;
          *a5 = v44;
          a5[1] = v40 + 24;
          a5[2] = &v39[24 * v38];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          long long v33 = v49;
          *((void *)v32 + PCSpinLock::lock(this + 2) = v50;
          *(_OWORD *)unsigned int v32 = v33;
          long long v34 = v32 + 24;
        }
        a5[1] = v34;
      }
      ++v16;
    }
    while (v16 < *a4);
  }
  uint64_t v46 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v46 || (long long v47 = *(os_unfair_lock_s **)(v46 + 48)) == 0) {
    long long v47 = a1 + 2;
  }
  PCSpinLock::unlock(v47);
  return 1;
}

void std::vector<double>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    BOOL v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - atomic_store(0, (unint64_t *)this + 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    BOOL v7 = v6 + 1;
  }
  *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v7;
}

BOOL OZSpline::sampleSplineSegments(os_unfair_lock_s *a1, CMTime *a2, CMTime *a3, CMTime *a4, char **a5, double **a6)
{
  int v218 = 0;
  uint64_t v12 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v12 || (uint64_t v13 = *(os_unfair_lock_s **)(v12 + 48)) == 0) {
    uint64_t v13 = a1 + 2;
  }
  PCSpinLock::lock(v13);
  a5[1] = *a5;
  a6[1] = *a6;
  (*(void (**)(os_unfair_lock_s *, int *, void, void))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v218, 0, 0);
  CMTime time1 = *a3;
  CMTime time2 = *a2;
  int32_t v14 = CMTimeCompare(&time1, &time2);
  if ((v14 & 0x80000000) == 0)
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    if (!CMTimeCompare(&time1, &time2)
      || (time1 = *a4, CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTimeCompare(&time1, &time2) <= 0))
    {
      unsigned int v21 = a5[2];
      long long v22 = a5[1];
      if (v22 >= v21)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *a5) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_252;
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v21 - *a5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v28);
        }
        else {
          double v29 = 0;
        }
        v129 = &v29[24 * v25];
        v130 = &v29[24 * v28];
        long long v131 = *(_OWORD *)&a2->value;
        *((void *)v129 + PCSpinLock::lock(this + 2) = a2->epoch;
        *(_OWORD *)v129 = v131;
        uint64_t v24 = v129 + 24;
        v133 = *a5;
        v132 = a5[1];
        if (v132 != *a5)
        {
          do
          {
            long long v134 = *(_OWORD *)(v132 - 24);
            *((void *)v129 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v132 - 1);
            *(_OWORD *)(v129 - 24) = v134;
            v129 -= 24;
            v132 -= 24;
          }
          while (v132 != v133);
          v132 = *a5;
        }
        *a5 = v129;
        a5[1] = v24;
        a5[2] = v130;
        if (v132) {
          operator delete(v132);
        }
      }
      else
      {
        long long v23 = *(_OWORD *)&a2->value;
        *((void *)v22 + PCSpinLock::lock(this + 2) = a2->epoch;
        *(_OWORD *)long long v22 = v23;
        uint64_t v24 = v22 + 24;
      }
      a5[1] = v24;
      double v135 = (*(double (**)(os_unfair_lock_s *, CMTime *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                    + 240))(a1, a2, MEMORY[0x1E4F1FA48], 0);
      double v136 = v135;
      unint64_t v137 = (unint64_t)a6[2];
      v138 = a6[1];
      if ((unint64_t)v138 >= v137)
      {
        v140 = *a6;
        uint64_t v141 = v138 - *a6;
        unint64_t v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61) {
          goto LABEL_251;
        }
        uint64_t v143 = v137 - (void)v140;
        if (v143 >> 2 > v142) {
          unint64_t v142 = v143 >> 2;
        }
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v144 = v142;
        }
        if (v144)
        {
          v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v144);
          v140 = *a6;
          v138 = a6[1];
        }
        else
        {
          v145 = 0;
        }
        v146 = (double *)&v145[8 * v141];
        v147 = &v145[8 * v144];
        double *v146 = v136;
        v139 = v146 + 1;
        while (v138 != v140)
        {
          uint64_t v148 = *((void *)v138-- - 1);
          *((void *)v146-- - atomic_store(0, (unint64_t *)this + 1) = v148;
        }
        *a6 = v146;
        a6[1] = v139;
        a6[2] = (double *)v147;
        if (v140) {
          operator delete(v140);
        }
      }
      else
      {
        double *v138 = v135;
        v139 = v138 + 1;
      }
      a6[1] = v139;
      return v14 >= 0;
    }
    if (**(unsigned char **)&a1[42]._os_unfair_lock_opaque)
    {
      uint64_t Interpolator = OZInterpolators::getInterpolator(*(OZInterpolators **)&a1[38]._os_unfair_lock_opaque, v218);
      if (((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator) & 1) == 0)
      {
        CMTime time1 = *a3;
        CMTime time2 = *a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v217);
        double Seconds = CMTimeGetSeconds(&v217);
        CMTime v216 = *a4;
        LODWORD(time1.value) = (Seconds / CMTimeGetSeconds(&v216));
        (*(void (**)(os_unfair_lock_s *, CMTime *, CMTime *, CMTime *, char **, double **, void, void))(*(void *)&a1->_os_unfair_lock_opaque + 48))(a1, a2, a4, &time1, a5, a6, MEMORY[0x1E4F1FA48], 0);
        goto LABEL_246;
      }
    }
    if (OZSpline::getNumberOfValidVertices((OZSpline *)a1, MEMORY[0x1E4F1FA48]) <= 1)
    {
      double v16 = (*(double (**)(os_unfair_lock_s *, CMTime *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                   + 240))(a1, a2, MEMORY[0x1E4F1FA48], 0);
      double v17 = v16;
      unint64_t v18 = (unint64_t)a6[2];
      double v19 = a6[1];
      if ((unint64_t)v19 >= v18)
      {
        v149 = *a6;
        uint64_t v150 = v19 - *a6;
        unint64_t v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 61) {
          goto LABEL_251;
        }
        uint64_t v152 = v18 - (void)v149;
        if (v152 >> 2 > v151) {
          unint64_t v151 = v152 >> 2;
        }
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v151;
        }
        if (v153)
        {
          v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v153);
          v149 = *a6;
          double v19 = a6[1];
        }
        else
        {
          v154 = 0;
        }
        v155 = (double *)&v154[8 * v150];
        v156 = &v154[8 * v153];
        double *v155 = v17;
        unint64_t v20 = v155 + 1;
        while (v19 != v149)
        {
          uint64_t v157 = *((void *)v19-- - 1);
          *((void *)v155-- - atomic_store(0, (unint64_t *)this + 1) = v157;
        }
        *a6 = v155;
        a6[1] = v20;
        a6[2] = (double *)v156;
        if (v149) {
          operator delete(v149);
        }
      }
      else
      {
        *double v19 = v16;
        unint64_t v20 = v19 + 1;
      }
      a6[1] = v20;
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      if (!CMTimeCompare(&time1, &time2)) {
        goto LABEL_212;
      }
      double v158 = (*(double (**)(os_unfair_lock_s *, CMTime *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                    + 240))(a1, a3, MEMORY[0x1E4F1FA48], 0);
      double v159 = v158;
      v161 = a6[1];
      unint64_t v160 = (unint64_t)a6[2];
      if ((unint64_t)v161 < v160)
      {
        double *v161 = v158;
        v162 = v161 + 1;
LABEL_211:
        a6[1] = v162;
LABEL_212:
        v172 = a5[2];
        v173 = a5[1];
        if (v173 >= v172)
        {
          unint64_t v176 = 0xAAAAAAAAAAAAAAABLL * ((v173 - *a5) >> 3);
          unint64_t v177 = v176 + 1;
          if (v176 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_252;
          }
          unint64_t v178 = 0xAAAAAAAAAAAAAAABLL * ((v172 - *a5) >> 3);
          if (2 * v178 > v177) {
            unint64_t v177 = 2 * v178;
          }
          if (v178 >= 0x555555555555555) {
            unint64_t v179 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v179 = v177;
          }
          if (v179) {
            v180 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v179);
          }
          else {
            v180 = 0;
          }
          v181 = &v180[24 * v176];
          v182 = &v180[24 * v179];
          long long v183 = *(_OWORD *)&a2->value;
          *((void *)v181 + PCSpinLock::lock(this + 2) = a2->epoch;
          *(_OWORD *)v181 = v183;
          v175 = v181 + 24;
          v185 = *a5;
          v184 = a5[1];
          if (v184 != *a5)
          {
            do
            {
              long long v186 = *(_OWORD *)(v184 - 24);
              *((void *)v181 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v184 - 1);
              *(_OWORD *)(v181 - 24) = v186;
              v181 -= 24;
              v184 -= 24;
            }
            while (v184 != v185);
            v184 = *a5;
          }
          *a5 = v181;
          a5[1] = v175;
          a5[2] = v182;
          if (v184) {
            operator delete(v184);
          }
        }
        else
        {
          long long v174 = *(_OWORD *)&a2->value;
          *((void *)v173 + PCSpinLock::lock(this + 2) = a2->epoch;
          *(_OWORD *)v173 = v174;
          v175 = v173 + 24;
        }
        a5[1] = v175;
        CMTime time1 = *a2;
        CMTime time2 = *a3;
        if (!CMTimeCompare(&time1, &time2)) {
          goto LABEL_246;
        }
        v188 = a5[1];
        v187 = a5[2];
        if (v188 < v187)
        {
          long long v189 = *(_OWORD *)&a3->value;
          *((void *)v188 + PCSpinLock::lock(this + 2) = a3->epoch;
          *(_OWORD *)v188 = v189;
          v190 = v188 + 24;
LABEL_245:
          a5[1] = v190;
LABEL_246:
          uint64_t v202 = *(void *)&a1[40]._os_unfair_lock_opaque;
          if (!v202 || (v203 = *(os_unfair_lock_s **)(v202 + 48)) == 0) {
            v203 = a1 + 2;
          }
          PCSpinLock::unlock(v203);
          return v14 >= 0;
        }
        unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((v188 - *a5) >> 3);
        unint64_t v192 = v191 + 1;
        if (v191 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          unint64_t v193 = 0xAAAAAAAAAAAAAAABLL * ((v187 - *a5) >> 3);
          if (2 * v193 > v192) {
            unint64_t v192 = 2 * v193;
          }
          if (v193 >= 0x555555555555555) {
            unint64_t v194 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v194 = v192;
          }
          if (v194) {
            v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v194);
          }
          else {
            v195 = 0;
          }
          v196 = &v195[24 * v191];
          v197 = &v195[24 * v194];
          long long v198 = *(_OWORD *)&a3->value;
          *((void *)v196 + PCSpinLock::lock(this + 2) = a3->epoch;
          *(_OWORD *)v196 = v198;
          v190 = v196 + 24;
          v200 = *a5;
          v199 = a5[1];
          if (v199 != *a5)
          {
            do
            {
              long long v201 = *(_OWORD *)(v199 - 24);
              *((void *)v196 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v199 - 1);
              *(_OWORD *)(v196 - 24) = v201;
              v196 -= 24;
              v199 -= 24;
            }
            while (v199 != v200);
            v199 = *a5;
          }
          *a5 = v196;
          a5[1] = v190;
          a5[2] = v197;
          if (v199) {
            operator delete(v199);
          }
          goto LABEL_245;
        }
LABEL_252:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      v163 = *a6;
      uint64_t v164 = v161 - *a6;
      unint64_t v165 = v164 + 1;
      if (!((unint64_t)(v164 + 1) >> 61))
      {
        uint64_t v166 = v160 - (void)v163;
        if (v166 >> 2 > v165) {
          unint64_t v165 = v166 >> 2;
        }
        if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v167 = v165;
        }
        if (v167)
        {
          v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v167);
          v163 = *a6;
          v161 = a6[1];
        }
        else
        {
          v168 = 0;
        }
        v169 = (double *)&v168[8 * v164];
        v170 = &v168[8 * v167];
        double *v169 = v159;
        v162 = v169 + 1;
        while (v161 != v163)
        {
          uint64_t v171 = *((void *)v161-- - 1);
          *((void *)v169-- - atomic_store(0, (unint64_t *)this + 1) = v171;
        }
        *a6 = v169;
        a6[1] = v162;
        a6[2] = (double *)v170;
        if (v163) {
          operator delete(v163);
        }
        goto LABEL_211;
      }
LABEL_251:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    v214 = 0;
    v215 = 0;
    CMTime v213 = *a2;
    CMTime v212 = v213;
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
LABEL_152:
      v127 = a5[1];
      if (v127 != *a5 && !PCMath::equal((PCMath *)(v127 - 24), a3, MEMORY[0x1E4F1FA48], v30))
      {
        time1.CMTimeValue value = (*(double (**)(os_unfair_lock_s *, CMTime *, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                             + 240))(a1, a3, MEMORY[0x1E4F1FA48], 0);
        std::vector<double>::push_back[abi:ne180100]((uint64_t)a6, &time1);
        std::vector<CMTime>::push_back[abi:ne180100]((void **)a5, (long long *)&a3->value);
      }
      goto LABEL_246;
    }
    uint64_t v205 = (uint64_t)(a5 + 2);
    uint64_t v206 = (uint64_t)(a6 + 2);
    long long v31 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      if (!OZSpline::getNextValidVertex((OZSpline *)a1, &v213, &v214, v31, 0)
        || (long long v32 = *((_OWORD *)v214 + 1),
            v212.CMTimeEpoch epoch = *((void *)v214 + 4),
            *(_OWORD *)&v212.CMTimeValue value = v32,
            *(_OWORD *)&time1.CMTimeValue value = v32,
            time1.CMTimeEpoch epoch = v212.epoch,
            CMTime time2 = *a3,
            CMTimeCompare(&time1, &time2) >= 1))
      {
        CMTime v212 = *a3;
      }
      if (!OZSpline::getVertexHandle((OZSpline *)a1, &v213, &v215, 0)
        && !OZSpline::getPreviousValidVertex((OZSpline *)a1, &v213, &v215, v31, 0))
      {
        break;
      }
      if (!v214)
      {
        unsigned int v34 = *(_DWORD *)(*(void *)&a1[42]._os_unfair_lock_opaque + 36);
LABEL_40:
        if (v34 < 2) {
          goto LABEL_41;
        }
        goto LABEL_45;
      }
      if ((*(unsigned int (**)(void *))(*(void *)v215 + 208))(v215) == 1
        || (*(unsigned int (**)(void *))(*(void *)v215 + 208))(v215) == 4
        && (time1.CMTimeValue value = 0,
            time2.CMTimeValue value = 0,
            v209.CMTimeValue value = 0,
            *(void *)&long long v207 = 0,
            (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(void *)v214 + 56))(v214, &time1, &v209, v31), (*(void (**)(void *, CMTime *, long long *, const CMTime *))(*(void *)v215 + 64))(v215, &time2, &v207, v31), fabs(*(double *)&time1.value) < 0.0000001)&& fabs(*(double *)&time2.value) < 0.0000001&& fabs(*(double *)&v209.value) < 0.0000001&& fabs(*(double *)&v207) < 0.0000001)
      {
LABEL_41:
        unint64_t v35 = a5[1];
        if (v35 == *a5 || !PCMath::equal((PCMath *)(v35 - 24), &v213, v31, v33))
        {
          double v36 = (*(double (**)(os_unfair_lock_s *, CMTime *, const CMTime *, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                               + 240))(a1, &v213, v31, 0);
          double v37 = v36;
          unsigned int v39 = a6[1];
          unint64_t v38 = (unint64_t)a6[2];
          if ((unint64_t)v39 >= v38)
          {
            uint64_t v76 = *a6;
            uint64_t v77 = v39 - *a6;
            unint64_t v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 61) {
              goto LABEL_251;
            }
            uint64_t v79 = v38 - (void)v76;
            if (v79 >> 2 > v78) {
              unint64_t v78 = v79 >> 2;
            }
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v78;
            }
            if (v80)
            {
              int v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v206, v80);
              uint64_t v76 = *a6;
              unsigned int v39 = a6[1];
            }
            else
            {
              int v81 = 0;
            }
            int v82 = (double *)&v81[8 * v77];
            *int v82 = v37;
            long long v40 = v82 + 1;
            while (v39 != v76)
            {
              uint64_t v83 = *((void *)v39-- - 1);
              *((void *)v82-- - atomic_store(0, (unint64_t *)this + 1) = v83;
            }
            *a6 = v82;
            a6[1] = v40;
            a6[2] = (double *)&v81[8 * v80];
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            *unsigned int v39 = v36;
            long long v40 = v39 + 1;
          }
          a6[1] = v40;
          uint64_t v85 = a5[1];
          double v84 = a5[2];
          if (v85 >= v84)
          {
            unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((v85 - *a5) >> 3);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_252;
            }
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((v84 - *a5) >> 3);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0x555555555555555) {
              unint64_t v91 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91) {
              uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v205, v91);
            }
            else {
              uint64_t v92 = 0;
            }
            double v93 = &v92[24 * v88];
            long long v94 = *(_OWORD *)&v213.value;
            *((void *)v93 + PCSpinLock::lock(this + 2) = v213.epoch;
            *(_OWORD *)double v93 = v94;
            v96 = *a5;
            uint64_t v95 = a5[1];
            v97 = v93;
            if (v95 != *a5)
            {
              do
              {
                long long v98 = *(_OWORD *)(v95 - 24);
                *((void *)v97 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v95 - 1);
                *(_OWORD *)(v97 - 24) = v98;
                v97 -= 24;
                v95 -= 24;
              }
              while (v95 != v96);
              uint64_t v95 = *a5;
            }
            int v87 = v93 + 24;
            *a5 = v97;
            a5[1] = v93 + 24;
            a5[2] = &v92[24 * v91];
            if (v95) {
              operator delete(v95);
            }
          }
          else
          {
            long long v86 = *(_OWORD *)&v213.value;
            *((void *)v85 + PCSpinLock::lock(this + 2) = v213.epoch;
            *(_OWORD *)uint64_t v85 = v86;
            int v87 = v85 + 24;
          }
          a5[1] = v87;
        }
        double v99 = (*(double (**)(os_unfair_lock_s *, CMTime *, const CMTime *, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                             + 240))(a1, &v212, v31, 0);
        double v100 = v99;
        v102 = a6[1];
        unint64_t v101 = (unint64_t)a6[2];
        if ((unint64_t)v102 >= v101)
        {
          v104 = *a6;
          uint64_t v105 = v102 - *a6;
          unint64_t v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 61) {
            goto LABEL_251;
          }
          uint64_t v107 = v101 - (void)v104;
          if (v107 >> 2 > v106) {
            unint64_t v106 = v107 >> 2;
          }
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v108 = v106;
          }
          if (v108)
          {
            v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v206, v108);
            v104 = *a6;
            v102 = a6[1];
          }
          else
          {
            v109 = 0;
          }
          v110 = (double *)&v109[8 * v105];
          double *v110 = v100;
          v103 = v110 + 1;
          while (v102 != v104)
          {
            uint64_t v111 = *((void *)v102-- - 1);
            *((void *)v110-- - atomic_store(0, (unint64_t *)this + 1) = v111;
          }
          *a6 = v110;
          a6[1] = v103;
          a6[2] = (double *)&v109[8 * v108];
          if (v104) {
            operator delete(v104);
          }
        }
        else
        {
          double *v102 = v99;
          v103 = v102 + 1;
        }
        a6[1] = v103;
        v113 = a5[1];
        v112 = a5[2];
        if (v113 >= v112)
        {
          unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *a5) >> 3);
          unint64_t v117 = v116 + 1;
          if (v116 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_252;
          }
          unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((v112 - *a5) >> 3);
          if (2 * v118 > v117) {
            unint64_t v117 = 2 * v118;
          }
          if (v118 >= 0x555555555555555) {
            unint64_t v119 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v119 = v117;
          }
          if (v119) {
            v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v205, v119);
          }
          else {
            v120 = 0;
          }
          v121 = &v120[24 * v116];
          long long v122 = *(_OWORD *)&v212.value;
          *((void *)v121 + PCSpinLock::lock(this + 2) = v212.epoch;
          *(_OWORD *)v121 = v122;
          v124 = *a5;
          v123 = a5[1];
          v125 = v121;
          if (v123 != *a5)
          {
            do
            {
              long long v126 = *(_OWORD *)(v123 - 24);
              *((void *)v125 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v123 - 1);
              *(_OWORD *)(v125 - 24) = v126;
              v125 -= 24;
              v123 -= 24;
            }
            while (v123 != v124);
            v123 = *a5;
          }
          v115 = v121 + 24;
          *a5 = v125;
          a5[1] = v121 + 24;
          a5[2] = &v120[24 * v119];
          if (v123) {
            operator delete(v123);
          }
        }
        else
        {
          long long v114 = *(_OWORD *)&v212.value;
          *((void *)v113 + PCSpinLock::lock(this + 2) = v212.epoch;
          *(_OWORD *)v113 = v114;
          v115 = v113 + 24;
        }
        a5[1] = v115;
        goto LABEL_151;
      }
LABEL_45:
      CMTime time1 = v212;
      CMTime time2 = v213;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      double v41 = CMTimeGetSeconds(&time);
      CMTime v210 = *a4;
      int v42 = (int)(v41 / CMTimeGetSeconds(&v210));
      if ((v42 & 0x80000000) == 0)
      {
        int32_t v43 = 0;
        do
        {
          memset(&v209, 0, sizeof(v209));
          operator*(a4, v43, &v209);
          if (!v43)
          {
            CMTime v57 = a5[1];
            if (v57 != *a5 && PCMath::equal((PCMath *)(v57 - 24), &v213, v31, v44)) {
              continue;
            }
          }
          CMTime time1 = v213;
          CMTime time2 = v209;
          double v45 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v207);
          double v46 = (*(double (**)(os_unfair_lock_s *, long long *, const CMTime *, void, double))(*(void *)&a1->_os_unfair_lock_opaque + 240))(a1, &v207, v31, 0, v45);
          double v47 = v46;
          long long v49 = a6[1];
          unint64_t v48 = (unint64_t)a6[2];
          if ((unint64_t)v49 >= v48)
          {
            CMTime v51 = *a6;
            uint64_t v52 = v49 - *a6;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61) {
              goto LABEL_251;
            }
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 2 > v53) {
              unint64_t v53 = v54 >> 2;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              CMTime v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v206, v55);
              CMTime v51 = *a6;
              long long v49 = a6[1];
            }
            else
            {
              CMTime v56 = 0;
            }
            CMTime v58 = (double *)&v56[8 * v52];
            *CMTime v58 = v47;
            uint64_t v50 = v58 + 1;
            while (v49 != v51)
            {
              uint64_t v59 = *((void *)v49-- - 1);
              *((void *)v58-- - atomic_store(0, (unint64_t *)this + 1) = v59;
            }
            *a6 = v58;
            a6[1] = v50;
            a6[2] = (double *)&v56[8 * v55];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *long long v49 = v46;
            uint64_t v50 = v49 + 1;
          }
          a6[1] = v50;
          CMTime time1 = v213;
          CMTime time2 = v209;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v207);
          CMTime v61 = a5[1];
          int v60 = a5[2];
          if (v61 >= v60)
          {
            unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *a5) >> 3);
            unint64_t v65 = v64 + 1;
            if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_252;
            }
            unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v60 - *a5) >> 3);
            if (2 * v66 > v65) {
              unint64_t v65 = 2 * v66;
            }
            if (v66 >= 0x555555555555555) {
              unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67) {
              CMTime v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v205, v67);
            }
            else {
              CMTime v68 = 0;
            }
            CMTime v69 = &v68[24 * v64];
            long long v70 = v207;
            *((void *)v69 + PCSpinLock::lock(this + 2) = v208;
            *(_OWORD *)CMTime v69 = v70;
            double v72 = *a5;
            double v71 = a5[1];
            double v73 = v69;
            if (v71 != *a5)
            {
              do
              {
                long long v74 = *(_OWORD *)(v71 - 24);
                *((void *)v73 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v71 - 1);
                *(_OWORD *)(v73 - 24) = v74;
                v73 -= 24;
                v71 -= 24;
              }
              while (v71 != v72);
              double v71 = *a5;
            }
            CMTime v63 = v69 + 24;
            *a5 = v73;
            a5[1] = v69 + 24;
            a5[2] = &v68[24 * v67];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            long long v62 = v207;
            *((void *)v61 + PCSpinLock::lock(this + 2) = v208;
            *(_OWORD *)CMTime v61 = v62;
            CMTime v63 = v61 + 24;
          }
          a5[1] = v63;
        }
        while (v43++ != v42);
      }
LABEL_151:
      CMTime v213 = v212;
      CMTime time1 = v212;
      CMTime time2 = *a3;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        goto LABEL_152;
      }
    }
    if (!v214) {
      goto LABEL_45;
    }
    unsigned int v34 = *(_DWORD *)(*(void *)&a1[42]._os_unfair_lock_opaque + 40);
    goto LABEL_40;
  }
  return v14 >= 0;
}

void std::vector<CMTime>::push_back[abi:ne180100](void **a1, long long *a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      int32_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v4, v13);
    }
    else {
      int32_t v14 = 0;
    }
    unint64_t v15 = &v14[24 * v10];
    double v16 = &v14[24 * v13];
    long long v17 = *a2;
    *((void *)v15 + PCSpinLock::lock(this + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v15 = v17;
    uint64_t v9 = v15 + 24;
    double v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v15 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

uint64_t OZSpline::sampleSpline(uint64_t a1, CMTime *a2, CMTime *a3, int32_t *a4, void **a5, uint64_t a6, const CMTime *a7, char a8)
{
  int v246 = 0;
  uint64_t v15 = *(void *)(a1 + 160);
  if (!v15 || (double v16 = *(os_unfair_lock_s **)(v15 + 48)) == 0) {
    double v16 = (os_unfair_lock_s *)(a1 + 8);
  }
  PCSpinLock::lock(v16);
  (*(void (**)(uint64_t, int *, void, void))(*(void *)a1 + 16))(a1, &v246, 0, 0);
  if (**(unsigned char **)(a1 + 168)
    && (uint64_t v17 = OZInterpolators::getInterpolator(*(OZInterpolators **)(a1 + 152), v246),
        ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 64))(v17) & 1) == 0))
  {
    memset(&v245, 0, sizeof(v245));
    operator*(a3, *a4, &v245);
    memset(&v244, 0, sizeof(v244));
    CMTime time1 = *a2;
    CMTime time2 = v245;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v244);
    uint64_t Interpolator = OZInterpolators::getInterpolator(*(OZInterpolators **)(a1 + 152), v246);
    (*(void (**)(CMTime *__return_ptr))(*(void *)Interpolator + 72))(&time1);
    CMTime v244 = time1;
    memset(&v243, 0, sizeof(v243));
    uint64_t v54 = OZInterpolators::getInterpolator(*(OZInterpolators **)(a1 + 152), v246);
    (*(void (**)(CMTime *__return_ptr))(*(void *)v54 + 80))(&v243);
    memset(&v242, 0, sizeof(v242));
    CMTime time1 = v244;
    CMTime time2 = v243;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v241);
    operator*(&v241, &v242, 1.0 / (double)(*a4 - 1));
    if (*a4)
    {
      unsigned int v55 = 0;
      do
      {
        operator*(&v242, v55, &time1);
        CMTime v245 = time1;
        if (a6)
        {
          CMTime v57 = *(void ***)(a1 + 16);
          CMTime v56 = *(void ***)(a1 + 24);
          if (v57 == v56)
          {
            CMTime v58 = 0;
            uint64_t v59 = 0;
          }
          else
          {
            CMTime v58 = *v57;
            uint64_t v59 = *(v56 - 1);
          }
          v240 = 0;
          CMTime time1 = v243;
          CMTime time2 = v245;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v241);
          OZSpline::interpolate((OZSpline *)a1, a7, v58, v59, &v241, (double *)&v240, 0);
          CMTime v61 = *(void ***)(a6 + 8);
          unint64_t v60 = *(void *)(a6 + 16);
          if ((unint64_t)v61 >= v60)
          {
            CMTime v63 = *(double **)a6;
            uint64_t v64 = ((uint64_t)v61 - *(void *)a6) >> 3;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61) {
              goto LABEL_292;
            }
            uint64_t v66 = v60 - (void)v63;
            if (v66 >> 2 > v65) {
              unint64_t v65 = v66 >> 2;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              CMTime v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v67);
              CMTime v63 = *(double **)a6;
              CMTime v61 = *(void ***)(a6 + 8);
            }
            else
            {
              CMTime v68 = 0;
            }
            CMTime v69 = (void **)&v68[8 * v64];
            *CMTime v69 = v240;
            long long v62 = v69 + 1;
            while (v61 != (void **)v63)
            {
              long long v70 = *--v61;
              *--CMTime v69 = v70;
            }
            *(void *)a6 = v69;
            *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v62;
            *(void *)(a6 + 16) = &v68[8 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *CMTime v61 = v240;
            long long v62 = v61 + 1;
          }
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v62;
        }
        if (a5)
        {
          CMTime time1 = v243;
          CMTime time2 = v245;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v241);
          double v72 = (char *)a5[1];
          double v71 = (char *)a5[2];
          if (v72 >= v71)
          {
            unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((v72 - (unsigned char *)*a5) >> 3);
            unint64_t v76 = v75 + 1;
            if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_293;
            }
            unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v71 - (unsigned char *)*a5) >> 3);
            if (2 * v77 > v76) {
              unint64_t v76 = 2 * v77;
            }
            if (v77 >= 0x555555555555555) {
              unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78) {
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v78);
            }
            else {
              uint64_t v79 = 0;
            }
            unint64_t v80 = &v79[24 * v75];
            long long v81 = *(_OWORD *)&v241.value;
            *((void *)v80 + PCSpinLock::lock(this + 2) = v241.epoch;
            *(_OWORD *)unint64_t v80 = v81;
            uint64_t v83 = (char *)*a5;
            int v82 = (char *)a5[1];
            double v84 = v80;
            if (v82 != *a5)
            {
              do
              {
                long long v85 = *(_OWORD *)(v82 - 24);
                *((void *)v84 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v82 - 1);
                *(_OWORD *)(v84 - 24) = v85;
                v84 -= 24;
                v82 -= 24;
              }
              while (v82 != v83);
              int v82 = (char *)*a5;
            }
            long long v74 = v80 + 24;
            *a5 = v84;
            a5[1] = v80 + 24;
            a5[2] = &v79[24 * v78];
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            long long v73 = *(_OWORD *)&v241.value;
            *((void *)v72 + PCSpinLock::lock(this + 2) = v241.epoch;
            *(_OWORD *)double v72 = v73;
            long long v74 = v72 + 24;
          }
          a5[1] = v74;
        }
        ++v55;
      }
      while (v55 < *a4);
    }
  }
  else
  {
    if (a8)
    {
      if (OZSpline::getNumberOfValidVertices((OZSpline *)a1, a7) <= 1)
      {
        if (!a6) {
          goto LABEL_251;
        }
        double v18 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void))(*(void *)a1 + 240))(a1, a2, a7, 0);
        double v19 = v18;
        unint64_t v20 = *(void *)(a6 + 16);
        unsigned int v21 = *(double **)(a6 + 8);
        if ((unint64_t)v21 >= v20)
        {
          unint64_t v177 = *(double **)a6;
          uint64_t v178 = ((uint64_t)v21 - *(void *)a6) >> 3;
          unint64_t v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 61) {
            goto LABEL_292;
          }
          uint64_t v180 = v20 - (void)v177;
          if (v180 >> 2 > v179) {
            unint64_t v179 = v180 >> 2;
          }
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v181 = v179;
          }
          if (v181)
          {
            v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v181);
            unint64_t v177 = *(double **)a6;
            unsigned int v21 = *(double **)(a6 + 8);
          }
          else
          {
            v182 = 0;
          }
          long long v183 = (double *)&v182[8 * v178];
          v184 = &v182[8 * v181];
          *long long v183 = v19;
          long long v22 = v183 + 1;
          while (v21 != v177)
          {
            uint64_t v185 = *((void *)v21-- - 1);
            *((void *)v183-- - atomic_store(0, (unint64_t *)this + 1) = v185;
          }
          *(void *)a6 = v183;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v22;
          *(void *)(a6 + 16) = v184;
          if (v177) {
            operator delete(v177);
          }
        }
        else
        {
          double *v21 = v18;
          long long v22 = v21 + 1;
        }
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v22;
        if (*a4 < 2) {
          goto LABEL_251;
        }
        operator*(a3, *a4 - 1, &v244);
        CMTime time1 = *a2;
        CMTime time2 = v244;
        double v186 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v245);
        double v187 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void, double))(*(void *)a1 + 240))(a1, &v245, a7, 0, v186);
        double v188 = v187;
        v190 = *(double **)(a6 + 8);
        unint64_t v189 = *(void *)(a6 + 16);
        if ((unint64_t)v190 < v189)
        {
          double *v190 = v187;
          unint64_t v191 = v190 + 1;
LABEL_250:
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v191;
LABEL_251:
          if (!a5) {
            goto LABEL_286;
          }
          long long v201 = (char *)a5[2];
          uint64_t v202 = (char *)a5[1];
          if (v202 >= v201)
          {
            unint64_t v205 = 0xAAAAAAAAAAAAAAABLL * ((v202 - (unsigned char *)*a5) >> 3);
            unint64_t v206 = v205 + 1;
            if (v205 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_293;
            }
            unint64_t v207 = 0xAAAAAAAAAAAAAAABLL * ((v201 - (unsigned char *)*a5) >> 3);
            if (2 * v207 > v206) {
              unint64_t v206 = 2 * v207;
            }
            if (v207 >= 0x555555555555555) {
              unint64_t v208 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v208 = v206;
            }
            if (v208) {
              CMTime v209 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v208);
            }
            else {
              CMTime v209 = 0;
            }
            CMTime v210 = &v209[24 * v205];
            v211 = &v209[24 * v208];
            long long v212 = *(_OWORD *)&a2->value;
            *((void *)v210 + PCSpinLock::lock(this + 2) = a2->epoch;
            *(_OWORD *)CMTime v210 = v212;
            v204 = v210 + 24;
            v214 = (char *)*a5;
            CMTime v213 = (char *)a5[1];
            if (v213 != *a5)
            {
              do
              {
                long long v215 = *(_OWORD *)(v213 - 24);
                *((void *)v210 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v213 - 1);
                *(_OWORD *)(v210 - 24) = v215;
                v210 -= 24;
                v213 -= 24;
              }
              while (v213 != v214);
              CMTime v213 = (char *)*a5;
            }
            *a5 = v210;
            a5[1] = v204;
            a5[2] = v211;
            if (v213) {
              operator delete(v213);
            }
          }
          else
          {
            long long v203 = *(_OWORD *)&a2->value;
            *((void *)v202 + PCSpinLock::lock(this + 2) = a2->epoch;
            *(_OWORD *)uint64_t v202 = v203;
            v204 = v202 + 24;
          }
          a5[1] = v204;
          if (*a4 < 2) {
            goto LABEL_288;
          }
          operator*(a3, *a4 - 1, &v244);
          CMTime time1 = *a2;
          CMTime time2 = v244;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v245);
          CMTime v217 = (char *)a5[1];
          CMTime v216 = (char *)a5[2];
          if (v217 < v216)
          {
            long long v218 = *(_OWORD *)&v245.value;
            *((void *)v217 + PCSpinLock::lock(this + 2) = v245.epoch;
            *(_OWORD *)CMTime v217 = v218;
            v219 = v217 + 24;
LABEL_285:
            a5[1] = v219;
LABEL_286:
            if (*a4 >= 2) {
              *a4 = 2;
            }
            goto LABEL_288;
          }
          unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * ((v217 - (unsigned char *)*a5) >> 3);
          unint64_t v221 = v220 + 1;
          if (v220 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            unint64_t v222 = 0xAAAAAAAAAAAAAAABLL * ((v216 - (unsigned char *)*a5) >> 3);
            if (2 * v222 > v221) {
              unint64_t v221 = 2 * v222;
            }
            if (v222 >= 0x555555555555555) {
              unint64_t v223 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v223 = v221;
            }
            if (v223) {
              v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v223);
            }
            else {
              v224 = 0;
            }
            v225 = &v224[24 * v220];
            v226 = &v224[24 * v223];
            long long v227 = *(_OWORD *)&v245.value;
            *((void *)v225 + PCSpinLock::lock(this + 2) = v245.epoch;
            *(_OWORD *)v225 = v227;
            v219 = v225 + 24;
            v229 = (char *)*a5;
            v228 = (char *)a5[1];
            if (v228 != *a5)
            {
              do
              {
                long long v230 = *(_OWORD *)(v228 - 24);
                *((void *)v225 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v228 - 1);
                *(_OWORD *)(v225 - 24) = v230;
                v225 -= 24;
                v228 -= 24;
              }
              while (v228 != v229);
              v228 = (char *)*a5;
            }
            *a5 = v225;
            a5[1] = v219;
            a5[2] = v226;
            if (v228) {
              operator delete(v228);
            }
            goto LABEL_285;
          }
LABEL_293:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v192 = *(double **)a6;
        uint64_t v193 = ((uint64_t)v190 - *(void *)a6) >> 3;
        unint64_t v194 = v193 + 1;
        if (!((unint64_t)(v193 + 1) >> 61))
        {
          uint64_t v195 = v189 - (void)v192;
          if (v195 >> 2 > v194) {
            unint64_t v194 = v195 >> 2;
          }
          if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v196 = v194;
          }
          if (v196)
          {
            v197 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v196);
            unint64_t v192 = *(double **)a6;
            v190 = *(double **)(a6 + 8);
          }
          else
          {
            v197 = 0;
          }
          long long v198 = (double *)&v197[8 * v193];
          v199 = &v197[8 * v196];
          *long long v198 = v188;
          unint64_t v191 = v198 + 1;
          while (v190 != v192)
          {
            uint64_t v200 = *((void *)v190-- - 1);
            *((void *)v198-- - atomic_store(0, (unint64_t *)this + 1) = v200;
          }
          *(void *)a6 = v198;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v191;
          *(void *)(a6 + 16) = v199;
          if (v192) {
            operator delete(v192);
          }
          goto LABEL_250;
        }
LABEL_292:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      v239 = 0;
      v240 = 0;
      CMTime v245 = *a2;
      CMTime v244 = v245;
      operator*(a3, *a4 - 1, &v242);
      CMTime time1 = *a2;
      CMTime time2 = v242;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v243);
      CMTime time1 = v244;
      CMTime time2 = v243;
      int32_t v86 = 0;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
LABEL_218:
        *a4 = v86;
        goto LABEL_288;
      }
      uint64_t v234 = (uint64_t)(a5 + 2);
      uint64_t v235 = a6 + 16;
      int v87 = (const CMTime *)MEMORY[0x1E4F1FA48];
      while (1)
      {
        if (!OZSpline::getNextValidVertex((OZSpline *)a1, &v245, &v239, v87, 0)
          || (long long v88 = *((_OWORD *)v239 + 1),
              v244.CMTimeEpoch epoch = *((void *)v239 + 4),
              *(_OWORD *)&v244.CMTimeValue value = v88,
              *(_OWORD *)&time1.CMTimeValue value = v88,
              time1.CMTimeEpoch epoch = v244.epoch,
              CMTime time2 = v243,
              CMTimeCompare(&time1, &time2) >= 1))
        {
          CMTime v244 = v243;
        }
        if (!OZSpline::getVertexHandle((OZSpline *)a1, &v245, &v240, 0)
          && !OZSpline::getPreviousValidVertex((OZSpline *)a1, &v245, &v240, v87, 0))
        {
          break;
        }
        if (!v239) {
          goto LABEL_104;
        }
        if ((*(unsigned int (**)(void *))(*(void *)v240 + 208))(v240) == 1) {
          goto LABEL_108;
        }
        if (!v239)
        {
LABEL_104:
          unsigned int v89 = *(_DWORD *)(*(void *)(a1 + 168) + 36);
LABEL_107:
          if (v89 < 2)
          {
LABEL_108:
            if (a6)
            {
              double v90 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void))(*(void *)a1 + 240))(a1, &v245, a7, 0);
              double v91 = v90;
              double v93 = *(double **)(a6 + 8);
              unint64_t v92 = *(void *)(a6 + 16);
              if ((unint64_t)v93 >= v92)
              {
                v127 = *(double **)a6;
                uint64_t v128 = ((uint64_t)v93 - *(void *)a6) >> 3;
                unint64_t v129 = v128 + 1;
                if ((unint64_t)(v128 + 1) >> 61) {
                  goto LABEL_292;
                }
                uint64_t v130 = v92 - (void)v127;
                if (v130 >> 2 > v129) {
                  unint64_t v129 = v130 >> 2;
                }
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v131 = v129;
                }
                if (v131)
                {
                  v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v235, v131);
                  v127 = *(double **)a6;
                  double v93 = *(double **)(a6 + 8);
                }
                else
                {
                  v132 = 0;
                }
                v133 = (double *)&v132[8 * v128];
                double *v133 = v91;
                long long v94 = v133 + 1;
                while (v93 != v127)
                {
                  uint64_t v134 = *((void *)v93-- - 1);
                  *((void *)v133-- - atomic_store(0, (unint64_t *)this + 1) = v134;
                }
                *(void *)a6 = v133;
                *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v94;
                *(void *)(a6 + 16) = &v132[8 * v131];
                if (v127) {
                  operator delete(v127);
                }
              }
              else
              {
                *double v93 = v90;
                long long v94 = v93 + 1;
              }
              *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v94;
              double v135 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void))(*(void *)a1 + 240))(a1, &v244, a7, 0);
              double v136 = v135;
              v138 = *(double **)(a6 + 8);
              unint64_t v137 = *(void *)(a6 + 16);
              if ((unint64_t)v138 >= v137)
              {
                v140 = *(double **)a6;
                uint64_t v141 = ((uint64_t)v138 - *(void *)a6) >> 3;
                unint64_t v142 = v141 + 1;
                if ((unint64_t)(v141 + 1) >> 61) {
                  goto LABEL_292;
                }
                uint64_t v143 = v137 - (void)v140;
                if (v143 >> 2 > v142) {
                  unint64_t v142 = v143 >> 2;
                }
                if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v144 = v142;
                }
                if (v144)
                {
                  v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v235, v144);
                  v140 = *(double **)a6;
                  v138 = *(double **)(a6 + 8);
                }
                else
                {
                  v145 = 0;
                }
                v146 = (double *)&v145[8 * v141];
                double *v146 = v136;
                v139 = v146 + 1;
                while (v138 != v140)
                {
                  uint64_t v147 = *((void *)v138-- - 1);
                  *((void *)v146-- - atomic_store(0, (unint64_t *)this + 1) = v147;
                }
                *(void *)a6 = v146;
                *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v139;
                *(void *)(a6 + 16) = &v145[8 * v144];
                if (v140) {
                  operator delete(v140);
                }
              }
              else
              {
                double *v138 = v135;
                v139 = v138 + 1;
              }
              *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v139;
            }
            if (a5)
            {
              v149 = (char *)a5[1];
              uint64_t v148 = (char *)a5[2];
              if (v149 >= v148)
              {
                unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((v149 - (unsigned char *)*a5) >> 3);
                unint64_t v153 = v152 + 1;
                if (v152 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_293;
                }
                unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((v148 - (unsigned char *)*a5) >> 3);
                if (2 * v154 > v153) {
                  unint64_t v153 = 2 * v154;
                }
                if (v154 >= 0x555555555555555) {
                  unint64_t v155 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v155 = v153;
                }
                if (v155) {
                  v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v234, v155);
                }
                else {
                  v156 = 0;
                }
                uint64_t v157 = &v156[24 * v152];
                long long v158 = *(_OWORD *)&v245.value;
                *((void *)v157 + PCSpinLock::lock(this + 2) = v245.epoch;
                *(_OWORD *)uint64_t v157 = v158;
                unint64_t v160 = (char *)*a5;
                double v159 = (char *)a5[1];
                v161 = v157;
                if (v159 != *a5)
                {
                  do
                  {
                    long long v162 = *(_OWORD *)(v159 - 24);
                    *((void *)v161 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v159 - 1);
                    *(_OWORD *)(v161 - 24) = v162;
                    v161 -= 24;
                    v159 -= 24;
                  }
                  while (v159 != v160);
                  double v159 = (char *)*a5;
                }
                unint64_t v151 = v157 + 24;
                *a5 = v161;
                a5[1] = v157 + 24;
                a5[2] = &v156[24 * v155];
                if (v159) {
                  operator delete(v159);
                }
              }
              else
              {
                long long v150 = *(_OWORD *)&v245.value;
                *((void *)v149 + PCSpinLock::lock(this + 2) = v245.epoch;
                *(_OWORD *)v149 = v150;
                unint64_t v151 = v149 + 24;
              }
              a5[1] = v151;
              v163 = (char *)a5[2];
              if (v151 >= v163)
              {
                unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * ((v151 - (unsigned char *)*a5) >> 3);
                unint64_t v167 = v166 + 1;
                if (v166 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_293;
                }
                unint64_t v168 = 0xAAAAAAAAAAAAAAABLL * ((v163 - (unsigned char *)*a5) >> 3);
                if (2 * v168 > v167) {
                  unint64_t v167 = 2 * v168;
                }
                if (v168 >= 0x555555555555555) {
                  unint64_t v169 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v169 = v167;
                }
                if (v169) {
                  v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v234, v169);
                }
                else {
                  v170 = 0;
                }
                uint64_t v171 = &v170[24 * v166];
                long long v172 = *(_OWORD *)&v244.value;
                *((void *)v171 + PCSpinLock::lock(this + 2) = v244.epoch;
                *(_OWORD *)uint64_t v171 = v172;
                long long v174 = (char *)*a5;
                v173 = (char *)a5[1];
                v175 = v171;
                if (v173 != *a5)
                {
                  do
                  {
                    long long v176 = *(_OWORD *)(v173 - 24);
                    *((void *)v175 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v173 - 1);
                    *(_OWORD *)(v175 - 24) = v176;
                    v175 -= 24;
                    v173 -= 24;
                  }
                  while (v173 != v174);
                  v173 = (char *)*a5;
                }
                unint64_t v165 = v171 + 24;
                *a5 = v175;
                a5[1] = v171 + 24;
                a5[2] = &v170[24 * v169];
                if (v173) {
                  operator delete(v173);
                }
              }
              else
              {
                long long v164 = *(_OWORD *)&v244.value;
                *((void *)v151 + PCSpinLock::lock(this + 2) = v244.epoch;
                *(_OWORD *)unint64_t v151 = v164;
                unint64_t v165 = v151 + 24;
              }
              a5[1] = v165;
            }
            unsigned int v96 = 2;
            goto LABEL_217;
          }
        }
LABEL_111:
        CMTime time1 = v244;
        CMTime time2 = v245;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
        double Seconds = CMTimeGetSeconds(&time);
        CMTime v237 = *a3;
        unsigned int v96 = (Seconds / CMTimeGetSeconds(&v237));
        if (v96)
        {
          for (int32_t i = 0; i != v96; ++i)
          {
            memset(&v242, 0, sizeof(v242));
            operator*(a3, i, &v242);
            if (a6)
            {
              CMTime time1 = v245;
              CMTime time2 = v242;
              double v98 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v241);
              double v99 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void, double))(*(void *)a1 + 240))(a1, &v241, a7, 0, v98);
              double v100 = v99;
              v102 = *(double **)(a6 + 8);
              unint64_t v101 = *(void *)(a6 + 16);
              if ((unint64_t)v102 >= v101)
              {
                v104 = *(double **)a6;
                uint64_t v105 = ((uint64_t)v102 - *(void *)a6) >> 3;
                unint64_t v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 61) {
                  goto LABEL_292;
                }
                uint64_t v107 = v101 - (void)v104;
                if (v107 >> 2 > v106) {
                  unint64_t v106 = v107 >> 2;
                }
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v108 = v106;
                }
                if (v108)
                {
                  v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v235, v108);
                  v104 = *(double **)a6;
                  v102 = *(double **)(a6 + 8);
                }
                else
                {
                  v109 = 0;
                }
                v110 = (double *)&v109[8 * v105];
                double *v110 = v100;
                v103 = v110 + 1;
                while (v102 != v104)
                {
                  uint64_t v111 = *((void *)v102-- - 1);
                  *((void *)v110-- - atomic_store(0, (unint64_t *)this + 1) = v111;
                }
                *(void *)a6 = v110;
                *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v103;
                *(void *)(a6 + 16) = &v109[8 * v108];
                if (v104) {
                  operator delete(v104);
                }
              }
              else
              {
                double *v102 = v99;
                v103 = v102 + 1;
              }
              *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v103;
            }
            if (a5)
            {
              CMTime time1 = v245;
              CMTime time2 = v242;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v241);
              v113 = (char *)a5[1];
              v112 = (char *)a5[2];
              if (v113 >= v112)
              {
                unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v113 - (unsigned char *)*a5) >> 3);
                unint64_t v117 = v116 + 1;
                if (v116 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_293;
                }
                unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((v112 - (unsigned char *)*a5) >> 3);
                if (2 * v118 > v117) {
                  unint64_t v117 = 2 * v118;
                }
                if (v118 >= 0x555555555555555) {
                  unint64_t v119 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v119 = v117;
                }
                if (v119) {
                  v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v234, v119);
                }
                else {
                  v120 = 0;
                }
                v121 = &v120[24 * v116];
                long long v122 = *(_OWORD *)&v241.value;
                *((void *)v121 + PCSpinLock::lock(this + 2) = v241.epoch;
                *(_OWORD *)v121 = v122;
                v124 = (char *)*a5;
                v123 = (char *)a5[1];
                v125 = v121;
                if (v123 != *a5)
                {
                  do
                  {
                    long long v126 = *(_OWORD *)(v123 - 24);
                    *((void *)v125 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v123 - 1);
                    *(_OWORD *)(v125 - 24) = v126;
                    v125 -= 24;
                    v123 -= 24;
                  }
                  while (v123 != v124);
                  v123 = (char *)*a5;
                }
                v115 = v121 + 24;
                *a5 = v125;
                a5[1] = v121 + 24;
                a5[2] = &v120[24 * v119];
                if (v123) {
                  operator delete(v123);
                }
              }
              else
              {
                long long v114 = *(_OWORD *)&v241.value;
                *((void *)v113 + PCSpinLock::lock(this + 2) = v241.epoch;
                *(_OWORD *)v113 = v114;
                v115 = v113 + 24;
              }
              a5[1] = v115;
            }
          }
          int v87 = (const CMTime *)MEMORY[0x1E4F1FA48];
        }
LABEL_217:
        v86 += v96;
        CMTime v245 = v244;
        CMTime time1 = v244;
        CMTime time2 = v243;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          goto LABEL_218;
        }
      }
      if (!v239) {
        goto LABEL_111;
      }
      unsigned int v89 = *(_DWORD *)(*(void *)(a1 + 168) + 40);
      goto LABEL_107;
    }
    if (*a4)
    {
      unsigned int v23 = 0;
      do
      {
        memset(&v245, 0, sizeof(v245));
        operator*(a3, v23, &v245);
        if (a6)
        {
          CMTime time1 = *a2;
          CMTime time2 = v245;
          double v24 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v244);
          double v25 = (*(double (**)(uint64_t, CMTime *, const CMTime *, void, double))(*(void *)a1 + 240))(a1, &v244, a7, 0, v24);
          double v26 = v25;
          unint64_t v28 = *(double **)(a6 + 8);
          unint64_t v27 = *(void *)(a6 + 16);
          if ((unint64_t)v28 >= v27)
          {
            uint64_t v30 = *(double **)a6;
            uint64_t v31 = ((uint64_t)v28 - *(void *)a6) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_292;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v34);
              uint64_t v30 = *(double **)a6;
              unint64_t v28 = *(double **)(a6 + 8);
            }
            else
            {
              unint64_t v35 = 0;
            }
            double v36 = (double *)&v35[8 * v31];
            *double v36 = v26;
            double v29 = v36 + 1;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28-- - 1);
              *((void *)v36-- - atomic_store(0, (unint64_t *)this + 1) = v37;
            }
            *(void *)a6 = v36;
            *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v29;
            *(void *)(a6 + 16) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            double *v28 = v25;
            double v29 = v28 + 1;
          }
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v29;
        }
        if (a5)
        {
          CMTime time1 = *a2;
          CMTime time2 = v245;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v244);
          unsigned int v39 = (char *)a5[1];
          unint64_t v38 = (char *)a5[2];
          if (v39 >= v38)
          {
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (unsigned char *)*a5) >> 3);
            unint64_t v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_293;
            }
            unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (unsigned char *)*a5) >> 3);
            if (2 * v44 > v43) {
              unint64_t v43 = 2 * v44;
            }
            if (v44 >= 0x555555555555555) {
              unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45) {
              double v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v45);
            }
            else {
              double v46 = 0;
            }
            double v47 = &v46[24 * v42];
            long long v48 = *(_OWORD *)&v244.value;
            *((void *)v47 + PCSpinLock::lock(this + 2) = v244.epoch;
            *(_OWORD *)double v47 = v48;
            uint64_t v50 = (char *)*a5;
            long long v49 = (char *)a5[1];
            CMTime v51 = v47;
            if (v49 != *a5)
            {
              do
              {
                long long v52 = *(_OWORD *)(v49 - 24);
                *((void *)v51 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v49 - 1);
                *(_OWORD *)(v51 - 24) = v52;
                v51 -= 24;
                v49 -= 24;
              }
              while (v49 != v50);
              long long v49 = (char *)*a5;
            }
            double v41 = v47 + 24;
            *a5 = v51;
            a5[1] = v47 + 24;
            a5[2] = &v46[24 * v45];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            long long v40 = *(_OWORD *)&v244.value;
            *((void *)v39 + PCSpinLock::lock(this + 2) = v244.epoch;
            *(_OWORD *)unsigned int v39 = v40;
            double v41 = v39 + 24;
          }
          a5[1] = v41;
        }
        ++v23;
      }
      while (v23 < *a4);
    }
  }
LABEL_288:
  uint64_t v231 = *(void *)(a1 + 160);
  if (!v231 || (v232 = *(os_unfair_lock_s **)(v231 + 48)) == 0) {
    v232 = (os_unfair_lock_s *)(a1 + 8);
  }
  PCSpinLock::unlock(v232);
  return 1;
}

uint64_t OZSpline::sampleSplineSegment(OZSpline *this, const CMTime *a2, CMTime *a3, unsigned int *a4, CMTime *a5, double *a6, const CMTime *a7, int a8)
{
  unsigned int v36 = 0;
  if (a8)
  {
    uint64_t v16 = *((void *)this + 20);
    if (!v16 || (uint64_t v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
      uint64_t v17 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v17);
  }
  (*(void (**)(OZSpline *, unsigned int *, void, void))(*(void *)this + 16))(this, &v36, 0, 0);
  int v32 = a8;
  if (**((unsigned char **)this + 21)
    && (uint64_t Interpolator = OZInterpolators::getInterpolator(*((OZInterpolators **)this + 19), v36),
        ((*(uint64_t (**)(uint64_t))(*(void *)Interpolator + 64))(Interpolator) & 1) == 0))
  {
    unsigned int v23 = (void **)*((void *)this + 2);
    long long v22 = (void **)*((void *)this + 3);
    if (v23 == v22)
    {
      uint64_t v33 = 0;
      double v24 = 0;
    }
    else
    {
      uint64_t v33 = *v23;
      double v24 = *(v22 - 1);
    }
    if (*a4)
    {
      unsigned int v25 = 0;
      if (v33) {
        BOOL v26 = v24 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      int v27 = !v26;
      do
      {
        memset(&v35, 0, sizeof(v35));
        operator*(a3, v25, &v35);
        if (a6)
        {
          if (v27)
          {
            CMTime v38 = *a2;
            CMTime v37 = v35;
            PC_CMTimeSaferAdd(&v38, &v37, (uint64_t)&v34);
            OZSpline::interpolate(this, a7, v33, v24, &v34, a6, 0);
          }
          ++a6;
        }
        if (a5)
        {
          CMTime v38 = *a2;
          CMTime v37 = v35;
          PC_CMTimeSaferAdd(&v38, &v37, (uint64_t)&v34);
          long long v28 = *(_OWORD *)&v34.value;
          a5->CMTimeEpoch epoch = v34.epoch;
          *(_OWORD *)&a5->CMTimeValue value = v28;
          ++a5;
        }
        ++v25;
      }
      while (v25 < *a4);
    }
  }
  else if (*a4)
  {
    unsigned int v19 = 0;
    do
    {
      memset(&v35, 0, sizeof(v35));
      operator*(a3, v19, &v35);
      if (a6)
      {
        CMTime v38 = *a2;
        CMTime v37 = v35;
        double v20 = PC_CMTimeSaferAdd(&v38, &v37, (uint64_t)&v34);
        *a6++ = (*(double (**)(OZSpline *, CMTime *, const CMTime *, void, double))(*(void *)this + 240))(this, &v34, a7, 0, v20);
      }
      if (a5)
      {
        CMTime v38 = *a2;
        CMTime v37 = v35;
        PC_CMTimeSaferAdd(&v38, &v37, (uint64_t)&v34);
        long long v21 = *(_OWORD *)&v34.value;
        a5->CMTimeEpoch epoch = v34.epoch;
        *(_OWORD *)&a5->CMTimeValue value = v21;
        ++a5;
      }
      ++v19;
    }
    while (v19 < *a4);
  }
  if (v32)
  {
    uint64_t v29 = *((void *)this + 20);
    if (!v29 || (uint64_t v30 = *(os_unfair_lock_s **)(v29 + 48)) == 0) {
      uint64_t v30 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v30);
  }
  return 1;
}

uint64_t OZSpline::getVertex(OZSpline *this, const CMTime *a2, double *a3, const CMTime *a4)
{
  uint64_t v4 = (void *)*((void *)this + 5);
  if (*((void **)this + 6) == v4) {
    return 0;
  }
  while (1)
  {
    CMTimeEpoch v11 = *(void *)(*v4 + 32);
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v4 + 16);
    time1.CMTimeEpoch epoch = v11;
    CMTime time2 = *a2;
    int32_t v9 = CMTimeCompare(&time1, &time2);
    if (a3)
    {
      if (!v9) {
        break;
      }
    }
    if (++v4 == *((void **)this + 6)) {
      return 0;
    }
  }
  *a3 = (*(double (**)(void, const CMTime *))(*(void *)*v4 + 24))(*v4, a4);
  return 1;
}

uint64_t OZSpline::getAllVerticesHandles(os_unfair_lock_s *a1, void **a2)
{
  uint64_t v4 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v4 || (unint64_t v5 = *(os_unfair_lock_s **)(v4 + 48)) == 0) {
    unint64_t v5 = a1 + 2;
  }
  PCSpinLock::lock(v5);
  uint64_t v6 = *(uint64_t **)&a1[4]._os_unfair_lock_opaque;
  *(_OWORD *)&v25.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  v25.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  if (v6 != *(uint64_t **)&a1[12]._os_unfair_lock_opaque)
  {
    unint64_t v7 = *(uint64_t **)&a1[4]._os_unfair_lock_opaque;
    while (1)
    {
      uint64_t v8 = *v7;
      *(_OWORD *)&v24.CMTimeValue value = *(_OWORD *)(*v7 + 16);
      v24.CMTimeEpoch epoch = *(void *)(*v7 + 32);
      if (v6 == v7) {
        goto LABEL_9;
      }
      CMTime time1 = v25;
      CMTime time2 = v24;
      if (CMTimeCompare(&time1, &time2)) {
        break;
      }
LABEL_26:
      if (++v7 == *(uint64_t **)&a1[12]._os_unfair_lock_opaque) {
        goto LABEL_27;
      }
    }
    uint64_t v8 = *v7;
LABEL_9:
    *(_OWORD *)&v25.CMTimeValue value = *(_OWORD *)(v8 + 16);
    v25.CMTimeEpoch epoch = *(void *)(v8 + 32);
    unint64_t v10 = a2[1];
    unint64_t v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a2;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v15);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v16[8 * v12];
      *(void *)uint64_t v17 = v8;
      CMTimeEpoch v11 = v17 + 8;
      unsigned int v19 = (char *)*a2;
      double v18 = (char *)a2[1];
      if (v18 != *a2)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v17 - atomic_store(0, (unint64_t *)this + 1) = v20;
          v17 -= 8;
        }
        while (v18 != v19);
        double v18 = (char *)*a2;
      }
      *a2 = v17;
      a2[1] = v11;
      a2[2] = &v16[8 * v15];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *unint64_t v10 = v8;
      CMTimeEpoch v11 = v10 + 1;
    }
    a2[1] = v11;
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v21 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v21 || (long long v22 = *(os_unfair_lock_s **)(v21 + 48)) == 0) {
    long long v22 = a1 + 2;
  }
  PCSpinLock::unlock(v22);
  return 1;
}

uint64_t OZSpline::getAllValidVerticesHandles(os_unfair_lock_s *a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v6 || (unint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    unint64_t v7 = a1 + 2;
  }
  PCSpinLock::lock(v7);
  *(_OWORD *)&v27.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  v27.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v8 = *(uint64_t **)&a1[10]._os_unfair_lock_opaque;
  if (*(uint64_t **)&a1[12]._os_unfair_lock_opaque != v8)
  {
    while (1)
    {
      uint64_t v9 = *v8;
      *(_OWORD *)&v26.CMTimeValue value = *(_OWORD *)(*v8 + 16);
      v26.CMTimeEpoch epoch = *(void *)(*v8 + 32);
      if (*(uint64_t **)&a1[10]._os_unfair_lock_opaque == v8) {
        goto LABEL_8;
      }
      CMTime time1 = v27;
      CMTime time2 = v26;
      if (CMTimeCompare(&time1, &time2)) {
        break;
      }
LABEL_26:
      if (++v8 == *(uint64_t **)&a1[12]._os_unfair_lock_opaque) {
        goto LABEL_27;
      }
    }
    uint64_t v9 = *v8;
LABEL_8:
    *(_OWORD *)&v27.CMTimeValue value = *(_OWORD *)&v26.value;
    v27.CMTimeEpoch epoch = v26.epoch;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 136))(v9, a3))
    {
      uint64_t v10 = *v8;
      uint64_t v12 = a2[1];
      unint64_t v11 = (unint64_t)a2[2];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*a2;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          double v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v17);
        }
        else {
          double v18 = 0;
        }
        unsigned int v19 = &v18[8 * v14];
        *(void *)unsigned int v19 = v10;
        uint64_t v13 = v19 + 8;
        uint64_t v21 = (char *)*a2;
        uint64_t v20 = (char *)a2[1];
        if (v20 != *a2)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - atomic_store(0, (unint64_t *)this + 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*a2;
        }
        *a2 = v19;
        a2[1] = v13;
        a2[2] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v10;
        uint64_t v13 = v12 + 1;
      }
      a2[1] = v13;
    }
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v23 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v23 || (CMTime v24 = *(os_unfair_lock_s **)(v23 + 48)) == 0) {
    CMTime v24 = a1 + 2;
  }
  PCSpinLock::unlock(v24);
  return 1;
}

uint64_t OZSpline::getVerticesTimeAndValue(os_unfair_lock_s *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v10 || (unint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    unint64_t v11 = a1 + 2;
  }
  PCSpinLock::lock(v11);
  long long v12 = *(_OWORD *)(a2 + 16);
  CMTime v52 = *(CMTime *)a2;
  memset(&v51, 0, sizeof(v51));
  long long v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a2;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v12;
  *(_OWORD *)&range.duration.int32_t timescale = v13;
  CMTimeRangeGetEnd(&v51, &range);
  if (a4)
  {
    uint64_t v14 = *(uint64_t **)&a1[4]._os_unfair_lock_opaque;
    if (v14 == *(uint64_t **)&a1[6]._os_unfair_lock_opaque)
    {
      *(_OWORD *)&time1.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    else
    {
      uint64_t v15 = *v14;
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v15 + 16);
      CMTimeEpoch v16 = *(void *)(v15 + 32);
    }
    time1.CMTimeEpoch epoch = v16;
    *(_OWORD *)a4 = *(_OWORD *)&time1.value;
    *(void *)(a4 + 16) = v16;
  }
  if (a5)
  {
    uint64_t v17 = *(void *)&a1[6]._os_unfair_lock_opaque;
    if (*(void *)&a1[4]._os_unfair_lock_opaque == v17)
    {
      *(_OWORD *)&time1.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    else
    {
      uint64_t v18 = *(void *)(v17 - 8);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v18 + 16);
      CMTimeEpoch v19 = *(void *)(v18 + 32);
    }
    time1.CMTimeEpoch epoch = v19;
    *(_OWORD *)a5 = *(_OWORD *)&time1.value;
    *(void *)(a5 + 16) = v19;
  }
  uint64_t v20 = *(void **)&a1[10]._os_unfair_lock_opaque;
  uint64_t v21 = *(void *)&a1[12]._os_unfair_lock_opaque - (void)v20;
  if (v21)
  {
    unint64_t v22 = v21 >> 3;
    do
    {
      while (1)
      {
        unint64_t v23 = v22 >> 1;
        CMTime v24 = &v20[v22 >> 1];
        if (*v24) {
          break;
        }
        v22 >>= 1;
        if (!v23) {
          goto LABEL_25;
        }
      }
      CMTime v53 = *(CMTime *)(*v24 + 16);
      CMTime time1 = v53;
      CMTime time2 = v52;
      int32_t v25 = CMTimeCompare(&time1, &time2);
      if (v25 < 0) {
        v22 += ~v23;
      }
      else {
        v22 >>= 1;
      }
      if (v25 < 0) {
        uint64_t v20 = v24 + 1;
      }
    }
    while (v22);
LABEL_25:
    if (v20 != *(void **)&a1[10]._os_unfair_lock_opaque && v20 != *(void **)&a1[12]._os_unfair_lock_opaque)
    {
      CMTime v53 = *(CMTime *)(*v20 + 16);
      CMTime time1 = v53;
      CMTime time2 = v52;
      if (CMTimeCompare(&time1, &time2) <= 0) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = -1;
      }
      v20 += v26;
    }
  }
  if (v20 != *(void **)&a1[12]._os_unfair_lock_opaque)
  {
    uint64_t v27 = MEMORY[0x1E4F1FA48];
    do
    {
      *(_OWORD *)&v49.CMTimeValue value = *(_OWORD *)(*v20 + 16);
      v49.CMTimeEpoch epoch = *(void *)(*v20 + 32);
      double v28 = (*(double (**)(void, uint64_t))(*(void *)*v20 + 24))(*v20, v27);
      int v29 = (*(uint64_t (**)(void))(*(void *)*v20 + 208))();
      int v30 = v29;
      uint64_t v31 = (char *)a3[1];
      int v32 = (char *)a3[2];
      if (v31 >= v32)
      {
        unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - (unsigned char *)*a3) >> 3);
        unint64_t v35 = v34 + 1;
        if (v34 + 1 > 0x666666666666666) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)*a3) >> 3);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x333333333333333) {
          unint64_t v37 = 0x666666666666666;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          CMTime v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTime,std::pair<double,unsigned int>>>>((uint64_t)(a3 + 2), v37);
        }
        else {
          CMTime v38 = 0;
        }
        unsigned int v39 = &v38[40 * v34];
        *((void *)v39 + PCSpinLock::lock(this + 2) = v49.epoch;
        *(_OWORD *)unsigned int v39 = *(_OWORD *)&v49.value;
        *((double *)v39 + 3) = v28;
        *((_DWORD *)v39 + OZSpline::reparametrize((uint64_t)this + 8) = v30;
        double v41 = (char *)*a3;
        long long v40 = (char *)a3[1];
        unint64_t v42 = v39;
        if (v40 != *a3)
        {
          do
          {
            long long v43 = *(_OWORD *)(v40 - 40);
            long long v44 = *(_OWORD *)(v40 - 24);
            *((void *)v42 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v40 - 1);
            *(_OWORD *)(v42 - 24) = v44;
            *(_OWORD *)(v42 - 4OZSplineNode::allocOZSpline(this, 0) = v43;
            v42 -= 40;
            v40 -= 40;
          }
          while (v40 != v41);
          long long v40 = (char *)*a3;
        }
        uint64_t v33 = v39 + 40;
        *a3 = v42;
        a3[1] = v39 + 40;
        a3[2] = &v38[40 * v37];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v31 = *(_OWORD *)&v49.value;
        *((void *)v31 + PCSpinLock::lock(this + 2) = v49.epoch;
        *((double *)v31 + 3) = v28;
        *((_DWORD *)v31 + OZSpline::reparametrize((uint64_t)this + 8) = v29;
        uint64_t v33 = v31 + 40;
      }
      a3[1] = v33;
      ++v20;
      CMTime time1 = v49;
      CMTime time2 = v51;
      int32_t v45 = CMTimeCompare(&time1, &time2);
    }
    while (v20 != *(void **)&a1[12]._os_unfair_lock_opaque && v45 < 0);
  }
  uint64_t v46 = *(void *)&a1[40]._os_unfair_lock_opaque;
  if (!v46 || (double v47 = *(os_unfair_lock_s **)(v46 + 48)) == 0) {
    double v47 = a1 + 2;
  }
  PCSpinLock::unlock(v47);
  return 1;
}

BOOL OZSpline::getVertex(OZSpline *this, void *a2, CMTime *a3, double *a4, const CMTime *a5)
{
  if (a2)
  {
    if (a3)
    {
      long long v6 = *((_OWORD *)a2 + 1);
      a3->CMTimeEpoch epoch = *((void *)a2 + 4);
      *(_OWORD *)&a3->CMTimeValue value = v6;
    }
    if (a4) {
      *a4 = (*(double (**)(void *, const CMTime *))(*(void *)a2 + 24))(a2, a5);
    }
  }
  return a2 != 0;
}

BOOL OZSpline::setVertexValue(OZSpline *this, void *a2, double a3, const CMTime *a4)
{
  if (a2)
  {
    uint64_t v8 = *((void *)this + 20);
    if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
      uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::lock(v9);
    (*(void (**)(void *, const CMTime *, double))(*(void *)a2 + 32))(a2, a4, a3);
    uint64_t v10 = *((void *)this + 20);
    if (!v10 || (unint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
      unint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v11);
  }
  return a2 != 0;
}

void OZSpline::setAllVerticesValues(OZSpline *this, double a2, const CMTime *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (unint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    unint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  for (int32_t i = (uint64_t *)*((void *)this + 5); i != *((uint64_t **)this + 6); ++i)
  {
    uint64_t v9 = *i;
    (*(void (**)(uint64_t, const CMTime *, double))(*(void *)v9 + 32))(v9, a3, a2);
  }
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (unint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    unint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
  }

  PCSpinLock::unlock(v11);
}

BOOL OZSpline::setVertex(OZSpline *this, char *a2, const CMTime *a3, double a4, const CMTime *a5)
{
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (unint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    unint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v11);
  long long v44 = a2;
  BOOL v12 = a2 != 0;
  if (a2)
  {
    CMTime time2 = *(CMTime *)(a2 + 16);
    CMTime time1 = *a3;
    if (!CMTimeCompare(&time1, &time2))
    {
      (*(void (**)(char *, const CMTime *, double))(*(void *)v44 + 32))(v44, a5, a4);
      *((unsigned char *)this + 145) = 1;
      *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
      OZSpline::refreshValidVerticesList(this);
      uint64_t v24 = *((void *)this + 20);
      if (!v24 || (int32_t v25 = *(os_unfair_lock_s **)(v24 + 48)) == 0) {
        int32_t v25 = (os_unfair_lock_s *)((char *)this + 8);
      }
      BOOL v12 = 1;
      goto LABEL_48;
    }
    VertexIter = OZSpline::getVertexIter(this, a2);
    uint64_t v14 = VertexIter;
    uint64_t v15 = (char *)*((void *)this + 2);
    CMTimeEpoch v16 = (void **)*((void *)this + 3);
    uint64_t v17 = (char **)((char *)this + 16);
    int64_t v18 = (char *)v16 - (char *)(VertexIter + 1);
    if (v16 != VertexIter + 1)
    {
      memmove(VertexIter, VertexIter + 1, (char *)v16 - (char *)(VertexIter + 1));
      uint64_t v15 = *v17;
    }
    *((void *)this + 3) = (char *)v14 + v18;
    *((unsigned char *)this + 145) = 1;
    *((void *)this + 5) = v15;
    *((void *)this + 6) = (char *)v14 + v18;
    OZSpline::refreshValidVerticesList(this);
    (*(void (**)(char *, const CMTime *))(*(void *)v44 + 16))(v44, a3);
    (*(void (**)(char *, const CMTime *, double))(*(void *)v44 + 32))(v44, a5, a4);
    CMTimeEpoch v19 = (char *)*((void *)this + 5);
    if (*((char **)this + 6) != v19)
    {
      uint64_t v20 = (void *)*((void *)this + 5);
      while (1)
      {
        CMTimeEpoch v42 = *(void *)(*v20 + 32);
        *(_OWORD *)&v40.CMTimeValue value = *((_OWORD *)v44 + 1);
        v40.CMTimeEpoch epoch = *((void *)v44 + 4);
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v20 + 16);
        time1.CMTimeEpoch epoch = v42;
        CMTime time2 = v40;
        if (!CMTimeCompare(&time1, &time2)) {
          break;
        }
        CMTimeEpoch v43 = *(void *)(*v20 + 32);
        *(_OWORD *)&v41.CMTimeValue value = *((_OWORD *)v44 + 1);
        v41.CMTimeEpoch epoch = *((void *)v44 + 4);
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(*v20 + 16);
        time1.CMTimeEpoch epoch = v43;
        CMTime time2 = v41;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          std::vector<OZVertex *>::insert((uint64_t)this + 16, v19, (char *)&v44);
          *((unsigned char *)this + 145) = 1;
          uint64_t v32 = *((void *)this + 2);
          unint64_t v23 = (void *)*((void *)this + 3);
          goto LABEL_43;
        }
        ++v20;
        v19 += 8;
        if (v20 == *((void **)this + 6)) {
          goto LABEL_13;
        }
      }
      if (((*(uint64_t (**)(void))(*(void *)*v20 + 168))() & 2) == 0) {
        (*(void (**)(void, const CMTime *, double))(*(void *)*v20 + 32))(*v20, a5, a4);
      }
      if (v44) {
        (*(void (**)(char *))(*(void *)v44 + 8))(v44);
      }
      *((unsigned char *)this + 145) = 1;
      *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
      OZSpline::refreshValidVerticesList(this);
      uint64_t v31 = *((void *)this + 20);
      if (v31)
      {
        int32_t v25 = *(os_unfair_lock_s **)(v31 + 48);
        if (v25)
        {
          BOOL v12 = 0;
          goto LABEL_48;
        }
      }
      BOOL v12 = 0;
      goto LABEL_47;
    }
LABEL_13:
    unint64_t v21 = *((void *)this + 4);
    unint64_t v22 = (char **)*((void *)this + 3);
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v26 = ((char *)v22 - *v17) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v21 - (void)*v17;
      uint64_t v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
        uint64_t v28 = v26 + 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v29);
      }
      else {
        int v30 = 0;
      }
      uint64_t v33 = (char **)&v30[8 * v26];
      unint64_t v34 = &v30[8 * v29];
      char *v33 = v44;
      unint64_t v23 = v33 + 1;
      unint64_t v36 = (char *)*((void *)this + 2);
      unint64_t v35 = (char *)*((void *)this + 3);
      if (v35 != v36)
      {
        do
        {
          unint64_t v37 = (char *)*((void *)v35 - 1);
          v35 -= 8;
          *--uint64_t v33 = v37;
        }
        while (v35 != v36);
        unint64_t v35 = *v17;
      }
      *((void *)this + PCSpinLock::lock(this + 2) = v33;
      *((void *)this + 3) = v23;
      *((void *)this + 4) = v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *unint64_t v22 = v44;
      unint64_t v23 = v22 + 1;
    }
    *((void *)this + 3) = v23;
    *((unsigned char *)this + 145) = 1;
    uint64_t v32 = *((void *)this + 2);
LABEL_43:
    *((void *)this + 5) = v32;
    *((void *)this + 6) = v23;
    OZSpline::refreshValidVerticesList(this);
    if (*((void *)this + 3) - *((void *)this + 2) == 8) {
      (*(void (**)(OZSpline *, char *, void, void))(*(void *)this + 304))(this, v44, MEMORY[0x1E4F1FA48], 0);
    }
  }
  uint64_t v38 = *((void *)this + 20);
  if (!v38 || (int32_t v25 = *(os_unfair_lock_s **)(v38 + 48)) == 0) {
LABEL_47:
  }
    int32_t v25 = (os_unfair_lock_s *)((char *)this + 8);
LABEL_48:
  PCSpinLock::unlock(v25);
  return v12;
}

char *std::vector<OZVertex *>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      CMTimeEpoch v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    }
    else {
      CMTimeEpoch v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    CMTime __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        CMTime __p = v23;
        uint64_t v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1B79B287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *OZSpline::moveVertex(OZSpline *this, char *a2, const CMTime *a3, const CMTime *a4, char a5, char a6, int a7)
{
  CMTime v62 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v61 = *a3;
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 20);
  if (!v13 || (unint64_t v14 = *(os_unfair_lock_s **)(v13 + 48)) == 0) {
    unint64_t v14 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v14);
  if (((*(uint64_t (**)(char *))(*(void *)a2 + 168))(a2) & 2) != 0
    || (CMTime time2 = *(CMTime *)(a2 + 16), time1 = v61, !CMTimeCompare(&time1, &time2))
    || ((*(uint64_t (**)(char *, const CMTime *))(*(void *)a2 + 136))(a2, a4) & 1) == 0)
  {
    uint64_t v16 = *((void *)this + 20);
    if (!v16 || (uint64_t v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
      uint64_t v17 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v17);
    return 0;
  }
  if (a5)
  {
    uint64_t v15 = (*(uint64_t (**)(char *))(*(void *)a2 + 216))(a2);
    CMTime v63 = (char *)v15;
  }
  else
  {
    uint64_t v59 = 0;
    unint64_t v60 = 0;
    CMTimeEpoch v19 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZSpline::getPreviousValidVertex(this, a2, &v60, MEMORY[0x1E4F1FA48]);
    OZSpline::getNextValidVertex((void ***)this, a2, &v59, v19);
    CMTime v63 = a2;
    CMTime v62 = *(CMTime *)(a2 + 16);
    (*(void (**)(char *, CMTime *))(*(void *)a2 + 16))(a2, &v61);
    VertexIter = OZSpline::getVertexIter(this, a2);
    unint64_t v21 = VertexIter;
    unint64_t v22 = (void **)*((void *)this + 3);
    int64_t v23 = (char *)v22 - (char *)(VertexIter + 1);
    if (v22 != VertexIter + 1) {
      memmove(VertexIter, VertexIter + 1, (char *)v22 - (char *)(VertexIter + 1));
    }
    uint64_t v24 = *((void *)this + 2);
    *((void *)this + 3) = (char *)v21 + v23;
    *((unsigned char *)this + 145) = 1;
    *((void *)this + 5) = v24;
    *((void *)this + 6) = (char *)v21 + v23;
    OZSpline::refreshValidVerticesList(this);
    if (!v60 || (v58 = *(CMTime *)((char *)v60 + 16), time1 = v61, CMTime time2 = v58, CMTimeCompare(&time1, &time2) >= 1))
    {
      if (!v59) {
        goto LABEL_30;
      }
      long long v25 = *((_OWORD *)v59 + 1);
      CMTimeEpoch v55 = *((void *)v59 + 4);
      CMTime time1 = v61;
      *(_OWORD *)&time2.CMTimeValue value = v25;
      time2.CMTimeEpoch epoch = v55;
      if (CMTimeCompare(&time1, &time2) < 0) {
        goto LABEL_30;
      }
    }
    if (!a7)
    {
      (*(void (**)(char *, uint64_t))(*(void *)v63 + 152))(v63, 256);
      goto LABEL_30;
    }
    if (v60 && (v58 = *(CMTime *)((char *)v60 + 16), time1 = v61, CMTime time2 = v58, CMTimeCompare(&time1, &time2) <= 0))
    {
      CMTimeEpoch v50 = *((void *)v60 + 4);
      uint64_t v51 = *((void *)this + 21);
      long long v52 = *(_OWORD *)(v51 + 8);
      CMTimeEpoch v54 = *(void *)(v51 + 24);
      *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)v60 + 1);
      time1.CMTimeEpoch epoch = v50;
      *(_OWORD *)&time2.CMTimeValue value = v52;
      time2.CMTimeEpoch epoch = v54;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
    }
    else
    {
      if (!v59) {
        goto LABEL_30;
      }
      CMTime v58 = *(CMTime *)((char *)v59 + 16);
      CMTime time1 = v61;
      CMTime time2 = v58;
      if (CMTimeCompare(&time1, &time2) < 0) {
        goto LABEL_30;
      }
      CMTimeEpoch v26 = *((void *)v59 + 4);
      uint64_t v27 = *((void *)this + 21);
      long long v28 = *(_OWORD *)(v27 + 8);
      CMTimeEpoch v53 = *(void *)(v27 + 24);
      *(_OWORD *)&time1.CMTimeValue value = *((_OWORD *)v59 + 1);
      time1.CMTimeEpoch epoch = v26;
      *(_OWORD *)&time2.CMTimeValue value = v28;
      time2.CMTimeEpoch epoch = v53;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
    }
    CMTime v61 = v58;
    uint64_t v15 = (uint64_t)v63;
  }
  (*(void (**)(uint64_t, CMTime *))(*(void *)v15 + 16))(v15, &v61);
LABEL_30:
  unint64_t v29 = (char *)*((void *)this + 5);
  if (*((char **)this + 6) == v29)
  {
LABEL_35:
    CMTime time1 = v61;
    CMTime time2 = v62;
    if (CMTimeCompare(&time1, &time2)) {
      OZSpline::scaleTangentsAroundPoint((uint64_t)this, &v61, &v62, a4);
    }
    unint64_t v33 = *((void *)this + 4);
    unint64_t v34 = (char **)*((void *)this + 3);
    if ((unint64_t)v34 >= v33)
    {
      uint64_t v36 = *((void *)this + 2);
      uint64_t v37 = ((uint64_t)v34 - v36) >> 3;
      if ((unint64_t)(v37 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v33 - v36;
      uint64_t v39 = v38 >> 2;
      if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
        uint64_t v39 = v37 + 1;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40) {
        CMTime v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 32, v40);
      }
      else {
        CMTime v41 = 0;
      }
      CMTimeEpoch v42 = (char **)&v41[8 * v37];
      CMTimeEpoch v43 = &v41[8 * v40];
      char *v42 = v63;
      unint64_t v35 = v42 + 1;
      int32_t v45 = (char *)*((void *)this + 2);
      long long v44 = (char *)*((void *)this + 3);
      if (v44 != v45)
      {
        do
        {
          uint64_t v46 = (char *)*((void *)v44 - 1);
          v44 -= 8;
          *--CMTimeEpoch v42 = v46;
        }
        while (v44 != v45);
        long long v44 = (char *)*((void *)this + 2);
      }
      *((void *)this + PCSpinLock::lock(this + 2) = v42;
      *((void *)this + 3) = v35;
      *((void *)this + 4) = v43;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *unint64_t v34 = v63;
      unint64_t v35 = v34 + 1;
    }
    *((void *)this + 3) = v35;
    *((unsigned char *)this + 145) = 1;
    *((void *)this + 5) = *((void *)this + 2);
    *((void *)this + 6) = v35;
LABEL_61:
    OZSpline::refreshValidVerticesList(this);
    double v47 = v63;
    CMTime time1 = v61;
    CMTime time2 = v62;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
    OZSpline::scaleTangentsAfterInsertion(this, v47, &v58, a4);
  }
  else
  {
    uint64_t v30 = (char **)*((void *)this + 5);
    while (1)
    {
      CMTime v58 = *(CMTime *)(*v30 + 16);
      long long v31 = *((_OWORD *)v63 + 1);
      CMTimeEpoch v56 = *((void *)v63 + 4);
      CMTime time1 = v58;
      *(_OWORD *)&time2.CMTimeValue value = v31;
      time2.CMTimeEpoch epoch = v56;
      if (!CMTimeCompare(&time1, &time2)) {
        break;
      }
      CMTime v58 = *(CMTime *)(*v30 + 16);
      long long v32 = *((_OWORD *)v63 + 1);
      CMTimeEpoch v57 = *((void *)v63 + 4);
      CMTime time1 = v58;
      *(_OWORD *)&time2.CMTimeValue value = v32;
      time2.CMTimeEpoch epoch = v57;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        CMTime time1 = v61;
        CMTime time2 = v62;
        if (CMTimeCompare(&time1, &time2)) {
          OZSpline::scaleTangentsAroundPoint((uint64_t)this, &v61, &v62, a4);
        }
        std::vector<OZVertex *>::insert((uint64_t)this + 16, v29, (char *)&v63);
        *((unsigned char *)this + 145) = 1;
        *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
        goto LABEL_61;
      }
      ++v30;
      v29 += 8;
      if (v30 == *((char ***)this + 6)) {
        goto LABEL_35;
      }
    }
    if (a6)
    {
      if (v63) {
        (*(void (**)(char *))(*(void *)v63 + 8))(v63);
      }
      CMTime v63 = 0;
      *((unsigned char *)this + 145) = 1;
      *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
      OZSpline::refreshValidVerticesList(this);
      CMTime v63 = *v30;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(*(void *)*v30 + 152))(*v30, 256);
      CMTime time1 = v61;
      CMTime time2 = v62;
      if (CMTimeCompare(&time1, &time2)) {
        OZSpline::scaleTangentsAroundPoint((uint64_t)this, &v61, &v62, a4);
      }
      std::vector<OZVertex *>::insert((uint64_t)this + 16, v29, (char *)&v63);
      *((unsigned char *)this + 145) = 1;
      *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
      OZSpline::refreshValidVerticesList(this);
    }
  }
  uint64_t v48 = *((void *)this + 20);
  if (!v48 || (CMTime v49 = *(os_unfair_lock_s **)(v48 + 48)) == 0) {
    CMTime v49 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v49);
  return v63;
}

uint64_t OZSpline::scaleTangentsAroundPoint(uint64_t this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  double v33 = 0.0;
  double v34 = 0.0;
  uint64_t v4 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime v32 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v30 = 0;
  long long v31 = 0;
  if (*(unsigned char *)(*(void *)(this + 168) + 2))
  {
    uint64_t v8 = (OZSpline *)this;
    if (OZSpline::getNextValidVertex((OZSpline *)this, a3, &v30, a4, 0))
    {
      if (OZSpline::getPreviousValidVertex(v8, v30, &v31, v4))
      {
        CMTime v29 = *(CMTime *)((char *)v31 + 16);
        CMTime time1 = *a3;
        CMTime time2 = v29;
        this = CMTimeCompare(&time1, &time2);
        if (this)
        {
          CMTime v28 = *(CMTime *)((char *)v30 + 16);
          CMTime time1 = *a3;
          CMTime time2 = v28;
          this = CMTimeCompare(&time1, &time2);
          if (this)
          {
            (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v31 + 64))(v31, &v34, &v33, a4);
            CMTime v29 = *(CMTime *)((char *)v30 + 16);
            CMTime v28 = *(CMTime *)((char *)v31 + 16);
            CMTime time1 = v29;
            CMTime time2 = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
            CMTime v28 = *(CMTime *)((char *)v31 + 16);
            CMTime time1 = *a3;
            CMTime time2 = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            operator/((long long *)&v32.value, (uint64_t)&v29, (uint64_t)&time);
            double v9 = fabs(CMTimeGetSeconds(&time));
            (*(void (**)(void *, const CMTime *, double, double))(*(void *)v31 + 80))(v31, a4, v9 * v34, v9 * v33);
            (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v30 + 56))(v30, &v34, &v33, a4);
            CMTime v28 = *(CMTime *)((char *)v30 + 16);
            CMTime v26 = *(CMTime *)((char *)v31 + 16);
            CMTime time1 = v28;
            CMTime time2 = v26;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            CMTime v32 = v29;
            CMTime v28 = *(CMTime *)((char *)v30 + 16);
            CMTime time1 = *a3;
            CMTime time2 = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            operator/((long long *)&v32.value, (uint64_t)&v29, (uint64_t)&v25);
            double Seconds = CMTimeGetSeconds(&v25);
            goto LABEL_18;
          }
        }
      }
      else
      {
        CMTime v29 = *(CMTime *)((char *)v30 + 16);
        CMTime time1 = *a3;
        CMTime time2 = v29;
        this = CMTimeCompare(&time1, &time2);
        if (this)
        {
          (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v30 + 56))(v30, &v34, &v33, a4);
          double v16 = 0.0;
          if (fabs(v34) < 0.0000001) {
            return (*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v30 + 72))(v30, a4, v16 * v34, v16 * v33);
          }
          CMTime v28 = *(CMTime *)((char *)v30 + 16);
          CMTime time1 = *a3;
          CMTime time2 = v28;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
          CMTime time1 = v29;
          CMTime time2 = *v4;
          int32_t v17 = CMTimeCompare(&time1, &time2);
          double v18 = 0.0277777778 / v34;
          if (!v17)
          {
            double v16 = fabs(v18);
            return (*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v30 + 72))(v30, a4, v16 * v34, v16 * v33);
          }
          CMTime v28 = *(CMTime *)((char *)v30 + 16);
          CMTime time1 = *a3;
          CMTime time2 = v28;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
          operator*(&v29, &v24, v18);
          double v19 = CMTimeGetSeconds(&v24);
          CMTime v28 = *(CMTime *)((char *)v30 + 16);
          CMTime time1 = *a2;
          CMTime time2 = v28;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
          operator*(&v29, &v23, v18);
          double v20 = CMTimeGetSeconds(&v23);
          double v16 = 0.0;
          if (vabdd_f64(0.0, fabs(v19)) < 0.0000001) {
            return (*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v30 + 72))(v30, a4, v16 * v34, v16 * v33);
          }
          double Seconds = v20 / v19;
LABEL_18:
          double v16 = fabs(Seconds);
          return (*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v30 + 72))(v30, a4, v16 * v34, v16 * v33);
        }
      }
    }
    else
    {
      this = OZSpline::getPreviousValidVertex(v8, a3, &v31, a4, 0);
      if (this)
      {
        CMTime v29 = *(CMTime *)((char *)v31 + 16);
        CMTime time1 = *a3;
        CMTime time2 = v29;
        this = CMTimeCompare(&time1, &time2);
        if (this)
        {
          (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v31 + 64))(v31, &v34, &v33, a4);
          double v11 = 0.0;
          if (fabs(v34) >= 0.0000001)
          {
            CMTime v28 = *(CMTime *)((char *)v31 + 16);
            CMTime time1 = *a3;
            CMTime time2 = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            CMTime time1 = v29;
            CMTime time2 = *v4;
            int32_t v12 = CMTimeCompare(&time1, &time2);
            double v13 = 0.0277777778 / v34;
            if (v12)
            {
              CMTime v28 = *(CMTime *)((char *)v31 + 16);
              CMTime time1 = *a3;
              CMTime time2 = v28;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
              operator*(&v29, &v22, v13);
              double v14 = CMTimeGetSeconds(&v22);
              CMTime v28 = *(CMTime *)((char *)v31 + 16);
              CMTime time1 = *a2;
              CMTime time2 = v28;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
              operator*(&v29, &v21, v13);
              double v15 = CMTimeGetSeconds(&v21);
              double v11 = 0.0;
              if (vabdd_f64(0.0, fabs(v14)) >= 0.0000001) {
                double v11 = fabs(v15 / v14);
              }
            }
            else
            {
              double v11 = fabs(v13);
            }
          }
          return (*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v31 + 80))(v31, a4, v11 * v34, v11 * v33);
        }
      }
    }
  }
  return this;
}

void OZSpline::scaleTangentsAfterInsertion(OZSpline *this, char *a2, const CMTime *a3, const CMTime *a4)
{
  double v49 = 0.0;
  double v50 = 0.0;
  CMTime v48 = *(CMTime *)(a2 + 16);
  memset(&v47, 0, sizeof(v47));
  CMTime time1 = *(CMTime *)(a2 + 16);
  CMTime time2 = *a3;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
  int32_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v8 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getPreviousValidVertex(this, a2, &v46, MEMORY[0x1E4F1FA48]);
  OZSpline::getNextValidVertex((void ***)this, a2, &v45, v8);
  if (!*(unsigned char *)(*((void *)this + 21) + 2)) {
    return;
  }
  CMTime time1 = *a3;
  CMTime time2 = *v8;
  if (!CMTimeCompare(&time1, &time2)) {
    return;
  }
  double v9 = v46;
  if (v46 && v45)
  {
    memset(&v44, 0, sizeof(v44));
    CMTime v43 = *(CMTime *)((char *)v45 + 16);
    CMTime v42 = *(CMTime *)((char *)v46 + 16);
    CMTime time1 = v43;
    CMTime time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
    CMTime v42 = *(CMTime *)((char *)v46 + 16);
    CMTime time1 = v48;
    CMTime time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    CMTime time1 = v43;
    CMTime time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      CMTime v42 = *(CMTime *)((char *)v46 + 16);
      CMTime time1 = v48;
      CMTime time2 = v42;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
      operator/((long long *)&v43.value, (uint64_t)&v44, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
    }
    else
    {
      CMTime v41 = v44;
      double Seconds = 1.0 / CMTimeGetSeconds(&v41);
    }
    double v11 = fabs(Seconds);
    int32_t v12 = (unsigned char **)v46;
    if (v46)
    {
      do
      {
        CMTime v43 = *(CMTime *)(v12 + 2);
        CMTime v42 = *(CMTime *)((char *)v46 + 16);
        CMTime time1 = v43;
        CMTime time2 = v42;
        if (CMTimeCompare(&time1, &time2)) {
          break;
        }
        (*((void (**)(unsigned char **, double *, double *, const CMTime *))*v12 + 8))(v12, &v50, &v49, a4);
        (*((void (**)(unsigned char **, const CMTime *, double, double))*v12 + 10))(v12, a4, v11 * v50, v11 * v49);
        double v13 = OZSpline::getVertexIter(this, v12) + 1;
        do
          uint64_t v14 = (uint64_t)*v13++;
        while (((*(uint64_t (**)(uint64_t, const CMTime *))(*(void *)v14 + 136))(v14, a4) & 1) == 0);
        int32_t v12 = (unsigned char **)*(v13 - 1);
      }
      while (v12);
    }
    CMTime v42 = *(CMTime *)((char *)v45 + 16);
    CMTime v39 = *(CMTime *)((char *)v46 + 16);
    CMTime time1 = v42;
    CMTime time2 = v39;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    CMTime v44 = v43;
    CMTime v42 = *(CMTime *)((char *)v45 + 16);
    CMTime time1 = v48;
    CMTime time2 = v42;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
    CMTime time1 = v43;
    CMTime time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      CMTime v42 = *(CMTime *)((char *)v45 + 16);
      CMTime time1 = v48;
      CMTime time2 = v42;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
      operator/((long long *)&v43.value, (uint64_t)&v44, (uint64_t)&v37);
      double v15 = CMTimeGetSeconds(&v37);
    }
    else
    {
      CMTime v38 = v44;
      double v15 = 1.0 / CMTimeGetSeconds(&v38);
    }
    double v16 = fabs(v15);
    int32_t v17 = (unsigned char **)v45;
    if (v45)
    {
LABEL_17:
      CMTime v43 = *(CMTime *)(v17 + 2);
      CMTime v42 = *(CMTime *)((char *)v45 + 16);
      CMTime time1 = v43;
      CMTime time2 = v42;
      if (!CMTimeCompare(&time1, &time2))
      {
        (*((void (**)(unsigned char **, double *, double *, const CMTime *))*v17 + 7))(v17, &v50, &v49, a4);
        (*((void (**)(unsigned char **, const CMTime *, double, double))*v17 + 9))(v17, a4, v16 * v50, v16 * v49);
        double v18 = OZSpline::getVertexIter(this, v17) + 1;
        while (v18 != *((void ***)this + 6))
        {
          uint64_t v19 = (uint64_t)*v18++;
          if ((*(unsigned int (**)(uint64_t, const CMTime *))(*(void *)v19 + 136))(v19, a4))
          {
            double v20 = v18 - 1;
            if (v18 - 1 != *((void ***)this + 6))
            {
              int32_t v17 = (unsigned char **)*v20;
              if (*v20) {
                goto LABEL_17;
              }
            }
            break;
          }
        }
      }
    }
    double v9 = v46;
  }
  if (v9)
  {
    (*(void (**)(char *, double *, double *, const CMTime *))(*(void *)a2 + 56))(a2, &v50, &v49, a4);
    if (fabs(v50) >= 0.0000001)
    {
      CMTime v43 = *(CMTime *)((char *)v46 + 16);
      CMTime time1 = v47;
      CMTime time2 = v43;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
      CMTime time1 = v44;
      CMTime time2 = *v8;
      if (CMTimeCompare(&time1, &time2))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*(void *)a2 + 184))(a2, 256))
        {
          CMTime v43 = *(CMTime *)((char *)v46 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime time1 = v44;
          CMTime time2 = *v8;
          int32_t v21 = CMTimeCompare(&time1, &time2);
          double v22 = 0.0277777778 / v50;
          if (!v21)
          {
            double v25 = fabs(v22);
LABEL_36:
            (*(void (**)(char *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a4, v25 * v50, v25 * v49);
            goto LABEL_37;
          }
          CMTime v43 = *(CMTime *)((char *)v46 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          operator*(&v44, &v36, v22);
          CMTime v23 = &v36;
        }
        else
        {
          CMTime v43 = *(CMTime *)((char *)v46 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime time1 = v44;
          CMTime time2 = *v8;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime v44 = *(CMTime *)((char *)v46 + 16);
            CMTime time1 = v47;
            CMTime time2 = v44;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v35);
            double v24 = 1.0 / CMTimeGetSeconds(&v35);
            goto LABEL_35;
          }
          CMTime v43 = *(CMTime *)((char *)v46 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime v39 = *(CMTime *)((char *)v46 + 16);
          CMTime time1 = v47;
          CMTime time2 = v39;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
          operator/((long long *)&v44.value, (uint64_t)&v42, (uint64_t)&v34);
          CMTime v23 = &v34;
        }
        double v24 = CMTimeGetSeconds(v23);
LABEL_35:
        double v25 = fabs(v24);
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  if (v45)
  {
    (*(void (**)(char *, double *, double *, const CMTime *))(*(void *)a2 + 64))(a2, &v50, &v49, a4);
    if (fabs(v50) >= 0.0000001)
    {
      CMTime v43 = *(CMTime *)((char *)v45 + 16);
      CMTime time1 = v47;
      CMTime time2 = v43;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
      CMTime time1 = v44;
      CMTime time2 = *v8;
      if (CMTimeCompare(&time1, &time2))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*(void *)a2 + 184))(a2, 256))
        {
          CMTime v43 = *(CMTime *)((char *)v45 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime time1 = v44;
          CMTime time2 = *v8;
          int32_t v26 = CMTimeCompare(&time1, &time2);
          double v27 = 0.0277777778 / v50;
          if (!v26)
          {
            double v30 = fabs(v27);
LABEL_49:
            (*(void (**)(char *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a4, v30 * v50, v30 * v49);
            return;
          }
          CMTime v43 = *(CMTime *)((char *)v45 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          operator*(&v44, &v33, v27);
          CMTime v28 = &v33;
        }
        else
        {
          CMTime v43 = *(CMTime *)((char *)v45 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime time1 = v44;
          CMTime time2 = *v8;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime v44 = *(CMTime *)((char *)v45 + 16);
            CMTime time1 = v47;
            CMTime time2 = v44;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
            double v29 = 1.0 / CMTimeGetSeconds(&v32);
            goto LABEL_48;
          }
          CMTime v43 = *(CMTime *)((char *)v45 + 16);
          CMTime time1 = v48;
          CMTime time2 = v43;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v44);
          CMTime v39 = *(CMTime *)((char *)v45 + 16);
          CMTime time1 = v47;
          CMTime time2 = v39;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v42);
          operator/((long long *)&v44.value, (uint64_t)&v42, (uint64_t)&v31);
          CMTime v28 = &v31;
        }
        double v29 = CMTimeGetSeconds(v28);
LABEL_48:
        double v30 = fabs(v29);
        goto LABEL_49;
      }
    }
  }
}

OZSpline *OZSpline::scaleTangentsBeforeDeletion(OZSpline *this, unsigned char **a2, const CMTime *a3)
{
  double v25 = 0.0;
  double v26 = 0.0;
  if (!*(unsigned char *)(*((void *)this + 21) + 2)) {
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  double v24 = 0;
  CMTime v23 = 0;
  CMTime v22 = *(CMTime *)(a2 + 2);
  uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getPreviousValidVertex(this, a2, &v24, MEMORY[0x1E4F1FA48]);
  OZSpline::getNextValidVertex((void ***)v5, a2, &v23, v6);
  uint64_t v7 = *(void *)(v5 + 168);
  long long v8 = *(_OWORD *)(v7 + 8);
  uint64_t v28 = *(void *)(v7 + 24);
  long long v27 = v8;
  double v9 = v24;
  if (v24 && v23)
  {
    CMTime v21 = *(CMTime *)((char *)v23 + 16);
    CMTime v20 = *(CMTime *)((char *)v24 + 16);
    CMTime v30 = v21;
    CMTime v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v27);
    CMTime v20 = *(CMTime *)((char *)v24 + 16);
    CMTime v30 = v22;
    CMTime v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator/((long long *)&v21.value, (uint64_t)&v27, (uint64_t)&time);
    double v10 = 1.0 / CMTimeGetSeconds(&time);
    (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v24 + 64))(v24, &v26, &v25, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)v24 + 80))(v24, a3, v10 * v26, v10 * v25);
    CMTime v20 = *(CMTime *)((char *)v23 + 16);
    CMTime v30 = v20;
    CMTime v29 = v22;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator/((long long *)&v21.value, (uint64_t)&v27, (uint64_t)&v18);
    double v11 = 1.0 / CMTimeGetSeconds(&v18);
    (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v23 + 56))(v23, &v26, &v25, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)v23 + 72))(v23, a3, v11 * v26, v11 * v25);
    double v9 = v24;
  }
  if (!v9) {
    goto LABEL_9;
  }
  (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v9 + 64))(v9, &v26, &v25, a3);
  this = (OZSpline *)v23;
  if (!v23)
  {
    if (vabdd_f64(0.0, v26) >= 0.0000001)
    {
      CMTime v20 = *(CMTime *)((char *)v24 + 16);
      CMTime v30 = v22;
      Float64 v12 = 0.0277777778 / v26;
      CMTime v29 = v20;
      PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
      operator*(&v21, &v17, v12);
      double v13 = 1.0 / fabs(CMTimeGetSeconds(&v17));
      (*(void (**)(void *, const CMTime *, double, double))(*(void *)v24 + 80))(v24, a3, v13 * v26, v13 * v25);
    }
LABEL_9:
    this = (OZSpline *)v23;
    if (!v23) {
      return this;
    }
  }
  this = (OZSpline *)(*(uint64_t (**)(OZSpline *, double *, double *, const CMTime *))(*(void *)this + 56))(this, &v26, &v25, a3);
  if (!v24 && vabdd_f64(0.0, v26) >= 0.0000001)
  {
    CMTime v20 = *(CMTime *)((char *)v23 + 16);
    CMTime v30 = v22;
    Float64 v14 = 0.0277777778 / v26;
    CMTime v29 = v20;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v21);
    operator*(&v21, &v16, v14);
    double v15 = 1.0 / fabs(CMTimeGetSeconds(&v16));
    return (OZSpline *)(*(uint64_t (**)(void *, const CMTime *, double, double))(*(void *)v23 + 72))(v23, a3, v15 * v26, v15 * v25);
  }
  return this;
}

uint64_t OZSpline::deleteVertex(OZSpline *this, void *a2, int a3, const CMTime *a4)
{
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (double v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    double v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v9);
  int v10 = (*(uint64_t (**)(void *, uint64_t))(*(void *)a2 + 184))(a2, 2);
  if ((v10 & 1) == 0)
  {
    VertexIter = OZSpline::getVertexIter(this, a2);
    Float64 v12 = VertexIter;
    if (a3) {
      OZSpline::scaleTangentsBeforeDeletion(this, (unsigned char **)*VertexIter, a4);
    }
    if (*v12) {
      (*(void (**)(void *))(*(void *)*v12 + 8))(*v12);
    }
    *Float64 v12 = 0;
    double v13 = (char *)*((void *)this + 3);
    int64_t v14 = v13 - (char *)(v12 + 1);
    if (v13 != (char *)(v12 + 1)) {
      memmove(v12, v12 + 1, v13 - (char *)(v12 + 1));
    }
    double v15 = (void *)*((void *)this + 2);
    *((void *)this + 3) = (char *)v12 + v14;
    if (v15 == (void **)((char *)v12 + v14)) {
      *((unsigned char *)this + 144) = 0;
    }
    *((unsigned char *)this + 145) = 1;
    *((void *)this + 5) = v15;
    *((void *)this + 6) = (char *)v12 + v14;
    OZSpline::refreshValidVerticesList(this);
  }
  uint64_t v16 = *((void *)this + 20);
  if (!v16 || (CMTime v17 = *(os_unfair_lock_s **)(v16 + 48)) == 0) {
    CMTime v17 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v17);
  return v10 ^ 1u;
}

uint64_t OZSpline::deleteVertices(OZSpline *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (uint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  Nextuint64_t Vertex = OZSpline::getNextVertex(this, a2);
  if (NextVertex)
  {
    uint64_t v9 = NextVertex;
    char v10 = 0;
    double v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      CMTimeEpoch v23 = *(void *)(v9 + 32);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)(v9 + 16);
      time1.CMTimeEpoch epoch = v23;
      CMTime time2 = *a3;
      if (CMTimeCompare(&time1, &time2) > 0) {
        break;
      }
      VertexIter = OZSpline::getVertexIter(this, (void *)v9);
      double v13 = OZSpline::getVertexIter(this, (void *)v9);
      int64_t v14 = (void **)*((void *)this + 6);
      if (v14 == v13 || v13 + 1 == v14) {
        double v15 = 0;
      }
      else {
        double v15 = v13[1];
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 184))(v9, 2) & 1) == 0)
      {
        OZSpline::scaleTangentsBeforeDeletion(this, (unsigned char **)*VertexIter, v11);
        if (*VertexIter) {
          (*(void (**)(void *))(*(void *)*VertexIter + 8))(*VertexIter);
        }
        *VertexIter = 0;
        uint64_t v16 = (void **)*((void *)this + 3);
        int64_t v17 = (char *)v16 - (char *)(VertexIter + 1);
        if (v16 != VertexIter + 1) {
          memmove(VertexIter, VertexIter + 1, (char *)v16 - (char *)(VertexIter + 1));
        }
        CMTime v18 = (void **)*((void *)this + 2);
        *((void *)this + 3) = (char *)VertexIter + v17;
        if (v18 == (void **)((char *)VertexIter + v17)) {
          *((unsigned char *)this + 144) = 0;
        }
        char v10 = 1;
        *((unsigned char *)this + 145) = 1;
        *((void *)this + 5) = v18;
        *((void *)this + 6) = (char *)VertexIter + v17;
        OZSpline::refreshValidVerticesList(this);
      }
      uint64_t v9 = (uint64_t)v15;
    }
    while (v15);
    uint64_t v19 = v10 & 1;
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *((void *)this + 20);
  if (!v20 || (CMTime v21 = *(os_unfair_lock_s **)(v20 + 48)) == 0) {
    CMTime v21 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v21);
  return v19;
}

BOOL OZSpline::deleteAllVertices(OZSpline *this)
{
  uint64_t v2 = *((void *)this + 20);
  if (!v2 || (uint64_t v3 = *(os_unfair_lock_s **)(v2 + 48)) == 0) {
    uint64_t v3 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v3);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  if (v4 == v5)
  {
    uint64_t v6 = *((void *)this + 2);
  }
  else
  {
    uint64_t v6 = *((void *)this + 3);
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v6 = *((void *)this + 3);
      }
      *(void *)(v6 - OZSpline::reparametrize((uint64_t)this + 8) = 0;
      uint64_t v8 = *((void *)this + 2);
      uint64_t v6 = *((void *)this + 3) - 8;
      *((void *)this + 3) = v6;
    }
    while (v8 != v6);
  }
  *((_WORD *)this + 7PCSpinLock::lock(this + 2) = 256;
  *((void *)this + 5) = v6;
  *((void *)this + 6) = v6;
  OZSpline::refreshValidVerticesList(this);
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (char v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    char v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v10);
  return v4 != v5;
}

void OZSpline::addVertex(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  uint64_t v5 = *((void *)this + 20);
  if (!v5 || (uint64_t v6 = *(os_unfair_lock_s **)(v5 + 48)) == 0) {
    uint64_t v6 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v6);
  uint64_t v7 = 0;
  operator new();
}

void sub_1B79B5E64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

BOOL OZSpline::setVertexFlag(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2) {
    (*(void (**)(void *, uint64_t))(*(void *)a2 + 152))(a2, a3);
  }
  return a2 != 0;
}

void OZSpline::addVertexNoTangents(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  uint64_t v8 = *((void *)this + 20);
  if (!v8 || (uint64_t v9 = *(os_unfair_lock_s **)(v8 + 48)) == 0) {
    uint64_t v9 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v9);
  OZSpline::getMaxValueU(this, a4, 0, (uint64_t)&v14);
  CMTime time1 = *a2;
  CMTime time2 = v14;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    uint64_t v10 = *((void *)this + 20);
    if (!v10 || (double v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
      double v11 = (os_unfair_lock_s *)((char *)this + 8);
    }
    PCSpinLock::unlock(v11);
    OZSpline::appendVertexNoTangents(this, a2, a3, v12);
  }
  uint64_t v13 = 0;
  operator new();
}

void sub_1B79B644C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void OZSpline::appendVertexNoTangents(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  uint64_t v5 = *((void *)this + 20);
  if (!v5 || (uint64_t v6 = *(os_unfair_lock_s **)(v5 + 48)) == 0) {
    uint64_t v6 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v6);
  operator new();
}

void sub_1B79B6650(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void OZSpline::appendVertexesNoTangents(OZSpline *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2) {
    operator new();
  }
  uint64_t v12 = *((void *)this + 2);
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 17) = (((v11 - v12) << 29) - 0x100000000) >> 32;
  *((unsigned char *)this + 145) = 1;
  *((void *)this + 5) = v12;
  *((void *)this + 6) = v11;
  OZSpline::refreshValidVerticesList(this);
  uint64_t v13 = *((void *)this + 20);
  if (!v13 || (CMTime v14 = *(os_unfair_lock_s **)(v13 + 48)) == 0) {
    CMTime v14 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v14);
}

void sub_1B79B6954(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZSpline::deriveVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  return 1;
}

double OZSpline::getPointInputTangents(OZSpline *this, const CMTime *a2, double *a3, double *a4, const CMTime *a5)
{
  double v9 = 0.0;
  double v10 = 0.0;
  OZSpline::derivePoint(this, a2, &v10, &v9, 0, 0, a5, 1);
  double result = v9;
  double v8 = sqrt(v10 * v10 + result * result);
  if (a3) {
    *a3 = v10 / v8;
  }
  if (a4)
  {
    double result = result / v8;
    *a4 = result;
  }
  return result;
}

void OZSpline::derivePoint(OZSpline *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6, const CMTime *a7, char a8)
{
  CMTime v55 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v54 = v55;
  double v52 = 0.0;
  double v53 = 0.0;
  if (!*(unsigned char *)(*((void *)this + 21) + 2)) {
    return;
  }
  double v50 = 0;
  uint64_t v51 = 0;
  uint64_t v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getPreviousValidVertex(this, a2, &v51, MEMORY[0x1E4F1FA48], 0);
  OZSpline::getNextValidVertex(this, a2, &v50, v16, 0);
  double v17 = (*(double (**)(OZSpline *, const CMTime *, const CMTime *, void))(*(void *)this + 240))(this, a2, v16, 0);
  uint64_t v18 = *((void *)this + 21);
  long long v19 = *(_OWORD *)(v18 + 8);
  v56.CMTimeEpoch epoch = *(void *)(v18 + 24);
  *(_OWORD *)&v56.CMTimeValue value = v19;
  if (v51)
  {
    CMTime v55 = *(CMTime *)((char *)v51 + 16);
    (*(void (**)(void *, void))(*(void *)v51 + 24))(v51, MEMORY[0x1E4F1FA48]);
    if (v50)
    {
      CMTime v48 = *(CMTime *)(*((void *)this + 21) + 8);
      CMTime v58 = *a2;
      CMTime v57 = v48;
      double v21 = PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      double v22 = v17
          - (*(double (**)(OZSpline *, CMTime *, void, void, double))(*(void *)this + 240))(this, &v49, MEMORY[0x1E4F1FA48], 0, v21);
    }
    else
    {
      double v25 = v17 - v20;
      CMTime v58 = *a2;
      CMTime v57 = v55;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&time);
      double v22 = v25 / CMTimeGetSeconds(&time);
    }
    CMTime v46 = v56;
    double v23 = -CMTimeGetSeconds(&v46);
    double v24 = -v22;
  }
  else
  {
    double v23 = 0.0;
    double v24 = 0.0;
  }
  if (!v50)
  {
    double v29 = 1.0;
    double v28 = 0.0;
    CMTime v30 = v51;
    double Seconds = 0.0;
LABEL_17:
    double v33 = 1.0;
    goto LABEL_18;
  }
  CMTime v54 = *(CMTime *)((char *)v50 + 16);
  (*(void (**)(void *, void))(*(void *)v50 + 24))(v50, MEMORY[0x1E4F1FA48]);
  if (v51)
  {
    CMTime v48 = *(CMTime *)(*((void *)this + 21) + 8);
    CMTime v58 = *a2;
    CMTime v57 = v48;
    double v27 = PC_CMTimeSaferAdd(&v58, &v57, (uint64_t)&v49);
    double v28 = -(v17
          - (*(double (**)(OZSpline *, CMTime *, void, void, double))(*(void *)this + 240))(this, &v49, MEMORY[0x1E4F1FA48], 0, v27));
  }
  else
  {
    double v32 = v26 - v17;
    CMTime v58 = v54;
    CMTime v57 = *a2;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v45);
    double v28 = v32 / CMTimeGetSeconds(&v45);
  }
  CMTime v44 = v56;
  double Seconds = CMTimeGetSeconds(&v44);
  CMTime v30 = v51;
  double v29 = 1.0;
  if (!v51 || !v50 || (a8 & 1) != 0) {
    goto LABEL_17;
  }
  CMTime v49 = *(CMTime *)((char *)v50 + 16);
  CMTime v48 = *(CMTime *)((char *)v51 + 16);
  CMTime v58 = v49;
  CMTime v57 = v48;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v56);
  CMTime v48 = *(CMTime *)((char *)v51 + 16);
  CMTime v58 = *a2;
  CMTime v57 = v48;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
  operator/((long long *)&v49.value, (uint64_t)&v56, (uint64_t)&v43);
  double v29 = CMTimeGetSeconds(&v43);
  (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v51 + 64))(v51, &v53, &v52, a7);
  (*(void (**)(void *, const CMTime *, double, double))(*(void *)v51 + 80))(v51, a7, v29 * v53, v29 * v52);
  CMTime v48 = *(CMTime *)((char *)v50 + 16);
  CMTime v58 = v48;
  CMTime v57 = *a2;
  PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
  operator/((long long *)&v49.value, (uint64_t)&v56, (uint64_t)&v42);
  double v33 = CMTimeGetSeconds(&v42);
  (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v50 + 56))(v50, &v53, &v52, a7);
  (*(void (**)(void *, const CMTime *, double, double))(*(void *)v50 + 72))(v50, a7, v33 * v53, v33 * v52);
  CMTime v30 = v51;
LABEL_18:
  if (v30)
  {
    (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v30 + 64))(v30, &v53, &v52, a7);
    if (!v50 && (a8 & 1) == 0 && vabdd_f64(0.0, v53) >= 0.0000001)
    {
      CMTime v48 = *(CMTime *)((char *)v51 + 16);
      CMTime v58 = *a2;
      Float64 v34 = 0.0277777778 / v53;
      CMTime v57 = v48;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      operator*(&v49, &v41, v34);
      double v35 = fabs(CMTimeGetSeconds(&v41));
      (*(void (**)(void *, const CMTime *, double, double))(*(void *)v51 + 80))(v51, a7, v35 * v53, v35 * v52);
    }
    CMTime v48 = *(CMTime *)((char *)v51 + 16);
    CMTime v58 = *a2;
    CMTime v57 = v48;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
    operator*(&v49, &v40, 0.0277777778 / v23);
    double v29 = fabs(CMTimeGetSeconds(&v40));
  }
  if (v50)
  {
    (*(void (**)(void *, double *, double *, const CMTime *))(*(void *)v50 + 56))(v50, &v53, &v52, a7);
    if (!v51 && (a8 & 1) == 0 && vabdd_f64(0.0, v53) >= 0.0000001)
    {
      CMTime v48 = *(CMTime *)((char *)v50 + 16);
      CMTime v58 = *a2;
      Float64 v36 = 0.0277777778 / v53;
      CMTime v57 = v48;
      PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
      operator*(&v49, &v39, v36);
      double v37 = fabs(CMTimeGetSeconds(&v39));
      (*(void (**)(void *, const CMTime *, double, double))(*(void *)v50 + 72))(v50, a7, v37 * v53, v37 * v52);
    }
    CMTime v48 = *(CMTime *)((char *)v50 + 16);
    CMTime v58 = *a2;
    CMTime v57 = v48;
    PC_CMTimeSaferSubtract(&v58, &v57, (uint64_t)&v49);
    operator*(&v49, &v38, 0.0277777778 / Seconds);
    double v33 = fabs(CMTimeGetSeconds(&v38));
  }
  if (a3) {
    *a3 = v23 * v29;
  }
  if (a4) {
    *a4 = v24 * v29;
  }
  if (a5) {
    *a5 = Seconds * v33;
  }
  if (a6) {
    *a6 = v28 * v33;
  }
}

double OZSpline::getPointOutputTangents(OZSpline *this, const CMTime *a2, double *a3, double *a4, const CMTime *a5)
{
  double v9 = 0.0;
  double v10 = 0.0;
  OZSpline::derivePoint(this, a2, 0, 0, &v10, &v9, a5, 1);
  double result = v9;
  double v8 = sqrt(v10 * v10 + result * result);
  if (a3) {
    *a3 = v10 / v8;
  }
  if (a4)
  {
    double result = result / v8;
    *a4 = result;
  }
  return result;
}

void OZSpline::deriveCurve(OZSpline *this, OZVertex *a2, const CMTime *a3, char a4)
{
  double v38 = 0.0;
  double v39 = 0.0;
  double v36 = 0.0;
  double v37 = 0.0;
  Float64 v34 = 0;
  double v35 = 0;
  double v32 = 0;
  double v33 = 0;
  OZSpline::getFirstValidVertex(this, &v35, a3);
  OZSpline::getLastValidVertex(this, &v34, a3);
  CMTime time1 = *(CMTime *)((char *)a2 + 16);
  double v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getPreviousValidVertex(this, &time1, &v33, MEMORY[0x1E4F1FA48], 0);
  CMTime time1 = *(CMTime *)((char *)a2 + 16);
  OZSpline::getNextValidVertex(this, &time1, &v32, v8, 0);
  if (!v35 || !v34 || !*(unsigned char *)(*((void *)this + 21) + 2)) {
    return;
  }
  double v9 = (_OWORD *)((char *)a2 + 16);
  if (v35 == a2 && v32)
  {
    CMTime v29 = *(CMTime *)((char *)v32 + 16);
    *(_OWORD *)&time2.CMTimeValue value = *v9;
    time2.CMTimeEpoch epoch = *((void *)a2 + 4);
    CMTime time1 = v29;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
    operator/((long long *)&v30.value, (uint64_t)&time, 12.0);
    double Seconds = CMTimeGetSeconds(&time);
    uint64_t v11 = MEMORY[0x1E4F1FA48];
    double v12 = (*(double (**)(void *, void))(*(void *)v32 + 24))(v32, MEMORY[0x1E4F1FA48]);
    double v13 = (v12 - (*(double (**)(OZVertex *, uint64_t))(*(void *)a2 + 24))(a2, v11)) / 12.0;
    (*(void (**)(OZVertex *, uint64_t, double, double))(*(void *)a2 + 80))(a2, v11, Seconds / 3.0, v13 / 3.0);
    (*(void (**)(OZVertex *, uint64_t, double, double))(*(void *)a2 + 72))(a2, v11, Seconds / -3.0, v13 / -3.0);
    double v14 = (*(double (**)(void *, const CMTime *))(*(void *)v32 + 24))(v32, a3);
    if (vabdd_f64(v14, (*(double (**)(OZVertex *, const CMTime *))(*(void *)a2 + 24))(a2, a3)) >= 0.0000001) {
      return;
    }
    time1.CMTimeValue value = 0;
    time2.CMTimeValue value = 0;
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(void *)v32 + 56))(v32, &time1, &time2, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)v32 + 72))(v32, a3, *(double *)&time1.value, 0.0);
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(void *)v32 + 64))(v32, &time1, &time2, a3);
    if (fabs(*(double *)&time2.value) < 0.0000001) {
      return;
    }
    double v15 = v32;
    if (!v32) {
      return;
    }
LABEL_15:
    (*(void (**)(void *, uint64_t))(*(void *)v15 + 152))(v15, 1);
    return;
  }
  if (!v33 || v34 != a2)
  {
    *(_OWORD *)&time1.CMTimeValue value = *v9;
    time1.CMTimeEpoch epoch = *((void *)a2 + 4);
    OZSpline::derivePoint(this, &time1, &v39, &v38, &v37, &v36, a3, a4);
    CMTime v30 = *(CMTime *)((char *)v35 + 16);
    *(_OWORD *)&time2.CMTimeValue value = *v9;
    time2.CMTimeEpoch epoch = *((void *)a2 + 4);
    CMTime time1 = v30;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a3, v37, v36);
      v21.n128_f64[0] = -v37;
      v22.n128_f64[0] = -v36;
LABEL_18:
      (*(void (**)(OZVertex *, const CMTime *, __n128, __n128))(*(void *)a2 + 72))(a2, a3, v21, v22);
      return;
    }
    CMTime v30 = *(CMTime *)((char *)v34 + 16);
    *(_OWORD *)&time2.CMTimeValue value = *v9;
    time2.CMTimeEpoch epoch = *((void *)a2 + 4);
    CMTime time1 = v30;
    int32_t v23 = CMTimeCompare(&time1, &time2);
    v24.n128_f64[0] = v39;
    if (v23 <= 0)
    {
      (*(void (**)(OZVertex *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a3, v39, v38);
      v26.n128_f64[0] = -v39;
      v27.n128_f64[0] = -v38;
    }
    else
    {
      uint64_t v25 = *(void *)a2;
      if (fabs(v39) <= fabs(v37))
      {
        (*(void (**)(OZVertex *, const CMTime *, double, double))(v25 + 80))(a2, a3, v37, v36);
        v22.n128_f64[0] = v38;
        v21.n128_f64[0] = v39;
        goto LABEL_18;
      }
      (*(void (**)(OZVertex *, const CMTime *, __n128, double))(v25 + 72))(a2, a3, v24, v38);
      v27.n128_f64[0] = v36;
      v26.n128_f64[0] = v37;
    }
    (*(void (**)(OZVertex *, const CMTime *, __n128, __n128))(*(void *)a2 + 80))(a2, a3, v26, v27);
    return;
  }
  CMTime v29 = *(CMTime *)((char *)v33 + 16);
  *(_OWORD *)&time2.CMTimeValue value = *v9;
  time2.CMTimeEpoch epoch = *((void *)a2 + 4);
  CMTime time1 = v29;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
  operator/((long long *)&v30.value, (uint64_t)&v28, 12.0);
  double v16 = CMTimeGetSeconds(&v28);
  uint64_t v17 = MEMORY[0x1E4F1FA48];
  double v18 = (*(double (**)(void *, void))(*(void *)v33 + 24))(v33, MEMORY[0x1E4F1FA48]);
  double v19 = (v18 - (*(double (**)(OZVertex *, uint64_t))(*(void *)a2 + 24))(a2, v17)) / 12.0;
  (*(void (**)(OZVertex *, uint64_t, double, double))(*(void *)a2 + 72))(a2, v17, v16 / 3.0, v19 / 3.0);
  (*(void (**)(OZVertex *, uint64_t, double, double))(*(void *)a2 + 80))(a2, v17, v16 / -3.0, v19 / -3.0);
  double v20 = (*(double (**)(void *, const CMTime *))(*(void *)v33 + 24))(v33, a3);
  if (vabdd_f64(v20, (*(double (**)(OZVertex *, const CMTime *))(*(void *)a2 + 24))(a2, a3)) < 0.0000001)
  {
    time1.CMTimeValue value = 0;
    time2.CMTimeValue value = 0;
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(void *)v33 + 64))(v33, &time1, &time2, a3);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)v33 + 80))(v33, a3, *(double *)&time1.value, 0.0);
    (*(void (**)(void *, CMTime *, CMTime *, const CMTime *))(*(void *)v33 + 56))(v33, &time1, &time2, a3);
    if (fabs(*(double *)&time2.value) >= 0.0000001)
    {
      double v15 = v33;
      if (v33) {
        goto LABEL_15;
      }
    }
  }
}

double PCMath::mod@<D0>(PCMath *this@<X0>, const CMTime *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  operator/((long long *)this, (uint64_t)a2, (uint64_t)a3);
  CMTimeMake(&v7, 1, 1);
  CMTime v11 = *(CMTime *)a3;
  CMTime v10 = v7;
  PC_CMTimeFloorToSampleDuration(&v11, &v10, (uint64_t)&v8);
  CMTime v11 = *(CMTime *)a3;
  CMTime v10 = v8;
  PC_CMTimeSaferSubtract(&v11, &v10, (uint64_t)&v9);
  operator*(&v9, (uint64_t)a2, (uint64_t)&v11);
  double result = *(double *)&v11.value;
  *(CMTime *)a3 = v11;
  return result;
}

void OZSpline::generateExtrapolatedVertices(OZSpline *this, unsigned int a2, unsigned int a3, const CMTime *a4)
{
}

void sub_1B79B9BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

BOOL OZSpline::setVertexInterpolation(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2) {
    (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, a3);
  }
  return a2 != 0;
}

BOOL OZSpline::getVertexInterpolation(OZInterpolators **this, void *a2, unsigned int *a3, BOOL *a4)
{
  if (a2)
  {
    int v8 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
    if (a4) {
      *a4 = OZSpline::interpolatorUsesTangents(this, v8, a2);
    }
    if (a3) {
      *a3 = v8;
    }
  }
  return a2 != 0;
}

uint64_t OZSpline::adjustVertexSpeed(void ***this, void *a2, double a3)
{
  if (a2)
  {
    double v14 = 0;
    OZSpline::getNextValidVertex(this, a2, &v14, MEMORY[0x1E4F1FA48]);
    if (v14)
    {
      int v5 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
      if (v5 == 1)
      {
        uint64_t v6 = MEMORY[0x1E4F1FA48];
        double v7 = (*(double (**)(void *, void))(*(void *)a2 + 24))(a2, MEMORY[0x1E4F1FA48]);
        if (vabdd_f64(v7, (*(double (**)(void *, uint64_t))(*(void *)v14 + 24))(v14, v6)) < 0.0000001) {
          return 0;
        }
        int v8 = 15;
        (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, 15);
        (*(void (**)(void *, void, double))(*(void *)a2 + 48))(a2, MEMORY[0x1E4F1FA48], 2.0);
      }
      else
      {
        int v8 = v5;
        if ((v5 - 15) > 2) {
          return 0;
        }
      }
      double v9 = a3 / -3.0;
      (*(void (**)(void *, void))(*(void *)a2 + 40))(a2, MEMORY[0x1E4F1FA48]);
      double v11 = -v9;
      if (v8 != 17) {
        double v11 = v9;
      }
      double v12 = v11 + v10.n128_f64[0];
      v10.n128_u64[0] = 0;
      if (v12 >= 0.0)
      {
        v10.n128_f64[0] = v12;
        if (v12 > 2.0) {
          v10.n128_u64[0] = 2.0;
        }
      }
      (*(void (**)(void *, void, __n128))(*(void *)a2 + 48))(a2, MEMORY[0x1E4F1FA48], v10);
    }
  }
  return 0;
}

uint64_t OZSpline::getVertexSpeed(OZSpline *this, void *a2, unsigned int *a3)
{
  if (!a2) {
    return 0;
  }
  int v4 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
  uint64_t result = 0;
  if (v4 <= 15)
  {
    if (v4 != 1)
    {
      if (v4 != 15) {
        return result;
      }
      if (!a3) {
        return 1;
      }
      LODWORD(result) = 3;
      goto LABEL_16;
    }
    if (a3)
    {
      LODWORD(result) = 0;
LABEL_16:
      *a3 = result;
      return 1;
    }
    return 1;
  }
  if (v4 == 16)
  {
    if (a3)
    {
      LODWORD(result) = 2;
      goto LABEL_16;
    }
    return 1;
  }
  if (v4 == 17)
  {
    uint64_t result = 1;
    if (a3) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t OZSpline::getVertexFlags(OZSpline *this, void *a2, unsigned int *a3)
{
  if (a2) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3) {
    *a3 = (*(uint64_t (**)(void *))(*(void *)a2 + 168))(a2);
  }
  return v4;
}

BOOL OZSpline::setVertexFlags(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2) {
    (*(void (**)(void *, uint64_t))(*(void *)a2 + 176))(a2, a3);
  }
  return a2 != 0;
}

BOOL OZSpline::resetVertexFlag(OZSpline *this, void *a2, uint64_t a3)
{
  if (a2) {
    (*(void (**)(void *, uint64_t))(*(void *)a2 + 160))(a2, a3);
  }
  return a2 != 0;
}

BOOL OZSpline::enableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, uint64_t, const CMTime *))(*(void *)a2 + 128))(a2, 1, a3);
    *((unsigned char *)this + 145) = 1;
    *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  return a2 != 0;
}

BOOL OZSpline::disableVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, void, const CMTime *))(*(void *)a2 + 128))(a2, 0, a3);
    *((unsigned char *)this + 145) = 1;
    *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
    OZSpline::refreshValidVerticesList(this);
  }
  return a2 != 0;
}

uint64_t OZSpline::isEnabledVertex(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2) {
    return (*(uint64_t (**)(void *, const CMTime *))(*(void *)a2 + 136))(a2, a3);
  }
  else {
    return 0;
  }
}

BOOL OZSpline::flattenHandles(OZSpline *this, void *a2, const CMTime *a3)
{
  if (a2)
  {
    (*(void (**)(void *, const CMTime *))(*(void *)a2 + 88))(a2, a3);
    (*(void (**)(void *, uint64_t))(*(void *)a2 + 152))(a2, 128);
  }
  return a2 != 0;
}

uint64_t OZSpline::setVertexInputHandles(OZInterpolators **this, void *a2, double a3, double a4, const CMTime *a5, int a6)
{
  double v13 = a4;
  double v14 = a3;
  int v10 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
  if (a6)
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v10);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(void *)Interpolator + 40))(Interpolator, this, &v14, &v13);
  }
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 160))(a2, 256);
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 152))(a2, 128);
  (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a5, v14, v13);
  return 1;
}

uint64_t OZSpline::setVertexOutputHandles(OZInterpolators **this, void *a2, double a3, double a4, const CMTime *a5, int a6)
{
  double v8 = a4;
  double v9 = a3;
  double v15 = a4;
  double v16 = a3;
  int v12 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
  if (a6)
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(void *)Interpolator + 40))(Interpolator, this, &v16, &v15);
    double v8 = v15;
    double v9 = v16;
  }
  (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a5, v9, v8);
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 160))(a2, 256);
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 152))(a2, 128);
  return 1;
}

uint64_t OZSpline::getVertexInputHandles(OZInterpolators **this, void *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v12 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
  (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(void *)a2 + 56))(a2, &v16, &v15, a5);
  if (a3) {
    *(void *)a3 = v16;
  }
  if (a4) {
    *(void *)a4 = v15;
  }
  if (a6)
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(void *)Interpolator + 48))(Interpolator, this, a3, a4);
  }
  return 1;
}

uint64_t OZSpline::getVertexOutputHandles(OZInterpolators **this, void *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v12 = (*(uint64_t (**)(void *))(*(void *)a2 + 208))(a2);
  (*(void (**)(void *, uint64_t *, uint64_t *, const CMTime *))(*(void *)a2 + 64))(a2, &v16, &v15, a5);
  if (a3) {
    *(void *)a3 = v16;
  }
  if (a4) {
    *(void *)a4 = v15;
  }
  if (a6)
  {
    uint64_t Interpolator = OZInterpolators::getInterpolator(this[19], v12);
    (*(void (**)(uint64_t, OZInterpolators **, double *, double *))(*(void *)Interpolator + 48))(Interpolator, this, a3, a4);
  }
  return 1;
}

uint64_t OZSpline::setVertexNormal(OZSpline *this, void *a2, double a3, const CMTime *a4)
{
  return 1;
}

uint64_t OZSpline::getVertexNormal(OZSpline *this, void *a2, double *a3, const CMTime *a4)
{
  if (a3) {
    *a3 = (*(double (**)(void *, const CMTime *))(*(void *)a2 + 112))(a2, a4);
  }
  return 1;
}

uint64_t OZSpline::setVertexNormal(OZSpline *this, const CMTime *a2, double a3, const CMTime *a4)
{
  int v10 = 0;
  OZSpline::getVertexHandle(this, a2, &v10, 0);
  if (v10 && ((*(uint64_t (**)(void *, const CMTime *))(*(void *)v10 + 136))(v10, a4) & 1) != 0
    || (PreviousValiduint64_t Vertex = OZSpline::getPreviousValidVertex(this, a2, &v10, MEMORY[0x1E4F1FA48], 0),
        uint64_t result = 0,
        PreviousValidVertex))
  {
    (*(void (**)(void *, const CMTime *, double))(*(void *)v10 + 104))(v10, a4, a3);
    return 1;
  }
  return result;
}

uint64_t OZSpline::getVertexNormal(OZSpline *this, const CMTime *a2, double *a3, const CMTime *a4)
{
  int v10 = 0;
  OZSpline::getVertexHandle(this, a2, &v10, 0);
  if (v10 && ((*(uint64_t (**)(void *, const CMTime *))(*(void *)v10 + 136))(v10, a4) & 1) != 0
    || (PreviousValiduint64_t Vertex = OZSpline::getPreviousValidVertex(this, a2, &v10, MEMORY[0x1E4F1FA48], 0),
        uint64_t result = 0,
        PreviousValidVertex))
  {
    if (a3) {
      *a3 = (*(double (**)(void *, const CMTime *))(*(void *)v10 + 112))(v10, a4);
    }
    return 1;
  }
  return result;
}

uint64_t OZSpline::setVertexBiasLinear(OZSpline *this, void *a2, double a3, const CMTime *a4)
{
  double v11 = 0;
  int v12 = 0;
  OZSpline::getFirstValidVertex(this, &v12, a4);
  OZSpline::getLastValidVertex(this, &v11, a4);
  if (!*((unsigned char *)this + 144) && (!v12 || v11 == 0))
  {
    uint64_t v9 = *((void *)this + 20);
    if (!v9 || !*(unsigned char *)(v9 + 56)) {
      return 0;
    }
  }
  (*(void (**)(void *, const CMTime *, double))(*(void *)a2 + 48))(a2, a4, a3);
  return 1;
}

uint64_t OZSpline::getVertexBiasLinear(OZSpline *this, void *a2, double *a3, const CMTime *a4)
{
  if (a3) {
    *a3 = (*(double (**)(void *, const CMTime *))(*(void *)a2 + 40))(a2, a4);
  }
  return 1;
}

uint64_t OZSpline::setVertexBiasExp(OZSpline *this, void *a2, long double a3, const CMTime *a4)
{
  double v7 = exp(a3);
  int v10 = 0;
  double v11 = 0;
  OZSpline::getFirstValidVertex(this, &v11, a4);
  OZSpline::getLastValidVertex(this, &v10, a4);
  if (!*((unsigned char *)this + 144) && (!v11 || !v10))
  {
    uint64_t v8 = *((void *)this + 20);
    if (!v8 || !*(unsigned char *)(v8 + 56)) {
      return 0;
    }
  }
  (*(void (**)(void *, const CMTime *, double))(*(void *)a2 + 48))(a2, a4, v7);
  return 1;
}

uint64_t OZSpline::getVertexBiasExp(OZSpline *this, void *a2, long double *a3, const CMTime *a4)
{
  if (a3)
  {
    long double v5 = (*(double (**)(void *, const CMTime *))(*(void *)a2 + 40))(a2, a4);
    *a3 = log(v5);
  }
  return 1;
}

uint64_t OZSpline::warpSplineLinear(uint64_t this, Float64 a2, const CMTime *a3, const CMTime *a4)
{
  CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v14 = 0;
  double v15 = 0.0;
  long double v5 = *(uint64_t **)(this + 40);
  if (*(uint64_t **)(this + 48) != v5)
  {
    uint64_t v8 = this;
    do
    {
      uint64_t v9 = *v5;
      CMTime v16 = *(CMTime *)(*v5 + 16);
      (*(void (**)(uint64_t, double *, uint64_t *, const CMTime *))(*(void *)v9 + 56))(v9, &v15, &v14, a4);
      double v15 = v15 * a2;
      (*(void (**)(uint64_t, const CMTime *))(*(void *)*v5 + 72))(*v5, a4);
      (*(void (**)(uint64_t, double *, uint64_t *, const CMTime *))(*(void *)*v5 + 64))(*v5, &v15, &v14, a4);
      double v15 = v15 * a2;
      (*(void (**)(uint64_t, const CMTime *))(*(void *)*v5 + 80))(*v5, a4);
      uint64_t v10 = *v5++;
      operator*(&v16, &v12, a2);
      CMTime v18 = v12;
      CMTime v17 = *a3;
      double v11 = PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)v13);
      this = (*(uint64_t (**)(uint64_t, unsigned char *, double))(*(void *)v10 + 16))(v10, v13, v11);
    }
    while (v5 != *(uint64_t **)(v8 + 48));
  }
  return this;
}

void OZSpline::forceWarpSplineLinear(OZSpline *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)this + 5);
  long long v19 = *MEMORY[0x1E4F1FA48];
  uint64_t v20 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v17 = 0;
  double v18 = 0.0;
  CMTime time = *a2;
  double Seconds = CMTimeGetSeconds(&time);
  if (*((uint64_t **)this + 6) != v6)
  {
    double v8 = Seconds;
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v11 = *v6++;
      uint64_t v10 = v11;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 168))(v11);
      (*(void (**)(uint64_t, void))(*(void *)v10 + 176))(v10, v12 & 0xFFFFFFFD);
      long long v19 = *(_OWORD *)(v11 + 16);
      uint64_t v20 = *(void *)(v11 + 32);
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t))(*(void *)v10 + 56))(v10, &v18, &v17, v9);
      double v18 = v8 * v18;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 72))(v10, v9);
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t))(*(void *)v10 + 64))(v10, &v18, &v17, v9);
      double v18 = v8 * v18;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, v9);
      operator*(&v19, (uint64_t)a2, (uint64_t)&v14);
      CMTime v22 = v14;
      CMTime v21 = *a3;
      double v13 = PC_CMTimeSaferAdd(&v22, &v21, (uint64_t)v15);
      (*(void (**)(uint64_t, unsigned char *, double))(*(void *)v10 + 16))(v10, v15, v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 176))(v10, v12);
    }
    while (v6 != *((uint64_t **)this + 6));
  }
}

void *OZSpline::reverseVertices(OZSpline *this, void *a2, void *a3)
{
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (double v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    double v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  v12[0] = v12;
  v12[1] = v12;
  v12[2] = 0;
  VertexIter = OZSpline::getVertexIter(this, a2);
  if (OZSpline::getVertexIter(this, a3) + 1 != VertexIter)
  {
    (*(void (**)(void *))(*(void *)a2 + 208))(a2);
    operator new();
  }
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v10);
  return std::__list_imp<unsigned int>::clear(v12);
}

void sub_1B79BB73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  std::__list_imp<unsigned int>::clear((void *)(v25 - 168));
  _Unwind_Resume(a1);
}

BOOL OZSpline::getUForValue(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, double a6)
{
  uint64_t v12 = *(void *)(a1 + 160);
  if (!v12 || (double v13 = *(os_unfair_lock_s **)(v12 + 48)) == 0) {
    double v13 = (os_unfair_lock_s *)(a1 + 8);
  }
  PCSpinLock::lock(v13);
  CMTime v49 = *a3;
  memset(&v48, 0, sizeof(v48));
  CMTime time1 = *a3;
  CMTime time2 = a3[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v50);
  CMTime time1 = v50;
  CMTime time2 = *a4;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
  memset(&v50, 0, sizeof(v50));
  CMTime v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getMinValueU((OZSpline *)a1, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v50);
  memset(&v47, 0, sizeof(v47));
  OZSpline::getMaxValueU((OZSpline *)a1, v14, 0, (uint64_t)&v47);
  CMTime time1 = v49;
  CMTime time2 = v50;
  if (CMTimeCompare(&time1, &time2) < 0) {
    CMTime v49 = v50;
  }
  CMTime time1 = v49;
  CMTime time2 = v47;
  if (CMTimeCompare(&time1, &time2) >= 1) {
    CMTime v49 = v47;
  }
  CMTime time1 = v48;
  CMTime time2 = v47;
  if (CMTimeCompare(&time1, &time2) >= 1) {
    CMTime v48 = v47;
  }
  CMTime time1 = v48;
  CMTime time2 = v50;
  if (CMTimeCompare(&time1, &time2) < 0) {
    CMTime v48 = v50;
  }
  CMTime v45 = 0;
  CMTime v46 = 0;
  if (!OZSpline::getVertexHandle((OZSpline *)a1, &v49, &v46, 0)) {
    OZSpline::getPreviousValidVertex((OZSpline *)a1, &v49, &v46, MEMORY[0x1E4F1FA48], 0);
  }
  if (!OZSpline::getVertexHandle((OZSpline *)a1, &v48, &v45, 0)) {
    OZSpline::getNextValidVertex((OZSpline *)a1, &v48, &v45, MEMORY[0x1E4F1FA48], 0);
  }
  double v15 = (CMTimeEpoch *)v46;
  if (v46 != v45)
  {
    CMTime v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      CMTime v44 = 0;
      OZSpline::getNextValidVertex((void ***)a1, v15, &v44, v16);
      v43.CMTimeEpoch epoch = 0;
      *(_OWORD *)&v43.CMTimeValue value = 0uLL;
      long long v17 = *((_OWORD *)v15 + 1);
      v43.CMTimeEpoch epoch = v15[4];
      *(_OWORD *)&v43.CMTimeValue value = v17;
      v42.CMTimeEpoch epoch = 0;
      *(_OWORD *)&v42.CMTimeValue value = 0uLL;
      long long v18 = *((_OWORD *)v44 + 1);
      v42.CMTimeEpoch epoch = *((void *)v44 + 4);
      *(_OWORD *)&v42.CMTimeValue value = v18;
      CMTime time1 = v49;
      *(_OWORD *)&time2.CMTimeValue value = v18;
      time2.CMTimeEpoch epoch = v42.epoch;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTime time1 = v49;
        CMTime time2 = v43;
        if (CMTimeCompare(&time1, &time2) >= 1) {
          CMTime v43 = v49;
        }
      }
      CMTime time1 = v48;
      CMTime time2 = v42;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTime time1 = v48;
        CMTime time2 = v43;
        if (CMTimeCompare(&time1, &time2) >= 1) {
          CMTime v42 = v48;
        }
      }
      int v19 = (*(uint64_t (**)(CMTimeEpoch *))(*v15 + 208))(v15);
      uint64_t Interpolator = OZInterpolators::getInterpolator(*(OZInterpolators **)(a1 + 152), v19);
      (*(void (**)(uint64_t, uint64_t, CMTimeEpoch *, void *, CMTime *, CMTime *, CMTime *, double))(*(void *)Interpolator + 96))(Interpolator, a1, v15, v44, &v43, &v42, a2, a6);
      double v15 = (CMTimeEpoch *)v44;
    }
    while (v44 != v45);
  }
  CMTimeValue value = a2->value;
  if (a5 == 1)
  {
    memset(&time1, 0, sizeof(time1));
    unsigned int v22 = -1431655765 * ((unint64_t)(*(void *)&a2->timescale - value) >> 3) - 1;
    if ((v22 & 0x80000000) != 0)
    {
      double v37 = 0;
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v23 = 0;
      do
      {
        uint64_t v24 = a2->value + 24 * v22;
        if (v23 >= time1.epoch)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - time1.value) >> 3);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((time1.epoch - time1.value) >> 3) > v27) {
            unint64_t v27 = 0x5555555555555556 * ((time1.epoch - time1.value) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((time1.epoch - time1.value) >> 3) >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            CMTime v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&time1.epoch, v28);
          }
          else {
            CMTime v29 = 0;
          }
          CMTime v30 = &v29[24 * v26];
          long long v31 = *(_OWORD *)v24;
          *((void *)v30 + PCSpinLock::lock(this + 2) = *(void *)(v24 + 16);
          *(_OWORD *)CMTime v30 = v31;
          CMTimeValue v33 = time1.value;
          double v32 = *(char **)&time1.timescale;
          CMTimeValue v34 = (CMTimeValue)v30;
          if (*(void *)&time1.timescale != time1.value)
          {
            do
            {
              long long v35 = *(_OWORD *)(v32 - 24);
              *(void *)(v34 - OZSpline::reparametrize((uint64_t)this + 8) = *((void *)v32 - 1);
              *(_OWORD *)(v34 - 24) = v35;
              v34 -= 24;
              v32 -= 24;
            }
            while (v32 != (char *)v33);
            double v32 = (char *)time1.value;
          }
          unint64_t v23 = (unint64_t)(v30 + 24);
          time1.CMTimeValue value = v34;
          *(void *)&time1.int32_t timescale = v30 + 24;
          time1.CMTimeEpoch epoch = (CMTimeEpoch)&v29[24 * v28];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          long long v25 = *(_OWORD *)v24;
          *(void *)(v23 + 16) = *(void *)(v24 + 16);
          *(_OWORD *)unint64_t v23 = v25;
          v23 += 24;
        }
        *(void *)&time1.int32_t timescale = v23;
      }
      while ((int)v22-- > 0);
      double v37 = (char *)time1.value;
    }
    if (&time1 != a2)
    {
      std::vector<CMTime>::__assign_with_size[abi:ne180100]<CMTime*,CMTime*>((char *)a2, v37, v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v37) >> 3));
      double v37 = (char *)time1.value;
    }
    if (v37)
    {
      *(void *)&time1.int32_t timescale = v37;
      operator delete(v37);
    }
    CMTimeValue value = a2->value;
  }
  uint64_t v38 = *(void *)(a1 + 160);
  if (!v38 || (double v39 = *(os_unfair_lock_s **)(v38 + 48)) == 0) {
    double v39 = (os_unfair_lock_s *)(a1 + 8);
  }
  BOOL v40 = value != *(void *)&a2->timescale;
  PCSpinLock::unlock(v39);
  return v40;
}

void sub_1B79BBDEC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OZSpline::purge(OZSpline *this)
{
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v2 = *((void *)this + 5);
  CMTime v21 = 0;
  unsigned int v22 = 0;
  unint64_t v23 = 0;
  uint64_t v3 = *((void *)this + 20);
  if (!v3 || (uint64_t v4 = *(os_unfair_lock_s **)(v3 + 48)) == 0) {
    uint64_t v4 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v4);
  for (; v2 != *((void *)this + 6); v2 += 8)
  {
    long long v5 = *(_OWORD *)(*(void *)v2 + 16);
    CMTimeEpoch v20 = *(void *)(*(void *)v2 + 32);
    CMTime time1 = v24;
    *(_OWORD *)&time2.CMTimeValue value = v5;
    time2.CMTimeEpoch epoch = v20;
    if (CMTimeCompare(&time1, &time2) || v2 == *((void *)this + 5))
    {
      CMTime v24 = *(CMTime *)(*(void *)v2 + 16);
    }
    else
    {
      if (v22 >= v23)
      {
        uint64_t v7 = (v22 - v21) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = (v23 - v21) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9) {
          uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v23, v9);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = &v10[8 * v7];
        *(void *)uint64_t v11 = *(void *)v2;
        uint64_t v6 = v11 + 8;
        uint64_t v12 = v22;
        if (v22 != v21)
        {
          do
          {
            uint64_t v13 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v11 - atomic_store(0, (unint64_t *)this + 1) = v13;
            v11 -= 8;
          }
          while (v12 != v21);
          uint64_t v12 = v21;
        }
        CMTime v21 = v11;
        unint64_t v23 = &v10[8 * v9];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(void *)unsigned int v22 = *(void *)v2;
        uint64_t v6 = v22 + 8;
      }
      unsigned int v22 = v6;
    }
  }
  uint64_t v14 = *((void *)this + 20);
  if (!v14 || (double v15 = *(os_unfair_lock_s **)(v14 + 48)) == 0) {
    double v15 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v15);
  CMTime v16 = v22;
  if (v22 != v21)
  {
    unint64_t v17 = 0;
    unsigned int v18 = 1;
    uint64_t v19 = MEMORY[0x1E4F1FA48];
    CMTime v16 = v21;
    do
    {
      (*(void (**)(OZSpline *, void, void, uint64_t))(*(void *)this + 32))(this, *(void *)&v16[8 * v17], 0, v19);
      unint64_t v17 = v18;
      CMTime v16 = v21;
      ++v18;
    }
    while (v17 < (v22 - v21) >> 3);
  }
  if (v16) {
    operator delete(v16);
  }
}

void sub_1B79BC054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZSpline::setVertexSmooth(OZSpline *this, void *a2, int a3, const CMTime *a4)
{
  char v5 = a3;
  if (a3) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 1;
  }
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 200))(a2, v8);
  if (v5)
  {
    (*(void (**)(OZSpline *, void *, void, void))(*(void *)this + 304))(this, a2, MEMORY[0x1E4F1FA48], 0);
  }
  else
  {
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 72))(a2, a4, 0.0, 0.0);
    (*(void (**)(void *, const CMTime *, double, double))(*(void *)a2 + 80))(a2, a4, 0.0, 0.0);
  }
  return 1;
}

void OZSpline::scaleSpline(OZSpline *this, double a2, double a3, double a4, const CMTime *a5)
{
  uint64_t v10 = *((void *)this + 20);
  if (!v10 || (uint64_t v11 = *(os_unfair_lock_s **)(v10 + 48)) == 0) {
    uint64_t v11 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v11);
  double v21 = 0.0;
  double v22 = 0.0;
  if (*((void *)this + 2) != *((void *)this + 3))
  {
    for (int32_t i = (void *)*((void *)this + 5); i != *((void **)this + 6); ++i)
    {
      double v13 = (*(double (**)(void, const CMTime *))(*(void *)*i + 24))(*i, a5);
      (*(void (**)(void, double *, double *, const CMTime *))(*(void *)*i + 56))(*i, &v22, &v22, a5);
      (*(void (**)(void, double *, double *, const CMTime *))(*(void *)*i + 64))(*i, &v21, &v21, a5);
      double v14 = v13 * a2;
      double v15 = (v13 + v22) * a2;
      double v16 = (v13 + v21) * a2;
      if (v13 * a2 > a4) {
        double v14 = a4;
      }
      if (v14 >= a3) {
        double v17 = v14;
      }
      else {
        double v17 = a3;
      }
      if (v15 > a4) {
        double v15 = a4;
      }
      if (v15 < a3) {
        double v15 = a3;
      }
      if (v16 > a4) {
        double v16 = a4;
      }
      if (v16 < a3) {
        double v16 = a3;
      }
      double v21 = v16 - v17;
      double v22 = v15 - v17;
      (*(void (**)(void, const CMTime *, double, double))(*(void *)*i + 72))(*i, a5, v15 - v17, v15 - v17);
      (*(void (**)(void, const CMTime *, double, double))(*(void *)*i + 80))(*i, a5, v21, v21);
      uint64_t v18 = *i;
      (*(void (**)(uint64_t, const CMTime *, double))(*(void *)v18 + 32))(v18, a5, v17);
    }
  }
  uint64_t v19 = *((void *)this + 20);
  if (!v19 || (CMTimeEpoch v20 = *(os_unfair_lock_s **)(v19 + 48)) == 0) {
    CMTimeEpoch v20 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v20);
}

uint64_t OZSpline::offsetVertexInTime(OZSpline *this, void *a2, const CMTime *a3, const CMTime *a4)
{
  if (a2) {
    return (*(uint64_t (**)(void *, const CMTime *))(*(void *)a2 + 16))(a2, a3);
  }
  return result;
}

BOOL OZSpline::hasInterpolation(OZSpline *this, int a2)
{
  if (*((void *)this + 2) == *((void *)this + 3)) {
    return *(_DWORD *)(*((void *)this + 21) + 32) == a2;
  }
  uint64_t v4 = (uint64_t *)(*((void *)this + 5) + 8);
  do
  {
    char v5 = (uint64_t *)*((void *)this + 6);
    BOOL v6 = v4 != v5;
    if (v4 == v5) {
      break;
    }
    uint64_t v7 = *v4++;
  }
  while ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 208))(v7) != a2);
  return v6;
}

void OZSpline::generateSplineFromDynamicSpline(OZSpline *this, const CMTime *a2, OZDynamicSpline *a3)
{
  uint64_t v11 = 0;
  OZSpline::deleteAllVertices(this);
  uint64_t v6 = *((void *)this + 20);
  if (!v6 || (uint64_t v7 = *(os_unfair_lock_s **)(v6 + 48)) == 0) {
    uint64_t v7 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::lock(v7);
  unsigned int NumberOfValidVertices = OZSpline::getNumberOfValidVertices(a3, a2);
  std::vector<void *>::reserve((void **)this + 2, NumberOfValidVertices);
  if (OZSpline::getFirstValidVertex(a3, &v11, a2)) {
    operator new();
  }
  *((unsigned char *)this + 145) = 1;
  *(_OWORD *)((char *)this + 4OZSplineNode::allocOZSpline(this, 0) = *((_OWORD *)this + 1);
  OZSpline::refreshValidVerticesList(this);
  *((unsigned char *)this + 144) = *((unsigned char *)a3 + 144);
  uint64_t v9 = *((void *)this + 20);
  if (!v9 || (uint64_t v10 = *(os_unfair_lock_s **)(v9 + 48)) == 0) {
    uint64_t v10 = (os_unfair_lock_s *)((char *)this + 8);
  }
  PCSpinLock::unlock(v10);
}

void sub_1B79BC748(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CMTime,std::pair<double,unsigned int>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

char *std::vector<OZVertex *>::__insert_with_size[abi:ne180100]<std::__list_iterator<OZStaticVertex *,void *>,std::__list_iterator<OZStaticVertex *,void *>>(uint64_t a1, char *__src, void *a3, void *a4, uint64_t a5)
{
  char v5 = __src;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    uint64_t v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      CMTimeEpoch v20 = a3;
      do
      {
        CMTimeEpoch v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (v12 - __src) >> 3;
      if (v21 >= a5)
      {
        unint64_t v23 = *(char **)(v9 - 8);
        uint64_t v21 = a5;
      }
      else
      {
        if (v12 - __src <= -8)
        {
          uint64_t v27 = (v12 - __src) >> 3;
          CMTimeEpoch v20 = a3;
          do
            CMTimeEpoch v20 = (void *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          CMTimeEpoch v20 = a3;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          CMTimeEpoch v20 = a3;
          do
          {
            CMTimeEpoch v20 = (void *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        unint64_t v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          CMTime v29 = v20;
          CMTime v30 = *(void **)(v9 - 8);
          do
          {
            *v30++ = v29[2];
            CMTime v29 = (void *)v29[1];
            v23 += 8;
          }
          while (v29 != a4);
        }
        *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v23;
      }
      if (v21 >= 1)
      {
        long long v31 = &__src[8 * a5];
        double v32 = &v23[-8 * a5];
        CMTimeValue v33 = v23;
        if (v32 < v12)
        {
          CMTimeValue v33 = v23;
          do
          {
            uint64_t v34 = *(void *)v32;
            v32 += 8;
            *(void *)CMTimeValue v33 = v34;
            v33 += 8;
          }
          while (v32 < v12);
        }
        *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v33;
        if (v23 != v31) {
          memmove(&v23[-8 * ((v23 - v31) >> 3)], __src, v23 - v31);
        }
        if (v20 != v7)
        {
          long long v35 = v5;
          do
          {
            *(void *)long long v35 = v7[2];
            v35 += 8;
            uint64_t v7 = (void *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      double v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)&v12[-*(void *)a1] >> 3);
      if (v14 >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (__src - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v41 = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      CMTime v24 = &v18[8 * v15];
      CMTime __p = v18;
      uint64_t v38 = v24;
      BOOL v40 = &v18[8 * v17];
      uint64_t v25 = 8 * a5;
      unint64_t v26 = &v24[8 * a5];
      do
      {
        *(void *)CMTime v24 = v7[2];
        v24 += 8;
        uint64_t v7 = (void *)v7[1];
        v25 -= 8;
      }
      while (v25);
      double v39 = v26;
      char v5 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38) {
        v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1B79BCA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CMTime>::__assign_with_size[abi:ne180100]<CMTime*,CMTime*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + atomic_store(0, (unint64_t *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    double v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v13 = &v9[v17];
  return result;
}

void OZDynamicVertex::OZDynamicVertex(OZDynamicVertex *this, const CMTime *a2, double a3, const CMTime *a4)
{
  OZVertex::OZVertex(this, a2);
  *(void *)uint64_t v6 = &unk_1F1105898;
  uint64_t v7 = (TXParagraphStyleFolder_Factory *)((char *)v6 + 48);
  TXParagraphStyleFolder_Factory::createInstance(v6, v8);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex");
  unsigned int v9 = OZDynamicVertex::_id++;
  OZChannelVertexFolder::OZChannelVertexFolder(v7, &v34, 0, v9, 0x10000u);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex Enabled");
  uint64_t Instance = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(v12);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 184), 1, &v34, (OZChannelFolder *)v7, 1u, 0x10000u, Instance, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex Value");
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 336), a3, &v34, (OZChannelFolder *)v7, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex Bias");
  unint64_t v19 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 488), 1.0, &v34, (OZChannelFolder *)v7, 3u, 0x10000, v19, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v20, v21);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex Input Tangent");
  unint64_t v23 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(v22);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 640), 0.0, &v34, (OZChannelFolder *)v7, 4u, 0x10000, v23, 0);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v24, v25);
  PCURL::PCURL((PCURL *)&v34, @"Dynamic Vertex Output Tangent");
  uint64_t v27 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZDynamicVertex *)((char *)this + 792), 0.0, &v34, (OZChannelFolder *)v7, 5u, 0x10000, v27, 0);
  PCString::~PCString(&v34);
  *((_DWORD *)this + 2) |= 8u;
  *((_DWORD *)this + 3) = 4;
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 184));
  OZChannel::setShouldCreateTangents((OZChannel *)((char *)this + 336), 0);
  unint64_t v28 = OZChannelBase::setFlag((OZChannelBase *)this + 3, 0x100000000, 1);
  CMTime v29 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance((OZDynamicVertex::OZDynamicVertex_biasImpl *)v28);
  OZChannelImpl::setShouldCreateTangents(v29);
  CMTime v30 = OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 488));
  long long v31 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance((OZDynamicVertex::OZDynamicVertex_tanInVImpl *)v30);
  OZChannelImpl::setShouldCreateTangents(v31);
  double v32 = OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 640));
  CMTimeValue v33 = (OZChannelImpl *)OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance((OZDynamicVertex::OZDynamicVertex_tanOutVImpl *)v32);
  OZChannelImpl::setShouldCreateTangents(v33);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 792));
  OZChannelFolder::finishInitializing((OZChannelFolder *)v7);
}

void sub_1B79BCE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannelBase::setRangeName(v10, v14);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex(OZDynamicVertex *this, const OZDynamicVertex *a2)
{
  uint64_t v2 = a2;
  OZVertex::OZVertex(this, a2);
  void *v4 = &unk_1F1105898;
  char v5 = (OZChannelFolder *)(v4 + 6);
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelVertexFolder *)(v4 + 6), (const OZDynamicVertex *)((char *)v2 + 48), 0);
  uint64_t v6 = (const OZChannelBase *)((char *)v2 + 184);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 184), (const OZChannelBase *)((char *)v2 + 184), v5);
  uint64_t v7 = (const OZChannelBase *)((char *)v2 + 336);
  OZChannel::OZChannel((OZChannel *)((char *)this + 336), (const OZChannelBase *)v2 + 3, v5);
  *((void *)this + 4PCSpinLock::lock(this + 2) = &unk_1F1100CF0;
  *((void *)this + 44) = &unk_1F1101050;
  uint64_t v8 = (const OZChannelBase *)((char *)v2 + 488);
  OZChannel::OZChannel((OZChannel *)((char *)this + 488), (const OZChannelBase *)((char *)v2 + 488), v5);
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = &unk_1F1100CF0;
  *((void *)this + 63) = &unk_1F1101050;
  unsigned int v9 = (const OZChannelBase *)((char *)v2 + 640);
  OZChannel::OZChannel((OZChannel *)((char *)this + 640), (const OZChannelBase *)((char *)v2 + 640), v5);
  *((void *)this + 8OZSplineNode::allocOZSpline(this, 0) = &unk_1F1100CF0;
  *((void *)this + 8PCSpinLock::lock(this + 2) = &unk_1F1101050;
  uint64_t v2 = (const OZDynamicVertex *)((char *)v2 + 792);
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)v2, v5);
  *((void *)this + 99) = &unk_1F1100CF0;
  *((void *)this + 10atomic_store(0, (unint64_t *)this + 1) = &unk_1F1101050;
  OZChannel::copy((OZChannel *)((char *)this + 184), v6, 1);
  OZChannel::copy((OZChannel *)((char *)this + 336), v7, 1);
  OZChannel::copy((OZChannel *)((char *)this + 488), v8, 1);
  OZChannel::copy((OZChannel *)((char *)this + 640), v9, 1);
  OZChannel::copy((OZChannel *)((char *)this + 792), (const OZChannelBase *)v2, 1);
}

void sub_1B79BD150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannelBool *a10)
{
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannelBase::setRangeName(v10, v15);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::~OZDynamicVertex(OZDynamicVertex *this)
{
  *(void *)this = &unk_1F1105898;
  uint64_t v2 = (OZDynamicVertex *)((char *)this + 48);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 336));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 184));
  OZChannelVertexFolder::~OZChannelVertexFolder(v2);

  OZChannelBase::setRangeName((OZChannelBase *)this, v3);
}

{
  uint64_t vars8;

  OZDynamicVertex::~OZDynamicVertex(this);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZDynamicVertex::isEqual(OZDynamicVertex *this, const OZVertex *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  return OZVertex::isEqual(this, lpsrc)
      && (*(unsigned int (**)(char *, uint64_t))(*((void *)this + 23) + 240))((char *)this + 184, (uint64_t)v4 + 184)&& (*(unsigned int (**)(char *, uint64_t))(*((void *)this + 42) + 240))((char *)this + 336, (uint64_t)v4 + 336)&& (*(unsigned int (**)(char *, uint64_t))(*((void *)this + 80) + 240))((char *)this + 640, (uint64_t)v4 + 640)&& ((*(uint64_t (**)(char *, uint64_t))(*((void *)this + 99) + 240))((char *)this + 792, (uint64_t)v4 + 792) & 1) != 0;
}

void OZDynamicVertex::getValueV(OZDynamicVertex *this, const CMTime *a2)
{
}

uint64_t OZDynamicVertex::setValueV(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(unsigned char *)(this + 8) & 2) == 0) {
    return OZChannel::setValueOffsetByBehaviors((OZChannel *)(this + 336), a3, a2);
  }
  return this;
}

uint64_t OZDynamicVertex::setBias(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(unsigned char *)(this + 8) & 2) == 0)
  {
    if (*(_DWORD *)(this + 12) != 10 && a2 > 1.0) {
      a2 = 1.0;
    }
    return OZChannel::setValueOffsetByBehaviors((OZChannel *)(this + 488), a3, a2);
  }
  return this;
}

void OZDynamicVertex::getBias(OZDynamicVertex *this, const CMTime *a2)
{
}

void OZDynamicVertex::getInputTangents(OZDynamicVertex *this, double *a2, double *a3, const CMTime *a4)
{
  if (a2) {
    *a2 = 0.0;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 640), a4, 0.0);
    *(void *)a3 = v5;
  }
}

void OZDynamicVertex::getOutputTangents(OZDynamicVertex *this, double *a2, double *a3, const CMTime *a4)
{
  if (a2) {
    *a2 = 0.0;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), a4, 0.0);
    *(void *)a3 = v5;
  }
}

unsigned char *OZDynamicVertex::setInputTangents(unsigned char *this, double a2, double a3, const CMTime *a4)
{
  if ((this[8] & 2) == 0)
  {
    uint64_t v6 = this;
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void, double))(*(void *)this + 136))(this, MEMORY[0x1E4F1FA48], a2);
    if (this)
    {
      return (unsigned char *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v6 + 640), a4, a3);
    }
  }
  return this;
}

unsigned char *OZDynamicVertex::setOutputTangents(unsigned char *this, double a2, double a3, const CMTime *a4)
{
  if ((this[8] & 2) == 0)
  {
    uint64_t v6 = this;
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void, double))(*(void *)this + 136))(this, MEMORY[0x1E4F1FA48], a2);
    if (this)
    {
      return (unsigned char *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v6 + 792), a4, a3);
    }
  }
  return this;
}

unsigned char *OZDynamicVertex::flattenTangents(unsigned char *this, const CMTime *a2)
{
  if ((this[8] & 2) == 0)
  {
    uint64_t v3 = this;
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)this + 136))(this, MEMORY[0x1E4F1FA48]);
    if (this)
    {
      (*(void (**)(unsigned char *, uint64_t))(*(void *)v3 + 160))(v3, 1);
      OZChannel::setValueOffsetByBehaviors((OZChannel *)(v3 + 640), a2, 0.0);
      return (unsigned char *)OZChannel::setValueOffsetByBehaviors((OZChannel *)(v3 + 792), a2, 0.0);
    }
  }
  return this;
}

unsigned char *OZDynamicVertex::resetTangents(unsigned char *this)
{
  if ((this[8] & 2) == 0)
  {
    uint64_t v1 = this;
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)this + 136))(this, MEMORY[0x1E4F1FA48]);
    if (this)
    {
      (*(void (**)(unsigned char *, uint64_t))(*(void *)v1 + 160))(v1, 1);
      OZChannel::setDefaultValue((OZChannel *)(v1 + 640), 0.0);
      OZChannel::setKeyframesValue((OZChannel *)(v1 + 640), 0.0);
      uint64_t v2 = (OZChannel *)(v1 + 792);
      OZChannel::setDefaultValue(v2, 0.0);
      return (unsigned char *)OZChannel::setKeyframesValue(v2, 0.0);
    }
  }
  return this;
}

uint64_t OZDynamicVertex::setEnabled(OZDynamicVertex *this, unsigned int a2, const CMTime *a3)
{
  return OZChannel::setValueOffsetByBehaviors((OZChannel *)((char *)this + 184), a3, (double)a2);
}

BOOL OZDynamicVertex::isEnabled(OZDynamicVertex *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 184), a2, 0.0) != 0;
}

void OZDynamicVertex::setChannel(OZDynamicVertex *this, OZChannelVertexFolder *a2)
{
  uint64_t v4 = (char *)this + 48;
  OZChannelFolder::operator=((uint64_t)this + 48);
  *((void *)this + 2PCSpinLock::lock(this + 2) = *((void *)a2 + 16);
  Descendant = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 52));
  OZChannel::copy((OZChannel *)((char *)this + 184), Descendant, 0);
  *((void *)this + 29) = v4;
  uint64_t v6 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 90));
  OZChannel::copy((OZChannel *)((char *)this + 336), v6, 0);
  *((void *)this + 4OZSpline::reparametrize((uint64_t)this + 8) = v4;
  uint64_t v7 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 128));
  OZChannel::copy((OZChannel *)((char *)this + 488), v7, 0);
  *((void *)this + 67) = v4;
  uint64_t v8 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 166));
  OZChannel::copy((OZChannel *)((char *)this + 640), v8, 0);
  *((void *)this + 86) = v4;
  unsigned int v9 = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)a2, *((_DWORD *)this + 204));
  OZChannel::copy((OZChannel *)((char *)this + 792), v9, 0);
  *((void *)this + 105) = v4;
}

void OZDynamicVertex::swapTangents(OZChannelBase *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (OZChannelBase *)((char *)this + 640);
  OZChannel::OZChannel(&v8, (OZChannelBase *)((char *)this + 640), 0);
  v8.var0 = (void **)&unk_1F1100CF0;
  v8.var2 = (void **)&unk_1F1101050;
  uint64_t v1 = (OZChannelBase *)((char *)v1 + 792);
  OZChannelBase::operator=((uint64_t)v2, (uint64_t)v1);
  uint64_t v3 = (TXParagraphStyleFolder_Factory *)OZChannelBase::operator=((uint64_t)v1, (uint64_t)&v8);
  TXParagraphStyleFolder_Factory::createInstance(v3, v4);
  PCURL::PCURL((PCURL *)&v7, @"Dynamic Vertex Input Tangent");
  OZChannelBase::setName(v2, &v7, 0);
  PCString::~PCString(&v7);
  uint64_t v5 = OZChannelBase::setID(v2, 4u);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v5, v6);
  PCURL::PCURL((PCURL *)&v7, @"Dynamic Vertex Output Tangent");
  OZChannelBase::setName(v1, &v7, 0);
  PCString::~PCString(&v7);
  OZChannelBase::setID(v1, 5u);
  OZChannel::~OZChannel(&v8);
}

void sub_1B79BD9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10)
{
}

BOOL OZDynamicVertex::isFlat(OZChannel *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (OZChannel *)((char *)this + 640);
  double KeyframeMinValue = OZChannel::getKeyframeMinValue((OZChannel *)((char *)this + 640), 0);
  double KeyframeMaxValue = OZChannel::getKeyframeMaxValue(v2, 0);
  uint64_t v1 = (OZChannel *)((char *)v1 + 792);
  double v5 = OZChannel::getKeyframeMinValue(v1, 0);
  double v6 = OZChannel::getKeyframeMaxValue(v1, 0);
  BOOL result = 0;
  if (vabdd_f64(v6, v5) < 0.0000001)
  {
    BOOL v8 = fabs(v6) < 0.0000001;
    double v9 = fabs(KeyframeMaxValue);
    if (vabdd_f64(KeyframeMaxValue, KeyframeMinValue) >= 0.0000001) {
      BOOL v8 = 0;
    }
    return v9 < 0.0000001 && v8;
  }
  return result;
}

uint64_t OZDynamicVertex::setDefaultAtCurrentTime(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 184), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 336), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 488), a2);
  OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 640), a2);

  return OZChannel::setDefaultAtCurrentTime((OZChannel *)((char *)this + 792), a2);
}

void OZDynamicVertex::updateBias(OZDynamicVertex *this)
{
  double v10 = 0.0;
  uint64_t v1 = (OZChannel *)((char *)this + 488);
  OZChannel::getKeyframes((OZChannel *)((char *)this + 488), 0, &v8);
  uint64_t v2 = v8;
  if (v9 == v8)
  {
    OZChannel::getValueAsDouble(v1, MEMORY[0x1E4F1FA48], 0.0);
    double v10 = v6;
    double v10 = OZBSplineInterpolator::convertBSplineBiasToLinear(v7, v6);
    OZChannel::setValueOffsetByBehaviors(v1, MEMORY[0x1E4F1FA48], v10);
    uint64_t v2 = v8;
    if (!v8) {
      return;
    }
    goto LABEL_5;
  }
  unint64_t v3 = 0;
  unsigned int v4 = 1;
  do
  {
    Keyframe = (OZBSplineInterpolator *)OZChannel::getKeyframe(v1, v2[v3], 0, &v10);
    double v10 = OZBSplineInterpolator::convertBSplineBiasToLinear(Keyframe, v10);
    OZChannel::setKeyframeValue(v1, v8[v3], v10);
    unint64_t v3 = v4;
    uint64_t v2 = v8;
    ++v4;
  }
  while (v3 < v9 - v8);
  if (v8)
  {
LABEL_5:
    double v9 = v2;
    operator delete(v2);
  }
}

void sub_1B79BDBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZDynamicVertex::enableBehavior(OZDynamicVertex *this, char a2)
{
  unint64_t v3 = (OZChannelBase *)((char *)this + 336);
  unsigned int v4 = (OZChannelBase *)((char *)this + 640);
  double v5 = (OZChannelBase *)((char *)this + 792);
  if (a2)
  {
    OZChannelBase::resetFlag(v3, 0x80000000, 0);
    OZChannelBase::resetFlag(v4, 0x80000000, 0);
    return OZChannelBase::resetFlag(v5, 0x80000000, 0);
  }
  else
  {
    OZChannelBase::setFlag(v3, 0x80000000, 0);
    OZChannelBase::setFlag(v4, 0x80000000, 0);
    return OZChannelBase::setFlag(v5, 0x80000000, 0);
  }
}

BOOL OZDynamicVertex::enabledBehavior(OZChannelBase *this)
{
  return !OZChannelBase::testFlag(this + 3, 0x80000000);
}

uint64_t OZDynamicVertex::offsetVertexInTime(OZDynamicVertex *this, const CMTime *a2)
{
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 184), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 336), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 488), 1.0, a2);
  OZChannel::linearTimeWarp((OZChannel *)((char *)this + 640), 1.0, a2);

  return OZChannel::linearTimeWarp((OZChannel *)((char *)this + 792), 1.0, a2);
}

uint64_t OZVertex::setFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) |= a2;
  return this;
}

uint64_t OZVertex::resetFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) &= ~a2;
  return this;
}

BOOL OZVertex::testFlag(OZVertex *this, int a2)
{
  return (*((_DWORD *)this + 2) & a2) != 0;
}

void OZDynamicVertex::clone(OZDynamicVertex *this)
{
}

void sub_1B79BDDDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40974A25EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(OZDynamicVertex::OZDynamicVertex_enabledImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::OZDynamicVertex_enabledImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::OZDynamicVertex_enabledImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_enabledImpl::_OZDynamicVertex_enabled;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_enabledImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZDynamicVertex::OZDynamicVertex_enabledImpl::_OZDynamicVertex_enabled) {
    operator new();
  }
}

void sub_1B79BDEB8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex_enabledImpl::OZDynamicVertex_enabledImpl(OZChannelBool *this)
{
}

void sub_1B79BDF88(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(OZDynamicVertex::OZDynamicVertex_biasImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::OZDynamicVertex_biasImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::OZDynamicVertex_biasImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_biasImpl::_OZDynamicVertex_bias;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_biasImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZDynamicVertex::OZDynamicVertex_biasImpl::_OZDynamicVertex_bias) {
    operator new();
  }
}

void sub_1B79BE064(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex_biasImpl::OZDynamicVertex_biasImpl(OZDynamicVertex::OZDynamicVertex_biasImpl *this)
{
}

void sub_1B79BE13C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(OZDynamicVertex::OZDynamicVertex_tanInVImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::OZDynamicVertex_tanInVImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::OZDynamicVertex_tanInVImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_tanInVImpl::_OZDynamicVertex_tanInV;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_tanInVImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZDynamicVertex::OZDynamicVertex_tanInVImpl::_OZDynamicVertex_tanInV) {
    operator new();
  }
}

void sub_1B79BE218(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex_tanInVImpl::OZDynamicVertex_tanInVImpl(OZDynamicVertex::OZDynamicVertex_tanInVImpl *this)
{
}

void sub_1B79BE2F0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(OZDynamicVertex::OZDynamicVertex_tanOutVImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::OZDynamicVertex_tanOutVImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::OZDynamicVertex_tanOutVImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDynamicVertex::OZDynamicVertex_tanOutVImpl::_OZDynamicVertex_tanOutV;
}

void std::__call_once_param<std::tuple<OZDynamicVertex::OZDynamicVertex_tanOutVImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZDynamicVertex::OZDynamicVertex_tanOutVImpl::_OZDynamicVertex_tanOutV) {
    operator new();
  }
}

void sub_1B79BE3CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZDynamicVertex::OZDynamicVertex_tanOutVImpl::OZDynamicVertex_tanOutVImpl(OZDynamicVertex::OZDynamicVertex_tanOutVImpl *this)
{
}

void sub_1B79BE4A4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, const CMTime *a2, double a3)
{
  OZVertex::OZVertex(this, a2);
  *(void *)uint64_t v4 = &unk_1F1105BA8;
  *(unsigned char *)(v4 + 4OZSpline::reparametrize((uint64_t)this + 8) = 1;
  *(double *)(v4 + 56) = a3;
  *(void *)(v4 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 7PCSpinLock::lock(this + 2) = 0u;
  *(_OWORD *)(v4 + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, OZDynamicVertex *a2, const CMTime *a3)
{
  CMTime v7 = *(CMTime *)((char *)a2 + 16);
  OZVertex::OZVertex(this, &v7);
  *(void *)uint64_t v6 = &unk_1F1105BA8;
  *(unsigned char *)(v6 + 4OZSpline::reparametrize((uint64_t)this + 8) = 1;
  *((double *)this + 7) = (*(double (**)(OZDynamicVertex *, const CMTime *))(*(void *)a2 + 24))(a2, a3);
  *((double *)this + OZSpline::reparametrize((uint64_t)this + 8) = (*(double (**)(OZDynamicVertex *, const CMTime *))(*(void *)a2 + 40))(a2, a3);
  (*(void (**)(OZDynamicVertex *, char *, char *, const CMTime *))(*(void *)a2 + 56))(a2, (char *)this + 72, (char *)this + 88, a3);
  (*(void (**)(OZDynamicVertex *, char *, char *, const CMTime *))(*(void *)a2 + 64))(a2, (char *)this + 80, (char *)this + 96, a3);
  *((_DWORD *)this + 3) = (*(uint64_t (**)(OZDynamicVertex *))(*(void *)a2 + 208))(a2);
}

void sub_1B79BE694(_Unwind_Exception *a1, const PCString *a2)
{
  OZChannelBase::setRangeName(v2, a2);
  _Unwind_Resume(a1);
}

void OZStaticVertex::OZStaticVertex(OZStaticVertex *this, const OZStaticVertex *a2)
{
  OZVertex::OZVertex(this, a2);
  *(void *)uint64_t v3 = &unk_1F1105BA8;
  *(unsigned char *)(v3 + 4OZSpline::reparametrize((uint64_t)this + 8) = *((unsigned char *)a2 + 48);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(void *)(v3 + 8OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 11);
  *(_OWORD *)(v3 + 7PCSpinLock::lock(this + 2) = *(_OWORD *)((char *)a2 + 72);
  *(void *)(v3 + 96) = *((void *)a2 + 12);
}

void OZStaticVertex::~OZStaticVertex(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZStaticVertex::isEqual(OZStaticVertex *this, const OZVertex *lpsrc)
{
  BOOL result = 0;
  if (lpsrc)
  {
    if (v4)
    {
      double v5 = v4;
      if (OZVertex::isEqual(this, lpsrc)
        && *((unsigned __int8 *)this + 48) == *((unsigned __int8 *)v5 + 48)
        && *((double *)this + 7) == v5[7]
        && *((double *)this + 8) == v5[8]
        && *((double *)this + 9) == v5[9]
        && *((double *)this + 11) == v5[11]
        && *((double *)this + 10) == v5[10]
        && *((double *)this + 12) == v5[12])
      {
        return 1;
      }
    }
  }
  return result;
}

double OZStaticVertex::getValue(OZStaticVertex *this, CMTime *a2, double *a3, const CMTime *a4)
{
  if (a2)
  {
    long long v4 = *((_OWORD *)this + 1);
    a2->CMTimeEpoch epoch = *((void *)this + 4);
    *(_OWORD *)&a2->CMTimeValue value = v4;
  }
  if (a3)
  {
    *(void *)&long long v4 = *((void *)this + 7);
    *(void *)a3 = v4;
  }
  return *(double *)&v4;
}

uint64_t OZStaticVertex::setValueV(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(unsigned char *)(this + 8) & 2) == 0) {
    *(double *)(this + 56) = a2;
  }
  return this;
}

uint64_t OZStaticVertex::setBias(uint64_t this, double a2, const CMTime *a3)
{
  if ((*(unsigned char *)(this + 8) & 2) == 0) {
    *(double *)(this + 64) = a2;
  }
  return this;
}

double OZStaticVertex::getInputTangents(OZStaticVertex *this, double *a2, double *a3, const CMTime *a4)
{
  if (a2)
  {
    double result = *((double *)this + 9);
    *a2 = result;
  }
  if (a3)
  {
    double result = *((double *)this + 11);
    *a3 = result;
  }
  return result;
}

double OZStaticVertex::getOutputTangents(OZStaticVertex *this, double *a2, double *a3, const CMTime *a4)
{
  if (a2)
  {
    double result = *((double *)this + 10);
    *a2 = result;
  }
  if (a3)
  {
    double result = *((double *)this + 12);
    *a3 = result;
  }
  return result;
}

uint64_t OZStaticVertex::setInputTangents(uint64_t this, double a2, double a3, const CMTime *a4)
{
  if (a2 > 0.0) {
    a2 = 0.0;
  }
  if ((*(unsigned char *)(this + 8) & 2) == 0)
  {
    if (*(unsigned char *)(this + 48))
    {
      *(double *)(this + 7PCSpinLock::lock(this + 2) = a2;
      *(double *)(this + 8OZSpline::reparametrize((uint64_t)this + 8) = a3;
    }
  }
  return this;
}

uint64_t OZStaticVertex::setOutputTangents(uint64_t this, double a2, double a3, const CMTime *a4)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if ((*(unsigned char *)(this + 8) & 2) == 0)
  {
    if (*(unsigned char *)(this + 48))
    {
      *(double *)(this + 8OZSplineNode::allocOZSpline(this, 0) = a2;
      *(double *)(this + 96) = a3;
    }
  }
  return this;
}

uint64_t OZStaticVertex::flattenTangents(uint64_t this, const CMTime *a2)
{
  if ((*(unsigned char *)(this + 8) & 2) == 0)
  {
    if (*(unsigned char *)(this + 48))
    {
      *(_OWORD *)(this + 8OZSpline::reparametrize((uint64_t)this + 8) = 0u;
      *(_OWORD *)(this + 7PCSpinLock::lock(this + 2) = 0u;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 160))(this, 1);
    }
  }
  return this;
}

uint64_t OZStaticVertex::resetTangents(OZStaticVertex *this)
{
  return (*(uint64_t (**)(OZStaticVertex *, void))(*(void *)this + 88))(this, MEMORY[0x1E4F1FA48]);
}

uint64_t OZStaticVertex::setEnabled(uint64_t this, char a2, const CMTime *a3)
{
  *(unsigned char *)(this + 4OZSpline::reparametrize((uint64_t)this + 8) = a2;
  return this;
}

uint64_t OZStaticVertex::isEnabled(OZStaticVertex *this, const CMTime *a2)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL OZStaticVertex::isFlat(OZStaticVertex *this)
{
  return fabs(*((double *)this + 9)) < 0.0000001
      && fabs(*((double *)this + 11)) < 0.0000001
      && fabs(*((double *)this + 10)) < 0.0000001
      && fabs(*((double *)this + 12)) < 0.0000001;
}

int8x16_t OZStaticVertex::swapTangents(OZStaticVertex *this)
{
  *(int8x16_t *)((char *)this + 7PCSpinLock::lock(this + 2) = vextq_s8(*(int8x16_t *)((char *)this + 72), *(int8x16_t *)((char *)this + 72), 8uLL);
  int8x16_t result = vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL);
  *(int8x16_t *)((char *)this + 8OZSpline::reparametrize((uint64_t)this + 8) = result;
  return result;
}

double OZStaticVertex::getValueV(OZStaticVertex *this, const CMTime *a2)
{
  return *((double *)this + 7);
}

double OZStaticVertex::getBias(OZStaticVertex *this, const CMTime *a2)
{
  return *((double *)this + 8);
}

double OZStaticVertex::offsetVertexInTime(OZStaticVertex *this, const CMTime *a2)
{
  CMTime v7 = *(CMTime *)((char *)this + 16);
  CMTime v6 = *a2;
  PC_CMTimeSaferAdd(&v7, &v6, (uint64_t)&v4);
  double result = *(double *)&v4;
  *((_OWORD *)this + atomic_store(0, (unint64_t *)this + 1) = v4;
  *((void *)this + 4) = v5;
  return result;
}

void OZStaticVertex::clone(OZStaticVertex *this)
{
}

void sub_1B79BEADC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4082842762);
  _Unwind_Resume(a1);
}

void OZVertex::OZVertex(OZVertex *this, const CMTime *a2)
{
  *(void *)this = &unk_1F1105CE0;
  CMTimeEpoch epoch = a2->epoch;
  *((_OWORD *)this + atomic_store(0, (unint64_t *)this + 1) = *(_OWORD *)&a2->value;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = 0x100000000;
  *((void *)this + 4) = epoch;
  *((void *)this + 5) = 0;
}

void OZVertex::OZVertex(OZVertex *this, const OZVertex *a2)
{
  *(void *)this = &unk_1F1105CE0;
  long long v2 = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((_OWORD *)this + atomic_store(0, (unint64_t *)this + 1) = v2;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 5) = *((void *)a2 + 5);
}

BOOL OZVertex::isEqual(OZVertex *this, const OZVertex *a2)
{
  CMTime time1 = *(CMTime *)((char *)this + 16);
  CMTime v5 = *(CMTime *)((char *)a2 + 16);
  return !CMTimeCompare(&time1, &v5)
      && *((_DWORD *)this + 3) == *((_DWORD *)a2 + 3)
      && *((_DWORD *)this + 2) == *((_DWORD *)a2 + 2)
      && *((double *)a2 + 5) == 0.0;
}

__n128 OZVertex::setValueU(OZVertex *this, const CMTime *a2)
{
  if ((*((unsigned char *)this + 8) & 2) == 0)
  {
    CMTime time1 = *(CMTime *)((char *)this + 16);
    CMTime v5 = *a2;
    if (CMTimeCompare(&time1, &v5))
    {
      __n128 result = *(__n128 *)&a2->value;
      *((void *)this + 4) = a2->epoch;
      *((__n128 *)this + atomic_store(0, (unint64_t *)this + 1) = result;
    }
  }
  return result;
}

uint64_t OZVertex::setNormal(uint64_t this, double a2, const CMTime *a3)
{
  *(double *)(this + 4OZSplineNode::allocOZSpline(this, 0) = a2;
  return this;
}

double OZVertex::getNormal(OZVertex *this, const CMTime *a2)
{
  return *((double *)this + 5);
}

void sub_1B79BEDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40A120F8A5);
  _Unwind_Resume(a1);
}

void OZChannelSegmentVisitor::visitSegments(OZChannel *this, CMTime *a2, CMTime *a3, const CMTime *a4, OZChannelSegmentVisitor *a5)
{
  CurveInterface = (const void *)OZChannel::getCurveInterface(this);
  OZChannel::isParametric(this);
  if (CurveInterface) {
  else
  }
    uint64_t v10 = 0;
  FactoryForSerialization = (const void *)OZFactoryBase::getFactoryForSerialization((uint64_t)v10);
  if (!FactoryForSerialization) {
    return;
  }
  unint64_t v12 = FactoryForSerialization;
  if (!v14)
  {
    if (!v13) {
      return;
    }
    (*(void (**)(void *, void, double, double))(*(void *)v13 + 16))(v13, MEMORY[0x1E4F1FA48], 0.0, 0.0);
    goto LABEL_12;
  }
  uint64_t v15 = v14;
  uint64_t v16 = (OZSpline *)PVInstructionGraphContext::HGNodeCache(v14);
  if (!v16) {
    goto LABEL_9;
  }
  size_t v17 = v16;
  uint64_t v18 = (*((void *)v16 + 3) - *((void *)v16 + 2)) >> 3;
  if (v18 == 1)
  {
    time1.CMTimeValue value = 0;
    Firstuint64_t Vertex = OZSpline::getFirstVertex(v16);
    (*(void (**)(OZSpline *, uint64_t, void, CMTime *, void))(*(void *)v17 + 264))(v17, FirstVertex, 0, &time1, MEMORY[0x1E4F1FA48]);
    (*(void (**)(const CMTime *, CMTime *, CMTime *, double))(a4->value + 16))(a4, a2, a3, *(double *)&time1.value);
    return;
  }
  if (!v18)
  {
LABEL_9:
    (*(void (**)(PVInstructionGraphContext *))(*(void *)v15 + 96))(v15);
LABEL_12:
    unint64_t v19 = *(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16);
    v19(a4, a2, a3);
    return;
  }
  v102 = 0;
  v103 = 0;
  uint64_t v104 = 0;
  (*(void (**)(OZSpline *, void **))(*(void *)v16 + 24))(v16, &v102);
  unint64_t v22 = v103;
  if (v103 == LeftVertex)
  {
    v97 = v102;
    (*(void (**)(OZSpline *, void, CMTime *, void, void))(*(void *)v17 + 264))(v17, *(void *)v102, &v101, 0, MEMORY[0x1E4F1FA48]);
    uint64_t v30 = *v97;
    CMTime v99 = *a2;
    CMTime time1 = v101;
    CMTime time2 = *a3;
    if (CMTimeCompare(&time1, &time2) >= 0) {
      long long v31 = a3;
    }
    else {
      long long v31 = &v101;
    }
    switch(OZSpline::getExtrapolation(v17, 1))
    {
      case 0u:
        (*(void (**)(OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 240))(v17, &v99, MEMORY[0x1E4F1FA48], 1);
        (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v99, v31);
        break;
      case 1u:
        (*(void (**)(const CMTime *, OZSpline *, void, uint64_t, CMTime *, CMTime *, CMTime *, CMTime *, double))(a4->value + 24))(a4, v17, 0, v30, &v99, v31, &v99, v31, 0.0);
        break;
      case 2u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 MaxValueU = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, MaxValueU);
        unint64_t v92 = (OZSpline **)__p;
        long long v94 = v114;
        uint64_t v58 = MEMORY[0x1E4F1FA48];
        while (1)
        {
          LOBYTE(v106) = 0;
          memset(&v112, 0, sizeof(v112));
          OZSpline::getStep(v17, &time1);
          OZChannelSegmentVisitor::mapPingPong(&v99, &v117, &v116, &time1, 0, (char *)&v106, (uint64_t)&v112);
          (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v59, &v111, 0, v58);
          CMTime time1 = v112;
          CMTime time2 = v111;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime time1 = v99;
            CMTime time2 = v117;
            if (CMTimeCompare(&time1, &time2))
            {
              (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v99, v58, 1);
              (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v99, &v99);
            }
            if (LOBYTE(v106) && v92 != v59)
            {
              uint64_t v60 = (uint64_t)*--v59;
              (*(void (**)(OZSpline *, uint64_t, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v60, &v111, 0, v58);
            }
          }
          CMTime time1 = v99;
          CMTime time2 = *v31;
          if (!CMTimeCompare(&time1, &time2)) {
            break;
          }
          if (v59 + 1 != v94)
          {
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v59[1], &v110, 0, v58);
            if (LOBYTE(v106))
            {
              CMTime time1 = *v31;
              CMTime time2 = v99;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
              CMTime time1 = v112;
              CMTime time2 = v111;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
              CMTime time1 = v107;
              CMTime time2 = v118;
              int32_t v61 = CMTimeCompare(&time1, &time2);
              CMTime v62 = &v118;
              if (v61 < 0) {
                CMTime v62 = &v107;
              }
              CMTime v109 = *v62;
              CMTime time1 = v112;
              CMTime time2 = v109;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
            }
            else
            {
              CMTime time1 = *v31;
              CMTime time2 = v99;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
              CMTime time1 = v110;
              CMTime time2 = v112;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
              CMTime time1 = v107;
              CMTime time2 = v118;
              int32_t v63 = CMTimeCompare(&time1, &time2);
              uint64_t v64 = &v118;
              if (v63 < 0) {
                uint64_t v64 = &v107;
              }
              CMTime v109 = *v64;
              CMTime time1 = v112;
              CMTime time2 = v109;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            }
            CMTime v108 = v118;
            uint64_t v66 = *v59;
            unint64_t v65 = v59[1];
            CMTime time1 = v99;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            CMTime time2 = v99;
            CMTime v118 = v109;
            PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
            CMTime v99 = time1;
          }
        }
        goto LABEL_124;
      case 3u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 v76 = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, v76);
        unsigned int v96 = v114;
        double v93 = v114 - 1;
        uint64_t v77 = MEMORY[0x1E4F1FA48];
        while (1)
        {
          memset(&v112, 0, sizeof(v112));
          OZChannelSegmentVisitor::mapProgressiveRepeat(&v99, &v117, &v116, (const CMTime *)*(unsigned __int8 *)(*((void *)v17 + 21) + 4), &time1.value, (uint64_t)&v112);
          (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v78, &v111, 0, v77);
          CMTime time1 = v112;
          CMTime time2 = v111;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime time1 = v99;
            CMTime time2 = v117;
            if (CMTimeCompare(&time1, &time2))
            {
              (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v99, v77, 1);
              (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v99, &v99);
            }
            if (v93 == v78)
            {
              unint64_t v78 = (OZSpline **)__p;
              (*(void (**)(OZSpline *, void, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *(void *)__p, &v111, 0, v77);
              CMTime v112 = v111;
            }
          }
          CMTime time1 = v99;
          CMTime time2 = *v31;
          if (!CMTimeCompare(&time1, &time2)) {
            break;
          }
          if (v78 + 1 != v96)
          {
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v78[1], &v110, 0, v77);
            CMTime time1 = *v31;
            CMTime time2 = v99;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
            CMTime time1 = v110;
            CMTime time2 = v112;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v108);
            CMTime time1 = v108;
            CMTime time2 = v118;
            int32_t v79 = CMTimeCompare(&time1, &time2);
            unint64_t v80 = &v118;
            if (v79 < 0) {
              unint64_t v80 = &v108;
            }
            CMTime v109 = *v80;
            memset(&v108, 0, sizeof(v108));
            CMTime time1 = v112;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v108);
            int v82 = *v78;
            long long v81 = v78[1];
            CMTime time1 = v99;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            CMTime time2 = v99;
            CMTime v118 = v109;
            PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
            CMTime v99 = time1;
          }
        }
        goto LABEL_124;
      case 4u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 v67 = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, v67);
        uint64_t v95 = v114;
        double v106 = 0.0;
        v107.CMTimeValue value = 0;
        (*(void (**)(OZSpline *, uint64_t, void, CMTime *, void))(*(void *)v17 + 264))(v17, v30, 0, &v107, MEMORY[0x1E4F1FA48]);
        uint64_t DepthBuffer = DepthBufferManager::getDepthBuffer(v17);
        (*(void (**)(OZSpline *, uint64_t, void, double *, void))(*(void *)v17 + 264))(v17, DepthBuffer, 0, &v106, MEMORY[0x1E4F1FA48]);
        double v69 = *(double *)&v107.value - v106;
        uint64_t v70 = MEMORY[0x1E4F1FA48];
        while (1)
        {
          uint64_t v105 = 0;
          memset(&v112, 0, sizeof(v112));
          OZChannelSegmentVisitor::mapProgressiveRepeat(&v99, &v117, &v116, (const CMTime *)*(unsigned __int8 *)(*((void *)v17 + 21) + 4), &v105, (uint64_t)&v112);
          (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v71, &v111, 0, v70);
          CMTime time1 = v112;
          CMTime time2 = v111;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime time1 = v99;
            CMTime time2 = v117;
            if (CMTimeCompare(&time1, &time2))
            {
              (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v99, v70, 1);
              (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v99, &v99);
            }
            if (v95 - 1 == v71)
            {
              double v71 = (OZSpline **)__p;
              (*(void (**)(OZSpline *, void, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *(void *)__p, &v111, 0, v70);
              CMTime v112 = v111;
              --v105;
            }
          }
          CMTime time1 = v99;
          CMTime time2 = *v31;
          if (!CMTimeCompare(&time1, &time2)) {
            break;
          }
          if (v71 + 1 != v95)
          {
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v71[1], &v110, 0, v70);
            CMTime time1 = *v31;
            CMTime time2 = v99;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
            CMTime time1 = v110;
            CMTime time2 = v112;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v108);
            CMTime time1 = v108;
            CMTime time2 = v118;
            int32_t v72 = CMTimeCompare(&time1, &time2);
            long long v73 = &v118;
            if (v72 < 0) {
              long long v73 = &v108;
            }
            CMTime v109 = *v73;
            memset(&v108, 0, sizeof(v108));
            CMTime time1 = v112;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v108);
            unint64_t v75 = *v71;
            long long v74 = v71[1];
            CMTime time1 = v99;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            CMTime time2 = v99;
            CMTime v118 = v109;
            PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
            CMTime v99 = time1;
          }
        }
LABEL_124:
        if (__p)
        {
          long long v114 = (OZSpline **)__p;
          operator delete(__p);
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v97 = LeftVertex;
    (*(void (**)(OZSpline *, void *, CMTime *, void, void))(*(void *)v17 + 264))(v17, *LeftVertex, &v101, 0, MEMORY[0x1E4F1FA48]);
  }
  unint64_t v23 = (void **)(v97 + 1);
  uint64_t v24 = MEMORY[0x1E4F1FA48];
  while (1)
  {
    CMTime time1 = v101;
    CMTime time2 = *a3;
    if (CMTimeCompare(&time1, &time2) > 0) {
      break;
    }
    CMTime time1 = *a2;
    CMTime time2 = v101;
    if (CMTimeCompare(&time1, &time2) >= 0) {
      uint64_t v25 = a2;
    }
    else {
      uint64_t v25 = &v101;
    }
    CMTime v118 = *v25;
    CMTime time1 = *v25;
    CMTime time2 = v101;
    if (!CMTimeCompare(&time1, &time2))
    {
      (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v118, v24, 1);
      (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v118, &v118);
    }
    if (v23 == v22) {
      goto LABEL_35;
    }
    (*(void (**)(OZSpline *, void *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v23, &v100, 0, v24);
    CMTime time1 = v100;
    CMTime time2 = *a3;
    if (CMTimeCompare(&time1, &time2) >= 0) {
      unint64_t v26 = a3;
    }
    else {
      unint64_t v26 = &v100;
    }
    CMTime v117 = *v26;
    CMTime time1 = v118;
    CMTime time2 = *v26;
    if (CMTimeCompare(&time1, &time2) < 0
      || (time1 = v118, CMTime time2 = v117, !CMTimeCompare(&time1, &time2))
      && (time1 = v118, CMTime time2 = v101, CMTimeCompare(&time1, &time2)))
    {
    }
    CMTime v101 = v100;
    ++v23;
  }
  unint64_t v22 = v23 - 1;
LABEL_35:
  CMTime time1 = *a3;
  CMTime time2 = v101;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    uint64_t v27 = (uint64_t)*(v22 - 1);
    CMTime time1 = *a2;
    CMTime time2 = v101;
    int32_t v28 = CMTimeCompare(&time1, &time2);
    CMTime v29 = &v101;
    if (v28 >= 0) {
      CMTime v29 = a2;
    }
    CMTime v98 = *v29;
    switch(OZSpline::getExtrapolation(v17, 0))
    {
      case 0u:
        (*(void (**)(OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 240))(v17, a3, MEMORY[0x1E4F1FA48], 1);
        (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, a3);
        break;
      case 1u:
        (*(void (**)(const CMTime *, OZSpline *, uint64_t, void, CMTime *, CMTime *, CMTime *, CMTime *, double))(a4->value + 24))(a4, v17, v27, 0, &v98, a3, &v98, a3, 0.0);
        break;
      case 2u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 v32 = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, v32);
        CMTimeValue v33 = v114;
        if (*(unsigned char *)(*((void *)v17 + 21) + 4))
        {
          uint64_t v34 = MEMORY[0x1E4F1FA48];
          while (1)
          {
            LOBYTE(v106) = 0;
            memset(&v112, 0, sizeof(v112));
            OZSpline::getStep(v17, &time1);
            OZChannelSegmentVisitor::mapPingPong(&v98, &v117, &v116, &time1, (const CMTime *)1, (char *)&v106, (uint64_t)&v112);
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v35, &v111, 0, v34);
            CMTime time1 = v98;
            CMTime time2 = *a3;
            if (!CMTimeCompare(&time1, &time2)) {
              break;
            }
            if (v35 + 1 != v33)
            {
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v35[1], &v110, 0, v34);
              if (LOBYTE(v106))
              {
                CMTime time1 = *a3;
                CMTime time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
                CMTime time1 = v112;
                CMTime time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                CMTime time1 = v107;
                CMTime time2 = v118;
                if (CMTimeCompare(&time1, &time2) >= 0) {
                  double v36 = &v118;
                }
                else {
                  double v36 = &v107;
                }
                CMTime v109 = *v36;
                CMTime time1 = v112;
                CMTime time2 = v109;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
              }
              else
              {
                CMTime time1 = *a3;
                CMTime time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
                CMTime time1 = v110;
                CMTime time2 = v112;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                CMTime time1 = v107;
                CMTime time2 = v118;
                if (CMTimeCompare(&time1, &time2) >= 0) {
                  double v37 = &v118;
                }
                else {
                  double v37 = &v107;
                }
                CMTime v109 = *v37;
                CMTime time1 = v112;
                CMTime time2 = v109;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
              }
              CMTime v108 = v118;
              double v39 = *v35;
              uint64_t v38 = v35[1];
              CMTime time1 = v98;
              CMTime time2 = v109;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
              CMTime time2 = v98;
              CMTime v118 = v109;
              PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
              CMTime v98 = time1;
            }
          }
        }
        else
        {
          uint64_t v83 = (OZSpline **)__p;
          uint64_t v84 = MEMORY[0x1E4F1FA48];
          while (1)
          {
            LOBYTE(v106) = 0;
            memset(&v112, 0, sizeof(v112));
            OZSpline::getStep(v17, &time1);
            OZChannelSegmentVisitor::mapPingPong(&v98, &v117, &v116, &time1, 0, (char *)&v106, (uint64_t)&v112);
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v85, &v111, 0, v84);
            CMTime time1 = v112;
            CMTime time2 = v111;
            if (!CMTimeCompare(&time1, &time2))
            {
              CMTime time1 = v98;
              CMTime time2 = v116;
              if (CMTimeCompare(&time1, &time2))
              {
                (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v98, v84, 1);
                (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
              }
              if (LOBYTE(v106) && v83 != v85)
              {
                uint64_t v86 = (uint64_t)*--v85;
                (*(void (**)(OZSpline *, uint64_t, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v86, &v111, 0, v84);
              }
            }
            CMTime time1 = v98;
            CMTime time2 = *a3;
            if (!CMTimeCompare(&time1, &time2)) {
              break;
            }
            if (v85 + 1 != v33)
            {
              (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v85[1], &v110, 0, v84);
              if (LOBYTE(v106))
              {
                CMTime time1 = *a3;
                CMTime time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
                CMTime time1 = v112;
                CMTime time2 = v111;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                CMTime time1 = v107;
                CMTime time2 = v118;
                if (CMTimeCompare(&time1, &time2) >= 0) {
                  int v87 = &v118;
                }
                else {
                  int v87 = &v107;
                }
                CMTime v109 = *v87;
                CMTime time1 = v112;
                CMTime time2 = v109;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
              }
              else
              {
                CMTime time1 = *a3;
                CMTime time2 = v98;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
                CMTime time1 = v110;
                CMTime time2 = v112;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v107);
                CMTime time1 = v107;
                CMTime time2 = v118;
                if (CMTimeCompare(&time1, &time2) >= 0) {
                  long long v88 = &v118;
                }
                else {
                  long long v88 = &v107;
                }
                CMTime v109 = *v88;
                CMTime time1 = v112;
                CMTime time2 = v109;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
              }
              CMTime v108 = v118;
              double v90 = *v85;
              unsigned int v89 = v85[1];
              CMTime time1 = v98;
              CMTime time2 = v109;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
              CMTime time2 = v98;
              CMTime v118 = v109;
              PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
              CMTime v98 = time1;
            }
          }
        }
        goto LABEL_145;
      case 3u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 v40 = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, v40);
        uint64_t v41 = v114;
        CMTime v42 = v114 - 1;
        uint64_t v43 = MEMORY[0x1E4F1FA48];
        while (1)
        {
          memset(&v112, 0, sizeof(v112));
          OZChannelSegmentVisitor::mapProgressiveRepeat(&v98, &v117, &v116, (const CMTime *)*(unsigned __int8 *)(*((void *)v17 + 21) + 4), &time1.value, (uint64_t)&v112);
          (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v44, &v111, 0, v43);
          CMTime time1 = v112;
          CMTime time2 = v111;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime time1 = v98;
            CMTime time2 = v116;
            if (CMTimeCompare(&time1, &time2))
            {
              (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v98, v43, 1);
              (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
            }
            if (v42 == v44)
            {
              CMTime v44 = (OZSpline **)__p;
              (*(void (**)(OZSpline *, void, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *(void *)__p, &v111, 0, v43);
              CMTime v112 = v111;
            }
          }
          CMTime time1 = v98;
          CMTime time2 = *a3;
          if (!CMTimeCompare(&time1, &time2)) {
            break;
          }
          if (v44 + 1 != v41)
          {
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v44[1], &v110, 0, v43);
            CMTime time1 = *a3;
            CMTime time2 = v98;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
            CMTime time1 = v110;
            CMTime time2 = v112;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v108);
            CMTime time1 = v108;
            CMTime time2 = v118;
            if (CMTimeCompare(&time1, &time2) >= 0) {
              CMTime v45 = &v118;
            }
            else {
              CMTime v45 = &v108;
            }
            CMTime v109 = *v45;
            memset(&v108, 0, sizeof(v108));
            CMTime time1 = v112;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v108);
            CMTime v47 = *v44;
            CMTime v46 = v44[1];
            CMTime time1 = v98;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            CMTime time2 = v98;
            CMTime v118 = v109;
            PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
            CMTime v98 = time1;
          }
        }
        goto LABEL_145;
      case 4u:
        memset(&v117, 0, sizeof(v117));
        OZSpline::getMinValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v117);
        memset(&v116, 0, sizeof(v116));
        __n128 v48 = OZSpline::getMaxValueU(v17, MEMORY[0x1E4F1FA48], 0, (uint64_t)&v116);
        CMTime __p = 0;
        long long v114 = 0;
        uint64_t v115 = 0;
        (*(void (**)(OZSpline *, void **, __n128))(*(void *)v17 + 24))(v17, &__p, v48);
        CMTime v49 = v114;
        double v106 = 0.0;
        v107.CMTimeValue value = 0;
        uint64_t v50 = OZSpline::getFirstVertex(v17);
        (*(void (**)(OZSpline *, uint64_t, void, CMTime *, void))(*(void *)v17 + 264))(v17, v50, 0, &v107, MEMORY[0x1E4F1FA48]);
        (*(void (**)(OZSpline *, uint64_t, void, double *, void))(*(void *)v17 + 264))(v17, v27, 0, &v106, MEMORY[0x1E4F1FA48]);
        double v51 = v106 - *(double *)&v107.value;
        uint64_t v52 = MEMORY[0x1E4F1FA48];
        while (1)
        {
          uint64_t v105 = 0;
          memset(&v112, 0, sizeof(v112));
          OZChannelSegmentVisitor::mapProgressiveRepeat(&v98, &v117, &v116, (const CMTime *)*(unsigned __int8 *)(*((void *)v17 + 21) + 4), &v105, (uint64_t)&v112);
          (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *v53, &v111, 0, v52);
          CMTime time1 = v112;
          CMTime time2 = v111;
          if (!CMTimeCompare(&time1, &time2))
          {
            CMTime time1 = v98;
            CMTime time2 = v116;
            if (CMTimeCompare(&time1, &time2))
            {
              (*(void (**)(OZSpline *, CMTime *, uint64_t, uint64_t))(*(void *)v17 + 240))(v17, &v98, v52, 1);
              (*(void (**)(const CMTime *, CMTime *, CMTime *))(a4->value + 16))(a4, &v98, &v98);
            }
            if (v49 - 1 == v53)
            {
              double v53 = (OZSpline **)__p;
              (*(void (**)(OZSpline *, void, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, *(void *)__p, &v111, 0, v52);
              CMTime v112 = v111;
              ++v105;
            }
          }
          CMTime time1 = v98;
          CMTime time2 = *a3;
          if (!CMTimeCompare(&time1, &time2)) {
            break;
          }
          if (v53 + 1 != v49)
          {
            (*(void (**)(OZSpline *, OZSpline *, CMTime *, void, uint64_t))(*(void *)v17 + 264))(v17, v53[1], &v110, 0, v52);
            CMTime time1 = *a3;
            CMTime time2 = v98;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v118);
            CMTime time1 = v110;
            CMTime time2 = v112;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v108);
            CMTime time1 = v108;
            CMTime time2 = v118;
            if (CMTimeCompare(&time1, &time2) >= 0) {
              CMTime v54 = &v118;
            }
            else {
              CMTime v54 = &v108;
            }
            CMTime v109 = *v54;
            memset(&v108, 0, sizeof(v108));
            CMTime time1 = v112;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v108);
            CMTime v56 = *v53;
            CMTime v55 = v53[1];
            CMTime time1 = v98;
            CMTime time2 = v109;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v118);
            CMTime time2 = v98;
            CMTime v118 = v109;
            PC_CMTimeSaferAdd(&time2, &v118, (uint64_t)&time1);
            CMTime v98 = time1;
          }
        }
LABEL_145:
        if (__p)
        {
          long long v114 = (OZSpline **)__p;
          operator delete(__p);
        }
        break;
      default:
        break;
    }
  }
  if (v102)
  {
    v103 = (void **)v102;
    operator delete(v102);
  }
}

void sub_1B79C2558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void *anonymous namespace'::findLeftVertex(uint64_t a1, void *a2, CMTime *a3)
{
  long long v4 = (void *)*a2;
  uint64_t v5 = a2[1] - *a2;
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v8 = v5 >> 3;
  uint64_t v9 = MEMORY[0x1E4F1FA48];
  do
  {
    uint64_t v10 = &v4[v8 >> 1];
    uint64_t v12 = *v10;
    uint64_t v11 = v10 + 1;
    (*(void (**)(uint64_t, uint64_t, CMTime *, void, uint64_t))(*(void *)a1 + 264))(a1, v12, &v16, 0, v9);
    CMTime time1 = v16;
    CMTime time2 = *a3;
    int32_t v13 = CMTimeCompare(&time1, &time2);
    if (v13 >= 0) {
      v8 >>= 1;
    }
    else {
      v8 += ~(v8 >> 1);
    }
    if (v13 < 0) {
      long long v4 = v11;
    }
  }
  while (v8);
  if (v4 == (void *)a2[1])
  {
LABEL_11:
    unint64_t v14 = v4;
  }
  else
  {
    (*(void (**)(uint64_t, void, CMTime *, void, void))(*(void *)a1 + 264))(a1, *v4, &v16, 0, MEMORY[0x1E4F1FA48]);
    CMTime time1 = v16;
    CMTime time2 = *a3;
    unint64_t v14 = &v4[CMTimeCompare(&time1, &time2) == 0];
    long long v4 = (void *)a2[1];
  }
  if (v14 == (void *)*a2) {
    return v4;
  }
  else {
    return v14 - 1;
  }
}

uint64_t anonymous namespace'::InteriorSegment(OZInterpolators **this, OZSpline *a2, void *a3, void *a4, const CMTime *a5, const CMTime *a6, const CMTime *a7, const CMTime *a8, double a9, OZChannelSegmentVisitor *a10)
{
  unsigned int v22 = 0;
  uint64_t result = OZSpline::getVertexInterpolation(this, a2, &v22, 0);
  switch(v22)
  {
    case 0u:
      CMTime v24 = *a6;
      CMTime v23 = *a7;
      PC_CMTimeSaferAdd(&v24, &v23, (uint64_t)&v21);
      double v20 = operator/(&v21, 2, (uint64_t)&v24);
      (*((void (**)(OZInterpolators **, CMTime *, void, uint64_t, double))*this + 30))(this, &v24, MEMORY[0x1E4F1FA48], 1, v20);
      uint64_t result = (*(uint64_t (**)(const CMTime *, const CMTime *, const CMTime *))(a8->value + 16))(a8, a6, a7);
      break;
    case 1u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 24))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 32))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 6u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 40))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 7u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 48))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 8u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 56))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xDu:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 88))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xEu:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 96))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0xFu:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 64))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0x10u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 72))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    case 0x11u:
      uint64_t result = (*(uint64_t (**)(const CMTime *, OZInterpolators **, OZSpline *, void *, void *, const CMTime *, const CMTime *, const CMTime *, double))(a8->value + 80))(a8, this, a2, a3, a4, a5, a6, a7, a9);
      break;
    default:
      return result;
  }
  return result;
}

void OZChannelSegmentVisitor::OZChannelSegmentVisitor(OZChannelSegmentVisitor *this)
{
  *(void *)this = &unk_1F1105E08;
}

void OZChannelSegmentVisitor::~OZChannelSegmentVisitor(OZChannelSegmentVisitor *this)
{
}

void OZChannelSegmentVisitor::mapPingPong(CMTime *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, const CMTime *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  int v9 = (int)a5;
  memset(&v25, 0, sizeof(v25));
  CMTime time1 = *a3;
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
  CMTime time1 = v25;
  uint64_t v15 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2))
  {
    CMTime time1 = *this;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTime time1 = *a2;
      CMTime time2 = *this;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      *(CMTime *)a7 = v28;
      operator*(&v25, &v23, 2.0);
      memset(&v24, 0, sizeof(v24));
      operator/((long long *)a7, (uint64_t)&v23, (uint64_t)&v24);
      CMTimeMake(&v26, 1, 1);
      CMTime time1 = v24;
      CMTime time2 = v26;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v27);
      CMTime time1 = v24;
      CMTime time2 = v27;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      operator*((long long *)&v28.value, (uint64_t)&v23, (uint64_t)&time1);
      CMTime v24 = time1;
      CMTimeEpoch epoch = time1.epoch;
      *(_OWORD *)a7 = *(_OWORD *)&time1.value;
      *(void *)(a7 + 16) = epoch;
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)a7;
      time1.CMTimeEpoch epoch = epoch;
      CMTime time2 = *v15;
      if (!CMTimeCompare(&time1, &time2))
      {
        operator*(&v25, &time1, 2.0);
        *(CMTime *)a7 = time1;
      }
      CMTime time1 = *(CMTime *)a7;
      CMTime time2 = v25;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        operator*(&v25, 2, &v27);
        CMTime time1 = v27;
        CMTime time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        char v17 = 0;
        *(_OWORD *)a7 = *(_OWORD *)&v28.value;
        CMTimeEpoch v18 = v28.epoch;
        goto LABEL_14;
      }
    }
    else
    {
      CMTime time1 = *this;
      CMTime time2 = *a3;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(_OWORD *)a7 = *(_OWORD *)&this->value;
        *(void *)(a7 + 16) = this->epoch;
        *a6 = 0;
        return;
      }
      if (!v9 || (time1 = v25, CMTime time2 = *a4, CMTimeCompare(&time1, &time2) < 0))
      {
        CMTime time1 = *this;
        CMTime time2 = *a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(CMTime *)a7 = v28;
        operator*(&v25, 2, &v23);
        memset(&v24, 0, sizeof(v24));
        operator/((long long *)a7, (uint64_t)&v23, (uint64_t)&v24);
        CMTimeMake(&v26, 1, 1);
        CMTime time1 = v24;
        CMTime time2 = v26;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v27);
        CMTime time1 = v24;
        CMTime time2 = v27;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        operator*((long long *)&v28.value, (uint64_t)&v23, (uint64_t)&time1);
        CMTime v24 = time1;
        CMTimeEpoch v21 = time1.epoch;
        *(_OWORD *)a7 = *(_OWORD *)&time1.value;
        *(void *)(a7 + 16) = v21;
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)a7;
        time1.CMTimeEpoch epoch = v21;
        CMTime time2 = v25;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          char v17 = 0;
          goto LABEL_21;
        }
        operator*(&v25, 2, &v27);
        CMTime time1 = v27;
        CMTime time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(_OWORD *)a7 = *(_OWORD *)&v28.value;
        CMTimeEpoch v22 = v28.epoch;
      }
      else
      {
        CMTime time1 = v25;
        CMTime time2 = *a4;
        if (!CMTimeCompare(&time1, &time2))
        {
          *(_OWORD *)a7 = *(_OWORD *)&v15->value;
          *(void *)(a7 + 16) = v15->epoch;
          *a6 = 0;
          goto LABEL_22;
        }
        CMTime time1 = *this;
        CMTime time2 = *a3;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        *(CMTime *)a7 = v28;
        memset(&v28, 0, sizeof(v28));
        CMTime time1 = v25;
        CMTime time2 = *a4;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        operator*(&v28, 2, &time2);
        PCMath::mod((PCMath *)a7, &time2, &time1);
        *(_OWORD *)a7 = *(_OWORD *)&time1.value;
        CMTimeEpoch v16 = time1.epoch;
        *(void *)(a7 + 16) = time1.epoch;
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)a7;
        time1.CMTimeEpoch epoch = v16;
        CMTime time2 = v28;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CMTime time1 = *(CMTime *)a7;
          CMTime time2 = v28;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
          CMTime time1 = v26;
          CMTime time2 = *a4;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
          char v17 = 0;
          *(_OWORD *)a7 = *(_OWORD *)&v27.value;
          CMTimeEpoch v18 = v27.epoch;
LABEL_14:
          *(void *)(a7 + 16) = v18;
LABEL_21:
          *a6 = v17;
LABEL_22:
          CMTime time2 = *(CMTime *)a7;
          CMTime v28 = *a2;
          PC_CMTimeSaferAdd(&time2, &v28, (uint64_t)&time1);
          *(_OWORD *)a7 = *(_OWORD *)&time1.value;
          CMTimeEpoch v19 = time1.epoch;
          goto LABEL_23;
        }
        CMTime time1 = v28;
        CMTime time2 = *(CMTime *)a7;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        *(_OWORD *)a7 = *(_OWORD *)&v27.value;
        CMTimeEpoch v22 = v27.epoch;
      }
      *(void *)(a7 + 16) = v22;
    }
    char v17 = 1;
    goto LABEL_21;
  }
  *a6 = 0;
  *(_OWORD *)a7 = *(_OWORD *)&a2->value;
  CMTimeEpoch v19 = a2->epoch;
LABEL_23:
  *(void *)(a7 + 16) = v19;
}

void OZChannelSegmentVisitor::mapProgressiveRepeat(CMTime *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  int v8 = (int)a4;
  memset(&v26, 0, sizeof(v26));
  CMTime time1 = *a3;
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
  CMTime time1 = v26;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare(&time1, &time2))
  {
    *a5 = 0;
    *(_OWORD *)a6 = *(_OWORD *)&a2->value;
    *(void *)(a6 + 16) = a2->epoch;
    return;
  }
  CMTime time1 = *this;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    CMTime time1 = *a2;
    CMTime time2 = *this;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    memset(&v25, 0, sizeof(v25));
    operator/(&v24, (uint64_t)&v26, (uint64_t)&v25);
    CMTimeMake(&v27, 1, 1);
    CMTime time1 = v25;
    CMTime time2 = v27;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v28);
    CMTime time1 = v25;
    CMTime time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    operator*(&v29, (uint64_t)&v26, (uint64_t)&time1);
    CMTime v25 = time1;
    CMTimeEpoch epoch = time1.epoch;
    long long v18 = *(_OWORD *)&time1.value;
    CMTime time1 = *a3;
    *(_OWORD *)&time2.CMTimeValue value = v18;
    time2.CMTimeEpoch epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    *(_OWORD *)a6 = v29;
    *(void *)(a6 + 16) = v30;
    CMTime time1 = *a2;
    CMTime time2 = *this;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
    double Seconds = CMTimeGetSeconds(&v23);
    CMTime v22 = v26;
    uint64_t v16 = (uint64_t)(Seconds / CMTimeGetSeconds(&v22)) + 1;
    goto LABEL_7;
  }
  CMTime time1 = *this;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) > 0
    || v8 && (time1 = *this, CMTime time2 = *a3, (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
  {
    CMTime time1 = *this;
    CMTime time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    memset(&v25, 0, sizeof(v25));
    operator/(&v24, (uint64_t)&v26, (uint64_t)&v25);
    CMTimeMake(&v27, 1, 1);
    CMTime time1 = v25;
    CMTime time2 = v27;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v28);
    CMTime time1 = v25;
    CMTime time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    operator*(&v29, (uint64_t)&v26, (uint64_t)&time1);
    CMTime v25 = time1;
    CMTimeEpoch v13 = time1.epoch;
    long long v14 = *(_OWORD *)&time1.value;
    CMTime time1 = *a2;
    *(_OWORD *)&time2.CMTimeValue value = v14;
    time2.CMTimeEpoch epoch = v13;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
    *(_OWORD *)a6 = v29;
    *(void *)(a6 + 16) = v30;
    CMTime time1 = *this;
    CMTime time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
    double v15 = CMTimeGetSeconds(&time);
    CMTime v20 = v26;
    uint64_t v16 = (uint64_t)(v15 / CMTimeGetSeconds(&v20));
LABEL_7:
    *a5 = v16;
    return;
  }
  *(_OWORD *)a6 = *(_OWORD *)&this->value;
  *(void *)(a6 + 16) = this->epoch;
  *a5 = 0;
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, a7);
  *(void *)uint64_t v11 = &unk_1F1105E90;
  *((void *)v11 + PCSpinLock::lock(this + 2) = &unk_1F11061E8;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, @"Channel X");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v15, (OZChannelFolder *)this, 1u, 0, a8, a9);
  PCString::~PCString(&v15);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v15, @"Channel Y");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v15, (OZChannelFolder *)this, 2u, 0, a8, a9);
  PCString::~PCString(&v15);
}

void sub_1B79C3A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, double a2, double a3, OZFactory *a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  OZCompoundChannel::OZCompoundChannel(this, a4, a5, a6, a7, a8, 0, a9);
  *(void *)PCString v15 = &unk_1F1105E90;
  *((void *)v15 + PCSpinLock::lock(this + 2) = &unk_1F11061E8;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v19, @"Channel X");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), a2, &v19, (OZChannelFolder *)this, 1u, 0, a10, a11);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, @"Channel Y");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), a3, &v19, (OZChannelFolder *)this, 2u, 0, a10, a11);
  PCString::~PCString(&v19);
}

void sub_1B79C3B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  uint64_t Instance = (OZFactory *)OZChannel2D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a4, a5, a6, a7, 0, a8);
  *(void *)this = &unk_1F1105E90;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11061E8;
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v25, @"Channel X");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), a2, &v25, (OZChannelFolder *)this, 1u, 0, a9, a10);
  PCString::~PCString(&v25);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, @"Channel Y");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), a3, &v25, (OZChannelFolder *)this, 2u, 0, a9, a10);
  PCString::~PCString(&v25);
}

void sub_1B79C3D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannel2D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F1105E90;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11061E8;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, @"Channel X");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v21, (OZChannelFolder *)this, 1u, 0, a7, a8);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, @"Channel Y");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v21, (OZChannelFolder *)this, 2u, 0, a7, a8);
  PCString::~PCString(&v21);
}

void sub_1B79C3EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)uint64_t v10 = &unk_1F1105E90;
  *((void *)v10 + PCSpinLock::lock(this + 2) = &unk_1F11061E8;
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v14, @"Channel X");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 136), &v14, (OZChannelFolder *)this, 1u, 0, a6, a7);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v14, @"Channel Y");
  OZChannelDouble::OZChannelDouble((OZChannel2D *)((char *)this + 288), &v14, (OZChannelFolder *)this, 2u, 0, a6, a7);
  PCString::~PCString(&v14);
}

void sub_1B79C4018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannel2D::OZChannel2D(OZChannel2D *this, const OZChannel2D *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1105E90;
  *(void *)(v5 + 16) = &unk_1F11061E8;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1100CF0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
}

void sub_1B79C416C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannel2D::clone(OZChannel2D *this)
{
}

void sub_1B79C41E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannel2D::copy(OZChannel2D *this, const OZChannelBase *a2, char a3)
{
  long long v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }

  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
}

uint64_t OZChannel2D::deriveChannel(OZChannel2D *this, const CMTime *a2)
{
  double v32 = 0.0;
  double CurveValue = 0.0;
  double v30 = 0.0;
  double v31 = 0.0;
  double v29 = 0.0;
  double v28 = 0.0;
  CMTime v27 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v26 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  long long v4 = (OZChannel *)((char *)this + 136);
  double v23 = 0.0;
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 136), a2);
  CMTime v6 = (OZChannel *)((char *)this + 288);
  CMTime v7 = (void *)OZChannel::getKeyframe(v6, a2);
  if (!Keyframe)
  {
    double CurveValue = OZChannel::getCurveValue(v4, a2, 1);
    OZChannel::setKeyframe(v4, a2, CurveValue, 1);
    Keyframe = (void *)OZChannel::getKeyframe(v4, a2);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    double v32 = OZChannel::getCurveValue(v6, a2, 1);
    OZChannel::setKeyframe(v6, a2, v32, 1);
    CMTime v7 = (void *)OZChannel::getKeyframe(v6, a2);
    goto LABEL_6;
  }
  OZChannel::getKeyframe(v4, Keyframe, 0, &CurveValue);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::getKeyframe(v6, v7, 0, &v32);
LABEL_6:
  OZChannel::getPreviousKeyframe(v4, a2, &v27, &v31);
  uint64_t v8 = OZChannel::getKeyframe(v4, &v27);
  OZChannel::getPreviousKeyframe(v6, a2, &v26, &v29);
  uint64_t v9 = OZChannel::getKeyframe(v6, &v26);
  uint64_t v10 = v9;
  if (v8 || !v9)
  {
    BOOL v11 = v8 != 0;
    if (!v9 && v8)
    {
      BOOL v11 = 1;
      double v29 = OZChannel::getCurveValue(v6, &v27, 1);
    }
  }
  else
  {
    BOOL v11 = 0;
    double v31 = OZChannel::getCurveValue(v4, &v26, 1);
  }
  OZChannel::getNextKeyframe(v4, a2, &v25, &v30);
  uint64_t v12 = OZChannel::getKeyframe(v4, &v25);
  OZChannel::getNextKeyframe(v6, a2, &v24, &v28);
  uint64_t v13 = OZChannel::getKeyframe(v6, &v24);
  uint64_t v14 = v13;
  if (v12 || !v13)
  {
    BOOL v15 = v12 != 0;
    if (!v13 && v12)
    {
      BOOL v15 = 1;
      double v28 = OZChannel::getCurveValue(v6, &v25, 1);
    }
  }
  else
  {
    BOOL v15 = 0;
    double v30 = OZChannel::getCurveValue(v4, &v24, 1);
  }
  OZChannel::deriveKeyframe(v4, Keyframe);
  uint64_t result = OZChannel::deriveKeyframe(v6, v7);
  if (v10) {
    char v17 = 1;
  }
  else {
    char v17 = v11;
  }
  if (v14) {
    int v18 = 1;
  }
  else {
    int v18 = v15;
  }
  if (v17)
  {
    if (v18)
    {
      double v19 = 6.0;
      double v20 = (v30 - v31) / 6.0;
      double v21 = v28;
    }
    else
    {
      double v19 = 3.0;
      double v20 = (CurveValue - v31) / 3.0;
      double v21 = v32;
    }
    double v22 = (v21 - v29) / v19;
  }
  else
  {
    if (!v18) {
      return result;
    }
    double v20 = (v30 - CurveValue) / 3.0;
    double v22 = (v28 - v32) / 3.0;
  }
  OZChannel::getKeyframeOutputTangents(v4, Keyframe, &v23, 0, 1);
  OZChannel::setKeyframeOutputTangents(v4, Keyframe, v23, v20, 1);
  OZChannel::getKeyframeInputTangents(v4, Keyframe, &v23, 0, 1);
  OZChannel::setKeyframeInputTangents(v4, Keyframe, v23, -v20, 1);
  OZChannel::getKeyframeOutputTangents(v6, v7, &v23, 0, 1);
  OZChannel::setKeyframeOutputTangents(v6, v7, v23, v22, 1);
  OZChannel::getKeyframeInputTangents(v6, v7, &v23, 0, 1);
  return OZChannel::setKeyframeInputTangents(v6, v7, v23, -v22, 1);
}

uint64_t OZChannel2D::flattenAtTime(OZChannel2D *this, const CMTime *a2)
{
  long long v4 = (OZChannel *)((char *)this + 136);
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 136), a2);
  CMTime v6 = (OZChannel *)((char *)this + 288);
  CMTime v7 = (void *)OZChannel::getKeyframe(v6, a2);
  OZChannel::setKeyframeOutputTangents(v4, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(v4, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeOutputTangents(v6, v7, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(v6, v7, 0.0, 0.0, 1);
  OZChannel::setKeyframeTangentsBroken(v4, Keyframe);

  return OZChannel::setKeyframeTangentsBroken(v6, v7);
}

uint64_t OZChannel2D::setLinearAtTime(OZChannel2D *this, const CMTime *a2)
{
  long long v4 = (OZChannel *)((char *)this + 136);
  Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 136), a2);
  CMTime v6 = (OZChannel *)((char *)this + 288);
  CMTime v7 = (void *)OZChannel::getKeyframe(v6, a2);
  OZChannel::setKeyframeInterpolation(v4, Keyframe);

  return OZChannel::setKeyframeInterpolation(v6, v7);
}

uint64_t OZChannel2D::setValue(OZChannel2D *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v5 = (char *)this + 136;
  (*(void (**)(char *, double))(*((void *)this + 17) + 712))((char *)this + 136, a3);
  CMTime v6 = *(uint64_t (**)(__n128))(*((void *)v5 + 19) + 712);
  v7.n128_f64[0] = a4;

  return v6(v7);
}

uint64_t OZChannel2D::setValueOffsetByBehaviors(OZChannel2D *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v8 = (OZChannelBase *)((char *)this + 136);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  double v10 = a3 - v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  double v12 = a4 - v11;
  OZChannelBase::globalToLocalTime(v8, a2, (uint64_t)&v18);
  double CurveValue = OZChannel::getCurveValue((OZChannel *)v8, &v18, 0);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 288), a2, (uint64_t)&v18);
  double v14 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v18, 0);
  double v15 = v10 + CurveValue;
  double v16 = v12 + v14;
  (*(void (**)(OZChannelBase *, const CMTime *, void, double))(*((void *)this + 17) + 712))(v8, a2, 0, v15);
  return (*(uint64_t (**)(char *, const CMTime *, void, double))(*((void *)this + 36) + 712))((char *)this + 288, a2, 0, v16);
}

void OZChannel2D::simplify(OZChannelFolder *this, const CMTime *a2, CMTime *a3, const CMTime *a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  double v11 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (a6 == 4)
  {
    memset(&v86, 0, sizeof(v86));
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    long long v85 = 0;
    CMTime v82 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    double v12 = (uint64_t *)*((void *)this + 14);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (v12[1] != *v12)
      {
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        do
        {
          double v16 = *(const void **)(v13 + 8 * v14);
          if (v16)
          {
            if (v17)
            {
              CMTime v18 = v17;
              OZChannel::getKeyframes(v17, 0, &v81);
              CMTimeValue value = *(void ***)&v81.timescale;
              if (*(void *)&v81.timescale != v81.value)
              {
                uint64_t v20 = 0;
                unsigned int v21 = 0;
                CMTimeValue value = (void **)v81.value;
                do
                {
                  OZChannel::getKeyframe(v18, value[v20], &v82, 0);
                  unint64_t v23 = v86.value;
                  unint64_t v22 = *(void *)&v86.timescale;
                  if (v86.value == *(void *)&v86.timescale)
                  {
                    CMTimeValue v25 = v86.value;
                    CMTimeValue v26 = v86.value;
                  }
                  else
                  {
                    while (1)
                    {
                      long long v24 = *(_OWORD *)v23;
                      time1.CMTimeEpoch epoch = *(void *)(v23 + 16);
                      *(_OWORD *)&time1.CMTimeValue value = v24;
                      CMTime time2 = v82;
                      if (!CMTimeCompare(&time1, &time2)) {
                        break;
                      }
                      v23 += 24;
                      if (v23 == v22)
                      {
                        unint64_t v23 = v22;
                        break;
                      }
                    }
                    CMTimeValue v25 = *(void *)&v86.timescale;
                    CMTimeValue v26 = v23;
                    unint64_t v23 = *(void *)&v86.timescale;
                  }
                  if (v26 == v23)
                  {
                    if (v23 >= v86.epoch)
                    {
                      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v86.value) >> 3);
                      unint64_t v30 = v29 + 1;
                      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        goto LABEL_100;
                      }
                      if (0x5555555555555556 * ((v86.epoch - v86.value) >> 3) > v30) {
                        unint64_t v30 = 0x5555555555555556 * ((v86.epoch - v86.value) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((v86.epoch - v86.value) >> 3) >= 0x555555555555555) {
                        unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v31 = v30;
                      }
                      if (v31) {
                        double v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v86.epoch, v31);
                      }
                      else {
                        double v32 = 0;
                      }
                      CMTimeValue v33 = &v32[24 * v29];
                      long long v34 = *(_OWORD *)&v82.value;
                      *((void *)v33 + PCSpinLock::lock(this + 2) = v82.epoch;
                      *(_OWORD *)CMTimeValue v33 = v34;
                      CMTimeValue v36 = v86.value;
                      long long v35 = *(char **)&v86.timescale;
                      CMTimeValue v37 = (CMTimeValue)v33;
                      if (*(void *)&v86.timescale != v86.value)
                      {
                        do
                        {
                          long long v38 = *(_OWORD *)(v35 - 24);
                          *(void *)(v37 - OZSpline::reparametrize((uint64_t)this + 8) = *((void *)v35 - 1);
                          *(_OWORD *)(v37 - 24) = v38;
                          v37 -= 24;
                          v35 -= 24;
                        }
                        while (v35 != (char *)v36);
                        long long v35 = (char *)v86.value;
                      }
                      unint64_t v28 = (unint64_t)(v33 + 24);
                      v86.CMTimeValue value = v37;
                      *(void *)&v86.int32_t timescale = v33 + 24;
                      v86.CMTimeEpoch epoch = (CMTimeEpoch)&v32[24 * v31];
                      if (v35) {
                        operator delete(v35);
                      }
                    }
                    else
                    {
                      long long v27 = *(_OWORD *)&v82.value;
                      *(void *)(v23 + 16) = v82.epoch;
                      *(_OWORD *)unint64_t v23 = v27;
                      unint64_t v28 = v23 + 24;
                    }
                    *(void *)&v86.int32_t timescale = v28;
                    if (v15)
                    {
                      double v39 = v84;
                      if (v84 >= (void *)v85)
                      {
                        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (unsigned char *)v83) >> 3);
                        unint64_t v43 = v42 + 1;
                        if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_100:
                        }
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * ((v85 - (unsigned char *)v83) >> 3) > v43) {
                          unint64_t v43 = 0x5555555555555556 * ((v85 - (unsigned char *)v83) >> 3);
                        }
                        if (0xAAAAAAAAAAAAAAABLL * ((v85 - (unsigned char *)v83) >> 3) >= 0x555555555555555) {
                          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
                        }
                        else {
                          unint64_t v44 = v43;
                        }
                        if (v44) {
                          CMTime v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v85, v44);
                        }
                        else {
                          CMTime v45 = 0;
                        }
                        CMTime v46 = &v45[24 * v42];
                        long long v47 = *(_OWORD *)&v82.value;
                        *((void *)v46 + PCSpinLock::lock(this + 2) = v82.epoch;
                        *(_OWORD *)CMTime v46 = v47;
                        CMTime v49 = (char *)v83;
                        __n128 v48 = (char *)v84;
                        uint64_t v50 = v46;
                        if (v84 != v83)
                        {
                          do
                          {
                            long long v51 = *(_OWORD *)(v48 - 24);
                            *((void *)v50 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v48 - 1);
                            *(_OWORD *)(v50 - 24) = v51;
                            v50 -= 24;
                            v48 -= 24;
                          }
                          while (v48 != v49);
                          __n128 v48 = (char *)v83;
                        }
                        uint64_t v41 = v46 + 24;
                        uint64_t v83 = v50;
                        uint64_t v84 = v46 + 24;
                        long long v85 = &v45[24 * v44];
                        if (v48) {
                          operator delete(v48);
                        }
                      }
                      else
                      {
                        long long v40 = *(_OWORD *)&v82.value;
                        v84[2] = v82.epoch;
                        *double v39 = v40;
                        uint64_t v41 = (void *)v39 + 3;
                      }
                      uint64_t v84 = v41;
                    }
                  }
                  CMTimeValue value = (void **)v81.value;
                  uint64_t v20 = ++v21;
                }
                while (v21 < (unint64_t)((*(void *)&v81.timescale - v81.value) >> 3));
              }
              if (value)
              {
                *(void *)&v81.int32_t timescale = value;
                operator delete(value);
              }
              double v12 = (uint64_t *)*((void *)this + 14);
              uint64_t v13 = *v12;
            }
          }
          uint64_t v14 = ++v15;
        }
        while (v15 < (unint64_t)((v12[1] - v13) >> 3));
        uint64_t v52 = v83;
        uint64_t v8 = a3;
        double v11 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (v84 != v83)
        {
          uint64_t v53 = 0;
          unsigned int v54 = 1;
          do
          {
            (*(void (**)(OZChannelFolder *, uint64_t))(*(void *)this + 600))(this, (uint64_t)v52 + 24 * v53);
            uint64_t v53 = v54;
            uint64_t v52 = v83;
          }
          while (0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (unsigned char *)v83) >> 3) > v54++);
        }
      }
      double v79 = 0.0;
      double v80 = 0.0;
      double v77 = 0.0;
      double v78 = 0.0;
      double v75 = 0.0;
      double v76 = 0.0;
      CMTime v81 = *v11;
      CMTime v56 = (OZChannel *)((char *)this + 136);
      OZChannel::getKeyframes((OZChannel *)((char *)this + 136), 0, &v73);
      CMTime v57 = (OZChannel *)((char *)this + 288);
      OZChannel::getKeyframes(v57, 0, __p);
      uint64_t v58 = v74;
      if (v74 != v73)
      {
        OZChannel::getKeyframe(v56, *(void **)v73, 0, &v80);
        OZChannel::getKeyframe(v57, *(void **)__p[0], 0, &v79);
        uint64_t v58 = (void **)v73;
        if ((unint64_t)((((char *)v74 - (unsigned char *)v73) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v59 = *(void **)__p[0];
          uint64_t v60 = *(void **)v73;
          uint64_t v61 = 1;
          LODWORD(v6PCSpinLock::lock(this + 2) = 1;
          do
          {
            OZChannel::getKeyframe(v56, v58[v61], &v81, &v76);
            OZChannel::getKeyframe(v57, *((void **)__p[0] + v61), 0, &v75);
            CMTime time1 = v81;
            CMTime time2 = *a2;
            if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v81, CMTime time2 = *v8, CMTimeCompare(&time1, &time2) > 0))
            {
              double v79 = v75;
              double v80 = v76;
              uint64_t v58 = (void **)v73;
              uint64_t v60 = (void *)*((void *)v73 + v61);
              uint64_t v59 = (void *)*((void *)__p[0] + v61);
              unint64_t v62 = (v62 + 1);
            }
            else
            {
              unint64_t v62 = (v62 + 1);
              OZChannel::getKeyframe(v56, *((void **)v73 + v62), 0, &v78);
              OZChannel::getKeyframe(v57, *((void **)__p[0] + v62), 0, &v77);
              double v63 = (v75 - v79) / (v76 - v80);
              double v64 = (v77 - v75) / (v78 - v76);
              if ((v63 <= 0.0 || v64 >= 0.0) && (v63 >= 0.0 || v64 <= 0.0))
              {
                OZChannel::willBeModified(v56, 1);
                OZChannel::deleteKeyframe(v56, *((void **)v73 + v61));
                OZChannel::willBeModified(v57, 1);
                OZChannel::deleteKeyframe(v57, *((void **)__p[0] + v61));
                OZChannel::deriveKeyframe(v56, v60);
                OZChannel::deriveKeyframe(v57, v59);
                OZChannel::deriveKeyframe(v56, *((void **)v73 + v62));
                OZChannel::deriveKeyframe(v57, *((void **)__p[0] + v62));
                uint64_t v58 = (void **)v73;
              }
              else
              {
                double v79 = v75;
                double v80 = v76;
                uint64_t v58 = (void **)v73;
                uint64_t v60 = (void *)*((void *)v73 + v61);
                uint64_t v59 = (void *)*((void *)__p[0] + v61);
              }
            }
            uint64_t v61 = v62;
          }
          while (v74 - v58 - 1 > v62);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
        uint64_t v58 = (void **)v73;
      }
      if (v58)
      {
        long long v74 = v58;
        operator delete(v58);
      }
      if (v83)
      {
        uint64_t v84 = v83;
        operator delete(v83);
      }
    }
    uint64_t v70 = (void *)v86.value;
    if (v86.value)
    {
      *(void *)&v86.int32_t timescale = v86.value;
      goto LABEL_98;
    }
  }
  else
  {
    OZChannelFolder::simplify(this, a2, a3, a4, a5, a6, a7, a8);
    CMTime v86 = *v11;
    OZChannel::getKeyframes((OZChannel *)((char *)this + 136), 0, &v83);
    OZChannel::getKeyframes((OZChannel *)((char *)this + 288), 0, &v82);
    if (v84 != v83)
    {
      unint64_t v65 = 0;
      unsigned int v66 = 1;
      do
      {
        CMTime time1 = v86;
        CMTime time2 = *a2;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CMTime time1 = v86;
          CMTime time2 = *v8;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            OZChannel::getKeyframe((OZChannel *)((char *)this + 136), *((void **)v83 + v65), &v86, 0);
            (*(void (**)(CMTime *__return_ptr, OZChannelFolder *, CMTime *))(*(void *)this + 336))(&time1, this, &v86);
            if ((OZChannel::hasKeypointAt((OZChannel *)((char *)this + 288), &time1) & 1) == 0) {
              OZChannel::setKeyframe((OZChannel *)((char *)this + 288), &v86);
            }
          }
        }
        unint64_t v65 = v66++;
      }
      while (v65 < ((char *)v84 - (unsigned char *)v83) >> 3);
    }
    __n128 v67 = *(void **)&v82.timescale;
    if (*(void *)&v82.timescale != v82.value)
    {
      unint64_t v68 = 0;
      unsigned int v69 = 1;
      do
      {
        CMTime time1 = v86;
        CMTime time2 = *a2;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CMTime time1 = v86;
          CMTime time2 = *v8;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            OZChannel::getKeyframe((OZChannel *)((char *)this + 288), *(void **)(v82.value + 8 * v68), &v86, 0);
            (*(void (**)(CMTime *__return_ptr, OZChannelFolder *, CMTime *))(*(void *)this + 336))(&time1, this, &v86);
            if ((OZChannel::hasKeypointAt((OZChannel *)((char *)this + 136), &time1) & 1) == 0) {
              OZChannel::setKeyframe((OZChannel *)((char *)this + 136), &v86);
            }
          }
        }
        unint64_t v68 = v69;
        __n128 v67 = (void *)v82.value;
        ++v69;
      }
      while (v68 < (*(void *)&v82.timescale - v82.value) >> 3);
    }
    if (v67)
    {
      *(void *)&v82.int32_t timescale = v67;
      operator delete(v67);
    }
    uint64_t v70 = v83;
    if (v83)
    {
      uint64_t v84 = v83;
LABEL_98:
      operator delete(v70);
    }
  }
}

void sub_1B79C53A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  long long v35 = *(void **)(v33 - 176);
  if (v35)
  {
    *(void *)(v33 - 16OZSpline::reparametrize((uint64_t)this + 8) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

__CFString *OZChannel2D::getObjCWrapperName(OZChannel2D *this)
{
  return @"CHChannel2D";
}

void non-virtual thunk to'OZChannel2D::~OZChannel2D(OZChannel2D *this)
{
}

{
  uint64_t vars8;

  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  uint64_t Instance = (OZFactory *)OZChannel3D_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, Instance, a5, a6, a7, a8, a9, a10, a11);
  *(void *)this = &unk_1F1106258;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11065B8;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, @"Channel Z");
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), a4, &v25, (OZChannelFolder *)this, 3u, 0, a10, a11);
  PCString::~PCString(&v25);
}

void sub_1B79C561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannel3D_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a2, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F1106258;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11065B8;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, @"Channel Z");
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), &v19, (OZChannelFolder *)this, 3u, 0, a7, a8);
  PCString::~PCString(&v19);
}

void sub_1B79C5750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7);
  *(void *)double v10 = &unk_1F1106258;
  *((void *)v10 + PCSpinLock::lock(this + 2) = &unk_1F11065B8;
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, @"Channel Z");
  OZChannelDouble::OZChannelDouble((OZChannel3D *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 0, a6, a7);
  PCString::~PCString(&v12);
}

void sub_1B79C5838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannel3D::OZChannel3D(OZChannel3D *this, const OZChannel3D *a2, OZChannelFolder *a3)
{
  OZChannel2D::OZChannel2D(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1106258;
  *(void *)(v5 + 16) = &unk_1F11065B8;
  OZChannel::OZChannel((OZChannel *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
}

void sub_1B79C5914(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel3D::clone(OZChannel3D *this)
{
}

void sub_1B79C5978(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannel3D::copy(OZChannel3D *this, const OZChannelBase *a2, char a3)
{
  OZChannel2D::copy(this, a2, a3);
  if (a2) {
  else
  }
    CMTime v6 = 0;

  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)(v6 + 440), a3);
}

uint64_t OZChannel3D::setValue(OZChannel3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  __n128 v7 = (char *)this + 136;
  (*(void (**)(char *, const CMTime *, void, double))(*((void *)this + 17) + 712))((char *)this + 136, a2, 0, a3);
  (*(void (**)(double))(*((void *)v7 + 19) + 712))(a4);
  uint64_t v8 = *(uint64_t (**)(__n128))(*((void *)v7 + 38) + 712);
  v9.n128_f64[0] = a5;

  return v8(v9);
}

__CFString *OZChannel3D::getObjCWrapperName(OZChannel3D *this)
{
  return @"CHChannel3D";
}

void OZChannel3D::~OZChannel3D(OZChannel3D *this)
{
  *(void *)this = &unk_1F1106258;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));

  OZChannel2D::~OZChannel2D(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1106258;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannel3D::~OZChannel3D(OZChannel3D *this)
{
  uint64_t v1 = (OZChannel3D *)((char *)this - 16);
  *((void *)this - PCSpinLock::lock(this + 2) = &unk_1F1106258;
  *(void *)this = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 424));

  OZChannel2D::~OZChannel2D(v1);
}

{
  OZChannel3D::~OZChannel3D((OZChannel3D *)((char *)this - 16));
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  this->var0 = (void **)&unk_1F1106628;
  this->var1 = a2;
  this->var2 = (void **)&unk_1F11068F8;
  p_var4 = &this->var4;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a5;
  this->var9 = 0;
  this->var6 = a4;
  this->var7 = a6 | 0x10u;
  if (a4) {
    OZChannelFolder::push_back(a4, this);
  }
  PCString::set(p_var4, a3);
  this->var5 = 0;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  (*((void (**)(OZChannelBase *))this->var0 + 16))(this);
}

void sub_1B79C5DC0(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBase::registerParent(OZChannelBase *this, OZChannelFolder *a2)
{
  var6 = this->var6;
  if (var6) {
    BOOL v5 = var6 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = v5;
  if (!v5) {
    OZChannelFolder::removeDescendant(var6, this);
  }
  this->var6 = a2;
  return v6;
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  this->var0 = (void **)&unk_1F1106628;
  this->var1 = a2;
  this->var2 = (void **)&unk_1F11068F8;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a4;
  this->var9 = 0;
  this->var6 = 0;
  this->var7 = 16;
  PCString::set(v7, a3);
  this->var5 = 0;
  *(_OWORD *)&this->var10 = 0u;
  *(_OWORD *)&this->var12 = 0u;
  (*((void (**)(OZChannelBase *))this->var0 + 16))(this);
}

void sub_1B79C5EEC(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, const OZChannelBase *a2)
{
  var1 = a2->var1;
  this->var0 = (void **)&unk_1F1106628;
  this->var1 = var1;
  this->var2 = (void **)&unk_1F11068F8;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a2->var3;
  *(_OWORD *)&this->var7 = *(_OWORD *)&a2->var7;
  this->var9 = 0;
  this->var6 = 0;
  PCString::set(v5, &a2->var4);
  this->var5 = 0;
  if (a2->var5) {
    operator new();
  }
  this->var10 = 0;
  this->var11 = 0;
  this->var12 = 0;
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
  this->var13 = a2->var13;
}

void sub_1B79C6008(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x60C4044C4A2DFLL);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::setLabelCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  var10 = this->var10;
  if (var10 != cf)
  {
    if (var10) {
      CFRelease(var10);
    }
    this->var10 = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void OZChannelBase::setParameterCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  var11 = this->var11;
  if (var11 != cf)
  {
    if (var11) {
      CFRelease(var11);
    }
    this->var11 = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void OZChannelBase::setInspectorCtlrClassName(OZChannelBase *this, __CFString *cf)
{
  var12 = this->var12;
  if (var12 != cf)
  {
    if (var12) {
      CFRelease(var12);
    }
    this->var12 = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void OZChannelBase::OZChannelBase(OZChannelBase *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  var1 = a2->var1;
  this->var0 = (void **)&unk_1F1106628;
  this->var1 = var1;
  this->var2 = (void **)&unk_1F11068F8;
  p_var4 = &this->var4;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var4);
  this->var3 = a2->var3;
  *(_OWORD *)&this->var7 = *(_OWORD *)&a2->var7;
  this->var9 = 0;
  this->var6 = a3;
  if (a3) {
    OZChannelFolder::push_back(a3, this);
  }
  PCString::set(p_var4, &a2->var4);
  this->var5 = 0;
  if (a2->var5) {
    operator new();
  }
  this->var10 = 0;
  this->var11 = 0;
  this->var12 = 0;
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  OZChannelBase::setInspectorCtlrClassName(this, a2->var12);
  this->var13 = a2->var13;
}

void sub_1B79C6278(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x60C4044C4A2DFLL);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelBase::~OZChannelBase(OZChannelBase *this)
{
  this->var0 = (void **)&unk_1F1106628;
  this->var2 = (void **)&unk_1F11068F8;
  OZChannelBase::nofityObjCWrapperWillDelete(this);
  OZChannelBase::setResetCallback(this, 0, 0, 0);
  OZChannelBase::cleanup(this);
  if (this->var6) {
    this->var6 = 0;
  }
  PCString::~PCString(&this->var4);
}

{
  uint64_t vars8;

  OZChannelBase::~OZChannelBase(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBase::setResetCallback(OZChannelBase *this, void (*a2)(OZChannelBase *, void *), uint64_t *a3, char a4)
{
  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1) {
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  }
  if (OZChannelBase::_pResetCallbackDataTable)
  {
    uint64_t v8 = (os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable;
    OZChannelBase::ResetCallbackDataTable::setResetCallbackForChannel(v8, this, a2, a3, a4);
  }
}

void OZChannelBase::cleanup(OZChannelBase *this)
{
  var5 = this->var5;
  if (var5)
  {
    PCString::~PCString(var5);
    MEMORY[0x1BA9BFBA0]();
    this->var5 = 0;
  }
  var10 = this->var10;
  if (var10) {
    CFRelease(var10);
  }
  var11 = this->var11;
  if (var11) {
    CFRelease(var11);
  }
  var12 = this->var12;
  if (var12)
  {
    CFRelease(var12);
  }
}

BOOL OZChannelBase::unregisterParent(OZChannelBase *this, OZChannelFolder *a2)
{
  BOOL v2 = this->var6 != 0;
  this->var6 = 0;
  return v2;
}

void non-virtual thunk to'OZChannelBase::~OZChannelBase(OZChannelBase *this)
{
}

{
  uint64_t vars8;

  OZChannelBase::~OZChannelBase((OZChannelBase *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *OZChannelBase::finishInitializing(OZChannelBase *this)
{
  this->var7 |= 0x200000000uLL;
  return this;
}

OZChannelBase *OZChannelBase::setFlag(OZChannelBase *this, uint64_t a2, char a3)
{
  long long v4 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0 && (a3 & 1) == 0) {
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  }
  v4->var7 |= a2;
  return this;
}

OZChannelBase *OZChannelBase::updateIDGenerator(OZChannelBase *this)
{
  if (this <= 0xD09DC2FF)
  {
    unsigned int v1 = atomic_load((unsigned int *)sIDGenerator);
    if (v1 <= this)
    {
      unsigned int v2 = v1;
      do
      {
        atomic_compare_exchange_strong(sIDGenerator, &v2, this + 1);
        if (v2 == v1) {
          break;
        }
        unsigned int v1 = v2;
      }
      while (v2 <= this);
    }
  }
  return this;
}

uint64_t OZChannelBase::getLastUsedUniqueID(OZChannelBase *this)
{
  return atomic_load((unsigned int *)sIDGenerator);
}

uint64_t OZChannelBase::getNextUniqueID(OZChannelBase *this)
{
  return atomic_fetch_add(sIDGenerator, 1u);
}

OZChannelBase *OZChannelBase::updateIDGenerator(OZChannelBase *this, const OZChannelFolder *a2)
{
  var0 = this[1].var0;
  if (var0)
  {
    uint64_t v3 = *var0;
    if (*var0 != var0[1])
    {
      do
      {
        uint64_t v4 = *v3;
        this = (OZChannelBase *)(*(uint64_t (**)(void, const OZChannelFolder *))(*(void *)*v3 + 696))(*v3, a2);
        if ((this & 1) == 0)
        {
          unsigned int v5 = *(_DWORD *)(v4 + 24);
          if (v5 <= 0xD09DC2FF)
          {
            unsigned int v6 = atomic_load((unsigned int *)sIDGenerator);
            if (v6 <= v5)
            {
              unsigned int v7 = v6;
              do
              {
                atomic_compare_exchange_strong(sIDGenerator, &v7, v5 + 1);
                if (v7 == v6) {
                  break;
                }
                unsigned int v6 = v7;
              }
              while (v7 <= v5);
            }
          }
          if ((*(unsigned char *)(v4 + 57) & 0x10) != 0)
          {
            if (!v8) {
              __cxa_bad_cast();
            }
            this = (OZChannelBase *)OZChannelBase::updateIDGenerator(v8, v9);
          }
        }
        ++v3;
      }
      while (v3 != var0[1]);
    }
  }
  return this;
}

uint64_t OZChannelBase::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1) ^ 1;
}

uint64_t OZChannelBase::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2);
  }
  return a1;
}

void OZChannelBase::clone(OZChannelBase *this)
{
}

void sub_1B79C683C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40384E9B0FLL);
  _Unwind_Resume(a1);
}

void OZChannelBase::copy(OZChannelBase *this, const OZChannelBase *a2)
{
  this->var3 = a2->var3;
  unint64_t var8 = a2->var8;
  this->var7 = a2->var7 | 0x40;
  this->unint64_t var8 = var8;
  PCString::set(&this->var4, &a2->var4);
  var5 = this->var5;
  unsigned int v6 = a2->var5;
  if (var5)
  {
    if (v6)
    {
      PCString::set(var5, v6);
    }
    else
    {
      PCString::~PCString(var5);
      MEMORY[0x1BA9BFBA0]();
      this->var5 = 0;
    }
  }
  else if (v6)
  {
    operator new();
  }
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  var12 = a2->var12;

  OZChannelBase::setInspectorCtlrClassName(this, var12);
}

void sub_1B79C6940(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL OZChannelBase::compare(OZChannelBase *this, const OZChannelBase *a2)
{
  int v4 = PCString::caseInsensitiveCompare(&this->var4, &a2->var4);
  BOOL result = 0;
  if (this->var3 == a2->var3 && this->var7 == a2->var7 && v4 == 0) {
    return 1;
  }
  return result;
}

void OZChannelBase::getRangeName(OZChannelBase *this@<X0>, OZFactoryBase *a2@<X1>, PCURL *a3@<X8>)
{
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)this, a2);

  PCURL::PCURL(a3, @"Channel Over Range Range Name");
}

void OZChannelBase::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  this->var7 = a2->var7 & 0xFFFFFFFFFFFFFFBFLL | (((this->var7 >> 6) & 1) << 6);
  OZChannelBase::setLabelCtlrClassName(this, a2->var10);
  OZChannelBase::setParameterCtlrClassName(this, a2->var11);
  var12 = a2->var12;

  OZChannelBase::setInspectorCtlrClassName(this, var12);
}

BOOL OZChannelBase::testFlag(OZChannelBase *this, uint64_t a2)
{
  return (this->var7 & a2) != 0;
}

OZChannelBase *OZChannelBase::resetFlag(OZChannelBase *this, uint64_t a2, char a3)
{
  int v4 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0 && (a3 & 1) == 0) {
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  }
  v4->var7 &= ~a2;
  return this;
}

BOOL OZChannelBase::allowsAssignment(OZChannelBase *this, const OZChannelBase *a2)
{
  return a2 != this;
}

uint64_t OZChannelBase::allowsDrag(OZChannelBase *this, const OZChannelBase *a2)
{
  return 1;
}

void ___ZN13OZChannelBase25getResetCallbackDataTableEv_block_invoke()
{
}

void sub_1B79C6B84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void OZChannelBase::ResetCallbackDataTable::~ResetCallbackDataTable(PCSpinLock *this)
{
  *(void *)&this->_lock._os_unfair_lock_opaque = &unk_1F11069A8;
  OZChannelBase::_pResetCallbackDataTable = 0;
  PCSpinLock::~PCSpinLock(this + 8);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[2], *(void **)&this[4]._lock._os_unfair_lock_opaque);

  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  uint64_t vars8;

  OZChannelBase::ResetCallbackDataTable::~ResetCallbackDataTable(this);

  JUMPOUT(0x1BA9BFBA0);
}

char *OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel(os_unfair_lock_s *this, OZChannelBase *a2)
{
  int v4 = this + 8;
  PCSpinLock::lock(this + 8);
  unsigned int v7 = *(void **)&this[4]._os_unfair_lock_opaque;
  unsigned int v6 = (char *)&this[4];
  unsigned int v5 = v7;
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = v6;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= (unint64_t)a2;
    if (v9 >= (unint64_t)a2) {
      double v11 = v5;
    }
    else {
      double v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = (char *)v5;
    }
    unsigned int v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v6)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    unint64_t v12 = *((void *)v8 + 4);
    uint64_t v13 = v8 + 40;
    if (v12 <= (unint64_t)a2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  PCSpinLock::unlock(v4);
  return v14;
}

void OZChannelBase::ResetCallbackDataTable::setResetCallbackForChannel(os_unfair_lock_s *this, OZChannelBase *a2, void (*a3)(OZChannelBase *, void *), uint64_t *a4, char a5)
{
  uint64_t v20 = a2;
  BOOL v10 = this + 8;
  PCSpinLock::lock(this + 8);
  uint64_t v13 = *(void **)&this[4]._os_unfair_lock_opaque;
  unint64_t v12 = (char *)&this[4];
  double v11 = v13;
  uint64_t v14 = (uint64_t **)(v12 - 8);
  if (!v13) {
    goto LABEL_12;
  }
  unsigned int v15 = v12;
  do
  {
    unint64_t v16 = v11[4];
    BOOL v17 = v16 >= (unint64_t)a2;
    if (v16 >= (unint64_t)a2) {
      CMTime v18 = v11;
    }
    else {
      CMTime v18 = v11 + 1;
    }
    if (v17) {
      unsigned int v15 = (char *)v11;
    }
    double v11 = (void *)*v18;
  }
  while (*v18);
  if (v15 != v12 && *((void *)v15 + 4) <= (unint64_t)a2)
  {
    if (a3)
    {
      *((void *)v15 + 5) = a3;
      *((void *)v15 + 6) = a4;
      v15[56] = a5;
    }
    else
    {
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v14, (uint64_t *)v15);
      operator delete(v15);
    }
  }
  else
  {
LABEL_12:
    if (a3)
    {
      unsigned int v21 = &v20;
      PCString v19 = std::__tree<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::__map_value_compare<OZChannelBase *,std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::less<OZChannelBase *>,true>,std::allocator<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>>>::__emplace_unique_key_args<OZChannelBase *,std::piecewise_construct_t const&,std::tuple<OZChannelBase * const&>,std::tuple<>>(v14, (unint64_t *)&v20, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      v19[5] = (uint64_t *)a3;
      v19[6] = a4;
      *((unsigned char *)v19 + 56) = a5;
    }
  }
  PCSpinLock::unlock(v10);
}

void OZChannelBase::reset(OZChannelBase *this, uint64_t a2)
{
  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1) {
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  }
  if (OZChannelBase::_pResetCallbackDataTable)
  {
    ResetCallbackDataForChannel = OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel((os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable, this);
    if (ResetCallbackDataForChannel)
    {
      double v11 = *(void (**)(OZChannelBase *, uint64_t))ResetCallbackDataForChannel;
      if (ResetCallbackDataForChannel[16]) {
        OZChannelBase::ensureObjCWrapperExists(this, v5, (uint64_t)v11, v6, v7, v8, v9, v10);
      }
      uint64_t v12 = *((void *)ResetCallbackDataForChannel + 1);
      uint64_t v13 = this;
    }
    else
    {
      double v11 = (void (*)(OZChannelBase *, uint64_t))*((void *)this->var0 + 35);
      uint64_t v13 = this;
      uint64_t v12 = a2;
    }
    v11(v13, v12);
  }
}

uint64_t OZChannelBase::getResetCallback(OZChannelBase *this, void (**a2)(OZChannelBase *, void *), void **a3, BOOL *a4)
{
  if (OZChannelBase::getResetCallbackDataTable(void)::once != -1) {
    dispatch_once(&OZChannelBase::getResetCallbackDataTable(void)::once, &__block_literal_global_65);
  }
  if (!OZChannelBase::_pResetCallbackDataTable) {
    return 0;
  }
  uint64_t result = (uint64_t)OZChannelBase::ResetCallbackDataTable::getResetCallbackDataForChannel((os_unfair_lock_s *)OZChannelBase::_pResetCallbackDataTable, this);
  if (result)
  {
    if (a2) {
      *a2 = *(void (**)(OZChannelBase *, void *))result;
    }
    if (a3) {
      *a3 = *(void **)(result + 8);
    }
    if (a4) {
      *a4 = *(unsigned char *)(result + 16);
    }
    return 1;
  }
  return result;
}

void OZChannelBase::getFullDisplayName(OZChannelBase *this@<X0>, PCString *a2@<X8>)
{
  PCString::PCString(a2, &this->var4);
  PCString::PCString(&v8, ".");
  PCSharedCount::PCSharedCount((PCSharedCount *)&v7);
  var6 = this->var6;
  ChannelRootBase = (const PCString *)OZChannelBase::getChannelRootBase(this);
  if (ChannelRootBase) {
    PCString::set(&v7, ChannelRootBase + 4);
  }
  if (var6)
  {
    if (!(*(unsigned int (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6)
      || (PCString::insert(a2, 0, &v8),
          PCString::insert(a2, 0, (const PCString *)var6 + 4),
          (var6 = (OZChannelFolder *)*((void *)var6 + 6)) != 0))
    {
      if ((PCString::find(a2, &v7) & 0x80000000) != 0 && (*((void *)var6 + 7) & 0x4002000) != 0x2000)
      {
        uint64_t v6 = *((void *)var6 + 6);
        if (v6)
        {
          if ((*(void *)(v6 + 56) & 0x4002000) != 0x2000)
          {
            PCString::insert(a2, 0, &v8);
            PCString::insert(a2, 0, (const PCString *)var6 + 4);
            if ((*(unsigned char *)(v6 + 59) & 4) != 0)
            {
              PCString::insert(a2, 0, &v8);
              PCString::insert(a2, 0, (const PCString *)(v6 + 32));
            }
          }
        }
      }
    }
  }
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
}

void sub_1B79C70F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void *OZChannelBase::getChannelRootBase(OZChannelBase *this)
{
  if (!this) {
    return 0;
  }
  while ((this->var7 & 0x2000) == 0)
  {
    this = (OZChannelBase *)this->var6;
    if (!this) {
      return 0;
    }
  }
}

void OZChannelBase::setName(OZChannelBase *this, const PCString *a2, char a3)
{
  if ((a3 & 1) == 0) {
    (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 1);
  }

  PCString::set(&this->var4, a2);
}

void OZChannelBase::setInternalName(OZChannelBase *this, const PCString *a2)
{
  (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 1);
  var5 = this->var5;
  if (!var5) {
    operator new();
  }

  PCString::set(var5, a2);
}

void sub_1B79C72AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelBase::setID(OZChannelBase *this, unsigned int a2)
{
  this->var3 = a2;
  return this;
}

OZChannelBase *OZChannelBase::setFlags(OZChannelBase *this, unint64_t a2)
{
  uint64_t v3 = this;
  if ((a2 & 0xFFFFFFFDECA4CF86) != 0) {
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  }
  v3->var7 = a2;
  return this;
}

BOOL OZChannelBase::testDefaultFlag(OZChannelBase *this, uint64_t a2)
{
  return (this->var8 & a2) != 0;
}

uint64_t OZChannelBase::getObjectManipulator(OZChannelBase *this)
{
  if (!this) {
    return 0;
  }
  while ((this->var7 & 0x2000) == 0)
  {
    this = (OZChannelBase *)this->var6;
    if (!this) {
      return 0;
    }
  }

  return v2();
}

void OZChannelBase::getRef(OZChannelBase *this, int a2)
{
  if (this && a2)
  {
    unsigned int v2 = this;
    do
    {
      if ((v2->var7 & 0x2000) != 0) {
        operator new();
      }
      unsigned int v2 = (OZChannelBase *)v2->var6;
    }
    while (v2);
  }
  operator new();
}

void sub_1B79C74AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelBase::getAncestorRootBase(OZChannelBase *this)
{
  if (this)
  {
    uint64_t v1 = this;
    this = 0;
    do
    {
      if ((v1->var7 & 0x2000) != 0) {
      uint64_t v1 = (OZChannelBase *)v1->var6;
      }
    }
    while (v1);
  }
  return this;
}

__n128 OZChannelBase::getTimeOffset@<Q0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  var6 = this->var6;
  if (var6)
  {
    (*(void (**)(void))(*(void *)var6 + 320))();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
  }
  return result;
}

double OZChannelBase::globalToLocalTime@<D0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)&v6.CMTimeValue value = *(_OWORD *)&this->var0;
  v6.CMTimeEpoch epoch = (CMTimeEpoch)this->var2;
  CMTime v5 = *a2;
  return PC_CMTimeSaferSubtract(&v6, &v5, a3);
}

double OZChannelBase::localToGlobalTime@<D0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)&v6.CMTimeValue value = *(_OWORD *)&this->var0;
  v6.CMTimeEpoch epoch = (CMTimeEpoch)this->var2;
  CMTime v5 = *a2;
  return PC_CMTimeSaferAdd(&v6, &v5, a3);
}

__n128 OZChannelBase::globalToLocalTime@<Q0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  var13 = this->var13;
  if (var13)
  {
    (*(void (**)(OZChannelTimeConverter *, OZChannelBase *, const CMTime *))(*(void *)var13 + 16))(var13, this, a2);
  }
  else
  {
    var6 = this->var6;
    if (var6)
    {
      (*(void (**)(OZChannelFolder *, const CMTime *))(*(void *)var6 + 328))(var6, a2);
    }
    else
    {
      __n128 result = *(__n128 *)&a2->value;
      *(_OWORD *)a3 = *(_OWORD *)&a2->value;
      *(void *)(a3 + 16) = a2->epoch;
    }
  }
  return result;
}

__n128 OZChannelBase::localToGlobalTime@<Q0>(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  var13 = this->var13;
  if (var13)
  {
    (*(void (**)(OZChannelTimeConverter *, OZChannelBase *, const CMTime *))(*(void *)var13 + 24))(var13, this, a2);
  }
  else
  {
    var6 = this->var6;
    if (var6)
    {
      (*(void (**)(OZChannelFolder *, const CMTime *))(*(void *)var6 + 336))(var6, a2);
    }
    else
    {
      __n128 result = *(__n128 *)&a2->value;
      *(_OWORD *)a3 = *(_OWORD *)&a2->value;
      *(void *)(a3 + 16) = a2->epoch;
    }
  }
  return result;
}

CMTime *OZChannelBase::getFrameDuration@<X0>(OZChannelBase *this@<X0>, CMTime *a2@<X8>)
{
  ChannelRootBase = OZChannelBase::getChannelRootBase(this);
  if (ChannelRootBase)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)ChannelRootBase + 880);
    return (CMTime *)v4();
  }
  else
  {
    return CMTimeMake(a2, 1, 30);
  }
}

void OZChannelBase::keyframesWithChannelRef(OZChannelFolder *a1, _OWORD *a2, uint64_t **a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v5 = a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  v14[2] = a2[2];
  (*(void (**)(OZChannelFolder *, _OWORD *, uint64_t *))(*(void *)a1 + 536))(a1, v14, &v15);
  uint64_t v6 = v15;
  if (v16 != v15)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      OZChannelRef::OZChannelRef((OZChannelRef *)__p, *(OZChannelFolder **)(v6 + 32 * v7), a1);
      uint64_t v9 = v15;
      CMTime v18 = __p;
      uint64_t v10 = (char *)(std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__emplace_unique_key_args<OZChannelRef,std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(a3, __p, (uint64_t)&std::piecewise_construct, (long long **)&v18)+ 7);
      uint64_t v11 = v9 + 32 * v7;
      if (v10 != (char *)(v11 + 8)) {
        std::vector<_OZKeyframeInfo>::__assign_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(v10, *(char **)(v11 + 8), *(void *)(v11 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5));
      }
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v7 = v8;
      uint64_t v6 = v15;
      ++v8;
    }
    while (v7 < (v16 - v15) >> 5);
  }
  __p[0] = &v15;
  std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B79C7924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  CMTime __p = &a23;
  std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void OZChannelRef::~OZChannelRef(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t OZChannelBase::setKeyframesWithChannelRef(uint64_t result, CMTime *a2, uint64_t a3, void *a4, int a5)
{
  unint64_t v7 = (OZChannelBase *)result;
  CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  CMTime v32 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  unsigned int v8 = a4 + 1;
  uint64_t v9 = (void *)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    do
    {
      uint64_t v11 = v9[7];
      if (v9[8] != v11)
      {
        uint64_t v12 = 0;
        unsigned int v13 = 1;
        do
        {
          uint64_t v14 = (long long *)(v11 + 96 * v12);
          long long v15 = *v14;
          time1.CMTimeEpoch epoch = *((void *)v14 + 2);
          *(_OWORD *)&time1.CMTimeValue value = v15;
          CMTime time2 = v32;
          int32_t v16 = CMTimeCompare(&time1, &time2);
          uint64_t v17 = v9[7];
          if (v16 < 0) {
            CMTime v32 = *(CMTime *)(v17 + 96 * v12);
          }
          CMTime v18 = (long long *)(v17 + 96 * v12);
          long long v19 = *v18;
          time1.CMTimeEpoch epoch = *((void *)v18 + 2);
          *(_OWORD *)&time1.CMTimeValue value = v19;
          CMTime time2 = v33;
          __n128 result = CMTimeCompare(&time1, &time2);
          uint64_t v11 = v9[7];
          if ((int)result >= 1) {
            CMTime v33 = *(CMTime *)(v11 + 96 * v12);
          }
          uint64_t v12 = v13;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v9[8] - v11) >> 5) > v13++);
      }
      unsigned int v21 = (void *)v9[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          unsigned int v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (void *)v9[2];
          BOOL v23 = *v22 == (void)v9;
          uint64_t v9 = v22;
        }
        while (!v23);
      }
      uint64_t v9 = v22;
    }
    while (v22 != v8);
    uint64_t v9 = (void *)*a4;
  }
  if (v9 != v8)
  {
    do
    {
      __n128 result = (uint64_t)OZChannelRef::getChannel((OZChannelRef *)(v9 + 4), v7);
      if (result)
      {
        if (result)
        {
          long long v24 = (OZChannelBase *)result;
          if (a5)
          {
            CMTime time1 = v33;
            CMTime time2 = v32;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
            CMTime time1 = *a2;
            CMTime time2 = v30;
            v25.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
            (*((void (**)(OZChannelBase *, CMTime *, CMTime *, __n128))v24->var0 + 85))(v24, a2, &v31, v25);
          }
          memset(&v31, 0, sizeof(v31));
          CMTimeValue v26 = (long long *)v9[7];
          long long v27 = *v26;
          time1.CMTimeEpoch epoch = *((void *)v26 + 2);
          *(_OWORD *)&time1.CMTimeValue value = v27;
          CMTime time2 = v32;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
          CMTime time1 = *a2;
          CMTime time2 = v30;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
          __n128 result = OZChannel::setKeyframesWithInfo(v24, &v31, v9 + 7);
        }
      }
      unint64_t v28 = (void *)v9[1];
      if (v28)
      {
        do
        {
          unint64_t v29 = v28;
          unint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unint64_t v29 = (void *)v9[2];
          BOOL v23 = *v29 == (void)v9;
          uint64_t v9 = v29;
        }
        while (!v23);
      }
      uint64_t v9 = v29;
    }
    while (v29 != v8);
  }
  return result;
}

OZChannelBase *OZChannelRef::getChannel(OZChannelRef *this, OZChannelBase *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = this;
  if (*((char *)this + 23) < 0) {
    uint64_t v3 = *(OZChannelRef **)this;
  }
  if (*(unsigned char *)v3 == 46)
  {
    int v4 = *((unsigned __int8 *)v3 + 1);
    uint64_t v3 = (OZChannelRef *)((char *)v3 + 1);
    if (v4 == 47) {
      uint64_t v3 = (OZChannelRef *)((char *)v3 + 1);
    }
    __n128 result = a2;
  }
  else
  {
    __n128 result = 0;
  }
  while (1)
  {
    int v6 = 0;
    while (1)
    {
      int v7 = *(unsigned __int8 *)v3;
      if (!*(unsigned char *)v3 || v7 == 47) {
        break;
      }
      int v6 = (char)v7 + 10 * v6 - 48;
      uint64_t v3 = (OZChannelRef *)((char *)v3 + 1);
    }
    if ((char)v7 == 47) {
      uint64_t v3 = (OZChannelRef *)((char *)v3 + 1);
    }
    if (!result) {
      break;
    }
    if ((result->var7 & 0x1000) == 0) {
      return 0;
    }
    if (!result) {
      return result;
    }
    __n128 result = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)result, v6);
    if (!result) {
      return result;
    }
LABEL_22:
    if (!*(unsigned char *)v3) {
      return result;
    }
  }
  __n128 result = a2;
  if (a2->var3 == v6) {
    goto LABEL_22;
  }
  return 0;
}

void OZChannelBase::keypoints(OZChannelBase *this@<X0>, CMTimeRange *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((*((unsigned int (**)(OZChannelBase *, CMTimeRange *, uint64_t))this->var0 + 71))(this, a2, a4))
  {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), 1uLL);
    uint64_t v12 = &v10[24 * v11];
    long long v13 = *(_OWORD *)&a2->start.value;
    *((void *)v10 + PCSpinLock::lock(this + 2) = a2->start.epoch;
    *(_OWORD *)uint64_t v10 = v13;
    uint64_t v14 = v10 + 24;
    int32_t v16 = (char *)*a5;
    long long v15 = (char *)a5[1];
    if (v15 != *a5)
    {
      do
      {
        long long v17 = *(_OWORD *)(v15 - 24);
        *((void *)v10 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v15 - 1);
        *(_OWORD *)(v10 - 24) = v17;
        v10 -= 24;
        v15 -= 24;
      }
      while (v15 != v16);
      long long v15 = (char *)*a5;
    }
    *a5 = v10;
    a5[1] = v14;
    a5[2] = v12;
    if (v15) {
      operator delete(v15);
    }
    a5[1] = v14;
  }
  CMTime start = a2->start;
  if (a3 && (*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 78))(this, &start, a4))
  {
    CMTime v18 = (char *)a5[2];
    long long v19 = (char *)a5[1];
    if (v19 >= v18)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)*a5) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_67;
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)*a5) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25) {
        CMTimeValue v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v25);
      }
      else {
        CMTimeValue v26 = 0;
      }
      long long v27 = &v26[24 * v22];
      unint64_t v28 = &v26[24 * v25];
      long long v29 = *(_OWORD *)&start.value;
      *((void *)v27 + PCSpinLock::lock(this + 2) = start.epoch;
      *(_OWORD *)long long v27 = v29;
      unsigned int v21 = v27 + 24;
      CMTime v31 = (char *)*a5;
      CMTime v30 = (char *)a5[1];
      if (v30 != *a5)
      {
        do
        {
          long long v32 = *(_OWORD *)(v30 - 24);
          *((void *)v27 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v30 - 1);
          *(_OWORD *)(v27 - 24) = v32;
          v27 -= 24;
          v30 -= 24;
        }
        while (v30 != v31);
        CMTime v30 = (char *)*a5;
      }
      *a5 = v27;
      a5[1] = v21;
      a5[2] = v28;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)&start.value;
      *((void *)v19 + PCSpinLock::lock(this + 2) = start.epoch;
      *(_OWORD *)long long v19 = v20;
      unsigned int v21 = v19 + 24;
    }
    a5[1] = v21;
  }
  int v65 = a3;
  while ((*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 79))(this, &start, a4))
  {
    long long v33 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v33;
    *(_OWORD *)&range.duration.int32_t timescale = *(_OWORD *)&a2->duration.timescale;
    CMTimeRangeGetEnd(&v68, &range);
    CMTime time1 = start;
    CMTime time2 = v68;
    if (CMTimeCompare(&time1, &time2) > 0) {
      break;
    }
    long long v35 = (char *)a5[1];
    long long v34 = (char *)a5[2];
    if (v35 >= v34)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)*a5) >> 3);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_67;
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*a5) >> 3);
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41) {
        unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v41);
      }
      else {
        unint64_t v42 = 0;
      }
      unint64_t v43 = &v42[24 * v38];
      long long v44 = *(_OWORD *)&start.value;
      *((void *)v43 + PCSpinLock::lock(this + 2) = start.epoch;
      *(_OWORD *)unint64_t v43 = v44;
      CMTime v46 = (char *)*a5;
      CMTime v45 = (char *)a5[1];
      long long v47 = v43;
      if (v45 != *a5)
      {
        do
        {
          long long v48 = *(_OWORD *)(v45 - 24);
          *((void *)v47 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v45 - 1);
          *(_OWORD *)(v47 - 24) = v48;
          v47 -= 24;
          v45 -= 24;
        }
        while (v45 != v46);
        CMTime v45 = (char *)*a5;
      }
      CMTimeValue v37 = v43 + 24;
      *a5 = v47;
      a5[1] = v43 + 24;
      a5[2] = &v42[24 * v41];
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      long long v36 = *(_OWORD *)&start.value;
      *((void *)v35 + PCSpinLock::lock(this + 2) = start.epoch;
      *(_OWORD *)long long v35 = v36;
      CMTimeValue v37 = v35 + 24;
    }
    a5[1] = v37;
  }
  if (v65)
  {
    long long v49 = *(_OWORD *)&a2->start.epoch;
    *(_OWORD *)&v66.start.CMTimeValue value = *(_OWORD *)&a2->start.value;
    *(_OWORD *)&v66.start.CMTimeEpoch epoch = v49;
    *(_OWORD *)&v66.duration.int32_t timescale = *(_OWORD *)&a2->duration.timescale;
    CMTimeRangeGetEnd(&time1, &v66);
    CMTime start = time1;
    if ((*((unsigned int (**)(OZChannelBase *, CMTime *, uint64_t))this->var0 + 79))(this, &start, a4))
    {
      long long v51 = (char *)a5[1];
      uint64_t v50 = (char *)a5[2];
      if (v51 < v50)
      {
        long long v52 = *(_OWORD *)&start.value;
        *((void *)v51 + PCSpinLock::lock(this + 2) = start.epoch;
        *(_OWORD *)long long v51 = v52;
        uint64_t v53 = v51 + 24;
LABEL_65:
        a5[1] = v53;
        return;
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v51 - (unsigned char *)*a5) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (unsigned char *)*a5) >> 3);
        if (2 * v56 > v55) {
          unint64_t v55 = 2 * v56;
        }
        if (v56 >= 0x555555555555555) {
          unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57) {
          uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a5 + 2), v57);
        }
        else {
          uint64_t v58 = 0;
        }
        uint64_t v59 = &v58[24 * v54];
        uint64_t v60 = &v58[24 * v57];
        long long v61 = *(_OWORD *)&start.value;
        *((void *)v59 + PCSpinLock::lock(this + 2) = start.epoch;
        *(_OWORD *)uint64_t v59 = v61;
        uint64_t v53 = v59 + 24;
        double v63 = (char *)*a5;
        unint64_t v62 = (char *)a5[1];
        if (v62 != *a5)
        {
          do
          {
            long long v64 = *(_OWORD *)(v62 - 24);
            *((void *)v59 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v62 - 1);
            *(_OWORD *)(v59 - 24) = v64;
            v59 -= 24;
            v62 -= 24;
          }
          while (v62 != v63);
          unint64_t v62 = (char *)*a5;
        }
        *a5 = v59;
        a5[1] = v53;
        a5[2] = v60;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_65;
      }
LABEL_67:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
}

void sub_1B79C8368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBase::visibleKeypoints(OZChannelBase *this, CMTimeRange *a2)
{
  long long v2 = *(_OWORD *)&a2->start.epoch;
  v4[0] = *(_OWORD *)&a2->start.value;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&a2->duration.timescale;
  return (*((uint64_t (**)(OZChannelBase *, _OWORD *))this->var0 + 65))(this, v4);
}

void OZChannelBase::offsetKeyframesInRange(OZChannelBase *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, const CMTime *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  CMTime v59 = *a4;
  CMTime __p = 0;
  unint64_t v57 = 0;
  uint64_t v58 = 0;
  if ((*((unsigned int (**)(OZChannelBase *, const CMTime *, void))this->var0 + 71))(this, a2, 0))
  {
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v58, 1uLL);
    long long v15 = &v13[24 * v14];
    long long v16 = *(_OWORD *)&a2->value;
    *((void *)v13 + PCSpinLock::lock(this + 2) = a2->epoch;
    *(_OWORD *)long long v13 = v16;
    long long v17 = v13 + 24;
    long long v19 = (char *)__p;
    CMTime v18 = v57;
    if (v57 != __p)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v13 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v18 - 1);
        *(_OWORD *)(v13 - 24) = v20;
        v13 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      CMTime v18 = (char *)__p;
    }
    CMTime __p = v13;
    unint64_t v57 = v17;
    uint64_t v58 = v15;
    if (v18) {
      operator delete(v18);
    }
    unint64_t v57 = v17;
  }
  CMTime v55 = *a2;
  while ((*((unsigned int (**)(OZChannelBase *, CMTime *, void))this->var0 + 79))(this, &v55, 0))
  {
    CMTime time1 = v55;
    CMTime time2 = *a3;
    if (CMTimeCompare(&time1, &time2) > 0) {
      break;
    }
    unsigned int v21 = v57;
    if (v57 >= v58)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (unsigned char *)__p) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((v58 - (unsigned char *)__p) >> 3) > v25) {
        unint64_t v25 = 0x5555555555555556 * ((v58 - (unsigned char *)__p) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v58 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v58, v26);
      }
      else {
        long long v27 = 0;
      }
      unint64_t v28 = &v27[24 * v24];
      long long v29 = *(_OWORD *)&v55.value;
      *((void *)v28 + PCSpinLock::lock(this + 2) = v55.epoch;
      *(_OWORD *)unint64_t v28 = v29;
      CMTime v31 = (char *)__p;
      CMTime v30 = v57;
      long long v32 = v28;
      if (v57 != __p)
      {
        do
        {
          long long v33 = *(_OWORD *)(v30 - 24);
          *((void *)v32 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v30 - 1);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          v30 -= 24;
        }
        while (v30 != v31);
        CMTime v30 = (char *)__p;
      }
      unint64_t v23 = v28 + 24;
      CMTime __p = v32;
      unint64_t v57 = v28 + 24;
      uint64_t v58 = &v27[24 * v26];
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)&v55.value;
      *((void *)v57 + PCSpinLock::lock(this + 2) = v55.epoch;
      *(_OWORD *)unsigned int v21 = v22;
      unint64_t v23 = v21 + 24;
    }
    unint64_t v57 = v23;
  }
  long long v34 = (char *)__p;
  if (__p == v57)
  {
    uint64_t v37 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a8 = *MEMORY[0x1E4F1FA48];
    *(void *)(a8 + 16) = *(void *)(v37 + 16);
    if (!v34) {
      return;
    }
    goto LABEL_50;
  }
  long long v35 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (a7)
  {
    CMTime time1 = v59;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      CMTime time1 = v59;
      CMTime time2 = *v35;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeEpoch v38 = *((void *)__p + 2);
        *(_OWORD *)&v54.CMTimeValue value = *(_OWORD *)__p;
        v54.CMTimeEpoch epoch = v38;
        CMTime v53 = *(CMTime *)__p;
        if ((*((unsigned int (**)(OZChannelBase *, CMTime *, void))this->var0 + 78))(this, &v54, 0))
        {
          CMTime time1 = v53;
          CMTime time2 = v59;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v52);
          CMTime time1 = v54;
          CMTime time2 = *a5;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v51);
          CMTime time1 = v52;
          CMTime time2 = v51;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            CMTime time1 = v54;
            CMTime time2 = *a5;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v51);
            CMTime time1 = v51;
            CMTime time2 = v53;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v52);
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      CMTimeEpoch v36 = *((void *)v57 - 1);
      *(_OWORD *)&v54.CMTimeValue value = *(_OWORD *)(v57 - 24);
      v54.CMTimeEpoch epoch = v36;
      CMTime v53 = *(CMTime *)(v57 - 1);
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, void))this->var0 + 79))(this, &v54, 0))
      {
        CMTime time1 = v53;
        CMTime time2 = v59;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v52);
        CMTime time1 = v54;
        CMTime time2 = *a5;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v51);
        CMTime time1 = v52;
        CMTime time2 = v51;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          CMTime time1 = v54;
          CMTime time2 = *a5;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v51);
          CMTime time1 = v51;
          CMTime time2 = v53;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v52);
LABEL_34:
          CMTime v59 = v52;
        }
      }
    }
  }
  CMTime time1 = v59;
  CMTime time2 = *v35;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    uint64_t v43 = -1431655765 * ((unint64_t)(v57 - (unsigned char *)__p) >> 3);
    if (v43)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 24 * v43;
      do
      {
        CMTime v46 = (char *)__p + v44;
        long long v47 = *(_OWORD *)((char *)__p + v44);
        time1.CMTimeEpoch epoch = *(void *)((char *)__p + v44 + 16);
        *(_OWORD *)&time1.CMTimeValue value = v47;
        CMTime time2 = v59;
        double v48 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v54);
        (*((void (**)(CMTime *__return_ptr, OZChannelBase *, char *, CMTime *, uint64_t, uint64_t, double))this->var0
         + 77))(&time1, this, v46, &v54, a6, a7, v48);
        v44 += 24;
      }
      while (v45 != v44);
    }
  }
  else
  {
    CMTime time1 = v59;
    CMTime time2 = *v35;
    if (CMTimeCompare(&time1, &time2) >= 1 && (int)(-1431655765 * ((v57 - (unsigned char *)__p) >> 3)) >= 1)
    {
      unint64_t v39 = -1431655765 * ((v57 - (unsigned char *)__p) >> 3) + 1;
      do
      {
        unint64_t v40 = (char *)__p + 24 * (v39 - 2);
        long long v41 = *(_OWORD *)v40;
        time1.CMTimeEpoch epoch = *((void *)v40 + 2);
        *(_OWORD *)&time1.CMTimeValue value = v41;
        CMTime time2 = v59;
        double v42 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v54);
        (*((void (**)(CMTime *__return_ptr, OZChannelBase *, char *, CMTime *, uint64_t, uint64_t, double))this->var0
         + 77))(&time1, this, v40, &v54, a6, a7, v42);
        --v39;
      }
      while (v39 > 1);
    }
  }
  *(CMTime *)a8 = v59;
  long long v34 = (char *)__p;
  if (__p)
  {
LABEL_50:
    unint64_t v57 = v34;
    operator delete(v34);
  }
}

void sub_1B79C8C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZChannelBase::setNameUnset(OZChannelBase *this, int a2)
{
  uint64_t v2 = 64;
  if (!a2) {
    uint64_t v2 = 0;
  }
  this->var7 = this->var7 & 0xFFFFFFFFFFFFFFBFLL | v2;
  return this;
}

uint64_t OZChannelBase::lock(OZChannelBase *this, int a2)
{
  uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
  uint64_t v5 = 4;
  if (!a2) {
    uint64_t v5 = 0;
  }
  this->var7 = this->var7 & 0xFFFFFFFFFFFFFFFBLL | v5;
  return result;
}

uint64_t OZChannelBase::isLocked(OZChannelBase *this, char a2)
{
  char v2 = a2 ^ 1;
  do
  {
    unint64_t var7 = this->var7;
    uint64_t v4 = (var7 >> 2) & 1;
    if (v2) {
      break;
    }
    if ((var7 & 4) != 0) {
      break;
    }
    char v2 = 0;
    uint64_t v4 = 0;
    this = (OZChannelBase *)this->var6;
  }
  while (this);
  return v4;
}

unint64_t OZChannelBase::isAnyAncestorLocked(OZChannelBase *this)
{
  var6 = this->var6;
  if (!var6) {
    return 0;
  }
  do
  {
    unint64_t v2 = *((void *)var6 + 7);
    unint64_t result = (v2 >> 2) & 1;
    if ((v2 & 4) != 0) {
      break;
    }
    var6 = (OZChannelFolder *)*((void *)var6 + 6);
  }
  while (var6);
  return result;
}

OZChannelBase *OZChannelBase::enable(OZChannelBase *this, int a2, char a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    if ((a3 & 1) == 0) {
      this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    }
    unint64_t v4 = v3->var7 & 0xFFFFFFFFFFFF7FFFLL;
  }
  else
  {
    if ((a3 & 1) == 0) {
      this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    }
    unint64_t v4 = v3->var7 | 0x8000;
  }
  v3->unint64_t var7 = v4;
  return this;
}

unint64_t OZChannelBase::isEnabled(OZChannelBase *this, int a2, int a3)
{
  unint64_t v4 = this;
  if (a3
    && (this->var7 & 0x80000) != 0
    && (ChannelRootBase = OZChannelBase::getChannelRootBase(this)) != 0
    && (*(unsigned int (**)(void *))(*(void *)ChannelRootBase + 792))(ChannelRootBase))
  {
    int v6 = v4;
    while (1)
    {
      int v6 = (OZChannelBase *)v6->var6;
      if (!v6) {
        break;
      }
      if ((v6->var7 & 0x40000) != 0) {
        return (v4->var7 & 0x8000) == 0;
      }
    }
    unint64_t var7 = v4->var7;
    if ((var7 & 0x40000) != 0) {
      return 1;
    }
    else {
      return (var7 >> 20) & 1;
    }
  }
  else
  {
    unint64_t result = (v4->var7 & 0x8000) == 0;
    if ((v4->var7 & 0x8000) == 0 && a2)
    {
      do
      {
        unint64_t v4 = (OZChannelBase *)v4->var6;
        unint64_t result = v4 == 0;
      }
      while (v4 && (v4->var7 & 0x8000) == 0);
    }
  }
  return result;
}

uint64_t OZChannelBase::isDisabled(OZChannelBase *this, int a2)
{
  unint64_t v2 = this;
  unint64_t var7 = this->var7;
  uint64_t result = (var7 >> 15) & 1;
  if ((var7 & 0x8000) == 0 && a2)
  {
    do
    {
      unint64_t v2 = (OZChannelBase *)v2->var6;
      uint64_t result = v2 != 0;
    }
    while (v2 && (v2->var7 & 0x8000) == 0);
  }
  return result;
}

OZChannelBase *OZChannelBase::solo(OZChannelBase *this, int a2)
{
  if ((this->var7 & 0x80000) != 0)
  {
    uint64_t v3 = this;
    this = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
    uint64_t v4 = 0x40000;
    if (!a2) {
      uint64_t v4 = 0;
    }
    v3->unint64_t var7 = v3->var7 & 0xFFFFFFFFFFFBFFFFLL | v4;
  }
  return this;
}

OZChannelBase *OZChannelBase::setChildSolo(OZChannelBase *this, char a2)
{
  do
  {
    if ((a2 & 1) == 0)
    {
      unint64_t var7 = this->var7;
      if ((var7 & 0x80000) != 0) {
        this->unint64_t var7 = var7 | 0x100000;
      }
    }
    a2 = 0;
    this = (OZChannelBase *)this->var6;
  }
  while (this);
  return this;
}

uint64_t OZChannelBase::isSolo(OZChannelBase *this)
{
  return (BYTE2(this->var7) >> 2) & 1;
}

OZChannelBase *OZChannelBase::saveStateAsDefault(OZChannelBase *this)
{
  this->unint64_t var8 = this->var7 & 0xFFFFFFFDECA4CF86;
  return this;
}

BOOL OZChannelBase::isDescendantOf(OZChannelBase *this, OZChannelBase *a2)
{
  do
    this = (OZChannelBase *)this->var6;
  while (this != a2 && this != 0);
  return this != 0;
}

OZChannelBase *OZChannelBase::willBeModified(OZChannelBase *this, uint64_t a2)
{
  if (this)
  {
    uint64_t v3 = this;
    while ((this->var7 & 0x2000) == 0)
    {
      this = (OZChannelBase *)this->var6;
      if (!this) {
        return this;
      }
    }
    uint64_t v5 = *(uint64_t (**)(void *, OZChannelBase *, uint64_t))(*(void *)v4 + 776);
    return (OZChannelBase *)v5(v4, v3, a2);
  }
  return this;
}

void *OZChannelBase::hasBeenModified(OZChannelBase *this, BOOL *a2)
{
  uint64_t result = OZChannelBase::getChannelRootBase(this);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void *, OZChannelBase *, BOOL *))(*(void *)result + 784);
    return (void *)v5(result, this, a2);
  }
  return result;
}

void *OZChannelBase::addToUndo(OZChannelBase *this, const PCString *a2)
{
  uint64_t result = OZChannelBase::getChannelRootBase(this);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void *, OZChannelBase *, const PCString *))(*(void *)result + 752);
    return (void *)v5(result, this, a2);
  }
  return result;
}

__CFString *OZChannelBase::getLabelCtlrClassName(OZChannelBase *this)
{
  return this->var10;
}

__CFString *OZChannelBase::getParameterCtlrClassName(OZChannelBase *this)
{
  return this->var11;
}

__CFString *OZChannelBase::getInspectorCtlrClassName(OZChannelBase *this)
{
  return this->var12;
}

unsigned char *OZChannelBase::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this->var1, (const OZFactory *)1);
}

unsigned char *non-virtual thunk to'OZChannelBase::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving((OZFactory *)this[-1].var13, (const OZFactory *)1);
}

uint64_t OZChannelBase::writeFlags(uint64_t result, TXSequenceChannels *a2, int a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(TXSequenceChannels *))(*(void *)a2 + 232))(a2);
    unint64_t v6 = -65;
    if (result) {
      unint64_t v6 = 0xFFFFFFFDECA4CF86;
    }
    unint64_t v7 = v6 & v3;
    if (v7)
    {
      if (a3)
      {
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBaseScope);
        (*(void (**)(TXSequenceChannels *, uint64_t))(*(void *)a2 + 16))(a2, 112);
        (*(void (**)(TXSequenceChannels *, unint64_t))(*(void *)a2 + 72))(a2, v7);
        (*(void (**)(TXSequenceChannels *))(*(void *)a2 + 24))(a2);
        return PCSerializerWriteStream::popScope((uint64_t)a2);
      }
      else
      {
        unsigned int v8 = *(uint64_t (**)(TXSequenceChannels *, uint64_t, unint64_t))(*(void *)a2 + 160);
        return v8(a2, 112, v7);
      }
    }
  }
  return result;
}

uint64_t OZChannelBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  char v3 = a3;
  if (a3 && OZFactory::fileRefID(this->var1, a2)) {
    int v6 = (*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2) ^ 1;
  }
  else {
    int v6 = 0;
  }
  TXSequenceChannels::pushChannelIntoChannelList((TXSequenceChannels *)a2, (OZChannelBase *)&OZChannelBaseScope);
  (*(void (**)(OZFactory *, uint64_t))(*(void *)a2 + 16))(a2, 110);
  p_var4 = &this->var4;
  uint64_t v8 = *(void *)a2;
  if (v6) {
    (*(void (**)(OZFactory *, uint64_t, PCString *))(v8 + 200))(a2, 110, p_var4);
  }
  else {
    (*(void (**)(OZFactory *, uint64_t, PCString *))(v8 + 216))(a2, 110, p_var4);
  }
  if ((*(unsigned int (**)(OZFactory *))(*(void *)a2 + 232))(a2) && (this->var7 & 0x80) != 0)
  {
    if (v3) {
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(OZFactory *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, this->var3);
    if (v3)
    {
LABEL_11:
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
  OZChannelBase::writeFlags((uint64_t)this, (TXSequenceChannels *)a2, 0);
  if (!v6) {
    goto LABEL_17;
  }
LABEL_15:
  if (((*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v10 = OZFactory::fileRefID(this->var1, v9);
    (*(void (**)(OZFactory *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v10);
  }
LABEL_17:

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZChannelBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  return OZChannelBase::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

OZChannelBase *OZChannelBase::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  if (a3) {
    return (OZChannelBase *)OZChannelBase::writeFlags((uint64_t)this, a2, 1);
  }
  return this;
}

OZChannelBase *non-virtual thunk to'OZChannelBase::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  if (a3) {
    return (OZChannelBase *)OZChannelBase::writeFlags((uint64_t)&this[-1].var12, a2, 1);
  }
  return this;
}

uint64_t OZChannelBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelBase::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelBase::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelBase::parseElement(OZChannelBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 112)
  {
    unint64_t v6 = 0;
    if ((*(unsigned int (**)(PCStreamElement *, unint64_t *))(*(void *)a3 + 48))(a3, &v6))
    {
      unint64_t v4 = v6;
      if ((v6 & 0xFFFFFFFDECA4CF86) != 0) {
        (*((void (**)(OZChannelBase *, uint64_t))this->var0 + 58))(this, 2);
      }
      this->unint64_t var7 = v4;
    }
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelBase::parseElement(OZChannelBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZChannelBase::getHash(OZChannelBase *this)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](this);
  char v3 = v2;
  v5[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v5);
  uint64_t v4 = v1[2];
  v1 += 2;
  (*(void (**)(void *, int8x8_t *, void))(v4 + 16))(v1, v5, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(*v1 + 24))(v1, v5, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v5 + 24))(v5);
  _OWORD *v3 = *(_OWORD *)PCHashWriteStream::getHash(v5)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v5);
}

void sub_1B79C97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t ChannelParser::parseBegin(ChannelParser *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t ChannelParser::parseElement(ChannelParser *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v23);
  unsigned int v22 = 0;
  int v21 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if ((v6 - 90) < 2)
  {
    PCSharedCount::PCSharedCount(&v20);
    uint64_t v19 = 0;
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v19);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v20);
    uint64_t v18 = 0;
    CStr = PCString::createCStr((PCString *)&v20);
    sscanf(CStr, "%d.%d", (char *)&v18 + 4, &v18);
    int v10 = v18;
    *((_DWORD *)a2 + 26) = HIDWORD(v18);
    *((_DWORD *)a2 + 27) = v10;
    free(CStr);
    PCString::~PCString((PCString *)&v20);
  }
  else if (v6 == 92)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v22);
    AttributeAsUUID = (OZFactories *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 117);
    uint64_t v12 = (unsigned int *)AttributeAsUUID;
    if (AttributeAsUUID)
    {
      uint64_t Instance = OZFactories::getInstance(AttributeAsUUID);
      Factory = (OZFactories *)OZFactories::findFactory(Instance, v12);
      long long v15 = (OZFactory *)Factory;
      if (Factory)
      {
        long long v16 = (OZFactories *)OZFactories::getInstance(Factory);
        OZFactories::setFactoryLoadID(v16, v22, v15);
      }
      MEMORY[0x1BA9BFBA0](v12, 0x1000C40451B5BE8);
    }
  }
  else if (v6 == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v21);
    LODWORD(v20.varOZSplineNode::allocOZSpline(this, 0) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v20);
    uint64_t v7 = *((void *)this + 1);
    *(_DWORD *)(v7 + 24) = v20.var0;
    *((unsigned char *)this + 16) = 1;
    if (v7) {
      uint64_t v8 = (PCSerializer *)(v7 + 16);
    }
    else {
      uint64_t v8 = 0;
    }
    PCSerializerReadStream::pushHandler(a2, v8);
  }
  PCString::~PCString((PCString *)&v23);
  return 1;
}

void sub_1B79C9A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  PCString::~PCString((PCString *)(v14 - 40));
  _Unwind_Resume(a1);
}

CFDataRef OZChannelBase::createChannelState(OZChannelBase *this, uint64_t a2, uint64_t a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  PCBufferWriteStream::PCBufferWriteStream((PCBufferWriteStream *)v11, 0x8000, 0x8000);
  PCXMLWriteStream::PCXMLWriteStream((PCXMLWriteStream *)&v12, (PCStream *)v11, 5u, 0xDu);
  int v6 = (OZFactories *)(*((uint64_t (**)(OZChannelBase *, void (***)(void **), void))this->var0
                       + 52))(this, &v12, 0);
  uint64_t Instance = (OZFactories *)OZFactories::getInstance(v6);
  OZFactories::saveFactories(Instance, (PCSerializerWriteStream *)&v12);
  var2 = this->var2;
  this = (OZChannelBase *)((char *)this + 16);
  ((void (*)(OZChannelBase *, void (***)(void **), uint64_t))var2[2])(this, &v12, 1);
  (*((void (**)(OZChannelBase *, void (***)(void **), uint64_t, uint64_t, uint64_t))this->var0 + 3))(this, &v12, 1, a2, a3);
  v12[3]((void **)&v12);
  PCXMLWriteStream::close((PCXMLWriteStream *)&v12);
  CFDataRef v9 = PCBufferWriteStream::copyData(v11);
  uint64_t v12 = (void (**)(void **))&unk_1F10C4280;
  PCURL::~PCURL((PCURL *)v16);
  std::deque<PCHash128>::~deque[abi:ne180100](v15);
  uint64_t v12 = (void (**)(void **))&unk_1F10C3F60;
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  PCBufferWriteStream::~PCBufferWriteStream((PCBufferWriteStream *)v11);
  return v9;
}

void sub_1B79C9C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t OZChannelBase::configureWithState(OZChannelBase *this, const __CFData *a2)
{
  v6[0] = &unk_1F11069E0;
  v6[1] = this;
  char v7 = 0;
  PCXMLReadStream::PCXMLReadStream((PCXMLReadStream *)v5, a2);
  PCSerializerReadStream::pushHandler((PCSerializerReadStream *)v5, (PCSerializer *)v6);
  unsigned int v2 = PCXMLReadStream::parse((PCXMLReadStream *)v5);
  if (v7) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)v5);
  return v3;
}

void sub_1B79C9CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZChannelRef::OZChannelRef(OZChannelRef *this, OZChannelFolder *a2, OZChannelFolder *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = 0;
  *((void *)this + PCSpinLock::lock(this + 2) = 0;
  memset(&v12, 0, sizeof(v12));
  MEMORY[0x1BA9BF660]();
  if (a2 != a3)
  {
    while (1)
    {
      snprintf(__str, 0x20uLL, "%u", *((_DWORD *)a2 + 6));
      if (*((char *)this + 23) < 0) {
        break;
      }
      if (*((unsigned char *)this + 23)) {
        goto LABEL_4;
      }
LABEL_5:
      MEMORY[0x1BA9BF660](&v12, __str);
      int v6 = *((char *)this + 23);
      if (v6 >= 0) {
        char v7 = (const std::string::value_type *)this;
      }
      else {
        char v7 = *(const std::string::value_type **)this;
      }
      if (v6 >= 0) {
        std::string::size_type v8 = *((unsigned __int8 *)this + 23);
      }
      else {
        std::string::size_type v8 = *((void *)this + 1);
      }
      std::string::append(&v12, v7, v8);
      std::string::operator=((std::string *)this, &v12);
      a2 = (OZChannelFolder *)*((void *)a2 + 6);
      if (a2 == a3)
      {
        if (a3)
        {
          strcpy(__str, ".");
          if (*((char *)this + 23) < 0)
          {
            if (*((void *)this + 1)) {
LABEL_18:
            }
              *(_WORD *)&__str[strlen(__str)] = 47;
          }
          else if (*((unsigned char *)this + 23))
          {
            goto LABEL_18;
          }
LABEL_24:
          MEMORY[0x1BA9BF660](&v12, __str);
          int v9 = *((char *)this + 23);
          if (v9 >= 0) {
            int v10 = (const std::string::value_type *)this;
          }
          else {
            int v10 = *(const std::string::value_type **)this;
          }
          if (v9 >= 0) {
            std::string::size_type v11 = *((unsigned __int8 *)this + 23);
          }
          else {
            std::string::size_type v11 = *((void *)this + 1);
          }
          std::string::append(&v12, v10, v11);
          std::string::operator=((std::string *)this, &v12);
        }
        goto LABEL_31;
      }
    }
    if (!*((void *)this + 1)) {
      goto LABEL_5;
    }
LABEL_4:
    *(_WORD *)&__str[strlen(__str)] = 47;
    goto LABEL_5;
  }
  if (a3)
  {
    snprintf(__str, 0x20uLL, "%u", *((_DWORD *)a2 + 6));
    if (*((char *)this + 23) < 0)
    {
      if (!*((void *)this + 1)) {
        goto LABEL_24;
      }
    }
    else if (!*((unsigned char *)this + 23))
    {
      goto LABEL_24;
    }
    *(_WORD *)&__str[strlen(__str)] = 47;
    goto LABEL_24;
  }
LABEL_31:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1B79C9F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelRef::OZChannelRef(OZChannelRef *this, PCString *a2)
{
  CStr = PCString::createCStr(a2);
  std::string::basic_string[abi:ne180100]<0>(this, CStr);
  free(CStr);
}

void OZChannelRef::OZChannelRef(OZChannelRef *this)
{
  *(void *)this = 0;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = 0;
  *((void *)this + PCSpinLock::lock(this + 2) = 0;
}

std::string *OZChannelRef::operator=(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  return a1;
}

void OZChannelRef::OZChannelRef(std::string *this, const OZChannelRef *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
  }
}

uint64_t OZChannelRef::getID(OZChannelRef *this)
{
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 23)) {
      return 0;
    }
    uint64_t v1 = this;
    LODWORD(vPCSpinLock::lock(this + 2) = *((unsigned __int8 *)this + 23);
LABEL_6:
    LODWORD(i) = v2 + 1;
    while (1)
    {
      unsigned int v4 = i - 2;
      if ((int)i - 2 < 0) {
        break;
      }
      LODWORD(i) = i - 1;
      if ((*((unsigned char *)v1 + v4) & 0xFE) == 0x2E)
      {
        uint64_t v2 = 0;
        for (unint64_t i = (int)i; ; ++i)
        {
          unint64_t v5 = *((unsigned __int8 *)this + 23);
          if ((*((unsigned char *)this + 23) & 0x80) != 0) {
            unint64_t v5 = *((void *)this + 1);
          }
          if (v5 <= i) {
            break;
          }
          uint64_t v2 = (*((char *)v1 + i) + 10 * v2 - 48);
        }
        return v2;
      }
    }
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v1 = *(OZChannelRef **)this;
    goto LABEL_6;
  }
  return v2;
}

void OZChannelRef::setID(std::string *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    unsigned int v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    LODWORD(size) = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return;
    }
    unsigned int v4 = this;
  }
  int v5 = size + 1;
  while (1)
  {
    int v6 = v5 - 2;
    if (v5 - 2 < 0) {
      break;
    }
    --v5;
    if ((v4->__r_.__value_.__s.__data_[v6] & 0xFE) == 0x2E)
    {
      memset(&v7, 0, sizeof(v7));
      snprintf(__str, 0xBuLL, "%u", a2);
      std::string::append(&v7, this, 0, v5);
      std::string::append(&v7, __str);
      std::string::operator=(this, &v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
      return;
    }
  }
}

void sub_1B79CA184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL OZChannelRef::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL OZChannelRef::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL OZChannelRef::operator<(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

OZChannelRef **OZChannelRef::getMotionOnlyPath(OZChannelRef **this)
{
  if (*((char *)this + 23) < 0) {
    this = (OZChannelRef **)*this;
  }
  uint64_t v1 = this;
  while (1)
  {
    int v2 = 0;
    for (unint64_t i = (OZChannelRef **)((char *)v1 + 1); ; unint64_t i = (OZChannelRef **)((char *)i + 1))
    {
      int v4 = *((unsigned __int8 *)i - 1);
      if (!*((unsigned char *)i - 1) || v4 == 47) {
        break;
      }
      int v2 = (char)v4 + 10 * v2 - 48;
    }
    if (!(_BYTE)v4 || v2 == 9999) {
      break;
    }
    uint64_t v1 = i;
    if (!*(unsigned char *)i) {
      return this;
    }
  }
  return v1;
}

void ChannelParser::~ChannelParser(ChannelParser *this)
{
}

uint64_t **std::__tree<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::__map_value_compare<OZChannelBase *,std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>,std::less<OZChannelBase *>,true>,std::allocator<std::__value_type<OZChannelBase *,OZChannelBase::ResetCallbackDataTable::ResetCallbackData>>>::__emplace_unique_key_args<OZChannelBase *,std::piecewise_construct_t const&,std::tuple<OZChannelBase * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        size_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      size_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    std::string::size_type v11 = operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[56] = 0;
    *((void *)v11 + 4) = v12;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<OZChannel *,std::vector<_OZKeyframeInfo>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    int v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__emplace_unique_key_args<OZChannelRef,std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__find_equal<OZChannelRef>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__find_equal<OZChannelRef>(uint64_t a1, void *a2, void *a3)
{
  size_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        unint64_t v8 = v4 + 4;
        if (!OZChannelRef::operator<(a3, v4 + 4)) {
          break;
        }
        int v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!OZChannelRef::operator<(v8, a3)) {
        break;
      }
      size_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::__map_value_compare<OZChannelRef,std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,std::less<OZChannelRef>,true>,std::allocator<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<OZChannelRef const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + OZSpline::reparametrize((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B79CA6F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<OZChannelRef,std::vector<_OZKeyframeInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<OZChannelRef const,std::vector<_OZKeyframeInfo>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<OZChannelRef const,std::vector<_OZKeyframeInfo>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 3PCSpinLock::lock(this + 2) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

char *std::vector<_OZKeyframeInfo>::__assign_with_size[abi:ne180100]<_OZKeyframeInfo*,_OZKeyframeInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((void *)result + atomic_store(0, (unint64_t *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<_OZKeyframeInfo>::__vallocate[abi:ne180100](v7, v12);
    BOOL v14 = (char *)v7[1];
    BOOL v13 = (void **)(v7 + 1);
    long long v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    long long v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *BOOL v13 = &v9[v17];
  return result;
}

void sub_1B79CA9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t DeleteDescendants(OZChannelFolder *a1)
{
  uint64_t result = (*(uint64_t (**)(OZChannelFolder *))(*(void *)a1 + 120))(a1);
  if ((result & 1) == 0)
  {
    if (!result)
    {
      while (1)
      {
        int v4 = (OZChannelBase ***)*((void *)a1 + 14);
        if (!v4) {
          break;
        }
        int v3 = *v4;
        if ((int)((*(void *)(*((void *)a1 + 14) + 8) - (void)v3) >> 3) < 1) {
          break;
        }
        uint64_t result = DeleteDescendant(a1, *v3);
      }
    }
  }
  return result;
}

uint64_t IterateDescendants(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = *(void **)(result + 112);
    if (v5 && ((v5[1] - *v5) >> 3))
    {
      uint64_t v6 = 0;
      int v7 = a2 & 1;
      uint64_t v8 = 8 * ((v5[1] - *v5) >> 3);
      do
      {
        long long v9 = *(OZChannelBase **)(*v5 + v6);
        unint64_t var7 = v9->var7;
        if ((a2 & 8) != 0 || (var7 & 2) == 0)
        {
          if ((*((unsigned int (**)(void))v9->var0 + 15))(*(void *)(*v5 + v6)))
          {
            CFStringRef v11 = (const __CFString *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 11))(v9);
            BOOL v12 = CFStringCompare(v11, @"CHChannelImageWithOptions", 0) != kCFCompareEqualTo;
          }
          else
          {
            BOOL v12 = 0;
          }
          BOOL v13 = (a2 & 4) == 0 && v12;
          if ((a2 & 2) == 0 || ((var7 & 0x1000) != 0 ? (v14 = !v13) : (v14 = 0), int v15 = a2 & 1, !v14))
          {
            if ((a2 & 0x10) != 0) {
              uint64_t v16 = (OZChannelBase *)CHPreexistingChannelWrapperForOZChannel(v9);
            }
            else {
              uint64_t v16 = CHChannelWrapperForOZChannel(v9, 0);
            }
            if (v16)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, OZChannelBase *))(a3 + 16))(a3, v16);
              if (!result) {
                return result;
              }
            }
            if (v12) {
              int v17 = 33;
            }
            else {
              int v17 = 65;
            }
            int v15 = v17 & a2;
            if ((var7 & 0x1000) == 0) {
              int v15 = v7;
            }
          }
          if ((var7 & 0x1000) != 0 && !v15)
          {
            uint64_t result = IterateDescendants(v18, a2, a3);
            if (!result) {
              return result;
            }
          }
        }
        v6 += 8;
      }
      while (v8 != v6);
    }
    return 1;
  }
  return result;
}

OZChannelBase *FixupNewChild(OZChannelFolder *a1, OZChannelBase *a2)
{
  uint64_t result = (OZChannelBase *)OZChannelFolder::getDescendant(a1, a2->var3);
  if (result)
  {
    uint64_t v5 = (uint64_t **)*((void *)a1 + 14);
    if (v5 && (uint64_t v6 = *v5, v7 = *(void *)(*((void *)a1 + 14) + 8) - (void)v6, (v7 & 0x7FFFFFFF8) != 0))
    {
      unsigned int v8 = 0;
      uint64_t v9 = (v7 >> 3);
      do
      {
        uint64_t v10 = *v6++;
        unsigned int v11 = *(_DWORD *)(v10 + 24);
        if (v11 > v8) {
          unsigned int v8 = v11;
        }
        --v9;
      }
      while (v9);
      unsigned int v12 = v8 + 1;
    }
    else
    {
      unsigned int v12 = 1;
    }
    return OZChannelBase::setID(a2, v12);
  }
  return result;
}

uint64_t DeleteDescendant(OZChannelFolder *a1, OZChannelBase *a2)
{
  OZChannelFolder::removeDescendant(a1, a2);
  uint64_t result = CHPreexistingChannelWrapperForOZChannel(a2);
  if (result)
  {
    *(unsigned char *)(result + 16) = 1;
  }
  else if (a2)
  {
    var0 = a2->var0;
    if (v5)
    {
      DeleteDescendants(v5);
      var0 = a2->var0;
    }
    uint64_t v6 = (uint64_t (*)(OZChannelBase *))var0[1];
    return v6(a2);
  }
  return result;
}

void sub_1B79CC0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B79CC1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1B79CC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C409FA7E95DLL);
  _Unwind_Resume(a1);
}

__CFString *OZChannelBase::getObjCWrapperName(OZChannelBase *this)
{
  return @"CHChannelBase";
}

uint64_t OZChannelBase::nofityObjCWrapperWillDelete(OZChannelBase *this)
{
  return [this->var9 _ozChannelWillBeDeleted:this];
}

void OZChannelBase::ensureObjCWrapperExists(OZChannelBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B79CC87C()
{
  return 0;
}

void sub_1B79CF64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B79CF790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void CreateNewOZChannel<OZChannelDouble>()
{
}

void sub_1B79CF9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelAngle>()
{
}

void sub_1B79D09B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelPercent>()
{
}

void sub_1B79D0B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelShearAngle>()
{
}

void sub_1B79D0D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelAspectRatio>()
{
}

void sub_1B79D0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelAspectRatioFootage>()
{
}

void sub_1B79D1060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelGammaFootage>()
{
}

void sub_1B79D120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelSeed>()
{
}

void sub_1B79D13B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelFrame>()
{
}

void sub_1B79D1564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelTimecode>()
{
}

void sub_1B79D1710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelUint32>()
{
}

void sub_1B79D27C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelUint16>()
{
}

void sub_1B79D2BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void CreateNewOZChannel<OZChannelBool>()
{
}

void sub_1B79D3090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelShearAngle::OZChannelShearAngle(OZChannelShearAngle *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelShearAngle_FactoryBase = (OZFactory *)getOZChannelShearAngle_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelShearAngle_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1101C30;
  this->var2 = (void **)&unk_1F1101F90;
  OZChannelShearAngleInfo = (OZChannelShearAngle *)OZChannelShearAngle::createOZChannelShearAngleInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelShearAngle::_OZChannelShearAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelShearAngle::_OZChannelShearAngleInfo;
  }
  this->var16 = var17;
  OZChannelShearAngle::createOZChannelShearAngleImpl(OZChannelShearAngleInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelShearAngle::_OZChannelShearAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelShearAngle::_OZChannelShearAngleImpl;
  }
  this->var14 = var15;
}

void sub_1B79D3560(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatio::OZChannelAspectRatio(OZChannelAspectRatio *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelAspectRatio_FactoryBase = (OZFactory *)getOZChannelAspectRatio_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatio_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1102000;
  this->var2 = (void **)&unk_1F1102360;
  OZChannelAspectRatioInfo = (OZChannelAspectRatio *)OZChannelAspectRatio::createOZChannelAspectRatioInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatio::_OZChannelAspectRatioInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatio::_OZChannelAspectRatioInfo;
  }
  this->var16 = var17;
  OZChannelAspectRatio::createOZChannelAspectRatioImpl(OZChannelAspectRatioInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatio::_OZChannelAspectRatioImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatio::_OZChannelAspectRatioImpl;
  }
  this->var14 = var15;
}

void sub_1B79D3674(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAspectRatioFootage::OZChannelAspectRatioFootage(OZChannelAspectRatioFootage *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelAspectRatioFootage_FactoryBase = (OZFactory *)getOZChannelAspectRatioFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatioFootage_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F11023D0;
  this->var2 = (void **)&unk_1F1102730;
  OZChannelAspectRatioFootageInfo = (OZChannelAspectRatioFootage *)OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
  }
  this->var16 = var17;
  OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageImpl(OZChannelAspectRatioFootageInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
  }
  this->var14 = var15;
}

void sub_1B79D3788(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelGammaFootage::OZChannelGammaFootage(OZChannelGammaFootage *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelGammaFootage_FactoryBase = (OZFactory *)getOZChannelGammaFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelGammaFootage_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F11027A0;
  this->var2 = (void **)&unk_1F1102B00;
  OZChannelGammaFootageInfo = (OZChannelGammaFootage *)OZChannelGammaFootage::createOZChannelGammaFootageInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelGammaFootage::_OZChannelGammaFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelGammaFootage::_OZChannelGammaFootageInfo;
  }
  this->var16 = var17;
  OZChannelGammaFootage::createOZChannelGammaFootageImpl(OZChannelGammaFootageInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelGammaFootage::_OZChannelGammaFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelGammaFootage::_OZChannelGammaFootageImpl;
  }
  this->var14 = var15;
}

void sub_1B79D389C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelFrame::OZChannelFrame(OZChannelFrame *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelFrame_FactoryBase = (OZFactory *)getOZChannelFrame_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelFrame_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1103310;
  this->var2 = (void **)&unk_1F1103670;
  OZChannelFrameInfo = (OZChannelFrame *)OZChannelFrame::createOZChannelFrameInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelFrame::_OZChannelFrameInfo;
    this->var17 = (OZChannelInfo *)OZChannelFrame::_OZChannelFrameInfo;
  }
  this->var16 = var17;
  OZChannelFrame::createOZChannelFrameImpl(OZChannelFrameInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelFrame::_OZChannelFrameImpl;
    this->var15 = (OZChannelImpl *)OZChannelFrame::_OZChannelFrameImpl;
  }
  this->var14 = var15;
}

void sub_1B79D39B0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelUint16::OZChannelUint16(OZChannelUint16 *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelUint16_FactoryBase = (OZFactory *)getOZChannelUint16_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint16_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1101860;
  this->var2 = (void **)&unk_1F1101BC0;
  OZChannelUint16Info = (OZChannelUint16 *)OZChannelUint16::createOZChannelUint16Info(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
    this->var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
  }
  this->var16 = var17;
  OZChannelUint16::createOZChannelUint16Impl(OZChannelUint16Info);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
  }
  this->var14 = var15;
}

void sub_1B79D3AC4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

__CFString *OZChannelBool::getObjCWrapperName(OZChannelBool *this)
{
  return @"CHChannelBool";
}

uint64_t OZChannelBool::createOZChannelBoolInfo(OZChannelBool *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBool::createOZChannelBoolInfo(void)::_OZChannelBoolInfo_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelBool::createOZChannelBoolInfo(void)::_OZChannelBoolInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolInfo;
}

uint64_t OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBool *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBool::createOZChannelBoolTrueImpl(void)::_OZChannelBoolTrueImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelBool::createOZChannelBoolTrueImpl(void)::_OZChannelBoolTrueImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolTrueImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolTrueImpl;
}

uint64_t OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBool *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBool::createOZChannelBoolFalseImpl(void)::_OZChannelBoolFalseImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelBool::createOZChannelBoolFalseImpl(void)::_OZChannelBoolFalseImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBool::createOZChannelBoolFalseImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBool::_OZChannelBoolFalseImpl;
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  uint64_t Instance = (OZFactory *)OZChannelBool_Factory::getInstance((OZChannelBool_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1106A50;
  this->var2 = (void **)&unk_1F1106DB0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    this->var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
  }
  this->var14 = var15;
}

void sub_1B79D3D18(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelBool_Factory::getInstance((OZChannelBool_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&unk_1F1106A50;
  this->var2 = (void **)&unk_1F1106DB0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    if (a2) {
      var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolTrueImpl;
    }
    else {
      var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    }
    this->var15 = var15;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B79D3E68(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6);
  v9->var0 = (void **)&unk_1F1106A50;
  v9->var2 = (void **)&unk_1F1106DB0;
  OZChannelBoolInfo = (OZChannelBool *)OZChannelBool::createOZChannelBoolInfo(v9);
  if (a6)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
    this->var17 = (OZChannelInfo *)OZChannelBool::_OZChannelBoolInfo;
  }
  this->var16 = var17;
  OZChannelBoolTrueImpl = (OZChannelBool *)OZChannelBool::createOZChannelBoolTrueImpl(OZChannelBoolInfo);
  OZChannelBool::createOZChannelBoolFalseImpl(OZChannelBoolTrueImpl);
  if (a5)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
    this->var15 = (OZChannelImpl *)OZChannelBool::_OZChannelBoolFalseImpl;
  }
  this->var14 = var15;
}

void sub_1B79D3F38(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::OZChannelBool(OZChannelBool *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  void *v3 = &unk_1F1106A50;
  v3[2] = &unk_1F1106DB0;
}

void non-virtual thunk to'OZChannelBool::~OZChannelBool(OZChannelBool *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBool::~OZChannelBool(OZChannelBool *this)
{
  OZChannel::~OZChannel((OZChannel *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBool::clone(OZChannelBool *this)
{
}

void sub_1B79D40AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelBool::_OZChannelBoolInfo) {
    operator new();
  }
}

void sub_1B79D4120(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelBoolInfo::OZChannelBoolInfo(OZChannelBoolInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1106E20;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1106E40;
}

void sub_1B79D41CC(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolTrueImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelBool::_OZChannelBoolTrueImpl) {
    operator new();
  }
}

void sub_1B79D426C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBool::createOZChannelBoolFalseImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelBool::_OZChannelBoolFalseImpl) {
    operator new();
  }
}

void sub_1B79D4330(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, int a2, int a3, int a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, unsigned int a9)
{
  uint64_t Instance = (OZFactory *)OZChannelBool3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(void *)this = &unk_1F1106E98;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11071E0;
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v24, @"Channel X");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), a2, &v24, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v20, v21);
  PCURL::PCURL((PCURL *)&v24, @"Channel Y");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), a3, &v24, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v22, v23);
  PCURL::PCURL((PCURL *)&v24, @"Channel Z");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), a4, &v24, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v24);
}

{
  OZChannelBool3D::OZChannelBool3D(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B79D4518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1F1106E98;
  *((void *)v6 + PCSpinLock::lock(this + 2) = &unk_1F11071E0;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, @"Channel X");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, @"Channel Y");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), &v12, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, @"Channel Z");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v12);
}

void sub_1B79D46D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::OZChannelBool3D(OZChannelBool3D *this, const OZChannelBool3D *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1106E98;
  *(void *)(v5 + 16) = &unk_1F11071E0;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
}

void sub_1B79D47E0(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::clone(OZChannelBool3D *this)
{
}

void sub_1B79D4864(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelBool3D::copy(OZChannelBool3D *this, const OZChannelBase *a2, char a3)
{
  int v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);

  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

BOOL OZChannelBool3D::getX(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), a2, a3) != 0;
}

BOOL OZChannelBool3D::getY(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 288), a2, a3) != 0;
}

BOOL OZChannelBool3D::getZ(OZChannelBool3D *this, const CMTime *a2, double a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 440), a2, a3) != 0;
}

uint64_t OZChannelBool3D::getValue(uint64_t result, const CMTime *a2, double *a3, double a4)
{
  if (a3)
  {
    uint64_t v7 = result;
    if (OZChannel::getValueAsInt((OZChannel *)(result + 136), a2, a4)) {
      double v8 = 1.0;
    }
    else {
      double v8 = 0.0;
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v7 + 288), a2, a4)) {
      double v9 = 1.0;
    }
    else {
      double v9 = 0.0;
    }
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)(v7 + 440), a2, a4);
    if (result) {
      double v10 = 1.0;
    }
    else {
      double v10 = 0.0;
    }
    *a3 = v8;
    a3[1] = v9;
    a3[2] = v10;
  }
  return result;
}

__CFString *OZChannelBool3D::getObjCWrapperName(OZChannelBool3D *this)
{
  return @"CHChannelBool3D";
}

void OZChannelBool3D::~OZChannelBool3D(OZChannelBool3D *this)
{
  OZChannelBool3D::~OZChannelBool3D(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1106E98;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11071E0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 288));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

void non-virtual thunk to'OZChannelBool3D::~OZChannelBool3D(OZChannelBool3D *this)
{
}

{
  uint64_t vars8;

  OZChannelBool3D::~OZChannelBool3D((OZChannelBool3D *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

__CFString *OZChannelButton::getObjCWrapperName(OZChannelButton *this)
{
  return @"CHChannelButton";
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelButton_Factory::getInstance((OZChannelButton_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  this->var0 = (void **)&unk_1F11072C8;
  this->var2 = (void **)&unk_1F1107628;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v11);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  BOOL v13 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  if (!OZChannelButton::_OZChannelButtonImpl) {
    operator new();
  }
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v13;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B79D4CF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v4, 0x10A1C407F0BD61ELL);
  PCString::~PCString(v3);
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelButton::createOZChannelButtonInfo(OZChannelButton *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelButton::createOZChannelButtonInfo(void)::_OZChannelButtonInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelButton::createOZChannelButtonInfo(void)::_OZChannelButtonInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelButton::createOZChannelButtonInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelButton::_OZChannelButtonInfo;
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  v7->var0 = (PC_Sp_counted_base *)&unk_1F11072C8;
  v7[2].var0 = (PC_Sp_counted_base *)&unk_1F1107628;
  PCSharedCount::PCSharedCount(v7 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v8);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  double v10 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v10;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B79D4EBC(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelButton::createOZChannelButtonImpl(OZChannelButton *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelButton::createOZChannelButtonImpl(void)::_OZChannelButtonImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelButton::createOZChannelButtonImpl(void)::_OZChannelButtonImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelButton::createOZChannelButtonImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelButton::_OZChannelButtonImpl;
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F11072C8;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F1107628;
  PCSharedCount::PCSharedCount(v5 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v6);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  double v8 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v8;
  OZChannelBase::setFlag((OZChannelBase *)this, 8, 0);
  this->var19 = 0;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B79D5048(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, void (*a2)(void *), void *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  uint64_t Instance = (OZFactory *)OZChannelButton_Factory::getInstance((OZChannelButton_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a4, a5, a6, a7, 0, 0);
  this->var0 = (void **)&unk_1F11072C8;
  this->var2 = (void **)&unk_1F1107628;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  OZChannelButtonInfo = (OZChannelInfo *)OZChannelButton::createOZChannelButtonInfo(v15);
  this->var16 = OZChannelButtonInfo;
  this->var17 = OZChannelButtonInfo;
  OZChannelButton::createOZChannelButtonImpl((OZChannelButton *)OZChannelButtonInfo);
  int v17 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var14 = (OZChannelImpl *)OZChannelButton::_OZChannelButtonImpl;
  this->var15 = v17;
  this->var19 = a2;
  this->var21 = a3;
  this->var7 |= 0x10000uLL;
  (*((void (**)(OZChannelButton *))this->var0 + 16))(this);
}

void sub_1B79D51A8(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelButton::OZChannelButton(OZChannelButton *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F11072C8;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F1107628;
  uint64_t v6 = (PCString *)&v5[20];
  PCSharedCount::PCSharedCount(v5 + 20);
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var22);
  this->var23 = 0;
  this->var19 = a2[1].var5;
  PCString::set(v6, (const PCString *)&a2[1].var6);
  PCString::set(&this->var22, (const PCString *)&a2[1].var8);
}

void sub_1B79D528C(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelButton::clone(OZChannelButton *this)
{
}

void sub_1B79D5310(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C400C70C378);
  _Unwind_Resume(a1);
}

void OZChannelButton::copy(OZChannelButton *this, const OZChannelBase *a2)
{
  OZChannelBase::copy((OZChannelBase *)this, a2);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      this->var19 = v4[19].var0;
      PCString::set(&this->var20, v4 + 20);
      PCString::set(&this->var22, v5 + 22);
    }
  }
}

void std::__call_once_param<std::tuple<OZChannelButton::createOZChannelButtonInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelButton::_OZChannelButtonInfo) {
    operator new();
  }
}

void sub_1B79D5434(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelButtonInfo::OZChannelButtonInfo(OZChannelButtonInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1107250;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1107270;
}

void sub_1B79D54E0(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelButton::createOZChannelButtonImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelButton::_OZChannelButtonImpl) {
    operator new();
  }
}

void sub_1B79D5580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void sub_1B79D56B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C400BEEEC36);
  _Unwind_Resume(a1);
}

void sub_1B79D5868(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B79D5B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, CGColorSpace *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  _Unwind_Resume(a1);
}

void sub_1B79D5F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZChannelButton::~OZChannelButton(OZChannelButton *this)
{
  this->var0 = (void **)&unk_1F11072C8;
  this->var2 = (void **)&unk_1F1107628;
  if (this->var19 == DummyCallback && PCString::empty(&this->var20) || this->var23) {

  }
  PCString::~PCString(&this->var22);
  PCString::~PCString(&this->var20);

  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  OZChannelButton::~OZChannelButton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelButton::~OZChannelButton(OZChannelButton *this)
{
}

{
  uint64_t vars8;

  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelButton *OZChannelButton::callCallback(OZChannelButton *this)
{
  var19 = (uint64_t (*)(void *))this->var19;
  if (var19)
  {
    uint64_t v2 = this;
    if (var19 == DummyCallback)
    {
      this = (OZChannelButton *)PCString::empty(&this->var20);
      if ((this & 1) == 0)
      {
        uint64_t v4 = PCString::ns_str(&v2->var20);
        SEL v5 = NSSelectorFromString(&v4->isa);
        int v6 = [(__CFString *)PCString::ns_str(&v2->var20) hasSuffix:@":"];
        var21 = v2->var21;
        if (v6)
        {
          uint64_t v8 = [NSNumber numberWithUnsignedLong:v2->var3];
          return (OZChannelButton *)[var21 performSelector:v5 withObject:v8];
        }
        else
        {
          uint64_t v9 = v2->var21;
          return (OZChannelButton *)[v9 performSelector:v5];
        }
      }
    }
    else
    {
      int v3 = this->var21;
      return (OZChannelButton *)var19(v3);
    }
  }
  return this;
}

void OZChannelButton::setPrivateData(OZChannelButton *this, void *a2)
{
  var21 = this->var21;
  this->var21 = a2;
  if (this->var23) {

  }
  this->var23 = 0;
}

void *OZChannelButton::getCallbackBlock(OZChannelButton *this)
{
  if (this->var19 == DummyCallback && PCString::empty(&this->var20)) {
    return this->var21;
  }
  else {
    return 0;
  }
}

void OZChannelButton::setCallbackBlock(OZChannelButton *this, void *a2)
{
  if (this->var19 == DummyCallback && PCString::empty(&this->var20)) {

  }
  if (a2)
  {
    this->var19 = DummyCallback;
    uint64_t v4 = (void *)[a2 copy];
    var21 = this->var21;
    this->var21 = v4;
    if (this->var23) {

    }
    this->var23 = 0;
    int v6 = &v11;
    PCString::PCString(&v11, "");
    v7.var0 = (__CFString *)&v11;
    OZChannelButton::setCallbackSelectorAsString(this, v7, 0);
  }
  else
  {
    this->var19 = 0;
    uint64_t v8 = this->var21;
    this->var21 = 0;
    if (this->var23) {

    }
    this->var23 = 0;
    int v6 = &v10;
    PCString::PCString(&v10, "");
    v9.var0 = (__CFString *)&v10;
    OZChannelButton::setCallbackSelectorAsString(this, v9, 0);
  }
  PCString::~PCString(v6);
  this->var23 = 0;
}

void sub_1B79D6558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZChannelButton::setCallbackSelectorAsString(OZChannelButton *this, PCString a2, void *a3)
{
  if (this->var19 == DummyCallback && PCString::empty(&this->var20)) {

  }
  this->var19 = DummyCallback;
  var21 = this->var21;
  this->var21 = a3;
  if (this->var23) {

  }
  this->var23 = 0;

  PCString::set(&this->var20, (const PCString *)a2.var0);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelColor_Factory::getInstance(this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, Instance, a2, a3, a4, a5, a6);
  *(void *)this = &unk_1F1107698;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1107A08;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v18, @"Channel Alpha");
  uint64_t v16 = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v15);
  int v17 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), &v18, (OZChannelFolder *)this, 4u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v18);
}

void sub_1B79D6714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, double a2, double a3, double a4, double a5, const PCString *a6, OZChannelFolder *a7, unsigned int a8, int a9, int a10)
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, a2, a3, a4, a6, a7, a8, a9, a10);
  *(void *)uint64_t v12 = &unk_1F1107698;
  *((void *)v12 + PCSpinLock::lock(this + 2) = &unk_1F1107A08;
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v19, @"Channel Alpha");
  if (fabs(a5 + -1.0) >= 0.0000001) {
    uint64_t Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v14);
  }
  else {
    uint64_t Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(v14);
  }
  uint64_t v16 = (OZChannelImpl *)Instance;
  int v17 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), a5, &v19, (OZChannelFolder *)this, 4u, 0, v16, v17);
  PCString::~PCString(&v19);
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = OZChannelColor_Factory::getInstance(v18);
}

void sub_1B79D6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v11);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, a2, a3, a4, a5);
  *(void *)int v6 = &unk_1F1107698;
  *((void *)v6 + PCSpinLock::lock(this + 2) = &unk_1F1107A08;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v11, @"Channel Alpha");
  uint64_t Instance = (OZChannelColor::OZChannelColor_alphaInfo *)OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(v8);
  PCString v10 = (OZChannelInfo *)OZChannelColor::OZChannelColor_alphaInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColor *)((char *)this + 1008), &v11, (OZChannelFolder *)this, 4u, 0, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v11);
}

void sub_1B79D6934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v10);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor(OZChannelColor *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelColorNoAlpha::OZChannelColorNoAlpha(this, (const OZChannelColorNoAlpha *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1107698;
  *(void *)(v5 + 16) = &unk_1F1107A08;
  OZChannel::OZChannel((OZChannel *)(v5 + 1008), a2 + 9, (OZChannelFolder *)this);
  *((void *)this + 126) = &unk_1F1100CF0;
  *((void *)this + 12OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
}

void sub_1B79D6A10(_Unwind_Exception *a1)
{
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v1);
  _Unwind_Resume(a1);
}

void OZChannelColor::clone(OZChannelColor *this)
{
}

void sub_1B79D6A74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400BEEEC36);
  _Unwind_Resume(a1);
}

void OZChannelColor::copy(OZChannelColor *this, const OZChannelBase *a2, char a3)
{
  OZChannelColorNoAlpha::copy(this, a2, a3);
  if (a2) {
  else
  }
    int v6 = 0;

  OZChannel::copy((OZChannel *)((char *)this + 1008), v6 + 9, a3);
}

double OZChannelColor::getColor(OZChannelColor *this, const CMTime *a2, PCColor *a3, double a4)
{
  OZChannelColorNoAlpha::getColor(this, a2, a3, a4);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1008), a2, a4);
  float v9 = v8;

  return PCColor::setAlpha(a3, v9);
}

double OZChannelColor::getColor(OZChannelColor *this, const CMTime *a2, PCColor *a3)
{
  OZChannelColorNoAlpha::getColor(this, a2, a3);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1008), a2, 0.0);
  float v7 = v6;

  return PCColor::setAlpha(a3, v7);
}

uint64_t OZChannelColor::setColor(OZChannelColor *this, const CMTime *a2, PCColor *a3, uint64_t a4)
{
  OZChannelColorNoAlpha::setColor(this, a2, a3, a4);
  v6.n128_f64[0] = PCColor::getAlpha(a3);
  float v7 = *(uint64_t (**)(__n128))(*((void *)this + 126) + 712);

  return v7(v6);
}

uint64_t OZChannelColor::setDefaultColor(OZChannelColor *this, PCColor *a2)
{
  OZChannelColorNoAlpha::setDefaultColor(this, a2);
  double Alpha = PCColor::getAlpha(a2);

  return OZChannel::setDefaultValue((OZChannel *)((char *)this + 1008), Alpha);
}

double OZChannelColor::getDefaultColor(OZChannelColor *this, PCColor *a2)
{
  OZChannelColorNoAlpha::getDefaultColor(this, a2);
  float DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 1008));

  return PCColor::setAlpha(a2, DefaultValue);
}

__CFString *OZChannelColor::getObjCWrapperName(OZChannelColor *this)
{
  return @"CHChannelColor";
}

void non-virtual thunk to'OZChannelColor::~OZChannelColor(OZChannelColor *this)
{
  uint64_t v1 = (OZChannelColor *)((char *)this - 16);
  *((void *)this - PCSpinLock::lock(this + 2) = &unk_1F1107698;
  *(void *)this = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v1);
}

{
  OZChannelColor::~OZChannelColor((OZChannelColor *)((char *)this - 16));
}

uint64_t OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(OZChannelColor::OZChannelColor_alpha_zeroImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::OZChannelColor_alpha_zeroImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::OZChannelColor_alpha_zeroImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alpha_zeroImpl::_OZChannelColor_alpha_zero;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alpha_zeroImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColor::OZChannelColor_alpha_zeroImpl::_OZChannelColor_alpha_zero) {
    operator new();
  }
}

void sub_1B79D6EF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor_alpha_zeroImpl::OZChannelColor_alpha_zeroImpl(OZChannelColor::OZChannelColor_alpha_zeroImpl *this)
{
}

void sub_1B79D6FC4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColor::OZChannelColor_alphaInfo::getInstance(OZChannelColor::OZChannelColor_alphaInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::OZChannelColor_alphaInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::OZChannelColor_alphaInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alphaInfo::_OZChannelColor_alphaInfo;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alphaInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColor::OZChannelColor_alphaInfo::_OZChannelColor_alphaInfo) {
    operator new();
  }
}

void sub_1B79D70A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelColor::OZChannelColor_alphaInfo *OZChannelColor::OZChannelColor_alphaInfo::OZChannelColor_alphaInfo(OZChannelColor::OZChannelColor_alphaInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelColor::OZChannelColor_alphaInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1107AF0;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1107B10;
  return this;
}

void sub_1B79D7174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(OZChannelColor::OZChannelColor_alpha_oneImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::OZChannelColor_alpha_oneImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::OZChannelColor_alpha_oneImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColor::OZChannelColor_alpha_oneImpl::_OZChannelColor_alpha_one;
}

void std::__call_once_param<std::tuple<OZChannelColor::OZChannelColor_alpha_oneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColor::OZChannelColor_alpha_oneImpl::_OZChannelColor_alpha_one) {
    operator new();
  }
}

void sub_1B79D7250(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColor::OZChannelColor_alpha_oneImpl::OZChannelColor_alpha_oneImpl(OZChannelColor::OZChannelColor_alpha_oneImpl *this)
{
}

void sub_1B79D7320(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B79D7444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40933A2D21);
  _Unwind_Resume(a1);
}

Class CHChannelWrapperClassForOZChannel(uint64_t a1)
{
  uint64_t v1 = (NSString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);

  return NSClassFromString(v1);
}

id GetWrapperForOZChannel(OZChannelBase *a1)
{
  objc_sync_enter(@"CHChannelWrapperLock");
  var9 = a1->var9;
  id v3 = var9;
  objc_sync_exit(@"CHChannelWrapperLock");

  return var9;
}

void sub_1B79D77F0(_Unwind_Exception *a1)
{
}

uint64_t CHDescriptionForOZChannel(uint64_t a1)
{
  char v2 = (NSString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!v2) {
    return [NSString stringWithFormat:@"<unwrappable channel: oz=%p(%s), name='%@', ID=%u>", a1, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, PCString::ns_str((PCString *)(a1 + 32)), *(unsigned int *)(a1 + 24), v9];
  }
  id v3 = v2;
  Class v4 = NSClassFromString(v2);
  uint64_t v5 = NSString;
  uint64_t v6 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
  float v7 = PCString::ns_str((PCString *)(a1 + 32));
  if (v4) {
    return [v5 stringWithFormat:@"<unwrapped %@: oz=%p(%s), name='%@', ID=%u>", v3, a1, v6, v7, *(unsigned int *)(a1 + 24)];
  }
  else {
    return [v5 stringWithFormat:@"<unimplemented %@: oz=%p(%s), name='%@', ID=%u>", v3, a1, v6, v7, *(unsigned int *)(a1 + 24)];
  }
}

void sub_1B79D7A98(_Unwind_Exception *a1)
{
}

void sub_1B79D7CA8(_Unwind_Exception *a1)
{
}

uint64_t ChannelStateCopy(OZChannelBase *a1, int a2)
{
  if (a2) {
    operator new();
  }
  uint64_t v3 = (*((uint64_t (**)(OZChannelBase *))a1->var0 + 31))(a1);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4;
    float v7 = *(void **)(v3 + 112);
    if (v7) {
      float v7 = (void *)((v7[1] - *v7) >> 3);
    }
    double v8 = (void *)v4[14];
    if (v8) {
      double v8 = (void *)((v8[1] - *v8) >> 3);
    }
    if (v7 != v8)
    {
      OZChannelFolder::setFoldFlag((OZChannelFolder *)v3, 0x80000000);
      uint64_t v9 = (void *)v6[14];
      if (v9)
      {
        uint64_t v10 = v9[1] - *v9;
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = v10 >> 3;
          while (1)
          {
            uint64_t v13 = (OZChannelBase *)ChannelStateCopy(*(OZChannelBase **)(*v9 + 8 * v11), 0);
            if (!v13) {
              break;
            }
            OZChannelFolder::push_back((OZChannelFolder *)v3, v13);
            if (v12 == ++v11) {
              return v3;
            }
          }
          (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
          return 0;
        }
      }
    }
  }
  return v3;
}

void sub_1B79D7F4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40384E9B0FLL);
  _Unwind_Resume(a1);
}

OZChannelBase *CHChannelWrapperForOZChannel(OZChannelBase *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (OZChannelBase *)GetWrapperForOZChannel(result);
    if (!result)
    {
      Class v4 = (NSString *)(*((uint64_t (**)(OZChannelBase *))v3->var0 + 11))(v3);
      BOOL v5 = (void *)[objc_alloc(NSClassFromString(v4)) initWithOZChannel:v3 freeWhenDone:a2];
      return (OZChannelBase *)v5;
    }
  }
  return result;
}

void sub_1B79D815C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B79D820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1B79D8294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B79D877C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChannelStateDestroy(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (result)
    {
      uint64_t v4 = result;
      uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)result, 0x80000000);
      BOOL v5 = *(void **)(v4 + 112);
      if (v5)
      {
        uint64_t v6 = v5[1] - *v5;
        if (v6)
        {
          char v7 = result;
          uint64_t v8 = (v6 >> 3) - 1;
          do
            uint64_t result = ChannelStateDestroy(*(OZChannelBase **)(*v5 + 8 * v8--), v7);
          while (v8 != -1);
        }
      }
    }
    if (a2)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return v9(v3);
    }
  }
  return result;
}

uint64_t OZChannelColorNoAlpha::selectRedPrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  }
  if (fabs(a2 + -1.0) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  }
  if (fabs(a2 + -0.64) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(this);
  }
  if (fabs(a2 + -0.21) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(this);
  }
  if (fabs(a2 + -0.5) >= 0.0000001) {
    return 0;
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

uint64_t OZChannelColorNoAlpha::selectGreenPrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  }
  if (fabs(a2 + -1.0) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  }
  if (fabs(a2 + -0.68) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(this);
  }
  if (fabs(a2 + -0.43) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(this);
  }
  if (fabs(a2 + -0.5) >= 0.0000001) {
    return 0;
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

uint64_t OZChannelColorNoAlpha::selectBluePrototype(OZChannelColorNoAlpha *this, double a2)
{
  if (fabs(a2) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(this);
  }
  if (fabs(a2 + -1.0) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(this);
  }
  if (fabs(a2 + -0.77) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(this);
  }
  if (fabs(a2 + -0.75) < 0.0000001) {
    return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(this);
  }
  if (fabs(a2 + -0.5) >= 0.0000001) {
    return 0;
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(this);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelColorNoAlpha_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F1107BE0;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1107F50;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v45, @"Channel Red");
  uint64_t v16 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v15);
  int v17 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v45, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v45, @"Channel Green");
  int v21 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v20);
  unsigned int v22 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v45, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v45, @"Channel Blue");
  unint64_t v26 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v25);
  long long v27 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v45, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v26, v27);
  PCString::~PCString(&v45);
  TXParagraphStyleFolder_Factory::createInstance(v28, v29);
  PCURL::PCURL((PCURL *)&v45, @"Channel Gamma");
  CMTime v31 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v30);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v45, (OZChannelFolder *)this, 0xAu, 138, v31, 0);
  PCString::~PCString(&v45);
  long long v33 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v32);
  unsigned int v34 = v33;
  TXParagraphStyleFolder_Factory::createInstance(v33, v35);
  PCURL::PCURL((PCURL *)&v45, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v36, v37);
  PCURL::PCURL((PCURL *)&v44, @"Channel Color Space");
  unint64_t v39 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v38);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v34, &v45, &v44, (OZChannelFolder *)this, 0xBu, 130, v39, 0);
  PCString::~PCString(&v44);
  PCString::~PCString(&v45);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    long long v41 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)ChannelRootBase + 864))(ChannelRootBase);
    int v43 = OZChannelBase::setRangeName(v41, v42);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], 0.0) != v43)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], (double)v43, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v43);
    }
    if ((*(unsigned int (**)(void *))(*(void *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
}

void sub_1B79D91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZCompoundChannel::~OZCompoundChannel(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, int a7)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, a7);
  *(void *)uint64_t v8 = &unk_1F1107BE0;
  *((void *)v8 + PCSpinLock::lock(this + 2) = &unk_1F1107F50;
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v40, @"Channel Red");
  uint64_t Instance = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v10);
  uint64_t v12 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v40, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v40, @"Channel Green");
  uint64_t v16 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v15);
  int v17 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v40, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v40, @"Channel Blue");
  int v21 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v20);
  unsigned int v22 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v40, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v40);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v40, @"Channel Gamma");
  unint64_t v26 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v40, (OZChannelFolder *)this, 0xAu, 138, v26, 0);
  PCString::~PCString(&v40);
  unint64_t v28 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v27);
  unsigned int v29 = v28;
  TXParagraphStyleFolder_Factory::createInstance(v28, v30);
  PCURL::PCURL((PCURL *)&v40, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v31, v32);
  PCURL::PCURL((PCURL *)&v39, @"Channel Color Space");
  unsigned int v34 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v33);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v29, &v40, &v39, (OZChannelFolder *)this, 0xBu, 130, v34, 0);
  PCString::~PCString(&v39);
  PCString::~PCString(&v40);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    CMTimeEpoch v36 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)ChannelRootBase + 864))(ChannelRootBase);
    int v38 = OZChannelBase::setRangeName(v36, v37);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], 0.0) != v38)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], (double)v38, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v38);
    }
    if ((*(unsigned int (**)(void *))(*(void *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
}

void sub_1B79D9660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZCompoundChannel::~OZCompoundChannel(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9)
{
  uint64_t Instance = (OZFactory *)OZChannelColorNoAlpha_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(void *)this = &unk_1F1107BE0;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1107F50;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v51, @"Channel Red");
  unsigned int v22 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectRedPrototype(v21, a2);
  PCSharedCount v23 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v22);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), a2, &v51, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)v22, v23);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v24, v25);
  PCURL::PCURL((PCURL *)&v51, @"Channel Green");
  long long v27 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectGreenPrototype(v26, a3);
  unint64_t v28 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), a3, &v51, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v51, @"Channel Blue");
  long long v32 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::selectBluePrototype(v31, a4);
  long long v33 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), a4, &v51, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(&v51);
  TXParagraphStyleFolder_Factory::createInstance(v34, v35);
  PCURL::PCURL((PCURL *)&v51, @"Channel Gamma");
  uint64_t v37 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v36);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), 2.2, &v51, (OZChannelFolder *)this, 0xAu, 138, v37, 0);
  PCString::~PCString(&v51);
  PCString v39 = (TXParagraphStyleFolder_Factory *)OZChannelBase::setRangeName((OZChannelBase *)3, v38);
  unsigned int v40 = v39;
  TXParagraphStyleFolder_Factory::createInstance(v39, v41);
  PCURL::PCURL((PCURL *)&v51, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v42, v43);
  PCURL::PCURL((PCURL *)&v50, @"Channel Color Space");
  PCString v45 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v44);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), v40, &v51, &v50, (OZChannelFolder *)this, 0xBu, 130, v45, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (ChannelRootBase)
  {
    OZChannel::setMin((OZChannel *)((char *)this + 744), -1.0);
    long long v47 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(void *)ChannelRootBase + 864))(ChannelRootBase);
    int v49 = OZChannelBase::setRangeName(v47, v48);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], 0.0) != v49)
    {
      OZChannel::setValue((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], (double)v49, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 744), (double)v49);
    }
    if ((*(unsigned int (**)(void *))(*(void *)ChannelRootBase + 872))(ChannelRootBase) == 1)
    {
      OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 4.0);
      OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 4.0);
    }
  }
  OZChannel::setMin((OZChannel *)((char *)this + 136), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 136), 8.0);
  OZChannel::setMin((OZChannel *)((char *)this + 288), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 288), 8.0);
  OZChannel::setMin((OZChannel *)((char *)this + 440), -6.0);
  OZChannel::setMax((OZChannel *)((char *)this + 440), 8.0);
}

void sub_1B79D9BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZCompoundChannel::~OZCompoundChannel(v12);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1F1107BE0;
  *((void *)v6 + PCSpinLock::lock(this + 2) = &unk_1F1107F50;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v32, @"Channel Red");
  uint64_t Instance = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v8);
  uint64_t v10 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 136), &v32, (OZChannelFolder *)this, 1u, 0, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v32, @"Channel Green");
  BOOL v14 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v13);
  int v15 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 288), &v32, (OZChannelFolder *)this, 2u, 0, (OZChannelImpl *)v14, v15);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v32, @"Channel Blue");
  PCString v19 = (OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(v18);
  PCSharedCount v20 = (OZChannelInfo *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(v19);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 440), &v32, (OZChannelFolder *)this, 3u, 0, (OZChannelImpl *)v19, v20);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v32, @"Channel Gamma");
  PCString v24 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(v23);
  OZChannelDouble::OZChannelDouble((OZChannelColorNoAlpha *)((char *)this + 592), &v32, (OZChannelFolder *)this, 0xAu, 138, v24, 0);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v32, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v27, v28);
  PCURL::PCURL((PCURL *)&v31, @"Channel Color Space");
  CMTime v30 = (OZChannelImpl *)OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(v29);
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), &v32, &v31, (OZChannelFolder *)this, 0xBu, 0x82u, v30, 0);
  PCString::~PCString(&v31);
  PCString::~PCString(&v32);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = 1;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
}

void sub_1B79D9F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha(OZChannelColorNoAlpha *this, const OZChannelColorNoAlpha *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1107BE0;
  *(void *)(v5 + 16) = &unk_1F1107F50;
  uint64_t v6 = (OZChannel *)(v5 + 136);
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1100CF0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((void *)this + 74) = &unk_1F1100CF0;
  *((void *)this + 76) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZChannelColorNoAlpha *)((char *)this + 744), (const OZChannelColorNoAlpha *)((char *)a2 + 744), (OZChannelFolder *)this);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = *((unsigned char *)a2 + 1000);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 440), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
}

void sub_1B79DA200(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::clone(OZChannelColorNoAlpha *this)
{
}

void sub_1B79DA2B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40C7C6813ELL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::copy(OZChannelColorNoAlpha *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
  OZChannelEnum::copy((PCString *)this + 93, (const OZChannelBase *)((char *)v4 + 744), a3);
  *((unsigned char *)this + 100OZSplineNode::allocOZSpline(this, 0) = v4[8].var13;
}

CGColorSpace **OZChannelColorNoAlpha::getColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a4);
  float v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a4);
  float v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a4);
  float v13 = v12;
  if (*((unsigned char *)this + 1000)) {
    OZChannelColorNoAlpha::getPCColorSpace(this, &v15);
  }
  else {
    PCColor::getColorSpace(a3, &v15);
  }
  PCColor::setRGBA(a3, v9, v11, v13, 1.0, (OZChannelBase *)&v15);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
}

void sub_1B79DA478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::isColor(OZChannelColorNoAlpha *this)
{
  return *((unsigned __int8 *)this + 1000);
}

void OZChannelColorNoAlpha::getPCColorSpace(OZChannelColorNoAlpha *this@<X0>, CGColorSpace **a2@<X8>)
{
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = (CGColorSpace **)PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
  if (v4 == -1)
  {
    PCColorSpaceCache::sRGB(a2);
  }
  else
  {
    PCColorSpaceCache::getColorSpaceByID(v4, a2);
  }
}

CGColorSpace **OZChannelColorNoAlpha::getColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  float v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  float v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, 0.0);
  float v11 = v10;
  if (*((unsigned char *)this + 1000)) {
    OZChannelColorNoAlpha::getPCColorSpace(this, (CGColorSpace **)&v16);
  }
  else {
    PCColor::getColorSpace(a3, (CGColorSpace **)&v16);
  }
  PCColor::PCColor((PCColor *)&v16.var1, v7, v9, v11, 1.0, &v16);
  long long v12 = *(_OWORD *)&v16.var3;
  *(_OWORD *)&a3->var0.var0 = *(_OWORD *)&v16.var1;
  *(_OWORD *)&a3->var0.var1[1] = v12;
  *(_OWORD *)&a3->var0.var1[3] = *(_OWORD *)&v16.var5;
  obj = a3->var1._obj;
  unint64_t var7 = (CGColorSpace *)v16.var7;
  if (obj && obj != (CGColorSpace *)v16.var7)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    unint64_t var7 = (CGColorSpace *)v16.var7;
  }
  a3->var1._obj = var7;
  v16.unint64_t var7 = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v16.var7);
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v16);
}

void sub_1B79DA618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::setColor(OZChannelColorNoAlpha *this, const CMTime *a2, PCColor *a3, uint64_t a4)
{
  uint64_t v15 = 0;
  float v14 = 0.0;
  if (*((unsigned char *)this + 1000)) {
    OZChannelColorNoAlpha::getPCColorSpace(this, &v13);
  }
  else {
    PCColor::getColorSpace(a3, &v13);
  }
  PCColor::getRGB(a3, (float *)&v15 + 1, (float *)&v15, &v14, (const PCColorSpaceHandle *)&v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  uint64_t v9 = *((void *)this + 17);
  double v8 = (char *)this + 136;
  (*(void (**)(char *, const CMTime *, uint64_t, double))(v9 + 712))(v8, a2, a4, *((float *)&v15 + 1));
  v10.n128_f64[0] = *(float *)&v15;
  (*(void (**)(__n128))(*((void *)v8 + 19) + 712))(v10);
  v11.n128_f64[0] = v14;
  return (*(uint64_t (**)(__n128))(*((void *)v8 + 38) + 712))(v11);
}

void sub_1B79DA79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelColorNoAlpha::setDefaultColor(OZChannelColorNoAlpha *this, PCColor *a2)
{
  float v8 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  if (*((unsigned char *)this + 1000)) {
    OZChannelColorNoAlpha::getPCColorSpace(this, &v5);
  }
  else {
    PCColor::getColorSpace(a2, &v5);
  }
  PCColor::getRGB(a2, &v8, &v7, &v6, (const PCColorSpaceHandle *)&v5);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v5);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), v8);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), v7);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 440), v6);
  uint64_t result = (OZChannelBase *)OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000);
  if (result) {
    return OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
  }
  return result;
}

void sub_1B79DA878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZChannelColorNoAlpha::getDefaultColor(OZChannelColorNoAlpha *this, PCColor *a2)
{
  float DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 136));
  float v5 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 288));
  float v6 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 440));
  if (*((unsigned char *)this + 1000)) {
    OZChannelColorNoAlpha::getPCColorSpace(this, &v8);
  }
  else {
    PCColor::getColorSpace(a2, &v8);
  }
  PCColor::setRGBA(a2, DefaultValue, v5, v6, 1.0, (OZChannelBase *)&v8);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
}

void sub_1B79DA934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::parseEnd(OZChannelBase *this, PCSerializerReadStream *a2)
{
  CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  unsigned int v3 = *((_DWORD *)a2 + 26);
  if (v3 <= 2)
  {
    if (OZChannelBase::getChannelRootBase(this))
    {
      ChannelRootBase = OZChannelBase::getChannelRootBase(this);
      (*(void (**)(CMTime *__return_ptr))(*(void *)ChannelRootBase + 848))(&v17);
    }
    OZChannel::getValueAsDouble((OZChannel *)&this[1].var3, &v17, 0.0);
    double v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)&this[2].var8, &v17, 0.0);
    double v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)&this[3].var13, &v17, 0.0);
    double v11 = v10;
    (*(void (**)(unsigned int *, CMTime *, void, double))(*(void *)&this[1].var3 + 712))(&this[1].var3, &v17, 0, v7);
    (*(void (**)(unint64_t *, CMTime *, void, double))(this[2].var8 + 712))(&this[2].var8, &v17, 0, v9);
    (*((void (**)(OZChannelTimeConverter **, CMTime *, void, double))this[3].var13 + 89))(&this[3].var13, &v17, 0, v11);
    unsigned int v3 = *((_DWORD *)a2 + 26);
  }
  if (v3 <= 3) {
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)2, 0);
  }
  OZChannel::getValueAsDouble((OZChannel *)&this[5].var4, MEMORY[0x1E4F1FA48], 0.0);
  if (v12 == 0.0 || v12 == 1.0) {
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)3, 0);
  }
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)&this[6].var9, MEMORY[0x1E4F1FA48], 0.0);
  if (!PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u)) {
    OZChannelColorNoAlpha::setColorSpaceIDNoConversion((uint64_t)this, (OZChannelBase *)3, 0);
  }
  OZChannel::setMin((OZChannel *)&this[1].var3, -6.0);
  OZChannel::setMax((OZChannel *)&this[1].var3, 8.0);
  OZChannel::setMin((OZChannel *)&this[2].var8, -6.0);
  OZChannel::setMax((OZChannel *)&this[2].var8, 8.0);
  p_var13 = (OZChannel *)&this[3].var13;
  OZChannel::setMin(p_var13, -6.0);
  OZChannel::setMax(p_var13, 8.0);
  return 1;
}

uint64_t OZChannelColorNoAlpha::setColorSpaceIDNoConversion(uint64_t a1, OZChannelBase *a2, int a3)
{
  float v5 = (OZChannel *)(a1 + 744);
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 744), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
  if (result != a2)
  {
    int v9 = result;
    double v10 = (double)(int)OZChannelBase::setRangeName(a2, v8);
    uint64_t result = OZChannel::setValue(v5, MEMORY[0x1E4F1FA48], v10, a3);
    if (a2 == -1 || v9 == -1)
    {
      return OZChannel::setDefaultValue(v5, v10);
    }
  }
  return result;
}

uint64_t OZChannelColorNoAlpha::getColorSpaceID(OZChannelColorNoAlpha *this)
{
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 744), MEMORY[0x1E4F1FA48], 0.0);

  return PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);
}

uint64_t non-virtual thunk to'OZChannelColorNoAlpha::parseEnd(OZChannelColorNoAlpha *this, PCSerializerReadStream *a2)
{
  return 1;
}

__CFString *OZChannelColorNoAlpha::getObjCWrapperName(OZChannelColorNoAlpha *this)
{
  return @"CHChannelColorNoAlpha";
}

uint64_t OZChannelColorNoAlpha::setIsColor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 100OZSplineNode::allocOZSpline(this, 0) = a2;
  return this;
}

void non-virtual thunk to'OZChannelColorNoAlpha::~OZChannelColorNoAlpha(OZChannelColorNoAlpha *this)
{
}

{
  uint64_t vars8;

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::OZChannelColorNoAlpha_blackImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::OZChannelColorNoAlpha_blackImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::_OZChannelColorNoAlpha_black;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::_OZChannelColorNoAlpha_black) {
    operator new();
  }
}

void sub_1B79DAE60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl::OZChannelColorNoAlpha_blackImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blackImpl *this)
{
}

void sub_1B79DAF30(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::OZChannelColorNoAlpha_whiteImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::OZChannelColorNoAlpha_whiteImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::_OZChannelColorNoAlpha_white;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::_OZChannelColorNoAlpha_white) {
    operator new();
  }
}

void sub_1B79DB00C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl::OZChannelColorNoAlpha_whiteImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_whiteImpl *this)
{
}

void sub_1B79DB0DC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::OZChannelColorNoAlpha_redSample1Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::OZChannelColorNoAlpha_redSample1Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::_OZChannelColorNoAlpha_redSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::_OZChannelColorNoAlpha_redSample1) {
    operator new();
  }
}

void sub_1B79DB1B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl::OZChannelColorNoAlpha_redSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample1Impl *this)
{
}

void sub_1B79DB298(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::OZChannelColorNoAlpha_redSample2Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::OZChannelColorNoAlpha_redSample2Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::_OZChannelColorNoAlpha_redSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::_OZChannelColorNoAlpha_redSample2) {
    operator new();
  }
}

void sub_1B79DB374(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl::OZChannelColorNoAlpha_redSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_redSample2Impl *this)
{
}

void sub_1B79DB454(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::OZChannelColorNoAlpha_greyImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::OZChannelColorNoAlpha_greyImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::_OZChannelColorNoAlpha_grey;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::_OZChannelColorNoAlpha_grey) {
    operator new();
  }
}

void sub_1B79DB530(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl::OZChannelColorNoAlpha_greyImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greyImpl *this)
{
}

void sub_1B79DB600(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample1Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample1Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::_OZChannelColorNoAlpha_greenSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::_OZChannelColorNoAlpha_greenSample1) {
    operator new();
  }
}

void sub_1B79DB6DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl::OZChannelColorNoAlpha_greenSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample1Impl *this)
{
}

void sub_1B79DB7BC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample2Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::OZChannelColorNoAlpha_greenSample2Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::_OZChannelColorNoAlpha_greenSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::_OZChannelColorNoAlpha_greenSample2) {
    operator new();
  }
}

void sub_1B79DB898(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl::OZChannelColorNoAlpha_greenSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_greenSample2Impl *this)
{
}

void sub_1B79DB978(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample1Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample1Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::_OZChannelColorNoAlpha_blueSample1;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::_OZChannelColorNoAlpha_blueSample1) {
    operator new();
  }
}

void sub_1B79DBA54(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl::OZChannelColorNoAlpha_blueSample1Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample1Impl *this)
{
}

void sub_1B79DBB34(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample2Impl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::OZChannelColorNoAlpha_blueSample2Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::_OZChannelColorNoAlpha_blueSample2;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::_OZChannelColorNoAlpha_blueSample2) {
    operator new();
  }
}

void sub_1B79DBC10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl::OZChannelColorNoAlpha_blueSample2Impl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_blueSample2Impl *this)
{
}

void sub_1B79DBCE0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::OZChannelColorNoAlpha_colorInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::OZChannelColorNoAlpha_colorInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::_OZChannelColorNoAlpha_colorInfo;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::_OZChannelColorNoAlpha_colorInfo) {
    operator new();
  }
}

void sub_1B79DBDBC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo::OZChannelColorNoAlpha_colorInfo(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11083F8;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1108418;
  return this;
}

void sub_1B79DBE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::OZChannelColorNoAlpha_gammaImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::OZChannelColorNoAlpha_gammaImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::_OZChannelColorNoAlpha_gamma;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::_OZChannelColorNoAlpha_gamma) {
    operator new();
  }
}

void sub_1B79DBF6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl::OZChannelColorNoAlpha_gammaImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_gammaImpl *this)
{
}

void sub_1B79DC054(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::OZChannelColorNoAlpha_colorSpaceIDImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::OZChannelColorNoAlpha_colorSpaceIDImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::_OZChannelColorNoAlpha_colorSpaceID;
}

void std::__call_once_param<std::tuple<OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::_OZChannelColorNoAlpha_colorSpaceID) {
    operator new();
  }
}

void sub_1B79DC130(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl::OZChannelColorNoAlpha_colorSpaceIDImpl(OZChannelColorNoAlpha::OZChannelColorNoAlpha_colorSpaceIDImpl *this, const PCString *a2)
{
  char v2 = (OZChannelEnum *)OZChannelBase::setRangeName((OZChannelBase *)3, a2);
  OZChannelEnum::createOZChannelEnumCurve(v2, (double)(int)v2);
}

void sub_1B79DC218(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B79DC374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40CC6A35F7);
  _Unwind_Resume(a1);
}

void sub_1B79DD3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelCrop_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F1108560;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11088A8;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v32, @"Channel Left");
  PCSharedCount v20 = a7;
  if (!a7) {
    PCSharedCount v20 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v19);
  }
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 136), &v32, (OZChannelFolder *)this, 1u, 0, v20, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v32, @"Channel Right");
  PCString v24 = a7;
  if (!a7) {
    PCString v24 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v23);
  }
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 288), &v32, (OZChannelFolder *)this, 2u, 0, v24, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v32, @"Channel Bottom");
  unint64_t v28 = a7;
  if (!a7) {
    unint64_t v28 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v27);
  }
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 440), &v32, (OZChannelFolder *)this, 3u, 0, v28, a8);
  PCString::~PCString(&v32);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v32, @"Channel Top");
  if (!a7) {
    a7 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v31);
  }
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 592), &v32, (OZChannelFolder *)this, 4u, 0, a7, a8);
  PCString::~PCString(&v32);
}

void sub_1B79DD8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B79DD970()
{
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)double v6 = &unk_1F1108560;
  *((void *)v6 + PCSpinLock::lock(this + 2) = &unk_1F11088A8;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v22, @"Channel Left");
  uint64_t Instance = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 136), &v22, (OZChannelFolder *)this, 1u, 0, Instance, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v22, @"Channel Right");
  float v13 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 288), &v22, (OZChannelFolder *)this, 2u, 0, v13, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v22, @"Channel Bottom");
  CMTime v17 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 440), &v22, (OZChannelFolder *)this, 3u, 0, v17, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v22, @"Channel Top");
  int v21 = (OZChannelImpl *)OZChannelCrop::OZChannelCrop_valueImpl::getInstance(v20);
  OZChannelDouble::OZChannelDouble((OZChannelCrop *)((char *)this + 592), &v22, (OZChannelFolder *)this, 4u, 0, v21, 0);
  PCString::~PCString(&v22);
}

void sub_1B79DDB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B79DDB90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B79DDBA0()
{
}

void OZChannelCrop::OZChannelCrop(OZChannelCrop *this, const OZChannelCrop *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1108560;
  *(void *)(v5 + 16) = &unk_1F11088A8;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1100CF0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((void *)this + 74) = &unk_1F1100CF0;
  *((void *)this + 76) = &unk_1F1101050;
}

void sub_1B79DDD60(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelCrop::clone(OZChannelCrop *this)
{
}

void sub_1B79DDDF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40044ED5BALL);
  _Unwind_Resume(a1);
}

void OZChannelCrop::copy(OZChannelCrop *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);

  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
}

void OZChannelCrop::getValue(OZChannelCrop *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6, double a7)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a7);
  *(void *)a3 = v14;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a7);
  *(void *)a4 = v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a7);
  *(void *)a5 = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 592), a2, a7);
  *(void *)a6 = v17;
}

uint64_t OZChannelCrop::setValue(OZChannelCrop *this, const CMTime *a2, double a3, double a4, double a5, double a6)
{
  OZChannel::setValue((OZChannel *)((char *)this + 136), a2, a3, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 288), a2, a4, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 440), a2, a5, 0);

  return OZChannel::setValue((OZChannel *)((char *)this + 592), a2, a6, 0);
}

__CFString *OZChannelCrop::getObjCWrapperName(OZChannelCrop *this)
{
  return @"CHChannelCrop";
}

void OZChannelCrop::~OZChannelCrop(OZChannelCrop *this)
{
  OZChannelCrop::~OZChannelCrop(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1108560;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F11088A8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

void non-virtual thunk to'OZChannelCrop::~OZChannelCrop(OZChannelCrop *this)
{
}

{
  uint64_t vars8;

  OZChannelCrop::~OZChannelCrop((OZChannelCrop *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelCrop::OZChannelCrop_valueImpl::getInstance(OZChannelCrop::OZChannelCrop_valueImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::OZChannelCrop_valueImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::OZChannelCrop_valueImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCrop::OZChannelCrop_valueImpl::_OZChannelCrop_value;
}

void std::__call_once_param<std::tuple<OZChannelCrop::OZChannelCrop_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelCrop::OZChannelCrop_valueImpl::_OZChannelCrop_value) {
    operator new();
  }
}

void sub_1B79DE154(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelCrop::OZChannelCrop_valueImpl::OZChannelCrop_valueImpl(OZChannelCrop::OZChannelCrop_valueImpl *this)
{
}

void sub_1B79DE228(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

__CFString *OZChannelCurve::getObjCWrapperName(OZChannelCurve *this)
{
  return @"CHChannelCurve";
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  *(void *)double v8 = &unk_1F1108990;
  *((void *)v8 + PCSpinLock::lock(this + 2) = &unk_1F1108D38;
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v13, @"Channel Shape Animation");
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v13, a4, 1u, 0x1008Au);
  PCString::~PCString(&v13);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  uint64_t v10 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v10);
  *((void *)this + 16) = OZChannelCurveInfo;
  *((void *)this + 17) = OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((void *)this + 14) = OZChannelCurveImpl;
  *((void *)this + 15) = OZChannelCurveImpl;
  *((void *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((void *)this + 10OZSplineNode::allocOZSpline(this, 0) = 0;
}

void sub_1B79DE3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelCurve::createOZChannelCurveInfo(OZChannelCurve *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelCurve::createOZChannelCurveInfo(void)::_OZChannelCurveInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelCurve::createOZChannelCurveInfo(void)::_OZChannelCurveInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCurve::_OZChannelCurveInfo;
}

uint64_t OZChannelCurve::createOZChannelCurveImpl(OZChannelCurve *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelCurve::createOZChannelCurveImpl(void)::_OZChannelCurveImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelCurve::createOZChannelCurveImpl(void)::_OZChannelCurveImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelCurve::_OZChannelCurveImpl;
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelCurve_Factory::getInstance(this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  *(void *)this = &unk_1F1108990;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1108D38;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v16, @"Channel Shape Animation");
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v16, a3, 1u, 0x1008Au);
  PCString::~PCString(&v16);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  PCString v13 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v13);
  *((void *)this + 16) = OZChannelCurveInfo;
  *((void *)this + 17) = OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((void *)this + 14) = OZChannelCurveImpl;
  *((void *)this + 15) = OZChannelCurveImpl;
  *((void *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((void *)this + 10OZSplineNode::allocOZSpline(this, 0) = 0;
}

void sub_1B79DE630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(void *)uint64_t v5 = &unk_1F1108990;
  *((void *)v5 + PCSpinLock::lock(this + 2) = &unk_1F1108D38;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v10, @"Channel Shape Animation");
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelCurve *)((char *)this + 152), &v10, 0, 1u, 0x1008Au);
  PCString::~PCString(&v10);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  double v7 = OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  OZChannelCurveInfo = (OZChannelCurve *)OZChannelCurve::createOZChannelCurveInfo(v7);
  *((void *)this + 16) = OZChannelCurveInfo;
  *((void *)this + 17) = OZChannelCurveInfo;
  uint64_t OZChannelCurveImpl = OZChannelCurve::createOZChannelCurveImpl(OZChannelCurveInfo);
  *((void *)this + 14) = OZChannelCurveImpl;
  *((void *)this + 15) = OZChannelCurveImpl;
  *((void *)this + 25) = *((void *)this + 6);
  *((void *)this + 35) = this;
  *((_WORD *)this + 396) = 0;
  *((void *)this + 10OZSplineNode::allocOZSpline(this, 0) = 0;
}

void sub_1B79DE788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZDynamicCurve::~OZDynamicCurve(v12);
  OZChannelVertexFolder::~OZChannelVertexFolder(v11);
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelCurve::OZChannelCurve(OZChannelCurve *this, const OZChannelCurve *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  *double v6 = &unk_1F1108990;
  void v6[2] = &unk_1F1108D38;
  OZChannelVertexFolder::OZChannelVertexFolder((OZChannelVertexFolder *)(v6 + 19), (const OZChannelCurve *)((char *)a2 + 152), a3);
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 288));
  OZDynamicCurve::OZDynamicCurve((OZChannelCurve *)((char *)this + 520));
  *((_OWORD *)this + 47) = *((_OWORD *)a2 + 47);
  *((_OWORD *)this + 4OZSpline::reparametrize((uint64_t)this + 8) = *((_OWORD *)a2 + 48);
  *((void *)this + 9OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 98);
  OZDynamicCurve::operator=((uint64_t)this + 288, (os_unfair_lock_s *)a2 + 72);
}

void sub_1B79DE8F8(_Unwind_Exception *a1)
{
  OZDynamicCurve::~OZDynamicCurve(v3);
  OZChannelVertexFolder::~OZChannelVertexFolder(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelCurve::~OZChannelCurve(OZChannel *this)
{
  this->var0 = (void **)&unk_1F1108990;
  this->var2 = (void **)&unk_1F1108D38;
  OZDynamicCurve::~OZDynamicCurve((OZDynamicCurve *)&this[3].var8);
  OZDynamicCurve::~OZDynamicCurve((OZDynamicCurve *)&this[1].var17);
  OZChannelVertexFolder::~OZChannelVertexFolder((OZChannelVertexFolder *)&this[1]);

  OZChannel::~OZChannel(this);
}

{
  uint64_t vars8;

  OZChannelCurve::~OZChannelCurve(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelCurve::~OZChannelCurve(OZChannelCurve *this)
{
}

{
  uint64_t vars8;

  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelCurve::clone(OZChannelCurve *this)
{
}

void sub_1B79DEA94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C401ABBD6EFLL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelCurve::copy(OZChannel *this, const OZChannelBase *a2, char a3)
{
  OZChannel::copy(this, a2, a3);
  if (a2)
  {
    if (v5)
    {
      *(_OWORD *)&this[4].var18 = *((_OWORD *)v5 + 47);
      *(_OWORD *)&this[5].var1 = *((_OWORD *)v5 + 48);
      *(void *)&this[5].var3 = *((void *)v5 + 98);
      OZDynamicCurve::operator=((uint64_t)&this[1].var17, (os_unfair_lock_s *)v5 + 72);
    }
  }
  this[1].var6 = this->var6;
  double v6 = (uint64_t (*)(OZChannel *))*((void *)this->var0 + 107);

  return v6(this);
}

uint64_t OZChannelCurve::assign(OZChannel *this, const OZChannelBase *a2)
{
  OZChannel::assign(this, a2);
  if (a2)
  {
    if (v4)
    {
      *(_OWORD *)&this[4].var18 = *((_OWORD *)v4 + 47);
      *(_OWORD *)&this[5].var1 = *((_OWORD *)v4 + 48);
      *(void *)&this[5].var3 = *((void *)v4 + 98);
      OZDynamicCurve::operator=((uint64_t)&this[1].var17, (os_unfair_lock_s *)v4 + 72);
    }
  }
  this[1].var6 = this->var6;
  uint64_t v5 = (uint64_t (*)(OZChannel *))*((void *)this->var0 + 107);

  return v5(this);
}

uint64_t OZChannelCurve::compare(OZChannel *this, const OZChannelBase *a2)
{
  uint64_t result = OZChannel::compare(this, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (v5)
      {
        double v6 = v5;
        if (OZDynamicCurve::operator==((uint64_t)&this[1].var17, (uint64_t)v5 + 288)
          && OZDynamicCurve::operator==((uint64_t)&this[3].var8, (uint64_t)v6 + 520))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

void OZChannelCurve::copyKeyframesFromChannel(OZChannel *this, const CMTime *a2, OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    if (v5)
    {
      double v6 = v5;
      memset(&v51, 0, sizeof(v51));
      (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))this->var0 + 41))(&v51, this, a2);
      OZChannel::getKeyframes(v6, 0, &v49);
      double v7 = v49;
      if (v50 == v49)
      {
        (*((void (**)(OZChannel *, void))this->var0 + 36))(this, 0);
        OZChannel::getValueAsDouble(v6, MEMORY[0x1E4F1FA48], 0.0);
        OZChannel::setInitialValue(this, v23, 0);
      }
      else
      {
        uint64_t v8 = 0;
        unsigned int v24 = 0;
        p_var17 = &v6[1].var17;
        p_unint64_t var8 = &v6[3].var8;
        double v11 = &this[1].var17;
        double v12 = &this[3].var8;
        do
        {
          CMTime v48 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          double v46 = 0.0;
          double v47 = 0.0;
          double v44 = 0.0;
          double v45 = 0.0;
          double v42 = 0.0;
          double v43 = 0.0;
          BOOL KeyframeEnabled = 0;
          OZChannel::getKeyframe(v6, v7[v8], &v48, &v46);
          OZChannel::getKeyframeInputTangents(v6, v49[v8], &v45, &v44, 0);
          OZChannel::getKeyframeOutputTangents(v6, v49[v8], &v43, &v42, 0);
          OZChannel::getKeyframeInterpolation(v6, v49[v8]);
          OZChannel::getKeyframeFlags(v6, v49[v8]);
          BOOL KeyframeEnabled = OZChannel::getKeyframeEnabled(v6, v49[v8]);
          if (!v24)
          {
            CMTime v53 = v51;
            CMTime v52 = v48;
            PC_CMTimeSaferSubtract(&v53, &v52, (uint64_t)&v40);
            CMTime v51 = v40;
          }
          memset(&v40, 0, sizeof(v40));
          (*((void (**)(CMTime *__return_ptr, OZChannel *))this->var0 + 40))(&v40, this);
          double v13 = *((double *)this->var16 + 5);
          CMTime v53 = v51;
          CMTime v52 = v48;
          PC_CMTimeSaferAdd(&v53, &v52, (uint64_t)&__p);
          CMTime v53 = __p;
          CMTime v52 = v40;
          PC_CMTimeSaferSubtract(&v53, &v52, (uint64_t)&v39);
          OZChannel::setKeyframe(this, &v39, v46 / v13, 0);
          CMTime v53 = v51;
          CMTime v52 = v48;
          PC_CMTimeSaferAdd(&v53, &v52, (uint64_t)&__p);
          CMTime v53 = __p;
          CMTime v52 = v40;
          PC_CMTimeSaferSubtract(&v53, &v52, (uint64_t)&v39);
          Keyframe = (void *)OZChannel::getKeyframe(this, &v39);
          OZChannel::setKeyframeFlags(this, Keyframe);
          OZChannel::setKeyframeEnabled(this, Keyframe);
          OZChannel::setKeyframeInterpolation(this, Keyframe);
          OZChannel::setKeyframeInputTangents(this, Keyframe, v45, v44 / v13, 0);
          OZChannel::setKeyframeOutputTangents(this, Keyframe, v43, v42 / v13, 0);
          double v36 = 0.0;
          double v37 = 0.0;
          double v34 = 0.0;
          double v35 = 0.0;
          double v32 = 0.0;
          double v33 = 0.0;
          double v31 = 0.0;
          unsigned __int8 v30 = 0;
          memset(&v39, 0, sizeof(v39));
          memset(&__p, 0, sizeof(__p));
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          (*((void (**)(OZChannelInfo **, CMTime *))*p_var17 + 36))(&v6[1].var17, &v39);
          (*(void (**)(unint64_t *, CMTime *))(*p_var8 + 288))(&v6[3].var8, &__p);
          CMTime v27 = v48;
          CMTime v53 = v51;
          memset(v26, 0, sizeof(v26));
          CMTime v52 = v48;
          PC_CMTimeSaferAdd(&v53, &v52, (uint64_t)&v25);
          CMTime v53 = v25;
          CMTime v52 = v40;
          v15.n128_f64[0] = PC_CMTimeSaferSubtract(&v53, &v52, (uint64_t)v26);
          CMTimeValue value = *(void **)&v39.timescale;
          if (*(void *)&v39.timescale != v39.value)
          {
            unint64_t v17 = 0;
            unsigned int v18 = 1;
            CMTimeValue value = (void *)v39.value;
            do
            {
              (*((void (**)(OZChannelInfo **, void, uint64_t, __n128))*p_var17 + 55))(&v6[1].var17, value[v17], 1, v15);
              (*(void (**)(unint64_t *, void, uint64_t))(*p_var8 + 440))(&v6[3].var8, *(void *)(__p.value + 8 * v17), 1);
              (*((void (**)(OZChannelInfo **, void, CMTime *, double *))*p_var17 + 79))(&v6[1].var17, *(void *)(v39.value + 8 * v17), &v27, &v35);
              (*(void (**)(unint64_t *, void, CMTime *, double *))(*p_var8 + 632))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v27, &v34);
              (*((void (**)(OZChannelInfo **, void, CMTime *, double *))*p_var17 + 80))(&v6[1].var17, *(void *)(v39.value + 8 * v17), &v27, &v33);
              (*(void (**)(unint64_t *, void, CMTime *, double *))(*p_var8 + 640))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v27, &v32);
              (*((void (**)(OZChannelInfo **, void, CMTime *, double *, double *))*p_var17 + 42))(&v6[1].var17, *(void *)(v39.value + 8 * v17), &v27, &v47, &v37);
              (*(void (**)(unint64_t *, void, CMTime *, double *, double *))(*p_var8 + 336))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v27, &v47, &v36);
              (*(void (**)(unint64_t *, void, CMTime *, BOOL *))(*p_var8 + 368))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v27, &KeyframeEnabled);
              (*(void (**)(unint64_t *, void, unsigned __int8 *))(*p_var8 + 400))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v30);
              PCString v19 = (OZCoreGlobals *)(*(uint64_t (**)(unint64_t *, void, CMTime *, double *))(*p_var8 + 176))(&v6[3].var8, *(void *)(__p.value + 8 * v17), &v27, &v31);
              uint64_t Instance = (OZCoreGlobals *)OZCoreGlobals::getInstance(v19);
              char v21 = *((unsigned char *)Instance + 8);
              *(unsigned char *)(OZCoreGlobals::getInstance(Instance) + OZSpline::reparametrize((uint64_t)this + 8) = 1;
              (*((void (**)(OZChannelInfo **, void *, uint64_t *, double))*v11 + 27))(&this[1].var17, v26, &v29, v47);
              (*(void (**)(unint64_t *, void *, uint64_t *, double))(*v12 + 216))(&this[3].var8, v26, &v28, v47);
              (*((void (**)(OZChannelInfo **, uint64_t, void *, double, double))*v11 + 20))(&this[1].var17, v29, v26, v47, v37);
              (*(void (**)(unint64_t *, uint64_t, void *, double, double))(*v12 + 160))(&this[3].var8, v28, v26, v47, v36);
              (*((void (**)(OZChannelInfo **, uint64_t, void *, double))*v11 + 77))(&this[1].var17, v29, v26, v35);
              (*(void (**)(unint64_t *, uint64_t, void *, double))(*v12 + 616))(&this[3].var8, v28, v26, v34);
              (*((void (**)(OZChannelInfo **, uint64_t, void *, double))*v11 + 78))(&this[1].var17, v29, v26, v33);
              (*(void (**)(unint64_t *, uint64_t, void *, double))(*v12 + 624))(&this[3].var8, v28, v26, v32);
              (*((void (**)(OZChannelInfo **, uint64_t, void))*v11 + 55))(&this[1].var17, v29, 0);
              (*(void (**)(unint64_t *, uint64_t, void))(*v12 + 440))(&this[3].var8, v28, 0);
              (*((void (**)(OZChannelInfo **, uint64_t, BOOL, void *))*v11 + 45))(&this[1].var17, v29, KeyframeEnabled, v26);
              (*((void (**)(OZChannelInfo **, uint64_t, void))*v11 + 49))(&this[1].var17, v29, v30);
              (*((void (**)(OZChannelInfo **, uint64_t, void *, double))*v11 + 21))(&this[1].var17, v29, v26, v31);
              (*(void (**)(unint64_t *, uint64_t, BOOL, void *))(*v12 + 360))(&this[3].var8, v28, KeyframeEnabled, v26);
              (*(void (**)(unint64_t *, uint64_t, void *, double))(*v12 + 168))(&this[3].var8, v28, v26, v31);
              PCString v22 = (OZCoreGlobals *)(*(uint64_t (**)(unint64_t *, uint64_t, void))(*v12 + 392))(&this[3].var8, v28, v30);
              *(unsigned char *)(OZCoreGlobals::getInstance(v22) + OZSpline::reparametrize((uint64_t)this + 8) = v21;
              unint64_t v17 = v18;
              CMTimeValue value = (void *)v39.value;
              ++v18;
            }
            while (v17 < (*(void *)&v39.timescale - v39.value) >> 3);
          }
          if (__p.value)
          {
            *(void *)&__p.int32_t timescale = __p.value;
            operator delete((void *)__p.value);
            CMTimeValue value = (void *)v39.value;
          }
          if (value)
          {
            *(void *)&v39.int32_t timescale = value;
            operator delete(value);
          }
          double v7 = v49;
          uint64_t v8 = ++v24;
        }
        while (v24 < (unint64_t)(v50 - v49));
      }
      (*((void (**)(OZChannel *, __n128))this->var0 + 107))(this, v15);
      if (v49)
      {
        PCString v50 = v49;
        operator delete(v49);
      }
    }
  }
}

void sub_1B79DF94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  double v37 = *(void **)(v35 - 216);
  if (v37)
  {
    *(void *)(v35 - 20OZSpline::reparametrize((uint64_t)this + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

OZChannelFolder *OZChannelCurve::setIsSpline(OZChannelCurve *this, uint64_t a2)
{
  OZChannel::setIsSpline((OZChannel *)this, a2);

  return OZChannelFolder::setIsSpline((OZChannelFolder *)((char *)this + 152), a2);
}

OZChannelFolder *OZChannelCurve::setValueAndIgnoreRecordOption(OZChannelCurve *this, const CMTime *a2)
{
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)this, a2);
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 656))(this, 1);

  return OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    if (ChannelRootBase)
    {
      (*(void (**)(CMTime *__return_ptr))(*(void *)ChannelRootBase + 712))(v7);
      CMTime v8 = v7[0];
      CMTime time2 = *a2;
      if (CMTimeCompare(v7, &time2))
      {
        if (((*(uint64_t (**)(OZChannelCurve *, void))(*(void *)this + 552))(this, 0) & 1) == 0)
        {
          (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, CMTime *))(*(void *)this + 328))(v7, this, &v8);
          OZChannel::getValueAsDouble((OZChannel *)this, MEMORY[0x1E4F1FA48], 0.0);
          OZChannel::setKeyframe((OZChannel *)this, v7, v5, 1);
          OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), &v8);
        }
      }
    }
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(void *)this + 656))(this, 1);
}

BOOL OZChannelCurve::removeValue(OZChannelCurve *this, const CMTime *a2)
{
  BOOL v4 = OZChannel::removeValue((OZChannel *)this, a2);
  OZChannelFolder::deleteKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  return v4;
}

BOOL OZChannelCurve::moveValue(OZChannelCurve *this, const CMTime *a2, const CMTime *a3, uint64_t a4)
{
  BOOL v7 = OZChannel::moveValue((OZChannel *)this, a2, a3, a4);
  OZChannelFolder::moveKeypointTo((OZChannelFolder *)((char *)this + 152), a2, a3, &v9);
  return v7;
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, double a3)
{
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    OZChannel::setValue((OZChannel *)this, a2, a3, 0);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  double v6 = *(uint64_t (**)(OZChannelCurve *, uint64_t))(*(void *)this + 656);

  return v6(this, 1);
}

OZChannelFolder *OZChannelCurve::addKeypointAt(OZChannelCurve *this, const CMTime *a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (((*(uint64_t (**)(OZChannelCurve *))(*(void *)this + 488))(this) & 1) == 0) {
    (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 480))(this, 1);
  }
  OZChannel::addKeypointAt((OZChannel *)this, a2);

  return OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
}

uint64_t OZChannelCurve::moveKeypointTo@<X0>(OZChannelCurve *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (((*(uint64_t (**)(OZChannelCurve *))(*(void *)this + 488))(this) & 1) == 0) {
    (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 480))(this, 1);
  }
  *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&a3->value;
  a6->CMTimeEpoch epoch = a3->epoch;
  (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, const CMTime *))(*(void *)this + 328))(&v14, this, a2);
  uint64_t result = OZChannel::getKeyframe((OZChannel *)this, &v14);
  if (result)
  {
    uint64_t v13 = result;
    OZChannelFolder::moveKeypointTo((OZChannelFolder *)((char *)this + 152), a2, a6, &v14);
    *a6 = v14;
    (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, CMTime *))(*(void *)this + 328))(&v14, this, a6);
    return (*(uint64_t (**)(OZChannelCurve *, uint64_t, CMTime *, uint64_t, uint64_t))(*(void *)this + 840))(this, v13, &v14, a5, a4);
  }
  return result;
}

OZChannelFolder *OZChannelCurve::deleteKeypointAt(OZChannelCurve *this, const CMTime *a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  (*(void (**)(CMTime *__return_ptr, OZChannelCurve *, const CMTime *))(*(void *)this + 328))(&v5, this, a2);
  uint64_t result = (OZChannelFolder *)OZChannel::getKeyframe((OZChannel *)this, &v5);
  if (result)
  {
    OZChannel::deleteKeyframe((OZChannel *)this, result);
    return OZChannelFolder::deleteKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  return result;
}

void OZChannelCurve::resetToDefault(OZChannelCurve *this, uint64_t a2)
{
  OZChannel::resetToDefault((OZChannel *)this, a2);

  OZChannelBase::reset((OZChannelBase *)((char *)this + 152), a2);
}

OZChannelFolder *OZChannelCurve::setExtrapolation(OZChannel *this, uint64_t a2, uint64_t a3)
{
  double v6 = (OZChannelFolder *)&this[1];
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  OZChannel::setExtrapolation(this, a2, a3);

  return OZChannelFolder::setExtrapolation(v6, a2, a3);
}

OZChannelFolder *OZChannelCurve::generateKeys(OZChannel *this, uint64_t a2, uint64_t a3)
{
  double v6 = (OZChannelFolder *)&this[1];
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  OZChannel::generateKeys(this);

  return OZChannelFolder::generateKeys(v6, a2, a3);
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this)) {
    OZChannelCurve::insertVertex(this, a2, a3, a4, a5);
  }
  PCString v10 = *(uint64_t (**)(OZChannelCurve *, uint64_t))(*(void *)this + 656);

  return v10(this, 1);
}

void OZChannelCurve::insertVertex(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  CMTime v9 = 0;
  PCString v10 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    OZChannelFolder::addKeypointAt((OZChannelFolder *)((char *)this + 152), a2);
  }
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 288), a2, a3, a4, &v10);
}

uint64_t OZChannelCurve::setValue(OZChannelCurve *this, const CMTime *a2, Float64 a3, double a4)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  if (OZChannel::isAnimated((OZChannel *)this))
  {
    double v9 = 0.0;
    OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, &v9);
    OZChannelCurve::insertVertex(this, a2, a3, a4, v9);
  }
  return (*(uint64_t (**)(OZChannelCurve *, uint64_t))(*(void *)this + 656))(this, 1);
}

uint64_t OZChannelCurve::getValueXAsInt(OZChannelCurve *this, const CMTime *a2, double a3)
{
  return (int)(*(double (**)(OZChannelCurve *, const CMTime *, double))(*(void *)this + 896))(this, a2, a3);
}

double OZChannelCurve::getValueXAsDouble(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  double v4 = 0.0;
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 288), a2, a3, &v4);
  return v4;
}

uint64_t OZChannelCurve::getValueYAsInt(OZChannelCurve *this, const CMTime *a2, double a3)
{
  return (int)(*(double (**)(OZChannelCurve *, const CMTime *, double))(*(void *)this + 912))(this, a2, a3);
}

double OZChannelCurve::getValueYAsDouble(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  double v4 = 0.0;
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, &v4);
  return v4;
}

BOOL OZChannelCurve::removeValue(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  double v12 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  long long v11 = 0uLL;
  double v6 = (OZChannelCurve *)((char *)this + 288);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, a3, (void **)&v11 + 1);
  BOOL v7 = (OZChannelCurve *)((char *)this + 520);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, a3, (void **)&v11);
  BOOL v8 = v11 != 0;
  if (v11 != 0)
  {
    double v9 = (OZChannelBase *)((char *)this + 152);
    OZChannelBase::willBeModified(v9, 1);
    OZDynamicCurve::getVertexChannel(v6, *((char **)&v11 + 1), (OZChannelVertexFolder **)&v12);
    if (v12) {
      OZChannelFolder::removeDescendant((OZChannelFolder *)v9, v12);
    }
    OZDynamicCurve::getVertexChannel(v7, (char *)v11, (OZChannelVertexFolder **)&v12);
    if (v12) {
      OZChannelFolder::removeDescendant((OZChannelFolder *)v9, v12);
    }
    OZDynamicCurve::delKeypoint(v6, *((char **)&v11 + 1), a2);
    OZDynamicCurve::delKeypoint(v7, (char *)v11, a2);
  }
  return v8;
}

void OZChannelCurve::addVertex(OZChannelCurve *this, const CMTime *a2, double a3, double a4)
{
  BOOL v8 = 0;
  double v9 = 0.0;
  BOOL v7 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  OZDynamicCurve::getCurrentMaxValueU((OZChannelCurve *)((char *)this + 288), a2, &v9);
  OZDynamicCurve::setKeypoint((OZChannelCurve *)((char *)this + 288), a2, v9 + 1.0, a3, &v8);
}

uint64_t OZChannelCurve::addVertices(uint64_t a1, const CMTime *a2, uint64_t a3)
{
  double v9 = 0.0;
  Float64 v10 = 0.0;
  BOOL v8 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, 1);
  OZDynamicCurve::getCurrentMaxValueU((OZDynamicCurve *)(a1 + 288), a2, &v10);
  OZDynamicCurve::getCurrentMaxValueU((OZDynamicCurve *)(a1 + 520), a2, &v9);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    double v6 = **(double **)a3;
    double v9 = v9 + 1.0;
    Float64 v10 = v10 + 1.0;
    OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, v10, v6, &v8);
  }
  OZDynamicCurve::setDefaultAtCurrentTime((OZDynamicCurve *)(a1 + 288), a2);
  OZDynamicCurve::setDefaultAtCurrentTime((OZDynamicCurve *)(a1 + 520), a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 856))(a1);
}

BOOL OZChannelCurve::deleteAllVertices(OZChannelCurve *this)
{
  char v2 = (OZChannelFolder *)((char *)this + 152);
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  OZChannelFolder::removeAllDescendants(v2, 1);
  OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 288));

  return OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 520));
}

void *OZChannelCurve::getVertex(OZChannelCurve *this, const CMTime *a2, Float64 a3)
{
  BOOL v7 = 0;
  BOOL v8 = 0;
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, a3, &v8);
  OZDynamicCurve::getKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, a3, &v7);
  return v8;
}

void *OZChannelCurve::getFirstVertex(OZChannelCurve *this, const CMTime *a2, int a3)
{
  Float64 v10 = 0;
  long long v11 = 0;
  if (a3)
  {
    OZDynamicCurve::getFirstValidKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, &v11);
    OZDynamicCurve::getFirstValidKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, &v10);
  }
  else
  {
    Float64 v8 = 0.0;
    Float64 v9 = 0.0;
    CMTime v5 = (OZChannelCurve *)((char *)this + 288);
    OZDynamicCurve::getFirstKeypoint((OZChannelCurve *)((char *)this + 288), a2, &v9, 0);
    double v6 = (OZChannelCurve *)((char *)this + 520);
    OZDynamicCurve::getFirstKeypoint(v6, a2, &v8, 0);
    OZDynamicCurve::getKeypointHandle(v5, a2, v9, &v11);
    OZDynamicCurve::getKeypointHandle(v6, a2, v8, &v10);
  }
  return v11;
}

void *OZChannelCurve::getLastVertex(OZChannelCurve *this, const CMTime *a2, int a3)
{
  Float64 v10 = 0;
  long long v11 = 0;
  if (a3)
  {
    OZDynamicCurve::getLastValidKeypointHandle((OZChannelCurve *)((char *)this + 288), a2, &v11);
    OZDynamicCurve::getLastValidKeypointHandle((OZChannelCurve *)((char *)this + 520), a2, &v10);
  }
  else
  {
    Float64 v8 = 0.0;
    Float64 v9 = 0.0;
    CMTime v5 = (OZChannelCurve *)((char *)this + 288);
    OZDynamicCurve::getLastKeypoint((OZChannelCurve *)((char *)this + 288), a2, &v9, 0);
    double v6 = (OZChannelCurve *)((char *)this + 520);
    OZDynamicCurve::getLastKeypoint(v6, a2, &v8, 0);
    OZDynamicCurve::getKeypointHandle(v5, a2, v9, &v11);
    OZDynamicCurve::getKeypointHandle(v6, a2, v8, &v10);
  }
  return v11;
}

void *OZChannelCurve::getNextVertex(uint64_t a1, const CMTime *a2, char *a3, char *a4, int a5)
{
  long long v11 = 0;
  double v12 = 0;
  Float64 v8 = (OZDynamicCurve *)(a1 + 288);
  Float64 v9 = (OZDynamicCurve *)(a1 + 520);
  if (a5)
  {
    OZDynamicCurve::getNextValidKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getNextValidKeypointHandle(v9, a2, a4, &v11);
  }
  else
  {
    OZDynamicCurve::getNextKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getNextKeypointHandle(v9, a2, a4, &v11);
  }
  return v12;
}

void *OZChannelCurve::getPreviousVertex(uint64_t a1, const CMTime *a2, char *a3, char *a4, int a5)
{
  long long v11 = 0;
  double v12 = 0;
  Float64 v8 = (OZDynamicCurve *)(a1 + 288);
  Float64 v9 = (OZDynamicCurve *)(a1 + 520);
  if (a5)
  {
    OZDynamicCurve::getPreviousValidKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getPreviousValidKeypointHandle(v9, a2, a4, &v11);
  }
  else
  {
    OZDynamicCurve::getPreviousKeypointHandle(v8, a2, a3, &v12);
    OZDynamicCurve::getPreviousKeypointHandle(v9, a2, a4, &v11);
  }
  return v12;
}

void OZChannelCurve::getEnabledVerticesList(os_unfair_lock_s *this@<X0>, const CMTime *a2@<X1>, char **a3@<X8>)
{
  CMTime v25 = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  CMTime __p = 0;
  double v23 = 0;
  uint64_t v24 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  OZDynamicCurve::getKeypointValidHandleList(this + 72, (uint64_t)a2, &v25);
  OZDynamicCurve::getKeypointValidHandleList(this + 130, (uint64_t)a2, &__p);
  std::vector<OZVertex2D>::reserve((void **)a3, (v26 - (unsigned char *)v25) >> 3);
  double v6 = v26;
  if (v26 != v25)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    Float64 v9 = a3 + 2;
    Float64 v10 = a3[1];
    double v6 = v25;
    do
    {
      uint64_t v11 = v6[v7];
      uint64_t v12 = *((void *)__p + v7);
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v13 = (v10 - *a3) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v9 - (void)*a3;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a3 + 2), v16);
        }
        else {
          unint64_t v17 = 0;
        }
        unsigned int v18 = &v17[16 * v13];
        *(void *)unsigned int v18 = v11;
        *((void *)v18 + atomic_store(0, (unint64_t *)this + 1) = v12;
        PCSharedCount v20 = *a3;
        PCString v19 = a3[1];
        char v21 = v18;
        if (v19 != *a3)
        {
          do
          {
            *((_OWORD *)v21 - atomic_store(0, (unint64_t *)this + 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          PCString v19 = *a3;
        }
        Float64 v10 = v18 + 16;
        *a3 = v21;
        a3[1] = v18 + 16;
        a3[2] = &v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)Float64 v10 = v11;
        *((void *)v10 + atomic_store(0, (unint64_t *)this + 1) = v12;
        v10 += 16;
      }
      a3[1] = v10;
      double v6 = v25;
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((v26 - (unsigned char *)v25) >> 3));
  }
  if (__p)
  {
    double v23 = __p;
    operator delete(__p);
    double v6 = v25;
  }
  if (v6)
  {
    unint64_t v26 = v6;
    operator delete(v6);
  }
}

void sub_1B79E0FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + OZSpline::reparametrize((uint64_t)this + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<OZVertex2D>::reserve(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    Float64 v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    Float64 v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - atomic_store(0, (unint64_t *)this + 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      Float64 v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void OZChannelCurve::getVerticesList(OZChannelCurve *this@<X0>, char **a2@<X8>)
{
  double v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  CMTime __p = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, (char **)&v23);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 520, (char **)&__p);
  std::vector<OZVertex2D>::reserve((void **)a2, (v24 - (unsigned char *)v23) >> 3);
  double v4 = v24;
  if (v24 != v23)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a2 + 2;
    uint64_t v8 = a2[1];
    double v4 = v23;
    do
    {
      uint64_t v9 = v4[v5];
      uint64_t v10 = *((void *)__p + v5);
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v11 = (v8 - *a2) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v7 - (void)*a2;
        uint64_t v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a2 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = &v15[16 * v11];
        *(void *)unint64_t v16 = v9;
        *((void *)v16 + atomic_store(0, (unint64_t *)this + 1) = v10;
        unsigned int v18 = *a2;
        unint64_t v17 = a2[1];
        PCString v19 = v16;
        if (v17 != *a2)
        {
          do
          {
            *((_OWORD *)v19 - atomic_store(0, (unint64_t *)this + 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          unint64_t v17 = *a2;
        }
        uint64_t v8 = v16 + 16;
        *a2 = v19;
        a2[1] = v16 + 16;
        a2[2] = &v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v9;
        *((void *)v8 + atomic_store(0, (unint64_t *)this + 1) = v10;
        v8 += 16;
      }
      a2[1] = v8;
      double v4 = v23;
      uint64_t v5 = ++v6;
    }
    while (v6 < (unint64_t)((v24 - (unsigned char *)v23) >> 3));
  }
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
    double v4 = v23;
  }
  if (v4)
  {
    uint64_t v24 = v4;
    operator delete(v4);
  }
}

void sub_1B79E124C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + OZSpline::reparametrize((uint64_t)this + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelCurve::setVertexValue(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(void *)a1 + 736))(a1, a4);
  Float64 v13 = 0.0;
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, &v13, 0);
  OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, v13, a5);
  return OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, v13, a6);
}

BOOL OZChannelCurve::getVertexValue(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, 0, a5);

  return OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, 0, a6);
}

BOOL OZChannelCurve::getVertexParametricValue(uint64_t a1, char *a2, int a3, CMTime *a4, double *a5)
{
  return OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, a5, 0);
}

uint64_t OZChannelCurve::offsetVertex(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(void *)a1 + 736))(a1, a4);
  double v13 = 0.0;
  Float64 v14 = 0.0;
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, &v14, &v13);
  OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 288), a2, a4, v14, v13 + a5);
  OZDynamicCurve::getKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, &v14, &v13);
  return OZDynamicCurve::setKeypoint((OZDynamicCurve *)(a1 + 520), a3, a4, v14, v13 + a6);
}

void OZChannelCurve::offsetCurve(OZChannelCurve *this, const CMTime *a2, double a3, double a4)
{
  Float64 v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  CMTime __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, (char **)&v14);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 520, (char **)&__p);
  uint64_t v8 = v15;
  if (v15 != v14)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 1;
    uint64_t v8 = (char **)v14;
    do
    {
      OZChannelCurve::offsetVertex((uint64_t)this, v8[v9], *((char **)__p + v9), a2, a3, a4);
      uint64_t v9 = v10;
      uint64_t v8 = (char **)v14;
      ++v10;
    }
    while (v9 != ((char *)v15 - (unsigned char *)v14) >> 3);
  }
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
    uint64_t v8 = (char **)v14;
  }
  if (v8)
  {
    uint64_t v15 = v8;
    operator delete(v8);
  }
}

void sub_1B79E15B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelCurve::getCurveValueWithParameter(OZChannelCurve *this, const CMTime *a2, Float64 a3, double *a4, double *a5)
{
  OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 288), a2, a3, a4);

  return OZDynamicCurve::getPoint((OZChannelCurve *)((char *)this + 520), a2, a3, a5);
}

uint64_t OZChannelCurve::setVertexInterpolation(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unsigned int v6 = (OZDynamicCurve *)(a1 + 288);
  OZDynamicCurve::setKeypointInterpolation((OZDynamicCurve *)(a1 + 288), a2, a4);

  return OZDynamicCurve::setKeypointInterpolation(v6, a3, a4);
}

uint64_t OZChannelCurve::isCurveFlattened(OZChannelCurve *this)
{
  uint64_t result = OZDynamicCurve::isCurveFlattened((OZChannelCurve *)((char *)this + 288));
  if (result)
  {
    return OZDynamicCurve::isCurveFlattened((OZChannelCurve *)((char *)this + 520));
  }
  return result;
}

uint64_t OZChannelCurve::flattenCurve(OZChannelCurve *this)
{
  OZDynamicCurve::flattenCurve((OZChannelCurve *)((char *)this + 288));

  return OZDynamicCurve::flattenCurve((OZChannelCurve *)((char *)this + 520));
}

BOOL OZChannelCurve::isVertexFlattened(uint64_t a1, char *a2, char *a3)
{
  *(_WORD *)uint64_t v7 = 0;
  OZDynamicCurve::isKeypointFlattened((OZDynamicCurve *)(a1 + 288), a2, &v7[1]);
  OZDynamicCurve::isKeypointFlattened((OZDynamicCurve *)(a1 + 520), a3, v7);
  BOOL v5 = !v7[1] || !v7[0];
  return !v5;
}

uint64_t OZChannelCurve::getInputTangents(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);

  return OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::getOutputTangents(uint64_t a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6)
{
  OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);

  return OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::setInputTangents(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(void *)a1 + 736))(a1, a4);
  OZDynamicCurve::setKeypointInputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);

  return OZDynamicCurve::setKeypointInputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

uint64_t OZChannelCurve::setOutputTangents(uint64_t a1, char *a2, char *a3, const CMTime *a4, double a5, double a6)
{
  (*(void (**)(uint64_t, const CMTime *))(*(void *)a1 + 736))(a1, a4);
  OZDynamicCurve::setKeypointOutputHandles((OZDynamicCurve *)(a1 + 288), a2, a4, a5);

  return OZDynamicCurve::setKeypointOutputHandles((OZDynamicCurve *)(a1 + 520), a3, a4, a6);
}

double OZChannelCurve::getVertexDerivatives(void *a1, char *a2, char *a3, CMTime *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v57 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v54 = 0.0;
  uint64_t v16 = (OZDynamicCurve *)(a1 + 36);
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 36), a2, a4, &v57);
  unint64_t v17 = (OZDynamicCurve *)(a1 + 65);
  OZDynamicCurve::getKeypointInputHandles((OZDynamicCurve *)(a1 + 65), a3, a4, &v56);
  OZDynamicCurve::getKeypointOutputHandles(v16, a2, a4, &v55);
  OZDynamicCurve::getKeypointOutputHandles((OZDynamicCurve *)(a1 + 65), a3, a4, &v54);
  double result = 0.0000001;
  if (fabs(v57) < 0.0000001 && fabs(v56) < 0.0000001 && fabs(v55) < 0.0000001 && fabs(v54) < 0.0000001)
  {
    Previousuint64_t Vertex = (char *)OZChannelCurve::getPreviousVertex((uint64_t)a1, a4, a2, a3, 1);
    double v47 = v19;
    Nextuint64_t Vertex = (char *)OZChannelCurve::getNextVertex((uint64_t)a1, a4, a2, a3, 1);
    double v43 = NextVertex;
    double v45 = v21;
    if (PreviousVertex && v47)
    {
      Firstuint64_t Vertex = NextVertex;
    }
    else
    {
      LOBYTE(v53) = 0;
      OZDynamicCurve::isClosedCurve(v16, (BOOL *)&v53);
      if (LOBYTE(v53) && (double v23 = (void *)a1[33]) != 0)
      {
        Firstuint64_t Vertex = v43;
        if ((int)((v23[1] - *v23) >> 3) >= 6)
        {
          Lastuint64_t Vertex = (char *)OZChannelCurve::getLastVertex((OZChannelCurve *)a1, a4, 1);
          Firstuint64_t Vertex = v43;
          Previousuint64_t Vertex = LastVertex;
          double v47 = v25;
        }
      }
      else
      {
        Firstuint64_t Vertex = v43;
      }
    }
    if (!FirstVertex || !v45)
    {
      LOBYTE(v53) = 0;
      OZDynamicCurve::isClosedCurve(v16, (BOOL *)&v53);
      if (LOBYTE(v53) && (unint64_t v26 = (void *)a1[33]) != 0)
      {
        Firstuint64_t Vertex = v43;
        if ((int)((v26[1] - *v26) >> 3) >= 6)
        {
          Firstuint64_t Vertex = (char *)OZChannelCurve::getFirstVertex((OZChannelCurve *)a1, a4, 1);
          double v45 = v27;
        }
      }
      else
      {
        Firstuint64_t Vertex = v43;
      }
    }
    if (PreviousVertex) {
      BOOL v28 = v47 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    int v44 = v29;
    if (!v28 || FirstVertex && v45)
    {
      unsigned __int8 v30 = FirstVertex;
      double v52 = 0.0;
      double v53 = 0.0;
      double v50 = 0.0;
      double v51 = 0.0;
      double v48 = 0.0;
      double v49 = 0.0;
      OZDynamicCurve::getKeypoint(v16, a2, a4, 0, &v51);
      OZDynamicCurve::getKeypoint(v17, a3, a4, 0, &v50);
      if (v44)
      {
        OZDynamicCurve::getKeypoint(v16, PreviousVertex, a4, 0, &v53);
        OZDynamicCurve::getKeypoint(v17, v47, a4, 0, &v52);
      }
      else
      {
        double v52 = v50;
        double v53 = v51;
      }
      if (v30) {
        BOOL v31 = v45 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      char v32 = !v31;
      if (v31)
      {
        double v35 = v50;
        double v36 = v51;
        double v33 = v50;
        double v34 = v51;
      }
      else
      {
        OZDynamicCurve::getKeypoint(v16, v30, a4, 0, &v49);
        OZDynamicCurve::getKeypoint(v17, v45, a4, 0, &v48);
        double v33 = v48;
        double v34 = v49;
        double v35 = v50;
        double v36 = v51;
      }
      double v37 = sqrt((v53 - v34) * (v53 - v34) + (v52 - v33) * (v52 - v33));
      double v38 = sqrt((v36 - v34) * (v36 - v34) + (v35 - v33) * (v35 - v33));
      double v39 = sqrt((v53 - v36) * (v53 - v36) + (v52 - v35) * (v52 - v35));
      double v40 = (v53 - v34) / v37 * v39 / 3.0;
      double v57 = v40;
      double v41 = (v52 - v33) / v37 * v39 / 3.0;
      double v42 = (v34 - v53) / v37 * v38 / 3.0;
      double v55 = v42;
      double v56 = v41;
      double result = (v33 - v52) / v37 * v38 / 3.0;
      double v54 = result;
      if ((v44 & 1) == 0)
      {
        double v40 = -v42;
        double v57 = -v42;
        double v41 = -result;
        double v56 = -result;
      }
      if ((v32 & 1) == 0)
      {
        double result = -v41;
        double v54 = -v41;
        double v55 = -v40;
      }
    }
  }
  if (a5)
  {
    double result = v57;
    *a5 = v57;
  }
  if (a6)
  {
    double result = v56;
    *a6 = v56;
  }
  if (a7)
  {
    double result = v55;
    *a7 = v55;
  }
  if (a8)
  {
    double result = v54;
    *a8 = v54;
  }
  return result;
}

uint64_t OZChannelCurve::setCurveInterpolation(OZChannelCurve *this, uint64_t a2)
{
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  OZDynamicCurve::setCurveInterpolation((OZChannelCurve *)((char *)this + 288), a2);

  return OZDynamicCurve::setCurveInterpolation((OZChannelCurve *)((char *)this + 520), a2);
}

uint64_t OZChannelCurve::closeCurve(OZChannelCurve *this)
{
  OZDynamicCurve::closeCurve((OZChannelCurve *)((char *)this + 288));

  return OZDynamicCurve::closeCurve((OZChannelCurve *)((char *)this + 520));
}

uint64_t OZChannelCurve::openCurve(uint64_t a1, void *a2, void *a3)
{
  OZDynamicCurve::openCurve((OZDynamicCurve *)(a1 + 288), a2);

  return OZDynamicCurve::openCurve((OZDynamicCurve *)(a1 + 520), a3);
}

uint64_t OZChannelCurve::openCurve(OZChannelCurve *this)
{
  OZDynamicCurve::openCurve((OZChannelCurve *)((char *)this + 288), 0);

  return OZDynamicCurve::openCurve((OZChannelCurve *)((char *)this + 520), 0);
}

uint64_t OZChannelCurve::reverseWindingOrder(OZChannelCurve *this)
{
  OZDynamicCurve::reverseWindingOrder((OZChannelCurve *)((char *)this + 288));

  return OZDynamicCurve::reverseWindingOrder((OZChannelCurve *)((char *)this + 520));
}

void OZChannelCurve::transformCurve(uint64_t a1, const CMTime *a2, double *a3, double *a4)
{
  double v44 = 0.0;
  double v45 = 0.0;
  double v42 = 0.0;
  double v43 = 0.0;
  double v40 = 0.0;
  double v41 = 0.0;
  double v37 = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  CMTime __p = 0;
  double v35 = 0;
  uint64_t v36 = 0;
  uint64_t v8 = (OZDynamicCurve *)(a1 + 288);
  Float64 v33 = 0.0;
  OZDynamicCurve::getKeypointHandleList(a1 + 288, (char **)&v37);
  uint64_t v9 = (OZDynamicCurve *)(a1 + 520);
  OZDynamicCurve::getKeypointHandleList((uint64_t)v9, (char **)&__p);
  unsigned int v10 = v38;
  if (v38 != v37)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 1;
    unsigned int v10 = (char **)v37;
    do
    {
      OZDynamicCurve::breakKeypointHandles(v8, v10[v11], 1);
      OZDynamicCurve::breakKeypointHandles(v9, *((char **)__p + v11), 1);
      OZDynamicCurve::getKeypoint(v8, *((char **)v37 + v11), a2, &v33, &v41);
      OZDynamicCurve::getKeypoint(v9, *((char **)__p + v11), a2, 0, &v40);
      OZDynamicCurve::getKeypointInputHandles(v8, *((char **)v37 + v11), a2, &v45);
      OZDynamicCurve::getKeypointInputHandles(v9, *((char **)__p + v11), a2, &v44);
      OZDynamicCurve::getKeypointOutputHandles(v8, *((char **)v37 + v11), a2, &v43);
      OZDynamicCurve::getKeypointOutputHandles(v9, *((char **)__p + v11), a2, &v42);
      double v13 = v40;
      double v14 = v41;
      if (a4)
      {
        double v14 = v41 + *a4;
        double v13 = v40 + a4[1];
      }
      double v15 = v14 + v45;
      double v16 = v13 + v44;
      double v17 = v14 + v43;
      double v18 = v13 + v42;
      double v19 = a3[12];
      double v20 = a3[13];
      double v21 = a3[15];
      double v22 = v21 + v14 * v19 + v13 * v20;
      double v23 = *a3;
      double v24 = a3[1];
      double v25 = a3[3];
      double v26 = a3[4];
      double v27 = (v25 + v14 * *a3 + v13 * v24) / v22;
      double v28 = a3[5];
      double v29 = v14 * v26 + v13 * v28;
      double v30 = a3[7];
      double v40 = (v30 + v29) / v22;
      double v41 = v27;
      double v31 = v21 + v15 * v19 + v16 * v20;
      double v44 = (v30 + v15 * v26 + v16 * v28) / v31;
      double v45 = (v25 + v15 * v23 + v16 * v24) / v31;
      double v32 = v21 + v17 * v19 + v18 * v20;
      double v42 = (v30 + v17 * v26 + v18 * v28) / v32;
      double v43 = (v25 + v17 * v23 + v18 * v24) / v32;
      OZDynamicCurve::setKeypoint(v8, *((char **)v37 + v11), a2, v33, v27);
      OZDynamicCurve::setKeypoint(v9, *((char **)__p + v11), a2, v33, v40);
      OZDynamicCurve::setKeypointInputHandles(v8, *((char **)v37 + v11), a2, v45 - v41);
      OZDynamicCurve::setKeypointInputHandles(v9, *((char **)__p + v11), a2, v44 - v40);
      OZDynamicCurve::setKeypointOutputHandles(v8, *((char **)v37 + v11), a2, v43 - v41);
      OZDynamicCurve::setKeypointOutputHandles(v9, *((char **)__p + v11), a2, v42 - v40);
      OZDynamicCurve::breakKeypointHandles(v8, *((char **)v37 + v11), 0);
      OZDynamicCurve::breakKeypointHandles(v9, *((char **)__p + v11), 0);
      unint64_t v11 = v12;
      unsigned int v10 = (char **)v37;
      ++v12;
    }
    while (v11 < ((char *)v38 - (unsigned char *)v37) >> 3);
  }
  if (__p)
  {
    double v35 = __p;
    operator delete(__p);
    unsigned int v10 = (char **)v37;
  }
  if (v10)
  {
    double v38 = v10;
    operator delete(v10);
  }
}

void sub_1B79E2298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelCurve::getCurve(os_unfair_lock_s *a1, const CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  unint64_t v11 = a2;
  v190.f64[0] = 0.0;
  double v13 = a1 + 72;
  OZDynamicCurve::getCurrentRangeU((OZDynamicCurve *)&a1[72], a2, v190.f64);
  double v14 = v190.f64[0];
  unsigned int NumberOfValidKeypoints = OZDynamicCurve::getNumberOfValidKeypoints(v13, v11);
  unint64_t v208 = 0;
  CMTime v209 = 0;
  unint64_t v210 = 0;
  unint64_t v205 = 0;
  unint64_t v206 = 0;
  unint64_t v207 = 0;
  uint64_t v202 = 0;
  long long v203 = 0;
  unint64_t v204 = 0;
  v184 = (OZDynamicCurve *)v13;
  OZDynamicCurve::setCurveInterpolation((OZDynamicCurve *)v13, a3);
  long long v183 = (OZDynamicCurve *)&a1[130];
  OZDynamicCurve::setCurveInterpolation((OZDynamicCurve *)&a1[130], a3);
  double v16 = *(void **)&a1[66]._os_unfair_lock_opaque;
  uint64_t v180 = (CMTime *)v11;
  if (!v16) {
    goto LABEL_6;
  }
  if ((int)((v16[1] - *v16) >> 3) < 4 || NumberOfValidKeypoints < 2) {
    goto LABEL_6;
  }
  v190.f64[0] = 0.0;
  OZDynamicCurve::getCurrentMinValueU((OZDynamicCurve *)v13, v11, v190.f64);
  double v65 = v190.f64[0];
  LODWORD(v190.f64[0]) = 0;
  OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
  if (LODWORD(v190.f64[0]) != 4)
  {
    LODWORD(v190.f64[0]) = 0;
    OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
    if (LODWORD(v190.f64[0]) == 1)
    {
      LOBYTE(v190.f64[0]) = 0;
      OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
      int v126 = (int)v14;
      if (!LOBYTE(v190.f64[0])) {
        ++v126;
      }
      LODWORD(v190.f64[0]) = v126;
      OZDynamicCurve::getCurveSamples((uint64_t)v13, (uint64_t)v11, (uint64_t)&v190, (uint64_t)&v202, (uint64_t)&v208, v65, 1.0);
      OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v11, (uint64_t)&v190, 0, (uint64_t)&v205, v65, 1.0);
      goto LABEL_6;
    }
    LODWORD(v190.f64[0]) = 0;
    OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0);
    if (LODWORD(v190.f64[0]) == 12
      || (LODWORD(v190.f64[0]) = 0,
          OZDynamicCurve::getCurveInterpolation((OZDynamicCurve *)v13, (unsigned int *)&v190, 0, 0),
          LODWORD(v190.f64[0]) == 10))
    {
      LOBYTE(v190.f64[0]) = 0;
      OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
      int v127 = (int)(v14 / 0.025);
      if (!LOBYTE(v190.f64[0])) {
        ++v127;
      }
      LODWORD(v190.f64[0]) = v127;
      OZDynamicCurve::getCurveSamples((uint64_t)v13, (uint64_t)v11, (uint64_t)&v190, (uint64_t)&v202, (uint64_t)&v208, v65, 0.025);
      OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v11, (uint64_t)&v190, 0, (uint64_t)&v205, v65, 0.025);
      goto LABEL_6;
    }
    v185[0].f64[0] = 0.0;
    double v201 = 0.0;
    double v135 = v14 + v65;
    if (v65 >= v14 + v65)
    {
LABEL_155:
      if (v203 != v202)
      {
        LOBYTE(v190.f64[0]) = 0;
        OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
        if (!LOBYTE(v190.f64[0]))
        {
          v190.f64[0] = v135;
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v202, &v190);
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v208, v185);
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v205, &v201);
        }
      }
      goto LABEL_6;
    }
    while (1)
    {
      float64_t v199 = 0.0;
      double v200 = 0.0;
      float64_t v197 = 0.0;
      double v198 = 0.0;
      double v195 = 0.0;
      float64_t v196 = 0.0;
      double v136 = v65 + 1.0;
      double v137 = v65 + 1.0;
      if (v65 + 1.0 >= v135)
      {
        LOBYTE(v190.f64[0]) = 0;
        OZDynamicCurve::isClosedCurve((OZDynamicCurve *)v13, (BOOL *)&v190);
        if (LOBYTE(v190.f64[0])) {
          double v137 = 0.0;
        }
        else {
          double v137 = v65 + 1.0;
        }
      }
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65, &v200);
      OZDynamicCurve::getPoint(v183, v11, v65, &v199);
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.25, &v198);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.25, &v197);
      double v138 = v65 + 0.5;
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.5, &v196);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.5, &v195);
      if (vabdd_f64(v200, v198) >= 0.0000001) {
        break;
      }
      float64_t v139 = v196;
      float64_t v140 = v197;
      float64_t v141 = v199;
      if (vabdd_f64(v200, v196) >= 0.0000001
        || vabdd_f64(v199, v197) >= 0.0000001
        || vabdd_f64(v197, v195) >= 0.0000001)
      {
        goto LABEL_146;
      }
LABEL_147:
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v65 + 0.5, &v200);
      OZDynamicCurve::getPoint(v183, v11, v65 + 0.5, &v199);
      double v142 = v65 + 0.75;
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v142, &v198);
      OZDynamicCurve::getPoint(v183, v11, v142, &v197);
      OZDynamicCurve::getPoint((OZDynamicCurve *)v13, v11, v137, &v196);
      OZDynamicCurve::getPoint(v183, v11, v137, &v195);
      if (vabdd_f64(v200, v198) >= 0.0000001)
      {
        float64_t v145 = v199;
        float64_t v143 = v196;
        float64_t v144 = v197;
      }
      else
      {
        float64_t v143 = v196;
        float64_t v144 = v197;
        float64_t v145 = v199;
        if (vabdd_f64(v200, v196) < 0.0000001 && vabdd_f64(v199, v197) < 0.0000001)
        {
          double v146 = v195;
          if (vabdd_f64(v197, v195) < 0.0000001) {
            goto LABEL_154;
          }
        }
      }
      v190.f64[0] = v200;
      v190.f64[1] = v145;
      *(double *)&long long v191 = v138;
      v188.f64[0] = v198;
      v188.f64[1] = v144;
      *(double *)&long long v189 = v142;
      v186.f64[0] = v143;
      v186.f64[1] = v195;
      *(double *)&long long v187 = v136;
      OZChannelCurve::XSplineSubdivide((uint64_t)a1, v190.f64, v188.f64, v186.f64, 50, v11, (uint64_t)&v208, (uint64_t)&v205, (uint64_t)&v202);
      double v146 = v195;
      float64_t v143 = v196;
LABEL_154:
      v185[0].f64[0] = v143;
      double v201 = v146;
      double v65 = v136;
      if (v136 >= v135) {
        goto LABEL_155;
      }
    }
    float64_t v141 = v199;
    float64_t v139 = v196;
    float64_t v140 = v197;
LABEL_146:
    v190.f64[0] = v200;
    v190.f64[1] = v141;
    *(double *)&long long v191 = v65;
    v188.f64[0] = v198;
    v188.f64[1] = v140;
    *(double *)&long long v189 = v65 + 0.25;
    v186.f64[0] = v139;
    v186.f64[1] = v195;
    *(double *)&long long v187 = v65 + 0.5;
    OZChannelCurve::XSplineSubdivide((uint64_t)a1, v190.f64, v188.f64, v186.f64, 50, v11, (uint64_t)&v208, (uint64_t)&v205, (uint64_t)&v202);
    goto LABEL_147;
  }
  Firstuint64_t Vertex = (char *)OZChannelCurve::getFirstVertex((OZChannelCurve *)a1, v11, 1);
  CMTime v68 = v67;
  Nextuint64_t Vertex = (char *)OZChannelCurve::getNextVertex((uint64_t)a1, v11, FirstVertex, v67, 1);
  double v71 = v70;
  Lastuint64_t Vertex = (char *)OZChannelCurve::getLastVertex((OZChannelCurve *)a1, v11, 1);
  unint64_t v181 = v73;
  v182 = LastVertex;
  float64_t v74 = 0.0;
  if (NextVertex)
  {
    uint64_t v178 = (OZChannelCurve *)a1;
    float64_t v75 = 0.0;
    if (v71)
    {
      do
      {
        double v200 = 0.0;
        double v201 = 0.0;
        float64_t v199 = 0.0;
        float64_t v197 = 0.0;
        double v198 = 0.0;
        double v195 = 0.0;
        float64_t v196 = 0.0;
        double v193 = 0.0;
        double v194 = 0.0;
        double v192 = 0.0;
        OZDynamicCurve::getKeypoint(v184, FirstVertex, v11, 0, &v199);
        OZDynamicCurve::getKeypoint(v183, v68, v11, 0, &v198);
        OZDynamicCurve::getKeypoint(v184, NextVertex, v11, 0, &v193);
        OZDynamicCurve::getKeypoint(v183, v71, v11, 0, &v192);
        OZDynamicCurve::getKeypoint(v184, FirstVertex, v11, &v201, 0);
        OZDynamicCurve::getKeypoint(v184, NextVertex, v11, &v200, 0);
        BOOL v76 = FirstVertex == v182 && v68 == v181;
        int v77 = v76;
        if (v76)
        {
          LOBYTE(v190.f64[0]) = 0;
          OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
          if (LOBYTE(v190.f64[0])) {
            double v200 = v14 + v200;
          }
        }
        OZDynamicCurve::getKeypointOutputHandles(v184, FirstVertex, v11, &v197);
        OZDynamicCurve::getKeypointOutputHandles(v183, v68, v11, &v196);
        OZDynamicCurve::getKeypointInputHandles(v184, NextVertex, v11, &v195);
        OZDynamicCurve::getKeypointInputHandles(v183, v71, v11, &v194);
        double v79 = v192;
        double v78 = v193;
        if (vabdd_f64(v199, v193) < 0.0000001 && vabdd_f64(v198, v192) < 0.0000001)
        {
          double v78 = v193 + 0.000001;
          double v79 = v192 + 0.000001;
          double v192 = v192 + 0.000001;
          double v193 = v193 + 0.000001;
        }
        v190.f64[0] = v199;
        v190.f64[1] = v198;
        long long v191 = xmmword_1B7E733E0;
        double v80 = v199 + v197;
        double v81 = v198 + v196;
        v188.f64[0] = v199 + v197;
        v188.f64[1] = v198 + v196;
        long long v189 = xmmword_1B7E733E0;
        double v82 = v195 + v78;
        v186.f64[0] = v195 + v78;
        v186.f64[1] = v194 + v79;
        long long v187 = xmmword_1B7E733E0;
        v185[0].f64[0] = v78;
        v185[0].f64[1] = v79;
        v185[1] = (float64x2_t)xmmword_1B7E733E0;
        if (vabdd_f64(v199 + v197, v199) < 0.0000001 || vabdd_f64(v82, v80) < 0.0000001) {
          goto LABEL_94;
        }
        double v83 = v80 - v199;
        double v84 = v81 - v198;
        double v85 = sqrt(v83 * v83 + v84 * v84);
        if (v85 <= -0.000000100000001 || v85 >= 0.000000100000001)
        {
          double v83 = v83 / v85;
          double v84 = v84 / v85;
        }
        double v86 = v82 - v80;
        double v87 = v194 + v79 - v81;
        double v88 = sqrt(v86 * v86 + v87 * v87);
        if (v88 <= -0.000000100000001 || v88 >= 0.000000100000001)
        {
          double v86 = v86 / v88;
          double v87 = v87 / v88;
        }
        if (fabs(v83 * v86 + v84 * v87 + 1.0) >= 0.001)
        {
LABEL_94:
          PCAlgorithm::BezierSubdivide(&v190, &v188, &v186, v185, 6, a7, (uint64_t)&v208, (uint64_t)&v205, v201, v200 - v201, 0, (uint64_t)&v202);
        }
        else
        {
          Float64 v89 = v201;
          *(_DWORD *)v211 = ((v200 - v201) / 0.05);
          OZDynamicCurve::getCurveSamples((uint64_t)v184, (uint64_t)v11, (uint64_t)v211, (uint64_t)&v202, (uint64_t)&v208, v201, 0.05);
          OZDynamicCurve::getCurveSamples((uint64_t)v183, (uint64_t)v180, (uint64_t)v211, 0, (uint64_t)&v205, v89, 0.05);
        }
        float64_t v74 = v185[0].f64[1];
        float64_t v75 = v185[0].f64[0];
        if (v77) {
          break;
        }
        double v90 = (char *)OZChannelCurve::getNextVertex((uint64_t)v178, v180, NextVertex, v71, 1);
        double v91 = v90;
        double v93 = v92;
        BOOL v94 = !v92 || v90 == 0;
        if (v94 && NextVertex == v182 && v71 == v181)
        {
          v211[0] = 0;
          OZDynamicCurve::isClosedCurve(v184, v211);
          if (v211[0])
          {
            double v91 = (char *)OZChannelCurve::getFirstVertex(v178, v180, 1);
            double v93 = v95;
          }
          CMTime v68 = v181;
          Firstuint64_t Vertex = v182;
        }
        else
        {
          Firstuint64_t Vertex = NextVertex;
          CMTime v68 = v71;
        }
        if (!v91) {
          break;
        }
        double v71 = v93;
        Nextuint64_t Vertex = v91;
        unint64_t v11 = v180;
      }
      while (v93);
    }
  }
  else
  {
    float64_t v75 = 0.0;
  }
  if (v203 != v202)
  {
    LOBYTE(v190.f64[0]) = 0;
    OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
    if (!LOBYTE(v190.f64[0]))
    {
      double v132 = v14 + v65;
      v133 = v203;
      if ((unint64_t)v203 >= v204)
      {
        uint64_t v147 = v202;
        uint64_t v148 = v203 - v202;
        unint64_t v149 = v148 + 1;
        if ((unint64_t)(v148 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v150 = v204 - (void)v202;
        if ((uint64_t)(v204 - (void)v202) >> 2 > v149) {
          unint64_t v149 = v150 >> 2;
        }
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v151 = v149;
        }
        if (v151)
        {
          unint64_t v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v204, v151);
          uint64_t v147 = v202;
          v133 = v203;
        }
        else
        {
          unint64_t v152 = 0;
        }
        unint64_t v153 = (double *)&v152[8 * v148];
        unint64_t v154 = &v152[8 * v151];
        *unint64_t v153 = v132;
        uint64_t v134 = v153 + 1;
        while (v133 != v147)
        {
          uint64_t v155 = *((void *)v133-- - 1);
          *((void *)v153-- - atomic_store(0, (unint64_t *)this + 1) = v155;
        }
        uint64_t v202 = v153;
        long long v203 = v134;
        unint64_t v204 = (unint64_t)v154;
        if (v147) {
          operator delete(v147);
        }
      }
      else
      {
        double *v203 = v132;
        uint64_t v134 = v133 + 1;
      }
      long long v203 = v134;
      v156 = v209;
      if ((unint64_t)v209 >= v210)
      {
        long long v158 = (float64_t *)v208;
        uint64_t v159 = ((char *)v209 - v208) >> 3;
        unint64_t v160 = v159 + 1;
        if ((unint64_t)(v159 + 1) >> 61) {
          goto LABEL_207;
        }
        uint64_t v161 = v210 - (void)v208;
        if ((uint64_t)(v210 - (void)v208) >> 2 > v160) {
          unint64_t v160 = v161 >> 2;
        }
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v162 = v160;
        }
        if (v162)
        {
          v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v210, v162);
          long long v158 = (float64_t *)v208;
          v156 = v209;
        }
        else
        {
          v163 = 0;
        }
        long long v164 = &v163[8 * v159];
        unint64_t v165 = &v163[8 * v162];
        *(float64_t *)long long v164 = v75;
        uint64_t v157 = (float64_t *)(v164 + 8);
        while (v156 != v158)
        {
          uint64_t v166 = *((void *)v156-- - 1);
          *((void *)v164 - atomic_store(0, (unint64_t *)this + 1) = v166;
          v164 -= 8;
        }
        unint64_t v208 = v164;
        CMTime v209 = v157;
        unint64_t v210 = (unint64_t)v165;
        if (v158) {
          operator delete(v158);
        }
      }
      else
      {
        *CMTime v209 = v75;
        uint64_t v157 = v156 + 1;
      }
      CMTime v209 = v157;
      unint64_t v167 = v206;
      if ((unint64_t)v206 < v207)
      {
        *unint64_t v206 = v74;
        unint64_t v168 = v167 + 1;
LABEL_204:
        unint64_t v206 = v168;
        goto LABEL_6;
      }
      unint64_t v169 = (float64_t *)v205;
      uint64_t v170 = ((char *)v206 - v205) >> 3;
      unint64_t v171 = v170 + 1;
      if (!((unint64_t)(v170 + 1) >> 61))
      {
        uint64_t v172 = v207 - (void)v205;
        if ((uint64_t)(v207 - (void)v205) >> 2 > v171) {
          unint64_t v171 = v172 >> 2;
        }
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v173 = v171;
        }
        if (v173)
        {
          long long v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v207, v173);
          unint64_t v169 = (float64_t *)v205;
          unint64_t v167 = v206;
        }
        else
        {
          long long v174 = 0;
        }
        v175 = &v174[8 * v170];
        long long v176 = &v174[8 * v173];
        *(float64_t *)v175 = v74;
        unint64_t v168 = (float64_t *)(v175 + 8);
        while (v167 != v169)
        {
          uint64_t v177 = *((void *)v167-- - 1);
          *((void *)v175 - atomic_store(0, (unint64_t *)this + 1) = v177;
          v175 -= 8;
        }
        unint64_t v205 = v175;
        unint64_t v206 = v168;
        unint64_t v207 = (unint64_t)v176;
        if (v169) {
          operator delete(v169);
        }
        goto LABEL_204;
      }
LABEL_207:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_6:
  double v19 = v202;
  double v18 = v203;
  if (v203 != v202)
  {
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    double v22 = (void *)(a5 + 16);
    do
    {
      double v23 = v208;
      double v24 = *(double **)(a5 + 8);
      if (!v21
        || vabdd_f64(*(v24 - 1), *(double *)&v208[8 * v20]) >= 0.001
        || vabdd_f64(*(double *)(*(void *)(a6 + 8) - 8), *(double *)&v205[8 * v20]) >= 0.001)
      {
        if ((unint64_t)v24 >= *v22)
        {
          double v26 = *(double **)a5;
          uint64_t v27 = ((uint64_t)v24 - *(void *)a5) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            goto LABEL_205;
          }
          uint64_t v29 = *v22 - (void)v26;
          if (v29 >> 2 > v28) {
            unint64_t v28 = v29 >> 2;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v30);
            double v26 = *(double **)a5;
            double v24 = *(double **)(a5 + 8);
          }
          else
          {
            double v31 = 0;
          }
          double v32 = &v31[8 * v27];
          *(void *)double v32 = *(void *)&v23[8 * v20];
          double v25 = v32 + 8;
          while (v24 != v26)
          {
            uint64_t v33 = *((void *)v24-- - 1);
            *((void *)v32 - atomic_store(0, (unint64_t *)this + 1) = v33;
            v32 -= 8;
          }
          *(void *)a5 = v32;
          *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v25;
          *(void *)(a5 + 16) = &v31[8 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *double v24 = *(double *)&v208[8 * v20];
          double v25 = v24 + 1;
        }
        *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v25;
        double v34 = v205;
        uint64_t v36 = *(double **)(a6 + 8);
        unint64_t v35 = *(void *)(a6 + 16);
        if ((unint64_t)v36 >= v35)
        {
          double v38 = *(double **)a6;
          uint64_t v39 = ((uint64_t)v36 - *(void *)a6) >> 3;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            goto LABEL_205;
          }
          uint64_t v41 = v35 - (void)v38;
          if (v41 >> 2 > v40) {
            unint64_t v40 = v41 >> 2;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            double v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v42);
            double v38 = *(double **)a6;
            uint64_t v36 = *(double **)(a6 + 8);
          }
          else
          {
            double v43 = 0;
          }
          double v44 = &v43[8 * v39];
          *(void *)double v44 = *(void *)&v34[8 * v20];
          double v37 = v44 + 8;
          while (v36 != v38)
          {
            uint64_t v45 = *((void *)v36-- - 1);
            *((void *)v44 - atomic_store(0, (unint64_t *)this + 1) = v45;
            v44 -= 8;
          }
          *(void *)a6 = v44;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v37;
          *(void *)(a6 + 16) = &v43[8 * v42];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *uint64_t v36 = *(double *)&v205[8 * v20];
          double v37 = v36 + 1;
        }
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v37;
        double v46 = v202;
        double v48 = *(double **)(a4 + 8);
        unint64_t v47 = *(void *)(a4 + 16);
        if ((unint64_t)v48 >= v47)
        {
          double v50 = *(double **)a4;
          uint64_t v51 = ((uint64_t)v48 - *(void *)a4) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
LABEL_205:
          }
            std::vector<double>::__throw_length_error[abi:ne180100]();
          uint64_t v53 = v47 - (void)v50;
          if (v53 >> 2 > v52) {
            unint64_t v52 = v53 >> 2;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v52;
          }
          if (v54)
          {
            double v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v54);
            double v50 = *(double **)a4;
            double v48 = *(double **)(a4 + 8);
          }
          else
          {
            double v55 = 0;
          }
          double v56 = &v55[8 * v51];
          *(double *)double v56 = v46[v20];
          double v49 = v56 + 8;
          while (v48 != v50)
          {
            uint64_t v57 = *((void *)v48-- - 1);
            *((void *)v56 - atomic_store(0, (unint64_t *)this + 1) = v57;
            v56 -= 8;
          }
          *(void *)a4 = v56;
          *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v49;
          *(void *)(a4 + 16) = &v55[8 * v54];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *double v48 = v202[v20];
          double v49 = v48 + 1;
        }
        *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v49;
        double v19 = v202;
        double v18 = v203;
      }
      uint64_t v20 = ++v21;
    }
    while (v21 < (unint64_t)(v18 - v19));
  }
  if (*(void *)(a4 + 8) - *(void *)a4 > 0x10uLL)
  {
    LOBYTE(v190.f64[0]) = 0;
    OZDynamicCurve::isClosedCurve(v184, (BOOL *)&v190);
    if (LOBYTE(v190.f64[0]))
    {
      uint64_t v58 = *(void *)(a5 + 8);
      double v59 = **(double **)a5;
      double v61 = *(double *)(v58 - 8);
      uint64_t v60 = v58 - 8;
      if (vabdd_f64(v59, v61) < 0.001)
      {
        double v62 = **(double **)a6;
        do
        {
          if (vabdd_f64(v62, *(double *)(*(void *)(a6 + 8) - 8)) >= 0.001) {
            break;
          }
          *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v60;
          *(void *)(a6 + 8) -= 8;
          *(void *)(a4 + 8) -= 8;
          uint64_t v63 = *(void *)(a5 + 8);
          double v64 = *(double *)(v63 - 8);
          uint64_t v60 = v63 - 8;
        }
        while (vabdd_f64(v59, v64) < 0.001);
      }
    }
    else
    {
      LODWORD(v190.f64[0]) = 0;
      OZDynamicCurve::getCurveInterpolation(v184, (unsigned int *)&v190, 0, 0);
      if (LODWORD(v190.f64[0]) == 12
        || (LODWORD(v190.f64[0]) = 0,
            OZDynamicCurve::getCurveInterpolation(v184, (unsigned int *)&v190, 0, 0),
            LODWORD(v190.f64[0]) == 10))
      {
        double v96 = **(double **)a4;
        v97 = (char *)(*(void *)a4 + 8);
        double v98 = **(double **)a5;
        double v99 = *(double *)(*(void *)a5 + 8);
        double v100 = **(double **)a6;
        double v101 = *(double *)(*(void *)a6 + 8);
        double v102 = *(double *)v97 - v96;
        v190.f64[0] = v96 + (v102 + v102) / 3.0;
        std::vector<double>::insert(a4, v97, v190.f64);
        v103 = (char *)(*(void *)a5 + 8);
        double v104 = v99 - v98;
        v190.f64[0] = v98 + (v104 + v104) / 3.0;
        std::vector<double>::insert(a5, v103, v190.f64);
        uint64_t v105 = (char *)(*(void *)a6 + 8);
        double v106 = v101 - v100;
        v190.f64[0] = v100 + (v106 + v106) / 3.0;
        std::vector<double>::insert(a6, v105, v190.f64);
        CMTime v107 = (char *)(*(void *)a4 + 8);
        v190.f64[0] = v96 + v102 / 3.0;
        std::vector<double>::insert(a4, v107, v190.f64);
        CMTime v108 = (char *)(*(void *)a5 + 8);
        v190.f64[0] = v98 + v104 / 3.0;
        std::vector<double>::insert(a5, v108, v190.f64);
        CMTime v109 = (char *)(*(void *)a6 + 8);
        v190.f64[0] = v100 + v106 / 3.0;
        std::vector<double>::insert(a6, v109, v190.f64);
        uint64_t v110 = *(void *)(a4 + 8);
        unint64_t v111 = (unint64_t)(v110 - *(void *)a4) >> 3;
        unsigned int v112 = v111 - 2;
        double v113 = *(double *)(*(void *)a4 + 8 * (v111 - 2));
        LODWORD(v11atomic_store(0, (unint64_t *)this + 1) = v111 - 1;
        double v114 = *(double *)(*(void *)a5 + 8 * v112);
        double v115 = *(double *)(*(void *)a5 + 8 * v111);
        double v116 = *(double *)(*(void *)a6 + 8 * v112);
        double v117 = *(double *)(*(void *)a6 + 8 * v111);
        double v118 = *(double *)(*(void *)a4 + 8 * v111) - v113;
        v190.f64[0] = v113 + v118 / 3.0;
        std::vector<double>::insert(a4, (char *)(v110 - 8), v190.f64);
        unint64_t v119 = (char *)(*(void *)(a5 + 8) - 8);
        double v120 = v115 - v114;
        v190.f64[0] = v114 + v120 / 3.0;
        std::vector<double>::insert(a5, v119, v190.f64);
        v121 = (char *)(*(void *)(a6 + 8) - 8);
        double v122 = v117 - v116;
        v190.f64[0] = v116 + v122 / 3.0;
        std::vector<double>::insert(a6, v121, v190.f64);
        v123 = (char *)(*(void *)(a4 + 8) - 8);
        v190.f64[0] = v113 + (v118 + v118) / 3.0;
        std::vector<double>::insert(a4, v123, v190.f64);
        v124 = (char *)(*(void *)(a5 + 8) - 8);
        v190.f64[0] = v114 + (v120 + v120) / 3.0;
        std::vector<double>::insert(a5, v124, v190.f64);
        v125 = (char *)(*(void *)(a6 + 8) - 8);
        v190.f64[0] = v116 + (v122 + v122) / 3.0;
        std::vector<double>::insert(a6, v125, v190.f64);
      }
      else
      {
        v190.f64[0] = 0.0;
        Float64 v128 = **(double **)a4 + 0.0005;
        v190.f64[0] = v128;
        v188.f64[0] = 0.0;
        v186.f64[0] = 0.0;
        OZDynamicCurve::getPoint(v184, v180, v128, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v128, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(void *)a4 + 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(void *)a5 + 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(void *)a6 + 8), (char *)&v186);
        Float64 v129 = **(double **)a4 + 0.00025;
        v190.f64[0] = v129;
        OZDynamicCurve::getPoint(v184, v180, v129, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v129, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(void *)a4 + 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(void *)a5 + 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(void *)a6 + 8), (char *)&v186);
        Float64 v130 = *(double *)(*(void *)(a4 + 8) - 8) + -0.0005;
        v190.f64[0] = v130;
        OZDynamicCurve::getPoint(v184, v180, v130, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v130, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(void *)(a4 + 8) - 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(void *)(a5 + 8) - 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(void *)(a6 + 8) - 8), (char *)&v186);
        Float64 v131 = *(double *)(*(void *)(a4 + 8) - 8) + -0.00025;
        v190.f64[0] = v131;
        OZDynamicCurve::getPoint(v184, v180, v131, v188.f64);
        OZDynamicCurve::getPoint(v183, v180, v131, v186.f64);
        std::vector<double>::insert(a4, (char *)(*(void *)(a4 + 8) - 8), (char *)&v190);
        std::vector<double>::insert(a5, (char *)(*(void *)(a5 + 8) - 8), (char *)&v188);
        std::vector<double>::insert(a6, (char *)(*(void *)(a6 + 8) - 8), (char *)&v186);
      }
    }
  }
  if (v202)
  {
    long long v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    unint64_t v206 = (float64_t *)v205;
    operator delete(v205);
  }
  if (v208)
  {
    CMTime v209 = (float64_t *)v208;
    operator delete(v208);
  }
}

void sub_1B79E3650(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(v1 - 208);
  if (v4)
  {
    *(void *)(v1 - 20OZSplineNode::allocOZSpline(this, 0) = v4;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(v1 - 184);
  if (v5)
  {
    *(void *)(v1 - 176) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double OZChannelCurve::getParametricRange(OZChannelCurve *this, const CMTime *a2)
{
  double v3 = 0.0;
  OZDynamicCurve::getCurrentRangeU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

double OZChannelCurve::getMinParametricValue(OZChannelCurve *this, const CMTime *a2)
{
  double v3 = 0.0;
  OZDynamicCurve::getCurrentMinValueU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

void OZChannelCurve::XSplineSubdivide(uint64_t a1, double *a2, double *a3, double *a4, int a5, const CMTime *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v17 = *a4;
  double v18 = a4[1];
  double v19 = a2[1];
  float v20 = *a4 - *a2;
  float v21 = v18 - v19;
  double v22 = *a3;
  double v23 = a3[1];
  double v75 = *a2;
  float v24 = *a3 - *a2;
  *(float *)&double v19 = v23 - v19;
  float v25 = sqrtf((float)(v20 * v20) + (float)(v21 * v21));
  float v26 = acosf((float)((float)(v20 * v24) + (float)(v21 * *(float *)&v19))/ (float)(v25 * sqrtf((float)(v24 * v24) + (float)(*(float *)&v19 * *(float *)&v19))));
  double v27 = tan(v26);
  float v28 = v22 - v17;
  float v29 = v23 - v18;
  float v30 = acosf((float)((float)(v20 * v28) + (float)(v21 * v29))/ (float)(v25 * sqrtf((float)(v28 * v28) + (float)(v29 * v29))));
  double v31 = tan(v30);
  if (v27 >= v31) {
    double v31 = v27;
  }
  if (a5 && fabs(v31) >= 0.0250000004)
  {
    v87[0] = 0.0;
    double v86 = 0.0;
    Float64 v32 = a2[2] + (a3[2] - a2[2]) * 0.5;
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 288), a6, v32, v87);
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 520), a6, v32, &v86);
    long long v84 = *(_OWORD *)a2;
    double v85 = a2[2];
    double v33 = a3[2];
    *(double *)double v83 = v87[0];
    *(double *)&v83[1] = v86;
    *(double *)&v83[2] = v85 + (v33 - v85) * 0.5;
    long long v81 = *(_OWORD *)a3;
    double v82 = v33;
    uint64_t v34 = (a5 - 1);
    OZChannelCurve::XSplineSubdivide(a1, &v84, v83, &v81, v34, a6, a7, a8, a9);
    Float64 v35 = a3[2] + (a4[2] - a3[2]) * 0.5;
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 288), a6, v35, v87);
    OZDynamicCurve::getPoint((OZDynamicCurve *)(a1 + 520), a6, v35, &v86);
    long long v79 = *(_OWORD *)a3;
    double v80 = a3[2];
    double v36 = a4[2];
    *(double *)double v78 = v87[0];
    *(double *)&v78[1] = v86;
    *(double *)&v78[2] = v80 + (v36 - v80) * 0.5;
    long long v76 = *(_OWORD *)a4;
    double v77 = v36;
    OZChannelCurve::XSplineSubdivide(a1, &v79, v78, &v76, v34, a6, a7, a8, a9);
  }
  else
  {
    unint64_t v37 = *(void *)(a7 + 16);
    double v38 = *(double **)(a7 + 8);
    if ((unint64_t)v38 >= v37)
    {
      unint64_t v40 = *(double **)a7;
      uint64_t v41 = ((uint64_t)v38 - *(void *)a7) >> 3;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v37 - (void)v40;
      if (v43 >> 2 > v42) {
        unint64_t v42 = v43 >> 2;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v44);
        unint64_t v40 = *(double **)a7;
        double v38 = *(double **)(a7 + 8);
      }
      else
      {
        uint64_t v45 = 0;
      }
      double v46 = (double *)&v45[8 * v41];
      unint64_t v47 = &v45[8 * v44];
      *double v46 = v75;
      uint64_t v39 = v46 + 1;
      while (v38 != v40)
      {
        uint64_t v48 = *((void *)v38-- - 1);
        *((void *)v46-- - atomic_store(0, (unint64_t *)this + 1) = v48;
      }
      *(void *)a7 = v46;
      *(void *)(a7 + OZSpline::reparametrize((uint64_t)this + 8) = v39;
      *(void *)(a7 + 16) = v47;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *double v38 = v75;
      uint64_t v39 = v38 + 1;
    }
    *(void *)(a7 + OZSpline::reparametrize((uint64_t)this + 8) = v39;
    uint64_t v49 = *((void *)a2 + 1);
    unint64_t v50 = *(void *)(a8 + 16);
    uint64_t v51 = *(void **)(a8 + 8);
    if ((unint64_t)v51 >= v50)
    {
      uint64_t v53 = *(void **)a8;
      uint64_t v54 = ((uint64_t)v51 - *(void *)a8) >> 3;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v56 = v50 - (void)v53;
      if (v56 >> 2 > v55) {
        unint64_t v55 = v56 >> 2;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a8 + 16, v57);
        uint64_t v53 = *(void **)a8;
        uint64_t v51 = *(void **)(a8 + 8);
      }
      else
      {
        uint64_t v58 = 0;
      }
      double v59 = &v58[8 * v54];
      uint64_t v60 = &v58[8 * v57];
      *(void *)double v59 = v49;
      unint64_t v52 = v59 + 8;
      while (v51 != v53)
      {
        uint64_t v61 = *--v51;
        *((void *)v59 - atomic_store(0, (unint64_t *)this + 1) = v61;
        v59 -= 8;
      }
      *(void *)a8 = v59;
      *(void *)(a8 + OZSpline::reparametrize((uint64_t)this + 8) = v52;
      *(void *)(a8 + 16) = v60;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v51 = v49;
      unint64_t v52 = v51 + 1;
    }
    *(void *)(a8 + OZSpline::reparametrize((uint64_t)this + 8) = v52;
    uint64_t v62 = *((void *)a2 + 2);
    unint64_t v63 = *(void *)(a9 + 16);
    double v64 = *(void **)(a9 + 8);
    if ((unint64_t)v64 >= v63)
    {
      CMTimeRange v66 = *(void **)a9;
      uint64_t v67 = ((uint64_t)v64 - *(void *)a9) >> 3;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v69 = v63 - (void)v66;
      if (v69 >> 2 > v68) {
        unint64_t v68 = v69 >> 2;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        double v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a9 + 16, v70);
        CMTimeRange v66 = *(void **)a9;
        double v64 = *(void **)(a9 + 8);
      }
      else
      {
        double v71 = 0;
      }
      int32_t v72 = &v71[8 * v67];
      long long v73 = &v71[8 * v70];
      *(void *)int32_t v72 = v62;
      double v65 = v72 + 8;
      while (v64 != v66)
      {
        uint64_t v74 = *--v64;
        *((void *)v72 - atomic_store(0, (unint64_t *)this + 1) = v74;
        v72 -= 8;
      }
      *(void *)a9 = v72;
      *(void *)(a9 + OZSpline::reparametrize((uint64_t)this + 8) = v65;
      *(void *)(a9 + 16) = v73;
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *double v64 = v62;
      double v65 = v64 + 1;
    }
    *(void *)(a9 + OZSpline::reparametrize((uint64_t)this + 8) = v65;
  }
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  double v4 = __src;
  unsigned int v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    double v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    }
    else {
      double v19 = 0;
    }
    CMTime __p = v19;
    double v22 = &v19[8 * v16];
    double v23 = v22;
    float v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    double v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = __src + 8;
  }
  else
  {
    unsigned int v10 = __src + 8;
    unint64_t v11 = v6 - 8;
    unsigned int v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)unsigned int v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(double *)double v4 = *a3;
  }
  return v4;
}

void sub_1B79E3DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, char *a3)
{
  double v3 = a3;
  double v4 = __src;
  unsigned int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    float v20 = &v19[8 * v16];
    CMTime __p = v19;
    double v27 = v20;
    float v28 = v20;
    float v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        double v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        float v20 = &v23[8 * (v22 >> 2)];
        CMTime __p = v23;
        double v27 = v20;
        float v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        double v27 = v20;
      }
    }
    *(void *)float v20 = *(void *)v3;
    float v28 = v20 + 8;
    double v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    unsigned int v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)double v4 = *(void *)v3;
  }
  return v4;
}

void sub_1B79E3FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelCurve::convertCurveBSplineBiasToXSplineBias(OZChannelCurve *this)
{
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(OZChannelCurve *, uint64_t))(*(void *)this + 464))(this, 1);
  OZDynamicCurve::getKeypointHandleList((uint64_t)this + 288, &v9);
  char v2 = v10;
  if (v10 != v9)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 1;
    char v2 = v9;
    do
    {
      OZDynamicCurve::updateKeypointBias((OZChannelCurve *)((char *)this + 288), *(void **)&v2[8 * v3]);
      unint64_t v3 = v4;
      char v2 = v9;
      ++v4;
    }
    while (v3 < (v10 - v9) >> 3);
  }
  unsigned int v10 = v2;
  BOOL v5 = (OZChannelCurve *)((char *)this + 520);
  OZDynamicCurve::getKeypointHandleList((uint64_t)v5, &v9);
  unsigned int v6 = v10;
  if (v10 != v9)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    unsigned int v6 = v9;
    do
    {
      OZDynamicCurve::updateKeypointBias(v5, *(void **)&v6[8 * v7]);
      unint64_t v7 = v8;
      unsigned int v6 = v9;
      ++v8;
    }
    while (v7 < (v10 - v9) >> 3);
  }
  if (v6)
  {
    unsigned int v10 = v6;
    operator delete(v6);
  }
}

void sub_1B79E4144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

OZChannelVertexFolder *OZChannelCurve::getVertexAssociatedChannelX(uint64_t a1, char *a2)
{
  unint64_t v3 = 0;
  OZDynamicCurve::getVertexChannel((OZDynamicCurve *)(a1 + 288), a2, &v3);
  return v3;
}

OZChannelVertexFolder *OZChannelCurve::getVertexAssociatedChannelY(uint64_t a1, int a2, char *a3)
{
  unsigned int v4 = 0;
  OZDynamicCurve::getVertexChannel((OZDynamicCurve *)(a1 + 520), a3, &v4);
  return v4;
}

uint64_t OZChannelCurve::refreshAnimation(OZChannelCurve *this)
{
  char v2 = (OZChannelFolder *)((char *)this + 152);
  if (*((void *)this + 33)) {
    OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 152), 0);
  }
  unint64_t v3 = (OZChannelCurve *)((char *)this + 288);
  uint64_t result = OZDynamicCurve::getNumberOfKeypoints((OZChannelCurve *)((char *)this + 288));
  if (result)
  {
    unsigned int v5 = 0;
    unsigned int v6 = (OZChannelCurve *)((char *)this + 520);
    unint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      OZDynamicCurve::getKeypointHandle(v3, v7, (double)v5, &v8);
      OZDynamicCurve::getVertexChannel(v3, (char *)v8, (OZChannelVertexFolder **)&v9);
      if (v9)
      {
        OZChannelFolder::push_back(v2, v9);
        if ((OZChannelVertexFolder::isVertexSaveWhenAtDefaultState((OZChannelFolder *)v9) & 1) == 0) {
          OZChannelVertexFolder::setVertexSaveWhenAtDefaultState((OZChannelFolder *)v9);
        }
      }
      OZDynamicCurve::getKeypointHandle(v6, v7, (double)v5, &v8);
      OZDynamicCurve::getVertexChannel(v6, (char *)v8, (OZChannelVertexFolder **)&v9);
      if (v9)
      {
        OZChannelFolder::push_back(v2, v9);
        if ((OZChannelVertexFolder::isVertexSaveWhenAtDefaultState((OZChannelFolder *)v9) & 1) == 0) {
          OZChannelVertexFolder::setVertexSaveWhenAtDefaultState((OZChannelFolder *)v9);
        }
      }
      ++v5;
      uint64_t result = OZDynamicCurve::getNumberOfKeypoints(v3);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t OZChannelCurve::setDefaultAtCurrentTime(OZChannelCurve *this, const CMTime *a2)
{
  OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 288), a2);

  return OZDynamicCurve::setDefaultAtCurrentTime((OZChannelCurve *)((char *)this + 520), a2);
}

double OZChannelCurve::getMaxParametricValue(OZChannelCurve *this, const CMTime *a2)
{
  double v3 = 0.0;
  OZDynamicCurve::getCurrentMaxValueU((OZChannelCurve *)((char *)this + 288), a2, &v3);
  return v3;
}

uint64_t OZChannelCurve::calcHashForAnimationOnly(OZChannel *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  OZChannel::calcHashForState(this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (OZChannel::getFirstKeyframe(this, &v8, 0))
  {
    CMTime v7 = v8;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1000);
    (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(void *)a2 + 112))(a2, &v7);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    if ((*((unsigned int (**)(OZChannel *, CMTime *, void))this->var0 + 79))(this, &v8, 0))
    {
      do
      {
        CMTime v6 = v8;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1000);
        (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(void *)a2 + 112))(a2, &v6);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      while (((*((uint64_t (**)(OZChannel *, CMTime *, void))this->var0 + 79))(this, &v8, 0) & 1) != 0);
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelCurve::calcHashForState(OZChannelCurve *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  OZChannel::calcHashForState((OZChannel *)this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (OZChannel::getFirstKeyframe((OZChannel *)this, &v9, 0))
  {
    CMTime v8 = v9;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1000);
    (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(void *)a2 + 112))(a2, &v8);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    if ((*(unsigned int (**)(OZChannelCurve *, CMTime *, void))(*(void *)this + 632))(this, &v9, 0))
    {
      do
      {
        CMTime v7 = v9;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1000);
        (*(void (**)(PCSerializerWriteStream *, CMTime *))(*(void *)a2 + 112))(a2, &v7);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      while (((*(uint64_t (**)(OZChannelCurve *, CMTime *, void))(*(void *)this + 632))(this, &v9, 0) & 1) != 0);
    }
  }
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 152), a2, a3);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void OZChannelCurve::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelScope);
  unint64_t v22 = 0;
  double v23 = 0;
  uint64_t v24 = 0;
  CMTime __p = 0;
  float v20 = 0;
  uint64_t v21 = 0;
  unsigned int v18 = 0;
  uint64_t v17 = 0;
  OZDynamicCurve::getKeypointHandleList((uint64_t)&this[1].var17, (char **)&v22);
  OZDynamicCurve::getKeypointHandleList((uint64_t)&this[3].var8, (char **)&__p);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  if (v23 != v22)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 123);
      OZDynamicCurve::getKeypointFlags((OZDynamicCurve *)&this[1].var17, *((char **)v22 + v9), &v18);
      OZDynamicCurve::getVertexChannel((OZDynamicCurve *)&this[1].var17, *((char **)v22 + v9), &v17);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, unint64_t))(*(void *)a2 + 144))(a2, 5, v10);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 7, *((unsigned int *)v17 + 6));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 4, v18);
      uint64_t v11 = (char *)v17 + 16;
      (*(void (**)(char *, PCSerializerWriteStream *, void))(*((void *)v17 + 2) + 16))((char *)v17 + 16, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      unint64_t v9 = (v10 + 1);
      unint64_t v10 = v9;
    }
    while (v9 < (v23 - (unsigned char *)v22) >> 3);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  if (v23 != v22)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 123);
      OZDynamicCurve::getKeypointFlags((OZDynamicCurve *)&this[3].var8, *((char **)__p + v12), &v18);
      OZDynamicCurve::getVertexChannel((OZDynamicCurve *)&this[3].var8, *((char **)__p + v12), &v17);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, unint64_t))(*(void *)a2 + 144))(a2, 5, v13);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 7, *((unsigned int *)v17 + 6));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 4, v18);
      unint64_t v14 = (char *)v17 + 16;
      (*(void (**)(char *, PCSerializerWriteStream *, void))(*((void *)v17 + 2) + 16))((char *)v17 + 16, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      unint64_t v12 = (v13 + 1);
      unint64_t v13 = v12;
    }
    while (v12 < (v23 - (unsigned char *)v22) >> 3);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  BOOL v16 = 0;
  OZDynamicCurve::isClosedCurve((OZDynamicCurve *)&this[1].var17, &v16);
  BOOL v15 = v16;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, BOOL))(*(void *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZChannel::writeBody(this, a2, a3);
  if (__p)
  {
    float v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    double v23 = v22;
    operator delete(v22);
  }
}

void sub_1B79E4D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'OZChannelCurve::writeBody(OZChannelCurve *this, PCSerializerWriteStream *a2, int a3, BOOL a4, uint64_t a5)
{
}

uint64_t OZChannelCurve::parseBegin(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) >= 3u)
  {
    OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 152), 1);
    OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 288));
    OZDynamicCurve::delAllKeypoints((OZChannelCurve *)((char *)this + 520));
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelCurve::parseBegin(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelCurve::parseEnd(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  *((_WORD *)this + 396) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 152), 128, 0);
  (*(void (**)(OZChannelCurve *))(*(void *)this + 856))(this);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelCurve::parseEnd(OZChannelCurve *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelCurve::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  *(void *)uint64_t v17 = 0;
  unsigned int v16 = 0;
  char v15 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 7)
  {
    if (v6 != 1)
    {
      if (v6 != 2) {
        goto LABEL_11;
      }
      LOWORD(v6) = 256;
    }
    LOWORD(this[5].var4.varOZSplineNode::allocOZSpline(this, 0) = v6;
    goto LABEL_11;
  }
  if (v6 == 123)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 5, (uint64_t)&v17[1]);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)v17);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v16);
    LODWORD(vOZSpline::reparametrize((uint64_t)this + 8) = v17[1];
    double v9 = (double)v8;
    if (LOBYTE(this[5].var4.var0)) {
      p_var17 = (OZDynamicCurve *)&this[1].var17;
    }
    else {
      p_var17 = (OZDynamicCurve *)&this[3].var8;
    }
    OZDynamicCurve::setKeypoint(p_var17, MEMORY[0x1E4F1FA48], v9, (void **)&this[5].var5);
  }
  if (v6 != 122)
  {
    if (v6 == 8)
    {
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, &v15);
      if (v15)
      {
        OZDynamicCurve::closeCurve((OZDynamicCurve *)&this[1].var17);
        OZDynamicCurve::closeCurve((OZDynamicCurve *)&this[3].var8);
      }
    }
    goto LABEL_11;
  }
  var5 = (char *)this[5].var5;
  if (!var5)
  {
LABEL_11:
    OZChannel::parseElement(this, a2, a3);
    return 1;
  }
  unint64_t v14 = 0;
  if (LOBYTE(this[5].var4.var0)) {
    p_unint64_t var8 = (OZDynamicCurve *)&this[1].var17;
  }
  else {
    p_unint64_t var8 = (OZDynamicCurve *)&this[3].var8;
  }
  OZDynamicCurve::getVertexChannel(p_var8, var5, &v14);
  this[5].var5 = 0;
  if (v14) {
    unint64_t v13 = (OZChannelVertexFolder *)((char *)v14 + 16);
  }
  else {
    unint64_t v13 = 0;
  }
  PCSerializerReadStream::pushHandler(a2, v13);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelCurve::parseElement(OZChannelCurve *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelCurve::createOZChannelCurveInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelCurve::_OZChannelCurveInfo) {
    operator new();
  }
}

void sub_1B79E5128(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelCurveInfo::OZChannelCurveInfo(OZChannelCurveInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1108DA8;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1108DC8;
}

void sub_1B79E51D4(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelCurve::createOZChannelCurveImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelCurve::_OZChannelCurveImpl) {
    operator new();
  }
}

void sub_1B79E52B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

double std::__split_buffer<double>::push_back(void *a1, double *a2)
{
  unsigned int v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unsigned int v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      double v19 = &v17[8 * (v16 >> 2)];
      float v20 = (uint64_t *)a1[1];
      unsigned int v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unsigned int v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        double v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)double v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unsigned int v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unsigned int v4 = (char *)a1[1];
      }
      char v15 = &v4[8 * v11];
      unsigned int v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  double result = *a2;
  *(double *)unsigned int v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unsigned int v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - atomic_store(0, (unint64_t *)this + 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  char v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void OZChannelDiscreteColor::OZChannelDiscreteColor(OZChannelDiscreteColor *this, PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  TXParagraphStyleFolder_Factory::createInstance(this, (OZFactoryBase *)a2);
  PCURL::PCURL((PCURL *)&v13, @"Channel Discrete Color");
  uint64_t Instance = (OZFactory *)OZChannelDiscreteColor_Factory::getInstance(v10);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, &v13, Instance, a2, a3, a4, a5, 0, 0);
  PCString::~PCString(&v13);
  *(void *)this = &unk_1F1108E20;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1109190;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = OZChannelDiscreteColor_Factory::getInstance(v12);
}

void sub_1B79E55A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelDiscreteColor::OZChannelDiscreteColor(OZChannelDiscreteColor *this, double a2, PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  unsigned int v11 = a2;
  TXParagraphStyleFolder_Factory::createInstance(this, (OZFactoryBase *)a3);
  PCURL::PCURL((PCURL *)&v13, @"Channel Discrete Color");
  OZChannelEnum::OZChannelEnum(this, v11, &v13, a3, a4, a5, a6, 0, 0);
  PCString::~PCString(&v13);
  *(void *)this = &unk_1F1108E20;
  *((void *)this + PCSpinLock::lock(this + 2) = &unk_1F1109190;
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = OZChannelDiscreteColor_Factory::getInstance(v12);
}

void sub_1B79E56A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelDiscreteColor::clone(OZChannelDiscreteColor *this)
{
}

void sub_1B79E5758(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelDiscreteColor::setColorIndex(OZChannelDiscreteColor *this, unsigned int a2)
{
  return (*(uint64_t (**)(OZChannelDiscreteColor *, void, void, double))(*(void *)this + 712))(this, MEMORY[0x1E4F1FA48], 0, (double)a2);
}

uint64_t OZChannelDiscreteColor::setDefaultColorIndex(OZChannel *this, unsigned int a2)
{
  OZChannel::setDefaultValue(this, (double)a2);
  double v3 = (uint64_t (*)(OZChannel *, void))*((void *)this->var0 + 36);

  return v3(this, 0);
}

uint64_t OZChannelDiscreteColor::getDefaultColorIndex(OZChannel *this)
{
  return OZChannel::getDefaultValue(this);
}

__CFString *OZChannelDiscreteColor::getObjCWrapperName(OZChannelDiscreteColor *this)
{
  return @"CHChannelDiscreteColor";
}

CGColorSpace **OZChannelDiscreteColor::getPCColorForIndex@<X0>(OZChannelDiscreteColor *this@<X0>, PCColor *a2@<X8>)
{
  double v3 = (double *)((char *)&gColorTable + 24 * this);
  float v4 = *v3;
  float v5 = v3[1];
  float v6 = v3[2];
  PCColorSpaceCache::sRGB(&v8);
  PCColor::PCColor(a2, v4, v5, v6, 1.0, (OZChannelBase *)&v8);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
}

void sub_1B79E58D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZChannelDiscreteColor::~OZChannelDiscreteColor(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelDiscreteColor::~OZChannelDiscreteColor(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelEnum::~OZChannelEnum(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

__CFString *OZChannelPercent::getObjCWrapperName(OZChannelPercent *this)
{
  return @"CHChannelPercent";
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  v11->var0 = (void **)&unk_1F1109200;
  v11->var2 = (void **)&unk_1F1109560;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v11);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
  }
  this->var14 = var15;
}

void sub_1B79E5A2C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPercent::createOZChannelPercentInfo(OZChannelPercent *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPercent::createOZChannelPercentInfo(void)::_OZChannelPercentInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelPercent::createOZChannelPercentInfo(void)::_OZChannelPercentInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercentInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercentInfo;
}

uint64_t OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercent *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPercent::createOZChannelPercent100Impl(void)::_OZChannelPercent100Impl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelPercent::createOZChannelPercent100Impl(void)::_OZChannelPercent100Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent100Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent100Impl;
}

uint64_t OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPercent::createOZChannelPercent50Impl(void)::_OZChannelPercent50Impl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelPercent::createOZChannelPercent50Impl(void)::_OZChannelPercent50Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent50Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent50Impl;
}

uint64_t OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPercent::createOZChannelPercent0Impl(void)::_OZChannelPercent0Impl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelPercent::createOZChannelPercent0Impl(void)::_OZChannelPercent0Impl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPercent::createOZChannelPercent0Impl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPercent::_OZChannelPercent0Impl;
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  uint64_t Instance = (OZFactory *)OZChannelPercent_Factory::getInstance((OZChannelPercent_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&unk_1F1109200;
  this->var2 = (void **)&unk_1F1109560;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
  }
  this->var14 = var15;
}

void sub_1B79E5CE0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelPercent_Factory::getInstance((OZChannelPercent_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&unk_1F1109200;
  this->var2 = (void **)&unk_1F1109560;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    if (fabs(a2 + -1.0) >= 0.0000001)
    {
      if (fabs(a2) >= 0.0000001) {
        var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent50Impl;
      }
      else {
        var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
      }
    }
    else
    {
      var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent100Impl;
    }
    this->var15 = var15;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B79E5E60(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6);
  v9->var0 = (void **)&unk_1F1109200;
  v9->var2 = (void **)&unk_1F1109560;
  OZChannelPercentInfo = (OZChannelPercent *)OZChannelPercent::createOZChannelPercentInfo(v9);
  if (a6)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
    this->var17 = (OZChannelInfo *)OZChannelPercent::_OZChannelPercentInfo;
  }
  this->var16 = var17;
  OZChannelPercent100Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent100Impl(OZChannelPercentInfo);
  OZChannelPercent50Impl = (OZChannelPercent *)OZChannelPercent::createOZChannelPercent50Impl(OZChannelPercent100Impl);
  OZChannelPercent::createOZChannelPercent0Impl(OZChannelPercent50Impl);
  if (a5)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
    this->var15 = (OZChannelImpl *)OZChannelPercent::_OZChannelPercent0Impl;
  }
  this->var14 = var15;
}

void sub_1B79E5F34(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercent::OZChannelPercent(OZChannelPercent *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  void *v3 = &unk_1F1109200;
  v3[2] = &unk_1F1109560;
}

void non-virtual thunk to'OZChannelPercent::~OZChannelPercent(OZChannelPercent *this)
{
}

{
  uint64_t vars8;

  OZChannel::~OZChannel((OZChannel *)&this[-1].var17);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelPercent::~OZChannelPercent(OZChannelPercent *this)
{
  OZChannel::~OZChannel((OZChannel *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelPercent::clone(OZChannelPercent *this)
{
}

void sub_1B79E60A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercentInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPercent::_OZChannelPercentInfo) {
    operator new();
  }
}

void sub_1B79E611C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelPercentInfo::OZChannelPercentInfo(OZChannelPercentInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.01, 0.0001, 100.0, "%");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F11095D0;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F11095F0;
}

void sub_1B79E61D4(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent100Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPercent::_OZChannelPercent100Impl) {
    operator new();
  }
}

void sub_1B79E6274(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent50Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPercent::_OZChannelPercent50Impl) {
    operator new();
  }
}

void sub_1B79E6338(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelPercent::createOZChannelPercent0Impl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPercent::_OZChannelPercent0Impl) {
    operator new();
  }
}

void sub_1B79E63FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, const PCString *a2, OZFactory *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  uint64_t v9 = a8;
  char v15 = this;
  uint64_t Instance = a9;
  this->var0 = (void **)&unk_1F1109648;
  this->var2 = (void **)&unk_1F11099B8;
  if (!a8)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    uint64_t v9 = (OZChannelImpl *)this;
    if (a9) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a9) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::OZChannel(v15, a3, a4, a5, a6, a7, v9, Instance);
  v15->var0 = (void **)&unk_1F1109648;
  v15->var2 = (void **)&unk_1F11099B8;
  v15[1].var0 = 0;
  PCString::PCString((PCString *)&v15[1].var1, a2);
  *(_OWORD *)&v15[1].var2 = 0u;
  LODWORD(v15[1].varOZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(_OWORD *)&v15[1].var4.var0 = 0u;
  *(_OWORD *)&v15[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v15[1].var9);
  v15[1].var10 = 0;
  v15[1].var11 = 0;
  v15[1].var12 = 0;
  (*((void (**)(OZChannel *, const PCString *, void))v15->var0 + 106))(v15, a2, 0);
  v15->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v15->var0 + 16))(v15);
}

void sub_1B79E65E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int64_t v14 = *(void **)(v10 + 192);
  if (v14) {
    operator delete(v14);
  }
  char v15 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  *(void *)this = &unk_1F1109648;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11099B8;
  uint64_t Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum_Factory::getInstance(this);
  unint64_t v16 = (OZFactory *)Instance;
  if (!a7)
  {
    uint64_t Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance(Instance);
    a7 = (OZChannelImpl *)Instance;
    if (a8) {
      goto LABEL_3;
    }
LABEL_5:
    a8 = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance(Instance);
    goto LABEL_3;
  }
  if (!a8) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::OZChannel((OZChannel *)this, v16, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F1109648;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11099B8;
  *((void *)this + 19) = 0;
  PCString::PCString((PCString *)this + 20, a2);
  *(_OWORD *)((char *)this + 16OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20OZSplineNode::allocOZSpline(this, 0) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((void *)this + 29) = 0;
  *((void *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0;
  (*(void (**)(OZChannelEnum *, const PCString *, void))(*(void *)this + 848))(this, a2, 0);
  *((void *)this + 7) |= 0x10000uLL;
  (*(void (**)(OZChannelEnum *))(*(void *)this + 128))(this);
}

void sub_1B79E67EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int64_t v14 = *(void **)(v10 + 192);
  if (v14) {
    operator delete(v14);
  }
  char v15 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  char v15 = a9;
  *(void *)this = &unk_1F1109648;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11099B8;
  uint64_t Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum_Factory::getInstance(this);
  uint64_t v17 = (OZFactory *)Instance;
  if (!a8)
  {
    uint64_t Instance = (OZChannelEnum::OZChannelEnum_valueImpl *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance(Instance);
    a8 = (OZChannelImpl *)Instance;
    if (a9) {
      goto LABEL_3;
    }
LABEL_5:
    char v15 = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance(Instance);
    goto LABEL_3;
  }
  if (!a9) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::OZChannel((OZChannel *)this, v17, a4, a5, a6, a7, a8, v15);
  *(void *)this = &unk_1F1109648;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11099B8;
  *((void *)this + 19) = 0;
  PCString::PCString((PCString *)this + 20, a3);
  *(_OWORD *)((char *)this + 16OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20OZSplineNode::allocOZSpline(this, 0) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((void *)this + 29) = 0;
  *((void *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
  (*(void (**)(OZChannelEnum *, const PCString *, void))(*(void *)this + 848))(this, a3, 0);
  *((void *)this + 7) |= 0x10000uLL;
  (*(void (**)(OZChannelEnum *))(*(void *)this + 128))(this);
}

{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B79E6A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v16 = *(void **)(v12 + 192);
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 176) = v17;
    operator delete(v17);
  }
  PCString::~PCString(v13);
  OZChannel::~OZChannel((OZChannel *)v12);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  uint64_t Instance = a6;
  uint64_t v7 = a5;
  unsigned int v11 = this;
  this->var0 = (void **)&unk_1F1109648;
  this->var2 = (void **)&unk_1F11099B8;
  if (!a5)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    uint64_t v7 = (OZChannelImpl *)this;
    if (Instance) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::OZChannel(v11, a2, a3, a4, v7, Instance);
  v11->var0 = (void **)&unk_1F1109648;
  v11->var2 = (void **)&unk_1F11099B8;
  v11[1].var0 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v11[1].var1);
  *(_OWORD *)&v11[1].var2 = 0u;
  LODWORD(v11[1].varOZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(_OWORD *)&v11[1].var4.var0 = 0u;
  *(_OWORD *)&v11[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v11[1].var9);
  v11[1].var10 = 0;
  v11[1].var11 = 0;
  v11[1].var12 = 0;
  (*((void (**)(OZChannel *, OZFactory **, void))v11->var0 + 106))(v11, &v11[1].var1, 0);
  v11->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v11->var0 + 16))(v11);
}

void sub_1B79E6C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int64_t v14 = *(void **)(v10 + 192);
  if (v14) {
    operator delete(v14);
  }
  char v15 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannel *this, unsigned int a2, const PCString *a3, const PCString *a4, OZFactory *a5, OZChannelFolder *a6, unsigned int a7, int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  char v15 = this;
  unint64_t v16 = a9;
  uint64_t Instance = a10;
  this->var0 = (void **)&unk_1F1109648;
  this->var2 = (void **)&unk_1F11099B8;
  if (!a9)
  {
    this = (OZChannel *)OZChannelEnum::OZChannelEnum_valueImpl::getInstance((OZChannelEnum::OZChannelEnum_valueImpl *)this);
    unint64_t v16 = (OZChannelImpl *)this;
    if (a10) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t Instance = (OZChannelInfo *)OZChannelEnum::OZChannelEnum_valueInfo::getInstance((OZChannelEnum::OZChannelEnum_valueInfo *)this);
    goto LABEL_3;
  }
  if (!a10) {
    goto LABEL_5;
  }
LABEL_3:
  OZChannel::OZChannel(v15, a5, a4, a6, a7, a8, v16, Instance);
  v15->var0 = (void **)&unk_1F1109648;
  v15->var2 = (void **)&unk_1F11099B8;
  v15[1].var0 = 0;
  PCString::PCString((PCString *)&v15[1].var1, a3);
  *(_OWORD *)&v15[1].var2 = 0u;
  LODWORD(v15[1].varOZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(_OWORD *)&v15[1].var4.var0 = 0u;
  *(_OWORD *)&v15[1].var6 = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v15[1].var9);
  v15[1].var10 = 0;
  v15[1].var11 = 0;
  v15[1].var12 = 0;
  OZChannel::setDefaultValue(v15, (double)a2);
  OZChannel::setInitialValue(v15, (double)a2, 0);
  (*((void (**)(OZChannel *, const PCString *, void))v15->var0 + 106))(v15, a3, 0);
  v15->var7 |= 0x10000uLL;
  (*((void (**)(OZChannel *))v15->var0 + 16))(v15);
}

void sub_1B79E6E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v16 = *(void **)(v12 + 192);
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 176) = v17;
    operator delete(v17);
  }
  PCString::~PCString(v13);
  OZChannel::~OZChannel((OZChannel *)v12);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum(OZChannelEnum *this, const OZChannelEnum *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F1109648;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F11099B8;
  v5[19].var0 = 0;
  float v6 = (PCString *)&v5[20];
  PCSharedCount::PCSharedCount(v5 + 20);
  *(_OWORD *)((char *)this + 16OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20OZSplineNode::allocOZSpline(this, 0) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 28);
  *((void *)this + 29) = 0;
  *((void *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0;
  PCString::set(v6, (const PCString *)a2 + 20);
  *((void *)this + 19) = *((void *)a2 + 19);
  ++*((_DWORD *)this + 54);
  if (this != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 168, *((char **)a2 + 21), *((void *)a2 + 22), (uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 2);
  }
  std::vector<BOOL>::operator=((void **)this + 24, (uint64_t)a2 + 192);
  PCString::set((PCString *)this + 28, (const PCString *)a2 + 28);
  if (this != a2) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)this + 232, *((PCString **)a2 + 29), *((PCString **)a2 + 30), (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3);
  }
}

void sub_1B79E6FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*v13) {
    operator delete(*v13);
  }
  char v15 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 176) = v15;
    operator delete(v15);
  }
  PCString::~PCString(v11);
  OZChannel::~OZChannel((OZChannel *)v10);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        float v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      float v6 = *(void **)(a2 + 8);
    }
    else
    {
      float v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void OZChannelEnum::~OZChannelEnum(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F1109648;
  this[2].var0 = (__CFString *)&unk_1F11099B8;
  unint64_t v4 = this + 29;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  PCString::~PCString(this + 28);
  var0 = this[24].var0;
  if (var0) {
    operator delete(var0);
  }
  double v3 = this[21].var0;
  if (v3)
  {
    this[22].var0 = v3;
    operator delete(v3);
  }
  PCString::~PCString(this + 20);
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  OZChannelEnum::~OZChannelEnum(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelEnum::~OZChannelEnum(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelEnum::~OZChannelEnum(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelEnum::clone(OZChannelEnum *this)
{
}

void sub_1B79E7250(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnum::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  OZChannel::copy((OZChannel *)this, a2, a3);
  if (a2)
  {
    if (v5)
    {
      float v6 = v5;
      PCString::set(this + 20, v5 + 20);
      this[19].var0 = v6[19].var0;
      ++LODWORD(this[27].var0);
      if (v6 == this)
      {
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v6[24]);
        PCString::set(this + 28, v6 + 28);
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&this[21], (char *)v6[21].var0, (uint64_t)v6[22].var0, ((char *)v6[22].var0 - (char *)v6[21].var0) >> 2);
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v6[24]);
        PCString::set(this + 28, v6 + 28);
        var0 = (PCString *)v6[29].var0;
        BOOL v8 = (PCString *)v6[30].var0;
        std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&this[29], var0, v8, v8 - var0);
      }
    }
  }
}

void OZChannelEnum::assign(PCString *this, const OZChannelBase *a2)
{
  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      float v5 = v4;
      this[19].var0 = v4[19].var0;
      PCString::set(this + 20, v4 + 20);
      ++LODWORD(this[27].var0);
      if (v5 == this)
      {
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v5[24]);
        PCString::set(this + 28, v5 + 28);
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&this[21], (char *)v5[21].var0, (uint64_t)v5[22].var0, ((char *)v5[22].var0 - (char *)v5[21].var0) >> 2);
        std::vector<BOOL>::operator=((void **)&this[24].var0, (uint64_t)&v5[24]);
        PCString::set(this + 28, v5 + 28);
        var0 = (PCString *)v5[29].var0;
        uint64_t v7 = (PCString *)v5[30].var0;
        std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&this[29], var0, v7, v7 - var0);
      }
    }
  }
}

uint64_t OZChannelEnum::compare(OZChannelEnum *this, const OZChannelBase *a2)
{
  uint64_t result = OZChannel::compare((OZChannel *)this, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (v5)
      {
        if (!PCString::compare((PCString *)this + 20, v5 + 20)) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t OZChannelEnum::allowsDrag(OZChannelEnum *this, const OZChannelBase *a2)
{
  uint64_t result = OZChannelBase::allowsDrag((OZChannelBase *)this, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (v5)
      {
        if (!PCString::compare((PCString *)this + 20, v5 + 20)) {
          return 1;
        }
      }
    }
  }
  return result;
}

void OZChannelEnum::setStrings(const PCString *this, PCString *a2, int a3)
{
  {
    OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN13OZChannelEnum10setStringsERK8PCStringb_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = this;
  if (OZChannelEnum::setStrings(PCString const&,BOOL)::onceToken == -1)
  {
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  dispatch_once(&OZChannelEnum::setStrings(PCString const&,BOOL)::onceToken, block);
  if (a3) {
LABEL_4:
  }
    PCString::set((PCString *)&this[20], a2);
LABEL_5:
  BOOL v6 = PCString::empty((PCString *)&this[20]);
  if (v6)
  {
    this[19].var0 = (__CFString *)OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator;
    return;
  }
  uint64_t v7 = (std::mutex *)(OZStringTablesMap::getInstance((OZStringTablesMap *)v6) + 8);
  PCSharedMutex::lock(v7);
  uint64_t Instance = (const PCString *)OZStringTablesMap::getInstance(v8);
  uint64_t v10 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(Instance + 14, (PCString *)&this[20]);
  this[19].var0 = (__CFString *)v10;
  uint64_t v11 = OZStringTablesMap::getInstance(v10);
  var0 = this[19].var0;
  PCSharedMutex::unlock(v7);
  if (var0 == (__CFString *)(v11 + 120))
  {
    memset(v37, 0, sizeof(v37));
    ArrayBySeparatingStrings = (OZStringTablesMap *)PCString::size(a2);
    if (ArrayBySeparatingStrings)
    {
      int64_t v14 = PCString::cf_str(a2);
      if (CFStringFind(v14, @"|", 0).location == -1)
      {
        uint64_t v17 = PCString::cf_str(a2);
        if (CFStringFind(v17, @";", 0).location == -1)
        {
          std::vector<PCString>::push_back[abi:ne180100](v37, a2);
          uint64_t v25 = (std::mutex *)(OZStringTablesMap::getInstance(v30) + 8);
          PCSharedMutex::lock(v25);
          Float64 v32 = (OZStringTablesMap *)OZStringTablesMap::getInstance(v31);
          if (this[19].var0 == (__CFString *)((char *)v32 + 120))
          {
            double v33 = (PCString *)OZStringTablesMap::getInstance(v32);
            uint64_t v34 = (PCString *)OZStringTablesMap::getInstance((OZStringTablesMap *)v33);
            std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v35, this + 20, v37);
            this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v33 + 14, v34 + 15, &v35, (uint64_t)&v35);
            uint64_t v39 = (void **)v36;
            std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v39);
            PCString::~PCString(&v35);
          }
          goto LABEL_20;
        }
        char v15 = PCString::cf_str(a2);
        CFStringRef v16 = @";";
      }
      else
      {
        char v15 = PCString::cf_str(a2);
        CFStringRef v16 = @"|";
      }
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v15, v16);
      CFArrayRef v18 = ArrayBySeparatingStrings;
      if (ArrayBySeparatingStrings)
      {
        double v19 = (std::mutex *)(OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
        PCSharedMutex::lock(v19);
        CFIndex Count = CFArrayGetCount(v18);
        std::vector<PCString>::reserve(v37, Count);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v18, i);
            PCURL::PCURL((PCURL *)&v35, ValueAtIndex);
            uint64_t v24 = PCString::intern(&v35, v23);
            PCString::~PCString(&v35);
            std::vector<PCString>::push_back[abi:ne180100](v37, (PCString *)v24);
          }
        }
        CFRelease(v18);
        PCSharedMutex::unlock(v19);
      }
    }
    uint64_t v25 = (std::mutex *)(OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
    PCSharedMutex::lock(v25);
    ++LODWORD(this[27].var0);
    double v27 = (OZStringTablesMap *)OZStringTablesMap::getInstance(v26);
    if (this[19].var0 == (__CFString *)((char *)v27 + 120))
    {
      float v28 = (PCString *)OZStringTablesMap::getInstance(v27);
      float v29 = (PCString *)OZStringTablesMap::getInstance((OZStringTablesMap *)v28);
      std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v35, this + 20, v37);
      this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v28 + 14, v29 + 15, &v35, (uint64_t)&v35);
      uint64_t v39 = (void **)v36;
      std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v39);
      PCString::~PCString(&v35);
    }
LABEL_20:
    PCSharedMutex::unlock(v25);
    v35.var0 = (__CFString *)v37;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  }
}

void sub_1B79E799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::pair<PCString,std::vector<PCString>>::~pair(&a10);
  PCSharedMutex::unlock(v14);
  a10.var0 = (__CFString *)&a14;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void ___ZN13OZChannelEnum10setStringsERK8PCStringb_block_invoke(OZStringTablesMap *a1)
{
  memset(v6, 0, sizeof(v6));
  uint64_t Instance = (PCString *)OZStringTablesMap::getInstance(a1);
  uint64_t v2 = (PCString *)OZStringTablesMap::getInstance((OZStringTablesMap *)Instance);
  PCString::PCString(&v3, "");
  std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v4, &v3, v6);
  OZChannelEnum::setStrings(PCString const&,BOOL)::_stringsTableEmptyIterator = (uint64_t)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(Instance + 14, v2 + 15, &v4, (uint64_t)&v4);
  uint64_t v7 = (void **)&v5;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v7);
  PCString::~PCString(&v4);
  PCString::~PCString(&v3);
  v4.var0 = (__CFString *)v6;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1B79E7B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = &a15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getStringTablesMap(OZChannelEnum *this)
{
  return OZStringTablesMap::getInstance(this) + 112;
}

void std::pair<PCString,std::vector<PCString>>::~pair(PCString *a1)
{
  uint64_t v2 = a1 + 1;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  PCString::~PCString(a1);
}

uint64_t OZChannelEnum::getStringTablesMapLock(OZChannelEnum *this)
{
  return OZStringTablesMap::getInstance(this) + 8;
}

uint64_t std::vector<PCString>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, a2);
    v7[1] = v7[0] + v5;
    BOOL v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 8 * v6;
    std::vector<PCString>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<PCString>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B79E7C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PCString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelEnum::setStringsFromChannel(PCString *this, const OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      PCString::set(this + 20, v3 + 20);
      this[19].var0 = v4[19].var0;
      ++LODWORD(this[27].var0);
    }
  }
}

void OZChannelEnum::setImages(OZChannelEnum *this, PCString *a2)
{
  char v15 = 0;
  CFStringRef v16 = 0;
  uint64_t v17 = 0;
  ArrayBySeparatingStrings = (OZStringTablesMap *)PCString::size(a2);
  if (ArrayBySeparatingStrings)
  {
    uint64_t v5 = PCString::cf_str(a2);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v5, @";");
    CFArrayRef v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings)
    {
      uint64_t v7 = (std::mutex *)(OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
      PCSharedMutex::lock_shared(v7);
      int Count = CFArrayGetCount(v6);
      std::vector<PCString>::reserve((uint64_t *)&v15, Count);
      if (Count >= 1)
      {
        CFIndex v9 = 0;
        uint64_t v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
          PCURL::PCURL((PCURL *)&v18, ValueAtIndex);
          PCString v13 = PCString::intern(&v18, v12);
          PCString::~PCString(&v18);
          std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)&v15, (PCString *)v13);
          ++v9;
        }
        while (v10 != v9);
      }
      CFRelease(v6);
      PCSharedMutex::unlock_shared(v7);
    }
  }
  int64_t v14 = (std::mutex *)(OZStringTablesMap::getInstance(ArrayBySeparatingStrings) + 8);
  PCSharedMutex::lock(v14);
  if ((PCString **)((char *)this + 232) != &v15) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)this + 232, v15, v16, v16 - v15);
  }
  PCSharedMutex::unlock(v14);
  v18.var0 = (__CFString *)&v15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1B79E7E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCSharedMutex::unlock(v12);
  a12.var0 = (__CFString *)&a9;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

double OZChannelEnum::getSliderMax(OZChannelEnum *this)
{
  return *(double *)(*((void *)this + 16) + 8);
}

void OZChannelEnum::clearStrings(PCString *this)
{
  uint64_t v2 = (std::mutex *)(OZStringTablesMap::getInstance((OZStringTablesMap *)this) + 8);
  PCSharedMutex::lock(v2);
  PCString::clear(this + 20);
  uint64_t Instance = (const PCString *)OZStringTablesMap::getInstance(v3);
  uint64_t v5 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(Instance + 14, this + 20);
  this[19].var0 = (__CFString *)v5;
  CFArrayRef v6 = (OZStringTablesMap *)OZStringTablesMap::getInstance(v5);
  if (this[19].var0 == (__CFString *)((char *)v6 + 120))
  {
    memset(v11, 0, sizeof(v11));
    uint64_t v7 = (PCString *)OZStringTablesMap::getInstance(v6);
    BOOL v8 = (PCString *)OZStringTablesMap::getInstance((OZStringTablesMap *)v7);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v9, this + 20, v11);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v7 + 14, v8 + 15, &v9, (uint64_t)&v9);
    uint64_t v12 = (void **)&v10;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v12);
    PCString::~PCString(&v9);
    v9.var0 = (__CFString *)v11;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  ++LODWORD(this[27].var0);
  PCSharedMutex::unlock(v2);
}

void sub_1B79E7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  PCSharedMutex::unlock(v13);
  _Unwind_Resume(a1);
}

void OZChannelEnum::addString(PCString *this, PCString *a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v4 = (std::mutex *)(OZStringTablesMap::getInstance((OZStringTablesMap *)this) + 8);
  PCSharedMutex::lock_shared(v4);
  uint64_t Instance = OZStringTablesMap::getInstance(v5);
  var0 = this[19].var0;
  if (var0 != (__CFString *)(Instance + 120) && &v19 != &var0[1].info) {
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v19, (PCString *)var0[1].info, (PCString *)var0[1].data, (uint64_t)&var0[1].data[-var0[1].info] >> 3);
  }
  PCSharedMutex::unlock_shared(v4);
  if (!PCString::empty(this + 20)) {
    PCString::append(this + 20, ";");
  }
  PCString::append(this + 20, a2);
  std::vector<PCString>::push_back[abi:ne180100](&v19, a2);
  uint64_t v10 = (std::mutex *)(OZStringTablesMap::getInstance(v9) + 8);
  PCSharedMutex::lock(v10);
  uint64_t v12 = (const PCString *)OZStringTablesMap::getInstance(v11);
  PCString v13 = (OZStringTablesMap *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(v12 + 14, this + 20);
  this[19].var0 = (__CFString *)v13;
  int64_t v14 = (OZStringTablesMap *)OZStringTablesMap::getInstance(v13);
  if (this[19].var0 == (__CFString *)((char *)v14 + 120))
  {
    char v15 = (PCString *)OZStringTablesMap::getInstance(v14);
    CFStringRef v16 = (PCString *)OZStringTablesMap::getInstance((OZStringTablesMap *)v15);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v17, this + 20, &v19);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v15 + 14, v16 + 15, &v17, (uint64_t)&v17);
    uint64_t v22 = (void **)&v18;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v22);
    PCString::~PCString(&v17);
  }
  PCSharedMutex::unlock(v10);
  OZChannel::setSliderMax((OZChannel *)this, (double)(unint64_t)(((v20 - v19) >> 3) - 1));
  ++LODWORD(this[27].var0);
  v17.var0 = (__CFString *)&v19;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1B79E81A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  PCSharedMutex::unlock(v13);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getNumberOfStrings(OZChannelEnum *this)
{
  uint64_t v2 = (std::mutex *)(OZStringTablesMap::getInstance(this) + 8);
  PCSharedMutex::lock_shared(v2);
  uint64_t Instance = OZStringTablesMap::getInstance(v3);
  uint64_t v5 = *((void *)this + 19);
  if (v5 == Instance + 120) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 3;
  }
  PCSharedMutex::unlock_shared(v2);
  return v6;
}

void sub_1B79E8284(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::getString(OZChannelEnum *this, unsigned int a2)
{
  uint64_t Instance = OZStringTablesMap::getInstance(this);
  PCSharedMutex::lock((std::mutex *)(Instance + 8));
  uint64_t v5 = *(void *)(*((void *)this + 19) + 40) + 8 * a2;
  uint64_t v7 = OZStringTablesMap::getInstance(v6);
  PCSharedMutex::unlock((std::mutex *)(v7 + 8));
  return v5;
}

char *OZChannelEnum::setTags(OZChannelEnum *this, char *a2, int a3)
{
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 168, a2, (uint64_t)&a2[4 * a3], a3);
}

uint64_t OZChannelEnum::getTag(OZChannelEnum *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 21) + 4 * a2);
}

void *OZChannelEnum::setEnabledStates(OZChannelEnum *this, BOOL *a2, unint64_t a3)
{
  return std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>((void *)this + 24, a2, &a2[a3], a3);
}

uint64_t OZChannelEnum::getEnabledState(OZChannelEnum *this, unint64_t a2)
{
  return (*(void *)(*((void *)this + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
}

void OZChannelEnum::setIsSpline(OZChannel *this, uint64_t a2)
{
  int v2 = a2;
  OZChannel::setIsSpline(this, a2);
  if (v2) {
    this->var7 &= ~0x10000uLL;
  }
}

__CFString *OZChannelEnum::getObjCWrapperName(OZChannelEnum *this)
{
  return @"CHChannelEnum";
}

uint64_t OZStringTablesMap::getInstance(OZStringTablesMap *this)
{
  if (!OZStringTablesMap::_sStringTablesMap) {
    operator new();
  }
  return OZStringTablesMap::_sStringTablesMap;
}

void sub_1B79E83C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A9FDA665);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::OZChannelEnum_valueImpl::getInstance(OZChannelEnum::OZChannelEnum_valueImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::OZChannelEnum_valueImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::OZChannelEnum_valueImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnum::OZChannelEnum_valueImpl::_OZChannelEnum_value;
}

void std::__call_once_param<std::tuple<OZChannelEnum::OZChannelEnum_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelEnum::OZChannelEnum_valueImpl::_OZChannelEnum_value) {
    operator new();
  }
}

void sub_1B79E84A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelEnum::OZChannelEnum_valueImpl::OZChannelEnum_valueImpl(OZChannelEnum::OZChannelEnum_valueImpl *this)
{
}

void sub_1B79E8574(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnum::OZChannelEnum_valueInfo::getInstance(OZChannelEnum::OZChannelEnum_valueInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::OZChannelEnum_valueInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::OZChannelEnum_valueInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnum::OZChannelEnum_valueInfo::_OZChannelEnum_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelEnum::OZChannelEnum_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelEnum::OZChannelEnum_valueInfo::_OZChannelEnum_valueInfo) {
    operator new();
  }
}

void sub_1B79E8650(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZChannelEnum::OZChannelEnum_valueInfo::OZChannelEnum_valueInfo(OZChannelInfo *this)
{
  OZChannelInfo::OZChannelInfo(this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1109AA0;
  *((void *)this + 1OZSplineNode::allocOZSpline(this, 0) = &unk_1F1109AC0;
  return this;
}

void sub_1B79E86FC(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

PCString *std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(PCString *a1, const PCString *a2, uint64_t *a3)
{
  PCString::PCString(a1, a2);
  v5[1] = 0;
  v5[2] = 0;
  ++v5;
  v5[2] = 0;
  std::vector<PCString>::__init_with_size[abi:ne180100]<PCString*,PCString*>(v5, *a3, a3[1], (a3[1] - *a3) >> 3);
  return a1;
}

void sub_1B79E8754(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void *std::vector<PCString>::__init_with_size[abi:ne180100]<PCString*,PCString*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B79E87D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + OZSpline::reparametrize((uint64_t)this + 8) = v10;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      PCString::PCString((PCString *)(a4 + v7), (const PCString *)(a2 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B79E8850(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      PCString::~PCString((PCString *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void OZStringTablesMap::OZStringTablesMap(OZStringTablesMap *this)
{
  PCSingleton::PCSingleton(this, 50);
  *uint64_t v2 = &unk_1F1109B18;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v2 + 1));
  *((void *)this + 16) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = (char *)this + 120;
}

void sub_1B79E88D0(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZStringTablesMap::~OZStringTablesMap(OZStringTablesMap *this)
{
  *(void *)this = &unk_1F1109B18;
  std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy((uint64_t)this + 112, *((PCString **)this + 15));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1109B18;
  std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy((uint64_t)this + 112, *((PCString **)this + 15));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::destroy(a1, a2[1].var0);
    uint64_t v4 = a2 + 5;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

void std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>(uint64_t a1, PCString *a2, PCString *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(PCString **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    std::vector<PCString>::__vdeallocate((void **)a1);
    if (a4 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<double>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(v8, (uint64_t)v6, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_15:
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v13;
    return;
  }
  int64_t v14 = *(PCString **)(a1 + 8);
  unint64_t v15 = v14 - v9;
  if (v15 < a4)
  {
    CFStringRef v16 = &a2[v15];
    if (v14 != v9)
    {
      uint64_t v17 = 8 * v15;
      do
      {
        PCString::set(v9++, v6++);
        v17 -= 8;
      }
      while (v17);
      uint64_t v9 = *(PCString **)(a1 + 8);
    }
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCString>,PCString*,PCString*,PCString*>(v8, (uint64_t)v16, (uint64_t)a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = v9;
  }
  else
  {
    uint64_t v18 = v9;
    do
    {
      PCString::set(v9++, v6++);
      ++v18;
    }
    while (v6 != a3);
    int64_t v14 = *(PCString **)(a1 + 8);
  }
  while (v14 != v18)
    PCString::~PCString(v14 - 1);
  *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v18;
}

void sub_1B79E8B94(_Unwind_Exception *a1)
{
  *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<PCString>::__vdeallocate(void **a1)
{
  uint64_t v1 = (PCString *)*a1;
  if (*a1)
  {
    PCString v3 = (PCString *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        PCString::~PCString(v3 - 1);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(PCString *a1, PCString *a2, PCString *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__construct_node<std::pair<PCString,std::vector<PCString>>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const PCString *std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(const PCString *a1, PCString *a2, const PCString **a3, __CFString **p_var0, PCString *a5)
{
  uint64_t v9 = a1 + 1;
  if (&a1[1] == a2 || (PCString::compare(a5, a2 + 4) & 0x80000000) != 0)
  {
    if ((PCString *)a1->var0 == a2)
    {
      unint64_t v12 = a2;
    }
    else
    {
      var0 = (PCString *)a2->var0;
      if (a2->var0)
      {
        do
        {
          unint64_t v12 = var0;
          var0 = (PCString *)var0[1].var0;
        }
        while (var0);
      }
      else
      {
        CFStringRef v16 = a2;
        do
        {
          unint64_t v12 = (PCString *)v16[2].var0;
          BOOL v17 = v12->var0 == (__CFString *)v16;
          CFStringRef v16 = v12;
        }
        while (v17);
      }
      if ((PCString::compare(v12 + 4, a5) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    if (a2->var0)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if ((PCString::compare(a2 + 4, a5) & 0x80000000) == 0)
  {
    *a3 = a2;
    *p_var0 = (__CFString *)a2;
    return (const PCString *)p_var0;
  }
  p_var0 = &a2[1].var0;
  uint64_t v13 = a2[1].var0;
  if (v13)
  {
    int64_t v14 = a2[1].var0;
    do
    {
      unint64_t v15 = (const PCString *)v14;
      int64_t v14 = (__CFString *)v14->isa;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      unint64_t v15 = (const PCString *)v19[2].var0;
      BOOL v17 = v15->var0 == (__CFString *)v19;
      uint64_t v19 = (PCString *)v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return (const PCString *)p_var0;
  }
  if ((PCString::compare(a5, v15 + 4) & 0x80000000) != 0)
  {
    uint64_t v13 = *p_var0;
    goto LABEL_29;
  }
LABEL_17:

  return std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, a3, a5);
}

__n128 std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__construct_node<std::pair<PCString,std::vector<PCString>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + OZSpline::reparametrize((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PCString::PCString((PCString *)v6 + 4, (const PCString *)a2);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v6 + 4OZSplineNode::allocOZSpline(this, 0) = result;
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B79E8E9C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::vector<PCString>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::vector<PCString>>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCString *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 5;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
    PCString::~PCString(__p + 4);
  }
  if (__p) {
    operator delete(__p);
  }
}

void *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  result[1] = 0;
  if (a4)
  {
    uint64_t v7 = result;
    if (a4 > result[2] << 6)
    {
      uint64_t v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *uint64_t v7 = 0;
        v7[1] = 0;
        BOOL v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

void *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    uint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      uint64_t *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, int a7)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4, a5, a6);
  *uint64_t v9 = &unk_1F1109B50;
  v9[2] = &unk_1F1109E28;
  v9[14] = 0;
  if (a7) {
    operator new();
  }
  *((_DWORD *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 7) |= 0x1000uLL;
  unk_1F1109BD0(this);
}

void sub_1B79E9120(_Unwind_Exception *a1)
{
  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelFolder_Factory::getInstance((OZChannelFolder_Factory *)this);
  OZChannelBase::OZChannelBase((OZChannelBase *)this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1109B50;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1109E28;
  *((void *)this + 14) = 0;
  if (a6) {
    operator new();
  }
  *((_DWORD *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 7) |= 0x1000uLL;
  unk_1F1109BD0(this);
}

void sub_1B79E924C(_Unwind_Exception *a1)
{
  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3, a4);
  *int v7 = &unk_1F1109B50;
  BOOL v7[2] = &unk_1F1109E28;
  v7[14] = 0;
  if (a5) {
    operator new();
  }
  *((_DWORD *)this + 3OZSplineNode::allocOZSpline(this, 0) = 0;
  *((void *)this + 7) |= 0x1000uLL;
  unk_1F1109BD0(this);
}

void sub_1B79E9340(_Unwind_Exception *a1)
{
  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::OZChannelFolder(OZChannelFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelBase::OZChannelBase((OZChannelBase *)this, a2, a3);
  void *v5 = &unk_1F1109B50;
  v5[2] = &unk_1F1109E28;
  v5[14] = 0;
  var0 = a2[1].var0;
  if (var0 && ((*((void *)a2[1].var0 + 1) - (void)*var0) & 0x7FFFFFFF8) != 0) {
    operator new();
  }
  *((void *)this + 15) = a2[1].var1;
  *((void *)this + 7) |= 0x1000uLL;
}

void sub_1B79E9424(_Unwind_Exception *a1)
{
  OZChannelBase::~OZChannelBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFolder::~OZChannelFolder(OZChannelFolder *this)
{
  *(void *)this = &unk_1F1109B50;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1109E28;
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    *(void *)(v2 + OZSpline::reparametrize((uint64_t)this + 8) = *(void *)v2;
    if (v3) {
      operator delete(v3);
    }
    MEMORY[0x1BA9BFBA0](v2, 0x80C40D6874129);
    *((void *)this + 14) = 0;
  }

  OZChannelBase::~OZChannelBase((OZChannelBase *)this);
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelFolder::~OZChannelFolder(OZChannelFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *OZChannelFolder::finishInitializing(OZChannelFolder *this)
{
  __n128 result = OZChannelBase::finishInitializing((OZChannelBase *)this);
  uint64_t v3 = (uint64_t **)*((void *)this + 14);
  if (v3)
  {
    unint64_t v4 = *v3;
    unint64_t v5 = v3[1];
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      __n128 result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
  }
  return result;
}

uint64_t OZChannelFolder::operator=(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

void OZChannelFolder::clone(OZChannelFolder *this)
{
}

void sub_1B79E963C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t OZChannelFolder::compare(OZChannelFolder *this, const OZChannelBase *a2)
{
  if ((a2->var7 & 0x1000) == 0) {
    return 0;
  }
  uint64_t result = OZChannelBase::compare((OZChannelBase *)this, a2);
  if (result)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 14);
    if (!v6) {
      return 0;
    }
    int v7 = (uint64_t *)v5[14];
    if (!v7) {
      return 0;
    }
    uint64_t v8 = *v6;
    uint64_t v9 = *(void *)(*((void *)this + 14) + 8);
    uint64_t v10 = *v7;
    if (v9 - v8 != v7[1] - *v7) {
      return 0;
    }
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      uint64_t v11 = v8 + 8;
      do
      {
        v10 += 8;
        int v12 = OZChannelBase::operator!=(*(void *)(v11 - 8));
        if (v12) {
          break;
        }
        BOOL v13 = v11 == v9;
        v11 += 8;
      }
      while (!v13);
      return v12 ^ 1u;
    }
  }
  return result;
}

double OZChannelFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelBase::copy((OZChannelBase *)this, a2);
  if (a2)
  {
    if (v5)
    {
      double result = v5[15];
      *((double *)this + 15) = result;
    }
  }
  return result;
}

void *OZChannelFolder::assign(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelBase::assign((OZChannelBase *)this, a2);
  double result = (void *)(*(uint64_t (**)(OZChannelFolder *, const OZChannelBase *))(*(void *)this + 264))(this, a2);
  if (result)
  {
    double result = a2
    unint64_t v5 = (uint64_t **)*((void *)this + 14);
    if (v5)
    {
      uint64_t v6 = result[14];
      if (v6)
      {
        uint64_t v8 = *v5;
        int v7 = v5[1];
        uint64_t v9 = *(uint64_t **)v6;
        if ((char *)v7 - (char *)*v5 == *(void *)(v6 + 8) - *(void *)v6 && v8 != v7)
        {
          do
          {
            uint64_t v12 = *v8++;
            uint64_t v11 = v12;
            uint64_t v13 = *v9++;
            double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 256))(v11, v13);
          }
          while (v8 != v7);
        }
      }
    }
  }
  return result;
}

uint64_t OZChannelFolder::allowsAssignment(OZChannelFolder *this, const OZChannelBase *a2)
{
  if ((a2->var7 & 0x1000) == 0) {
    return 0;
  }
  uint64_t result = OZChannelBase::allowsAssignment((OZChannelBase *)this, a2);
  if (result)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 14);
    int v7 = (uint64_t *)v5[14];
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = *v6;
        uint64_t v9 = *(void *)(*((void *)this + 14) + 8);
        uint64_t v10 = *v7;
        uint64_t v11 = *(void *)(v5[14] + 8);
        if (v9 - v8 == v11 - v10)
        {
          if (v8 != v9 && v10 != v11)
          {
            uint64_t v13 = v8 + 8;
            uint64_t v14 = v10 + 8;
            do
            {
              uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v13 - 8) + 264))(*(void *)(v13 - 8), *(void *)(v14 - 8));
              if (result) {
                BOOL v15 = v13 == v9;
              }
              else {
                BOOL v15 = 1;
              }
              v13 += 8;
              BOOL v16 = v15 || v14 == v11;
              v14 += 8;
            }
            while (!v16);
            return result;
          }
          return 1;
        }
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

OZChannelFolder *OZChannelFolder::copyKeyframesFromChannel(OZChannelFolder *this, const CMTime *a2, OZChannelBase *a3)
{
  uint64_t v3 = (uint64_t **)*((void *)this + 14);
  if (v3)
  {
    unint64_t v4 = *v3;
    unint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        uint64_t v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *, OZChannelBase *))(*(void *)v8 + 304))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setValue(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  if ((lpsrc->var7 & 0x1000) != 0)
  {
    uint64_t v2 = this;
    uint64_t v3 = (uint64_t *)*((void *)v2 + 14);
    if (v3)
    {
      unint64_t v4 = (uint64_t *)*((void *)this + 14);
      if (v4)
      {
        uint64_t v5 = *v3;
        uint64_t v6 = *(void *)(*((void *)v2 + 14) + 8);
        uint64_t v7 = *v4;
        uint64_t v8 = *(void *)(*((void *)this + 14) + 8);
        BOOL v9 = v6 - v5 != v8 - v7 || v5 == v6;
        if (!v9 && v7 != v8)
        {
          uint64_t v11 = v5 + 8;
          uint64_t v12 = v7 + 8;
          do
          {
            this = (OZChannelFolder *)(*(uint64_t (**)(void, void))(**(void **)(v11 - 8) + 312))(*(void *)(v11 - 8), *(void *)(v12 - 8));
            if (v11 == v6) {
              break;
            }
            v11 += 8;
            BOOL v9 = v12 == v8;
            v12 += 8;
          }
          while (!v9);
        }
      }
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::findMatchingDescendant(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase **a3)
{
  uint64_t v3 = (OZChannelFolder ***)*((void *)this + 14);
  if (v3)
  {
    unint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      p_var4 = &a2->var4;
      do
      {
        if ((*(unsigned int (**)(OZChannelFolder *, const OZChannelBase *))(*(void *)*v4 + 264))(*v4, a2))
        {
          BOOL v9 = a2->var3 == *((_DWORD *)*v4 + 6);
          int v10 = PCString::caseInsensitiveCompare(p_var4, (const PCString *)*v4 + 4);
          LODWORD(v1atomic_store(0, (unint64_t *)this + 1) = v9 | 2;
          uint64_t v11 = v10 ? v9 : v11;
          if (!a3[v11]) {
            a3[v11] = (OZChannelBase *)*v4;
          }
        }
        this = *v4;
        if ((*((unsigned char *)*v4 + 57) & 0x10) != 0)
        {
          this = (OZChannelFolder *)OZChannelFolder::findMatchingDescendant(v12, a2, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelBase *OZChannelFolder::findMatchingCompoundChannel(OZChannelFolder *this, const PCString *a2)
{
  uint64_t v2 = (const void ***)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = *v3;
    if (v7)
    {
      uint64_t v8 = v7;
      OZChannelBase::getFullDisplayName(v7, &v13);
      int v9 = PCString::caseInsensitiveCompare(&v13, a2);
      PCString::~PCString(&v13);
      if (!v9) {
        return v8;
      }
      uint64_t v6 = *v3;
    }
    if ((v6[57] & 0x10) != 0)
    {
      uint64_t MatchingCompoundChannel = OZChannelFolder::findMatchingCompoundChannel(v10, a2);
      if (MatchingCompoundChannel) {
        break;
      }
    }
    if (++v3 == v4) {
      return 0;
    }
  }
  return (OZChannelBase *)MatchingCompoundChannel;
}

void sub_1B79E9E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

OZChannelFolder *OZChannelFolder::findMatchingDescendant(OZChannelFolder *this, const OZChannelBase *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(OZChannelFolder *))(*(void *)this + 264))(this)) {
    return this;
  }
  var6 = (const OZChannelBase *)a2->var6;
  if (var6) {
    goto LABEL_4;
  }
  PCString::PCString(&v21, &a2->var4);
  PCURL::PCURL((PCURL *)&v20, @".");
  int v12 = PCString::find(&v21, &v20);
  PCString::~PCString(&v20);
  if ((v12 & 0x80000000) == 0)
  {
    PCString::substrTo(&v21, v12 - 1, (CFStringRef *)&v20.var0);
    PCString::substrFrom(&v21, (v12 + 1), (CFStringRef *)&v19.var0);
    PCURL::PCURL((PCURL *)&v18, @".");
    int v13 = PCString::find(&v19, &v18);
    PCString::~PCString(&v18);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v2 = PCString::size(&v20);
      PCString::substrTo(&v21, (int)v2 + v13, (CFStringRef *)&v18.var0);
      PCString::set(&v20, &v18);
      PCString::~PCString(&v18);
      PCString::substrFrom(&v21, v13 + (int)v2 + 2, (CFStringRef *)&v18.var0);
      PCString::set(&v19, &v18);
      PCString::~PCString(&v18);
    }
    uint64_t MatchingCompoundChannel = (OZChannelFolder *)OZChannelFolder::findMatchingCompoundChannel(this, &v20);
    if (MatchingCompoundChannel)
    {
      BOOL v15 = (OZChannelBase *)(*((uint64_t (**)(const OZChannelBase *))a2->var0 + 31))(a2);
      OZChannelBase::setName(v15, &v19, 0);
      *(_OWORD *)uint64_t v22 = 0u;
      long long v23 = 0u;
      OZChannelFolder::findMatchingDescendant(MatchingCompoundChannel, v15, v22);
      if (v15) {
        (*((void (**)(OZChannelBase *))v15->var0 + 1))(v15);
      }
      BOOL v16 = v22[1];
      if ((void)v23) {
        BOOL v16 = (OZChannelBase *)v23;
      }
      if (*((void *)&v23 + 1)) {
        uint64_t v2 = (__CFString *)*((void *)&v23 + 1);
      }
      else {
        uint64_t v2 = (__CFString *)v16;
      }
    }
    PCString::~PCString(&v19);
    PCString::~PCString(&v20);
    if (MatchingCompoundChannel)
    {
      PCString::~PCString(&v21);
      return (OZChannelFolder *)v2;
    }
  }
  PCString::~PCString(&v21);
  var6 = (const OZChannelBase *)a2->var6;
  if (var6) {
LABEL_4:
  }
  BOOL v6 = var6 != 0;
  if (var6) {
    uint64_t v7 = var6;
  }
  else {
    uint64_t v7 = a2;
  }
  *(_OWORD *)uint64_t v22 = 0u;
  long long v23 = 0u;
  OZChannelFolder::findMatchingDescendant(this, v7, v22);
  uint64_t v8 = (OZChannelBase *)v23;
  if (!(void)v23) {
    uint64_t v8 = v22[1];
  }
  if (*((void *)&v23 + 1)) {
    uint64_t v2 = (__CFString *)*((void *)&v23 + 1);
  }
  else {
    uint64_t v2 = (__CFString *)v8;
  }
  char v9 = !v6;
  if (!v2) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    if (v10)
    {
      *(_OWORD *)uint64_t v22 = 0u;
      long long v23 = 0u;
      OZChannelFolder::findMatchingDescendant(v10, a2, v22);
      uint64_t v11 = v22[1];
      if ((void)v23) {
        uint64_t v11 = (OZChannelBase *)v23;
      }
      if (*((void *)&v23 + 1)) {
        return (OZChannelFolder *)*((void *)&v23 + 1);
      }
      else {
        return (OZChannelFolder *)v11;
      }
    }
  }
  return (OZChannelFolder *)v2;
}

void sub_1B79EA190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

void OZChannelFolder::push_back(OZChannelFolder *this, OZChannelBase *a2)
{
  if (a2)
  {
    if (!*((void *)this + 14)) {
      operator new();
    }
    OZChannelBase::registerParent(a2, this);
    unint64_t v4 = (void **)*((void *)this + 14);
    uint64_t v5 = v4[1];
    unint64_t v6 = (unint64_t)v4[2];
    if ((unint64_t)v5 >= v6)
    {
      uint64_t v8 = ((char *)v5 - (unsigned char *)*v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v6 - (void)*v4;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 2), v11);
      }
      else {
        int v12 = 0;
      }
      int v13 = &v12[8 * v8];
      uint64_t v14 = &v12[8 * v11];
      *(void *)int v13 = a2;
      uint64_t v7 = v13 + 8;
      BOOL v16 = (char *)*v4;
      BOOL v15 = (char *)v4[1];
      if (v15 != *v4)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v13 - atomic_store(0, (unint64_t *)this + 1) = v17;
          v13 -= 8;
        }
        while (v15 != v16);
        BOOL v15 = (char *)*v4;
      }
      uint64_t *v4 = v13;
      v4[1] = v7;
      v4[2] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      void *v5 = a2;
      uint64_t v7 = v5 + 1;
    }
    v4[1] = v7;
  }
}

char *OZChannelFolder::push_front(OZChannelFolder *this, OZChannelBase *a2)
{
  unint64_t v4 = a2;
  if (!*((void *)this + 14)) {
    operator new();
  }
  OZChannelBase::registerParent(a2, this);
  return std::vector<OZChannelBase *>::insert(*((void *)this + 14), **((char ***)this + 14), (char *)&v4);
}

char *OZChannelFolder::insertDescendantBefore(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  uint64_t v9 = a3;
  if (!*((void *)this + 14)) {
    operator new();
  }
  OZChannelBase::registerParent(a3, this);
  uint64_t v5 = (char **)*((void *)this + 14);
  if (a2)
  {
    unint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 != v7)
    {
      while (*(const OZChannelBase **)v6 != a2)
      {
        v6 += 8;
        if (v6 == v7)
        {
          unint64_t v6 = v5[1];
          return std::vector<OZChannelBase *>::insert((uint64_t)v5, v6, (char *)&v9);
        }
      }
    }
  }
  else
  {
    unint64_t v6 = v5[1];
  }
  return std::vector<OZChannelBase *>::insert((uint64_t)v5, v6, (char *)&v9);
}

char *OZChannelFolder::insertDescendantAfter(OZChannelFolder *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  uint64_t v10 = a3;
  if (!*((void *)this + 14)) {
    operator new();
  }
  OZChannelBase::registerParent(a3, this);
  uint64_t v5 = (char **)*((void *)this + 14);
  unint64_t v6 = *v5;
  if (a2)
  {
    uint64_t v7 = (const OZChannelBase **)v5[1];
    uint64_t v8 = (const OZChannelBase **)*v5;
    if (v6 != (char *)v7)
    {
      while (*v8 != a2)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = (const OZChannelBase **)v5[1];
          break;
        }
      }
    }
    if (v8 != v7) {
      unint64_t v6 = (char *)(v8 + 1);
    }
  }
  return std::vector<OZChannelBase *>::insert((uint64_t)v5, v6, (char *)&v10);
}

OZChannelFolder *OZChannelFolder::removeDescendant(OZChannelFolder *this, OZChannelBase *a2)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *(void *)v2;
    unint64_t v4 = *(OZChannelBase ***)(v2 + 8);
    if ((OZChannelBase **)v3 != v4)
    {
      uint64_t v5 = this;
      uint64_t v6 = -v3;
      while (*(OZChannelBase **)v3 != a2)
      {
        v3 += 8;
        v6 -= 8;
        if ((OZChannelBase **)v3 == v4) {
          return this;
        }
      }
      this = (OZChannelFolder *)OZChannelBase::unregisterParent(a2, this);
      uint64_t v7 = *((void *)v5 + 14);
      uint64_t v8 = -v6;
      uint64_t v9 = (const void *)(8 - v6);
      size_t v10 = *(void *)(v7 + 8) - (8 - v6);
      if (v10) {
        this = (OZChannelFolder *)memmove((void *)v8, v9, v10);
      }
      *(void *)(v7 + OZSpline::reparametrize((uint64_t)this + 8) = v8 + v10;
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::removeAllDescendants(OZChannelFolder *this, int a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    if (a2)
    {
      uint64_t v3 = *v2;
      unint64_t v4 = v2[1];
      if (*v2 != v4)
      {
        uint64_t v5 = this;
        do
        {
          uint64_t v6 = *v3++;
          this = (OZChannelFolder *)OZChannelBase::unregisterParent(v6, v5);
        }
        while (v3 != v4);
        uint64_t v2 = (OZChannelBase ***)*((void *)v5 + 14);
      }
    }
    v2[1] = *v2;
  }
  return this;
}

uint64_t OZChannelFolder::getDescendant(OZChannelFolder *this, int a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    while (v3 != v4)
    {
      uint64_t result = *(void *)v3;
      if (*(_DWORD *)(*(void *)v3 + 24) == a2) {
        return result;
      }
      v3 += 8;
    }
  }
  return 0;
}

void OZChannelFolder::getAllDescendantsFlattened(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(const void ****)(a1 + 112);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    if (*v4 != v5)
    {
      uint64_t v10 = a3;
      uint64_t v11 = (uint64_t)(a2 + 2);
      do
      {
        int v12 = (OZChannelBase *)*v6;
        {
          if (!OZChannelBase::testFlag(v12, v10))
          {
            BOOL v16 = (const void **)a2[1];
            unint64_t v15 = (unint64_t)a2[2];
            if ((unint64_t)v16 >= v15)
            {
              uint64_t v18 = ((char *)v16 - (unsigned char *)*a2) >> 3;
              if ((unint64_t)(v18 + 1) >> 61) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = v15 - (void)*a2;
              uint64_t v20 = v19 >> 2;
              if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
                uint64_t v20 = v18 + 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v20;
              }
              if (v21) {
                uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v11, v21);
              }
              else {
                uint64_t v22 = 0;
              }
              long long v23 = (const void **)&v22[8 * v18];
              *long long v23 = *v6;
              uint64_t v17 = v23 + 1;
              uint64_t v25 = (char *)*a2;
              uint64_t v24 = (char *)a2[1];
              if (v24 != *a2)
              {
                do
                {
                  float v26 = (const void *)*((void *)v24 - 1);
                  v24 -= 8;
                  *--long long v23 = v26;
                }
                while (v24 != v25);
                uint64_t v24 = (char *)*a2;
              }
              *a2 = v23;
              a2[1] = v17;
              a2[2] = &v22[8 * v21];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *BOOL v16 = *v6;
              uint64_t v17 = v16 + 1;
            }
            a2[1] = v17;
            goto LABEL_32;
          }
          int v12 = (OZChannelBase *)*v6;
        }
        if ((v12->var7 & 0x1000) != 0 && !OZChannelBase::testFlag(v12, v10))
        {
          int v13 = *v6;
          if (*v6)
          {
            if (!a4) {
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v14 = 0;
            if (!a4) {
              goto LABEL_24;
            }
          }
          if ((v13[57] & 0x20) == 0) {
LABEL_24:
          }
            OZChannelFolder::getAllDescendantsFlattened(v14, a2, a3, 0);
        }
LABEL_32:
        ++v6;
      }
      while (v6 != v5);
    }
  }
}

OZChannelFolder *OZChannelFolder::bake(OZChannelFolder *this, const PCTimeRange *a2, const CMTime *a3)
{
  uint64_t v3 = (uint64_t **)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        uint64_t v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const PCTimeRange *, const CMTime *))(*(void *)v8 + 368))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setExtrapolation(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t **)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        uint64_t v8 = *v4++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 384))(v8, a2, a3);
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::generateKeys(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t **)*((void *)this + 14);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      uint64_t v8 = *v4++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 392))(v8, a2, a3);
    }
    while (v4 != v5);
  }
  return this;
}

OZChannelFolder *OZChannelFolder::simplify(OZChannelFolder *this, const CMTime *a2, const CMTime *a3, const CMTime *a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t **)*((void *)this + 14);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      uint64_t v18 = *v9++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *, const CMTime *, const CMTime *, uint64_t, uint64_t, uint64_t, double))(*(void *)v18 + 376))(v18, a2, a3, a4, a6, a7, a8, a5);
    }
    while (v9 != v10);
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setFoldFlags(OZChannelFolder *this, int a2)
{
  uint64_t v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0) {
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  }
  *((_DWORD *)v3 + 3OZSplineNode::allocOZSpline(this, 0) = a2;
  return this;
}

OZChannelFolder *OZChannelFolder::setFoldFlag(OZChannelFolder *this, int a2)
{
  uint64_t v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0) {
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  }
  *((_DWORD *)v3 + 30) |= a2;
  return this;
}

OZChannelFolder *OZChannelFolder::resetFoldFlag(OZChannelFolder *this, int a2)
{
  uint64_t v3 = this;
  if ((a2 & 0xFF7DDFF0) != 0) {
    this = (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  }
  *((_DWORD *)v3 + 30) &= ~a2;
  return this;
}

BOOL OZChannelFolder::testFoldFlag(OZChannelFolder *this, int a2)
{
  return (*((_DWORD *)this + 30) & a2) != 0;
}

uint64_t OZChannelFolder::resetTimeIndependentFlagIfNeeded(OZChannelFolder *this, int a2, int a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 1);
  if (result) {
    return result;
  }
  if (!a3) {
    goto LABEL_5;
  }
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)result + 704))(result, 0, 1);
LABEL_5:
    if (!a2) {
      return result;
    }
  }
  uint64_t v7 = (uint64_t *)*((void *)this + 14);
  if (v7)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        uint64_t result = *(void *)v8;
        if ((*(unsigned char *)(*(void *)v8 + 57) & 0x10) != 0)
        {
          uint64_t result = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)v10 + 704))(v10, 1, 0);
        }
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t OZChannelFolder::lockFromParent(OZChannelFolder *this, int a2, uint64_t a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, a3);
  uint64_t v7 = (OZChannelBase ***)*((void *)this + 14);
  if (v7)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 != v9)
    {
      uint64_t v10 = result | a2;
      do
      {
        uint64_t result = OZChannelBase::testFlag(*v8, 2);
        if ((result & 1) == 0) {
          uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v8)->var0 + 37))(*v8, v10, a3);
        }
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t OZChannelFolder::lock(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t result = OZChannelBase::lock((OZChannelBase *)this, a2);
  uint64_t v7 = (OZChannelBase ***)*((void *)this + 14);
  if (v7)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    while (v8 != v9)
    {
      uint64_t result = OZChannelBase::testFlag(*v8, 2);
      if ((result & 1) == 0) {
        uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v8)->var0 + 37))(*v8, a2, a3);
      }
      ++v8;
    }
  }
  return result;
}

OZChannelFolder *OZChannelFolder::undoWillReplace(OZChannelFolder *this)
{
  uint64_t v1 = (uint64_t **)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      uint64_t v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::undoDidReplace(OZChannelFolder *this)
{
  uint64_t v1 = (uint64_t **)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      uint64_t v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 360))(v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(OZChannelFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  uint64_t v5 = (OZChannelBase ***)*((void *)this + 14);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    while (v6 != v7)
    {
      uint64_t result = OZChannelBase::testFlag(*v6, 0x20000000000);
      if ((result & 1) == 0) {
        uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t))(*v6)->var0 + 36))(*v6, a2);
      }
      ++v6;
    }
  }
  return result;
}

OZChannelBase *OZChannelFolder::saveStateAsDefault(OZChannelFolder *this)
{
  uint64_t result = OZChannelBase::saveStateAsDefault((OZChannelBase *)this);
  *((_DWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = *((_DWORD *)this + 30) & 0xFF7DDFF0;
  return result;
}

BOOL OZChannelFolder::isStateModified(OZChannelFolder *this)
{
  return (*((void *)this + 7) & 0xFFFFFFFDECA4CF86) != *((void *)this + 8)
      || (*((_DWORD *)this + 30) & 0xFF7DDFF0) != *((_DWORD *)this + 31);
}

OZChannelFolder *OZChannelFolder::setDefaultToCurrentValue(OZChannelFolder *this)
{
  uint64_t v1 = (uint64_t **)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      uint64_t v4 = *v2++;
      this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::saveWhenAtDefaultState(OZChannelFolder *this)
{
  if (OZChannelBase::testFlag((OZChannelBase *)this, 0x100000000)) {
    return 1;
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3[1];
  if (*v3 == v4) {
    return 0;
  }
  uint64_t v5 = *v3 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 - 8) + 144))(*(void *)(v5 - 8));
    if (result) {
      break;
    }
    BOOL v6 = v5 == v4;
    v5 += 8;
  }
  while (!v6);
  return result;
}

unsigned char *OZChannelFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2)
{
  uint64_t result = OZFactory::setNeedsSaving(*((OZFactory **)this + 1), (const OZFactory *)1);
  uint64_t v5 = (uint64_t **)*((void *)this + 14);
  if (v5)
  {
    BOOL v6 = *v5;
    uint64_t v7 = v5[1];
    while (v6 != v7)
    {
      uint64_t v8 = *v6++;
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v8 + 416))(v8, a2, 0);
    }
  }
  return result;
}

unsigned char *non-virtual thunk to'OZChannelFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2)
{
  return OZChannelFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2);
}

uint64_t OZChannelFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  OZChannelBase::writeBody((OZChannelBase *)this, a2, a3);
  uint64_t v10 = *((unsigned int *)this + 30);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFolderScope);
  if (v10)
  {
    if (!(*(unsigned int (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2)
      || (v10 &= 0x7FF8DFF0u, v10))
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 111);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v10);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
  }
  uint64_t v11 = (OZChannelBase ***)*((void *)this + 14);
  if (v11) {
    BOOL v12 = a4 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12 && (*((unsigned char *)this + 123) & 1) == 0)
  {
    int v13 = *v11;
    uint64_t v14 = v11[1];
    while (v13 != v14)
    {
      if ((!OZChannelBase::testFlag(*v13, 8)
         || (*((unsigned int (**)(void))(*v13)->var0 + 18))()
         && (*(unsigned int (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2)
         && !OZChannelBase::testFlag(*v13, 128))
        && ((a5 & 1) != 0
         || ((*((uint64_t (**)(OZChannelBase *, void))(*v13)->var0 + 62))(*v13, 0) & 1) != 0
         || ((*((uint64_t (**)(void))(*v13)->var0 + 19))() & 1) != 0
         || (*((unsigned int (**)(void))(*v13)->var0 + 18))()))
      {
        uint64_t p_var2 = (uint64_t)&(*v13)->var2;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(void *)p_var2 + 16))(p_var2, a2, a3);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(void *)p_var2 + 24))(p_var2, a2, a3, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      ++v13;
    }
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZChannelFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelFolder::calcHashForState(OZChannelFolder *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::calcHashForState((OZChannelBase *)this, a2, a3);
  uint64_t v7 = (uint64_t **)*((void *)this + 14);
  if (v7)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *((void *)this + 7) & 0x8000;
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 16))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 72))(a2, v10);
    uint64_t result = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    while (v8 != v9)
    {
      uint64_t v11 = *v8++;
      uint64_t result = (*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, const CMTime *))(*(void *)v11 + 448))(v11, a2, a3);
    }
  }
  return result;
}

uint64_t OZChannelFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelFolder::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  *(void *)float v28 = 0;
  int v27 = 0;
  double v25 = 0.0;
  unint64_t v26 = 0;
  OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 111)
  {
    if ((*(unsigned int (**)(PCStreamElement *, int *))(*(void *)a3 + 32))(a3, &v27)) {
      *((_DWORD *)this + 3OZSplineNode::allocOZSpline(this, 0) = v27 & 0xFDDDFFFF | *((_DWORD *)this + 30) & 0x2220000;
    }
  }
  else if (v6 == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v28[1]);
    uint64_t v7 = (OZChannelBase ***)*((void *)this + 14);
    if (!v7 || (uint64_t v8 = *v7, v9 = v7[1], v8 == v9))
    {
LABEL_7:
      v28[0] = 0;
      AttributeAsUInt32 = (OZFactories *)PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v28);
      uint64_t Instance = (OZFactories *)OZFactories::getInstance(AttributeAsUInt32);
      int v13 = (const void *)OZFactories::lookupFactory(Instance, v28[0]);
      if (!v13) {
        goto LABEL_24;
      }
      if (!v14) {
        goto LABEL_24;
      }
      unint64_t v15 = v14;
      PCSharedCount::PCSharedCount(v29);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)v29);
      BOOL v16 = (const void *)(*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v15 + 16))(v15, v29, v28[1]);
      uint64_t v10 = v16
      OZChannelFolder::push_back(this, v10);
      PCString::~PCString((PCString *)v29);
      if (!v10)
      {
LABEL_24:
        (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 40))(a2);
        return 1;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *v8;
        if ((*v8)->var3 == v28[1]) {
          break;
        }
        if (++v8 == v9) {
          goto LABEL_7;
        }
      }
    }
    if (PCSerializerReadStream::getAttributeAsUInt64((uint64_t)a2, (uint64_t)a3, 112, (uint64_t)&v26))
    {
      unint64_t v26 = v10->var7 & 0x2080A3898 | v26 & 0xFFFFFFFDF7F5C767;
      OZChannelBase::setFlags(v10, v26);
    }
    if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 115, (uint64_t)&v25))
    {
      if (v17) {
        OZChannel::setDefaultValue(v17, v25);
      }
    }
    unint64_t var1 = (unint64_t)v10->var1;
    *(_OWORD *)&v29[0].var0 = xmmword_1B8378D40;
    if (OZFactory::isKindOfClass(var1, (int32x4_t *)v29))
    {
      PCSharedCount::PCSharedCount(v29);
      if (v19)
      {
        uint64_t v20 = v19;
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(void *)a3 + 96))(a3, 114, v29))
        {
          (*(void (**)(char *, void))(*(void *)v20 + 608))(v20, MEMORY[0x1E4F1FA48]);
          PCString::PCString(&v24, (const PCString *)v29);
          v21.var0 = (__CFString *)&v24;
          OZChannelBlindData::setData((OZChannelBlindData *)v20, v21);
          PCString::~PCString(&v24);
        }
        else
        {
          PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v20 + 16));
          (*(void (**)(char *, PCSerializerReadStream *, PCStreamElement *))(*(void *)v20 + 440))(v20, a2, a3);
        }
      }
      PCString::~PCString((PCString *)v29);
    }
    else
    {
      if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v25))
      {
        if (v22) {
          OZChannel::setInitialValue(v22, v25, 0);
        }
      }
      PCSerializerReadStream::pushHandler(a2, (PCSerializer *)&v10->var2);
    }
  }
  return 1;
}

void sub_1B79EBB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15)
{
}

uint64_t non-virtual thunk to'OZChannelFolder::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

OZChannelFolder *OZChannelFolder::setIsSpline(OZChannelFolder *this, uint64_t a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t))(*v3)->var0 + 60))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setKeyframable(OZChannelFolder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if (this) {
          BOOL v8 = a3 == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (!v8) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t, uint64_t))(*v4)->var0 + 63))(*v4, a2, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t OZChannelFolder::isKeyframable(OZChannelFolder *this)
{
  uint64_t v1 = (OZChannelBase ***)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 64))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::isModified(OZChannelFolder *this, uint64_t a2)
{
  if (a2 && OZChannelBase::testFlag((OZChannelBase *)this, 2)) {
    return 0;
  }
  if ((*((unsigned char *)this + 122) & 2) != 0) {
    return !OZChannelBase::testFlag((OZChannelBase *)this, 0x8000);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4[1];
  if (*v4 == v5) {
    return 0;
  }
  uint64_t v6 = *v4 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 - 8) + 496))(*(void *)(v6 - 8), a2);
    if (result) {
      break;
    }
    BOOL v8 = v6 == v5;
    v6 += 8;
  }
  while (!v8);
  return result;
}

uint64_t OZChannelFolder::isSpline(OZChannelFolder *this)
{
  uint64_t v1 = (OZChannelBase ***)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 61))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::hasKeypoints(OZChannelFolder *this, unsigned int a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  uint64_t v5 = a2;
  while (OZChannelBase::testFlag(*v3, 2)
       || OZChannelBase::testFlag(*v3, v5)
       || ((*((uint64_t (**)(OZChannelBase *, void))(*v3)->var0 + 69))(*v3, 0) & 1) == 0)
  {
    if (++v3 == v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t OZChannelFolder::hasMoreThanOneKeypoint(OZChannelFolder *this)
{
  uint64_t v1 = (OZChannelBase ***)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 70))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::hasFadeHandles(OZChannelFolder *this)
{
  uint64_t v1 = (OZChannelBase ***)*((void *)this + 14);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v1[1];
    while (v2 != v3)
    {
      if (!OZChannelBase::testFlag(*v2, 2)
        && ((*((uint64_t (**)(OZChannelBase *))(*v2)->var0 + 83))(*v2) & 1) != 0)
      {
        return 1;
      }
      ++v2;
    }
  }
  return 0;
}

OZChannelFolder *OZChannelFolder::scaleFadeHandles(OZChannelFolder *this, double a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, double))(*v3)->var0 + 84))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::keyframesWithChannels(uint64_t result, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(OZChannelBase ****)(result + 112);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        uint64_t result = OZChannelBase::testFlag(*v4, 2);
        if ((result & 1) == 0)
        {
          BOOL v8 = *v4;
          long long v9 = a2[1];
          v10[0] = *a2;
          v10[1] = v9;
          v10[2] = a2[2];
          uint64_t result = (*((uint64_t (**)(OZChannelBase *, _OWORD *, uint64_t))v8->var0 + 67))(v8, v10, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

uint64_t OZChannelFolder::hasKeypointAt(OZChannelFolder *this, const CMTime *a2, unsigned int a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  uint64_t v7 = a3;
  while (OZChannelBase::testFlag(*v4, 2)
       || OZChannelBase::testFlag(*v4, v7)
       || ((*((uint64_t (**)(OZChannelBase *, const CMTime *, void))(*v4)->var0 + 71))(*v4, a2, 0) & 1) == 0)
  {
    if (++v4 == v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t OZChannelFolder::allHaveKeypointsAt(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_10:
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    do
    {
      if (!OZChannelBase::testFlag(*v3, 2))
      {
        if (!(*((unsigned int (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 72))(*v3, a2)) {
          goto LABEL_10;
        }
        char v6 = 1;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return v6 & 1;
}

uint64_t OZChannelFolder::hasOnlyOneKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 1;
  }
  unsigned int v6 = 0;
  while (1)
  {
    if (!OZChannelBase::testFlag(*v3, 2))
    {
      v6 += (*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 74))(*v3, a2);
      if (v6 > 1) {
        break;
      }
    }
    if (++v3 == v4) {
      return 1;
    }
  }
  return 0;
}

uint64_t OZChannelFolder::numberOfKeypointsAt(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    if (!OZChannelBase::testFlag(*v3, 2)) {
      uint64_t v6 = (*((unsigned int (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 74))(*v3, a2)
    }
         + v6;
    ++v3;
  }
  while (v3 != v4);
  return v6;
}

OZChannelFolder *OZChannelFolder::addKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 75))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::deleteKeypoints(OZChannelFolder *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, const CMTime *))(*v4)->var0
        }
                                     + 85))(*v4, a2, a3);
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::deleteKeypointAt(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 76))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t OZChannelFolder::moveKeypointTo@<X0>(OZChannelFolder *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, CMTime *a4@<X8>)
{
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  AncestorRootBase = OZChannelBase::getAncestorRootBase((OZChannelBase *)this);
  if (AncestorRootBase) {
    (*((void (**)(CMTime *__return_ptr))AncestorRootBase->var0 + 110))(&v19);
  }
  CMTime v18 = *a2;
  *(_OWORD *)&a4->CMTimeValue value = *(_OWORD *)&a3->value;
  a4->CMTimeEpoch epoch = a3->epoch;
  CMTime time1 = *a2;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    CMTime v17 = v18;
    uint64_t result = (*(uint64_t (**)(OZChannelFolder *, CMTime *, void))(*(void *)this + 624))(this, &v17, 0);
    if (!result) {
      goto LABEL_10;
    }
    CMTime lhs = v17;
    CMTime rhs = v19;
    CMTimeAdd(&time1, &lhs, &rhs);
    CMTime v17 = time1;
    CMTime time2 = *a4;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((int)result < 1) {
      goto LABEL_10;
    }
LABEL_9:
    *a4 = v17;
    goto LABEL_10;
  }
  CMTime v17 = v18;
  uint64_t result = (*(uint64_t (**)(OZChannelFolder *, CMTime *, void))(*(void *)this + 632))(this, &v17, 0);
  if (result)
  {
    CMTime v14 = v17;
    CMTime v13 = v19;
    CMTimeSubtract(&time1, &v14, &v13);
    CMTime v17 = time1;
    CMTime time2 = *a4;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
LABEL_10:
  uint64_t v10 = (OZChannelBase ***)*((void *)this + 14);
  if (v10)
  {
    uint64_t v11 = *v10;
    BOOL v12 = v10[1];
    while (v11 != v12)
    {
      uint64_t result = OZChannelBase::testFlag(*v11, 2);
      if ((result & 1) == 0) {
        uint64_t result = (uint64_t)(*((void *(**)(CMTime *__return_ptr))(*v11)->var0 + 77))(&time1);
      }
      ++v11;
    }
  }
  return result;
}

uint64_t OZChannelFolder::previousKeypoint(OZChannelFolder *this, CMTime *a2, unsigned int a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (!v3) {
    return 0;
  }
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v10.CMTimeValue value = *MEMORY[0x1E4F1FA08];
  v10.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  char v7 = 0;
  uint64_t v8 = a3;
  do
  {
    if (!OZChannelBase::testFlag(*v4, 2) && !OZChannelBase::testFlag(*v4, v8))
    {
      CMTime v11 = *a2;
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, void))(*v4)->var0 + 78))(*v4, &v11, 0))
      {
        CMTime time1 = v10;
        CMTime time2 = v11;
        if (CMTimeCompare(&time1, &time2) < 0) {
          CMTime v10 = v11;
        }
        char v7 = 1;
      }
    }
    ++v4;
  }
  while (v4 != v5);
  if ((v7 & 1) == 0) {
    return 0;
  }
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&v10.value;
  a2->CMTimeEpoch epoch = v10.epoch;
  return 1;
}

uint64_t OZChannelFolder::nextKeypoint(OZChannelFolder *this, CMTime *a2, unsigned int a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (!v3) {
    return 0;
  }
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v10.CMTimeValue value = *MEMORY[0x1E4F1FA10];
  v10.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  char v7 = 0;
  uint64_t v8 = a3;
  do
  {
    if (!OZChannelBase::testFlag(*v4, 2) && !OZChannelBase::testFlag(*v4, v8))
    {
      CMTime v11 = *a2;
      if ((*((unsigned int (**)(OZChannelBase *, CMTime *, void))(*v4)->var0 + 79))(*v4, &v11, 0))
      {
        CMTime time1 = v10;
        CMTime time2 = v11;
        if (CMTimeCompare(&time1, &time2) >= 1) {
          CMTime v10 = v11;
        }
        char v7 = 1;
      }
    }
    ++v4;
  }
  while (v4 != v5);
  if ((v7 & 1) == 0) {
    return 0;
  }
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&v10.value;
  a2->CMTimeEpoch epoch = v10.epoch;
  return 1;
}

OZChannelFolder *OZChannelFolder::retimeKeypoints(OZChannelFolder *this, double a2, const CMTime *a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 0x20000);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, double))(*v4)->var0 + 80))(*v4, a3, a2);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::setInterpolation(OZChannelFolder *this, uint64_t a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, uint64_t))(*v3)->var0 + 82))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::adjustToFrameDuration(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (uint64_t **)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        uint64_t v6 = *v3++;
        this = (OZChannelFolder *)(*(uint64_t (**)(uint64_t, const CMTime *))(*(void *)v6 + 648))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return this;
}

__CFString *OZChannelFolder::getObjCWrapperName(OZChannelFolder *this)
{
  return @"CHChannelFolder";
}

OZChannelFolder *OZChannelFolder::beginPlayback(OZChannelFolder *this, const CMTime *a2, uint64_t a3, uint64_t a4, const CMTime *a5)
{
  uint64_t v5 = (OZChannelBase ***)*((void *)this + 14);
  if (v5)
  {
    uint64_t v6 = *v5;
    char v7 = v5[1];
    if (*v5 != v7)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v6, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *, uint64_t, uint64_t, const CMTime *))(*v6)->var0
        }
                                     + 20))(*v6, a2, a3, a4, a5);
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::endPlayback(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 21))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::beginRecording(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 22))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::endRecording(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 23))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::updateCurrentRecordingTime(OZChannelFolder *this, const CMTime *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, const CMTime *))(*v3)->var0 + 24))(*v3, a2);
        }
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::registerRecordingCallback(OZChannelFolder *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3, uint64_t a4)
{
  uint64_t v4 = (OZChannelBase ***)*((void *)this + 14);
  if (v4)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (*v4 != v6)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v5, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, void (*)(OZChannelBase *, const CMTime *, void *), void *, uint64_t))(*v5)->var0
        }
                                     + 25))(*v5, a2, a3, a4);
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return this;
}

OZChannelFolder *OZChannelFolder::unregisterRecordingCallback(OZChannelFolder *this, void (*a2)(OZChannelBase *, const CMTime *, void *), void *a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        this = (OZChannelFolder *)OZChannelBase::testFlag(*v4, 2);
        if ((this & 1) == 0) {
          this = (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *, void, void *))(*v4)->var0 + 26))(*v4, a2, a3);
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t OZChannelFolder::hasDescendant(OZChannelFolder *this, const OZChannelBase *a2)
{
  uint64_t v2 = (const OZChannelBase ***)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = *v3;
    if (*v3 == a2) {
      break;
    }
    if ((v6->var7 & 0x1000) != 0)
    {
      if (OZChannelFolder::hasDescendant(v7, a2)) {
        break;
      }
    }
    if (++v3 == v4) {
      return 0;
    }
  }
  return 1;
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(void *)char v7 = &unk_1F1109E98;
  *((void *)v7 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A170;
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v22, @"Channel Gradient Folder RGB");
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v22, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v22, @"Channel Gradient Folder Alpha");
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v22, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v22, @"Channel Gamma");
  uint64_t Instance = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v22, (OZChannelFolder *)this, 0x50u, 138, Instance, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v22, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, @"Channel Color Space");
  uint64_t v20 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v22, &v21, (OZChannelFolder *)this, 0xBu, 0x82u, v20, 0);
  PCString::~PCString(&v21);
  PCString::~PCString(&v22);
  *((_DWORD *)this + 19OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(void *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
}

void sub_1B79ED488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradient::resetToDefaultStandard(OZChannelGradient *this)
{
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v5 = &unk_1F1109E98;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A170;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v20, @"Channel Gradient Folder RGB");
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v20, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v20);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v20, @"Channel Gradient Folder Alpha");
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v20, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v20);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v20, @"Channel Gamma");
  uint64_t Instance = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v11);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v20, (OZChannelFolder *)this, 0x50u, 138, Instance, 0);
  PCString::~PCString(&v20);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v20, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v19, @"Channel Color Space");
  CMTime v18 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v17);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v20, &v19, (OZChannelFolder *)this, 0xBu, 0x82u, v18, 0);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  *((_DWORD *)this + 19OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(void *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
}

void sub_1B79ED8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradient_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F1109E98;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A170;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v26, @"Channel Gradient Folder RGB");
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128), &v26, (OZChannelFolder *)this, 1u, 0);
  PCString::~PCString(&v26);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v26, @"Channel Gradient Folder Alpha");
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), &v26, (OZChannelFolder *)this, 2u, 0);
  PCString::~PCString(&v26);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v26, @"Channel Gamma");
  CMTime v18 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(v17);
  OZChannelDouble::OZChannelDouble((OZChannelGradient *)((char *)this + 384), &v26, (OZChannelFolder *)this, 0x50u, 138, v18, 0);
  PCString::~PCString(&v26);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v26, @"Channel Color Space Enum");
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v25, @"Channel Color Space");
  PCString v24 = (OZChannelImpl *)OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(v23);
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), &v26, &v25, (OZChannelFolder *)this, 0xBu, 0x82u, v24, 0);
  PCString::~PCString(&v25);
  PCString::~PCString(&v26);
  *((_DWORD *)this + 19OZSpline::reparametrize((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 796) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  (*(void (**)(OZChannelGradient *))(*(void *)this + 128))(this);
  OZChannelGradient::resetToDefaultStandard(this);
}

void sub_1B79EDC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient(OZChannelGradient *this, const OZChannelGradient *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  void *v5 = &unk_1F1109E98;
  v5[2] = &unk_1F110A170;
  OZChannelGradientRGBFolder::OZChannelGradientRGBFolder((OZChannelGradientRGBFolder *)(v5 + 16), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256), (const OZChannelBase *)((char *)a2 + 256), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 384), (const OZChannelBase *)((char *)a2 + 384), (OZChannelFolder *)this);
  *((void *)this + 4OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1100CF0;
  *((void *)this + 5OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZChannelGradient *)((char *)this + 536), (const OZChannelGradient *)((char *)a2 + 536), (OZChannelFolder *)this);
  *((_DWORD *)this + 19OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a2 + 198);
  *((unsigned char *)this + 796) = *((unsigned char *)a2 + 796);
}

void sub_1B79EDE04(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(v3);
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradient::~OZChannelGradient(OZChannelGradient *this)
{
  *(void *)this = &unk_1F1109E98;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A170;
  OZChannelEnum::~OZChannelEnum((OZChannelGradient *)((char *)this + 536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 384));
  OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder((OZChannelGradient *)((char *)this + 256));
  OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder((OZChannelGradient *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZChannelGradient::~OZChannelGradient(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradient::~OZChannelGradient(OZChannelGradient *this)
{
}

{
  uint64_t vars8;

  OZChannelGradient::~OZChannelGradient((OZChannelGradient *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradient::resetToDefault(OZChannelGradient *this, uint64_t a2)
{
  OZChannelFolder::resetToDefault((OZChannelFolder *)this, a2);
  switch(*((_DWORD *)this + 198))
  {
    case 0:
      OZChannelGradient::resetToDefaultStandard(this);
    case 1:
      OZChannelGradientRGBFolder::addSample((OZChannelGradient *)((char *)this + 128), 1.0, 1.0, 1.0, 1.0, 0.5);
    case 2:
      OZChannelGradientRGBFolder::addSample((OZChannelGradient *)((char *)this + 128), 0.0, 0.0, 0.0, 1.0, 0.5);
    case 3:
      OZChannelGradientRGBFolder::addSample((OZChannelGradient *)((char *)this + 128), 0.0, 0.0, 0.0, 1.0, 0.5);
    default:
      OZChannelGradientRGBFolder::addSample((OZChannelGradient *)((char *)this + 128), 1.0, 0.0, 0.0, 0.0, 0.5);
  }
}

void OZChannelGradient::clone(OZChannelGradient *this)
{
}

void sub_1B79EE1D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4072D3B705);
  _Unwind_Resume(a1);
}

void OZChannelGradient::copy(OZChannelGradient *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelVaryingFolder::copy((OZChannelFolder *)((char *)this + 128), (const OZChannelBase *)((char *)v4 + 128));
  }
  OZChannelVaryingFolder::copy((OZChannelFolder *)((char *)this + 256), (const OZChannelBase *)((char *)v4 + 256));
  OZChannel::copy((OZChannel *)((char *)this + 384), (const OZChannelBase *)((char *)v4 + 384), a3);

  OZChannelEnum::copy((PCString *)this + 67, (const OZChannelBase *)((char *)v4 + 536), a3);
}

void *OZChannelGradient::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  OZChannelBase::assign(this, a2);
  uint64_t v5 = (const OZChannelBase ***)result[14];
  uint64_t v6 = *v5;
  char v7 = v5[1];
  while (v6 != v7)
  {
    uint64_t result = OZChannelFolder::findMatchingDescendant((OZChannelFolder *)this, *v6);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *, const OZChannelBase *))(*result + 256))(result, *v6);
    }
    ++v6;
  }
  return result;
}

uint64_t OZChannelGradient::allowsAssignment(OZChannelBase *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = OZChannelBase::allowsAssignment(this, (const OZChannelBase *)result);
    if (result)
    {
      var0 = this[1].var0;
      if (var0 && (uint64_t v6 = *(void **)(v4 + 112)) != 0)
      {
        char v7 = (char *)*var0;
        uint64_t v8 = (char *)var0[1];
        uint64_t v9 = v6[1];
        if (*v6 == v9 || v7 == v8)
        {
          return 1;
        }
        else
        {
          CMTime v11 = v7 + 8;
          uint64_t v12 = *v6 + 8;
          do
          {
            uint64_t result = (*(uint64_t (**)(void, void))(**((void **)v11 - 1) + 264))(*((void *)v11 - 1), *(void *)(v12 - 8));
            if (result) {
              BOOL v13 = v12 == v9;
            }
            else {
              BOOL v13 = 1;
            }
            BOOL v14 = v13 || v11 == v8;
            v11 += 8;
            v12 += 8;
          }
          while (!v14);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

OZChannelFolder *OZChannelGradient::setValue(OZChannelGradient *this, const OZChannelBase *lpsrc)
{
  if (v4)
  {
    uint64_t v5 = v4;
    OZChannelFolder::operator=((uint64_t)this);
    OZChannelFolder::operator=((uint64_t)this + 128);
    OZChannelFolder::operator=((uint64_t)this + 256);
    OZChannelBase::operator=((uint64_t)this + 384, (uint64_t)(v5 + 384));
    uint64_t result = (OZChannelFolder *)OZChannelBase::operator=((uint64_t)this + 536, (uint64_t)(v5 + 536));
    char v7 = v5[796];
    *((_DWORD *)this + 19OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)v5 + 198);
    *((unsigned char *)this + 796) = v7;
  }
  else
  {
    return OZChannelFolder::setValue((OZChannelFolder *)this, lpsrc);
  }
  return result;
}

OZFactories *OZChannelGradient::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t result = (OZFactories *)OZChannelFolder::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    uint64_t Instance = OZFactories::getInstance(result);
    long long v7 = xmmword_1B8378BB0;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return (OZFactories *)OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

OZFactories *non-virtual thunk to'OZChannelGradient::markFactoriesForSerialization(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::getFactoryForSerialization(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3)
{
  if (!a3) {
    return *((void *)this + 1);
  }
  uint64_t Instance = OZFactories::getInstance(this);
  long long v5 = xmmword_1B8378BB0;
  return OZFactories::findFactory(Instance, (unsigned int *)&v5);
}

uint64_t OZChannelGradient::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  if (a3)
  {
    uint64_t Instance = OZFactories::getInstance((OZFactories *)this);
    long long v12 = xmmword_1B8378BB0;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v12);
    unint64_t var1 = this->var1;
    CMTime v10 = (const OZFactory *)OZFactory::fileRefID(Factory, v9);
    OZFactory::setFileRefID(var1, v10);
  }
  return OZChannelBase::writeHeader(this, a2, a3);
}

uint64_t non-virtual thunk to'OZChannelGradient::writeHeader(OZChannelGradient *this, OZFactory *a2, int a3)
{
  return OZChannelGradient::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  char v7 = a3;
  OZChannelBase::writeBody(this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFolderScope);
  uint64_t var1_low = LODWORD(this[1].var1);
  if (!(*(unsigned int (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2)
    || (uint64_t var1_low = var1_low & 0xFFF8DFF0, var1_low))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 111);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, var1_low);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  var0 = this[1].var0;
  if (var0 && a4)
  {
    BOOL v13 = (OZChannelBase **)*var0;
    long long v12 = (OZChannelBase **)var0[1];
    if (v7)
    {
      if (*var0 != v12)
      {
        BOOL v14 = v13 + 1;
        char v15 = 1;
        do
        {
          if (!OZChannelBase::testFlag(*(v14 - 1), 8))
          {
            BOOL v16 = *(v14 - 1);
            uint64_t v17 = v16[2];
            v16 += 2;
            (*(void (**)(void *, PCSerializerWriteStream *, uint64_t))(v17 + 16))(v16, a2, 1);
            (*(void (**)(void *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*v16 + 24))(v16, a2, 1, 1, a5);
            (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          }
          char v18 = (v14++ != v12) & v15;
          char v15 = 0;
        }
        while ((v18 & 1) != 0);
      }
      goto LABEL_30;
    }
    if (*var0 == v12) {
      goto LABEL_30;
    }
    do
    {
      if (!OZChannelBase::testFlag(*v13, 8))
      {
        PCString v19 = (OZChannelGradient *)*v13;
        if (*v13 == (OZChannelBase *)&this[1].var2 || v19 == (OZChannelGradient *)&this[2].var4)
        {
          if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) != 0
            || ((*((uint64_t (**)(OZChannelBase *, void))this->var0 + 62))(this, 0) & 1) != 0)
          {
LABEL_27:
            PCString v19 = (OZChannelGradient *)*v13;
LABEL_28:
            uint64_t v24 = *((void *)v19 + 2);
            long long v23 = (char *)v19 + 16;
            (*(void (**)(char *, PCSerializerWriteStream *, void))(v24 + 16))(v23, a2, 0);
            (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v23 + 24))(v23, a2, 0, 1, a5);
            (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
            goto LABEL_29;
          }
          PCString v19 = (OZChannelGradient *)*v13;
        }
        if (a5) {
          goto LABEL_28;
        }
        char v21 = (*(uint64_t (**)(OZChannelGradient *, void))(*(void *)v19 + 496))(v19, 0);
        PCString v19 = (OZChannelGradient *)*v13;
        if (v21) {
          goto LABEL_28;
        }
        char v22 = (*(uint64_t (**)(OZChannelBase *))(*(void *)v19 + 152))(*v13);
        PCString v19 = (OZChannelGradient *)*v13;
        if (v22) {
          goto LABEL_28;
        }
        if ((*(unsigned int (**)(OZChannelBase *))(*(void *)v19 + 144))(*v13)) {
          goto LABEL_27;
        }
      }
LABEL_29:
      ++v13;
    }
    while (v13 != v12);
  }
LABEL_30:

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZChannelGradient::writeBody(OZChannelGradient *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  return OZChannelGradient::writeBody((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5);
}

void OZChannelGradient::parseBegin(OZChannelGradient *this, PCSerializerReadStream *a2)
{
}

void non-virtual thunk to'OZChannelGradient::parseBegin(OZChannelGradient *this, PCSerializerReadStream *a2)
{
}

uint64_t non-virtual thunk to'OZChannelGradient::parseElement(OZChannelGradient *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelGradient::parseEnd(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 128));
  OZChannelGradientFolder::sortAndRename((OZChannelGradient *)((char *)this + 256));
  if (*((_DWORD *)a2 + 26) <= 3u)
  {
    int v6 = OZChannelBase::setRangeName((OZChannelBase *)2, v5);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], (double)v6, 0);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 384), MEMORY[0x1E4F1FA48], 0.0);
  if (v8 == 0.0 || v8 == 1.0)
  {
    int v10 = OZChannelBase::setRangeName((OZChannelBase *)3, v7);
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], (double)v10, 0);
  }
  return v4;
}

uint64_t non-virtual thunk to'OZChannelGradient::parseEnd(OZChannelGradient *this, PCSerializerReadStream *a2)
{
  return OZChannelGradient::parseEnd((OZChannelGradient *)((char *)this - 16), a2);
}

void OZChannelGradient::getColor(uint64_t **this, const CMTime *a2, double a3, PCColor *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v32[0] = 0;
  v32[1] = 0;
  v30[1] = 0;
  double v31 = (uint64_t *)v32;
  float v29 = (uint64_t *)v30;
  v30[0] = 0;
  double v8 = (char *)(this + 16);
  OZChannelGradientRGBFolder::getLookup(this + 16, a2, &v31);
  OZChannelGradientAlphaFolder::getLookup(this + 32, a2, &v29);
  OZChannelGradientRGBFolder::getARGBFromLookup(a3, v14, v15, v16, (uint64_t)v8, (uint64_t)v33, (uint64_t)&v31, v9, v10, v11, v12, v13);
  OZChannelGradientAlphaFolder::getARGBFromLookup(a3, v22, v23, v24, (uint64_t)(this + 32), v33, (uint64_t)&v29, v17, v18, v19, v20, v21);
  LODWORD(a3) = v33[2];
  float v25 = *(float *)&v33[3];
  float v26 = *(float *)v33;
  float v27 = *(float *)&v33[1];
  ColorSpace = (CGColorSpace *)OZChannelGradient::getColorSpace((OZChannelGradient *)this);
  PCColor::setRGBA(a4, v27, *(float *)&a3, v25, v26, ColorSpace);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v31, v32[0]);
}

void sub_1B79EED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

uint64_t OZChannelGradient::getColorSpace(OZChannelGradient *this)
{
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v2 = (CGColorSpace **)PCColorSpaceCache::intToColorSpaceID(ValueAsInt, 3u);

  return PCColorSpaceCache::getCGColorSpaceByID(v2);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, unsigned char *a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
  int v14 = 4 * a5;
  std::vector<float>::vector(__p, 4 * a5);
  int8x16_t v15 = (float *)__p[0];
  OZChannelGradient::getGradient(a1, a2, 0, a3, (uint64_t)__p[0], a5, a6, a7);
  for (; v14; --v14)
  {
    float v16 = *v15++;
    float v17 = v16;
    if (v16 <= 1.0) {
      float v18 = v17;
    }
    else {
      float v18 = 1.0;
    }
    if (v17 >= 0.0) {
      float v19 = v18;
    }
    else {
      float v19 = 0.0;
    }
    *a4++ = vcvtmd_s64_f64(v19 * 255.0 + 0.5 + 0.0000001);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B79EEE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, int a3, CGColorSpace *a4, uint64_t a5, unsigned int a6, int a7, PCToneMapMethod *a8)
{
  v48[0] = 0;
  v48[1] = 0;
  unint64_t v47 = (uint64_t *)v48;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = (uint64_t *)v46;
  uint64_t v14 = (uint64_t)(a1 + 16);
  OZChannelGradientRGBFolder::getLookup(a1 + 16, a2, &v47);
  OZChannelGradientAlphaFolder::getLookup(a1 + 32, a2, &v45);
  std::vector<float>::vector(__p, 4 * a6);
  if (a6)
  {
    unsigned int v23 = 0;
    uint64_t v24 = 0;
    v20.i64[0] = 1.0;
    double v25 = 1.0 / (double)(a6 - 1);
    do
    {
      OZChannelGradientRGBFolder::getARGBFromLookup(v25 * (double)v23, v20, v21, v22, v14, (uint64_t)__p[0] + 4 * (v24 & 0xFFFFFFFC), (uint64_t)&v47, v15, v16, v17, v18, v19);
      OZChannelGradientAlphaFolder::getARGBFromLookup(v25 * (double)v23, v31, v32, v33, (uint64_t)(a1 + 32), (_DWORD *)__p[0] + (v24 & 0xFFFFFFFC), (uint64_t)&v45, v26, v27, v28, v29, v30);
      v24 += 4;
      ++v23;
    }
    while (4 * a6 != v24);
  }
  ColorSpace = (CGColorSpace *)OZChannelGradient::getColorSpace((OZChannelGradient *)a1);
  PCGetCachedExtendedRangeColorSpace(ColorSpace, &v43);
  PCGetCachedExtendedRangeColorSpace(a4, &v42);
  v41[0] = a6;
  v41[1] = __p[0];
  v41[2] = 4;
  v41[3] = v43;
  v41[4] = 1;
  if (a3) {
    int v35 = 2;
  }
  else {
    int v35 = 1;
  }
  v38[0] = a6;
  v38[1] = a5;
  v38[2] = 4;
  v38[3] = v42;
  int v39 = v35;
  int v40 = a7;
  PCColorUtil::transformColorWithDynamicRange((uint64_t)v41, (uint64_t)v38, a8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v42);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v43);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v45, v46[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v47, v48[0]);
}

void sub_1B79EF074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CGColorSpace *a23,CGColorSpace *a24,void *__p,uint64_t a26,uint64_t a27,char a28,void *a29)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a23);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a24);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a28, a29);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v29 - 128, *(void **)(v29 - 120));
  _Unwind_Resume(a1);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, _WORD *a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
  int v14 = 4 * a5;
  std::vector<float>::vector(__p, 4 * a5);
  int8x16_t v15 = (float *)__p[0];
  OZChannelGradient::getGradient(a1, a2, 0, a3, (uint64_t)__p[0], a5, a6, a7);
  for (; v14; --v14)
  {
    float v16 = *v15++;
    float v17 = v16;
    if (v16 <= 1.0) {
      float v18 = v17;
    }
    else {
      float v18 = 1.0;
    }
    if (v17 >= 0.0) {
      float v19 = v18;
    }
    else {
      float v19 = 0.0;
    }
    *a4++ = vcvtmd_s64_f64(v19 * 65535.0 + 0.5 + 0.0000001);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B79EF1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelGradient::getGradient(uint64_t **a1, const CMTime *a2, CGColorSpace *a3, uint64_t a4, unsigned int a5, int a6, PCToneMapMethod *a7)
{
}

void OZChannelGradient::getGradientHash(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v1;
  float v16 = v15;
  v20[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v20);
  (*(void (**)(uint64_t, int8x8_t *, uint64_t))(*(void *)v14 + 448))(v14, v20, v13);
  PCHashWriteStream::writeValue(v20, v11);
  PCHashWriteStream::writeValue(v20, v7);
  int v18 = PCColorSpaceCache::identifyColorSpace(v9, v17);
  PCHashWriteStream::writeValue(v20, v18);
  PCHashWriteStream::writeValue(v20, v5);
  int Size = PVPerfStats::FrameStats::GetSize(v3);
  PCHashWriteStream::writeValue(v20, Size);
  *float v16 = *(_OWORD *)PCHashWriteStream::getHash(v20)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v20);
}

void sub_1B79EF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

__CFString *OZChannelGradient::getObjCWrapperName(OZChannelGradient *this)
{
  return @"CHChannelGradient";
}

uint64_t OZChannelGradient::isModified(OZChannelBase *this, uint64_t a2)
{
  if (a2 && OZChannelBase::testFlag(this, 2)) {
    return 0;
  }
  var0 = this[1].var0;
  if (!var0 || (int v6 = (OZChannelBase **)*var0, v7 = (OZChannelBase **)var0[1], *var0 == v7))
  {
LABEL_12:
    if (!LODWORD(this[7].var1))
    {
      var2 = this[2].var2;
      if (var2)
      {
        int v11 = (const void **)*var2;
        if (((*((void *)this[2].var2 + 1) - (void)v11) & 0x7FFFFFFF8) == 0x10)
        {
          uint64_t v12 = this[3].var4.var0;
          if (v12)
          {
            if (((v12->info - (unint64_t)v12->isa) & 0x7FFFFFFF8) == 8)
            {
              uint64_t v13 = *v11
              if (((*(uint64_t (**)(char *, uint64_t))(*(void *)v13 + 496))(v13, a2) & 1) == 0
                && OZChannel::getValueAsInt((OZChannel *)(v13 + 432), MEMORY[0x1E4F1FA48], 0.0) == 2)
              {
                OZChannel::getValueAsDouble((OZChannel *)(v13 + 128), MEMORY[0x1E4F1FA48], 0.0);
                if (fabs(v14) < 0.0000001)
                {
                  OZChannel::getValueAsDouble((OZChannel *)(v13 + 280), MEMORY[0x1E4F1FA48], 0.0);
                  if (fabs(v15 + -0.5) < 0.0000001)
                  {
                    OZChannel::getValueAsDouble((OZChannel *)(v13 + 824), MEMORY[0x1E4F1FA48], 0.0);
                    if (fabs(v16 + -0.64) < 0.0000001)
                    {
                      OZChannel::getValueAsDouble((OZChannel *)(v13 + 976), MEMORY[0x1E4F1FA48], 0.0);
                      if (fabs(v17 + -0.68) < 0.0000001)
                      {
                        OZChannel::getValueAsDouble((OZChannel *)(v13 + 1128), MEMORY[0x1E4F1FA48], 0.0);
                        if (fabs(v18 + -0.77) < 0.0000001 && *((_DWORD *)v13 + 6) == 1)
                        {
                          float v19 = (const void *)*((void *)*this[2].var2 + 1);
                          int8x16_t v20 = v19
                          if (((*(uint64_t (**)(char *, uint64_t))(*(void *)v20 + 496))(v20, a2) & 1) == 0
                            && OZChannel::getValueAsInt((OZChannel *)(v20 + 432), MEMORY[0x1E4F1FA48], 0.0) == 2)
                          {
                            OZChannel::getValueAsDouble((OZChannel *)(v20 + 128), MEMORY[0x1E4F1FA48], 0.0);
                            if (fabs(v21 + -1.0) < 0.0000001)
                            {
                              OZChannel::getValueAsDouble((OZChannel *)(v20 + 280), MEMORY[0x1E4F1FA48], 0.0);
                              if (fabs(v22 + -0.5) < 0.0000001)
                              {
                                OZChannel::getValueAsDouble((OZChannel *)(v20 + 824), MEMORY[0x1E4F1FA48], 0.0);
                                if (fabs(v23 + -0.21) < 0.0000001)
                                {
                                  OZChannel::getValueAsDouble((OZChannel *)(v20 + 976), MEMORY[0x1E4F1FA48], 0.0);
                                  if (fabs(v24 + -0.43) < 0.0000001)
                                  {
                                    OZChannel::getValueAsDouble((OZChannel *)(v20 + 1128), MEMORY[0x1E4F1FA48], 0.0);
                                    if (fabs(v25 + -0.75) < 0.0000001 && *((_DWORD *)v20 + 6) == 2)
                                    {
                                      float v26 = *(const void **)this[3].var4.var0->isa;
                                      uint64_t v27 = v26
                                      if (((*(uint64_t (**)(char *, uint64_t))(*(void *)v27 + 496))(v27, a2) & 1) == 0&& OZChannel::getValueAsInt((OZChannel *)(v27 + 432), MEMORY[0x1E4F1FA48], 0.0) == 2)
                                      {
                                        OZChannel::getValueAsDouble((OZChannel *)(v27 + 128), MEMORY[0x1E4F1FA48], 0.0);
                                        if (fabs(v28) < 0.0000001)
                                        {
                                          OZChannel::getValueAsDouble((OZChannel *)(v27 + 280), MEMORY[0x1E4F1FA48], 0.0);
                                          if (fabs(v29 + -0.5) < 0.0000001)
                                          {
                                            OZChannel::getValueAsDouble((OZChannel *)(v27 + 688), MEMORY[0x1E4F1FA48], 0.0);
                                            if (fabs(v30 + -1.0) < 0.0000001 && *((_DWORD *)v27 + 6) == 1) {
                                              return 0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      double v8 = *v6;
      BOOL v9 = *v6 == (OZChannelBase *)&this[1].var2 || v8 == (OZChannelBase *)&this[2].var4;
      if (!v9 && ((*((uint64_t (**)(OZChannelBase *, uint64_t))v8->var0 + 62))(v8, a2) & 1) != 0) {
        break;
      }
      if (++v6 == v7) {
        goto LABEL_12;
      }
    }
  }
  return 1;
}

uint64_t OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(OZChannelGradient::OZChannelGradient_gammaImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::OZChannelGradient_gammaImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::OZChannelGradient_gammaImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradient::OZChannelGradient_gammaImpl::_OZChannelGradient_gamma;
}

void std::__call_once_param<std::tuple<OZChannelGradient::OZChannelGradient_gammaImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelGradient::OZChannelGradient_gammaImpl::_OZChannelGradient_gamma) {
    operator new();
  }
}

void sub_1B79EF988(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient_gammaImpl::OZChannelGradient_gammaImpl(OZChannelGradient::OZChannelGradient_gammaImpl *this)
{
}

void sub_1B79EFA70(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::OZChannelGradient_colorSpaceIDImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::OZChannelGradient_colorSpaceIDImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::_OZChannelGradient_colorSpaceID;
}

void std::__call_once_param<std::tuple<OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::_OZChannelGradient_colorSpaceID) {
    operator new();
  }
}

void sub_1B79EFB4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelGradient::OZChannelGradient_colorSpaceIDImpl::OZChannelGradient_colorSpaceIDImpl(OZChannelGradient::OZChannelGradient_colorSpaceIDImpl *this, const PCString *a2)
{
  char v2 = (OZChannelEnum *)OZChannelBase::setRangeName((OZChannelBase *)3, a2);
  OZChannelEnum::createOZChannelEnumCurve(v2, (double)(int)v2);
}

void sub_1B79EFC34(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
}

void sub_1B79EFD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B79EFE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientExtras_Factory::getInstance(this);
  OZChannelGradient::OZChannelGradient(this, Instance, a2, a3, a4, a5);
}

void sub_1B79EFF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannelGradient::~OZChannelGradient(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras(OZChannelGradientExtras *this, const OZChannelGradientExtras *a2, OZChannelFolder *a3)
{
  OZChannelGradient::OZChannelGradient(this, a2, a3);
  void *v5 = &unk_1F110A2D0;
  v5[2] = &unk_1F110A5A8;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 100), (const OZChannelGradientExtras *)((char *)a2 + 800), (OZChannelFolder *)this);
}

void sub_1B79F0044(_Unwind_Exception *a1)
{
  OZChannelGradient::~OZChannelGradient(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::~OZChannelGradientExtras(OZChannelGradientExtras *this)
{
  *(void *)this = &unk_1F110A2D0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A5A8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));

  OZChannelGradient::~OZChannelGradient(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110A2D0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A5A8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));

  OZChannelGradient::~OZChannelGradient(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110A2D0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A5A8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 800));
  OZChannelGradient::~OZChannelGradient(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientExtras::~OZChannelGradientExtras(OZChannelGradientExtras *this)
{
  uint64_t v1 = (OZChannelGradientExtras *)((char *)this - 16);
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110A2D0;
  *(void *)this = &unk_1F110A5A8;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientExtras *)((char *)this + 784));

  OZChannelGradient::~OZChannelGradient(v1);
}

{
  OZChannelGradientExtras::~OZChannelGradientExtras((OZChannelGradientExtras *)((char *)this - 16));
}

void OZChannelGradientExtras::clone(OZChannelGradientExtras *this)
{
}

void sub_1B79F02A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409FA7E95DLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  OZChannelGradient::copy((OZChannelGradient *)this, a2, a3);
  if (a2) {
  else
  }
    int v6 = 0;

  OZChannelEnum::copy(this + 100, (const OZChannelBase *)(v6 + 800), a3);
}

__CFString *OZChannelGradientExtras::getObjCWrapperName(OZChannelGradientExtras *this)
{
  return @"CHChannelGradientExtras";
}

uint64_t OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::OZChannelGradientExtras_gradientTypeImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::OZChannelGradientExtras_gradientTypeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::_OZChannelGradientExtras_gradientType;
}

void std::__call_once_param<std::tuple<OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::_OZChannelGradientExtras_gradientType) {
    operator new();
  }
}

void sub_1B79F042C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl::OZChannelGradientExtras_gradientTypeImpl(OZChannelGradientExtras::OZChannelGradientExtras_gradientTypeImpl *this)
{
}

void sub_1B79F0500(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::OZChannelGradientFolder(OZChannelGradientFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = &unk_1F110A690;
  *(void *)(v6 + 16) = &unk_1F110A990;
  *(void *)(v6 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B79F0598(_Unwind_Exception *a1)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientFolder::OZChannelGradientFolder(OZChannelGradientFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F110A690;
  *(void *)(v4 + 16) = &unk_1F110A990;
  *(void *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B79F0620(_Unwind_Exception *a1)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelGradientFolder::cloneSample(OZChannelFolder *this, int a2)
{
  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(this, a2);
  if (Descendant)
  {
    (*(void (**)(OZChannelFolder *, uint64_t))(*(void *)this + 464))(this, 1);
    Descendant = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))Descendant->var0 + 31))(Descendant);
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(Descendant);
    OZChannelBase::setID(Descendant, NextUniqueID);
    OZChannelFolder::push_back(this, Descendant);
  }
  return Descendant;
}

OZChannelBase *OZChannelGradientFolder::deleteSample(OZChannelFolder *this, int a2)
{
  uint64_t result = (OZChannelBase *)OZChannelFolder::getDescendant(this, a2);
  if (result)
  {
    uint64_t v4 = result;
    OZChannelFolder::removeDescendant(this, result);
    int v5 = (uint64_t (*)(OZChannelBase *))*((void *)v4->var0 + 1);
    return (OZChannelBase *)v5(v4);
  }
  return result;
}

void OZChannelGradientFolder::spread(OZChannelGradientFolder *this, const CMTime *a2)
{
  char v2 = (const void ***)*((void *)this + 14);
  if (v2)
  {
    double v17 = 0;
    unint64_t v18 = 0;
    double v16 = (uint64_t *)&v17;
    uint64_t v4 = *v2;
    int v5 = v2[1];
    double v6 = 1.0;
    if (*v2 != v5)
    {
      do
      {
        if (*v4) {
        else
        }
          int v7 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 128), a2, 0.0);
        uint64_t v15 = v8;
        float v19 = &v15;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v16, (double *)&v15, (uint64_t)&std::piecewise_construct, &v19)[5] = (uint64_t)v7;
        ++v4;
      }
      while (v4 != v5);
      if (v18 >= 2) {
        double v6 = 1.0 / (double)(v18 - 1);
      }
    }
    BOOL v9 = v16;
    if (v16 != (uint64_t *)&v17)
    {
      double v10 = 0.0;
      do
      {
        uint64_t v11 = v9[5];
        (*(void (**)(double))(*(void *)(v11 + 128) + 712))(v6 * v10);
        (*(void (**)(uint64_t, const CMTime *, void, double))(*(void *)(v11 + 280) + 712))(v11 + 280, a2, 0, 0.5);
        uint64_t v12 = (uint64_t *)v9[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            uint64_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (uint64_t *)v9[2];
            BOOL v14 = *v13 == (void)v9;
            BOOL v9 = v13;
          }
          while (!v14);
        }
        double v10 = v10 + 1.0;
        BOOL v9 = v13;
      }
      while (v13 != (uint64_t *)&v17);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v16, v17);
  }
}

void sub_1B79F0984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void OZChannelGradientFolder::flop(OZChannelGradientFolder *this, const CMTime *a2)
{
  char v2 = (const void ***)*((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)v30;
    v30[0] = 0;
    v30[1] = 0;
    double v29 = (uint64_t *)v30;
    uint64_t v4 = *v2;
    int v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*v4) {
        else
        }
          int v7 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 128), a2, 0.0);
        uint64_t v28 = v8;
        int8x16_t v31 = &v28;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v29, (double *)&v28, (uint64_t)&std::piecewise_construct, &v31)[5] = (uint64_t)v7;
        ++v4;
      }
      while (v4 != v5);
      if (v30 != (void **)v29)
      {
        do
        {
          uint64_t v9 = *v3;
          double v10 = (uint64_t *)*v3;
          uint64_t v11 = v3;
          if (*v3)
          {
            do
            {
              uint64_t v12 = v10;
              double v10 = (uint64_t *)v10[1];
            }
            while (v10);
          }
          else
          {
            do
            {
              uint64_t v12 = (uint64_t *)v11[2];
              BOOL v13 = *v12 == (void)v11;
              uint64_t v11 = v12;
            }
            while (v13);
          }
          BOOL v14 = v3;
          if (v9)
          {
            do
            {
              uint64_t v15 = v9;
              uint64_t v9 = *(void *)(v9 + 8);
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v15 = v14[2];
              BOOL v13 = *(void *)v15 == (void)v14;
              BOOL v14 = (uint64_t *)v15;
            }
            while (v13);
          }
          double v16 = (void *)v12[5];
          (*(void (**)(void *, const CMTime *, void, double))(v16[16] + 712))(v16 + 16, a2, 0, 1.0 - *(double *)(v15 + 32));
          double v17 = (uint64_t *)*v3;
          unint64_t v18 = v3;
          if (*v3)
          {
            do
            {
              uint64_t v3 = v17;
              double v17 = (uint64_t *)v17[1];
            }
            while (v17);
          }
          else
          {
            do
            {
              uint64_t v3 = (uint64_t *)v18[2];
              BOOL v13 = *v3 == (void)v18;
              unint64_t v18 = v3;
            }
            while (v13);
          }
          float v19 = v3;
          if (v3 != v29)
          {
            int8x16_t v20 = (uint64_t *)*v3;
            double v21 = v3;
            if (*v3)
            {
              do
              {
                double v22 = v20;
                int8x16_t v20 = (uint64_t *)v20[1];
              }
              while (v20);
            }
            else
            {
              do
              {
                double v22 = (uint64_t *)v21[2];
                BOOL v13 = *v22 == (void)v21;
                double v21 = v22;
              }
              while (v13);
            }
            OZChannel::getValueAsDouble((OZChannel *)(v22[5] + 280), a2, 0.0);
            (*(void (**)(void *, const CMTime *, void, double))(v16[35] + 712))(v16 + 35, a2, 0, 1.0 - v23);
            double v24 = (uint64_t *)*v3;
            double v25 = v3;
            if (*v3)
            {
              do
              {
                float v26 = v24;
                double v24 = (uint64_t *)v24[1];
              }
              while (v24);
            }
            else
            {
              do
              {
                float v26 = (uint64_t *)v25[2];
                BOOL v13 = *v26 == (void)v25;
                double v25 = v26;
              }
              while (v13);
            }
            int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v26[5] + 432), a2, 0.0);
            (*(void (**)(void *, const CMTime *, void, double))(v16[54] + 712))(v16 + 54, a2, 0, (double)ValueAsInt);
            float v19 = v29;
          }
        }
        while (v3 != v19);
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  }
}

void sub_1B79F0CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void OZChannelGradientFolder::sortAndRename(OZChannelGradientFolder *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const void ***)*((void *)this + 14);
  if (v1)
  {
    v30[0] = 0;
    v30[1] = 0;
    double v29 = (uint64_t *)v30;
    char v2 = *v1;
    uint64_t v3 = v1[1];
    if (*v1 == v3)
    {
      v1[1] = v2;
    }
    else
    {
      int v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        if (*v2) {
        else
        }
          double v6 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v6 + 128), v5, 0.0);
        v28.var0 = v7;
        *(void *)__str = &v28;
        std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(&v29, (double *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5] = (uint64_t)v6;
        ++v2;
      }
      while (v2 != v3);
      uint64_t v8 = v29;
      *(void *)(*((void *)this + 14) + OZSpline::reparametrize((uint64_t)this + 8) = **((void **)this + 14);
      if (v8 != (uint64_t *)v30)
      {
        int v9 = 1;
        do
        {
          double v10 = (const PCString *)(*(uint64_t (**)(OZChannelGradientFolder *))(*(void *)this + 712))(this);
          PCString::PCString(&v28, v10);
          snprintf(__str, 0x20uLL, "%d", v9);
          PCString::append(&v28, __str);
          uint64_t v11 = (OZChannelBase *)v8[5];
          uint64_t v12 = (void **)*((void *)this + 14);
          BOOL v13 = (OZChannelBase **)v12[1];
          unint64_t v14 = (unint64_t)v12[2];
          if ((unint64_t)v13 >= v14)
          {
            uint64_t v16 = ((char *)v13 - (unsigned char *)*v12) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v14 - (void)*v12;
            uint64_t v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
              uint64_t v18 = v16 + 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              int8x16_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v12 + 2), v19);
            }
            else {
              int8x16_t v20 = 0;
            }
            double v21 = (OZChannelBase **)&v20[8 * v16];
            uint64_t *v21 = v11;
            uint64_t v15 = v21 + 1;
            double v23 = (char *)*v12;
            double v22 = (char *)v12[1];
            if (v22 != *v12)
            {
              do
              {
                double v24 = (OZChannelBase *)*((void *)v22 - 1);
                v22 -= 8;
                *--double v21 = v24;
              }
              while (v22 != v23);
              double v22 = (char *)*v12;
            }
            *uint64_t v12 = v21;
            v12[1] = v15;
            v12[2] = &v20[8 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *BOOL v13 = v11;
            uint64_t v15 = v13 + 1;
          }
          v12[1] = v15;
          if (PCString::compare(&v11->var4, &v28))
          {
            (*((void (**)(OZChannelBase *, uint64_t))v11->var0 + 58))(v11, 1);
            OZChannelBase::setName(v11, &v28, 0);
          }
          PCString::~PCString(&v28);
          double v25 = (uint64_t *)v8[1];
          if (v25)
          {
            do
            {
              float v26 = v25;
              double v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              float v26 = (uint64_t *)v8[2];
              BOOL v27 = *v26 == (void)v8;
              uint64_t v8 = v26;
            }
            while (!v27);
          }
          ++v9;
          uint64_t v8 = v26;
        }
        while (v26 != (uint64_t *)v30);
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  }
}

void sub_1B79F101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12, void *a13)
{
}

__CFString *OZChannelGradientFolder::getObjCWrapperName(OZChannelGradientFolder *this)
{
  return @"CHChannelGradientFolder";
}

uint64_t OZChannelGradientFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  *((void *)this + 7) &= ~0x10000uLL;
  return OZChannelVaryingFolder::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZChannelGradientFolder::parseEnd(OZChannelGradientFolder *this, PCSerializerReadStream *a2)
{
  *((void *)this + 5) &= ~0x10000uLL;
  return OZChannelVaryingFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelGradientFolder::OZChannelGradientFolder(this, a2, a3, a4);
  void *v4 = &unk_1F110A9E8;
  v4[2] = &unk_1F110ACE8;
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientRGBFolder_Factory::getInstance(this);
  OZChannelGradientFolder::OZChannelGradientFolder(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F110A9E8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110ACE8;
}

void OZChannelGradientRGBFolder::OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  void *v3 = &unk_1F110A9E8;
  v3[2] = &unk_1F110ACE8;
}

void non-virtual thunk to'OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(OZChannelGradientRGBFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientRGBFolder::~OZChannelGradientRGBFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientRGBFolder::clone(OZChannelGradientRGBFolder *this)
{
}

void sub_1B79F12D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradientRGBFolder::getSampleBaseName(OZChannelGradientRGBFolder *this)
{
  if (!OZChannelGradientRGBFolder::_baseName) {
    operator new();
  }
  return OZChannelGradientRGBFolder::_baseName;
}

void sub_1B79F135C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientRGBFolder::addSample(OZChannelGradientRGBFolder *this, double a2, double a3, double a4, double a5, double a6)
{
}

void sub_1B79F1474(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradientRGBFolder::insertSample(OZChannelGradientRGBFolder *this, const CMTime *a2, double a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(OZChannelGradientRGBFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  (*(void (**)(OZChannelGradientRGBFolder *, const CMTime *, void ***))(*(void *)this + 728))(this, a2, &v12);
  if (!v13[0]) {
    goto LABEL_11;
  }
  double v6 = (double *)v13;
  int v7 = (double *)v13[0];
  do
  {
    uint64_t v8 = v7;
    int v9 = v6;
    double v10 = v7[4];
    if (v10 >= a3) {
      double v6 = v7;
    }
    else {
      ++v7;
    }
    int v7 = *(double **)v7;
  }
  while (v7);
  if (v6 == (double *)v13) {
    goto LABEL_11;
  }
  if (v10 < a3) {
    uint64_t v8 = v9;
  }
  if (v8[4] > a3)
  {
LABEL_11:
    if (v13 != (void **)(*(uint64_t (**)(OZChannelGradientRGBFolder *, _OWORD *, void ***, double))(*(void *)this + 744))(this, v14, &v12, a3))operator new(); {
    operator new();
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  return 0;
}

void sub_1B79F176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  MEMORY[0x1BA9BFBA0](v11, 0x10F1C40C9B629ABLL);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t **OZChannelGradientRGBFolder::getLookup(uint64_t **result, const CMTime *a2, uint64_t **a3)
{
  uint64_t v3 = result[14];
  if (v3)
  {
    uint64_t v4 = (const void **)*v3;
    int v5 = (const void **)v3[1];
    if ((const void **)*v3 != v5)
    {
      do
      {
        if (*v4) {
        else
        }
          uint64_t v8 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 824), a2, 0.0);
        double v10 = v9;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 976), a2, 0.0);
        uint64_t v12 = v11;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 1128), a2, 0.0);
        unint64_t v14 = v13;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 280), a2, 0.0);
        uint64_t v16 = v15;
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 432), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 128), a2, 0.0);
        double v19 = v18;
        int8x16_t v20 = &v19;
        uint64_t result = std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(a3, &v19, (uint64_t)&std::piecewise_construct, (void **)&v20);
        result[5] = v10;
        result[6] = v12;
        result[7] = v14;
        result[9] = v16;
        ++v4;
        *((_DWORD *)result + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = ValueAsInt;
      }
      while (v4 != v5);
    }
  }
  return result;
}

void OZChannelGradientRGBFolder::getARGBFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v54[4] = *(double *)MEMORY[0x1E4F143B8];
  if (!*(void *)(a7 + 16))
  {
    *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    *(_DWORD *)(a6 + 4) = 0;
    return;
  }
  uint64_t v13 = a7 + 8;
  uint64_t v14 = *(void *)(a7 + 8);
  uint64_t v15 = a7 + 8;
  if (v14)
  {
    uint64_t v15 = a7 + 8;
    uint64_t v16 = *(void *)(a7 + 8);
    do
    {
      uint64_t v17 = (uint64_t *)(v16 + 8);
      if (*(double *)(v16 + 32) >= a1)
      {
        uint64_t v17 = (uint64_t *)v16;
        uint64_t v15 = v16;
      }
      uint64_t v16 = *v17;
    }
    while (*v17);
  }
  if (v15 != *(void *)a7)
  {
    if (v15 != v13)
    {
      uint64_t v18 = *(void *)v15;
      if (*(void *)v15)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = *(void *)(v18 + 8);
        }
        while (v18);
      }
      else
      {
        uint64_t v23 = v15;
        do
        {
          uint64_t v19 = *(void *)(v23 + 16);
          BOOL v20 = *(void *)v19 == v23;
          uint64_t v23 = v19;
        }
        while (v20);
      }
      int v24 = *(_DWORD *)(v19 + 80);
      if (v24 == 2)
      {
        a3.i64[0] = *(void *)(v15 + 32);
        uint64_t v50 = *(void *)(v15 + 40);
        uint64_t v51 = v50;
        a4.i64[0] = *(void *)(v15 + 56);
        uint64_t v47 = *(void *)(v15 + 48);
        uint64_t v48 = v47;
        v45[2] = *(double *)a4.i64;
        v45[3] = *(double *)a4.i64;
        a4.i64[0] = *(void *)(v19 + 32);
        v49[0] = *(double *)(v19 + 40);
        v49[1] = v49[0];
        double v26 = a1 - *(double *)a4.i64;
        *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a4.i64;
        a4.i64[0] = *(void *)(v19 + 56);
        v46[0] = *(double *)(v19 + 48);
        v46[1] = v46[0];
        v45[0] = *(double *)a4.i64;
        v45[1] = *(double *)a4.i64;
        v53[3] = 1.0;
        v54[0] = 0.0;
        v53[0] = 0.0;
        v52[0] = 0.0;
        a3.i64[0] = *(void *)(v19 + 72);
        v54[1] = *(double *)a3.i64;
        v54[2] = *(double *)a3.i64;
        v53[1] = *(double *)a3.i64;
        v53[2] = *(double *)a3.i64;
        v52[1] = *(double *)a3.i64;
        v52[2] = *(double *)a3.i64;
        v54[3] = 1.0;
        double v27 = v26 / *(double *)a2.i64;
        v52[3] = 1.0;
        double Parameter = OZBezierFindParameter(v54, v26 / *(double *)a2.i64, a2, a3, a4, a6, (double *)a7, a8);
        float v29 = OZBezierEval(v49, Parameter);
        *(float *)(a6 + 4) = v29;
        double v36 = OZBezierFindParameter(v53, v27, v33, v34, v35, v30, v31, v32);
        float v37 = OZBezierEval(v46, v36);
        *(float *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v37;
        double v44 = OZBezierFindParameter(v52, v27, v41, v42, v43, v38, v39, v40);
        double v21 = OZBezierEval(v45, v44);
      }
      else if (v24 == 1)
      {
        double v25 = (a1 - *(double *)(v19 + 32)) / (*(double *)(v15 + 32) - *(double *)(v19 + 32));
        *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(v19 + 40), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v15 + 40), *(float64x2_t *)(v19 + 40)), v25)));
        double v21 = *(double *)(v19 + 56) + v25 * (*(double *)(v15 + 56) - *(double *)(v19 + 56));
      }
      else
      {
        if (v24)
        {
          PCPrint("File %s, line %d should not have been reached:\n\t", a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
          pcAbortImpl();
        }
        *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(*(float64x2_t *)(v19 + 40));
        double v21 = *(double *)(v19 + 56);
      }
      goto LABEL_18;
    }
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = *(void *)(v13 + 16);
        BOOL v20 = *(void *)v15 == v13;
        uint64_t v13 = v15;
      }
      while (v20);
    }
  }
  *(float32x2_t *)(a6 + 4) = vcvt_f32_f64(*(float64x2_t *)(v15 + 40));
  double v21 = *(double *)(v15 + 56);
LABEL_18:
  float v22 = v21;
  *(float *)(a6 + 1OZChannelEnum::~OZChannelEnum(this - 2) = v22;
}

void *OZChannelGradientRGBFolder::getRGBAFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, double *a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v51[4] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)(a7 + 8);
  if (!*(void *)(a7 + 16)) {
    return (void *)(a7 + 8);
  }
  uint64_t v14 = (void *)*v12;
  uint64_t result = (void *)(a7 + 8);
  if (*v12)
  {
    uint64_t result = (void *)(a7 + 8);
    uint64_t v16 = (void *)*v12;
    do
    {
      uint64_t v17 = v16 + 1;
      if (*((double *)v16 + 4) >= a1)
      {
        uint64_t v17 = v16;
        uint64_t result = v16;
      }
      uint64_t v16 = (void *)*v17;
    }
    while (*v17);
  }
  if (result == *(void **)a7) {
    goto LABEL_17;
  }
  if (result == v12)
  {
    if (v14)
    {
      do
      {
        uint64_t result = v14;
        uint64_t v14 = (void *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t result = (void *)v12[2];
        BOOL v20 = *result == (void)v12;
        uint64_t v12 = result;
      }
      while (v20);
    }
LABEL_17:
    *a6 = *((double *)result + 5);
    a6[1] = *((double *)result + 6);
    a6[2] = *((double *)result + 7);
    return result;
  }
  uint64_t v18 = *result;
  if (*result)
  {
    do
    {
      uint64_t v19 = v18;
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    double v21 = result;
    do
    {
      uint64_t v19 = v21[2];
      BOOL v20 = *(void *)v19 == (void)v21;
      double v21 = (void *)v19;
    }
    while (v20);
  }
  int v22 = *(_DWORD *)(v19 + 80);
  if (v22 == 2)
  {
    a3.i64[0] = result[4];
    uint64_t v47 = result[5];
    uint64_t v48 = v47;
    a4.i64[0] = result[7];
    uint64_t v44 = result[6];
    uint64_t v45 = v44;
    v42[2] = *(double *)a4.i64;
    v42[3] = *(double *)a4.i64;
    a4.i64[0] = *(void *)(v19 + 32);
    v46[0] = *(double *)(v19 + 40);
    v46[1] = v46[0];
    double v24 = a1 - *(double *)a4.i64;
    *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a4.i64;
    a4.i64[0] = *(void *)(v19 + 56);
    v43[0] = *(double *)(v19 + 48);
    v43[1] = v43[0];
    v42[0] = *(double *)a4.i64;
    v42[1] = *(double *)a4.i64;
    v50[3] = 1.0;
    v51[0] = 0.0;
    v50[0] = 0.0;
    v49[0] = 0.0;
    a3.i64[0] = *(void *)(v19 + 72);
    v51[1] = *(double *)a3.i64;
    v51[2] = *(double *)a3.i64;
    v50[1] = *(double *)a3.i64;
    v50[2] = *(double *)a3.i64;
    v49[1] = *(double *)a3.i64;
    double v49[2] = *(double *)a3.i64;
    v51[3] = 1.0;
    double v25 = v24 / *(double *)a2.i64;
    v49[3] = 1.0;
    double Parameter = OZBezierFindParameter(v51, v24 / *(double *)a2.i64, a2, a3, a4, (uint64_t)a6, (double *)a7, a8);
    *a6 = OZBezierEval(v46, Parameter);
    double v33 = OZBezierFindParameter(v50, v25, v30, v31, v32, v27, v28, v29);
    a6[1] = OZBezierEval(v43, v33);
    double v40 = OZBezierFindParameter(v49, v25, v37, v38, v39, v34, v35, v36);
    double v23 = OZBezierEval(v42, v40);
  }
  else if (v22 == 1)
  {
    double v41 = (a1 - *(double *)(v19 + 32)) / (*((double *)result + 4) - *(double *)(v19 + 32));
    *a6 = *(double *)(v19 + 40) + v41 * (*((double *)result + 5) - *(double *)(v19 + 40));
    a6[1] = *(double *)(v19 + 48) + v41 * (*((double *)result + 6) - *(double *)(v19 + 48));
    double v23 = *(double *)(v19 + 56) + v41 * (*((double *)result + 7) - *(double *)(v19 + 56));
  }
  else
  {
    if (v22)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
      pcAbortImpl();
    }
    *a6 = *(double *)(v19 + 40);
    a6[1] = *(double *)(v19 + 48);
    double v23 = *(double *)(v19 + 56);
  }
  a6[2] = v23;
  return (void *)v19;
}

__CFString *OZChannelGradientRGBFolder::getObjCWrapperName(OZChannelGradientRGBFolder *this)
{
  return @"CHChannelGradientRGBFolder";
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelGradientFolder::OZChannelGradientFolder(this, a2, a3, a4);
  void *v4 = &unk_1F110AD40;
  v4[2] = &unk_1F110B040;
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientAlphaFolder_Factory::getInstance(this);
  OZChannelGradientFolder::OZChannelGradientFolder(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F110AD40;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B040;
}

void OZChannelGradientAlphaFolder::OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  void *v3 = &unk_1F110AD40;
  v3[2] = &unk_1F110B040;
}

void non-virtual thunk to'OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(OZChannelGradientAlphaFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientAlphaFolder::~OZChannelGradientAlphaFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientAlphaFolder::clone(OZChannelGradientAlphaFolder *this)
{
}

void sub_1B79F20C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t **OZChannelGradientAlphaFolder::getLookup(uint64_t **result, const CMTime *a2, uint64_t **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[14];
  if (v3)
  {
    uint64_t v4 = (const void **)*v3;
    int v5 = (const void **)v3[1];
    if ((const void **)*v3 != v5)
    {
      do
      {
        if (*v4) {
        else
        }
          uint64_t v8 = 0;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 688), a2, 0.0);
        double v10 = v9;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 280), a2, 0.0);
        uint64_t v12 = v11;
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 432), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 128), a2, 0.0);
        double v15 = v14;
        uint64_t v16 = &v15;
        uint64_t result = std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(a3, &v15, (uint64_t)&std::piecewise_construct, (void **)&v16);
        *(_OWORD *)(result + 5) = v17;
        result[7] = v18;
        result[8] = v10;
        result[9] = v12;
        *((_DWORD *)result + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = ValueAsInt;
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

uint64_t OZChannelGradientAlphaFolder::getSampleBaseName(OZChannelGradientAlphaFolder *this)
{
  if (!OZChannelGradientAlphaFolder::_baseName) {
    operator new();
  }
  return OZChannelGradientAlphaFolder::_baseName;
}

void sub_1B79F22DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientAlphaFolder::addSample(OZChannelGradientAlphaFolder *this, double a2, double a3, double a4)
{
}

void sub_1B79F23DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradientAlphaFolder::insertSample(OZChannelGradientAlphaFolder *this, const CMTime *a2, double a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(OZChannelGradientAlphaFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  (*(void (**)(OZChannelGradientAlphaFolder *, const CMTime *, void ***))(*(void *)this + 728))(this, a2, &v12);
  if (!v13[0]) {
    goto LABEL_11;
  }
  double v6 = (double *)v13;
  int v7 = (double *)v13[0];
  do
  {
    uint64_t v8 = v7;
    int v9 = v6;
    double v10 = v7[4];
    if (v10 >= a3) {
      double v6 = v7;
    }
    else {
      ++v7;
    }
    int v7 = *(double **)v7;
  }
  while (v7);
  if (v6 == (double *)v13) {
    goto LABEL_11;
  }
  if (v10 < a3) {
    uint64_t v8 = v9;
  }
  if (v8[4] > a3)
  {
LABEL_11:
    if (v13 != (void **)(*(uint64_t (**)(OZChannelGradientAlphaFolder *, _OWORD *, void ***, double))(*(void *)this + 744))(this, v14, &v12, a3))operator new(); {
    operator new();
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  return 0;
}

void sub_1B79F26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  MEMORY[0x1BA9BFBA0](v11, 0x10F1C408C14BFF9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

float OZChannelGradientAlphaFolder::getARGBFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v29[4] = *(double *)MEMORY[0x1E4F143B8];
  if (*(void *)(a7 + 16))
  {
    uint64_t v13 = (double *)(a7 + 8);
    double v14 = *(double **)(a7 + 8);
    uint64_t v15 = (double *)(a7 + 8);
    if (v14)
    {
      uint64_t v15 = (double *)(a7 + 8);
      uint64_t v16 = *(void *)(a7 + 8);
      do
      {
        long long v17 = (uint64_t *)(v16 + 8);
        if (*(double *)(v16 + 32) >= a1)
        {
          long long v17 = (uint64_t *)v16;
          uint64_t v15 = (double *)v16;
        }
        uint64_t v16 = *v17;
      }
      while (*v17);
    }
    if (v15 != *(double **)a7)
    {
      if (v15 != v13)
      {
        double v18 = *v15;
        if (*(void *)v15)
        {
          do
          {
            double v19 = v18;
            double v18 = *(double *)(*(void *)&v18 + 8);
          }
          while (v18 != 0.0);
        }
        else
        {
          double v21 = v15;
          do
          {
            double v19 = v21[2];
            BOOL v20 = **(void **)&v19 == (void)v21;
            double v21 = *(double **)&v19;
          }
          while (v20);
        }
        int v22 = *(_DWORD *)(*(void *)&v19 + 80);
        if (v22 == 2)
        {
          uint64_t v27 = *((void *)v15 + 8);
          uint64_t v28 = v27;
          a3.i64[0] = *(void *)(*(void *)&v19 + 72);
          v26[0] = *(double *)(*(void *)&v19 + 64);
          v26[1] = v26[0];
          v29[0] = 0.0;
          v29[1] = *(double *)a3.i64;
          PCSharedCount v29[2] = *(double *)a3.i64;
          v29[3] = 1.0;
          a2.i64[0] = *(void *)(*(void *)&v19 + 32);
          double v23 = a1 - *(double *)a2.i64;
          a3.i64[0] = (uint64_t)v15[4];
          *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a2.i64;
          double Parameter = OZBezierFindParameter(v29, v23 / *(double *)a2.i64, a2, a3, a4, (uint64_t)a6, (double *)a7, a8);
          a1 = OZBezierEval(v26, Parameter);
        }
        else if (v22 == 1)
        {
          a1 = *(double *)(*(void *)&v19 + 64)
             + (a1 - *(double *)(*(void *)&v19 + 32))
             / (v15[4] - *(double *)(*(void *)&v19 + 32))
             * (v15[8] - *(double *)(*(void *)&v19 + 64));
        }
        else
        {
          if (v22)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
            pcAbortImpl();
          }
          a1 = *(double *)(*(void *)&v19 + 64);
        }
        goto LABEL_18;
      }
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          double v14 = (double *)*((void *)v14 + 1);
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (double *)*((void *)v13 + 2);
          BOOL v20 = *(void *)v15 == (void)v13;
          uint64_t v13 = v15;
        }
        while (v20);
      }
    }
    a1 = v15[8];
LABEL_18:
    *(float *)&a1 = a1;
    *a6 = LODWORD(a1);
    return *(float *)&a1;
  }
  *a6 = 0;
  return *(float *)&a1;
}

void *OZChannelGradientAlphaFolder::getRGBAFromLookup(double a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v29[4] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)(a7 + 8);
  if (!*(void *)(a7 + 16)) {
    return (void *)(a7 + 8);
  }
  double v14 = (void *)*v12;
  uint64_t result = (void *)(a7 + 8);
  if (*v12)
  {
    uint64_t result = (void *)(a7 + 8);
    uint64_t v16 = (void *)*v12;
    do
    {
      long long v17 = v16 + 1;
      if (*((double *)v16 + 4) >= a1)
      {
        long long v17 = v16;
        uint64_t result = v16;
      }
      uint64_t v16 = (void *)*v17;
    }
    while (*v17);
  }
  if (result == *(void **)a7) {
    goto LABEL_17;
  }
  if (result == v12)
  {
    if (v14)
    {
      do
      {
        uint64_t result = v14;
        double v14 = (void *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t result = (void *)v12[2];
        BOOL v20 = *result == (void)v12;
        uint64_t v12 = result;
      }
      while (v20);
    }
LABEL_17:
    *(void *)(a6 + 24) = result[8];
    return result;
  }
  uint64_t v18 = *result;
  if (*result)
  {
    do
    {
      uint64_t v19 = v18;
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18);
  }
  else
  {
    double v21 = result;
    do
    {
      uint64_t v19 = v21[2];
      BOOL v20 = *(void *)v19 == (void)v21;
      double v21 = (void *)v19;
    }
    while (v20);
  }
  int v22 = *(_DWORD *)(v19 + 80);
  if (v22 == 2)
  {
    uint64_t v27 = result[8];
    uint64_t v28 = v27;
    a3.i64[0] = *(void *)(v19 + 72);
    v26[0] = *(double *)(v19 + 64);
    v26[1] = v26[0];
    v29[0] = 0.0;
    v29[1] = *(double *)a3.i64;
    PCSharedCount v29[2] = *(double *)a3.i64;
    v29[3] = 1.0;
    a2.i64[0] = *(void *)(v19 + 32);
    double v24 = a1 - *(double *)a2.i64;
    a3.i64[0] = result[4];
    *(double *)a2.i64 = *(double *)a3.i64 - *(double *)a2.i64;
    double Parameter = OZBezierFindParameter(v29, v24 / *(double *)a2.i64, a2, a3, a4, a6, (double *)a7, a8);
    double v23 = OZBezierEval(v26, Parameter);
  }
  else if (v22 == 1)
  {
    double v23 = *(double *)(v19 + 64)
        + (a1 - *(double *)(v19 + 32))
        / (*((double *)result + 4) - *(double *)(v19 + 32))
        * (*((double *)result + 8) - *(double *)(v19 + 64));
  }
  else
  {
    if (v22)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", a6, a7, (uint64_t)a8, a9, a10, a11, a12, (char)"/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelGradientFolder.cpp");
      pcAbortImpl();
    }
    double v23 = *(double *)(v19 + 64);
  }
  *(double *)(a6 + 24) = v23;
  return (void *)v19;
}

__CFString *OZChannelGradientAlphaFolder::getObjCWrapperName(OZChannelGradientAlphaFolder *this)
{
  return @"CHChannelGradientAlphaFolder";
}

uint64_t *std::__tree<std::__value_type<double,OZChannelGradientSample *>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientSample *>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientSample *>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        double v6 = (uint64_t *)*v6;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<double,OZChannelGradientFolder::Sample>,std::__map_value_compare<double,std::__value_type<double,OZChannelGradientFolder::Sample>,std::less<double>,true>,std::allocator<std::__value_type<double,OZChannelGradientFolder::Sample>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double &&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        double v6 = (uint64_t *)*v6;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x58uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 7OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B79F2DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientPositioned_Factory::getInstance(this);
  OZChannelGradientExtras::OZChannelGradientExtras(this, Instance, a2, a3, a4, a5);
}

void sub_1B79F3008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v11);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::OZChannelGradientPositioned(OZChannelGradientPositioned *this, const OZChannelGradientPositioned *a2, OZChannelFolder *a3)
{
  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3);
  void *v5 = &unk_1F110B0E0;
  v5[2] = &unk_1F110B3B8;
  OZChannelPosition::OZChannelPosition((OZChannelPosition *)(v5 + 132), (const OZChannelGradientPositioned *)((char *)a2 + 1056), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760), (const OZChannelGradientPositioned *)((char *)a2 + 1760), (OZChannelFolder *)this);
  *((unsigned char *)this + 2464) = *((unsigned char *)a2 + 2464);
}

void sub_1B79F30FC(_Unwind_Exception *a1)
{
  OZChannelPosition::~OZChannelPosition(v2);
  OZChannelGradientExtras::~OZChannelGradientExtras(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::~OZChannelGradientPositioned(OZChannelGradientPositioned *this)
{
  *(void *)this = &unk_1F110B0E0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B3B8;
  OZChannelPosition::~OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1760));
  OZChannelPosition::~OZChannelPosition((OZChannelGradientPositioned *)((char *)this + 1056));

  OZChannelGradientExtras::~OZChannelGradientExtras(this);
}

{
  uint64_t vars8;

  OZChannelGradientPositioned::~OZChannelGradientPositioned(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientPositioned::~OZChannelGradientPositioned(OZChannelGradientPositioned *this)
{
}

{
  uint64_t vars8;

  OZChannelGradientPositioned::~OZChannelGradientPositioned((OZChannelGradientPositioned *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientPositioned::clone(OZChannelGradientPositioned *this)
{
}

void sub_1B79F3270(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void OZChannelGradientPositioned::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZChannelGradientExtras::copy(this, a2, a3);
  if (v4) {
  OZChannelPosition::copy((OZChannelPosition *)&this[132], (const OZChannelBase *)((char *)v4 + 1056), a3);
  }

  OZChannelPosition::copy((OZChannelPosition *)&this[220], (const OZChannelBase *)((char *)v4 + 1760), a3);
}

uint64_t OZChannelGradientPositioned::setDoNotSerializeAsRoot(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2464) = a2;
  return this;
}

uint64_t non-virtual thunk to'OZChannelGradientPositioned::writeHeader(OZChannelGradientPositioned *this, OZFactory *a2, int a3)
{
  return OZChannelGradient::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t non-virtual thunk to'OZChannelGradientPositioned::writeBody(OZChannelGradientPositioned *this, PCSerializerWriteStream *a2, int a3, int a4, uint64_t a5)
{
  return OZChannelGradient::writeBody((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5);
}

__CFString *OZChannelGradientPositioned::getObjCWrapperName(OZChannelGradientPositioned *this)
{
  return @"CHChannelGradientPositioned";
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(void *)int v7 = &unk_1F110B428;
  *((void *)v7 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B700;
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v18, @"Channel GradientSample Offset");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v18, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v18);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v18, @"Channel GradientSample Middle");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v18, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v18);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v18, @"Channel GradientSample Interpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v17, @"Channel GradientSample Interpolation");
  uint64_t Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v15);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v18, &v17, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v17);
  PCString::~PCString(&v18);
  (*(void (**)(OZChannelGradientSample *))(*(void *)this + 128))(this);
}

void sub_1B79F351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B79F359C()
{
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)int v5 = &unk_1F110B428;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B700;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v16, @"Channel GradientSample Offset");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v16, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v16, @"Channel GradientSample Middle");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v16, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v9, v10);
  PCURL::PCURL((PCURL *)&v16, @"Channel GradientSample Interpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v15, @"Channel GradientSample Interpolation");
  uint64_t Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v13);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v16, &v15, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v15);
  PCString::~PCString(&v16);
  (*(void (**)(OZChannelGradientSample *))(*(void *)this + 128))(this);
}

void sub_1B79F3754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B79F37D4()
{
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientSample_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F110B428;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B700;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v22, @"Channel GradientSample Offset");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 0.0, &v22, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v22, @"Channel GradientSample Middle");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), 0.0, &v22, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v22);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v22, @"Channel GradientSample Interpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, @"Channel GradientSample Interpolation");
  BOOL v20 = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), 2u, &v22, &v21, (OZChannelFolder *)this, 0x64u, 0, v20, 0);
  PCString::~PCString(&v21);
  PCString::~PCString(&v22);
  (*(void (**)(OZChannelGradientSample *))(*(void *)this + 128))(this);
}

void sub_1B79F39C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B79F3A44()
{
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, OZFactory *a2, const PCString *a3, double a4, double a5, unsigned int a6, OZChannelFolder *a7, unsigned int a8, int a9)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a7, a8, a9, 0);
  *(void *)uint64_t v13 = &unk_1F110B428;
  *((void *)v13 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B700;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v24, @"Channel GradientSample Offset");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), a4, &v24, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v24, @"Channel GradientSample Middle");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), a5, &v24, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v24);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v24, @"Channel GradientSample Interpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v23, @"Channel GradientSample Interpolation");
  if (a6 == 2) {
    uint64_t Instance = (OZChannelImpl *)OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(v21);
  }
  else {
    uint64_t Instance = 0;
  }
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), a6, &v24, &v23, (OZChannelFolder *)this, 0x64u, 0, Instance, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  (*(void (**)(OZChannelGradientSample *))(*(void *)this + 128))(this);
}

void sub_1B79F3C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B79F3CB4()
{
}

void OZChannelGradientSample::OZChannelGradientSample(OZChannelGradientSample *this, const OZChannelGradientSample *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F110B428;
  *(void *)(v5 + 16) = &unk_1F110B700;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientSample *)((char *)this + 432), (const OZChannelGradientSample *)((char *)a2 + 432), (OZChannelFolder *)this);
}

void sub_1B79F3D64(_Unwind_Exception *a1)
{
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSample::~OZChannelGradientSample(OZChannelGradientSample *this)
{
  *(void *)this = &unk_1F110B428;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B700;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientSample *)((char *)this + 432));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZChannelGradientSample::~OZChannelGradientSample(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientSample::~OZChannelGradientSample(OZChannelGradientSample *this)
{
}

{
  uint64_t vars8;

  OZChannelGradientSample::~OZChannelGradientSample((OZChannelGradientSample *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientSample::clone(OZChannelGradientSample *this)
{
}

void sub_1B79F3EF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E74858DCLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientSample::copy(OZChannelGradientSample *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 128), (const OZChannelBase *)((char *)v4 + 128), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 280), (const OZChannelBase *)((char *)v4 + 280), a3);

  OZChannelEnum::copy((PCString *)this + 54, (const OZChannelBase *)((char *)v4 + 432), a3);
}

__CFString *OZChannelGradientSample::getObjCWrapperName(OZChannelGradientSample *this)
{
  return @"CHChannelGradientSample";
}

uint64_t OZChannelGradientSample::parseEnd(OZChannelGradientSample *this, PCSerializerReadStream *a2)
{
  *((void *)this + 7) &= ~0x10000uLL;
  return OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
}

uint64_t non-virtual thunk to'OZChannelGradientSample::parseEnd(OZChannelGradientSample *this, PCSerializerReadStream *a2)
{
  *((void *)this + 5) &= ~0x10000uLL;
  return OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F110B770;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BA48;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v7, @"Channel GradientSample Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), &v7, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v7);
}

void sub_1B79F40B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientSampleRGB_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F110B770;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BA48;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, @"Channel GradientSample Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), &v13, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v13);
}

void sub_1B79F41C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const PCString *a2, double a3, double a4, double a5, double a6, double a7, unsigned int a8, OZChannelFolder *a9, unsigned int a10, int a11)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientSampleRGB_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a6, a7, a8, a9, a10, a11);
  *(void *)this = &unk_1F110B770;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BA48;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v25, @"Channel GradientSample Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688), a3, a4, a5, &v25, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v25);
}

void sub_1B79F4318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this, const OZChannelGradientSampleRGB *a2, OZChannelFolder *a3)
{
  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3);
  void *v5 = &unk_1F110B770;
  v5[2] = &unk_1F110BA48;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)(v5 + 86), (const OZChannelGradientSampleRGB *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B79F43B8(_Unwind_Exception *a1)
{
  OZChannelGradientSample::~OZChannelGradientSample(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this)
{
  *(void *)this = &unk_1F110B770;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BA48;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688));

  OZChannelGradientSample::~OZChannelGradientSample(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110B770;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BA48;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB(OZChannelGradientSampleRGB *this)
{
  uint64_t v1 = (OZChannelGradientSampleRGB *)((char *)this - 16);
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110B770;
  *(void *)this = &unk_1F110BA48;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelGradientSampleRGB *)((char *)this + 672));

  OZChannelGradientSample::~OZChannelGradientSample(v1);
}

{
  OZChannelGradientSampleRGB::~OZChannelGradientSampleRGB((OZChannelGradientSampleRGB *)((char *)this - 16));
}

void OZChannelGradientSampleRGB::clone(OZChannelGradientSampleRGB *this)
{
}

void sub_1B79F459C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleRGB::copy(OZChannelGradientSampleRGB *this, const OZChannelBase *a2, char a3)
{
  OZChannelGradientSample::copy(this, a2, a3);
  if (a2) {
  else
  }
    double v6 = 0;

  OZChannelColorNoAlpha::copy((OZChannelGradientSampleRGB *)((char *)this + 688), (const OZChannelBase *)(v6 + 688), a3);
}

__CFString *OZChannelGradientSampleRGB::getObjCWrapperName(OZChannelGradientSampleRGB *this)
{
  return @"CHChannelGradientSampleRGB";
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F110BAB8;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BD90;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v7, @"Channel GradientSample Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.0, &v7, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B79F4724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientSampleAlpha_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F110BAB8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BD90;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, @"Channel GradientSample Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.0, &v13, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v13);
}

void sub_1B79F483C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const PCString *a2, double a3, double a4, double a5, unsigned int a6, OZChannelFolder *a7, unsigned int a8, int a9)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientSampleAlpha_Factory::getInstance(this);
  OZChannelGradientSample::OZChannelGradientSample(this, Instance, a2, a4, a5, a6, a7, a8, a9);
  *(void *)this = &unk_1F110BAB8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BD90;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, @"Channel GradientSample Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), a3, &v21, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v21);
}

void sub_1B79F4980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientSample::~OZChannelGradientSample(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this, const OZChannelGradientSampleAlpha *a2, OZChannelFolder *a3)
{
  OZChannelGradientSample::OZChannelGradientSample(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F110BAB8;
  *(void *)(v5 + 16) = &unk_1F110BD90;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 688), (const OZChannelBase *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B79F4A20(_Unwind_Exception *a1)
{
  OZChannelGradientSample::~OZChannelGradientSample(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this)
{
  *(void *)this = &unk_1F110BAB8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BD90;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));

  OZChannelGradientSample::~OZChannelGradientSample(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110BAB8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BD90;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannelGradientSample::~OZChannelGradientSample(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha(OZChannelGradientSampleAlpha *this)
{
  uint64_t v1 = (OZChannelGradientSampleAlpha *)((char *)this - 16);
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BAB8;
  *(void *)this = &unk_1F110BD90;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 672));

  OZChannelGradientSample::~OZChannelGradientSample(v1);
}

{
  OZChannelGradientSampleAlpha::~OZChannelGradientSampleAlpha((OZChannelGradientSampleAlpha *)((char *)this - 16));
}

void OZChannelGradientSampleAlpha::clone(OZChannelGradientSampleAlpha *this)
{
}

void sub_1B79F4C04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

void OZChannelGradientSampleAlpha::copy(OZChannelGradientSampleAlpha *this, const OZChannelBase *a2, char a3)
{
  OZChannelGradientSample::copy(this, a2, a3);
  if (a2) {
  else
  }
    double v6 = 0;

  OZChannel::copy((OZChannel *)((char *)this + 688), (const OZChannelBase *)(v6 + 688), a3);
}

__CFString *OZChannelGradientSampleAlpha::getObjCWrapperName(OZChannelGradientSampleAlpha *this)
{
  return @"CHChannelGradientSampleAlpha";
}

uint64_t OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::OZChannelGradientSample_interpolationImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::OZChannelGradientSample_interpolationImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::_OZChannelGradientSample_interpolation;
}

void std::__call_once_param<std::tuple<OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::_OZChannelGradientSample_interpolation) {
    operator new();
  }
}

void sub_1B79F4D90(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientSample::OZChannelGradientSample_interpolationImpl::OZChannelGradientSample_interpolationImpl(OZChannelGradientSample::OZChannelGradientSample_interpolationImpl *this)
{
}

void sub_1B79F4E64(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B79F4F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelGradientWithAngle_Factory::getInstance(this);
  OZChannelGradientExtras::OZChannelGradientExtras(this, Instance, a2, a3, a4, a5);
}

void sub_1B79F5064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelGradientExtras::~OZChannelGradientExtras(v10);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle(OZChannelGradientWithAngle *this, const OZChannelGradientWithAngle *a2, OZChannelFolder *a3)
{
  OZChannelGradientExtras::OZChannelGradientExtras(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F110BE78;
  *(void *)(v5 + 16) = &unk_1F110C150;
  OZChannel::OZChannel((OZChannel *)(v5 + 1056), (const OZChannelBase *)((char *)a2 + 1056), (OZChannelFolder *)this);
  *((void *)this + 13OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11010C0;
  *((void *)this + 134) = &unk_1F1101420;
}

void sub_1B79F5140(_Unwind_Exception *a1)
{
  OZChannelGradientExtras::~OZChannelGradientExtras(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::~OZChannelGradientWithAngle(OZChannelGradientWithAngle *this)
{
  *(void *)this = &unk_1F110BE78;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C150;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1056));

  OZChannelGradientExtras::~OZChannelGradientExtras(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110BE78;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C150;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1056));
  OZChannelGradientExtras::~OZChannelGradientExtras(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientWithAngle::~OZChannelGradientWithAngle(OZChannelGradientWithAngle *this)
{
  uint64_t v1 = (OZChannelGradientWithAngle *)((char *)this - 16);
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110BE78;
  *(void *)this = &unk_1F110C150;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1040));

  OZChannelGradientExtras::~OZChannelGradientExtras(v1);
}

{
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((OZChannelGradientWithAngle *)((char *)this - 16));
}

void OZChannelGradientWithAngle::clone(OZChannelGradientWithAngle *this)
{
}

void sub_1B79F5324(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FB5DE3D8);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::copy(OZChannelGradientWithAngle *this, const OZChannelBase *a2, char a3)
{
  OZChannelGradientExtras::copy((PCString *)this, a2, a3);
  if (a2) {
  else
  }
    double v6 = 0;

  OZChannel::copy((OZChannel *)((char *)this + 1056), (const OZChannelBase *)(v6 + 1056), a3);
}

__CFString *OZChannelGradientWithAngle::getObjCWrapperName(OZChannelGradientWithAngle *this)
{
  return @"CHChannelGradientWithAngle";
}

uint64_t OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::OZChannelGradientWithAngle_angleImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::OZChannelGradientWithAngle_angleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::_OZChannelGradientWithAngle_angle;
}

void std::__call_once_param<std::tuple<OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::_OZChannelGradientWithAngle_angle) {
    operator new();
  }
}

void sub_1B79F54B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithAngle::OZChannelGradientWithAngle_angleImpl::OZChannelGradientWithAngle_angleImpl(OZChannelAngle *this)
{
}

void sub_1B79F5598(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B79F56B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40C4B5480ALL);
  _Unwind_Resume(a1);
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelHistogram_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F110C238;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C580;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram Entries");
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v27, @"Channel Histogram Label");
  OZChannelEnum::OZChannelEnum((OZChannelHistogram *)((char *)this + 136), &v28, &v27, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v27);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram RGB Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), &v28, (OZChannelFolder *)this, 2u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram Red Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), &v28, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram Green Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), &v28, (OZChannelFolder *)this, 4u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram Blue Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), &v28, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v28, @"Channel Histogram Alpha Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), &v28, (OZChannelFolder *)this, 6u, 0, 5u);
  PCString::~PCString(&v28);
  *((void *)this + 609) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B79F59E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelHistogramSample::~OZChannelHistogramSample(v15);
  OZChannelHistogramSample::~OZChannelHistogramSample(v14);
  OZChannelHistogramSample::~OZChannelHistogramSample(v13);
  OZChannelHistogramSample::~OZChannelHistogramSample(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B79F5AA8()
{
}

void sub_1B79F5AB0()
{
}

void sub_1B79F5AC8()
{
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)double v6 = &unk_1F110C238;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C580;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram Entries");
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v20, @"Channel Histogram Label");
  OZChannelEnum::OZChannelEnum((OZChannelHistogram *)((char *)this + 136), &v21, &v20, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram RGB Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), &v21, (OZChannelFolder *)this, 2u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram Red Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), &v21, (OZChannelFolder *)this, 3u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram Green Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), &v21, (OZChannelFolder *)this, 4u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v16, v17);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram Blue Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), &v21, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v18, v19);
  PCURL::PCURL((PCURL *)&v21, @"Channel Histogram Alpha Folder");
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), &v21, (OZChannelFolder *)this, 6u, 0, 5u);
  PCString::~PCString(&v21);
  *((void *)this + 609) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B79F5D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelHistogramSample::~OZChannelHistogramSample(v15);
  OZChannelHistogramSample::~OZChannelHistogramSample(v14);
  OZChannelHistogramSample::~OZChannelHistogramSample(v13);
  OZChannelHistogramSample::~OZChannelHistogramSample(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B79F5E00()
{
}

void sub_1B79F5E08()
{
}

void sub_1B79F5E20()
{
}

void OZChannelHistogram::OZChannelHistogram(OZChannelHistogram *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  void *v5 = &unk_1F110C238;
  v5[2] = &unk_1F110C580;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392), (const OZChannelHistogramSample *)&a2[3].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288), (const OZChannelHistogramSample *)&a2[11].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184), (const OZChannelHistogramSample *)&a2[19].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080), (const OZChannelHistogramSample *)&a2[27].var7, (OZChannelFolder *)this);
  OZChannelHistogramSample::OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976), (const OZChannelHistogramSample *)&a2[35].var7, (OZChannelFolder *)this);
  *((void *)this + 609) = 0;
}

void sub_1B79F5F24(_Unwind_Exception *a1)
{
  OZChannelHistogramSample::~OZChannelHistogramSample(v6);
  OZChannelHistogramSample::~OZChannelHistogramSample(v5);
  OZChannelHistogramSample::~OZChannelHistogramSample(v4);
  OZChannelHistogramSample::~OZChannelHistogramSample(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void sub_1B79F5F80()
{
}

void OZChannelHistogram::~OZChannelHistogram(OZChannelHistogram *this)
{
  *(void *)this = &unk_1F110C238;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C580;
  char v2 = (OZHistogramDelegate *)*((void *)this + 609);
  if (v2) {
    OZHistogramDelegate::notifyReferrers(v2);
  }
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3976));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 3080));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 2184));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 1288));
  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogram *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((OZChannelHistogram *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

{
  uint64_t vars8;

  OZChannelHistogram::~OZChannelHistogram(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelHistogram::~OZChannelHistogram(OZChannelHistogram *this)
{
}

{
  uint64_t vars8;

  OZChannelHistogram::~OZChannelHistogram((OZChannelHistogram *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelHistogram::clone(OZChannelHistogram *this)
{
}

void sub_1B79F6108(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void OZChannelHistogram::copy(OZChannelHistogram *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 392), (const OZChannelBase *)((char *)v4 + 392), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 1288), (const OZChannelBase *)((char *)v4 + 1288), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 2184), (const OZChannelBase *)((char *)v4 + 2184), a3);
  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 3080), (const OZChannelBase *)((char *)v4 + 3080), a3);

  OZChannelHistogramSample::copy((OZChannelHistogram *)((char *)this + 3976), (const OZChannelBase *)((char *)v4 + 3976), a3);
}

uint64_t OZChannelHistogram::getBlackIn(OZChannelHistogram *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t)this + 528;
      break;
    case 1:
      uint64_t result = (uint64_t)this + 1424;
      break;
    case 2:
      uint64_t result = (uint64_t)this + 2320;
      break;
    case 3:
      uint64_t result = (uint64_t)this + 3216;
      break;
    case 4:
      uint64_t result = (uint64_t)this + 4112;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getBlackOut(OZChannelHistogram *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t)this + 680;
      break;
    case 1:
      uint64_t result = (uint64_t)this + 1576;
      break;
    case 2:
      uint64_t result = (uint64_t)this + 2472;
      break;
    case 3:
      uint64_t result = (uint64_t)this + 3368;
      break;
    case 4:
      uint64_t result = (uint64_t)this + 4264;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getWhiteIn(OZChannelHistogram *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t)this + 832;
      break;
    case 1:
      uint64_t result = (uint64_t)this + 1728;
      break;
    case 2:
      uint64_t result = (uint64_t)this + 2624;
      break;
    case 3:
      uint64_t result = (uint64_t)this + 3520;
      break;
    case 4:
      uint64_t result = (uint64_t)this + 4416;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getWhiteOut(OZChannelHistogram *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t)this + 984;
      break;
    case 1:
      uint64_t result = (uint64_t)this + 1880;
      break;
    case 2:
      uint64_t result = (uint64_t)this + 2776;
      break;
    case 3:
      uint64_t result = (uint64_t)this + 3672;
      break;
    case 4:
      uint64_t result = (uint64_t)this + 4568;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t OZChannelHistogram::getGamma(OZChannelHistogram *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t)this + 1136;
      break;
    case 1:
      uint64_t result = (uint64_t)this + 2032;
      break;
    case 2:
      uint64_t result = (uint64_t)this + 2928;
      break;
    case 3:
      uint64_t result = (uint64_t)this + 3824;
      break;
    case 4:
      uint64_t result = (uint64_t)this + 4720;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void OZChannelHistogram::getBlackInValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (OZChannel *)((char *)this + 528);
      goto LABEL_7;
    case 1:
      uint64_t v4 = (OZChannel *)((char *)this + 1424);
      goto LABEL_7;
    case 2:
      uint64_t v4 = (OZChannel *)((char *)this + 2320);
      goto LABEL_7;
    case 3:
      uint64_t v4 = (OZChannel *)((char *)this + 3216);
      goto LABEL_7;
    case 4:
      uint64_t v4 = (OZChannel *)((char *)this + 4112);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getBlackOutValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (OZChannel *)((char *)this + 680);
      goto LABEL_7;
    case 1:
      uint64_t v4 = (OZChannel *)((char *)this + 1576);
      goto LABEL_7;
    case 2:
      uint64_t v4 = (OZChannel *)((char *)this + 2472);
      goto LABEL_7;
    case 3:
      uint64_t v4 = (OZChannel *)((char *)this + 3368);
      goto LABEL_7;
    case 4:
      uint64_t v4 = (OZChannel *)((char *)this + 4264);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getWhiteInValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (OZChannel *)((char *)this + 832);
      goto LABEL_7;
    case 1:
      uint64_t v4 = (OZChannel *)((char *)this + 1728);
      goto LABEL_7;
    case 2:
      uint64_t v4 = (OZChannel *)((char *)this + 2624);
      goto LABEL_7;
    case 3:
      uint64_t v4 = (OZChannel *)((char *)this + 3520);
      goto LABEL_7;
    case 4:
      uint64_t v4 = (OZChannel *)((char *)this + 4416);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getWhiteOutValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (OZChannel *)((char *)this + 984);
      goto LABEL_7;
    case 1:
      uint64_t v4 = (OZChannel *)((char *)this + 1880);
      goto LABEL_7;
    case 2:
      uint64_t v4 = (OZChannel *)((char *)this + 2776);
      goto LABEL_7;
    case 3:
      uint64_t v4 = (OZChannel *)((char *)this + 3672);
      goto LABEL_7;
    case 4:
      uint64_t v4 = (OZChannel *)((char *)this + 4568);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

void OZChannelHistogram::getGammaValue(OZChannelHistogram *this, int a2, const CMTime *a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (OZChannel *)((char *)this + 1136);
      goto LABEL_7;
    case 1:
      uint64_t v4 = (OZChannel *)((char *)this + 2032);
      goto LABEL_7;
    case 2:
      uint64_t v4 = (OZChannel *)((char *)this + 2928);
      goto LABEL_7;
    case 3:
      uint64_t v4 = (OZChannel *)((char *)this + 3824);
      goto LABEL_7;
    case 4:
      uint64_t v4 = (OZChannel *)((char *)this + 4720);
LABEL_7:
      OZChannel::getValueAsDouble(v4, a3, a4);
      break;
    default:
      return;
  }
}

__CFString *OZChannelHistogram::getObjCWrapperName(OZChannelHistogram *this)
{
  return @"CHChannelHistogram";
}

void OZChannelHistogramSample::~OZChannelHistogramSample(OZChannelHistogramSample *this)
{
  *(void *)this = &unk_1F110C5F0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C938;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

{
  uint64_t vars8;

  OZChannelHistogramSample::~OZChannelHistogramSample(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelHistogramSample_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F110C5F0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C938;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v23, @"Channel Histogram Black In Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 136), 0.0, &v23, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v23, @"Channel Histogram Black Out Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 288), 0.0, &v23, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v23, @"Channel Histogram White In Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 440), 1.0, &v23, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v23, @"Channel Histogram White Out Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 592), 1.0, &v23, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v23);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v23, @"Channel Histogram Gamma Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 744), 1.0, &v23, (OZChannelFolder *)this, 5u, 0, 0, 0);
  PCString::~PCString(&v23);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 592), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 744), 5.0);
}

void sub_1B79F69C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)double v6 = &unk_1F110C5F0;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110C938;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v16, @"Channel Histogram Black In Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 136), 0.0, &v16, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v16, @"Channel Histogram Black Out Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 288), 0.0, &v16, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v16, @"Channel Histogram White In Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 440), 1.0, &v16, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v16, @"Channel Histogram White Out Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 592), 1.0, &v16, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v16);
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v16, @"Channel Histogram Gamma Label");
  OZChannelDouble::OZChannelDouble((OZChannelHistogramSample *)((char *)this + 744), 1.0, &v16, (OZChannelFolder *)this, 5u, 0, 0, 0);
  PCString::~PCString(&v16);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 592), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 744), 5.0);
}

void sub_1B79F6CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::OZChannelHistogramSample(OZChannelHistogramSample *this, const OZChannelHistogramSample *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F110C5F0;
  *(void *)(v5 + 16) = &unk_1F110C938;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1100CF0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((void *)this + 74) = &unk_1F1100CF0;
  *((void *)this + 76) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 744), (const OZChannelBase *)((char *)a2 + 744), (OZChannelFolder *)this);
  *((void *)this + 93) = &unk_1F1100CF0;
  *((void *)this + 95) = &unk_1F1101050;
}

void sub_1B79F6F74(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::clone(OZChannelHistogramSample *this)
{
}

void sub_1B79F7018(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40933A2D21);
  _Unwind_Resume(a1);
}

void OZChannelHistogramSample::copy(OZChannelHistogramSample *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);

  OZChannel::copy((OZChannel *)((char *)this + 744), (const OZChannelBase *)((char *)v4 + 744), a3);
}

__CFString *OZChannelHistogramSample::getObjCWrapperName(OZChannelHistogramSample *this)
{
  return @"CHChannelHistogramSample";
}

void non-virtual thunk to'OZChannelHistogramSample::~OZChannelHistogramSample(OZChannelHistogramSample *this)
{
}

{
  uint64_t vars8;

  OZChannelHistogramSample::~OZChannelHistogramSample((OZChannelHistogramSample *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B79F72A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40C173384DLL);
  _Unwind_Resume(a1);
}

void sub_1B79F7898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void sub_1B79F7E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this)
{
  *(void *)this = &unk_1F110C9A8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *(_OWORD *)((char *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = @"PISliderTransformer";
  *((unsigned char *)this + 7OZChannelEnum::~OZChannelEnum(this - 2) = 1;
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, double a2, double a3, double a4, double a5, double a6, const char *a7)
{
  *(void *)this = &unk_1F110C9A8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((double *)this + atomic_store(0, (unint64_t *)this + 1) = a3;
  *((double *)this + OZChannelEnum::~OZChannelEnum(this - 2) = a2;
  *((double *)this + 3) = a5;
  *((double *)this + 4) = a4;
  *((double *)this + 5) = a6;
  *((void *)this + 6) = 0;
  PCString::set(v14, a7);
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = @"PISliderTransformer";
  *((unsigned char *)this + 7OZChannelEnum::~OZChannelEnum(this - 2) = 1;
}

void sub_1B79F8768(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, double a2, double a3, double a4, double a5, double a6, const PCString *a7)
{
  *(void *)this = &unk_1F110C9A8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((double *)this + atomic_store(0, (unint64_t *)this + 1) = a3;
  *((double *)this + OZChannelEnum::~OZChannelEnum(this - 2) = a2;
  *((double *)this + 3) = a5;
  *((double *)this + 4) = a4;
  *((double *)this + 5) = a6;
  *((void *)this + 6) = 0;
  PCString::set(v14, a7);
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = @"PISliderTransformer";
  *((unsigned char *)this + 7OZChannelEnum::~OZChannelEnum(this - 2) = 1;
}

void sub_1B79F882C(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::OZChannelInfo(OZChannelInfo *this, const OZChannelInfo *a2)
{
  *(void *)this = &unk_1F110C9A8;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *(_OWORD *)((char *)this + OZSpline::reparametrize((uint64_t)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *(_OWORD *)((char *)a2 + 40);
  PCString::set(v4, (const PCString *)a2 + 7);
  uint64_t v5 = (const void *)*((void *)a2 + 8);
  *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  *((unsigned char *)this + 7OZChannelEnum::~OZChannelEnum(this - 2) = 0;
}

void sub_1B79F88CC(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZChannelInfo::~OZChannelInfo(OZChannelInfo *this)
{
  *(void *)this = &unk_1F110C9A8;
  char v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  PCString::~PCString((PCString *)this + 7);
}

{
  uint64_t vars8;

  OZChannelInfo::~OZChannelInfo(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelInfo::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *(_OWORD *)(a2 + 40);
  PCString::set((PCString *)(a1 + 56), (const PCString *)(a2 + 56));
  OZChannelInfo::setSliderTransformerName((OZChannelInfo *)a1, *(CFTypeRef *)(a2 + 64));
  *(unsigned char *)(a1 + 7OZChannelEnum::~OZChannelEnum(this - 2) = 0;
}

void OZChannelInfo::setSliderTransformerName(OZChannelInfo *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 8);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + OZSpline::reparametrize((uint64_t)this + 8) = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

BOOL OZChannelInfo::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && !PCString::compare((PCString *)(a1 + 56), (const PCString *)(a2 + 56))
      && CFEqual(*(CFStringRef *)(a1 + 64), *(CFStringRef *)(a2 + 64));
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelLevels_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F110C9D8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110CD20;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v19, @"Channel Levels Black Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 136), 0.0, &v19, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v19, @"Channel Levels White Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 288), 1.0, &v19, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, @"Channel Levels Gamma Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 440), 1.0, &v19, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v19);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B79F8CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)double v6 = &unk_1F110C9D8;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110CD20;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, @"Channel Levels Black Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 136), 0.0, &v12, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, @"Channel Levels White Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 288), 1.0, &v12, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, @"Channel Levels Gamma Label");
  OZChannelDouble::OZChannelDouble((OZChannelLevels *)((char *)this + 440), 1.0, &v12, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v12);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B79F8EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelLevels::OZChannelLevels(OZChannelLevels *this, const OZChannelLevels *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F110C9D8;
  *(void *)(v5 + 16) = &unk_1F110CD20;
  double v6 = (OZChannel *)(v5 + 136);
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1100CF0;
  *((void *)this + 19) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1100CF0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
  OZChannel::setSliderMax(v6, 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 440), 5.0);
}

void sub_1B79F90C0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelLevels::clone(OZChannelLevels *this)
{
}

void sub_1B79F9154(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelLevels::copy(OZChannelLevels *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);

  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

uint64_t OZChannelLevels::getWhite(OZChannelLevels *this)
{
  return (uint64_t)this + 288;
}

uint64_t OZChannelLevels::getGamma(OZChannelLevels *this)
{
  return (uint64_t)this + 440;
}

void OZChannelLevels::getBlackValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
}

void OZChannelLevels::getWhiteValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
}

void OZChannelLevels::getGammaValue(OZChannelLevels *this, const CMTime *a2, double a3)
{
}

uint64_t OZChannelLevels::setBlackValue(OZChannelLevels *this, const CMTime *a2, double a3, int a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 136), a2, a3, a4);
}

uint64_t OZChannelLevels::setWhiteValue(OZChannelLevels *this, const CMTime *a2, double a3, int a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 288), a2, a3, a4);
}

uint64_t OZChannelLevels::setGammaValue(OZChannelLevels *this, const CMTime *a2, double a3, int a4)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 440), a2, a3, a4);
}

__CFString *OZChannelLevels::getObjCWrapperName(OZChannelLevels *this)
{
  return @"CHChannelLevels";
}

void OZChannelLevels::~OZChannelLevels(OZChannelLevels *this)
{
  OZChannelLevels::~OZChannelLevels(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F110C9D8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110CD20;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

void non-virtual thunk to'OZChannelLevels::~OZChannelLevels(OZChannelLevels *this)
{
}

{
  uint64_t vars8;

  OZChannelLevels::~OZChannelLevels((OZChannelLevels *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(void *)uint64_t v6 = &unk_1F110CD90;
  *(void *)(v6 + 16) = &unk_1F110D118;
  uint64_t v7 = MEMORY[0x1E4F1FA48];
  long long v8 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v6 + 15OZChannelEnum::~OZChannelEnum(this - 2) = *MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(void *)(v7 + 16);
  *(void *)(v6 + 16OZSpline::reparametrize((uint64_t)this + 8) = v9;
  *(_OWORD *)(v6 + 176) = v8;
  *(void *)(v6 + 19OZChannelEnum::~OZChannelEnum(this - 2) = v9;
  *(_OWORD *)(v6 + 12OZSpline::reparametrize((uint64_t)this + 8) = v8;
  *(void *)(v6 + 144) = v9;
  *(void *)(v6 + 56) |= 0x2040uLL;
  *(_WORD *)(v6 + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 256;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelObjectRootBase_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F110CD90;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D118;
  uint64_t v11 = MEMORY[0x1E4F1FA48];
  long long v12 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = *MEMORY[0x1E4F1FA48];
  uint64_t v13 = *(void *)(v11 + 16);
  *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = v13;
  *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v12;
  *((void *)this + 24) = v13;
  *((_OWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = v12;
  *((void *)this + 1OZSpline::reparametrize((uint64_t)this + 8) = v13;
  *((void *)this + 7) |= 0x2040uLL;
  *((_WORD *)this + 10OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 256;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, const OZChannelObjectRootBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v4 = &unk_1F110CD90;
  *(void *)(v4 + 16) = &unk_1F110D118;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  long long v6 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v4 + 15OZChannelEnum::~OZChannelEnum(this - 2) = *MEMORY[0x1E4F1FA48];
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v4 + 16OZSpline::reparametrize((uint64_t)this + 8) = v7;
  *(_OWORD *)(v4 + 176) = v6;
  *(void *)(v4 + 19OZChannelEnum::~OZChannelEnum(this - 2) = v7;
  *(void *)(v4 + 56) |= 0x2040uLL;
  long long v8 = *((_OWORD *)a2 + 8);
  *(void *)(v4 + 144) = *((void *)a2 + 18);
  *(_OWORD *)(v4 + 12OZSpline::reparametrize((uint64_t)this + 8) = v8;
  if ((const OZChannelObjectRootBase *)v4 != a2)
  {
    long long v9 = *(_OWORD *)((char *)a2 + 152);
    *(void *)(v4 + 16OZSpline::reparametrize((uint64_t)this + 8) = *((void *)a2 + 21);
    *(_OWORD *)(v4 + 15OZChannelEnum::~OZChannelEnum(this - 2) = v9;
    long long v10 = *((_OWORD *)a2 + 11);
    *(void *)(v4 + 19OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)a2 + 24);
    *(_OWORD *)(v4 + 176) = v10;
  }
  *(unsigned char *)(v4 + 20atomic_store(0, (unint64_t *)this + 1) = *((unsigned char *)a2 + 201);
  *(unsigned char *)(v4 + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
}

void OZChannelObjectRootBase::OZChannelObjectRootBase(OZChannelObjectRootBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v4 = &unk_1F110CD90;
  *(void *)(v4 + 16) = &unk_1F110D118;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  long long v6 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v4 + 15OZChannelEnum::~OZChannelEnum(this - 2) = *MEMORY[0x1E4F1FA48];
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v4 + 16OZSpline::reparametrize((uint64_t)this + 8) = v7;
  *(_OWORD *)(v4 + 176) = v6;
  *(void *)(v4 + 19OZChannelEnum::~OZChannelEnum(this - 2) = v7;
  *(_OWORD *)(v4 + 12OZSpline::reparametrize((uint64_t)this + 8) = v6;
  *(void *)(v4 + 144) = v7;
  *(void *)(v4 + 56) |= 0x2040uLL;
  *(_WORD *)(v4 + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 256;
}

void non-virtual thunk to'OZChannelObjectRootBase::~OZChannelObjectRootBase(OZChannelObjectRootBase *this)
{
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelObjectRootBase::~OZChannelObjectRootBase(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelObjectRootBase::clone(OZChannelObjectRootBase *this)
{
}

void sub_1B79F9750(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C173384DLL);
  _Unwind_Resume(a1);
}

void OZChannelObjectRootBase::assign(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  OZChannelFolder::assign((OZChannelFolder *)this, a2);
  PCString::set((PCString *)this + 4, &a2->var4);
  uint64_t v4 = (PCString *)*((void *)this + 5);
  if (!v4) {
    operator new();
  }
  if (a2->var5) {
    var5 = a2->var5;
  }
  else {
    var5 = &a2->var4;
  }

  PCString::set(v4, var5);
}

void sub_1B79F9818(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelObjectRootBase::compare(OZChannelObjectRootBase *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (const OZChannelBase *)(OZChannelFolder::compare((OZChannelFolder *)this, result)
                                  && (CMTime time1 = *(CMTime *)((char *)this + 128),
                                      CMTime v5 = *(CMTime *)&v4[1].var2,
                                      !CMTimeCompare(&time1, &v5))
                                  && (CMTime time1 = *(CMTime *)((char *)this + 152),
                                      CMTime v5 = *(CMTime *)&v4[1].var5,
                                      !CMTimeCompare(&time1, &v5))
                                  && (CMTime time1 = *(CMTime *)((char *)this + 176),
                                      CMTime v5 = *(CMTime *)&v4[1].var8,
                                      !CMTimeCompare(&time1, &v5)));
  }
  return result;
}

void OZChannelObjectRootBase::copy(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (a2)
  {
    if (v4)
    {
      long long v5 = *((_OWORD *)v4 + 8);
      *((void *)this + 1OZSpline::reparametrize((uint64_t)this + 8) = *((void *)v4 + 18);
      *((_OWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = v5;
      if (v4 != this)
      {
        long long v6 = *(_OWORD *)((char *)v4 + 152);
        *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = *((void *)v4 + 21);
        *(_OWORD *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = v6;
        long long v7 = *((_OWORD *)v4 + 11);
        *((void *)this + 24) = *((void *)v4 + 24);
        *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v7;
      }
      *((unsigned char *)this + 20atomic_store(0, (unint64_t *)this + 1) = *((unsigned char *)v4 + 201);
    }
  }
}

__n128 OZChannelObjectRootBase::getTimeOffset@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[8];
  *a2 = result;
  a2[1].n128_u64[0] = this[9].n128_u64[0];
  return result;
}

__n128 OZChannelObjectRootBase::setTimeOffset(__n128 *this, const CMTime *a2, char a3)
{
  if ((a3 & 1) == 0) {
    (*(void (**)(__n128 *, uint64_t))(this->n128_u64[0] + 464))(this, 1);
  }
  __n128 result = *(__n128 *)&a2->value;
  this[9].n128_u64[0] = a2->epoch;
  this[8] = result;
  return result;
}

double OZChannelObjectRootBase::globalToLocalTime@<D0>(OZChannelObjectRootBase *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelBase::globalToLocalTime(a2, (const CMTime *)((char *)this + 128), a3);
}

double OZChannelObjectRootBase::localToGlobalTime@<D0>(OZChannelObjectRootBase *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelBase::localToGlobalTime(a2, (const CMTime *)((char *)this + 128), a3);
}

uint64_t OZChannelObjectRootBase::setTimeExtent(OZChannelObjectRootBase *this, const PCTimeRange *a2, int a3)
{
  if (!a3) {
    (*(void (**)(OZChannelObjectRootBase *, uint64_t))(*(void *)this + 464))(this, 1);
  }
  uint64_t result = (*(uint64_t (**)(OZChannelObjectRootBase *))(*(void *)this + 664))(this);
  if (result)
  {
    CMTime time = *(CMTime *)((unsigned char *)a2 + 1);
    double Seconds = CMTimeGetSeconds(&time);
    CMTime v10 = *(CMTime *)((char *)this + 176);
    Float64 v7 = CMTimeGetSeconds(&v10);
    uint64_t result = (*(uint64_t (**)(OZChannelObjectRootBase *, double))(*(void *)this + 672))(this, Seconds / v7);
  }
  if ((OZChannelObjectRootBase *)((char *)this + 152) != a2)
  {
    long long v8 = *(_OWORD *)a2;
    *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = *((void *)a2 + 2);
    *(_OWORD *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = v8;
    long long v9 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 24) = *((void *)a2 + 5);
    *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v9;
  }
  return result;
}

uint64_t OZChannelObjectRootBase::wasChannelModified(OZChannelObjectRootBase *this, OZChannelBase *a2, BOOL *a3)
{
  return 1;
}

uint64_t OZChannelObjectRootBase::shouldAddKeypointAt0(OZChannelObjectRootBase *this, const CMTime *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelAffectedByBehaviors(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelAffectedBySelectedBehaviors(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

uint64_t OZChannelObjectRootBase::isChannelRigged(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return 0;
}

BOOL OZChannelObjectRootBase::isObjectSelected(OZChannelBase *this)
{
  return OZChannelBase::testFlag(this, 1);
}

double OZChannelObjectRootBase::adjustToFrameDuration(OZChannelObjectRootBase *this, const CMTime *a2)
{
  OZChannelFolder::adjustToFrameDuration((OZChannelFolder *)this, a2);
  long long v5 = *(_OWORD *)((char *)this + 152);
  uint64_t v6 = *((void *)this + 21);
  operator*((long long *)&a2->value, (uint64_t)&v5, (uint64_t)&v7);
  *(_OWORD *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = v7;
  *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = v8;
  long long v5 = *((_OWORD *)this + 11);
  uint64_t v6 = *((void *)this + 24);
  operator*((long long *)&a2->value, (uint64_t)&v5, (uint64_t)&v7);
  double result = *(double *)&v7;
  *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v7;
  *((void *)this + 24) = v8;
  return result;
}

OZChannelObjectRootBase *OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(OZChannelObjectRootBase *this, OZChannelFolder *a2, PCSerializerWriteStream *a3)
{
  CFTypeRef v3 = (const void ***)*((void *)this + 14);
  if (v3)
  {
    for (CFIndex i = *v3; i != v3[1]; ++i)
    {
      uint64_t v6 = *i;
      if (*i)
      {
        if (!v7
          || (this = (OZChannelObjectRootBase *)(*(uint64_t (**)(void *, OZChannelFolder *, void))(*(void *)v7 + 416))(v7, a2, 0), (uint64_t v6 = *i) != 0))
        {
          if (this) {
            BOOL v10 = v8 == 0;
          }
          else {
            BOOL v10 = 0;
          }
          if (v10) {
            this = (OZChannelObjectRootBase *)OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(this, a2, v9);
          }
        }
      }
    }
  }
  return this;
}

uint64_t OZChannelObjectRootBase::writeBody(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 150);
  if (*((unsigned char *)this + 201))
  {
    CMTime v20 = *(CMTime *)((char *)this + 152);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(void *)a2 + 208))(a2, 1, &v20);
    (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(void *)this + 880))(&v16, this);
    CMTime v20 = *(CMTime *)((char *)this + 152);
    CMTime v19 = *(CMTime *)((char *)this + 176);
    PC_CMTimeSaferAdd(&v20, &v19, (uint64_t)&v18);
    CMTime v20 = v18;
    CMTime v19 = v16;
    double v10 = PC_CMTimeSaferSubtract(&v20, &v19, (uint64_t)v17);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, unsigned char *, double))(*(void *)a2 + 208))(a2, 2, v17, v10);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 208))(a2, 3, (char *)this + 128);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((void *)this + 7);
  int v12 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2);
  uint64_t v13 = 0x40000;
  if (!v12) {
    uint64_t v13 = -45069;
  }
  uint64_t v14 = v13 & v11;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 152);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 72))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if ((OZChannelBase::isEnabled((OZChannelBase *)this, 0, 0) & 1) == 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 153);
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 154);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZChannelObjectRootBase::writeBody(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelObjectRootBase::writeBody((OZChannelObjectRootBase *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelObjectRootBase::serializeSelfOnly(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 150);
  if (*((unsigned char *)this + 201))
  {
    CMTime v14 = *(CMTime *)((char *)this + 152);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(void *)a2 + 208))(a2, 1, &v14);
    (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(void *)this + 880))(&v10, this);
    CMTime v14 = *(CMTime *)((char *)this + 152);
    CMTime v13 = *(CMTime *)((char *)this + 176);
    PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v12);
    CMTime v14 = v12;
    CMTime v13 = v10;
    double v4 = PC_CMTimeSaferSubtract(&v14, &v13, (uint64_t)v11);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, unsigned char *, double))(*(void *)a2 + 208))(a2, 2, v11, v4);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 208))(a2, 3, (char *)this + 128);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned int *)this + 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 151);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  unsigned int v6 = *((_DWORD *)this + 14);
  if ((*(unsigned int (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2)) {
    int v7 = 0x40000;
  }
  else {
    int v7 = -45069;
  }
  uint64_t v8 = v7 & v6;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 152);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if ((OZChannelBase::isEnabled((OZChannelBase *)this, 0, 0) & 1) == 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 153);
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (OZChannelBase::isLocked((OZChannelBase *)this, 0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 154);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelObjectRootBase::calcHashForStateSelfOnly(OZChannelObjectRootBase *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t v5 = *((void *)this + 7) & 0x48000;
  (*(void (**)(PCSerializerWriteStream *, void, const CMTime *))(*(void *)a2 + 16))(a2, 0, a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 72))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((_DWORD *)this + 30) & 0xFFF8DFF0;
  (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 16))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(void *__return_ptr, OZChannelObjectRootBase *))(*(void *)this + 320))(v8, this);
  (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 16))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *, void *))(*(void *)a2 + 112))(a2, v8);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
}

uint64_t OZChannelObjectRootBase::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootBaseScope);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelObjectRootBase::parseBegin(OZChannelObjectRootBase *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 184) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootBaseScope);
  return 1;
}

uint64_t OZChannelObjectRootBase::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  if (*((unsigned char *)this + 200)) {
    (*(void (**)(OZChannelFolder *, uint64_t, uint64_t))(*(void *)this + 96))(this, 1, 1);
  }
  *((unsigned char *)this + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  return 1;
}

uint64_t non-virtual thunk to'OZChannelObjectRootBase::parseEnd(OZChannelObjectRootBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelObjectRootBase::parseElement(OZChannelObjectRootBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  Float64 v18 = 0.0;
  unsigned int v17 = 0;
  __int16 v16 = 0;
  OZChannelFolder::parseElement((OZChannelFolder *)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 0x96:
      uint64_t v6 = *(void *)a3;
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v6 + 144))(a3, 1, &v18))
        {
          CMTime v22 = *(CMTime *)((char *)a2 + 112);
          operator*(&v22, &v23, v18);
          *(CMTime *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = v23;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(void *)a3 + 144))(a3, 2, &v18))
        {
          CMTime v14 = *(CMTime *)((char *)a2 + 112);
          operator*(&v14, &v15, v18);
          *(_OWORD *)&v13.CMTimeValue value = *((_OWORD *)a2 + 7);
          v13.CMTimeEpoch epoch = *((void *)a2 + 16);
          CMTime v23 = v15;
          CMTime v22 = *(CMTime *)((char *)this + 152);
          PC_CMTimeSaferSubtract(&v23, &v22, (uint64_t)&v19);
          CMTime v23 = v19;
          CMTime v22 = v13;
          PC_CMTimeSaferAdd(&v23, &v22, (uint64_t)&v20);
          *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v20;
          *((void *)this + 24) = v21;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(void *)a3 + 144))(a3, 3, &v18))
        {
          CMTime v22 = *(CMTime *)((char *)a2 + 112);
          operator*(&v22, &v23, v18);
          *((_OWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = *(_OWORD *)&v23.value;
          CMTimeEpoch epoch = v23.epoch;
LABEL_32:
          *((void *)this + 1OZSpline::reparametrize((uint64_t)this + 8) = epoch;
        }
      }
      else
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(v6 + 168))(a3, 1, &v15)) {
          *(CMTime *)((char *)this + 15OZChannelEnum::~OZChannelEnum(this - 2) = v15;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(void *)a3 + 168))(a3, 2, &v15))
        {
          if (*((unsigned char *)a2 + 144)) {
            CMTime v14 = *(CMTime *)((char *)a2 + 112);
          }
          else {
            (*(void (**)(CMTime *__return_ptr, OZChannelObjectRootBase *))(*(void *)this + 880))(&v14, this);
          }
          CMTime v23 = v15;
          CMTime v22 = *(CMTime *)((char *)this + 152);
          PC_CMTimeSaferSubtract(&v23, &v22, (uint64_t)&v19);
          CMTime v23 = v19;
          CMTime v22 = v14;
          PC_CMTimeSaferAdd(&v23, &v22, (uint64_t)&v20);
          *((_OWORD *)this + 1atomic_store(0, (unint64_t *)this + 1) = v20;
          *((void *)this + 24) = v21;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(void *)a3 + 168))(a3, 3, &v15))
        {
          *((_OWORD *)this + OZSpline::reparametrize((uint64_t)this + 8) = *(_OWORD *)&v15.value;
          CMTimeEpoch epoch = v15.epoch;
          goto LABEL_32;
        }
      }
      return 1;
    case 0x97:
      if ((*(unsigned int (**)(PCStreamElement *, unsigned int *))(*(void *)a3 + 32))(a3, &v17)) {
        *((_DWORD *)this + 3OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v17;
      }
      return 1;
    case 0x98:
      if ((*(unsigned int (**)(PCStreamElement *, unsigned int *))(*(void *)a3 + 32))(a3, &v17))
      {
        if (OZChannelBase::testFlag((OZChannelBase *)this, 0x8000)) {
          int v7 = 0x8000;
        }
        else {
          int v7 = 0;
        }
        unsigned int v17 = v17 & 0xFFFF7FFF | v7;
        BOOL v8 = OZChannelBase::testFlag((OZChannelBase *)this, 4);
        unsigned int v9 = v17 & 0xFFFFCFFB;
        if (v8) {
          int v10 = 12292;
        }
        else {
          int v10 = 12288;
        }
        unsigned int v17 = v10 | v9;
        OZChannelBase::setFlags((OZChannelBase *)this, v10 | v9);
      }
      return 1;
    case 0x99:
      if ((*(unsigned int (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)&v16 + 1)) {
        (*(void (**)(OZChannelObjectRootBase *, void, void))(*(void *)this + 104))(this, HIBYTE(v16), 0);
      }
      return 1;
    case 0x9A:
      if ((*(unsigned int (**)(PCStreamElement *, __int16 *))(*(void *)a3 + 72))(a3, &v16)) {
        *((unsigned char *)this + 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v16;
      }
      return 1;
    default:
      return 1;
  }
}

uint64_t non-virtual thunk to'OZChannelObjectRootBase::parseElement(OZChannelObjectRootBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__CFString *OZChannelObjectRootBase::getObjCWrapperName(OZChannelObjectRootBase *this)
{
  return @"CHChannelObjectRootBase";
}

__n128 OZChannelObjectRootBase::getTimeExtent@<Q0>(OZChannelObjectRootBase *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 152);
  *(void *)(a2 + 16) = *((void *)this + 21);
  __n128 result = *((__n128 *)this + 11);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *((void *)this + 24);
  return result;
}

uint64_t OZChannelObjectRootBase::getTimeExtentForChannel(OZChannelObjectRootBase *this, const OZChannelBase *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 712))();
}

__n128 OZChannelObjectRootBase::getCurrentTime@<Q0>(OZChannelObjectRootBase *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t Instance = OZCoreGlobals::getInstance(this);
  __n128 result = *(__n128 *)(Instance + 12);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(Instance + 28);
  return result;
}

CMTime *OZChannelObjectRootBase::getFrameDuration@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1, 30);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  *(void *)uint64_t v11 = &unk_1F1100CF0;
  *((void *)v11 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1101050;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v11);
  if (a8)
  {
    uint64_t v13 = *((void *)this + 17);
  }
  else
  {
    uint64_t v13 = OZChannelDouble::_OZChannelDoubleInfo;
    *((void *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((void *)this + 16) = v13;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a7)
  {
    uint64_t v14 = *((void *)this + 15);
  }
  else
  {
    uint64_t v14 = OZChannelDouble::_OZChannelDoubleImpl;
    *((void *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((void *)this + 14) = v14;
}

void sub_1B79FB05C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelDoubleOverRange_Factory::getInstance(this);
  OZChannelDouble::OZChannelDouble(this, Instance, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F110D188;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D538;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelDoubleOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelDoubleOverRange *, void))(*(void *)this + 288))(this, 0);
  (*(void (**)(OZChannelDoubleOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FB1DC(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelDouble::OZChannelDouble(this, a2, a3, a4, 0, 0);
  *(void *)uint64_t v5 = &unk_1F110D188;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D538;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelDoubleOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelDoubleOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FB2E0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::OZChannelDoubleOverRange(OZChannelDoubleOverRange *this, const OZChannelDoubleOverRange *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&unk_1F110D188;
  v4[2].var0 = (__CFString *)&unk_1F110D538;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B79FB37C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleOverRange::getValueOverRangeAsDouble(OZChannel *this, const CMTime *a2, Float64 a3)
{
  OZFigTimeForChannelSeconds(&v7, a3, 0x40000);
  CMTime v6 = *a2;
  double Seconds = CMTimeGetSeconds(&v6);
  OZChannel::getValueAsDouble(this, &v7, Seconds);
}

uint64_t OZChannelDoubleOverRange::writeBody(OZChannelDoubleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B79FB4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelDoubleOverRange::writeBody(OZChannelDoubleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelDoubleOverRange::writeBody((OZChannelDoubleOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelDoubleOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelDoubleOverRange::parseBegin(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelDoubleOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E4F1FA48]);
  }
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelDoubleOverRange::parseEnd(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelDoubleOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 160) {
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelDoubleOverRange::parseElement(OZChannelDoubleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZChannelDoubleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZChannelDoubleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelDoubleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelDoubleOverRange::hasKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, void))(*(void *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelDoubleOverRange::allHaveKeypointsAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(void *)this + 576))(this, &v4);
}

uint64_t OZChannelDoubleOverRange::addKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(void *)this + 600))(this, &v4);
}

void *OZChannelDoubleOverRange::moveKeypointTo(OZChannelDoubleOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(void *(**)(void *__return_ptr, OZChannelDoubleOverRange *, CMTime *, CMTime *, uint64_t, void))(*(void *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelDoubleOverRange::deleteKeypointAt(OZChannelDoubleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *))(*(void *)this + 608))(this, &v4);
}

uint64_t OZChannelDoubleOverRange::previousKeypoint(OZChannelDoubleOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, void))(*(void *)this + 624))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

uint64_t OZChannelDoubleOverRange::nextKeypoint(OZChannelDoubleOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelDoubleOverRange *, CMTime *, void))(*(void *)this + 632))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

BOOL OZChannelDoubleOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelDoubleOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelDoubleOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }

  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelDoubleOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }
  *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&a3->value;
  a6->CMTimeEpoch epoch = a3->epoch;
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    uint64_t v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelDoubleOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    return (void *)OZChannel::deleteKeyframe(this, result);
  }
  return result;
}

double OZChannelDoubleOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelDoubleOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelDoubleOverRange::resetToDefault(OZChannel *this, char a2)
{
  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E4F1FA48]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelDoubleOverRange::getBakeParameters(OZChannelDoubleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8 = *(void *)this;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  (*(void (**)(void))(v8 + 816))();
  if (a3)
  {
    CMTime time = v14;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    CMTime v10 = v13;
    *a4 = CMTimeGetSeconds(&v10);
  }
  if (a5)
  {
    CMTime v9 = v12;
    *a5 = CMTimeGetSeconds(&v9);
  }
}

double OZChannelDoubleOverRange::getBakeParameters(OZChannelDoubleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&a3->CMTimeValue value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  double result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

__CFString *OZChannelDoubleOverRange::getObjCWrapperName(OZChannelDoubleOverRange *this)
{
  return @"CHChannelDouble";
}

void OZChannelAngle::OZChannelAngle(OZChannelAngle *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, a7, a8);
  v11->var0 = (void **)&unk_1F11010C0;
  v11->var2 = (void **)&unk_1F1101420;
  OZChannelAngleInfo = (OZChannelAngle *)OZChannelAngle::createOZChannelAngleInfo(v11);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
  }
  this->var16 = var17;
  OZChannelAngle::createOZChannelAngleImpl(OZChannelAngleInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
  }
  this->var14 = var15;
}

void sub_1B79FC118(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  uint64_t Instance = (OZFactory *)OZChannelAngleOverRange_Factory::getInstance(this);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, Instance, a2, a3, a4, a5, a6, a7);
  *(void *)this = &unk_1F110D590;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D940;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FC24C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelAngleOverRange_Factory::getInstance(this);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, Instance, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F110D590;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D940;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelAngleOverRange *, void))(*(void *)this + 288))(this, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FC3E0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this, a2, a3, a4, 0, 0);
  *(void *)CMTime v5 = &unk_1F110D590;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110D940;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelAngleOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelAngleOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FC4E4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngleOverRange::OZChannelAngleOverRange(OZChannelAngleOverRange *this, const OZChannelAngleOverRange *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&unk_1F110D590;
  v4[2].var0 = (__CFString *)&unk_1F110D940;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B79FC580(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAngleOverRange::setValueOverRange(OZChannel *this, Float64 a2, Float64 a3, double a4)
{
  OZFigTimeForChannelSeconds(&v8, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return OZChannel::setKeyframe(this, &v9, a4, 1);
}

void OZChannelAngleOverRange::getValueOverRangeAsDouble(OZChannel *this, Float64 a2, Float64 a3)
{
  OZFigTimeForChannelSeconds(&v5, a2, 0x40000);
  OZChannelDoubleOverRange::getValueOverRangeAsDouble(this, &v5, a3);
}

uint64_t OZChannelAngleOverRange::writeBody(OZChannelAngleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B79FC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelAngleOverRange::writeBody(OZChannelAngleOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelAngleOverRange::writeBody((OZChannelAngleOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelAngleOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelAngleOverRange::parseBegin(OZChannelAngleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelAngleOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E4F1FA48]);
  }
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelAngleOverRange::parseEnd(OZChannelAngleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelAngleOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 160) {
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelAngleOverRange::parseElement(OZChannelAngleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZChannelAngleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZChannelAngleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelAngleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelAngleOverRange::hasKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, void))(*(void *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelAngleOverRange::allHaveKeypointsAt(OZChannelAngleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(void *)this + 576))(this, &v4);
}

uint64_t OZChannelAngleOverRange::addKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(void *)this + 600))(this, &v4);
}

void *OZChannelAngleOverRange::moveKeypointTo(OZChannelAngleOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(void *(**)(void *__return_ptr, OZChannelAngleOverRange *, CMTime *, CMTime *, uint64_t, void))(*(void *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelAngleOverRange::deleteKeypointAt(OZChannelAngleOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *))(*(void *)this + 608))(this, &v4);
}

uint64_t OZChannelAngleOverRange::previousKeypoint(OZChannelAngleOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, void))(*(void *)this + 624))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

uint64_t OZChannelAngleOverRange::nextKeypoint(OZChannelAngleOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelAngleOverRange *, CMTime *, void))(*(void *)this + 632))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

BOOL OZChannelAngleOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelAngleOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelAngleOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }

  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelAngleOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }
  *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&a3->value;
  a6->CMTimeEpoch epoch = a3->epoch;
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    CMTime v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelAngleOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    return (void *)OZChannel::deleteKeyframe(this, result);
  }
  return result;
}

double OZChannelAngleOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelAngleOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelAngleOverRange::resetToDefault(OZChannel *this, char a2)
{
  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E4F1FA48]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelAngleOverRange::getBakeParameters(OZChannelAngleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8 = *(void *)this;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  (*(void (**)(void))(v8 + 816))();
  if (a3)
  {
    CMTime time = v14;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    CMTime v10 = v13;
    *a4 = CMTimeGetSeconds(&v10);
  }
  if (a5)
  {
    CMTime v9 = v12;
    *a5 = CMTimeGetSeconds(&v9);
  }
}

double OZChannelAngleOverRange::getBakeParameters(OZChannelAngleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&a3->CMTimeValue value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  double result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

__CFString *OZChannelAngleOverRange::getObjCWrapperName(OZChannelAngleOverRange *this)
{
  return @"CHChannelAngle";
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelPercentOverRange_Factory::getInstance(this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, Instance, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F110D998;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110DD48;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((OZChannelPercentOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  (*(void (**)(OZChannelPercentOverRange *, void))(*(void *)this + 288))(this, 0);
  (*(void (**)(OZChannelPercentOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FD428(_Unwind_Exception *a1)
{
  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, a2, a3, a4, 0, 0);
  *(void *)CMTime v5 = &unk_1F110D998;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110DD48;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelPercentOverRange *)((char *)this + 152), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)this, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)this, 134414336, 0);
  (*(void (**)(OZChannelPercentOverRange *))(*(void *)this + 128))(this);
}

void sub_1B79FD52C(_Unwind_Exception *a1)
{
  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelPercentOverRange::OZChannelPercentOverRange(OZChannelPercentOverRange *this, const OZChannelPercentOverRange *a2, OZChannelFolder *a3)
{
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this, (const OZChannelBase *)a2, a3);
  v4->var0 = (__CFString *)&unk_1F110D998;
  v4[2].var0 = (__CFString *)&unk_1F110DD48;
  PCString::PCString(v4 + 19, (const PCString *)a2 + 19);
}

void sub_1B79FD5C8(_Unwind_Exception *a1)
{
  OZChanObjectRef::~OZChanObjectRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPercentOverRange::writeBody(OZChannelPercentOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannel::writeBody((OZChannel *)this, a2, a3);
  PCString::PCString(&v7, (const PCString *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v7);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B79FD6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelPercentOverRange::writeBody(OZChannelPercentOverRange *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelPercentOverRange::writeBody((OZChannelPercentOverRange *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelPercentOverRange::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelPercentOverRange::parseBegin(OZChannelPercentOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelPercentOverRange::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::linearTimeWarp(this, 1.0 / *((double *)a2 + 17), MEMORY[0x1E4F1FA48]);
  }
  OZChannel::parseEnd(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelPercentOverRange::parseEnd(OZChannelPercentOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelPercentOverRange::parseElement(OZChannel *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 160) {
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[1]);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelPercentOverRange::parseElement(OZChannelPercentOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZChannelPercentOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZChannelPercentOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelPercentOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelPercentOverRange::hasKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, void))(*(void *)this + 568))(this, &v4, 0);
}

uint64_t OZChannelPercentOverRange::allHaveKeypointsAt(OZChannelPercentOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(void *)this + 576))(this, &v4);
}

uint64_t OZChannelPercentOverRange::addKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(void *)this + 600))(this, &v4);
}

void *OZChannelPercentOverRange::moveKeypointTo(OZChannelPercentOverRange *this, Float64 a2, Float64 a3, uint64_t a4)
{
  OZFigTimeForChannelSeconds(&v10, a2, 0x40000);
  OZFigTimeForChannelSeconds(&v9, a3, 0x40000);
  return (*(void *(**)(void *__return_ptr, OZChannelPercentOverRange *, CMTime *, CMTime *, uint64_t, void))(*(void *)this + 616))(v8, this, &v10, &v9, a4, 0);
}

uint64_t OZChannelPercentOverRange::deleteKeypointAt(OZChannelPercentOverRange *this, Float64 a2)
{
  OZFigTimeForChannelSeconds(&v4, a2, 0x40000);
  return (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *))(*(void *)this + 608))(this, &v4);
}

uint64_t OZChannelPercentOverRange::previousKeypoint(OZChannelPercentOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, void))(*(void *)this + 624))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

uint64_t OZChannelPercentOverRange::nextKeypoint(OZChannelPercentOverRange *this, double *a2)
{
  memset(&v7, 0, sizeof(v7));
  if (a2) {
    OZFigTimeForChannelSeconds(&v7, *a2, 0x40000);
  }
  else {
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  uint64_t v4 = (*(uint64_t (**)(OZChannelPercentOverRange *, CMTime *, void))(*(void *)this + 632))(this, &v7, 0);
  if (a2)
  {
    CMTime v6 = v7;
    *a2 = CMTimeGetSeconds(&v6);
  }
  return v4;
}

BOOL OZChannelPercentOverRange::hasKeypointAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

BOOL OZChannelPercentOverRange::allHaveKeypointsAt(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getKeyframe(this, a2) != 0;
}

uint64_t OZChannelPercentOverRange::addKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }

  return OZChannel::setKeyframe(this, a2);
}

void *OZChannelPercentOverRange::moveKeypointTo@<X0>(OZChannel *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  if (((*((uint64_t (**)(OZChannel *))this->var0 + 61))(this) & 1) == 0) {
    (*((void (**)(OZChannel *, uint64_t))this->var0 + 60))(this, 1);
  }
  *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&a3->value;
  a6->CMTimeEpoch epoch = a3->epoch;
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    CMTime v13 = result;
    (*((void (**)(OZChannel *, void *, CMTime *, uint64_t, uint64_t))this->var0 + 105))(this, result, a6, a5, a4);
    return (void *)OZChannel::getKeyframe(this, v13, a6, 0);
  }
  return result;
}

void *OZChannelPercentOverRange::deleteKeypointAt(OZChannel *this, const CMTime *a2)
{
  (*((void (**)(OZChannel *, uint64_t))this->var0 + 58))(this, 1);
  __n128 result = (void *)OZChannel::getKeyframe(this, a2);
  if (result)
  {
    return (void *)OZChannel::deleteKeyframe(this, result);
  }
  return result;
}

double OZChannelPercentOverRange::previousKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getPreviousKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

double OZChannelPercentOverRange::nextKeypoint(OZChannel *this, CMTime *a2)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v4 = 0.0;
  if (OZChannel::getNextKeyframe(this, a2, &v5, &v4))
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t OZChannelPercentOverRange::resetToDefault(OZChannel *this, char a2)
{
  OZChannel::resetToDefault(this, a2);
  OZChannel::setKeyframe(this, MEMORY[0x1E4F1FA48]);
  CMTimeMake(&v4, 1, 1);
  return OZChannel::setKeyframe(this, &v4);
}

void OZChannelPercentOverRange::getBakeParameters(OZChannelPercentOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8 = *(void *)this;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  (*(void (**)(void))(v8 + 816))();
  if (a3)
  {
    CMTime time = v14;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    CMTime v10 = v13;
    *a4 = CMTimeGetSeconds(&v10);
  }
  if (a5)
  {
    CMTime v9 = v12;
    *a5 = CMTimeGetSeconds(&v9);
  }
}

double OZChannelPercentOverRange::getBakeParameters(OZChannelPercentOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&a3->CMTimeValue value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  double result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

__CFString *OZChannelPercentOverRange::getObjCWrapperName(OZChannelPercentOverRange *this)
{
  return @"CHChannelPercent";
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  uint64_t Instance = (OZFactory *)OZChannel2DOverRange_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a4, a5, a6, a7, 2, a8, a9);
  *(void *)this = &unk_1F110DDA0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E118;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((OZChannel2DOverRange *)((char *)this + 440), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), a2);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B79FE3C8(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel2D::OZChannel2D(this, a2, a3, a4, 2, 0, 0);
  *(void *)CMTime v5 = &unk_1F110DDA0;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E118;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannel2DOverRange *)((char *)this + 440), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B79FE4E0(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::OZChannel2DOverRange(OZChannel2DOverRange *this, const PCString *a2, OZChannelFolder *a3)
{
  OZChannel2D::OZChannel2D(this, (const OZChannel2D *)a2, a3);
  v4->var0 = (__CFString *)&unk_1F110DDA0;
  v4[2].var0 = (__CFString *)&unk_1F110E118;
  PCString::PCString(v4 + 55, a2 + 55);
}

void sub_1B79FE57C(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannel2DOverRange::getValueOverRange(OZChannel2DOverRange *this, Float64 a2, Float64 a3, double *a4, double *a5)
{
  OZFigTimeForChannelSeconds(&v9, a2, 0x40000);
  OZChannel2DOverRange::getValueOverRange(this, &v9, a3, a4, a5);
}

void OZChannel2DOverRange::getValueOverRange(OZChannel2DOverRange *this, const CMTime *a2, Float64 a3, double *a4, double *a5)
{
  OZFigTimeForChannelSeconds(&v14, a3, 0x40000);
  CMTime v13 = *a2;
  double Seconds = CMTimeGetSeconds(&v13);
  double v10 = Seconds;
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), &v14, Seconds);
    *(void *)a4 = v11;
  }
  if (a5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), &v14, v10);
    *(void *)a5 = v12;
  }
}

uint64_t OZChannel2DOverRange::writeBody(OZChannel2DOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
  PCString::PCString(&v11, (const PCString *)this + 55);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v11);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B79FE7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannel2DOverRange::writeBody(OZChannel2DOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannel2DOverRange::writeBody((OZChannel2DOverRange *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannel2DOverRange::parseBegin(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseBegin((OZChannelFolder *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  CMTime v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 136), MEMORY[0x1E4F1FA48]);
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 288), v4);
  return 1;
}

uint64_t non-virtual thunk to'OZChannel2DOverRange::parseBegin(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannel2DOverRange::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    CMTime v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 136), 1.0 / *((double *)a2 + 17), MEMORY[0x1E4F1FA48]);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 288), 1.0 / *((double *)a2 + 17), v4);
  }
  OZChannelFolder::parseEnd(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZChannel2DOverRange::parseEnd(OZChannel2DOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannel2DOverRange::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 160) {
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 440);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannel2DOverRange::parseElement(OZChannel2DOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZChannel2DOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZChannel2DOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannel2DOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannel2DOverRange::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t v2 = this;
  OZChannelFolder::resetToDefault(this, a2);
  CFTypeRef v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), MEMORY[0x1E4F1FA48]);
  CMTimeMake(&v5, 1, 1);
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), &v5);
  uint64_t v2 = (OZChannelFolder *)((char *)v2 + 288);
  OZChannel::setKeyframe((OZChannel *)v2, v3);
  CMTimeMake(&v5, 1, 1);
  return OZChannel::setKeyframe((OZChannel *)v2, &v5);
}

void OZChannel2DOverRange::getBakeParameters(OZChannel2DOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8 = *(void *)this;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  (*(void (**)(void))(v8 + 864))();
  if (a3)
  {
    CMTime time = v14;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    CMTime v10 = v13;
    *a4 = CMTimeGetSeconds(&v10);
  }
  if (a5)
  {
    CMTime v9 = v12;
    *a5 = CMTimeGetSeconds(&v9);
  }
}

double OZChannel2DOverRange::getBakeParameters(OZChannel2DOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&a3->CMTimeValue value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  double result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

uint64_t OZChannel2DOverRange::moveKeypointTo@<X0>(uint64_t this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  CMTime v13 = *a2;
  *a6 = *a3;
  long long v7 = *(const void ****)(this + 112);
  if (v7)
  {
    uint64_t v8 = *v7;
    CMTime v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        if (*v8) {
        else
        }
          CMTime v12 = 0;
        (*((void (**)(OZChannel *, uint64_t))v12->var0 + 58))(v12, 1);
        if (((*((uint64_t (**)(OZChannel *))v12->var0 + 61))(v12) & 1) == 0) {
          (*((void (**)(OZChannel *, uint64_t))v12->var0 + 60))(v12, 1);
        }
        this = OZChannel::getKeyframe(v12, &v13);
        if (this) {
          this = (*((uint64_t (**)(OZChannel *, uint64_t, CMTime *, uint64_t, uint64_t))v12->var0 + 105))(v12, this, a6, a5, a4);
        }
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return this;
}

__CFString *OZChannel2DOverRange::getObjCWrapperName(OZChannel2DOverRange *this)
{
  return @"CHChannel2D";
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  uint64_t Instance = (OZFactory *)OZChannelScaleOverRange_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a2, a3, a4, a5, 2, a6, a7);
  *(void *)this = &unk_1F110E170;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E4E8;
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B79FEEDC(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  uint64_t Instance = (OZFactory *)OZChannelScaleOverRange_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a4, a5, a6, a7, 2, a8, a9);
  *(void *)this = &unk_1F110E170;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E4E8;
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), a2);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 288), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B79FF080(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *(void *)CMTime v5 = &unk_1F110E170;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E4E8;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((OZChannelScaleOverRange *)((char *)this + 440), @"Channel Over Range Range Name");
  OZChannel::setDiscrete((OZChannel *)((char *)this + 136), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 288), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 134414336, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 288), 134414336, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 136));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 288));
}

void sub_1B79FF18C(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScaleOverRange::OZChannelScaleOverRange(OZChannelScaleOverRange *this, const PCString *a2, OZChannelFolder *a3)
{
  OZChannelScale::OZChannelScale(this, (const OZChannelScale *)a2, a3);
  v4->var0 = (__CFString *)&unk_1F110E170;
  v4[2].var0 = (__CFString *)&unk_1F110E4E8;
  PCString::PCString(v4 + 55, a2 + 55);
}

void sub_1B79FF228(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelScaleOverRange::setValueOverRange(OZChannelScaleOverRange *this, Float64 a2, Float64 a3, double a4, double a5)
{
  OZFigTimeForChannelSeconds(&v11, a2, 0x40000);
  return OZChannelScaleOverRange::setValueOverRange(this, v9, a3, a4, a5);
}

uint64_t OZChannelScaleOverRange::setValueOverRange(OZChannelScaleOverRange *this, const CMTime *a2, Float64 a3, double a4, double a5)
{
  CMTime v9 = (OZChannel *)((char *)this + 136);
  OZFigTimeForChannelSeconds(&v11, a3, 0x40000);
  OZChannel::setKeyframe(v9, &v11, a4, 1);
  OZFigTimeForChannelSeconds(&v11, a3, 0x40000);
  return OZChannel::setKeyframe((OZChannel *)((char *)this + 288), &v11, a5, 1);
}

uint64_t OZChannelScaleOverRange::writeBody(OZChannelScaleOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelOverRangeScope);
  OZChannelFolder::writeBody((OZChannelFolder *)this, a2, a3, a4, a5);
  PCString::PCString(&v11, (const PCString *)this + 55);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 160);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v11);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B79FF440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelScaleOverRange::writeBody(OZChannelScaleOverRange *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelScaleOverRange::writeBody((OZChannelScaleOverRange *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelScaleOverRange::parseBegin(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  OZChannelFolder::parseBegin((OZChannelFolder *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelOverRangeScope);
  CMTime v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 136), MEMORY[0x1E4F1FA48]);
  OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 288), v4);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelScaleOverRange::parseBegin(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelScaleOverRange::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    CMTime v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 136), 1.0 / *((double *)a2 + 17), MEMORY[0x1E4F1FA48]);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 288), 1.0 / *((double *)a2 + 17), v4);
  }
  OZChannelFolder::parseEnd(this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZChannelScaleOverRange::parseEnd(OZChannelScaleOverRange *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelScaleOverRange::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 160) {
    PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 440);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelScaleOverRange::parseElement(OZChannelScaleOverRange *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

__n128 OZChannelScaleOverRange::getTimeOffset@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZChannelScaleOverRange::globalToLocalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

__n128 OZChannelScaleOverRange::localToGlobalTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

uint64_t OZChannelScaleOverRange::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t v2 = this;
  OZChannelFolder::resetToDefault(this, a2);
  CFTypeRef v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), MEMORY[0x1E4F1FA48]);
  CMTimeMake(&v5, 1, 1);
  OZChannel::setKeyframe((OZChannel *)((char *)v2 + 136), &v5);
  uint64_t v2 = (OZChannelFolder *)((char *)v2 + 288);
  OZChannel::setKeyframe((OZChannel *)v2, v3);
  CMTimeMake(&v5, 1, 1);
  return OZChannel::setKeyframe((OZChannel *)v2, &v5);
}

void OZChannelScaleOverRange::getBakeParameters(OZChannelScaleOverRange *this, const PCTimeRange *a2, double *a3, double *a4, double *a5)
{
  uint64_t v8 = *(void *)this;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  (*(void (**)(void))(v8 + 864))();
  if (a3)
  {
    CMTime time = v14;
    *a3 = CMTimeGetSeconds(&time);
  }
  if (a4)
  {
    CMTime v10 = v13;
    *a4 = CMTimeGetSeconds(&v10);
  }
  if (a5)
  {
    CMTime v9 = v12;
    *a5 = CMTimeGetSeconds(&v9);
  }
}

double OZChannelScaleOverRange::getBakeParameters(OZChannelScaleOverRange *this, const PCTimeRange *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&a3->CMTimeValue value = v7;
  CMTimeMake(&v9, 1, 1);
  *a4 = v9;
  OZFigTimeForChannelSeconds(&v9, 0.0005, 0x40000);
  double result = *(double *)&v9.value;
  *a5 = v9;
  return result;
}

uint64_t OZChannelScaleOverRange::moveKeypointTo@<X0>(uint64_t this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  CMTime v13 = *a2;
  *a6 = *a3;
  long long v7 = *(const void ****)(this + 112);
  if (v7)
  {
    uint64_t v8 = *v7;
    CMTime v9 = v7[1];
    if (*v7 != v9)
    {
      do
      {
        if (*v8) {
        else
        }
          CMTime v12 = 0;
        (*((void (**)(OZChannel *, uint64_t))v12->var0 + 58))(v12, 1);
        if (((*((uint64_t (**)(OZChannel *))v12->var0 + 61))(v12) & 1) == 0) {
          (*((void (**)(OZChannel *, uint64_t))v12->var0 + 60))(v12, 1);
        }
        this = OZChannel::getKeyframe(v12, &v13);
        if (this) {
          this = (*((uint64_t (**)(OZChannel *, uint64_t, CMTime *, uint64_t, uint64_t))v12->var0 + 105))(v12, this, a6, a5, a4);
        }
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return this;
}

__CFString *OZChannelScaleOverRange::getObjCWrapperName(OZChannelScaleOverRange *this)
{
  return @"CHChannelScale";
}

void OZChannelDoubleOverRange::~OZChannelDoubleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F110D188;
  this[2].var0 = (__CFString *)&unk_1F110D538;
  PCString::~PCString(this + 19);

  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  this->var0 = (__CFString *)&unk_1F110D188;
  this[2].var0 = (__CFString *)&unk_1F110D538;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelDoubleOverRange::getRangeName(const PCString *this@<X0>, PCString *a2@<X8>)
{
}

void OZChannelDoubleOverRange::setRangeName(PCString *this, const PCString *a2)
{
}

void non-virtual thunk to'OZChannelDoubleOverRange::~OZChannelDoubleOverRange(PCString *this)
{
  uint64_t v1 = (OZChannel *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D188;
  this->var0 = (__CFString *)&unk_1F110D538;
  PCString::~PCString(this + 17);

  OZChannel::~OZChannel(v1);
}

{
  OZChannel *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannel *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D188;
  this->var0 = (__CFString *)&unk_1F110D538;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelAngleOverRange::~OZChannelAngleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F110D590;
  this[2].var0 = (__CFString *)&unk_1F110D940;
  PCString::~PCString(this + 19);

  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  this->var0 = (__CFString *)&unk_1F110D590;
  this[2].var0 = (__CFString *)&unk_1F110D940;
  PCString::~PCString(this + 19);
  OZChannel::~OZChannel((OZChannel *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelAngleOverRange::~OZChannelAngleOverRange(PCString *this)
{
  uint64_t v1 = (OZChannel *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D590;
  this->var0 = (__CFString *)&unk_1F110D940;
  PCString::~PCString(this + 17);

  OZChannel::~OZChannel(v1);
}

{
  OZChannel *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannel *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D590;
  this->var0 = (__CFString *)&unk_1F110D940;
  PCString::~PCString(this + 17);
  OZChannel::~OZChannel(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelPercentOverRange::~OZChannelPercentOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F110D998;
  this[2].var0 = (__CFString *)&unk_1F110DD48;
  PCString::~PCString(this + 19);

  OZChanObjectRef::~OZChanObjectRef((OZChanObjectRef *)this);
}

{
  uint64_t vars8;

  this->var0 = (__CFString *)&unk_1F110D998;
  this[2].var0 = (__CFString *)&unk_1F110DD48;
  PCString::~PCString(this + 19);
  OZChanObjectRef::~OZChanObjectRef((OZChanObjectRef *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelPercentOverRange::~OZChannelPercentOverRange(PCString *this)
{
  uint64_t v1 = (OZChanObjectRef *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D998;
  this->var0 = (__CFString *)&unk_1F110DD48;
  PCString::~PCString(this + 17);

  OZChanObjectRef::~OZChanObjectRef(v1);
}

{
  OZChanObjectRef *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChanObjectRef *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110D998;
  this->var0 = (__CFString *)&unk_1F110DD48;
  PCString::~PCString(this + 17);
  OZChanObjectRef::~OZChanObjectRef(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannel2DOverRange::~OZChannel2DOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F110DDA0;
  this[2].var0 = (__CFString *)&unk_1F110E118;
  PCString::~PCString(this + 55);

  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
}

{
  uint64_t vars8;

  this->var0 = (__CFString *)&unk_1F110DDA0;
  this[2].var0 = (__CFString *)&unk_1F110E118;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannel2DOverRange::getRangeName(const PCString *this@<X0>, PCString *a2@<X8>)
{
}

void OZChannel2DOverRange::setRangeName(PCString *this, const PCString *a2)
{
}

void non-virtual thunk to'OZChannel2DOverRange::~OZChannel2DOverRange(PCString *this)
{
  uint64_t v1 = (OZChannel2D *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110DDA0;
  this->var0 = (__CFString *)&unk_1F110E118;
  PCString::~PCString(this + 53);

  OZChannel2D::~OZChannel2D(v1);
}

{
  OZChannel2D *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannel2D *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110DDA0;
  this->var0 = (__CFString *)&unk_1F110E118;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelScaleOverRange::~OZChannelScaleOverRange(PCString *this)
{
  this->var0 = (__CFString *)&unk_1F110E170;
  this[2].var0 = (__CFString *)&unk_1F110E4E8;
  PCString::~PCString(this + 55);

  OZChannel2D::~OZChannel2D((OZChannel2D *)this);
}

{
  uint64_t vars8;

  this->var0 = (__CFString *)&unk_1F110E170;
  this[2].var0 = (__CFString *)&unk_1F110E4E8;
  PCString::~PCString(this + 55);
  OZChannel2D::~OZChannel2D((OZChannel2D *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelScaleOverRange::~OZChannelScaleOverRange(PCString *this)
{
  uint64_t v1 = (OZChannel2D *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110E170;
  this->var0 = (__CFString *)&unk_1F110E4E8;
  PCString::~PCString(this + 53);

  OZChannel2D::~OZChannel2D(v1);
}

{
  OZChannel2D *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannel2D *)&this[-2];
  this[-2].var0 = (__CFString *)&unk_1F110E170;
  this->var0 = (__CFString *)&unk_1F110E4E8;
  PCString::~PCString(this + 53);
  OZChannel2D::~OZChannel2D(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B7A00548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  uint64_t Instance = (OZChannelPosition::OZChannelPosition_valueImpl *)OZChannelPosition_Factory::getInstance(this);
  __int16 v16 = (OZFactory *)Instance;
  if (!a7) {
    a7 = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(Instance);
  }
  OZChannel2D::OZChannel2D(this, v16, a2, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)this + 4atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((void *)this + 86) = 0;
  if (!a8)
  {
    Float64 v18 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v17);
    CMTime v19 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v18);
    long long v20 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v19);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v20);
  }
  *((unsigned char *)this + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B7A00744(_Unwind_Exception *a1)
{
  CMTime v4 = v2;
  PCSpinLock::~PCSpinLock(v4);
  CMTime v6 = (void *)*((void *)v1 + 84);
  if (v6)
  {
    *((void *)v1 + 85) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)v1 + 81);
  if (v7)
  {
    *((void *)v1 + 8OZChannelEnum::~OZChannelEnum(this - 2) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 78);
  if (v8)
  {
    *((void *)v1 + 79) = v8;
    operator delete(v8);
  }
  CMTime v9 = (void *)*((void *)v1 + 75);
  if (v9)
  {
    *((void *)v1 + 76) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v3;
  if (*v3)
  {
    *((void *)v1 + 73) = v10;
    operator delete(v10);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  uint64_t Instance = (OZChannelPosition::OZChannelPosition_valueImpl *)OZChannelPosition_Factory::getInstance(this);
  long long v20 = (OZFactory *)Instance;
  if (!a9) {
    a9 = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(Instance);
  }
  OZChannel2D::OZChannel2D(this, a2, a3, v20, a4, a5, a6, a7, a8, a9, a10);
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)this + 4atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((void *)this + 86) = 0;
  if (!a10)
  {
    CMTime v22 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v21);
    CMTime v23 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v22);
    PCString v24 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v23);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v24);
  }
  *((unsigned char *)this + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B7A00940(_Unwind_Exception *a1)
{
  PCSpinLock::~PCSpinLock(v2);
  CMTime v5 = (void *)*((void *)v1 + 84);
  if (v5)
  {
    *((void *)v1 + 85) = v5;
    operator delete(v5);
  }
  CMTime v6 = (void *)*((void *)v1 + 81);
  if (v6)
  {
    *((void *)v1 + 8OZChannelEnum::~OZChannelEnum(this - 2) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)v1 + 78);
  if (v7)
  {
    *((void *)v1 + 79) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 75);
  if (v8)
  {
    *((void *)v1 + 76) = v8;
    operator delete(v8);
  }
  CMTime v9 = *v3;
  if (*v3)
  {
    *((void *)v1 + 73) = v9;
    operator delete(v9);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5, OZChannelImpl *Instance, OZChannelInfo *a7)
{
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  if (!Instance) {
    uint64_t Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(this);
  }
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, Instance, a7);
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_DWORD *)this + 175) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)this + 4atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 4OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((void *)this + 86) = 0;
  if (!a7)
  {
    CMTime v14 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v13);
    CMTime v15 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v14);
    __int16 v16 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance((OZChannelPosition::OZChannelPosition_valueInfo *)v15);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v16);
  }
  *((unsigned char *)this + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
  *((_DWORD *)this + 174) = 0;
}

void sub_1B7A00AF4(_Unwind_Exception *a1)
{
  CMTime v4 = v2;
  PCSpinLock::~PCSpinLock(v4);
  CMTime v6 = (void *)*((void *)v1 + 84);
  if (v6)
  {
    *((void *)v1 + 85) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)v1 + 81);
  if (v7)
  {
    *((void *)v1 + 8OZChannelEnum::~OZChannelEnum(this - 2) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)v1 + 78);
  if (v8)
  {
    *((void *)v1 + 79) = v8;
    operator delete(v8);
  }
  CMTime v9 = (void *)*((void *)v1 + 75);
  if (v9)
  {
    *((void *)v1 + 76) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v3;
  if (*v3)
  {
    *((void *)v1 + 73) = v10;
    operator delete(v10);
  }
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition(OZChannelPosition *this, const OZChannelPosition *a2, OZChannelFolder *a3)
{
  OZChannel2D::OZChannel2D(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F110E5B8;
  *(void *)(v4 + 16) = &unk_1F110E910;
  *(void *)(v4 + 56OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(v4 + 52OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(v4 + 48OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(v4 + 44OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 51OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v4 + 576) = 0u;
  *(_OWORD *)(v4 + 59OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v4 + 60OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_OWORD *)(v4 + 64OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 67OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(v4 + 68OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *(unsigned char *)(v4 + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *((unsigned char *)a2 + 440);
}

void OZChannelPosition::~OZChannelPosition(OZChannelPosition *this)
{
  *(void *)this = &unk_1F110E5B8;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110E910;
  uint64_t v2 = (PCSpinLock *)((char *)this + 700);
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_DWORD *)this + 174) = 0;
  PCSpinLock::unlock(&v2->_lock);
  PCSpinLock::~PCSpinLock(v2);
  CFTypeRef v3 = (void *)*((void *)this + 84);
  if (v3)
  {
    *((void *)this + 85) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 81);
  if (v4)
  {
    *((void *)this + 8OZChannelEnum::~OZChannelEnum(this - 2) = v4;
    operator delete(v4);
  }
  CMTime v5 = (void *)*((void *)this + 78);
  if (v5)
  {
    *((void *)this + 79) = v5;
    operator delete(v5);
  }
  CMTime v6 = (void *)*((void *)this + 75);
  if (v6)
  {
    *((void *)this + 76) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 72);
  if (v7)
  {
    *((void *)this + 73) = v7;
    operator delete(v7);
  }

  OZChannel2D::~OZChannel2D(this);
}

{
  uint64_t vars8;

  OZChannelPosition::~OZChannelPosition(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelPosition::~OZChannelPosition(OZChannelPosition *this)
{
}

{
  uint64_t vars8;

  OZChannelPosition::~OZChannelPosition((OZChannelPosition *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelPosition::operator=(uint64_t a1, uint64_t a2)
{
  return a1;
}

void OZChannelPosition::clone(OZChannelPosition *this)
{
}

void sub_1B7A00E40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4011F1C4E7);
  _Unwind_Resume(a1);
}

void OZChannelPosition::copy(OZChannelPosition *this, const OZChannelBase *a2, char a3)
{
  if (a2)
  {
    if (v6)
    {
      long long v7 = v6;
      PCSpinLock::lock((os_unfair_lock_t)this + 175);
      *((unsigned char *)this + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v7[440];
      *((void *)this + 76) = *((void *)this + 75);
      *((void *)this + 73) = *((void *)this + 72);
      *((void *)this + 79) = *((void *)this + 78);
      *((void *)this + 8OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)this + 81);
      *((void *)this + 85) = *((void *)this + 84);
      *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
      *((void *)this + 66) = 0x3FF0000000000000;
      *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
      *((void *)this + 56) = 0x3FF0000000000000;
      *(_OWORD *)((char *)this + 456) = 0u;
      *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
      *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
      *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
      *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
      *(_OWORD *)((char *)this + 536) = 0u;
      *((_DWORD *)this + 174) = 0;
      PCSpinLock::unlock((os_unfair_lock_t)this + 175);
    }
  }

  OZChannel2D::copy(this, a2, a3);
}

uint64_t OZChannelPosition::setPosition(OZChannelPosition *this, const CMTime *a2, double a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);

  return OZChannelPosition::offsetPosition(this, a2, a3 - v9, a4 - v10);
}

uint64_t OZChannelPosition::offsetPosition(OZChannelPosition *this, const CMTime *a2, double a3, double a4)
{
  double v8 = (OZChannel *)((char *)this + 136);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 136), a2, (uint64_t)&v12);
  double CurveValue = OZChannel::getCurveValue(v8, &v12, 0);
  OZChannelBase::globalToLocalTime((OZChannelBase *)((char *)this + 288), a2, (uint64_t)&v12);
  double v10 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v12, 0);
  return OZChannel2D::setValue(this, a2, CurveValue + a3, v10 + a4);
}

const void *OZChannelPosition::willBeModified(OZChannelPosition *this, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)this + 700);
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  *((void *)this + 76) = *((void *)this + 75);
  *((void *)this + 73) = *((void *)this + 72);
  *((void *)this + 79) = *((void *)this + 78);
  *((void *)this + 8OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)this + 81);
  *((void *)this + 85) = *((void *)this + 84);
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_DWORD *)this + 174) = 0;
  PCSpinLock::unlock(v4);

  return OZCompoundChannel::willBeModified((OZChannelBase *)this, a2);
}

double OZChannelPosition::getLength(uint64_t a1, uint64_t a2, double *a3)
{
  CMTime v5 = (os_unfair_lock_s *)(a1 + 700);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 700));
  if (*(_DWORD *)(a1 + 696))
  {
    if (!a3)
    {
      uint64_t v11 = *(void *)(a1 + 608);
      goto LABEL_18;
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    BOOL v8 = 0;
LABEL_4:
    uint64_t v9 = 0;
    while (vabdd_f64(a3[v6 + v9], *(double *)(a1 + v6 * 8 + v9 * 8 + 448)) < 0.0000001)
    {
      if (++v9 == 4)
      {
        BOOL v8 = v7 > 2;
        v6 += 4;
        if (++v7 != 4) {
          goto LABEL_4;
        }
        goto LABEL_12;
      }
    }
    if (!v8) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v11 = *(void *)(a1 + 584);
    if (*(void *)(a1 + 576) != v11) {
      goto LABEL_18;
    }
LABEL_13:
    OZChannelPosition::getCachedVectors(a1, 0, 0, 0, 0, 0, a3);
  }
  else
  {
    OZChannelPosition::getCachedVectors(a1, 0, 0, 0, 0, 0, a3);
    if (!a3)
    {
      uint64_t v10 = *(void *)(a1 + 600);
      uint64_t v11 = *(void *)(a1 + 608);
      goto LABEL_15;
    }
  }
  uint64_t v10 = *(void *)(a1 + 576);
  uint64_t v11 = *(void *)(a1 + 584);
LABEL_15:
  if (v10 != v11)
  {
LABEL_18:
    double v12 = *(double *)(v11 - 8);
    goto LABEL_19;
  }
  double v12 = 0.0;
LABEL_19:
  PCSpinLock::unlock(v5);
  return v12;
}

uint64_t OZChannelPosition::getCachedVectors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, double *a7)
{
  uint64_t v14 = a1 + 136;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 136) + 832))(a1 + 136);
  if (v15 != (*(unsigned int (**)(uint64_t))(*(void *)(v14 + 152) + 832))(v14 + 152)) {
    return 0;
  }
  Float64 v131 = a7;
  v125 = a6;
  if (a7)
  {
    unint64_t v16 = 0;
    BOOL v17 = 0;
    uint64_t v18 = a1 + 448;
    CMTime v19 = a7;
LABEL_4:
    uint64_t v20 = 0;
    while (vabdd_f64(v19[v20], *(double *)(v18 + v20 * 8)) < 0.0000001)
    {
      if (++v20 == 4)
      {
        BOOL v17 = v16 > 2;
        v18 += 32;
        v19 += 4;
        if (++v16 != 4) {
          goto LABEL_4;
        }
        goto LABEL_11;
      }
    }
    if (!v17) {
      goto LABEL_26;
    }
LABEL_11:
    if (*(void *)(a1 + 576) != *(void *)(a1 + 584)) {
      goto LABEL_12;
    }
LABEL_26:
    uint64_t v123 = a5;
    Float64 v129 = (_DWORD *)(a1 + 696);
  }
  else
  {
LABEL_12:
    Float64 v129 = (_DWORD *)(a1 + 696);
    unsigned int v22 = *(_DWORD *)(a1 + 696);
    if (v22)
    {
      if (a2) {
        operator new[]();
      }
      if (a3) {
        operator new[]();
      }
      if (a4) {
        operator new[]();
      }
      if (a5) {
        operator new[]();
      }
      uint64_t v23 = 0;
      do
        v23 += 8;
      while (8 * v22 != v23);
      if (a6) {
        *a6 = v22;
      }
      return 1;
    }
    uint64_t v123 = a5;
  }
  *(void *)(a1 + 60OZSpline::reparametrize((uint64_t)this + 8) = *(void *)(a1 + 600);
  *(void *)(a1 + 584) = *(void *)(a1 + 576);
  *(void *)(a1 + 63OZChannelEnum::~OZChannelEnum(this - 2) = *(void *)(a1 + 624);
  *(void *)(a1 + 656) = *(void *)(a1 + 648);
  *(void *)(a1 + 68OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *(void *)(a1 + 672);
  *(_DWORD *)(a1 + 696) = 0;
  PCString v24 = (double *)(a1 + 448);
  *(void *)(a1 + 56OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 52OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 48OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 44OZSpline::reparametrize((uint64_t)this + 8) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 51OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(a1 + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  PCString v25 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 136) + 248))(v14);
  double v26 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 288) + 248))(v14 + 152);
  float64x2_t v163 = 0uLL;
  uint64_t v164 = 0;
  OZChannel::getKeyframeParametricRange(v25, (uint64_t)&v163);
  memset(&v162, 0, sizeof(v162));
  OZChannel::getKeyframeMinTime(v25, (uint64_t)&v162);
  float64x2_t v141 = *(float64x2_t *)&v162.value;
  *(void *)&long long v142 = v162.epoch;
  float64x2_t v139 = v163;
  *(void *)&long long v140 = v164;
  PC_CMTimeSaferAdd((CMTime *)&v141, (CMTime *)&v139, (uint64_t)&v137);
  uint64_t v164 = v138;
  float64x2_t v163 = v137;
  *(float64x2_t *)&time.CMTimeValue value = v137;
  time.CMTimeEpoch epoch = v138;
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v160 = v162;
  double v28 = CMTimeGetSeconds(&v160);
  int isParametricCurveClosed = OZChannel::isParametricCurveClosed(v25);
  int Interpolation = OZChannel::getInterpolation(v25);
  OZChannel::getKeyframes(v25, 1, &v158);
  Float64 v128 = v26;
  OZChannel::getKeyframes(v26, 1, v157);
  uint64_t v134 = (uint64_t *)(a1 + 648);
  double v135 = (uint64_t *)(a1 + 624);
  uint64_t v124 = a1 + 672;
  if ((*((unsigned int (**)(OZChannel *))v25->var0 + 104))(v25) < 2 || (unint64_t)(v159 - v158) < 9)
  {
LABEL_75:
    v133 = (void **)(a1 + 600);
    std::vector<double>::reserve((void **)(a1 + 600), *v129);
    uint64_t v58 = *(void **)(a1 + 608);
    double v59 = (void *)(a1 + 616);
    unint64_t v60 = *(void *)(a1 + 616);
    if ((unint64_t)v58 >= v60)
    {
      uint64_t v62 = *v133;
      uint64_t v63 = ((char *)v58 - (unsigned char *)*v133) >> 3;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v65 = v60 - (void)v62;
      if (v65 >> 2 > v64) {
        unint64_t v64 = v65 >> 2;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 616, v66);
        uint64_t v58 = *(void **)(a1 + 608);
        uint64_t v62 = *(void **)(a1 + 600);
      }
      else
      {
        uint64_t v67 = 0;
      }
      unint64_t v68 = &v67[8 * v63];
      uint64_t v69 = &v67[8 * v66];
      *(void *)unint64_t v68 = 0;
      uint64_t v61 = (double *)(v68 + 8);
      while (v58 != v62)
      {
        uint64_t v70 = *--v58;
        *((void *)v68 - atomic_store(0, (unint64_t *)this + 1) = v70;
        v68 -= 8;
      }
      *(void *)(a1 + 60OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v68;
      *(void *)(a1 + 60OZSpline::reparametrize((uint64_t)this + 8) = v61;
      *(void *)(a1 + 616) = v69;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *uint64_t v58 = 0;
      uint64_t v61 = (double *)(v58 + 1);
    }
    *(void *)(a1 + 60OZSpline::reparametrize((uint64_t)this + 8) = v61;
    LODWORD(v7atomic_store(0, (unint64_t *)this + 1) = *(_DWORD *)(a1 + 696);
    if (v71 >= 2)
    {
      unint64_t v72 = 1;
      do
      {
        long long v73 = (double *)*v133;
        uint64_t v74 = 8 * v72 - 8;
        double v75 = *(double *)(*v135 + 8 * v72) - *(double *)(*v135 + v74);
        double v76 = *(double *)(*v134 + 8 * v72) - *(double *)(*v134 + v74);
        double v77 = *(double *)((char *)*v133 + v74) + sqrt(v75 * v75 + v76 * v76);
        if ((unint64_t)v61 >= *v59)
        {
          uint64_t v79 = v61 - v73;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v81 = *v59 - (void)v73;
          if (v81 >> 2 > v80) {
            unint64_t v80 = v81 >> 2;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            double v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 616, v82);
            uint64_t v61 = *(double **)(a1 + 608);
            long long v73 = *(double **)(a1 + 600);
          }
          else
          {
            double v83 = 0;
          }
          long long v84 = (double *)&v83[8 * v79];
          *long long v84 = v77;
          double v78 = v84 + 1;
          while (v61 != v73)
          {
            uint64_t v85 = *((void *)v61-- - 1);
            *((void *)v84-- - atomic_store(0, (unint64_t *)this + 1) = v85;
          }
          *(void *)(a1 + 60OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v84;
          *(void *)(a1 + 60OZSpline::reparametrize((uint64_t)this + 8) = v78;
          *(void *)(a1 + 616) = &v83[8 * v82];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *uint64_t v61 = v77;
          double v78 = v61 + 1;
        }
        *(void *)(a1 + 60OZSpline::reparametrize((uint64_t)this + 8) = v78;
        ++v72;
        unint64_t v71 = *(unsigned int *)(a1 + 696);
        uint64_t v61 = v78;
      }
      while (v72 < v71);
    }
    double v86 = (void **)(a1 + 576);
    if (v131)
    {
      *(void *)(a1 + 584) = *(void *)(a1 + 576);
      std::vector<double>::reserve((void **)(a1 + 576), v71);
      double v87 = v125;
      if (v24 != v131)
      {
        uint64_t v88 = 0;
        Float64 v89 = v131;
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
            v24[i] = v89[i];
          ++v88;
          v24 += 4;
          v89 += 4;
        }
        while (v88 != 4);
      }
      double v91 = *(char **)(a1 + 584);
      uint64_t v127 = a1 + 592;
      unint64_t v92 = *(void *)(a1 + 592);
      if ((unint64_t)v91 >= v92)
      {
        BOOL v94 = (char *)*v86;
        uint64_t v95 = (v91 - (unsigned char *)*v86) >> 3;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v97 = v92 - (void)v94;
        if (v97 >> 2 > v96) {
          unint64_t v96 = v97 >> 2;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98)
        {
          double v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v127, v98);
          double v91 = *(char **)(a1 + 584);
          BOOL v94 = *(char **)(a1 + 576);
        }
        else
        {
          double v99 = 0;
        }
        double v100 = &v99[8 * v95];
        double v101 = &v99[8 * v98];
        *(void *)double v100 = 0;
        double v93 = v100 + 8;
        while (v91 != v94)
        {
          uint64_t v102 = *((void *)v91 - 1);
          v91 -= 8;
          *((void *)v100 - atomic_store(0, (unint64_t *)this + 1) = v102;
          v100 -= 8;
        }
        *(void *)(a1 + 576) = v100;
        *(void *)(a1 + 584) = v93;
        *(void *)(a1 + 59OZChannelEnum::~OZChannelEnum(this - 2) = v101;
        if (v94) {
          operator delete(v94);
        }
      }
      else
      {
        *(void *)double v91 = 0;
        double v93 = v91 + 8;
      }
      *(void *)(a1 + 584) = v93;
      LODWORD(v7atomic_store(0, (unint64_t *)this + 1) = *(_DWORD *)(a1 + 696);
      if (v71 >= 2)
      {
        unint64_t v103 = 1;
        do
        {
          uint64_t v104 = *v135;
          uint64_t v105 = *v134;
          float64_t v106 = *(double *)(*v134 + 8 * (v103 - 1));
          v141.f64[0] = *(float64_t *)(*v135 + 8 * (v103 - 1));
          v141.f64[1] = v106;
          long long v142 = xmmword_1B7E733E0;
          float64_t v107 = *(double *)(v105 + 8 * v103);
          v139.f64[0] = *(float64_t *)(v104 + 8 * v103);
          v139.f64[1] = v107;
          long long v140 = xmmword_1B7E733E0;
          PCMatrix44Tmpl<double>::transform<double>(v131, v141.f64, v141.f64);
          PCMatrix44Tmpl<double>::transform<double>(v131, v139.f64, v139.f64);
          CMTime v108 = *(double **)(a1 + 576);
          double v109 = v108[v103 - 1]
               + sqrt((v139.f64[0] - v141.f64[0]) * (v139.f64[0] - v141.f64[0])+ (v139.f64[1] - v141.f64[1]) * (v139.f64[1] - v141.f64[1]));
          uint64_t v110 = *(double **)(a1 + 584);
          unint64_t v111 = *(void *)(a1 + 592);
          if ((unint64_t)v110 >= v111)
          {
            uint64_t v113 = v110 - v108;
            unint64_t v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v115 = v111 - (void)v108;
            if (v115 >> 2 > v114) {
              unint64_t v114 = v115 >> 2;
            }
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v116 = v114;
            }
            if (v116)
            {
              double v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v127, v116);
              uint64_t v110 = *(double **)(a1 + 584);
              CMTime v108 = *(double **)(a1 + 576);
            }
            else
            {
              double v117 = 0;
            }
            double v118 = (double *)&v117[8 * v113];
            *double v118 = v109;
            unsigned int v112 = v118 + 1;
            while (v110 != v108)
            {
              uint64_t v119 = *((void *)v110-- - 1);
              *((void *)v118-- - atomic_store(0, (unint64_t *)this + 1) = v119;
            }
            *(void *)(a1 + 576) = v118;
            *(void *)(a1 + 584) = v112;
            *(void *)(a1 + 59OZChannelEnum::~OZChannelEnum(this - 2) = &v117[8 * v116];
            if (v108) {
              operator delete(v108);
            }
          }
          else
          {
            double *v110 = v109;
            unsigned int v112 = v110 + 1;
          }
          *(void *)(a1 + 584) = v112;
          ++v103;
          unint64_t v71 = *(unsigned int *)(a1 + 696);
        }
        while (v103 < v71);
        double v87 = v125;
      }
    }
    else
    {
      double v87 = v125;
    }
    if (a2) {
      operator new[]();
    }
    if (a3) {
      operator new[]();
    }
    if (a4) {
      operator new[]();
    }
    if (v123) {
      operator new[]();
    }
    if (v71)
    {
      uint64_t v120 = 0;
      do
        v120 += 8;
      while (8 * v71 != v120);
    }
    if (v87) {
      *double v87 = v71;
    }
    (*((void (**)(OZChannel *))v25->var0 + 1))(v25);
    if (v128) {
      (*((void (**)(OZChannel *))v128->var0 + 1))(v128);
    }
    uint64_t v21 = 1;
    goto LABEL_169;
  }
  double v31 = Seconds - v28;
  if (Interpolation > 9)
  {
    if (Interpolation != 10 && Interpolation != 12) {
      goto LABEL_75;
    }
    _DWORD *v129 = (int)(v31 / 0.025) + (isParametricCurveClosed ^ 1);
    if (!OZChannel::getSamples((uint64_t)v25)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (Interpolation == 1)
  {
    _DWORD *v129 = (int)v31 + 1;
    if (!OZChannel::getSamples((uint64_t)v25)) {
      goto LABEL_69;
    }
LABEL_68:
    if (OZChannel::getSamples((uint64_t)v26)) {
      goto LABEL_75;
    }
LABEL_69:
    unint64_t v57 = (void (*)(void))*((void *)v25->var0 + 1);
    goto LABEL_70;
  }
  if (Interpolation != 4) {
    goto LABEL_75;
  }
  int v126 = isParametricCurveClosed;
  float64_t v155 = 0.0;
  float64_t v156 = 0.0;
  int8x16_t v32 = (void *)*((void *)v158 + 1);
  if (!v32)
  {
LABEL_61:
    uint64_t v55 = *(void *)(a1 + 680);
    if (v55 == *(void *)(a1 + 672))
    {
      uint64_t v56 = *(void *)(a1 + 680);
    }
    else
    {
      v141.f64[0] = v28 + v31;
      std::vector<double>::push_back[abi:ne180100](v124, &v141);
      std::vector<double>::push_back[abi:ne180100]((uint64_t)v135, &v156);
      std::vector<double>::push_back[abi:ne180100]((uint64_t)v134, &v155);
      uint64_t v56 = *(void *)(a1 + 680);
      uint64_t v55 = *(void *)(a1 + 672);
    }
    _DWORD *v129 = (unint64_t)(v56 - v55) >> 3;
    goto LABEL_75;
  }
  Float64 v130 = *(void **)&v158[8 * ((v159 - v158) >> 3) - 8];
  uint64_t v34 = *(void **)v157[0];
  double v33 = (void *)*((void *)v157[0] + 1);
  int8x16_t v35 = *(void **)v158;
  unsigned int v122 = 1;
  while (1)
  {
    double v132 = v33;
    double v151 = 0.0;
    double v152 = 0.0;
    double v149 = 0.0;
    double v150 = 0.0;
    double v147 = 0.0;
    double v148 = 0.0;
    double v145 = 0.0;
    double v146 = 0.0;
    double v36 = v35;
    OZChannel::getKeyframe(v25, v35, &v154, &v152);
    OZChannel::getKeyframe(v128, v34, 0, &v151);
    OZChannel::getKeyframe(v25, v32, &v153, &v146);
    OZChannel::getKeyframe(v128, v132, 0, &v145);
    CMTime v144 = v154;
    double v37 = CMTimeGetSeconds(&v144);
    CMTime v143 = v153;
    double v38 = CMTimeGetSeconds(&v143);
    double v39 = ((v36 == v130) & v126) != 0 ? v31 : -0.0;
    OZChannel::getKeyframeOutputTangents(v25, v36, 0, &v150, 1);
    OZChannel::getKeyframeOutputTangents(v128, v34, 0, &v149, 1);
    OZChannel::getKeyframeInputTangents(v25, v32, 0, &v148, 1);
    OZChannel::getKeyframeInputTangents(v128, v132, 0, &v147, 1);
    double v40 = v145;
    double v41 = v146;
    if (vabdd_f64(v152, v146) >= 0.0000001)
    {
      uint64_t v42 = (uint64_t)v25;
    }
    else
    {
      uint64_t v42 = (uint64_t)v25;
      if (vabdd_f64(v151, v145) < 0.0000001)
      {
        double v41 = v146 + 0.000001;
        double v40 = v145 + 0.000001;
        double v145 = v145 + 0.000001;
        double v146 = v146 + 0.000001;
      }
    }
    v141.f64[0] = v152;
    v141.f64[1] = v151;
    long long v142 = xmmword_1B7E733E0;
    double v43 = v152 + v150;
    double v44 = v151 + v149;
    v139.f64[0] = v152 + v150;
    v139.f64[1] = v151 + v149;
    long long v140 = xmmword_1B7E733E0;
    double v45 = v148 + v41;
    double v46 = v147 + v40;
    v137.f64[0] = v148 + v41;
    v137.f64[1] = v147 + v40;
    long long v138 = xmmword_1B7E733E0;
    v136[0].f64[0] = v41;
    v136[0].f64[1] = v40;
    v136[1] = (float64x2_t)xmmword_1B7E733E0;
    if (vabdd_f64(v152 + v150, v152) >= 0.0000001 && vabdd_f64(v45, v43) >= 0.0000001)
    {
      double v47 = v43 - v152;
      double v48 = v44 - v151;
      double v49 = sqrt(v47 * v47 + v48 * v48);
      if (v49 <= -0.000000100000001 || v49 >= 0.000000100000001)
      {
        double v47 = v47 / v49;
        double v48 = v48 / v49;
      }
      double v50 = v45 - v43;
      double v51 = v46 - v44;
      double v52 = sqrt(v50 * v50 + v51 * v51);
      if (v52 <= -0.000000100000001 || v52 >= 0.000000100000001)
      {
        double v50 = v50 / v52;
        double v51 = v51 / v52;
      }
      if (fabs(v47 * v50 + v48 * v51 + 1.0) < 0.001) {
        break;
      }
    }
    PCAlgorithm::BezierSubdivide(&v141, &v139, &v137, v136, 6, v131, (uint64_t)v135, (uint64_t)v134, v37, v39 + v38 - v37, 0, v124);
LABEL_55:
    float64_t v155 = v136[0].f64[1];
    float64_t v156 = v136[0].f64[0];
    if (v36 == v130) {
      goto LABEL_61;
    }
    if (v32 == v130)
    {
      int8x16_t v32 = v130;
      if (!v126) {
        goto LABEL_61;
      }
      uint64_t v53 = (void **)v158;
      uint64_t v54 = (void **)v157[0];
    }
    else
    {
      uint64_t v53 = (void **)&v158[8 * ++v122];
      uint64_t v54 = (void **)((char *)v157[0] + 8 * v122);
    }
    int8x16_t v35 = v32;
    int8x16_t v32 = *v53;
    double v33 = *v54;
    uint64_t v34 = v132;
    if (!v32) {
      goto LABEL_61;
    }
  }
  if OZChannel::getSamples(v42) && (OZChannel::getSamples((uint64_t)v128)) {
    goto LABEL_55;
  }
  unint64_t v57 = *(void (**)(void))(*(void *)v42 + 8);
LABEL_70:
  v57();
  if (v128) {
    (*((void (**)(OZChannel *))v128->var0 + 1))(v128);
  }
  uint64_t v21 = 0;
LABEL_169:
  if (v157[0])
  {
    v157[1] = v157[0];
    operator delete(v157[0]);
  }
  if (v158)
  {
    uint64_t v159 = v158;
    operator delete(v158);
  }
  return v21;
}

void sub_1B7A02324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  double v50 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v50;
    operator delete(v50);
  }
  double v51 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v51;
    operator delete(v51);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition::getPositionsReparametrizedWithRange(os_unfair_lock_s *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  int v231 = 0;
  v229 = 0;
  long long v230 = 0;
  uint64_t v227 = 0;
  v228 = 0;
  CMTime v13 = a1 + 175;
  PCSpinLock::lock(a1 + 175);
  OZChannelPosition::getCachedVectors((uint64_t)a1, (uint64_t)&v228, (uint64_t)&v230, (uint64_t)&v229, (uint64_t)&v227, (unsigned int *)&v231, a7);
  PCSpinLock::unlock(v13);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v231 >= 2) {
    double v15 = *(double *)(v227 + 8 * (v231 - 1));
  }
  unint64_t v16 = (unint64_t)a2;
  double v17 = v15 / a2;
  std::vector<double>::reserve((void **)a4, v16);
  std::vector<double>::reserve((void **)a5, v16);
  std::vector<double>::reserve((void **)a6, v16);
  signed int v18 = 0;
  uint64_t v225 = a5 + 16;
  uint64_t v226 = a4 + 16;
  char v19 = 1;
  while (v14 < v15 || vabdd_f64(v14, v15) < 0.0000001)
  {
    uint64_t v20 = v18;
    double v21 = *(double *)(v227 + 8 * v18);
    double v22 = vabdd_f64(v14, v21);
    if (v22 >= 0.0000001)
    {
      if (v18 < v231)
      {
        PCString v24 = (double *)(v227 + 8 * v18);
        uint64_t v25 = v231 - (uint64_t)v18;
        while (*v24 < v14)
        {
          ++v18;
          ++v24;
          if (!--v25)
          {
            signed int v18 = v231;
            break;
          }
        }
      }
      uint64_t v20 = --v18;
      double v21 = *(double *)(v227 + 8 * v18);
      double v23 = v14 - v21;
      double v22 = vabdd_f64(v14, v21);
    }
    else
    {
      double v23 = v14 - v21;
    }
    if (v22 >= 0.0000001)
    {
      if (v14 >= v21)
      {
        if (v14 <= v21) {
          goto LABEL_250;
        }
        uint64_t v42 = v18 + 1;
        double v43 = *(double *)(v227 + 8 * v42);
        double v44 = v228;
        if (vabdd_f64(v43, v21) >= 0.0000001)
        {
          double v84 = *(double *)&v228[v20] + v23 * ((*(double *)&v228[v42] - *(double *)&v228[v20]) / (v43 - v21));
          double v86 = *(double **)(a6 + 8);
          unint64_t v85 = *(void *)(a6 + 16);
          if ((unint64_t)v86 >= v85)
          {
            double v100 = *(double **)a6;
            uint64_t v101 = ((uint64_t)v86 - *(void *)a6) >> 3;
            unint64_t v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61) {
              goto LABEL_310;
            }
            uint64_t v103 = v85 - (void)v100;
            if (v103 >> 2 > v102) {
              unint64_t v102 = v103 >> 2;
            }
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v104 = v102;
            }
            if (v104)
            {
              uint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v104);
              double v100 = *(double **)a6;
              double v86 = *(double **)(a6 + 8);
            }
            else
            {
              uint64_t v105 = 0;
            }
            long long v158 = (double *)&v105[8 * v101];
            *long long v158 = v84;
            double v87 = v158 + 1;
            while (v86 != v100)
            {
              uint64_t v159 = *((void *)v86-- - 1);
              *((void *)v158-- - atomic_store(0, (unint64_t *)this + 1) = v159;
            }
            *(void *)a6 = v158;
            *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v87;
            *(void *)(a6 + 16) = &v105[8 * v104];
            if (v100) {
              operator delete(v100);
            }
          }
          else
          {
            *double v86 = v84;
            double v87 = v86 + 1;
          }
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v87;
          double v160 = *(double *)&v230[v20]
               + (v14 - *(double *)(v227 + 8 * v20))
               * ((*(double *)&v230[v42] - *(double *)&v230[v20])
                / (*(double *)(v227 + 8 * v42) - *(double *)(v227 + 8 * v20)));
          CMTime v162 = *(double **)(a4 + 8);
          unint64_t v161 = *(void *)(a4 + 16);
          if ((unint64_t)v162 >= v161)
          {
            uint64_t v164 = *(double **)a4;
            uint64_t v165 = ((uint64_t)v162 - *(void *)a4) >> 3;
            unint64_t v166 = v165 + 1;
            if ((unint64_t)(v165 + 1) >> 61) {
              goto LABEL_311;
            }
            uint64_t v167 = v161 - (void)v164;
            if (v167 >> 2 > v166) {
              unint64_t v166 = v167 >> 2;
            }
            if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v168 = v166;
            }
            if (v168)
            {
              unint64_t v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v168);
              uint64_t v164 = *(double **)a4;
              CMTime v162 = *(double **)(a4 + 8);
            }
            else
            {
              unint64_t v169 = 0;
            }
            uint64_t v177 = (double *)&v169[8 * v165];
            *uint64_t v177 = v160;
            float64x2_t v163 = v177 + 1;
            while (v162 != v164)
            {
              uint64_t v178 = *((void *)v162-- - 1);
              *((void *)v177-- - atomic_store(0, (unint64_t *)this + 1) = v178;
            }
            *(void *)a4 = v177;
            *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v163;
            *(void *)(a4 + 16) = &v169[8 * v168];
            if (v164) {
              operator delete(v164);
            }
          }
          else
          {
            double *v162 = v160;
            float64x2_t v163 = v162 + 1;
          }
          *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v163;
          double v138 = *(double *)&v229[v20]
               + (v14 - *(double *)(v227 + 8 * v20))
               * ((*(double *)&v229[v42] - *(double *)&v229[v20])
                / (*(double *)(v227 + 8 * v42) - *(double *)(v227 + 8 * v20)));
          long long v140 = *(double **)(a5 + 8);
          unint64_t v179 = *(void *)(a5 + 16);
          if ((unint64_t)v140 >= v179)
          {
            uint64_t v69 = *(double **)a5;
            uint64_t v180 = ((uint64_t)v140 - *(void *)a5) >> 3;
            unint64_t v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 61) {
              goto LABEL_312;
            }
            uint64_t v182 = v179 - (void)v69;
            if (v182 >> 2 > v181) {
              unint64_t v181 = v182 >> 2;
            }
            if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v181;
            }
            if (v73)
            {
              uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
              uint64_t v69 = *(double **)a5;
              long long v140 = *(double **)(a5 + 8);
            }
            else
            {
              uint64_t v74 = 0;
            }
            double v75 = (double *)&v74[8 * v180];
            double *v75 = v138;
            double v76 = v75 + 1;
            while (v140 != v69)
            {
              uint64_t v184 = *((void *)v140-- - 1);
              *((void *)v75-- - atomic_store(0, (unint64_t *)this + 1) = v184;
            }
            goto LABEL_247;
          }
LABEL_229:
          double *v140 = v138;
          unint64_t v173 = v140 + 1;
          goto LABEL_230;
        }
        double v46 = *(void **)(a6 + 8);
        unint64_t v45 = *(void *)(a6 + 16);
        if ((unint64_t)v46 >= v45)
        {
          BOOL v94 = *(void **)a6;
          uint64_t v95 = ((uint64_t)v46 - *(void *)a6) >> 3;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 61) {
            goto LABEL_310;
          }
          uint64_t v97 = v45 - (void)v94;
          if (v97 >> 2 > v96) {
            unint64_t v96 = v97 >> 2;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v96;
          }
          if (v98)
          {
            double v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v98);
            BOOL v94 = *(void **)a6;
            double v46 = *(void **)(a6 + 8);
          }
          else
          {
            double v99 = 0;
          }
          double v146 = &v99[8 * v95];
          *(void *)double v146 = v44[v20];
          double v47 = v146 + 8;
          while (v46 != v94)
          {
            uint64_t v147 = *--v46;
            *((void *)v146 - atomic_store(0, (unint64_t *)this + 1) = v147;
            v146 -= 8;
          }
          *(void *)a6 = v146;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v47;
          *(void *)(a6 + 16) = &v99[8 * v98];
          if (v94) {
            operator delete(v94);
          }
        }
        else
        {
          *double v46 = v228[v20];
          double v47 = v46 + 1;
        }
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v47;
        double v148 = v230;
        double v150 = *(void **)(a4 + 8);
        unint64_t v149 = *(void *)(a4 + 16);
        if ((unint64_t)v150 >= v149)
        {
          double v152 = *(void **)a4;
          uint64_t v153 = ((uint64_t)v150 - *(void *)a4) >> 3;
          unint64_t v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 61) {
            goto LABEL_311;
          }
          uint64_t v155 = v149 - (void)v152;
          if (v155 >> 2 > v154) {
            unint64_t v154 = v155 >> 2;
          }
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v156 = v154;
          }
          if (v156)
          {
            uint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v156);
            double v152 = *(void **)a4;
            double v150 = *(void **)(a4 + 8);
          }
          else
          {
            uint64_t v157 = 0;
          }
          uint64_t v170 = &v157[8 * v153];
          *(void *)uint64_t v170 = v148[v20];
          double v151 = v170 + 8;
          while (v150 != v152)
          {
            uint64_t v171 = *--v150;
            *((void *)v170 - atomic_store(0, (unint64_t *)this + 1) = v171;
            v170 -= 8;
          }
          *(void *)a4 = v170;
          *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v151;
          *(void *)(a4 + 16) = &v157[8 * v156];
          if (v152) {
            operator delete(v152);
          }
        }
        else
        {
          *double v150 = v230[v20];
          double v151 = v150 + 1;
        }
        *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v151;
        unint64_t v66 = v229;
        unint64_t v68 = *(double **)(a5 + 8);
        unint64_t v172 = *(void *)(a5 + 16);
        if ((unint64_t)v68 >= v172)
        {
          uint64_t v69 = *(double **)a5;
          uint64_t v174 = ((uint64_t)v68 - *(void *)a5) >> 3;
          unint64_t v175 = v174 + 1;
          if ((unint64_t)(v174 + 1) >> 61) {
            goto LABEL_312;
          }
          uint64_t v176 = v172 - (void)v69;
          if (v176 >> 2 > v175) {
            unint64_t v175 = v176 >> 2;
          }
          if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v175;
          }
          if (v73)
          {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
            uint64_t v69 = *(double **)a5;
            unint64_t v68 = *(double **)(a5 + 8);
          }
          else
          {
            uint64_t v74 = 0;
          }
          double v75 = (double *)&v74[8 * v174];
          double *v75 = *(double *)&v66[v20];
          double v76 = v75 + 1;
          while (v68 != v69)
          {
            uint64_t v183 = *((void *)v68-- - 1);
            *((void *)v75-- - atomic_store(0, (unint64_t *)this + 1) = v183;
          }
          goto LABEL_247;
        }
      }
      else
      {
        uint64_t v30 = v18 - 1;
        double v31 = *(double *)(v227 + 8 * v30);
        if (vabdd_f64(v21, v31) >= 0.0000001)
        {
          double v48 = *(double *)&v228[v30] + (v14 - v31) * ((*(double *)&v228[v20] - *(double *)&v228[v30]) / (v21 - v31));
          double v50 = *(double **)(a6 + 8);
          unint64_t v49 = *(void *)(a6 + 16);
          if ((unint64_t)v50 >= v49)
          {
            uint64_t v88 = *(double **)a6;
            uint64_t v89 = ((uint64_t)v50 - *(void *)a6) >> 3;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61) {
              goto LABEL_310;
            }
            uint64_t v91 = v49 - (void)v88;
            if (v91 >> 2 > v90) {
              unint64_t v90 = v91 >> 2;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              double v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v92);
              uint64_t v88 = *(double **)a6;
              double v50 = *(double **)(a6 + 8);
            }
            else
            {
              double v93 = 0;
            }
            double v118 = (double *)&v93[8 * v89];
            *double v118 = v48;
            double v51 = v118 + 1;
            while (v50 != v88)
            {
              uint64_t v119 = *((void *)v50-- - 1);
              *((void *)v118-- - atomic_store(0, (unint64_t *)this + 1) = v119;
            }
            *(void *)a6 = v118;
            *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v51;
            *(void *)(a6 + 16) = &v93[8 * v92];
            if (v88) {
              operator delete(v88);
            }
          }
          else
          {
            double *v50 = v48;
            double v51 = v50 + 1;
          }
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v51;
          double v120 = *(double *)&v230[v30]
               + (v14 - *(double *)(v227 + 8 * v30))
               * ((*(double *)&v230[v20] - *(double *)&v230[v30])
                / (*(double *)(v227 + 8 * v20) - *(double *)(v227 + 8 * v30)));
          unsigned int v122 = *(double **)(a4 + 8);
          unint64_t v121 = *(void *)(a4 + 16);
          if ((unint64_t)v122 >= v121)
          {
            uint64_t v124 = *(double **)a4;
            uint64_t v125 = ((uint64_t)v122 - *(void *)a4) >> 3;
            unint64_t v126 = v125 + 1;
            if ((unint64_t)(v125 + 1) >> 61) {
              goto LABEL_311;
            }
            uint64_t v127 = v121 - (void)v124;
            if (v127 >> 2 > v126) {
              unint64_t v126 = v127 >> 2;
            }
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v128 = v126;
            }
            if (v128)
            {
              Float64 v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v128);
              uint64_t v124 = *(double **)a4;
              unsigned int v122 = *(double **)(a4 + 8);
            }
            else
            {
              Float64 v129 = 0;
            }
            double v136 = (double *)&v129[8 * v125];
            *double v136 = v120;
            uint64_t v123 = v136 + 1;
            while (v122 != v124)
            {
              uint64_t v137 = *((void *)v122-- - 1);
              *((void *)v136-- - atomic_store(0, (unint64_t *)this + 1) = v137;
            }
            *(void *)a4 = v136;
            *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v123;
            *(void *)(a4 + 16) = &v129[8 * v128];
            if (v124) {
              operator delete(v124);
            }
          }
          else
          {
            *unsigned int v122 = v120;
            uint64_t v123 = v122 + 1;
          }
          *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v123;
          double v138 = *(double *)&v229[v30]
               + (v14 - *(double *)(v227 + 8 * v30))
               * ((*(double *)&v229[v20] - *(double *)&v229[v30])
                / (*(double *)(v227 + 8 * v20) - *(double *)(v227 + 8 * v30)));
          long long v140 = *(double **)(a5 + 8);
          unint64_t v139 = *(void *)(a5 + 16);
          if ((unint64_t)v140 >= v139)
          {
            uint64_t v69 = *(double **)a5;
            uint64_t v141 = ((uint64_t)v140 - *(void *)a5) >> 3;
            unint64_t v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 61) {
              goto LABEL_312;
            }
            uint64_t v143 = v139 - (void)v69;
            if (v143 >> 2 > v142) {
              unint64_t v142 = v143 >> 2;
            }
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v142;
            }
            if (v73)
            {
              uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
              uint64_t v69 = *(double **)a5;
              long long v140 = *(double **)(a5 + 8);
            }
            else
            {
              uint64_t v74 = 0;
            }
            double v75 = (double *)&v74[8 * v141];
            double *v75 = v138;
            double v76 = v75 + 1;
            while (v140 != v69)
            {
              uint64_t v145 = *((void *)v140-- - 1);
              *((void *)v75-- - atomic_store(0, (unint64_t *)this + 1) = v145;
            }
            goto LABEL_247;
          }
          goto LABEL_229;
        }
        int8x16_t v32 = v228;
        uint64_t v34 = *(void **)(a6 + 8);
        unint64_t v33 = *(void *)(a6 + 16);
        if ((unint64_t)v34 >= v33)
        {
          double v78 = *(void **)a6;
          uint64_t v79 = ((uint64_t)v34 - *(void *)a6) >> 3;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61) {
            goto LABEL_310;
          }
          uint64_t v81 = v33 - (void)v78;
          if (v81 >> 2 > v80) {
            unint64_t v80 = v81 >> 2;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            double v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v82);
            double v78 = *(void **)a6;
            uint64_t v34 = *(void **)(a6 + 8);
          }
          else
          {
            double v83 = 0;
          }
          float64_t v106 = &v83[8 * v79];
          *(void *)float64_t v106 = v32[v20];
          int8x16_t v35 = v106 + 8;
          while (v34 != v78)
          {
            uint64_t v107 = *--v34;
            *((void *)v106 - atomic_store(0, (unint64_t *)this + 1) = v107;
            v106 -= 8;
          }
          *(void *)a6 = v106;
          *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v35;
          *(void *)(a6 + 16) = &v83[8 * v82];
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          *uint64_t v34 = v228[v20];
          int8x16_t v35 = v34 + 1;
        }
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v35;
        CMTime v108 = v230;
        uint64_t v110 = *(void **)(a4 + 8);
        unint64_t v109 = *(void *)(a4 + 16);
        if ((unint64_t)v110 >= v109)
        {
          unsigned int v112 = *(void **)a4;
          uint64_t v113 = ((uint64_t)v110 - *(void *)a4) >> 3;
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 61) {
            goto LABEL_311;
          }
          uint64_t v115 = v109 - (void)v112;
          if (v115 >> 2 > v114) {
            unint64_t v114 = v115 >> 2;
          }
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v114;
          }
          if (v116)
          {
            double v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v116);
            unsigned int v112 = *(void **)a4;
            uint64_t v110 = *(void **)(a4 + 8);
          }
          else
          {
            double v117 = 0;
          }
          Float64 v130 = &v117[8 * v113];
          *(void *)Float64 v130 = v108[v20];
          unint64_t v111 = v130 + 8;
          while (v110 != v112)
          {
            uint64_t v131 = *--v110;
            *((void *)v130 - atomic_store(0, (unint64_t *)this + 1) = v131;
            v130 -= 8;
          }
          *(void *)a4 = v130;
          *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v111;
          *(void *)(a4 + 16) = &v117[8 * v116];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          void *v110 = v230[v20];
          unint64_t v111 = v110 + 1;
        }
        *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v111;
        unint64_t v66 = v229;
        unint64_t v68 = *(double **)(a5 + 8);
        unint64_t v132 = *(void *)(a5 + 16);
        if ((unint64_t)v68 >= v132)
        {
          uint64_t v69 = *(double **)a5;
          uint64_t v133 = ((uint64_t)v68 - *(void *)a5) >> 3;
          unint64_t v134 = v133 + 1;
          if ((unint64_t)(v133 + 1) >> 61) {
            goto LABEL_312;
          }
          uint64_t v135 = v132 - (void)v69;
          if (v135 >> 2 > v134) {
            unint64_t v134 = v135 >> 2;
          }
          if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v134;
          }
          if (v73)
          {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
            uint64_t v69 = *(double **)a5;
            unint64_t v68 = *(double **)(a5 + 8);
          }
          else
          {
            uint64_t v74 = 0;
          }
          double v75 = (double *)&v74[8 * v133];
          double *v75 = *(double *)&v66[v20];
          double v76 = v75 + 1;
          while (v68 != v69)
          {
            uint64_t v144 = *((void *)v68-- - 1);
            *((void *)v75-- - atomic_store(0, (unint64_t *)this + 1) = v144;
          }
          goto LABEL_247;
        }
      }
    }
    else
    {
      double v26 = v228;
      double v28 = *(void **)(a6 + 8);
      unint64_t v27 = *(void *)(a6 + 16);
      if ((unint64_t)v28 >= v27)
      {
        double v36 = *(void **)a6;
        uint64_t v37 = ((uint64_t)v28 - *(void *)a6) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_310;
        }
        uint64_t v39 = v27 - (void)v36;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          double v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v40);
          double v36 = *(void **)a6;
          double v28 = *(void **)(a6 + 8);
        }
        else
        {
          double v41 = 0;
        }
        double v52 = &v41[8 * v37];
        *(void *)double v52 = v26[v20];
        float v29 = v52 + 8;
        while (v28 != v36)
        {
          uint64_t v53 = *--v28;
          *((void *)v52 - atomic_store(0, (unint64_t *)this + 1) = v53;
          v52 -= 8;
        }
        *(void *)a6 = v52;
        *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v29;
        *(void *)(a6 + 16) = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        void *v28 = v228[v20];
        float v29 = v28 + 1;
      }
      *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v29;
      uint64_t v54 = v230;
      uint64_t v56 = *(void **)(a4 + 8);
      unint64_t v55 = *(void *)(a4 + 16);
      if ((unint64_t)v56 >= v55)
      {
        uint64_t v58 = *(void **)a4;
        uint64_t v59 = ((uint64_t)v56 - *(void *)a4) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          goto LABEL_311;
        }
        uint64_t v61 = v55 - (void)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v62);
          uint64_t v58 = *(void **)a4;
          uint64_t v56 = *(void **)(a4 + 8);
        }
        else
        {
          uint64_t v63 = 0;
        }
        unint64_t v64 = &v63[8 * v59];
        *(void *)unint64_t v64 = v54[v20];
        unint64_t v57 = v64 + 8;
        while (v56 != v58)
        {
          uint64_t v65 = *--v56;
          *((void *)v64 - atomic_store(0, (unint64_t *)this + 1) = v65;
          v64 -= 8;
        }
        *(void *)a4 = v64;
        *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v57;
        *(void *)(a4 + 16) = &v63[8 * v62];
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *uint64_t v56 = v230[v20];
        unint64_t v57 = v56 + 1;
      }
      *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v57;
      unint64_t v66 = v229;
      unint64_t v68 = *(double **)(a5 + 8);
      unint64_t v67 = *(void *)(a5 + 16);
      if ((unint64_t)v68 >= v67)
      {
        uint64_t v69 = *(double **)a5;
        uint64_t v70 = ((uint64_t)v68 - *(void *)a5) >> 3;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 61) {
          goto LABEL_312;
        }
        uint64_t v72 = v67 - (void)v69;
        if (v72 >> 2 > v71) {
          unint64_t v71 = v72 >> 2;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v73);
          uint64_t v69 = *(double **)a5;
          unint64_t v68 = *(double **)(a5 + 8);
        }
        else
        {
          uint64_t v74 = 0;
        }
        double v75 = (double *)&v74[8 * v70];
        double *v75 = *(double *)&v66[v20];
        double v76 = v75 + 1;
        while (v68 != v69)
        {
          uint64_t v77 = *((void *)v68-- - 1);
          *((void *)v75-- - atomic_store(0, (unint64_t *)this + 1) = v77;
        }
LABEL_247:
        *(void *)a5 = v75;
        *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v76;
        *(void *)(a5 + 16) = &v74[8 * v73];
        if (v69) {
          operator delete(v69);
        }
        goto LABEL_249;
      }
    }
    *unint64_t v68 = *(double *)&v66[v20];
    unint64_t v173 = v68 + 1;
LABEL_230:
    double v76 = v173;
LABEL_249:
    *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v76;
LABEL_250:
    char v19 = 0;
    double v14 = v17 + v14;
  }
  if ((v19 & (v231 != 0)) != 0)
  {
    uint64_t v185 = v228;
    long long v187 = *(void **)(a6 + 8);
    unint64_t v186 = *(void *)(a6 + 16);
    if ((unint64_t)v187 >= v186)
    {
      long long v189 = *(void **)a6;
      uint64_t v190 = ((uint64_t)v187 - *(void *)a6) >> 3;
      unint64_t v191 = v190 + 1;
      if ((unint64_t)(v190 + 1) >> 61) {
LABEL_310:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      uint64_t v192 = v186 - (void)v189;
      if (v192 >> 2 > v191) {
        unint64_t v191 = v192 >> 2;
      }
      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v193 = v191;
      }
      if (v193)
      {
        double v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v193);
        long long v189 = *(void **)a6;
        long long v187 = *(void **)(a6 + 8);
      }
      else
      {
        double v194 = 0;
      }
      double v195 = &v194[8 * v190];
      float64_t v196 = &v194[8 * v193];
      *(void *)double v195 = *v185;
      float64x2_t v188 = v195 + 8;
      while (v187 != v189)
      {
        uint64_t v197 = *--v187;
        *((void *)v195 - atomic_store(0, (unint64_t *)this + 1) = v197;
        v195 -= 8;
      }
      *(void *)a6 = v195;
      *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v188;
      *(void *)(a6 + 16) = v196;
      if (v189) {
        operator delete(v189);
      }
    }
    else
    {
      void *v187 = *v228;
      float64x2_t v188 = v187 + 1;
    }
    *(void *)(a6 + OZSpline::reparametrize((uint64_t)this + 8) = v188;
    double v198 = v230;
    double v200 = *(void **)(a4 + 8);
    unint64_t v199 = *(void *)(a4 + 16);
    if ((unint64_t)v200 >= v199)
    {
      uint64_t v202 = *(void **)a4;
      uint64_t v203 = ((uint64_t)v200 - *(void *)a4) >> 3;
      unint64_t v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 61) {
LABEL_311:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      uint64_t v205 = v199 - (void)v202;
      if (v205 >> 2 > v204) {
        unint64_t v204 = v205 >> 2;
      }
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v206 = v204;
      }
      if (v206)
      {
        unint64_t v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v226, v206);
        uint64_t v202 = *(void **)a4;
        double v200 = *(void **)(a4 + 8);
      }
      else
      {
        unint64_t v207 = 0;
      }
      unint64_t v208 = &v207[8 * v203];
      CMTime v209 = &v207[8 * v206];
      *(void *)unint64_t v208 = *v198;
      double v201 = v208 + 8;
      while (v200 != v202)
      {
        uint64_t v210 = *--v200;
        *((void *)v208 - atomic_store(0, (unint64_t *)this + 1) = v210;
        v208 -= 8;
      }
      *(void *)a4 = v208;
      *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v201;
      *(void *)(a4 + 16) = v209;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      void *v200 = *v230;
      double v201 = v200 + 1;
    }
    *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v201;
    v211 = v229;
    CMTime v213 = *(void **)(a5 + 8);
    unint64_t v212 = *(void *)(a5 + 16);
    if ((unint64_t)v213 >= v212)
    {
      long long v215 = *(void **)a5;
      uint64_t v216 = ((uint64_t)v213 - *(void *)a5) >> 3;
      unint64_t v217 = v216 + 1;
      if ((unint64_t)(v216 + 1) >> 61) {
LABEL_312:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      uint64_t v218 = v212 - (void)v215;
      if (v218 >> 2 > v217) {
        unint64_t v217 = v218 >> 2;
      }
      if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v219 = v217;
      }
      if (v219)
      {
        unint64_t v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v225, v219);
        long long v215 = *(void **)a5;
        CMTime v213 = *(void **)(a5 + 8);
      }
      else
      {
        unint64_t v220 = 0;
      }
      unint64_t v221 = &v220[8 * v216];
      unint64_t v222 = &v220[8 * v219];
      *(void *)unint64_t v221 = *v211;
      v214 = v221 + 8;
      while (v213 != v215)
      {
        uint64_t v223 = *--v213;
        *((void *)v221 - atomic_store(0, (unint64_t *)this + 1) = v223;
        v221 -= 8;
      }
      *(void *)a5 = v221;
      *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v214;
      *(void *)(a5 + 16) = v222;
      if (v215) {
        operator delete(v215);
      }
    }
    else
    {
      *CMTime v213 = *v229;
      v214 = v213 + 1;
    }
    *(void *)(a5 + OZSpline::reparametrize((uint64_t)this + 8) = v214;
  }
  if (v230) {
    MEMORY[0x1BA9BFB70](v230, 0x1000C8000313F17);
  }
  if (v229) {
    MEMORY[0x1BA9BFB70](v229, 0x1000C8000313F17);
  }
  if (v228) {
    MEMORY[0x1BA9BFB70](v228, 0x1000C8000313F17);
  }
  if (v227) {
    MEMORY[0x1BA9BFB70](v227, 0x1000C8000313F17);
  }
  return 0;
}

void OZChannelPosition::generatePathFromShape(OZChannelPosition *this, const CMTime *a2, OZChannelCurve *a3)
{
  double v47 = 0.0;
  double v45 = 0.0;
  double v46 = 0.0;
  double v44 = 0.0;
  uint64_t v6 = (OZChannel *)((char *)this + 136);
  (*(void (**)(OZChannelPosition *, uint64_t))(*(void *)this + 464))(this, 1);
  OZChannel::generateKeyframesFromDynamicCurve(v6, a2, (OZChannelCurve *)((char *)a3 + 288));
  unint64_t v7 = (OZChannel *)((char *)this + 288);
  OZChannel::generateKeyframesFromDynamicCurve(v7, a2, (OZChannelCurve *)((char *)a3 + 520));
  OZChannel::getKeyframes(v6, 1, &v42);
  OZChannel::getKeyframes(v7, 1, v41);
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  CMTime __p = 0;
  double v36 = 0;
  uint64_t v37 = 0;
  BOOL v8 = (void **)v42;
  if (v43 == v42)
  {
    int8x16_t v32 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    do
    {
      if (v10)
      {
        uint64_t v11 = v10 - 1;
        OZChannel::getKeyframe(v6, v8[v11], 0, &v45);
        OZChannel::getKeyframe(v7, *((void **)v41[0] + v11), 0, &v44);
        OZChannel::getKeyframe(v6, *((void **)v42 + v9), 0, &v47);
        OZChannel::getKeyframe(v7, *((void **)v41[0] + v9), 0, &v46);
        if (vabdd_f64(v45, v47) < 0.0000001 && vabdd_f64(v44, v46) < 0.0000001)
        {
          double v12 = v42;
          CMTime v13 = v39;
          if (v39 >= v40)
          {
            uint64_t v15 = (v39 - (unsigned char *)v38) >> 3;
            if ((unint64_t)(v15 + 1) >> 61) {
              goto LABEL_54;
            }
            unint64_t v16 = (v40 - (unsigned char *)v38) >> 2;
            if (v16 <= v15 + 1) {
              unint64_t v16 = v15 + 1;
            }
            if ((unint64_t)(v40 - (unsigned char *)v38) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              signed int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v17);
            }
            else {
              signed int v18 = 0;
            }
            char v19 = &v18[8 * v15];
            *(void *)char v19 = v12[v9];
            double v14 = v19 + 8;
            double v21 = (char *)v38;
            uint64_t v20 = v39;
            if (v39 != v38)
            {
              do
              {
                uint64_t v22 = *((void *)v20 - 1);
                v20 -= 8;
                *((void *)v19 - atomic_store(0, (unint64_t *)this + 1) = v22;
                v19 -= 8;
              }
              while (v20 != v21);
              uint64_t v20 = (char *)v38;
            }
            unint64_t v38 = v19;
            uint64_t v39 = v14;
            unint64_t v40 = &v18[8 * v17];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *(void *)uint64_t v39 = *((void *)v42 + v9);
            double v14 = v13 + 8;
          }
          uint64_t v39 = v14;
          double v23 = v41[0];
          if (v36 >= v37)
          {
            uint64_t v25 = (v36 - __p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
LABEL_54:
            }
              std::vector<double>::__throw_length_error[abi:ne180100]();
            unint64_t v26 = (v37 - __p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v37 - __p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              double v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v37, v27);
            }
            else {
              double v28 = 0;
            }
            float v29 = &v28[8 * v25];
            *(void *)float v29 = v23[v9];
            PCString v24 = v29 + 8;
            uint64_t v30 = v36;
            if (v36 != __p)
            {
              do
              {
                uint64_t v31 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - atomic_store(0, (unint64_t *)this + 1) = v31;
                v29 -= 8;
              }
              while (v30 != __p);
              uint64_t v30 = __p;
            }
            CMTime __p = v29;
            uint64_t v37 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)double v36 = *((void *)v41[0] + v9);
            PCString v24 = v36 + 8;
          }
          double v36 = v24;
        }
      }
      BOOL v8 = (void **)v42;
      uint64_t v9 = ++v10;
    }
    while (v10 < (unint64_t)((v43 - (unsigned char *)v42) >> 3));
    int8x16_t v32 = (void **)v38;
    if (v39 != v38)
    {
      unint64_t v33 = 0;
      unsigned int v34 = 1;
      do
      {
        OZChannel::deleteKeyframe(v6, v32[v33]);
        OZChannel::deleteKeyframe(v7, *(void **)&__p[8 * v33]);
        unint64_t v33 = v34;
        int8x16_t v32 = (void **)v38;
        ++v34;
      }
      while (v33 < (v39 - (unsigned char *)v38) >> 3);
    }
  }
  if (__p)
  {
    operator delete(__p);
    int8x16_t v32 = (void **)v38;
  }
  if (v32)
  {
    uint64_t v39 = (char *)v32;
    operator delete(v32);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v42)
  {
    double v43 = v42;
    operator delete(v42);
  }
}

void sub_1B7A0360C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *OZChannelPosition::getObjCWrapperName(OZChannelPosition *this)
{
  return @"CHChannelPosition";
}

uint64_t OZChannelPosition::OZChannelPosition_valueImpl::getInstance(OZChannelPosition::OZChannelPosition_valueImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::_OZChannelPosition_value_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    CFTypeRef v3 = &v4;
    std::__call_once(&OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::_OZChannelPosition_value_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPosition::OZChannelPosition_valueImpl::_OZChannelPosition_value;
}

void std::__call_once_param<std::tuple<OZChannelPosition::OZChannelPosition_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPosition::OZChannelPosition_valueImpl::_OZChannelPosition_value) {
    operator new();
  }
}

void sub_1B7A0372C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelPosition::OZChannelPosition_valueImpl::OZChannelPosition_valueImpl(OZChannelPosition::OZChannelPosition_valueImpl *this)
{
}

void sub_1B7A0380C(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v2);
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelPosition::OZChannelPosition_valueInfo::getInstance(OZChannelPosition::OZChannelPosition_valueInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::OZChannelPosition_valueInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    CFTypeRef v3 = &v4;
    std::__call_once(&OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::OZChannelPosition_valueInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelPosition::OZChannelPosition_valueInfo::_OZChannelPosition_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelPosition::OZChannelPosition_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelPosition::OZChannelPosition_valueInfo::_OZChannelPosition_valueInfo) {
    operator new();
  }
}

void sub_1B7A03908(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelPosition::OZChannelPosition_valueInfo *OZChannelPosition::OZChannelPosition_valueInfo::OZChannelPosition_valueInfo(OZChannelPosition::OZChannelPosition_valueInfo *this, OZFactoryBase *a2)
{
  TXParagraphStyleFolder_Factory::createInstance(this, a2);
  PCURL::PCURL((PCURL *)&v4, @"Channel Position Suffix");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.40282347e38, 3.40282347e38, 1.0, 0.01, 1.0, &v4);
  PCString::~PCString(&v4);
  PCSingleton::PCSingleton((OZChannelPosition::OZChannelPosition_valueInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F110E9F8;
  *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F110EA18;
  return this;
}

void sub_1B7A039EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  OZChannelPosition::OZChannelPosition(this, a2, a3, a4, a5, a6, 0, 0);
  *(void *)uint64_t v7 = &unk_1F110EA70;
  *(void *)(v7 + 16) = &unk_1F110EDC8;
  *(void *)(v7 + 704) = 0;
  *(void *)(v7 + 72OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v7 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(unsigned char *)(v7 + 72OZSpline::reparametrize((uint64_t)this + 8) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v7, v8);
  PCURL::PCURL((PCURL *)&v14, @"Channel Z");
  uint64_t Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v9);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), &v14, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v14);
  double v12 = (OZChannelPosition::OZChannelPosition_valueInfo *)OZChannelPosition3D_Factory::getInstance(v11);
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = v12;
  CMTime v13 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v12);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v13);
}

void sub_1B7A03B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  double v12 = (void *)*((void *)v10 + 88);
  if (v12)
  {
    *((void *)v10 + 89) = v12;
    operator delete(v12);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9)
{
  OZChannelPosition::OZChannelPosition(this, a2, a3, a5, a6, a7, a8, a9, 0, 0);
  *(void *)uint64_t v11 = &unk_1F110EA70;
  *(void *)(v11 + 16) = &unk_1F110EDC8;
  *(void *)(v11 + 704) = 0;
  *(void *)(v11 + 72OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v11 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(unsigned char *)(v11 + 72OZSpline::reparametrize((uint64_t)this + 8) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v11, v12);
  PCURL::PCURL((PCURL *)&v18, @"Channel Z");
  uint64_t Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), a4, &v18, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v18);
  unint64_t v16 = (OZChannelPosition::OZChannelPosition_valueInfo *)OZChannelPosition3D_Factory::getInstance(v15);
  *((void *)this + atomic_store(0, (unint64_t *)this + 1) = v16;
  unint64_t v17 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v16);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v17);
}

void sub_1B7A03C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  double v12 = (void *)*((void *)v10 + 88);
  if (v12)
  {
    *((void *)v10 + 89) = v12;
    operator delete(v12);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelPosition::OZChannelPosition(this, a2, a3, a4, a5, 0, 0);
  *(void *)uint64_t v6 = &unk_1F110EA70;
  *(void *)(v6 + 16) = &unk_1F110EDC8;
  *(void *)(v6 + 704) = 0;
  *(void *)(v6 + 72OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v6 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(unsigned char *)(v6 + 72OZSpline::reparametrize((uint64_t)this + 8) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v6, v7);
  PCURL::PCURL((PCURL *)&v12, @"Channel Z");
  uint64_t Instance = (OZChannelImpl *)OZChannelPosition::OZChannelPosition_valueImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZChannelPosition3D *)((char *)this + 736), &v12, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v12);
  uint64_t v11 = (OZChannelInfo *)OZChannelPosition::OZChannelPosition_valueInfo::getInstance(v10);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 736), v11);
}

void sub_1B7A03D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v11);
  CMTime v13 = (void *)*((void *)v10 + 88);
  if (v13)
  {
    *((void *)v10 + 89) = v13;
    operator delete(v13);
  }
  OZChannelPosition::~OZChannelPosition(v10);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::OZChannelPosition3D(OZChannelPosition3D *this, const OZChannelPosition3D *a2, OZChannelFolder *a3)
{
  OZChannelPosition::OZChannelPosition(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F110EA70;
  *(void *)(v5 + 16) = &unk_1F110EDC8;
  *(void *)(v5 + 704) = 0;
  *(void *)(v5 + 72OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v5 + 71OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(unsigned char *)(v5 + 72OZSpline::reparametrize((uint64_t)this + 8) = *((unsigned char *)a2 + 728);
  OZChannel::OZChannel((OZChannel *)(v5 + 736), (const OZChannelBase *)((char *)a2 + 736), (OZChannelFolder *)this);
  *((void *)this + 9OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1100CF0;
  *((void *)this + 94) = &unk_1F1101050;
}

void sub_1B7A03EAC(_Unwind_Exception *a1)
{
  PCString v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 89) = v4;
    operator delete(v4);
  }
  OZChannelPosition::~OZChannelPosition(v1);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::~OZChannelPosition3D(OZChannelPosition3D *this)
{
  *(void *)this = &unk_1F110EA70;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110EDC8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 736));
  char v2 = (void *)*((void *)this + 88);
  if (v2)
  {
    *((void *)this + 89) = v2;
    operator delete(v2);
  }

  OZChannelPosition::~OZChannelPosition(this);
}

{
  uint64_t vars8;

  OZChannelPosition3D::~OZChannelPosition3D(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelPosition3D::~OZChannelPosition3D(OZChannelPosition3D *this)
{
}

{
  uint64_t vars8;

  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelPosition3D::clone(OZChannelPosition3D *this)
{
}

void sub_1B7A04028(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40CC6A35F7);
  _Unwind_Resume(a1);
}

void OZChannelPosition3D::copy(OZChannelPosition3D *this, const OZChannelBase *a2, char a3)
{
  OZChannelPosition::copy(this, a2, a3);
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = v6;
      PCSpinLock::lock((os_unfair_lock_t)this + 175);
      *((void *)this + 89) = *((void *)this + 88);
      PCSpinLock::unlock((os_unfair_lock_t)this + 175);
      OZChannel::copy((OZChannel *)((char *)this + 736), (const OZChannelBase *)(v7 + 736), a3);
      *((unsigned char *)this + 72OZSpline::reparametrize((uint64_t)this + 8) = v7[728];
    }
  }
}

uint64_t OZChannelPosition3D::setPosition(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, 0.0);
  double v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 736), a2, 0.0);

  return OZChannelPosition3D::offsetPosition(this, a2, a3 - v11, a4 - v13, a5 - v14, 1);
}

uint64_t OZChannelPosition3D::offsetPosition(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5, char a6)
{
  memset(&v17, 0, sizeof(v17));
  double v12 = (OZChannel *)((char *)this + 136);
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 328))(&v17);
  double CurveValue = OZChannel::getCurveValue(v12, &v17, 0);
  double v14 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v17, 0);
  double v15 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v17, 0);
  if (a6) {
    return OZChannelPosition3D::setValue(this, a2, CurveValue + a3, v14 + a4, v15 + a5);
  }
  OZChannel::willBeModified(v12, 1);
  OZChannel::offsetChannel(v12, a2, CurveValue + a3);
  OZChannel::willBeModified((OZChannel *)((char *)this + 288), 1);
  OZChannel::offsetChannel((OZChannel *)((char *)this + 288), a2, v14 + a4);
  OZChannel::willBeModified((OZChannel *)((char *)this + 736), 1);
  return OZChannel::offsetChannel((OZChannel *)((char *)this + 736), a2, v15 + a5);
}

uint64_t OZChannelPosition3D::setValue(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  double v10 = (OZChannel *)((char *)this + 136);
  (*(void (**)(char *, const CMTime *, void))(*((void *)this + 17) + 712))((char *)this + 136, a2, 0);
  (*((void (**)(double))v10[1].var0 + 89))(a4);
  (*((void (**)(double))v10[3].var18 + 89))(a5);
  uint64_t result = OZChannel::isParametricCurveClosed(v10);
  if ((result & 1) == 0)
  {
    return OZChannelPosition3D::derivePath(this, a2, a3, a4, a5, 0);
  }
  return result;
}

uint64_t OZChannelPosition3D::derivePath(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5, int a6)
{
  double v147 = 0.0;
  double v148 = 0.0;
  double v145 = 0.0;
  double v146 = 0.0;
  double v144 = 0.0;
  double v143 = 0.0;
  double v142 = 0.0;
  double v141 = 0.0;
  double v140 = 0.0;
  double v139 = 0.0;
  double v138 = 0.0;
  double v137 = 0.0;
  CMTime v136 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v135 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v134 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v133 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v132 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v131 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v130 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v129 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v128 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v127 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v126 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v125 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v12 = (OZChannel *)((char *)this + 136);
  double v124 = 0.0;
  if (OZChannel::isParametric((OZChannel *)((char *)this + 136)) && a6) {
    OZChannel2D::deriveChannel(this, a2);
  }
  uint64_t result = OZChannel::isParametricCurveClosed(v12);
  if (result) {
    return result;
  }
  memset(&v123, 0, sizeof(v123));
  (*(void (**)(CMTime *__return_ptr, OZChannelPosition3D *))(*(void *)this + 320))(&v122, this);
  CMTime v150 = *a2;
  CMTime v149 = v122;
  PC_CMTimeSaferSubtract(&v150, &v149, (uint64_t)&v123);
  uint64_t Keyframe = OZChannel::getKeyframe(v12, &v123);
  uint64_t v14 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v123);
  uint64_t v15 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v123);
  int PreviousKeyframe = OZChannel::getPreviousKeyframe(v12, &v123, &v136, &v146);
  uint64_t v17 = 0;
  if (PreviousKeyframe) {
    uint64_t v17 = OZChannel::getKeyframe(v12, &v136);
  }
  if (OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 288), &v123, &v135, &v142))
  {
    uint64_t v18 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v135);
  }
  else
  {
    int PreviousKeyframe = 0;
    uint64_t v18 = 0;
  }
  if (OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 736), &v123, &v134, &v138))
  {
    uint64_t v19 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v134);
  }
  else
  {
    int PreviousKeyframe = 0;
    uint64_t v19 = 0;
  }
  unint64_t v116 = (void *)v14;
  CMTime v108 = (void *)v18;
  float64_t v106 = (void *)v19;
  if (v17)
  {
    uint64_t v20 = v18;
    BOOL v21 = v18 != 0;
    if (!v20)
    {
      uint64_t v22 = v19;
      double CurveValue = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v136, 1);
      uint64_t v19 = v22;
      double v142 = CurveValue;
    }
    PCString v24 = (void *)v15;
    uint64_t v25 = (void *)v17;
    if (v19)
    {
      int v110 = 1;
      goto LABEL_26;
    }
    unint64_t v27 = &v136;
    goto LABEL_22;
  }
  PCString v24 = (void *)v15;
  uint64_t v25 = 0;
  if (!v18)
  {
    if (v19)
    {
      int v110 = 1;
      double v146 = OZChannel::getCurveValue(v12, &v134, 1);
      BOOL v21 = 0;
      double v142 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v134, 1);
    }
    else
    {
      int v110 = 0;
      BOOL v21 = 0;
    }
    goto LABEL_26;
  }
  int v110 = 1;
  uint64_t v26 = v19;
  double v146 = OZChannel::getCurveValue(v12, &v135, 1);
  BOOL v21 = 1;
  if (!v26)
  {
    unint64_t v27 = &v135;
LABEL_22:
    int v110 = 0;
    double v138 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), v27, 1);
  }
LABEL_26:
  Nextuint64_t Keyframe = OZChannel::getNextKeyframe(v12, &v123, &v133, &v145);
  if (NextKeyframe) {
    unint64_t v121 = (void *)OZChannel::getKeyframe(v12, &v133);
  }
  else {
    unint64_t v121 = 0;
  }
  double v28 = v25;
  if (OZChannel::getNextKeyframe((OZChannel *)((char *)this + 288), &v123, &v132, &v141))
  {
    uint64_t v113 = (void *)OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v132);
  }
  else
  {
    uint64_t v113 = 0;
    Nextuint64_t Keyframe = 0;
  }
  if (OZChannel::getNextKeyframe((OZChannel *)((char *)this + 736), &v123, &v131, &v137))
  {
    uint64_t v29 = OZChannel::getKeyframe((OZChannel *)((char *)this + 736), &v131);
  }
  else
  {
    uint64_t v29 = 0;
    Nextuint64_t Keyframe = 0;
  }
  unsigned int v112 = v24;
  unint64_t v114 = (OZChannel *)((char *)this + 288);
  uint64_t v107 = (void *)v29;
  if (v121)
  {
    BOOL v30 = v113 != 0;
    if (!v113)
    {
      uint64_t v31 = v29;
      double v32 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v133, 1);
      BOOL v30 = 0;
      uint64_t v29 = v31;
      double v141 = v32;
    }
    int v33 = a6;
    if (v29)
    {
      int v34 = 1;
      goto LABEL_48;
    }
    BOOL v37 = v30;
    double v36 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v133, 1);
    BOOL v30 = v37;
    goto LABEL_44;
  }
  if (!v113)
  {
    int v33 = a6;
    if (v29)
    {
      int v34 = 1;
      double v145 = OZChannel::getCurveValue(v12, &v131, 1);
      double v38 = OZChannel::getCurveValue((OZChannel *)((char *)this + 288), &v131, 1);
      BOOL v30 = 0;
      double v141 = v38;
    }
    else
    {
      int v34 = 0;
      BOOL v30 = 0;
    }
    goto LABEL_48;
  }
  int v33 = a6;
  int v34 = 1;
  uint64_t v35 = v29;
  double v145 = OZChannel::getCurveValue(v12, &v132, 1);
  BOOL v30 = 1;
  if (!v35)
  {
    double v36 = OZChannel::getCurveValue((OZChannel *)((char *)this + 736), &v132, 1);
    BOOL v30 = 1;
LABEL_44:
    int v34 = 0;
    double v137 = v36;
  }
LABEL_48:
  int v109 = v33;
  uint64_t v115 = (OZChannel *)((char *)this + 736);
  if (v121) {
    int v39 = 1;
  }
  else {
    int v39 = v34 | v30;
  }
  if (v28) {
    int v40 = 1;
  }
  else {
    int v40 = v110 | v21;
  }
  BOOL v41 = v30;
  uint64_t result = OZChannelBase::testFlag((OZChannelBase *)this, 0x200000);
  uint64_t v42 = v24;
  double v44 = v116;
  double v43 = (void *)Keyframe;
  if ((result & 1) == 0)
  {
    BOOL v111 = v41;
    if ((v39 | PreviousKeyframe & v40 ^ 1)) {
      goto LABEL_106;
    }
    double v45 = a3 - v146;
    double v46 = a4 - v142;
    double v47 = a5 - v138;
    if (v28)
    {
      double v48 = v12;
      unint64_t v49 = v28;
    }
    else
    {
      if (v21)
      {
        double v50 = v108;
        char KeyframeFlags = OZChannel::getKeyframeFlags(v114, v108);
        goto LABEL_62;
      }
      double v48 = v115;
      unint64_t v49 = v106;
    }
    char KeyframeFlags = OZChannel::getKeyframeFlags(v48, v49);
    double v50 = v108;
LABEL_62:
    double v52 = v45 / 6.0;
    double v53 = v46 / 6.0;
    if (KeyframeFlags < 0)
    {
LABEL_96:
      if (v43)
      {
        unint64_t v71 = v12;
        uint64_t v72 = v43;
      }
      else if (v44)
      {
        unint64_t v71 = v114;
        uint64_t v72 = v44;
      }
      else
      {
        unint64_t v71 = v115;
        uint64_t v72 = v112;
      }
      uint64_t result = OZChannel::getKeyframeFlags(v71, v72);
      if ((result & 0x80) == 0 || v109)
      {
        OZChannel::getKeyframeInputTangents(v12, v43, &v124, 0, 1);
        OZChannel::setKeyframeInputTangents(v12, v43, v124, -v52, 1);
        OZChannel::getKeyframeInputTangents(v114, v44, &v124, 0, 1);
        OZChannel::setKeyframeInputTangents(v114, v44, v124, -v53, 1);
        OZChannel::getKeyframeInputTangents(v115, v112, &v124, 0, 1);
        OZChannel::setKeyframeInputTangents(v115, v112, v124, -(v47 / 6.0), 1);
        if (v109)
        {
          OZChannel::getKeyframeOutputTangents(v12, v43, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v43, v124, 0.0, 1);
          OZChannel::getKeyframeOutputTangents(v114, v44, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v114, v44, v124, 0.0, 1);
          OZChannel::getKeyframeOutputTangents(v115, v112, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v115, v112, v124, 0.0, 1);
        }
        OZChannel::getKeyframeFlags(v12, v43);
        OZChannel::setKeyframeFlags(v12, v43);
        OZChannel::getKeyframeFlags(v114, v44);
        OZChannel::setKeyframeFlags(v114, v44);
        OZChannel::getKeyframeFlags(v115, v112);
        uint64_t result = OZChannel::setKeyframeFlags(v115, v112);
      }
LABEL_106:
      if ((v40 | NextKeyframe & v39 ^ 1))
      {
LABEL_155:
        if ((v40 & v39) == 1)
        {
          if (v109)
          {
            double v98 = (v145 - v146) / 6.0;
            double v99 = (v141 - v142) / 6.0;
            double v100 = (v137 - v138) / 6.0;
            OZChannel::getKeyframeInputTangents(v12, v43, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v12, v43, v124, -(v98 * 0.5), 1);
            OZChannel::getKeyframeInputTangents(v114, v44, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v114, v44, v124, -(v99 * 0.5), 1);
            OZChannel::getKeyframeInputTangents(v115, v42, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v115, v42, v124, -(v100 * 0.5), 1);
            OZChannel::getKeyframeOutputTangents(v12, v43, &v124, 0, 1);
            OZChannel::setKeyframeOutputTangents(v12, v43, v124, v98 * 0.5, 1);
            OZChannel::getKeyframeOutputTangents(v114, v44, &v124, 0, 1);
            OZChannel::setKeyframeOutputTangents(v114, v44, v124, v99 * 0.5, 1);
            OZChannel::getKeyframeOutputTangents(v115, v42, &v124, 0, 1);
            return OZChannel::setKeyframeOutputTangents(v115, v42, v124, v100 * 0.5, 1);
          }
        }
        return result;
      }
      double v73 = v137 - a5;
      uint64_t v74 = v121;
      if (v121)
      {
        double v75 = v12;
      }
      else if (v111)
      {
        uint64_t v74 = v113;
        double v75 = v114;
      }
      else
      {
        double v75 = v115;
        uint64_t v74 = v107;
      }
      double v76 = (v145 - a3) / 6.0;
      double v77 = (v141 - a4) / 6.0;
      double v78 = v73 / 6.0;
      if ((OZChannel::getKeyframeFlags(v75, v74) & 0x80) != 0)
      {
LABEL_145:
        if (v43)
        {
          unint64_t v96 = v12;
          uint64_t v97 = v43;
        }
        else if (v44)
        {
          unint64_t v96 = v114;
          uint64_t v97 = v44;
        }
        else
        {
          unint64_t v96 = v115;
          uint64_t v97 = v42;
        }
        uint64_t result = OZChannel::getKeyframeFlags(v96, v97);
        if ((result & 0x80) == 0 || v109)
        {
          OZChannel::getKeyframeOutputTangents(v12, v43, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v43, v124, v76, 1);
          OZChannel::getKeyframeOutputTangents(v114, v44, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v114, v44, v124, v77, 1);
          OZChannel::getKeyframeOutputTangents(v115, v42, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v115, v42, v124, v78, 1);
          if (v109)
          {
            OZChannel::getKeyframeInputTangents(v12, v43, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v12, v43, v124, 0.0, 1);
            OZChannel::getKeyframeInputTangents(v114, v44, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v114, v44, v124, 0.0, 1);
            OZChannel::getKeyframeInputTangents(v115, v42, &v124, 0, 1);
            OZChannel::setKeyframeInputTangents(v115, v42, v124, 0.0, 1);
          }
          OZChannel::getKeyframeFlags(v12, v43);
          OZChannel::setKeyframeFlags(v12, v43);
          OZChannel::getKeyframeFlags(v114, v44);
          OZChannel::setKeyframeFlags(v114, v44);
          OZChannel::getKeyframeFlags(v115, v42);
          uint64_t result = OZChannel::setKeyframeFlags(v115, v42);
        }
        goto LABEL_155;
      }
      if (OZChannel::getNextKeyframe(v12, &v133, &v127, &v147)) {
        uint64_t v79 = OZChannel::getKeyframe(v12, &v127);
      }
      else {
        uint64_t v79 = 0;
      }
      int v105 = v40;
      if (OZChannel::getNextKeyframe(v114, &v132, &v126, &v143)) {
        uint64_t v80 = OZChannel::getKeyframe(v114, &v126);
      }
      else {
        uint64_t v80 = 0;
      }
      if (OZChannel::getNextKeyframe(v115, &v131, &v125, &v139)) {
        uint64_t v81 = OZChannel::getKeyframe(v115, &v125);
      }
      else {
        uint64_t v81 = 0;
      }
      BOOL v82 = v80 != 0;
      if (v79)
      {
        if (!v80) {
          double v143 = OZChannel::getCurveValue(v114, &v127, 1);
        }
        if (v81)
        {
          BOOL v83 = 1;
        }
        else
        {
          BOOL v83 = 0;
          double v139 = OZChannel::getCurveValue(v115, &v127, 1);
        }
        int v84 = v82;
        goto LABEL_133;
      }
      if (v80)
      {
        int v84 = 1;
        double v147 = OZChannel::getCurveValue(v12, &v126, 1);
        BOOL v83 = v81 != 0;
        if (!v81)
        {
          uint64_t v42 = v112;
          if (!v111) {
            goto LABEL_134;
          }
          goto LABEL_130;
        }
      }
      else
      {
        if (!v81)
        {
          uint64_t v42 = v112;
          if (!v111)
          {
            BOOL v83 = 0;
            int v84 = 0;
LABEL_134:
            BOOL v85 = vabdd_f64(v147, v145) < 0.0000001
               && vabdd_f64(v143, v141) < 0.0000001
               && vabdd_f64(v139, v137) < 0.0000001;
            double v44 = v116;
            int v86 = v83 | v84;
            if (v79) {
              int v86 = 1;
            }
            if (v86 != 1 || v85)
            {
              uint64_t v91 = v121;
              OZChannel::getKeyframeInputTangents(v12, v121, &v124, 0, 1);
              OZChannel::setKeyframeInputTangents(v12, v121, v124, -v76, 1);
              unint64_t v92 = v113;
              OZChannel::getKeyframeInputTangents(v114, v113, &v124, 0, 1);
              OZChannel::setKeyframeInputTangents(v114, v113, v124, -v77, 1);
              double v93 = v115;
              BOOL v94 = v107;
              OZChannel::getKeyframeInputTangents(v115, v107, &v124, 0, 1);
              OZChannel::setKeyframeInputTangents(v115, v107, v124, -v78, 1);
            }
            else
            {
              double v87 = (a3 - v147) / 6.0;
              double v117 = (a4 - v143) / 6.0 * 0.5;
              double v88 = a5 - v139;
              double v89 = v77;
              double v90 = v88 / 6.0;
              double v120 = v88 / 6.0 * 0.5;
              uint64_t v91 = v121;
              OZChannel::getKeyframeInputTangents(v12, v121, &v124, 0, 1);
              OZChannel::setKeyframeInputTangents(v12, v121, v124, -(v87 * 0.5), 1);
              unint64_t v92 = v113;
              OZChannel::getKeyframeInputTangents(v114, v113, &v124, 0, 1);
              double v78 = v73 / 6.0;
              OZChannel::setKeyframeInputTangents(v114, v113, v124, -v117, 1);
              double v93 = v115;
              BOOL v94 = v107;
              OZChannel::getKeyframeInputTangents(v115, v107, &v124, 0, 1);
              double v95 = -(v90 * 0.5);
              double v77 = v89;
              OZChannel::setKeyframeInputTangents(v115, v107, v124, v95, 1);
              OZChannel::getKeyframeOutputTangents(v12, v121, &v124, 0, 1);
              OZChannel::setKeyframeOutputTangents(v12, v121, v124, v87 * 0.5, 1);
              OZChannel::getKeyframeOutputTangents(v114, v113, &v124, 0, 1);
              OZChannel::setKeyframeOutputTangents(v114, v113, v124, v117, 1);
              OZChannel::getKeyframeOutputTangents(v115, v107, &v124, 0, 1);
              OZChannel::setKeyframeOutputTangents(v115, v107, v124, v120, 1);
            }
            double v43 = (void *)Keyframe;
            OZChannel::getKeyframeFlags(v12, v91);
            OZChannel::setKeyframeFlags(v12, v91);
            OZChannel::getKeyframeFlags(v114, v92);
            OZChannel::setKeyframeFlags(v114, v92);
            OZChannel::getKeyframeFlags(v93, v94);
            OZChannel::setKeyframeFlags(v93, v94);
            int v40 = v105;
            goto LABEL_145;
          }
LABEL_130:
          BOOL v83 = 0;
          double v139 = OZChannel::getCurveValue(v115, &v126, 1);
          int v84 = v82;
          goto LABEL_134;
        }
        BOOL v83 = 1;
        double v147 = OZChannel::getCurveValue(v12, &v125, 1);
        int v84 = 0;
        double v143 = OZChannel::getCurveValue(v114, &v125, 1);
      }
LABEL_133:
      uint64_t v42 = v112;
      goto LABEL_134;
    }
    if (OZChannel::getPreviousKeyframe(v12, &v136, &v130, &v148)) {
      uint64_t v54 = OZChannel::getKeyframe(v12, &v130);
    }
    else {
      uint64_t v54 = 0;
    }
    int v104 = v40;
    if (OZChannel::getPreviousKeyframe(v114, &v135, &v129, &v144)) {
      uint64_t v55 = OZChannel::getKeyframe(v114, &v129);
    }
    else {
      uint64_t v55 = 0;
    }
    int v56 = v39;
    if (OZChannel::getPreviousKeyframe(v115, &v134, &v128, &v140)) {
      uint64_t v57 = OZChannel::getKeyframe(v115, &v134);
    }
    else {
      uint64_t v57 = 0;
    }
    if (v54)
    {
      BOOL v58 = v55 != 0;
      if (!v55) {
        double v148 = OZChannel::getCurveValue(v114, &v130, 1);
      }
      if (v57)
      {
        int v59 = 1;
        goto LABEL_85;
      }
      unint64_t v60 = &v130;
    }
    else
    {
      if (!v55)
      {
        if (v57)
        {
          int v59 = 1;
          double v148 = OZChannel::getCurveValue(v12, &v128, 1);
          BOOL v58 = 0;
          double v144 = OZChannel::getCurveValue(v114, &v128, 1);
        }
        else
        {
          int v59 = 0;
          BOOL v58 = 0;
        }
        goto LABEL_85;
      }
      int v59 = 1;
      double v148 = OZChannel::getCurveValue(v12, &v129, 1);
      BOOL v58 = 1;
      if (v57)
      {
LABEL_85:
        BOOL v61 = vabdd_f64(v148, v146) < 0.0000001
           && vabdd_f64(v144, v142) < 0.0000001
           && vabdd_f64(v140, v138) < 0.0000001;
        int v39 = v56;
        unint64_t v62 = v50;
        int v63 = v59 | v58;
        if (v54) {
          int v63 = 1;
        }
        if (v63 != 1 || v61)
        {
          OZChannel::getKeyframeOutputTangents(v12, v28, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v28, v124, v52, 1);
          OZChannel::getKeyframeOutputTangents(v114, v50, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v114, v50, v124, v53, 1);
          unint64_t v64 = v114;
          uint64_t v65 = v115;
          unint64_t v66 = v106;
          OZChannel::getKeyframeOutputTangents(v115, v106, &v124, 0, 1);
          double v67 = v124;
          unint64_t v68 = v115;
          uint64_t v69 = v106;
          double v70 = v47 / 6.0;
        }
        else
        {
          double v101 = (a3 - v148) / 6.0 * 0.5;
          double v102 = (a4 - v144) / 6.0 * 0.5;
          double v103 = (a5 - v140) / 6.0 * 0.5;
          OZChannel::getKeyframeInputTangents(v12, v28, &v124, 0, 1);
          OZChannel::setKeyframeInputTangents(v12, v28, v124, -v101, 1);
          OZChannel::getKeyframeInputTangents(v114, v50, &v124, 0, 1);
          OZChannel::setKeyframeInputTangents(v114, v50, v124, -v102, 1);
          unint64_t v64 = v114;
          uint64_t v65 = v115;
          unint64_t v66 = v106;
          OZChannel::getKeyframeInputTangents(v115, v106, &v124, 0, 1);
          OZChannel::setKeyframeInputTangents(v115, v106, v124, -v103, 1);
          OZChannel::getKeyframeOutputTangents(v12, v28, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v12, v28, v124, v101, 1);
          OZChannel::getKeyframeOutputTangents(v114, v62, &v124, 0, 1);
          OZChannel::setKeyframeOutputTangents(v114, v62, v124, v102, 1);
          OZChannel::getKeyframeOutputTangents(v115, v106, &v124, 0, 1);
          double v67 = v124;
          unint64_t v68 = v115;
          uint64_t v69 = v106;
          double v70 = v103;
        }
        OZChannel::setKeyframeOutputTangents(v68, v69, v67, v70, 1);
        double v44 = v116;
        double v43 = (void *)Keyframe;
        OZChannel::getKeyframeFlags(v12, v28);
        OZChannel::setKeyframeFlags(v12, v28);
        OZChannel::getKeyframeFlags(v64, v62);
        OZChannel::setKeyframeFlags(v64, v62);
        OZChannel::getKeyframeFlags(v65, v66);
        OZChannel::setKeyframeFlags(v65, v66);
        int v40 = v104;
        goto LABEL_96;
      }
      unint64_t v60 = &v129;
    }
    int v59 = 0;
    double v140 = OZChannel::getCurveValue(v115, v60, 1);
    goto LABEL_85;
  }
  return result;
}

void OZChannelPosition3D::insertBezierPoint(OZChannelPosition3D *this, const CMTime *a2, double a3, double a4, double a5)
{
  v62[2] = *(double *)MEMORY[0x1E4F143B8];
  double v54 = 0.0;
  v55[0] = 0.0;
  double v52 = 0.0;
  double CurveValue = 0.0;
  double v50 = 0.0;
  double v51 = 0.0;
  CMTime v49 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v48 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v47 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v46 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v45 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v10 = (OZChannel *)((char *)this + 136);
  double v43 = 0.0;
  int isParametricCurveClosed = OZChannel::isParametricCurveClosed((OZChannel *)((char *)this + 136));
  OZChannel::getPreviousKeyframe(v10, a2, &v49, v55);
  uint64_t Keyframe = OZChannel::getKeyframe(v10, &v49);
  double v13 = (OZChannel *)((char *)this + 288);
  OZChannel::getPreviousKeyframe((OZChannel *)((char *)this + 288), a2, &v48, &CurveValue);
  uint64_t v14 = OZChannel::getKeyframe((OZChannel *)((char *)this + 288), &v48);
  uint64_t v15 = (OZChannel *)((char *)this + 736);
  OZChannel::getPreviousKeyframe(v15, a2, &v47, &v51);
  uint64_t v16 = OZChannel::getKeyframe(v15, &v47);
  uint64_t v17 = (void *)v16;
  int v39 = (void *)Keyframe;
  if (Keyframe)
  {
    BOOL v37 = v14 != 0;
    if (v14)
    {
      if (v16)
      {
LABEL_4:
        int v18 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      double CurveValue = OZChannel::getCurveValue(v13, &v49, 1);
      if (v17) {
        goto LABEL_4;
      }
    }
    uint64_t v19 = &v49;
LABEL_10:
    int v18 = 0;
    double v51 = OZChannel::getCurveValue(v15, v19, 1);
    goto LABEL_14;
  }
  if (v14)
  {
    int v18 = 1;
    v55[0] = OZChannel::getCurveValue(v10, &v48, 1);
    BOOL v37 = 1;
    if (v17) {
      goto LABEL_14;
    }
    BOOL v37 = 1;
    uint64_t v19 = &v48;
    goto LABEL_10;
  }
  if (v16)
  {
    int v18 = 1;
    v55[0] = OZChannel::getCurveValue(v10, &v47, 1);
    BOOL v37 = 0;
    double CurveValue = OZChannel::getCurveValue(v13, &v47, 1);
  }
  else
  {
    int v18 = 0;
    BOOL v37 = 0;
  }
LABEL_14:
  if (OZChannel::getNextKeyframe(v10, a2, &v46, &v54))
  {
    BOOL v41 = (void *)OZChannel::getKeyframe(v10, &v46);
    goto LABEL_22;
  }
  if (isParametricCurveClosed)
  {
    if (OZChannel::getFirstKeyframe(v10, &v46, &v54))
    {
      BOOL v41 = (void *)OZChannel::getKeyframe(v10, &v46);
      CMTimeMake(&v56, 1, 1);
      CMTime v61 = v49;
      CMTime v59 = v56;
      PC_CMTimeSaferAdd(&v61, &v59, (uint64_t)&v57);
      CMTime v46 = v57;
    }
    else
    {
      BOOL v41 = 0;
    }
LABEL_22:
    if ((OZChannel::getNextKeyframe(v13, a2, &v45, &v52) & 1) == 0)
    {
      if (isParametricCurveClosed && OZChannel::getFirstKeyframe(v13, &v45, &v52))
      {
        int v40 = (void *)OZChannel::getKeyframe(v13, &v45);
        CMTimeMake(&v56, 1, 1);
        CMTime v61 = v48;
        CMTime v59 = v56;
        PC_CMTimeSaferAdd(&v61, &v59, (uint64_t)&v57);
        CMTime v45 = v57;
      }
      else
      {
        int v40 = 0;
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  int v40 = 0;
  BOOL v41 = 0;
  if (OZChannel::getNextKeyframe(v13, a2, &v45, &v52)) {
LABEL_23:
  }
    int v40 = (void *)OZChannel::getKeyframe(v13, &v45);
LABEL_28:
  if (OZChannel::getNextKeyframe(v15, a2, &v44, &v50))
  {
    double v38 = (void *)OZChannel::getKeyframe(v15, &v44);
  }
  else if (isParametricCurveClosed && OZChannel::getFirstKeyframe(v15, &v44, &v50))
  {
    double v38 = (void *)OZChannel::getKeyframe(v15, &v44);
    CMTimeMake(&v56, 1, 1);
    CMTime v61 = v47;
    CMTime v59 = v56;
    PC_CMTimeSaferAdd(&v61, &v59, (uint64_t)&v57);
    CMTime v44 = v57;
  }
  else
  {
    double v38 = 0;
  }
  double v36 = v17;
  if (v41)
  {
    BOOL v20 = v40 != 0;
    if (!v40) {
      double v52 = OZChannel::getCurveValue(v13, &v46, 1);
    }
    BOOL v21 = (void *)v14;
    if (v38)
    {
      int v22 = 1;
      goto LABEL_47;
    }
    double v23 = &v46;
LABEL_43:
    int v22 = 0;
    double v50 = OZChannel::getCurveValue(v15, v23, 1);
    goto LABEL_47;
  }
  if (v40)
  {
    BOOL v21 = (void *)v14;
    int v22 = 1;
    double v54 = OZChannel::getCurveValue(v10, &v45, 1);
    BOOL v20 = 1;
    if (v38) {
      goto LABEL_47;
    }
    double v23 = &v45;
    goto LABEL_43;
  }
  BOOL v21 = (void *)v14;
  if (v38)
  {
    int v22 = 1;
    double v54 = OZChannel::getCurveValue(v10, &v44, 1);
    BOOL v20 = 0;
    double v52 = OZChannel::getCurveValue(v13, &v44, 1);
  }
  else
  {
    int v22 = 0;
    BOOL v20 = 0;
  }
LABEL_47:
  int v24 = v20 | v22;
  if (v41) {
    int v24 = 1;
  }
  if (v39 || ((v18 | v37) & 1) != 0)
  {
    if (v24)
    {
      CMTime v42 = *a2;
      CMTimeGetSeconds(&v42);
      OZChannel::getKeyframe(v10, v39, 0, (double *)&v61.value);
      OZChannel::getKeyframeOutputTangents(v10, v39, 0, (double *)&v61.timescale, 1);
      *(double *)&v61.int32_t timescale = *(double *)&v61.timescale + *(double *)&v61.value;
      OZChannel::getKeyframe(v13, v21, 0, (double *)&v59.value);
      OZChannel::getKeyframeOutputTangents(v13, v21, 0, (double *)&v59.timescale, 1);
      *(double *)&v59.int32_t timescale = *(double *)&v59.timescale + *(double *)&v59.value;
      OZChannel::getKeyframe(v15, v36, 0, (double *)&v57.value);
      OZChannel::getKeyframeOutputTangents(v15, v36, 0, (double *)&v57.timescale, 1);
      *(double *)&v57.int32_t timescale = *(double *)&v57.timescale + *(double *)&v57.value;
      OZChannel::getKeyframe(v10, v41, 0, v62);
      OZChannel::getKeyframeInputTangents(v10, v41, 0, (double *)&v61.epoch, 1);
      *(double *)&v61.CMTimeEpoch epoch = *(double *)&v61.epoch + v62[0];
      OZChannel::getKeyframe(v13, v40, 0, &v60);
      OZChannel::getKeyframeInputTangents(v13, v40, 0, (double *)&v59.epoch, 1);
      *(double *)&v59.CMTimeEpoch epoch = *(double *)&v59.epoch + v60;
      OZChannel::getKeyframe(v15, v38, 0, &v58);
      OZChannel::getKeyframeInputTangents(v15, v38, 0, (double *)&v57.epoch, 1);
      *(double *)&v57.CMTimeEpoch epoch = *(double *)&v57.epoch + v58;
      operator new[]();
    }
    double v33 = (a3 - v55[0]) / 3.0;
    double v34 = (a4 - CurveValue) / 3.0;
    double v35 = (a5 - v51) / 3.0;
    OZChannel::setKeyframe(v10, a2, a3, 1);
    uint64_t v25 = (void *)OZChannel::getKeyframe(v10, a2);
    OZChannel::setKeyframe(v13, a2, a4, 1);
    uint64_t v26 = (void *)OZChannel::getKeyframe(v13, a2);
    OZChannel::setKeyframe(v15, a2, a5, 1);
    unint64_t v27 = (void *)OZChannel::getKeyframe(v15, a2);
    OZChannel::getKeyframeOutputTangents(v10, v25, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v10, v25, v43, v33, 1);
    OZChannel::getKeyframeInputTangents(v10, v25, &v43, 0, 1);
    OZChannel::setKeyframeInputTangents(v10, v25, v43, -v33, 1);
    OZChannel::getKeyframeOutputTangents(v13, v26, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v13, v26, v43, v34, 1);
    OZChannel::getKeyframeInputTangents(v13, v26, &v43, 0, 1);
    OZChannel::setKeyframeInputTangents(v13, v26, v43, -v34, 1);
    OZChannel::getKeyframeOutputTangents(v15, v27, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v15, v27, v43, v35, 1);
    OZChannel::getKeyframeInputTangents(v15, v27, &v43, 0, 1);
    double v31 = v43;
    double v32 = -v35;
  }
  else
  {
    if (!v24) {
      return;
    }
    OZChannel::setKeyframe(v10, a2, a3, 1);
    uint64_t v25 = (void *)OZChannel::getKeyframe(v10, a2);
    OZChannel::setKeyframe(v13, a2, a4, 1);
    uint64_t v26 = (void *)OZChannel::getKeyframe(v13, a2);
    OZChannel::setKeyframe(v15, a2, a5, 1);
    unint64_t v27 = (void *)OZChannel::getKeyframe(v15, a2);
    double v28 = (v54 - a3) / 3.0;
    double v29 = (v52 - a4) / 3.0;
    double v30 = (v50 - a5) / 3.0;
    OZChannel::getKeyframeOutputTangents(v10, v25, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v10, v25, v43, v28, 1);
    OZChannel::getKeyframeInputTangents(v10, v25, &v43, 0, 1);
    OZChannel::setKeyframeInputTangents(v10, v25, v43, -v28, 1);
    OZChannel::getKeyframeOutputTangents(v13, v26, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v13, v26, v43, v29, 1);
    OZChannel::getKeyframeInputTangents(v13, v26, &v43, 0, 1);
    OZChannel::setKeyframeInputTangents(v13, v26, v43, -v29, 1);
    OZChannel::getKeyframeOutputTangents(v15, v27, &v43, 0, 1);
    OZChannel::setKeyframeOutputTangents(v15, v27, v43, v30, 1);
    OZChannel::getKeyframeInputTangents(v15, v27, &v43, 0, 1);
    double v31 = v43;
    double v32 = -v30;
  }
  OZChannel::setKeyframeInputTangents(v15, v27, v31, v32, 1);
  OZChannel::getKeyframeFlags(v10, v25);
  OZChannel::setKeyframeFlags(v10, v25);
  OZChannel::getKeyframeFlags(v13, v26);
  OZChannel::setKeyframeFlags(v13, v26);
  OZChannel::getKeyframeFlags(v15, v27);
  OZChannel::setKeyframeFlags(v15, v27);
}

const void *OZChannelPosition3D::willBeModified(os_unfair_lock_s *this, uint64_t a2)
{
  PCString v4 = this + 175;
  PCSpinLock::lock(this + 175);
  *(void *)&this[178]._os_unfair_lock_opaque = *(void *)&this[176]._os_unfair_lock_opaque;
  PCSpinLock::unlock(v4);

  return OZChannelPosition::willBeModified((OZChannelPosition *)this, a2);
}

void OZChannelPosition3D::getNormals(OZChannelPosition3D *this, const CMTime *a2, double *a3, double *a4, double *a5)
{
  if (a3 || a4 || a5)
  {
    CMTimeMake(&v29, 1, 50);
    CMTime v32 = *a2;
    CMTime v31 = v29;
    PC_CMTimeSaferSubtract(&v32, &v31, (uint64_t)&v30);
    double v10 = (OZChannel *)((char *)this + 136);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), &v30, 0.0);
    double v12 = v11;
    double v13 = (OZChannel *)((char *)this + 288);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), &v30, 0.0);
    double v15 = v14;
    uint64_t v16 = (OZChannel *)((char *)this + 736);
    OZChannel::getValueAsDouble(v16, &v30, 0.0);
    double v18 = v17;
    CMTimeMake(&v29, 1, 50);
    CMTime v32 = *a2;
    CMTime v31 = v29;
    PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v30);
    OZChannel::getValueAsDouble(v10, &v30, 0.0);
    double v20 = v19;
    OZChannel::getValueAsDouble(v13, &v30, 0.0);
    double v22 = v21;
    OZChannel::getValueAsDouble(v16, &v30, 0.0);
    double v23 = v20 - v12;
    double v24 = v22 - v15;
    double v26 = v25 - v18;
    double v27 = sqrt(v23 * v23 + v24 * v24 + v26 * v26);
    if (v27 <= -0.0000001 || v27 >= 0.0000001)
    {
      double v23 = v23 / v27;
      double v24 = v24 / v27;
      double v26 = v26 / v27;
    }
    double v28 = v24 * 0.0;
    if (a3) {
      *a3 = v28 - v26;
    }
    if (a4) {
      *a4 = v26 * 0.0 - v23 * 0.0;
    }
    if (a5) {
      *a5 = v23 - v28;
    }
  }
}

uint64_t OZChannelPosition3D::getTangent(OZChannelPosition3D *a1, const CMTime *a2, double *a3, double a4)
{
  double v18 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  double v13 = 0.0;
  OZChannelPosition3D::getPositionOnPath(a1, a2, a4 + -1.0, &v18, &v17, &v16, 0, 0, 0, 0);
  OZChannelPosition3D::getPositionOnPath(a1, v7, a4 + 1.0, &v15, &v14, &v13, 0, 0, 0, 0);
  double v8 = v15 - v18;
  double v9 = v14 - v17;
  double v10 = v13 - v16;
  double v11 = sqrt(v8 * v8 + v9 * v9 + v10 * v10);
  if (v11 <= -0.0000001 || v11 >= 0.0000001)
  {
    double v8 = v8 / v11;
    double v9 = v9 / v11;
    double v10 = v10 / v11;
  }
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v10;
  return 1;
}

uint64_t OZChannelPosition3D::getPositionOnPath(OZChannelPosition3D *this, const CMTime *a2, double a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  *(void *)int v105 = 0;
  double v17 = (void *)((char *)this + 136);
  int v18 = (*(uint64_t (**)(char *, const CMTime *))(*((void *)this + 17) + 832))((char *)this + 136, a2);
  double v19 = v17 + 19;
  uint64_t v20 = 0;
  if (v18 != (*(unsigned int (**)(void *))(v17[19] + 832))(v17 + 19)) {
    return v20;
  }
  int v21 = (*(uint64_t (**)(void *))(*((void *)this + 17) + 832))(v17);
  double v22 = (char *)this + 736;
  if (v21 != (*(unsigned int (**)(char *))(*((void *)this + 92) + 832))((char *)this + 736)
    || !(*(unsigned int (**)(void *))(*v17 + 832))(v17)
    || !(*(unsigned int (**)(void *))(*v19 + 832))(v17 + 19)
    || !(*(unsigned int (**)(char *))(*(void *)v22 + 832))((char *)this + 736))
  {
    return 0;
  }
  double v23 = (OZChannel *)(*(uint64_t (**)(void *))(*v17 + 248))(v17);
  double v24 = (OZChannel *)(*(uint64_t (**)(void *))(*v19 + 248))(v19);
  double v25 = (OZChannel *)(*(uint64_t (**)(char *))(*(void *)v22 + 248))((char *)this + 736);
  int v26 = (*((uint64_t (**)(OZChannel *))v23->var0 + 104))(v23);
  OZChannel::getKeyframes(v23, 0, v104);
  OZChannel::getKeyframes(v24, 0, v103);
  double v87 = v25;
  OZChannel::getKeyframes(v25, 0, __p);
  double v27 = a9;
  double v100 = 0;
  double v101 = 0;
  double v98 = 0;
  double v99 = 0;
  uint64_t v97 = 0;
  PCSpinLock::lock((os_unfair_lock_t)this + 175);
  OZChannelPosition3D::getCachedVectors(this, &v98, &v101, &v100, &v99, (double **)&v97, v105);
  PCSpinLock::unlock((os_unfair_lock_t)this + 175);
  int isParametricCurveClosed = OZChannel::isParametricCurveClosed(v23);
  int Interpolation = OZChannel::getInterpolation(v23);
  if (a3 >= 0.0)
  {
    double v34 = (double *)v105[0];
    double v35 = *((double *)v97 + v105[0] - 1);
    if (v35 >= a3 && vabdd_f64(a3, v35) >= 0.0000001)
    {
      uint64_t v20 = 0;
    }
    else
    {
      double v95 = 0.0;
      double v96 = 0.0;
      double v93 = 0.0;
      double v94 = 0.0;
      double v91 = 0.0;
      double v92 = 0.0;
      CMTime v106 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (isParametricCurveClosed)
      {
        double v36 = *((double *)v97 + v105[0] - 1);
        do
        {
          do
          {
            double v37 = a3;
            a3 = a3 - v36;
          }
          while (v37 > v36);
        }
        while (vabdd_f64(v37, v36) < 0.0000001);
        a3 = v37;
      }
      else
      {
        if (Interpolation == 4)
        {
          uint64_t v45 = v26 - 1;
          OZChannel::getKeyframeInputTangents(v23, *((void **)v104[0] + v45), 0, &v96, 1);
          OZChannel::getKeyframeInputTangents(v24, *((void **)v103[0] + v45), 0, &v95, 1);
          OZChannel::getKeyframeInputTangents(v87, *((void **)__p[0] + v45), 0, &v94, 1);
          OZChannel::getKeyframe(v23, *((void **)v104[0] + v45), &v106, &v93);
          OZChannel::getKeyframe(v24, *((void **)v103[0] + v45), 0, &v92);
          OZChannel::getKeyframe(v87, *((void **)__p[0] + v45), 0, &v91);
          CMTimeMake(&v89, 1, 50);
          v108[0] = v106;
          CMTime v107 = v89;
          PC_CMTimeSaferSubtract(v108, &v107, (uint64_t)&v90);
          double CurveValue = OZChannel::getCurveValue(v23, &v90, 1);
          CMTimeMake(&v89, 1, 50);
          double v27 = a9;
          v108[0] = v106;
          CMTime v107 = v89;
          PC_CMTimeSaferSubtract(v108, &v107, (uint64_t)&v90);
          double v47 = OZChannel::getCurveValue(v24, &v90, 1);
          CMTimeMake(&v89, 1, 50);
          v108[0] = v106;
          CMTime v107 = v89;
          PC_CMTimeSaferSubtract(v108, &v107, (uint64_t)&v90);
          double v48 = OZChannel::getCurveValue(v87, &v90, 1);
          double v49 = -v96;
          double v50 = -v95;
          double v95 = -v95;
          double v96 = -v96;
          double v51 = v94;
        }
        else
        {
          uint64_t v60 = v26 - 2;
          OZChannel::getKeyframe(v23, *((void **)v104[0] + v60), 0, &v96);
          OZChannel::getKeyframe(v24, *((void **)v103[0] + v60), 0, &v95);
          OZChannel::getKeyframe(v87, *((void **)__p[0] + v60), 0, &v94);
          uint64_t v61 = v26 - 1;
          OZChannel::getKeyframe(v23, *((void **)v104[0] + v61), &v106, &v93);
          OZChannel::getKeyframe(v24, *((void **)v103[0] + v61), 0, &v92);
          OZChannel::getKeyframe(v87, *((void **)__p[0] + v61), 0, &v91);
          double v49 = -(v96 - v93);
          double v50 = -(v95 - v92);
          double v95 = v50;
          double v96 = v49;
          double v51 = v94 - v91;
          double CurveValue = 0.0;
          double v47 = 0.0;
          double v48 = 0.0;
          double v27 = a9;
        }
        double v62 = -v51;
        double v94 = -v51;
        double v63 = sqrt(v51 * v51 + v49 * v49 + v50 * v50);
        if (v63 <= 10.0)
        {
          double v49 = v93 - CurveValue;
          double v50 = v92 - v47;
          double v95 = v50;
          double v96 = v49;
          double v62 = v91 - v48;
          double v94 = v62;
          double v63 = sqrt(v49 * v49 + v50 * v50 + v62 * v62);
        }
        double v34 = (double *)v105[0];
        int v64 = v105[0] - 1;
        double v65 = (a3 - *((double *)v97 + v105[0] - 1)) / v63;
        if (a4) {
          *a4 = v65 * v49 + v93;
        }
        if (a5) {
          *a5 = v65 * v50 + v92;
        }
        if (a6) {
          *a6 = v65 * v62 + v91;
        }
        if (a10) {
          *a10 = v98[v64];
        }
        if (a7 && a8 && v27)
        {
          *a7 = v49 / v63;
          *a8 = v50 / v63;
          *double v27 = v62 / v63;
          double v66 = *a7;
          double v67 = *a8 * 0.0;
          double v68 = v62 / v63 * 0.0 - *a7 * 0.0;
          *a7 = v67 - v62 / v63;
          *a8 = v68;
          *double v27 = v66 - v67;
        }
      }
      uint64_t v20 = isParametricCurveClosed ^ 1u;
    }
  }
  else
  {
    double v95 = 0.0;
    double v96 = 0.0;
    double v93 = 0.0;
    double v94 = 0.0;
    double v91 = 0.0;
    double v92 = 0.0;
    CMTime v106 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (isParametricCurveClosed)
    {
      double v30 = -a3;
      double v31 = *((double *)v97 + v105[0] - 1);
      do
      {
        do
        {
          double v32 = v30;
          double v30 = v30 - v31;
        }
        while (v32 > v31);
      }
      while (vabdd_f64(v32, v31) < 0.0000001);
      a3 = v31 - v32;
    }
    else
    {
      double v38 = *(void **)v104[0];
      if (Interpolation == 4)
      {
        OZChannel::getKeyframeOutputTangents(v23, v38, 0, &v96, 1);
        OZChannel::getKeyframeOutputTangents(v24, *(void **)v103[0], 0, &v95, 1);
        OZChannel::getKeyframeOutputTangents(v87, *(void **)__p[0], 0, &v94, 1);
        OZChannel::getKeyframe(v23, *(void **)v104[0], &v106, &v93);
        OZChannel::getKeyframe(v24, *(void **)v103[0], 0, &v92);
        OZChannel::getKeyframe(v87, *(void **)__p[0], 0, &v91);
        CMTimeMake(&v89, 1, 50);
        v108[0] = v106;
        CMTime v107 = v89;
        PC_CMTimeSaferAdd(v108, &v107, (uint64_t)&v90);
        double v39 = OZChannel::getCurveValue(v23, &v90, 1);
        CMTimeMake(&v89, 1, 50);
        v108[0] = v106;
        CMTime v107 = v89;
        PC_CMTimeSaferAdd(v108, &v107, (uint64_t)&v90);
        double v40 = OZChannel::getCurveValue(v24, &v90, 1);
        CMTimeMake(&v89, 1, 50);
        v108[0] = v106;
        CMTime v107 = v89;
        PC_CMTimeSaferAdd(v108, &v107, (uint64_t)&v90);
        double v41 = OZChannel::getCurveValue(v87, &v90, 1);
        double v42 = -v96;
        double v43 = -v95;
        double v44 = v94;
      }
      else
      {
        OZChannel::getKeyframe(v23, v38, &v106, &v93);
        OZChannel::getKeyframe(v24, *(void **)v103[0], 0, &v92);
        OZChannel::getKeyframe(v87, *(void **)__p[0], 0, &v91);
        OZChannel::getKeyframe(v23, *((void **)v104[0] + 1), 0, &v96);
        OZChannel::getKeyframe(v24, *((void **)v103[0] + 1), 0, &v95);
        OZChannel::getKeyframe(v87, *((void **)__p[0] + 1), 0, &v94);
        double v42 = -(v96 - v93);
        double v43 = -(v95 - v92);
        double v44 = v94 - v91;
        double v39 = 0.0;
        double v40 = 0.0;
        double v41 = 0.0;
      }
      double v52 = sqrt(v44 * v44 + v42 * v42 + v43 * v43);
      if (v52 <= 10.0)
      {
        double v42 = v93 - v39;
        double v43 = v92 - v40;
        double v95 = v43;
        double v96 = v42;
        double v53 = v91 - v41;
        double v94 = v53;
        double v52 = sqrt(v42 * v42 + v43 * v43 + v53 * v53);
      }
      else
      {
        double v53 = -v44;
      }
      double v54 = a3 / v52;
      if (a4) {
        *a4 = v93 - v54 * v42;
      }
      if (a5) {
        *a5 = v92 - v54 * v43;
      }
      if (a6) {
        *a6 = v91 - v54 * v53;
      }
      if (a10) {
        *a10 = 0.0;
      }
      if (a7 && a8 && a9)
      {
        *a7 = -v42 / v52;
        *a8 = -v43 / v52;
        double v55 = -v53 / v52;
        *a9 = v55;
        double v56 = *a7;
        double v57 = *a8 * 0.0;
        double v58 = v57 - v55;
        double v59 = v55 * 0.0 - *a7 * 0.0;
        *a7 = v58;
        *a8 = v59;
        *a9 = v56 - v57;
      }
    }
    uint64_t v20 = isParametricCurveClosed ^ 1u;
    double v34 = (double *)v105[0];
  }
  if ((v20 & 1) == 0 && (int)v34 >= 1)
  {
    PCAlgorithm::bisect((double *)v97, v34, &v105[1], a3, v29);
    double v69 = *((double *)v97 + v105[1]);
    if (vabdd_f64(a3, v69) >= 0.0000001)
    {
      if (a3 >= v69)
      {
        double v73 = 0.0;
        double v74 = 0.0;
        double v75 = 0.0;
        double v76 = 0.0;
        if (a3 <= v69) {
          goto LABEL_71;
        }
        int v77 = v105[1] + 1;
        double v78 = *((double *)v97 + v105[1] + 1);
        uint64_t v72 = v98;
        if (vabdd_f64(v78, v69) < 0.0000001)
        {
LABEL_65:
          double v73 = v72[v105[1]];
          double v74 = v101[v105[1]];
          double v75 = v100[v105[1]];
          double v76 = v99[v105[1]];
LABEL_71:
          if (a10) {
            *a10 = v73;
          }
          if (a4) {
            *a4 = v74;
          }
          if (a5) {
            *a5 = v75;
          }
          if (a6) {
            *a6 = v76;
          }
          memset(&v90, 0, sizeof(v90));
          OZFigTimeForChannelSeconds(&v90, v73, 0x40000);
          uint64_t v85 = *((void *)this + 6);
          if (v85)
          {
            (*(void (**)(CMTime *__return_ptr))(*(void *)v85 + 320))(&v89);
            CMTime v107 = v90;
            CMTime v106 = v89;
            PC_CMTimeSaferAdd(&v107, &v106, (uint64_t)v108);
            CMTime v90 = v108[0];
          }
          OZChannelPosition3D::getNormals(this, &v90, a7, a8, v27);
          uint64_t v20 = 1;
          goto LABEL_82;
        }
        double v79 = a3 - v69;
        double v80 = v78 - v69;
        double v73 = v98[v105[1]] + v79 * ((v98[v77] - v98[v105[1]]) / v80);
        double v74 = v101[v105[1]] + v79 * ((v101[v77] - v101[v105[1]]) / v80);
        double v75 = v100[v105[1]] + v79 * ((v100[v77] - v100[v105[1]]) / v80);
        double v81 = v99[v105[1]];
        double v82 = v79 * ((v99[v77] - v81) / v80);
      }
      else
      {
        uint64_t v70 = v105[1] - 1;
        double v71 = *((double *)v97 + v70);
        if (vabdd_f64(v69, v71) < 0.0000001) {
          goto LABEL_64;
        }
        double v83 = v69 - v71;
        double v84 = a3 - v71;
        double v73 = v98[v70] + (a3 - v71) * ((v98[v105[1]] - v98[v70]) / v83);
        double v74 = v101[v70] + v84 * ((v101[v105[1]] - v101[v70]) / v83);
        double v75 = v100[v70] + v84 * ((v100[v105[1]] - v100[v70]) / v83);
        double v81 = v99[v70];
        double v82 = v84 * ((v99[v105[1]] - v81) / v83);
      }
      double v76 = v81 + v82;
      goto LABEL_71;
    }
LABEL_64:
    uint64_t v72 = v98;
    goto LABEL_65;
  }
LABEL_82:
  if (v101) {
    MEMORY[0x1BA9BFB70](v101, 0x1000C8000313F17);
  }
  double v101 = 0;
  if (v100) {
    MEMORY[0x1BA9BFB70](v100, 0x1000C8000313F17);
  }
  double v100 = 0;
  if (v99) {
    MEMORY[0x1BA9BFB70](v99, 0x1000C8000313F17);
  }
  double v99 = 0;
  if (v98) {
    MEMORY[0x1BA9BFB70](v98, 0x1000C8000313F17);
  }
  double v98 = 0;
  if (v97) {
    MEMORY[0x1BA9BFB70](v97, 0x1000C8000313F17);
  }
  uint64_t v97 = 0;
  (*((void (**)(OZChannel *))v23->var0 + 1))(v23);
  if (v24) {
    (*((void (**)(OZChannel *))v24->var0 + 1))(v24);
  }
  if (v87) {
    (*((void (**)(OZChannel *))v87->var0 + 1))(v87);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  return v20;
}

void sub_1B7A07D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::getOrientations(OZChannelPosition3D *this, const CMTime *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7, int a8, double a9, char a10)
{
  long long v61 = 0uLL;
  double v62 = 0.0;
  if (*((unsigned char *)this + 729) || OZChannelPosition3D::isInZEqualsZeroPlane(this))
  {
    OZChannelPosition3D::getTangent(this, a2, (double *)&v61, a9);
    double v17 = *((double *)&v61 + 1);
    double v18 = *(double *)&v61;
    double v19 = -*((double *)&v61 + 1);
    double v20 = 0.0;
    double v21 = v62;
    double v22 = *((double *)&v61 + 1) * 0.0 - *(double *)&v61 * v62;
    double v23 = -(*((double *)&v61 + 1) * v62) - *(double *)&v61 * 0.0;
    double v24 = v18 * v18;
    double v25 = *((double *)&v61 + 1) * *((double *)&v61 + 1) + *(double *)&v61 * *(double *)&v61;
    double v26 = *(double *)&v61;
  }
  else
  {
    double KeyframeNormal = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 136), a2);
    double v28 = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 288), a2);
    double v29 = OZChannel::getKeyframeNormal((OZChannel *)((char *)this + 736), a2);
    OZChannelPosition3D::getTangent(this, a2, (double *)&v61, a9);
    double v17 = *((double *)&v61 + 1);
    double v18 = *(double *)&v61;
    double v21 = v62;
    double v30 = v29 * *((double *)&v61 + 1) - v28 * v62;
    double v31 = KeyframeNormal * v62 - v29 * *(double *)&v61;
    double v32 = v28 * *(double *)&v61 - KeyframeNormal * *((double *)&v61 + 1);
    double v38 = *(double *)&v61 * v32 - v62 * v30;
    double v39 = v62 * v31 - *((double *)&v61 + 1) * v32;
    double v33 = *((double *)&v61 + 1) * v30 - *(double *)&v61 * v31;
    long long v47 = 0uLL;
    double v48 = 0.0;
    long long v40 = 0uLL;
    *(void *)&long long v41 = 0;
    OZChannelPosition3D::getTangent(this, a2, (double *)&v47, a9 + -100.0);
    OZChannelPosition3D::getTangent(this, a2, (double *)&v40, a9 + 100.0);
    double v20 = *(double *)&v41 - v48;
    double v34 = fabs(fabs(v29 * v21 + v28 * v17 + KeyframeNormal * v18) + -1.0);
    if (v34 < 0.01)
    {
      double v26 = *((double *)&v40 + 1) - *((double *)&v47 + 1);
    }
    else
    {
      double v20 = v33;
      double v26 = v38;
    }
    double v19 = v39;
    if (v34 < 0.01) {
      double v19 = *(double *)&v40 - *(double *)&v47;
    }
    double v22 = v17 * v20 - v21 * v26;
    double v23 = v21 * v19 - v18 * v20;
    double v25 = v18 * v26 - v17 * v19;
    double v24 = v26 * v26;
  }
  double v35 = sqrt(v20 * v20 + v24 + v19 * v19);
  if (v35 <= -0.000000100000001 || v35 >= 0.000000100000001)
  {
    double v19 = v19 / v35;
    double v26 = v26 / v35;
    double v20 = v20 / v35;
  }
  double v36 = sqrt(v25 * v25 + v23 * v23 + v22 * v22);
  if (v36 <= -0.000000100000001 || v36 >= 0.000000100000001)
  {
    double v22 = v22 / v36;
    double v23 = v23 / v36;
    double v25 = v25 / v36;
  }
  if (a10)
  {
    double v19 = -v19;
    double v26 = -v26;
    double v20 = -v20;
    double v18 = -v18;
    double v17 = -v17;
    *(double *)&long long v61 = v18;
    *((double *)&v61 + atomic_store(0, (unint64_t *)this + 1) = v17;
    double v21 = -v21;
    double v62 = v21;
  }
  uint64_t v49 = 0;
  uint64_t v53 = 0;
  *(double *)&long long v47 = v18;
  *((double *)&v47 + atomic_store(0, (unint64_t *)this + 1) = v19;
  double v50 = v17;
  double v51 = v26;
  double v54 = v21;
  double v55 = v20;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  double v48 = v22;
  double v52 = v23;
  double v56 = v25;
  long long v60 = xmmword_1B7E733E0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  int v43 = 4;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v46 = 0;
  PCMatrix44Tmpl<double>::getTransformation(&v47, (uint64_t)&v40);
  if (a3) {
    *a3 = v44;
  }
  if (a4) {
    *a4 = *((void *)&v44 + 1);
  }
  if (a5) {
    *a5 = v45;
  }
  if (a6)
  {
    *(_OWORD *)a6 = v61;
    *(double *)(a6 + 16) = v62;
  }
  return 1;
}

double OZChannelPosition3D::getLength(os_unfair_lock_s *this, const CMTime *a2)
{
  CFTypeRef v3 = this + 175;
  PCSpinLock::lock(this + 175);
  if (this[174]._os_unfair_lock_opaque)
  {
    uint64_t v4 = *(void *)&this[152]._os_unfair_lock_opaque;
  }
  else
  {
    OZChannelPosition3D::getCachedVectors((OZChannelPosition3D *)this, 0, 0, 0, 0, 0, 0);
    uint64_t v4 = *(void *)&this[152]._os_unfair_lock_opaque;
    if (*(void *)&this[150]._os_unfair_lock_opaque == v4)
    {
      double v5 = 0.0;
      goto LABEL_5;
    }
  }
  double v5 = *(double *)(v4 - 8);
LABEL_5:
  PCSpinLock::unlock(v3);
  return v5;
}

uint64_t OZChannelPosition3D::getCachedVectors(OZChannelPosition3D *this, double **a2, double **a3, double **a4, double **a5, double **a6, int *a7)
{
  double v14 = (OZChannel *)((char *)this + 136);
  int v15 = (*(uint64_t (**)(char *))(*((void *)this + 17) + 832))((char *)this + 136);
  if (v15 != (*((unsigned int (**)(OZChannel *))v14[1].var0 + 104))(v14 + 1)) {
    return 0;
  }
  double v66 = a7;
  int v16 = (*(uint64_t (**)(OZChannel *))(*((void *)this + 17) + 832))(v14);
  if (v16 != (*(unsigned int (**)(char *))(*((void *)this + 92) + 832))((char *)this + 736)) {
    return 0;
  }
  unsigned int v17 = *((_DWORD *)this + 174);
  if (v17)
  {
    if (a2) {
      operator new[]();
    }
    if (a3) {
      operator new[]();
    }
    if (a4) {
      operator new[]();
    }
    if (a5) {
      operator new[]();
    }
    if (a6) {
      operator new[]();
    }
    uint64_t v18 = 0;
    do
      v18 += 8;
    while (8 * v17 != v18);
    if (v66) {
      int *v66 = v17;
    }
    return 1;
  }
  double v65 = (_DWORD *)((char *)this + 696);
  *((void *)this + 76) = *((void *)this + 75);
  *((void *)this + 73) = *((void *)this + 72);
  *((void *)this + 79) = *((void *)this + 78);
  *((void *)this + 8OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)this + 81);
  *((void *)this + 89) = *((void *)this + 88);
  *((void *)this + 85) = *((void *)this + 84);
  *((_DWORD *)this + 174) = 0;
  *((void *)this + 7atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 66) = 0x3FF0000000000000;
  *((void *)this + 6atomic_store(0, (unint64_t *)this + 1) = 0x3FF0000000000000;
  *((void *)this + 56) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 47OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)this + 3atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 3OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 55OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  double v21 = (OZChannel *)(*(uint64_t (**)(OZChannel *))(*((void *)this + 17) + 248))(v14);
  double v22 = (OZChannel *)(*(uint64_t (**)(OZChannel *))(*((void *)this + 36) + 248))(v14 + 1);
  uint64_t v62 = (*(uint64_t (**)(char *))(*((void *)this + 92) + 248))((char *)this + 736);
  memset(&v72, 0, sizeof(v72));
  OZChannel::getKeyframeParametricRange(v21, (uint64_t)&v72);
  memset(&v71, 0, sizeof(v71));
  OZChannel::getKeyframeMinTime(v21, (uint64_t)&v71);
  CMTime v74 = v71;
  CMTime v73 = v72;
  PC_CMTimeSaferAdd(&v74, &v73, (uint64_t)&__p);
  CMTime v72 = __p;
  CMTime time = __p;
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v68 = v71;
  double v24 = CMTimeGetSeconds(&v68);
  int isParametricCurveClosed = OZChannel::isParametricCurveClosed(v21);
  int Interpolation = OZChannel::getInterpolation(v14);
  OZChannel::getKeyframes(v21, 1, &v74);
  uint64_t v63 = (uint64_t)v22;
  OZChannel::getKeyframes(v22, 1, &v73);
  double v27 = v66;
  OZChannel::getKeyframes(v21, 1, &__p);
  int v64 = v21;
  if ((*((unsigned int (**)(OZChannel *))v21->var0 + 104))(v21) < 2
    || *(void *)&v74.timescale - v74.value < 9uLL)
  {
    goto LABEL_37;
  }
  double v28 = Seconds - v24;
  if (Interpolation > 9)
  {
    if (Interpolation == 10 || Interpolation == 12)
    {
      *double v65 = (int)(v28 / 0.025) + (isParametricCurveClosed ^ 1);
      if (!OZChannel::getSamples((uint64_t)v21) || !OZChannel::getSamples(v63)) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
LABEL_37:
    double v67 = (void **)((char *)this + 600);
    std::vector<double>::reserve((void **)this + 75, *v65);
    double v29 = (void *)*((void *)this + 76);
    double v30 = (void *)((char *)this + 616);
    unint64_t v31 = *((void *)this + 77);
    if ((unint64_t)v29 >= v31)
    {
      double v33 = *v67;
      uint64_t v34 = ((char *)v29 - (unsigned char *)*v67) >> 3;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v31 - (void)v33;
      if (v36 >> 2 > v35) {
        unint64_t v35 = v36 >> 2;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        double v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 616, v37);
        double v29 = (void *)*((void *)this + 76);
        double v33 = (void *)*((void *)this + 75);
      }
      else
      {
        double v38 = 0;
      }
      long long v40 = &v38[8 * v34];
      long long v41 = &v38[8 * v37];
      *(void *)long long v40 = 0;
      double v32 = (double *)(v40 + 8);
      while (v29 != v33)
      {
        uint64_t v42 = *--v29;
        *((void *)v40 - atomic_store(0, (unint64_t *)this + 1) = v42;
        v40 -= 8;
      }
      *((void *)this + 75) = v40;
      *((void *)this + 76) = v32;
      *((void *)this + 77) = v41;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *double v29 = 0;
      double v32 = (double *)(v29 + 1);
    }
    int v43 = (void **)((char *)this + 600);
    *((void *)this + 76) = v32;
    LODWORD(v44) = *((_DWORD *)this + 174);
    if (v44 >= 2)
    {
      unint64_t v45 = 1;
      do
      {
        uint64_t v46 = (double *)*v43;
        uint64_t v47 = 8 * v45 - 8;
        double v48 = *(double *)(*((void *)this + 78) + 8 * v45) - *(double *)(*((void *)this + 78) + v47);
        double v49 = *(double *)(*((void *)this + 81) + 8 * v45) - *(double *)(*((void *)this + 81) + v47);
        double v50 = v48 * v48 + v49 * v49;
        double v51 = *(double *)(*((void *)this + 88) + 8 * v45) - *(double *)(*((void *)this + 88) + v47);
        double v52 = *(double *)((char *)*v43 + v47) + sqrt(v50 + v51 * v51);
        if ((unint64_t)v32 >= *v30)
        {
          uint64_t v54 = v32 - v46;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = *v30 - (void)v46;
          if (v56 >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 616, v57);
            double v32 = (double *)*((void *)this + 76);
            uint64_t v46 = (double *)*((void *)this + 75);
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v59 = (double *)&v58[8 * v54];
          *uint64_t v59 = v52;
          uint64_t v53 = v59 + 1;
          while (v32 != v46)
          {
            uint64_t v60 = *((void *)v32-- - 1);
            *((void *)v59-- - atomic_store(0, (unint64_t *)this + 1) = v60;
          }
          *((void *)this + 75) = v59;
          *((void *)this + 76) = v53;
          *((void *)this + 77) = &v58[8 * v57];
          if (v46) {
            operator delete(v46);
          }
          int v43 = (void **)((char *)this + 600);
        }
        else
        {
          *double v32 = v52;
          uint64_t v53 = v32 + 1;
        }
        *((void *)this + 76) = v53;
        ++v45;
        unint64_t v44 = *((unsigned int *)this + 174);
        double v32 = v53;
      }
      while (v45 < v44);
      double v27 = v66;
    }
    if (a2) {
      operator new[]();
    }
    if (a3) {
      operator new[]();
    }
    if (a4) {
      operator new[]();
    }
    if (a5) {
      operator new[]();
    }
    if (a6) {
      operator new[]();
    }
    if (v44)
    {
      uint64_t v61 = 0;
      do
        v61 += 8;
      while (8 * v44 != v61);
    }
    if (v27) {
      *double v27 = v44;
    }
    (*((void (**)(OZChannel *))v64->var0 + 1))(v64);
    uint64_t v39 = v62;
    if (v63) {
      (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
    }
    uint64_t v19 = 1;
    if (!v62) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (Interpolation == 1)
  {
    *double v65 = (int)v28 + 1;
    if (!OZChannel::getSamples((uint64_t)v21) || !OZChannel::getSamples(v63)) {
      goto LABEL_47;
    }
  }
  else
  {
    if (Interpolation != 4) {
      goto LABEL_37;
    }
    *double v65 = (int)(v28 / 0.025) + 1;
    if (!OZChannel::getSamples((uint64_t)v21) || !OZChannel::getSamples(v63)) {
      goto LABEL_47;
    }
  }
LABEL_36:
  if (OZChannel::getSamples(v62)) {
    goto LABEL_37;
  }
LABEL_47:
  (*((void (**)(OZChannel *))v21->var0 + 1))(v21);
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  uint64_t v19 = 0;
  uint64_t v39 = v62;
  if (!v62) {
    goto LABEL_97;
  }
LABEL_96:
  (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
LABEL_97:
  if (__p.value)
  {
    *(void *)&__p.int32_t timescale = __p.value;
    operator delete((void *)__p.value);
  }
  if (v73.value)
  {
    *(void *)&v73.int32_t timescale = v73.value;
    operator delete((void *)v73.value);
  }
  if (v74.value)
  {
    *(void *)&v74.int32_t timescale = v74.value;
    operator delete((void *)v74.value);
  }
  return v19;
}

void sub_1B7A08D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  double v30 = *(void **)(v28 - 160);
  if (v30)
  {
    *(void *)(v28 - 15OZChannelEnum::~OZChannelEnum(this - 2) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *(void **)(v28 - 128);
  if (v31)
  {
    *(void *)(v28 - 12OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::getPositionReparametrizedWithRange(OZChannelPosition3D *this, const CMTime *a2, double a3, double *a4, double *a5, double *a6, double *a7)
{
  return OZChannelPosition3D::getPositionOnPath(this, a2, a3, a4, a5, a6, 0, 0, 0, a7);
}

__CFString *OZChannelPosition3D::getObjCWrapperName(OZChannelPosition3D *this)
{
  return @"CHChannelPosition3D";
}

BOOL OZChannelPosition3D::isInZEqualsZeroPlane(OZChannelPosition3D *this)
{
  uint64_t v1 = (OZChannel *)(*(uint64_t (**)(char *))(*((void *)this + 92) + 248))((char *)this + 736);
  OZChannel::getKeyframes(v1, 0, &__p);
  char v2 = (void **)__p;
  if (v11 == __p)
  {
    BOOL v6 = 1;
    if (!__p) {
      return v6;
    }
    goto LABEL_11;
  }
  unint64_t v3 = 0;
  unsigned int v4 = 1;
  do
  {
    double v8 = 0.0;
    OZChannel::getKeyframe(v1, v2[v3], &v9, &v8);
    v5.n128_f64[0] = v8;
    BOOL v6 = v8 < 0.0000001 && v8 > -0.0000001;
    if (!v6) {
      break;
    }
    unint64_t v3 = v4;
    char v2 = (void **)__p;
    ++v4;
  }
  while (v3 < ((char *)v11 - (unsigned char *)__p) >> 3);
  if (v1) {
    (*((void (**)(OZChannel *, __n128))v1->var0 + 1))(v1, v5);
  }
  char v2 = (void **)__p;
  if (__p)
  {
LABEL_11:
    double v11 = v2;
    operator delete(v2);
  }
  return v6;
}

void sub_1B7A08EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelPosition3D::flattenAtTime(OZChannelPosition3D *this, const CMTime *a2)
{
  OZChannel2D::flattenAtTime(this, a2);
  unsigned int v4 = (OZChannel *)((char *)this + 736);
  uint64_t Keyframe = (void *)OZChannel::getKeyframe(v4, a2);
  OZChannel::setKeyframeOutputTangents(v4, Keyframe, 0.0, 0.0, 1);
  OZChannel::setKeyframeInputTangents(v4, Keyframe, 0.0, 0.0, 1);

  return OZChannel::setKeyframeTangentsBroken(v4, Keyframe);
}

uint64_t OZChannelPosition3D::setLinearAtTime(OZChannelPosition3D *this, const CMTime *a2)
{
  OZChannel2D::setLinearAtTime(this, a2);
  unsigned int v4 = (OZChannel *)((char *)this + 736);
  uint64_t Keyframe = (void *)OZChannel::getKeyframe(v4, a2);

  return OZChannel::setKeyframeInterpolation(v4, Keyframe);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelPositionPercent_Factory::getInstance(this);
  OZChannel2D::OZChannel2D(this, Instance, a2, a3, a4, a5, 2, 0, 0);
  *(void *)this = &unk_1F110EE38;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110F190;
  *((unsigned char *)this + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v19, @"Channel X");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 136), &v19, 0);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v19, @"Channel Y");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 288), &v19, 0);
  PCString::~PCString(&v19);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 136), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 136), 0.0001);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 288), 0.01);
  int v15 = OZChannel::setFineDelta((OZChannel *)((char *)this + 288), 0.0001);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v15, v16);
  PCURL::PCURL((PCURL *)&v19, @"Channel Position Suffix");
  OZChannel::setSuffix((OZChannel *)((char *)this + 136), &v19);
  PCString::~PCString(&v19);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v19, @"Channel Position Suffix");
  OZChannel::setSuffix((OZChannel *)((char *)this + 288), &v19);
  PCString::~PCString(&v19);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B7A09208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel2D::OZChannel2D(this, a2, a3, a4, 2, 0, 0);
  *(void *)uint64_t v5 = &unk_1F110EE38;
  *(void *)(v5 + 16) = &unk_1F110F190;
  *(unsigned char *)(v5 + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v5, v6);
  PCURL::PCURL((PCURL *)&v13, @"Channel X");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 136), &v13, 0);
  PCString::~PCString(&v13);
  TXParagraphStyleFolder_Factory::createInstance(v7, v8);
  PCURL::PCURL((PCURL *)&v13, @"Channel Y");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 288), &v13, 0);
  PCString::~PCString(&v13);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 136), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 136), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 136), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 136), 0.0001);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 288), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 288), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 288), 0.01);
  CMTime v9 = OZChannel::setFineDelta((OZChannel *)((char *)this + 288), 0.0001);
  TXParagraphStyleFolder_Factory::createInstance((TXParagraphStyleFolder_Factory *)v9, v10);
  PCURL::PCURL((PCURL *)&v13, @"Channel Position Suffix");
  OZChannel::setSuffix((OZChannel *)((char *)this + 136), &v13);
  PCString::~PCString(&v13);
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v13, @"Channel Position Suffix");
  OZChannel::setSuffix((OZChannel *)((char *)this + 288), &v13);
  PCString::~PCString(&v13);
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
}

void sub_1B7A0942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelPositionPercent::OZChannelPositionPercent(OZChannelPositionPercent *this, const OZChannelPositionPercent *a2, OZChannelFolder *a3)
{
  OZChannel2D::OZChannel2D(this, a2, a3);
  *(void *)uint64_t v3 = &unk_1F110EE38;
  *(void *)(v3 + 16) = &unk_1F110F190;
  *(unsigned char *)(v3 + 44OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 1;
}

void OZChannelPositionPercent::clone(OZChannelPositionPercent *this)
{
}

void sub_1B7A0955C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

__CFString *OZChannelPositionPercent::getObjCWrapperName(OZChannelPositionPercent *this)
{
  return @"CHChannelPositionPercent";
}

void OZChannelPositionPercent::~OZChannelPositionPercent(OZChannelPositionPercent *this)
{
  OZChannel2D::~OZChannel2D(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelPositionPercent::~OZChannelPositionPercent(OZChannelPositionPercent *this)
{
  OZChannel2D::~OZChannel2D((OZChannelPositionPercent *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelProgress::createOZChannelProgressInfo(OZChannelProgress *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelProgress::createOZChannelProgressInfo(void)::_OZChannelProgressInfo_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelProgress::createOZChannelProgressInfo(void)::_OZChannelProgressInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelProgress::_OZChannelProgressInfo;
}

uint64_t OZChannelProgress::createOZChannelProgressImpl(OZChannelProgress *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelProgress::createOZChannelProgressImpl(void)::_OZChannelProgressImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelProgress::createOZChannelProgressImpl(void)::_OZChannelProgressImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelProgress::_OZChannelProgressImpl;
}

void OZChannelProgress::OZChannelProgress(OZChannelProgress *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(void *)uint64_t v5 = &unk_1F110F200;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110F560;
  OZChannelProgressInfo = (OZChannelProgress *)OZChannelProgress::createOZChannelProgressInfo(v5);
  *((void *)this + 16) = OZChannelProgressInfo;
  *((void *)this + 17) = OZChannelProgressInfo;
  OZChannelProgress::createOZChannelProgressImpl(OZChannelProgressInfo);
  uint64_t v7 = OZChannelProgress::_OZChannelProgressImpl;
  *((void *)this + 14) = OZChannelProgress::_OZChannelProgressImpl;
  *((void *)this + 15) = v7;
  *((void *)this + 7) |= 8uLL;
  *((_WORD *)this + 76) = 0;
}

void sub_1B7A09764(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelProgress::OZChannelProgress(OZChannelProgress *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F110F200;
  *(void *)(v4 + 16) = &unk_1F110F560;
  *(_WORD *)(v4 + 15OZChannelEnum::~OZChannelEnum(this - 2) = a2[1].var5;
}

void OZChannelProgress::clone(OZChannelProgress *this)
{
}

void sub_1B7A09874(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C6BB7E01);
  _Unwind_Resume(a1);
}

__CFString *OZChannelProgress::getObjCWrapperName(OZChannelProgress *this)
{
  return @"CHChannelProgress";
}

void OZChannelProgress::~OZChannelProgress(OZChannel *this)
{
  OZChannel::~OZChannel(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelProgress::~OZChannelProgress(OZChannelProgress *this)
{
  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZChannelProgress::createOZChannelProgressInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelProgress::_OZChannelProgressInfo) {
    operator new();
  }
}

void sub_1B7A09968(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelProgressInfo::OZChannelProgressInfo(OZChannelProgressInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F110F5D0;
  *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F110F5F0;
}

void sub_1B7A09A14(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelProgress::createOZChannelProgressImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelProgress::_OZChannelProgressImpl) {
    operator new();
  }
}

void sub_1B7A09AF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void sub_1B7A0A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void sub_1B7A0A224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelQuad_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F110F648;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110F990;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v21, @"Channel Bottom Left");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 136), &v21, (OZChannelFolder *)this, 1u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v21, @"Channel Bottom Right");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), &v21, (OZChannelFolder *)this, 2u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v21, @"Channel Top Right");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), &v21, (OZChannelFolder *)this, 3u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v21, @"Channel Top Left");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), &v21, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v21);
}

void sub_1B7A0A4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPosition::~OZChannelPosition(v12);
  OZChannelPosition::~OZChannelPosition(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B7A0A54C()
{
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)BOOL v6 = &unk_1F110F648;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110F990;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v14, @"Channel Bottom Left");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 136), &v14, (OZChannelFolder *)this, 1u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v14, @"Channel Bottom Right");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), &v14, (OZChannelFolder *)this, 2u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v14, @"Channel Top Right");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), &v14, (OZChannelFolder *)this, 3u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v14, @"Channel Top Left");
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), &v14, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
}

void sub_1B7A0A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPosition::~OZChannelPosition(v12);
  OZChannelPosition::~OZChannelPosition(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B7A0A77C()
{
}

void OZChannelQuad::OZChannelQuad(OZChannelQuad *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  void *v5 = &unk_1F110F648;
  v5[2] = &unk_1F110F990;
  OZChannelPosition::OZChannelPosition((OZChannelPosition *)(v5 + 17), (const OZChannelPosition *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 840), (const OZChannelPosition *)&a2[7].var7, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 1544), (const OZChannelPosition *)&a2[13].var11, (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelQuad *)((char *)this + 2248), (const OZChannelPosition *)&a2[20].var1, (OZChannelFolder *)this);
}

void sub_1B7A0A84C(_Unwind_Exception *a1)
{
  OZChannelPosition::~OZChannelPosition(v4);
  OZChannelPosition::~OZChannelPosition(v3);
  OZChannelPosition::~OZChannelPosition(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelQuad::clone(OZChannelQuad *this)
{
}

void sub_1B7A0A8E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C408B27E029);
  _Unwind_Resume(a1);
}

__CFString *OZChannelQuad::getObjCWrapperName(OZChannelQuad *this)
{
  return @"CHChannelQuad";
}

void non-virtual thunk to'OZChannelQuad::~OZChannelQuad(OZChannelQuad *this)
{
}

{
  uint64_t vars8;

  OZChannelQuad::~OZChannelQuad((OZChannelQuad *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelPosition::getPosition(OZChannelPosition *this, const CMTime *a2, double *a3, double *a4, double a5)
{
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a5);
    *(void *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a5);
    *(void *)a4 = v11;
  }
}

uint64_t OZHistogramDelegate::notifyReferrers(OZHistogramDelegate *this)
{
  uint64_t v3 = (void **)*((void *)this + 2);
  for (uint64_t i = (void **)*((void *)this + 3); v3 != i; uint64_t i = (void **)*((void *)this + 3))
  {
    uint64_t v4 = *v3++;
    [v4 removeReference:*((void *)this + 1)];
  }
  uint64_t v5 = *(uint64_t (**)(OZHistogramDelegate *))(*(void *)this + 8);

  return v5(this);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  uint64_t Instance = (OZFactory *)OZChannelRotation3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F110FA00;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110FD50;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v28, @"Channel X");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), 0.0, &v28, (OZChannelFolder *)this, 1u, 0, a7, a8);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v19, v20);
  PCURL::PCURL((PCURL *)&v28, @"Channel Y");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), 0.0, &v28, (OZChannelFolder *)this, 2u, 0, a7, a8);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v21, v22);
  PCURL::PCURL((PCURL *)&v28, @"Channel Z");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), 0.0, &v28, (OZChannelFolder *)this, 3u, 0, a7, a8);
  PCString::~PCString(&v28);
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v28, @"Channel Rotation3D Iterpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v27, @"Channel Rotation3D Iterpolation Label");
  OZChannelEnumInterpMode::OZChannelEnumInterpMode((OZChannelRotation3D *)((char *)this + 592), &v28, &v27, (OZChannelFolder *)this, 4u, 0);
  PCString::~PCString(&v27);
  PCString::~PCString(&v28);
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B7A0AC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  int v16 = v13;
  PCSpinLock::~PCSpinLock(v16);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B7A0AD34()
{
}

void sub_1B7A0AD3C()
{
}

OZChannelImpl *OZChannelRotation3D::initCustomInterpolator(OZChannelRotation3D *this)
{
  if (!OZChannelRotation3D::_interpolator) {
    operator new();
  }
  uint64_t v2 = (OZChannel *)((char *)this + 136);
  OZChannel::setCustomInterpolator((OZChannelBase *)((char *)this + 136));
  uint64_t v3 = (OZChannel *)((char *)this + 288);
  OZChannel::setCustomInterpolator((OZChannelBase *)((char *)this + 288));
  uint64_t v4 = (OZChannelBase *)((char *)this + 440);
  OZChannel::setCustomInterpolator(v4);
  OZChannel::setOwnerChannel(v2, v2);
  OZChannel::setOwnerChannel(v3, v3);

  return OZChannel::setOwnerChannel((OZChannel *)v4, (OZChannel *)v4);
}

void sub_1B7A0AE38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9, OZChannelImpl *a10, OZChannelInfo *a11)
{
  uint64_t Instance = (OZFactory *)OZChannelRotation3D_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a5, a6, a7, a8, 0, a9);
  *(void *)this = &unk_1F110FA00;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110FD50;
  TXParagraphStyleFolder_Factory::createInstance(v23, v24);
  PCURL::PCURL((PCURL *)&v34, @"Channel X");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), a2, &v34, (OZChannelFolder *)this, 1u, 0, a10, a11);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v25, v26);
  PCURL::PCURL((PCURL *)&v34, @"Channel Y");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), a3, &v34, (OZChannelFolder *)this, 2u, 0, a10, a11);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v27, v28);
  PCURL::PCURL((PCURL *)&v34, @"Channel Z");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), a4, &v34, (OZChannelFolder *)this, 3u, 0, a10, a11);
  PCString::~PCString(&v34);
  TXParagraphStyleFolder_Factory::createInstance(v29, v30);
  PCURL::PCURL((PCURL *)&v34, @"Channel Rotation3D Iterpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v31, v32);
  PCURL::PCURL((PCURL *)&v33, @"Channel Rotation3D Iterpolation Label");
  OZChannelEnumInterpMode::OZChannelEnumInterpMode((OZChannelRotation3D *)((char *)this + 592), &v34, &v33, (OZChannelFolder *)this, 4u, 0);
  PCString::~PCString(&v33);
  PCString::~PCString(&v34);
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B7A0B09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  int v16 = v13;
  PCSpinLock::~PCSpinLock(v16);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B7A0B13C()
{
}

void sub_1B7A0B144()
{
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)BOOL v6 = &unk_1F110FA00;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110FD50;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v17, @"Channel X");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 136), 0.0, &v17, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v17);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v17, @"Channel Y");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 288), 0.0, &v17, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v17);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v17, @"Channel Z");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 440), 0.0, &v17, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v17);
  TXParagraphStyleFolder_Factory::createInstance(v12, v13);
  PCURL::PCURL((PCURL *)&v17, @"Channel Rotation3D Iterpolation Enum");
  TXParagraphStyleFolder_Factory::createInstance(v14, v15);
  PCURL::PCURL((PCURL *)&v16, @"Channel Rotation3D Iterpolation Label");
  OZChannelEnumInterpMode::OZChannelEnumInterpMode((OZChannelRotation3D *)((char *)this + 592), &v17, &v16, (OZChannelFolder *)this, 4u, 0);
  PCString::~PCString(&v16);
  PCString::~PCString(&v17);
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B7A0B330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCSpinLock::~PCSpinLock(v14);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void sub_1B7A0B3CC()
{
}

void sub_1B7A0B3D4()
{
}

void OZChannelRotation3D::OZChannelRotation3D(OZChannelRotation3D *this, const OZChannelRotation3D *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F110FA00;
  *(void *)(v5 + 16) = &unk_1F110FD50;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F11010C0;
  *((void *)this + 19) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F11010C0;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F11010C0;
  *((void *)this + 57) = &unk_1F1101420;
  OZChannelEnum::OZChannelEnum((OZChannelRotation3D *)((char *)this + 592), (const OZChannelRotation3D *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((void *)this + 74) = &unk_1F110FDC0;
  *((void *)this + 76) = &unk_1F1110130;
  *((_DWORD *)this + 21OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  OZChannelRotation3D::initCustomInterpolator(this);
}

void sub_1B7A0B5A8(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  PCSpinLock::~PCSpinLock(v7);
  OZChannelEnum::~OZChannelEnum(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelRotation3D::~OZChannelRotation3D(OZChannelRotation3D *this)
{
  *(void *)this = &unk_1F110FA00;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F110FD50;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 212);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 74);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

{
  uint64_t vars8;

  OZChannelRotation3D::~OZChannelRotation3D(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelRotation3D::~OZChannelRotation3D(OZChannelRotation3D *this)
{
}

{
  uint64_t vars8;

  OZChannelRotation3D::~OZChannelRotation3D((OZChannelRotation3D *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelRotation3D::copy(OZChannelRotation3D *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);

  OZChannelEnum::copy((PCString *)this + 74, (const OZChannelBase *)((char *)v4 + 592), a3);
}

void OZChannelRotation3D::clone(OZChannelRotation3D *this)
{
}

void sub_1B7A0B83C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A120F8A5);
  _Unwind_Resume(a1);
}

OZChannelBase *OZChannelRotation3D::interpWillBeModified(OZChannelRotation3D *this, uint64_t a2)
{
  OZChannel::parentWillBeModified((OZChannel *)((char *)this + 136), a2);
  OZChannel::parentWillBeModified((OZChannel *)((char *)this + 288), a2);

  return OZChannel::parentWillBeModified((OZChannel *)((char *)this + 440), a2);
}

uint64_t OZChannelRotation3D::setCurveInterpolation(OZChannelRotation3D *this, uint64_t a2)
{
  uint64_t v4 = (OZChannel *)((char *)this + 136);
  (*(void (**)(OZChannelRotation3D *, void))(*(void *)this + 824))(this, 0);
  OZChannel::setInterpolation(v4, a2);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 288), a2);

  return OZChannel::setInterpolation((OZChannel *)((char *)this + 440), a2);
}

uint64_t OZChannelRotation3D::setKeypointInterpolation(OZChannelRotation3D *this, OZChannel *a2, void *a3)
{
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v11 = 0.0;
  OZChannel::getKeyframe(a2, a3, &v12, &v11);
  if ((OZChannel *)((char *)this + 136) == a2 || (uint64_t Keyframe = (void *)OZChannel::getKeyframe(a2, &v12)) == 0)
  {
    uint64_t v6 = 0;
  }
  else
  {
    OZChannel::setKeyframeInterpolation((OZChannel *)((char *)this + 136), Keyframe);
    uint64_t v6 = 1;
  }
  if ((OZChannel *)((char *)this + 288) != a2)
  {
    uint64_t v7 = (void *)OZChannel::getKeyframe(a2, &v12);
    if (v7)
    {
      OZChannel::setKeyframeInterpolation((OZChannel *)((char *)this + 288), v7);
      uint64_t v6 = 1;
    }
  }
  double v8 = (OZChannel *)((char *)this + 440);
  if (v8 != a2)
  {
    CMTime v9 = (void *)OZChannel::getKeyframe(a2, &v12);
    if (v9)
    {
      OZChannel::setKeyframeInterpolation(v8, v9);
      return 1;
    }
  }
  return v6;
}

OZChannelFolder *OZChannelRotation3D::setValue(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, double a4)
{
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000))
  {
    OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
    CMTime v9 = (OZChannel *)((char *)this + 288);
    uint64_t v10 = (OZChannel *)((char *)this + 440);
    if ((OZChannel *)((char *)this + 136) == a2 || v9 == a2 || v10 == a2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a3, 0.0);
      double v14 = v13;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a3, 0.0);
      double v16 = v15;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a3, 0.0);
      double v18 = v17;
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
      if ((OZChannel *)((char *)this + 136) == a2)
      {
        PCString v19 = a2;
        double v20 = a3;
        double v21 = a4;
      }
      else
      {
        PCString v19 = (OZChannel *)((char *)this + 136);
        double v20 = a3;
        double v21 = v14;
      }
      OZChannel::setValue(v19, v20, v21, 0);
      if (v9 == a2)
      {
        double v22 = a2;
        double v23 = a3;
        double v24 = a4;
      }
      else
      {
        double v22 = (OZChannel *)((char *)this + 288);
        double v23 = a3;
        double v24 = v16;
      }
      OZChannel::setValue(v22, v23, v24, 0);
      if (v10 == a2)
      {
        double v25 = a2;
        double v26 = a3;
        double v27 = a4;
      }
      else
      {
        double v25 = (OZChannel *)((char *)this + 440);
        double v26 = a3;
        double v27 = v18;
      }
      OZChannel::setValue(v25, v26, v27, 0);
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 1.0, 1);
    }
    else
    {
      (*((void (**)(OZChannel *, const CMTime *, void, double))a2->var0 + 89))(a2, a3, 0, a4);
    }
    return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
  }
  else
  {
    double v11 = (uint64_t (*)(OZChannel *, const CMTime *, void, __n128))*((void *)a2->var0 + 89);
    v8.n128_f64[0] = a4;
    return (OZChannelFolder *)v11(a2, a3, 0, v8);
  }
}

OZChannelFolder *OZChannelRotation3D::compoundAddKeypointAt(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, char a4)
{
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
    if ((OZChannel *)((char *)this + 136) == a2
      || (OZChannel *)((char *)this + 288) == a2
      || (OZChannel *)((char *)this + 440) == a2)
    {
      uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
      OZChannel::addKeypointAt((OZChannel *)((char *)this + 136), a3);
      OZChannel::addKeypointAt((OZChannel *)((char *)this + 288), a3);
      OZChannel::addKeypointAt((OZChannel *)((char *)this + 440), a3);
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v10, 1.0, 1);
    }
    else
    {
      (*((void (**)(OZChannel *, const CMTime *))a2->var0 + 75))(a2, a3);
    }
    return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
  }
  else
  {
    __n128 v8 = (uint64_t (*)(OZChannel *, const CMTime *))*((void *)a2->var0 + 75);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

double OZChannelRotation3D::compoundMoveKeypointTo@<D0>(OZChannelRotation3D *this@<X0>, OZChannel *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, CMTime *a8@<X8>)
{
  CMTime v19 = *a4;
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a7)
    && ((OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000),
         double v15 = (OZChannel *)((char *)this + 288),
         double v16 = (OZChannel *)((char *)this + 440),
         (OZChannel *)((char *)this + 136) == a2)
     || v15 == a2
     || v16 == a2))
  {
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
    (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *, CMTime *, uint64_t, uint64_t))a2->var0 + 77))(&v18, a2, a3, &v19, a5, a6);
    CMTime v19 = v18;
    if ((OZChannel *)((char *)this + 136) != a2) {
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 136), a3, &v19, a5, a6, (uint64_t)&v18);
    }
    if (v15 != a2) {
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 288), a3, &v19, a5, a6, (uint64_t)&v18);
    }
    if (v16 != a2) {
      OZChannel::moveKeypointTo((OZChannel *)((char *)this + 440), a3, &v19, a5, a6, (uint64_t)&v18);
    }
    OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 1.0, 1);
    OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
    double result = *(double *)&v19.value;
    *a8 = v19;
  }
  else
  {
    (*((void (**)(OZChannel *, const CMTime *, CMTime *, uint64_t, uint64_t))a2->var0 + 77))(a2, a3, &v19, a5, a6);
  }
  return result;
}

OZChannelFolder *OZChannelRotation3D::compoundDeleteKeypointAt(OZChannelRotation3D *this, OZChannel *a2, const CMTime *a3, char a4)
{
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
    if ((OZChannel *)((char *)this + 136) == a2
      || (OZChannel *)((char *)this + 288) == a2
      || (OZChannel *)((char *)this + 440) == a2)
    {
      uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
      OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 136), a3);
      OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 288), a3);
      OZChannel::deleteKeypointAt((OZChannel *)((char *)this + 440), a3);
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v10, 1.0, 1);
    }
    else
    {
      (*((void (**)(OZChannel *, const CMTime *))a2->var0 + 76))(a2, a3);
    }
    return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
  }
  else
  {
    __n128 v8 = (uint64_t (*)(OZChannel *, const CMTime *))*((void *)a2->var0 + 76);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

OZChannelFolder *OZChannelRotation3D::compoundReset(OZChannelRotation3D *this, OZChannel *a2, char a3)
{
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a3 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
    if ((OZChannel *)((char *)this + 136) == a2
      || (OZChannel *)((char *)this + 288) == a2
      || (OZChannel *)((char *)this + 440) == a2)
    {
      __n128 v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
      OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
      OZChannelBase::reset((OZChannelBase *)((char *)this + 288), 0);
      OZChannelBase::reset((OZChannelBase *)((char *)this + 440), 0);
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v8, 1.0, 1);
    }
    else
    {
      (*((void (**)(OZChannel *, void))a2->var0 + 36))(a2, 0);
    }
    return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(OZChannel *, void))*((void *)a2->var0 + 36);
    return (OZChannelFolder *)v6(a2, 0);
  }
}

OZChannelFolder *OZChannelRotation3D::compoundSetIsSpline(OZChannelRotation3D *this, OZChannel *a2, uint64_t a3, char a4)
{
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x100000);
    if ((OZChannel *)((char *)this + 136) == a2
      || (OZChannel *)((char *)this + 288) == a2
      || (OZChannel *)((char *)this + 440) == a2)
    {
      uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0, 1);
      OZChannel::setIsSpline((OZChannel *)((char *)this + 136), a3);
      OZChannel::setIsSpline((OZChannel *)((char *)this + 288), a3);
      OZChannel::setIsSpline((OZChannel *)((char *)this + 440), a3);
      OZChannel::setKeyframe((OZChannel *)((char *)this + 592), v10, 1.0, 1);
    }
    else
    {
      (*((void (**)(OZChannel *, uint64_t))a2->var0 + 60))(a2, a3);
    }
    return OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x100000);
  }
  else
  {
    __n128 v8 = (uint64_t (*)(OZChannel *, uint64_t))*((void *)a2->var0 + 60);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

BOOL OZChannelRotation3D::isQuaternionMode(OZChannelRotation3D *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0) == 1;
}

uint64_t OZChannelRotation3D::willBeModified(OZChannelBase *this, uint64_t a2)
{
  OZChannelBase::willBeModified(this, a2);
  uint64_t v4 = (uint64_t (*)(OZChannelBase *, uint64_t))*((void *)this->var0 + 103);

  return v4(this, a2);
}

double OZChannelRotation3D::getValueAsQuatd(uint64_t a1, double *a2, CMTime *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a3, a4);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a3, a4);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a3, a4);
  double v27 = v12;
  __double2 v13 = __sincos_stret(v9 * 0.5);
  double v14 = v13.__sinval * 0.0;
  __double2 v15 = __sincos_stret(v11 * 0.5);
  double v16 = v15.__sinval * 0.0;
  __double2 v17 = __sincos_stret(v27 * 0.5);
  double v18 = v13.__cosval * v15.__cosval - (v14 * v16 + v14 * v15.__sinval + v13.__sinval * v16);
  double v19 = v13.__sinval * v15.__cosval + v13.__cosval * v16 + v14 * v15.__sinval - v14 * v16;
  double v20 = v14 * v15.__cosval + v13.__cosval * v15.__sinval + v13.__sinval * v16 - v14 * v16;
  double v21 = v14 * v16 - v13.__sinval * v15.__sinval + v14 * v15.__cosval + v13.__cosval * v16;
  double v22 = v17.__sinval * 0.0 * v19;
  double v23 = v17.__sinval * 0.0 * v20;
  double v24 = v17.__sinval * 0.0 * v18;
  double v25 = v17.__sinval * 0.0 * v21;
  a2[2] = v25 - v17.__sinval * v19 + v17.__cosval * v20 + v24;
  a2[3] = v22 - v23 + v17.__cosval * v21 + v17.__sinval * v18;
  double result = v17.__sinval * v20 - v25 + v17.__cosval * v19 + v24;
  *a2 = v17.__cosval * v18 - (v17.__sinval * v21 + v22 + v23);
  a2[1] = result;
  return result;
}

BOOL PCQuat<double>::getIncrementalEulerAngles(double *a1, double *a2, double *a3, double *a4, unsigned int a5)
{
  double v9 = *a2;
  double v10 = *a3;
  double v11 = *a4;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v33 = 0x3FF0000000000000;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v27 = 0x3FF0000000000000;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v27, a1);
  memset(v22, 0, sizeof(v22));
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  unsigned int v23 = a5;
  BOOL result = PCMatrix44Tmpl<double>::getTransformation((long long *)&v27, (uint64_t)v22);
  uint64_t v13 = *((void *)&v24 + 1);
  *(void *)a2 = v24;
  *(void *)a3 = v13;
  *(void *)a4 = v25;
  *a2 = *a2 + (double)(int)vcvtmd_s64_f64((v9 - *a2) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  *a3 = *a3 + (double)(int)vcvtmd_s64_f64((v10 - *a3) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  double v14 = *a4 + (double)(int)vcvtmd_s64_f64((v11 - *a4) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  *a4 = v14;
  double v15 = -v14;
  double v16 = -*a2;
  double v17 = -*a3;
  if (((1 << a5) & 0x14) != 0) {
    double v17 = *a3;
  }
  else {
    double v16 = *a2;
  }
  if (((1 << a5) & 0xA) != 0)
  {
    double v16 = *a2;
    double v17 = *a3;
  }
  else
  {
    double v15 = v14;
  }
  if (a5 > 5)
  {
    double v16 = *a2;
    double v17 = *a3;
    double v15 = v14;
  }
  double v18 = v15 + 3.14159265;
  double v19 = v16
      + 3.14159265
      + (double)(int)vcvtmd_s64_f64((v9 - (v16 + 3.14159265)) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  double v20 = v17
      + 3.14159265
      + (double)(int)vcvtmd_s64_f64((v10 - (v17 + 3.14159265)) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  double v21 = v18 + (double)(int)vcvtmd_s64_f64((v11 - v18) / 6.28318531 + 0.5 + 0.0000001) * 6.28318531;
  if (vabdd_f64(v19, v9) + vabdd_f64(v20, v10) + vabdd_f64(v21, v11) < vabdd_f64(*a2, v9)
                                                                      + vabdd_f64(*a3, v10)
                                                                      + vabdd_f64(v14, v11))
  {
    *a2 = v19;
    *a3 = v20;
    *a4 = v21;
  }
  return result;
}

void OZChannelRotation3D::getValueAsEulerAngles(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
  uint64_t v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

OZChannelFolder *OZChannelRotation3D::interpolationModeWasSet(OZChannelRotation3D *this)
{
  uint64_t v1 = (OZChannelFolder *)this;
  uint64_t v2 = (OZChannel *)((char *)this + 592);
  uint64_t v3 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0) == 1)
  {
    double v19 = v2;
    OZChannel::setKeyframe(v2, v3, 0.0, 1);
    OZChannelFolder::setFoldFlag(v1, 0x100000);
    int v4 = 0;
    uint64_t v5 = (OZChannel *)((char *)v1 + 288);
    uint64_t v6 = (OZChannel *)((char *)v1 + 136);
    uint64_t v7 = (OZChannel *)((char *)v1 + 440);
    do
    {
      if (v4 == 1) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v7;
      }
      if (v4) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v6;
      }
      unsigned int v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
      if (v10)
      {
        unsigned int v11 = v10;
        OZChannel::getKeyframes(v9, 0, __p);
        uint64_t v12 = 0;
        uint64_t v20 = v11;
        do
        {
          CMTime v22 = *v3;
          double v21 = 0.0;
          OZChannel::getKeyframe(v9, *((void **)__p[0] + v12), &v22, &v21);
          OZChannelFolder::addKeypointAt(v1, &v22);
          uint64_t v13 = v1;
          for (int i = 0; i != 3; ++i)
          {
            if (v4 != i)
            {
              if (i == 1) {
                double v15 = v5;
              }
              else {
                double v15 = v7;
              }
              if (i) {
                double v16 = v15;
              }
              else {
                double v16 = v6;
              }
              uint64_t Keyframe = (void *)OZChannel::getKeyframe(v16, &v22);
              if (Keyframe)
              {
                OZChannel::getKeyframeInterpolation(v9, *((void **)__p[0] + v12));
                OZChannel::setKeyframeInterpolation(v16, Keyframe);
              }
            }
          }
          ++v12;
          uint64_t v1 = v13;
          uint64_t v3 = (CMTime *)MEMORY[0x1E4F1FA48];
        }
        while (v12 != v20);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v4;
    }
    while (v4 != 3);
    return (OZChannelFolder *)OZChannel::setKeyframe(v19, MEMORY[0x1E4F1FA48], 1.0, 1);
  }
  else
  {
    return OZChannelFolder::resetFoldFlag(v1, 0x100000);
  }
}

void sub_1B7A0CBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *OZChannelRotation3D::getObjCWrapperName(OZChannelRotation3D *this)
{
  return @"CHChannelRotation3D";
}

uint64_t OZChannelRotation3D::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelRotation3D::parseEnd(OZChannelRotation3D *this, PCSerializerReadStream *a2)
{
  uint64_t v2 = (OZChannelRotation3D *)((char *)this - 16);
  OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  OZChannelRotation3D::interpolationModeWasSet(v2);
  return 1;
}

uint64_t OZChannelEnumInterpMode_Factory::getInstance(OZChannelEnumInterpMode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnumInterpMode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelEnumInterpMode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumInterpMode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumInterpMode_Factory::_instance;
}

__CFString *OZChannelEnumInterpMode::getObjCWrapperName(OZChannelEnumInterpMode *this)
{
  return @"CHChannelEnum";
}

void OZChannelEnumInterpMode::OZChannelEnumInterpMode(OZChannelEnumInterpMode *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelEnumInterpMode_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, 0, 0);
  *(void *)this = &unk_1F110FDC0;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1110130;
}

void *OZChannelEnumInterpMode::willBeModified(OZChannel *this, uint64_t a2)
{
  OZChannel::willBeModified(this, a2);
  BOOL result = this->var6;
  if (result)
  {
    if (result)
    {
      int v4 = *(uint64_t (**)(void))(*(void *)result + 824);
      return (void *)v4();
    }
  }
  return result;
}

void *OZChannelEnumInterpMode::addToUndo(OZChannelBase *this, const PCString *a2)
{
  var6 = this->var6;
  BOOL result = OZChannelBase::getChannelRootBase(this);
  if (var6)
  {
    uint64_t v5 = (uint64_t)result;
    BOOL result = (void *)(*(uint64_t (**)(OZChannelFolder *))(*(void *)var6 + 120))(var6);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, OZChannelFolder *, const PCString *))(*(void *)v5 + 752);
      return (void *)v7(v5, var6, a2);
    }
  }
  return result;
}

void OZQuaternionCubicInterpolator::~OZQuaternionCubicInterpolator(PCSpinLock *this)
{
  *(void *)&this->_lock._os_unfair_lock_opaque = &unk_1F1110188;
  PCSpinLock::~PCSpinLock(this + 5);

  OZChannelBase::setRangeName((OZChannelBase *)this, v2);
}

{
  const PCString *v2;
  uint64_t vars8;

  *(void *)&this->_lock._os_unfair_lock_opaque = &unk_1F1110188;
  PCSpinLock::~PCSpinLock(this + 5);
  OZChannelBase::setRangeName((OZChannelBase *)this, v2);

  JUMPOUT(0x1BA9BFBA0);
}

FILE *OZQuaternionCubicInterpolator::interpolate(OZQuaternionCubicInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, char *a5, const CMTime *a6)
{
  int v11 = (*(uint64_t (**)(char *, OZSpline *, const CMTime *))(*(void *)a4 + 208))(a4, a2, a3);
  v174[0] = *(CMTime *)(a4 + 16);
  CMTime v173 = *(CMTime *)(a5 + 16);
  CMTime time1 = *(CMTime *)(a4 + 16);
  *(_OWORD *)CMTime time2 = *((_OWORD *)a5 + 1);
  *(void *)&time2[16] = *((void *)a5 + 4);
  if (CMTimeCompare(&time1, (CMTime *)time2) >= 1)
  {
    OZSpline::getSmallDeltaU(a2, &v169);
    CMTime time1 = v174[0];
    *(CMTime *)CMTime time2 = v169;
    PC_CMTimeSaferAdd(&time1, (CMTime *)time2, (uint64_t)&v171);
    CMTime v173 = v171;
  }
  uint64_t v12 = *(const void **)(*(void *)(*(void *)(*((void *)a2 + 20) + 32) + 152) + 48);
  if (v12) {
  else
  }
    uint64_t v13 = 0;
  CurveInterface = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 136));
  if (CurveInterface) {
  uint64_t v15 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(CurveInterface + 40));
  }
  double v16 = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 288));
  if (v16) {
  uint64_t v17 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(v16 + 40));
  }
  double v18 = (char *)OZChannel::getCurveInterface((OZChannel *)(v13 + 440));
  if (v18) {
  uint64_t v19 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)(v18 + 40));
  }
  uint64_t v20 = MEMORY[0x1E4F1FA48];
  double v21 = (*(double (**)(uint64_t, CMTime *, void, void))(*(void *)v15 + 240))(v15, v174, MEMORY[0x1E4F1FA48], 0);
  double v137 = (*(double (**)(uint64_t, CMTime *, uint64_t, void))(*(void *)v15 + 240))(v15, &v173, v20, 0);
  double v22 = (*(double (**)(uint64_t, CMTime *, uint64_t, void))(*(void *)v17 + 240))(v17, v174, v20, 0);
  double v135 = (*(double (**)(uint64_t, CMTime *, uint64_t, void))(*(void *)v17 + 240))(v17, &v173, v20, 0);
  double v129 = (*(double (**)(uint64_t, CMTime *, uint64_t, void))(*(void *)v19 + 240))(v19, v174, v20, 0);
  double v133 = (*(double (**)(uint64_t, CMTime *, uint64_t, void))(*(void *)v19 + 240))(v19, &v173, v20, 0);
  __double2 v23 = __sincos_stret(v21 * 0.5);
  double v24 = 0.0;
  double v25 = v23.__sinval * 0.0;
  __double2 v26 = __sincos_stret(v22 * 0.5);
  double v27 = v26.__sinval * 0.0;
  __double2 v28 = __sincos_stret(v129 * 0.5);
  double v29 = v23.__cosval * v26.__cosval - (v25 * v27 + v25 * v26.__sinval + v23.__sinval * v27);
  double v30 = v23.__sinval * v26.__cosval + v23.__cosval * v27 + v25 * v26.__sinval - v25 * v27;
  double v31 = v25 * v26.__cosval + v23.__cosval * v26.__sinval + v23.__sinval * v27 - v25 * v27;
  double v32 = v25 * v27 - v23.__sinval * v26.__sinval + v25 * v26.__cosval + v23.__cosval * v27;
  double v33 = v30 * (v28.__sinval * 0.0);
  double v34 = v31 * (v28.__sinval * 0.0);
  double v130 = v29 * v28.__cosval - (v32 * v28.__sinval + v33 + v34);
  double v35 = v29 * (v28.__sinval * 0.0);
  double v36 = v32 * (v28.__sinval * 0.0);
  double v125 = v31 * v28.__cosval + v35 + v36 - v30 * v28.__sinval;
  double v127 = v30 * v28.__cosval + v35 + v31 * v28.__sinval - v36;
  double v123 = v29 * v28.__sinval + v32 * v28.__cosval + v33 - v34;
  v169.CMTimeValue value = 0x3FF0000000000000;
  __double2 v37 = __sincos_stret(v137 * 0.5);
  double v38 = v37.__sinval * 0.0;
  __double2 v39 = __sincos_stret(v135 * 0.5);
  double v40 = v39.__sinval * 0.0;
  __double2 v41 = __sincos_stret(v133 * 0.5);
  double v42 = v37.__cosval * v39.__cosval - (v38 * v40 + v38 * v39.__sinval + v37.__sinval * v40);
  double v43 = v37.__sinval * v39.__cosval + v37.__cosval * v40 + v38 * v39.__sinval - v38 * v40;
  double v44 = v38 * v39.__cosval + v37.__cosval * v39.__sinval + v37.__sinval * v40 - v38 * v40;
  double v45 = v38 * v40 - v37.__sinval * v39.__sinval + v38 * v39.__cosval + v37.__cosval * v40;
  double v46 = v43 * (v41.__sinval * 0.0);
  double v47 = v44 * (v41.__sinval * 0.0);
  double v48 = v42 * v41.__cosval - (v45 * v41.__sinval + v46 + v47);
  double v49 = v42 * (v41.__sinval * 0.0);
  double v50 = v42 * v41.__sinval + v45 * v41.__cosval;
  double v51 = v45 * (v41.__sinval * 0.0);
  double v52 = v43 * v41.__cosval + v49 + v44 * v41.__sinval - v51;
  double v53 = v44 * v41.__cosval + v49 + v51 - v43 * v41.__sinval;
  double v54 = v50 + v46 - v47;
  double v55 = sqrt(v130 * v130 + v123 * v123 + v127 * v127 + v125 * v125);
  if (v55 == 0.0)
  {
    *(void *)&v171.int32_t timescale = 0;
    v171.CMTimeEpoch epoch = 0;
    double v172 = 0.0;
    double v58 = 1.0;
    double v57 = 0.0;
    double v56 = 0.0;
  }
  else
  {
    double v56 = v127 / v55;
    double v57 = v125 / v55;
    *(double *)&v171.int32_t timescale = v127 / v55;
    *(double *)&v171.CMTimeEpoch epoch = v125 / v55;
    double v24 = v123 / v55;
    double v172 = v123 / v55;
    double v58 = v130 / v55;
  }
  *(double *)&v171.CMTimeValue value = v58;
  double v59 = sqrt(v48 * v48 + v54 * v54 + v52 * v52 + v53 * v53);
  if (v59 == 0.0)
  {
    *(void *)&v169.int32_t timescale = 0;
    v169.CMTimeEpoch epoch = 0;
    double v170 = 0.0;
    double v63 = 1.0;
    double v62 = 0.0;
    double v61 = 0.0;
    double v60 = 0.0;
  }
  else
  {
    double v60 = v52 / v59;
    double v61 = v53 / v59;
    *(double *)&v169.int32_t timescale = v60;
    *(double *)&v169.CMTimeEpoch epoch = v61;
    double v62 = v54 / v59;
    double v170 = v62;
    double v63 = v48 / v59;
  }
  *(double *)&v169.CMTimeValue value = v63;
  double v64 = (v58 - v63) * (v58 - v63) + (v56 - v60) * (v56 - v60) + (v57 - v61) * (v57 - v61) + (v24 - v62) * (v24 - v62);
  double v65 = (v58 + v63) * (v58 + v63) + (v56 + v60) * (v56 + v60) + (v57 + v61) * (v57 + v61) + (v24 + v62) * (v24 + v62);
  if (v65 < v64)
  {
    *(double *)&v169.CMTimeValue value = -v63;
    *(double *)&v169.int32_t timescale = -v60;
    *(double *)&v169.CMTimeEpoch epoch = -v61;
    double v170 = -v62;
  }
  if (v11 == 8)
  {
    CMTime time1 = *a6;
    *(CMTime *)CMTime time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
    operator*(&v154, &v158, 3.14159265);
    CMTime time1 = v173;
    *(CMTime *)CMTime time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v165);
    operator/((long long *)&v158.value, (uint64_t)&v165, (uint64_t)&v164);
    Float64 Seconds = CMTimeGetSeconds(&v164);
    double v67 = sin(Seconds * 0.5);
    goto LABEL_24;
  }
  if (v11 == 7)
  {
    CMTime time1 = *a6;
    *(CMTime *)CMTime time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
    operator*(&v154, &v158, 3.14159265);
    CMTime time1 = v173;
    *(CMTime *)CMTime time2 = v174[0];
    PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v165);
    operator/((long long *)&v158.value, (uint64_t)&v165, (uint64_t)&time);
    Float64 v66 = CMTimeGetSeconds(&time);
    double v67 = 1.0 - cos(v66 * 0.5);
LABEL_24:
    Float64 v168 = v67;
    int v11 = 1;
    goto LABEL_29;
  }
  CMTime time1 = *a6;
  *(CMTime *)CMTime time2 = v174[0];
  PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v158);
  CMTime time1 = v173;
  *(CMTime *)CMTime time2 = v174[0];
  PC_CMTimeSaferSubtract(&time1, (CMTime *)time2, (uint64_t)&v154);
  if ((v11 - 13) > 1)
  {
    operator/((long long *)&v158.value, (uint64_t)&v154, (uint64_t)&v162);
    double v69 = &v162;
  }
  else
  {
    operator/((long long *)&v158.value, (uint64_t)&v154, (uint64_t)v163);
    double v69 = (CMTime *)v163;
  }
  Float64 v168 = CMTimeGetSeconds(v69);
LABEL_29:
  double v160 = 0;
  unint64_t v161 = 0;
  uint64_t v70 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZSpline::getPreviousValidVertex(a2, a4, &v161, MEMORY[0x1E4F1FA48]);
  OZSpline::getNextValidVertex((void ***)a2, a5, &v160, v70);
  if ((v11 & 0xFFFFFFFD) == 4)
  {
    CMTime v71 = (char *)v161;
    if (!v161)
    {
      unint64_t v161 = a4;
      CMTime v71 = a4;
    }
    double v121 = v65;
    double v122 = v64;
    CMTime v72 = (char *)v160;
    if (!v160)
    {
      double v160 = a5;
      CMTime v72 = a5;
    }
    v158.CMTimeValue value = 0x3FF0000000000000;
    *(void *)&v158.int32_t timescale = 0;
    v158.CMTimeEpoch epoch = 0;
    uint64_t v159 = 0;
    long long v165 = *((_OWORD *)v71 + 1);
    uint64_t v166 = *((void *)v71 + 4);
    long long v156 = *((_OWORD *)v72 + 1);
    uint64_t v157 = *((void *)v72 + 4);
    uint64_t v73 = MEMORY[0x1E4F1FA48];
    double v74 = (*(double (**)(uint64_t, long long *, void, void))(*(void *)v15 + 240))(v15, &v165, MEMORY[0x1E4F1FA48], 0);
    double v138 = (*(double (**)(uint64_t, long long *, uint64_t, void))(*(void *)v15 + 240))(v15, &v156, v73, 0);
    double v75 = (*(double (**)(uint64_t, long long *, uint64_t, void))(*(void *)v17 + 240))(v17, &v165, v73, 0);
    double v136 = (*(double (**)(uint64_t, long long *, uint64_t, void))(*(void *)v17 + 240))(v17, &v156, v73, 0);
    double v131 = (*(double (**)(uint64_t, long long *, uint64_t, void))(*(void *)v19 + 240))(v19, &v165, v73, 0);
    double v134 = (*(double (**)(uint64_t, long long *, uint64_t, void))(*(void *)v19 + 240))(v19, &v156, v73, 0);
    __double2 v76 = __sincos_stret(v74 * 0.5);
    double v77 = v76.__sinval * 0.0;
    __double2 v78 = __sincos_stret(v75 * 0.5);
    double v79 = v78.__sinval * 0.0;
    __double2 v80 = __sincos_stret(v131 * 0.5);
    double v81 = v76.__cosval * v78.__cosval - (v77 * v79 + v77 * v78.__sinval + v76.__sinval * v79);
    double v82 = v76.__sinval * v78.__cosval + v76.__cosval * v79 + v77 * v78.__sinval - v77 * v79;
    double v83 = v77 * v78.__cosval + v76.__cosval * v78.__sinval + v76.__sinval * v79 - v77 * v79;
    double v84 = v77 * v79 - v76.__sinval * v78.__sinval + v77 * v78.__cosval + v76.__cosval * v79;
    double v85 = v82 * (v80.__sinval * 0.0);
    double v86 = v83 * (v80.__sinval * 0.0);
    double v132 = v81 * v80.__cosval - (v84 * v80.__sinval + v85 + v86);
    double v87 = v81 * (v80.__sinval * 0.0);
    double v88 = v84 * (v80.__sinval * 0.0);
    double v126 = v83 * v80.__cosval + v87 + v88 - v82 * v80.__sinval;
    double v128 = v82 * v80.__cosval + v87 + v83 * v80.__sinval - v88;
    double v124 = v81 * v80.__sinval + v84 * v80.__cosval + v85 - v86;
    *(void *)CMTime time2 = 0x3FF0000000000000;
    __double2 v89 = __sincos_stret(v138 * 0.5);
    double v90 = v89.__sinval * 0.0;
    __double2 v91 = __sincos_stret(v136 * 0.5);
    double v92 = v91.__sinval * 0.0;
    __double2 v93 = __sincos_stret(v134 * 0.5);
    double v94 = v89.__cosval * v91.__cosval - (v90 * v92 + v90 * v91.__sinval + v89.__sinval * v92);
    double v95 = v89.__sinval * v91.__cosval + v89.__cosval * v92 + v90 * v91.__sinval - v90 * v92;
    double v96 = v90 * v91.__cosval + v89.__cosval * v91.__sinval + v89.__sinval * v92 - v90 * v92;
    double v97 = v90 * v92 - v89.__sinval * v91.__sinval + v90 * v91.__cosval + v89.__cosval * v92;
    double v98 = v95 * (v93.__sinval * 0.0);
    double v99 = v96 * (v93.__sinval * 0.0);
    double v100 = v94 * v93.__cosval - (v97 * v93.__sinval + v98 + v99);
    double v101 = v94 * (v93.__sinval * 0.0);
    double v102 = v97 * (v93.__sinval * 0.0);
    double v103 = v102 - v95 * v93.__sinval;
    double v104 = v95 * v93.__cosval + v101 + v96 * v93.__sinval - v102;
    double v105 = v96 * v93.__cosval + v101 + v103;
    double v106 = v94 * v93.__sinval + v97 * v93.__cosval + v98 - v99;
    double v107 = sqrt(v132 * v132 + v124 * v124 + v128 * v128 + v126 * v126);
    if (v107 == 0.0)
    {
      *(void *)&time1.int32_t timescale = 0;
      time1.CMTimeEpoch epoch = 0;
      *(void *)&long long v146 = 0;
      double v108 = 1.0;
    }
    else
    {
      *(double *)&time1.int32_t timescale = v128 / v107;
      *(double *)&time1.CMTimeEpoch epoch = v126 / v107;
      *(double *)&long long v146 = v124 / v107;
      double v108 = v132 / v107;
    }
    *(double *)&time1.CMTimeValue value = v108;
    double v109 = sqrt(v100 * v100 + v106 * v106 + v104 * v104 + v105 * v105);
    if (v109 == 0.0)
    {
      memset(&time2[8], 0, 24);
      double v113 = 1.0;
      double v112 = 0.0;
      double v111 = 0.0;
      double v110 = 0.0;
    }
    else
    {
      double v110 = v104 / v109;
      double v111 = v105 / v109;
      *(double *)&time2[8] = v110;
      *(double *)&time2[16] = v111;
      double v112 = v106 / v109;
      *(double *)&time2[24] = v112;
      double v113 = v100 / v109;
    }
    *(double *)CMTime time2 = v113;
    if (v121 < v122)
    {
      *(double *)CMTime time2 = -v113;
      *(double *)&time2[8] = -v110;
      *(double *)&time2[16] = -v111;
      *(double *)&time2[24] = -v112;
    }
    spline<double>((double *)&time1.value, (double *)&v171.value, (double *)&v169.value, (double *)time2, &v168, (uint64_t)&v154);
    CMTime v158 = v154;
    uint64_t v159 = v155;
  }
  else
  {
    slerp<double>((double *)&v171.value, (double *)&v169.value, &v168, (uint64_t)&time1);
    CMTime v158 = time1;
    uint64_t v159 = v146;
  }
  uint64_t v153 = 0x3FF0000000000000;
  uint64_t v150 = 0x3FF0000000000000;
  uint64_t v147 = 0x3FF0000000000000;
  time1.CMTimeValue value = 0x3FF0000000000000;
  *(_OWORD *)&time1.int32_t timescale = 0u;
  long long v146 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&time1, (double *)&v158.value);
  long long v140 = 0u;
  memset(time2, 0, sizeof(time2));
  int v141 = 4;
  long long v142 = 0u;
  long long v143 = 0u;
  uint64_t v144 = 0;
  BOOL Transformation = PCMatrix44Tmpl<double>::getTransformation((long long *)&time1.value, (uint64_t)time2);
  BOOL result = _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/ProChanneliOS/Channels/OZChannelRotation3D.cpp", 745, v115, v116, v117, v118, v119);
  *((unsigned char *)this + 16) = 0;
  return result;
}

double spline<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  intermediate<double>(a1, a2, a3, (uint64_t)v13);
  intermediate<double>(a2, a3, a4, (uint64_t)v12);
  return squad<double>(a2, v13, v12, a3, a5, a6);
}

void slerp<double>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v5 = *a1;
  double v6 = a1[1];
  double v8 = *a2;
  double v7 = a2[1];
  double v9 = a1[2];
  double v10 = a1[3];
  double v11 = a2[2];
  double v12 = a2[3];
  double v13 = *a1 * *a2 + v6 * v7 + v9 * v11 + v10 * v12;
  if (v13 >= 1.0)
  {
    *(double *)a4 = v5;
    *(double *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v6;
  }
  else
  {
    double v14 = sqrt(1.0 - v13 * v13);
    *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v15 = *a3;
    if (v14 * 1.79769313e308 <= 1.0)
    {
      if (v13 <= 0.0)
      {
        double v22 = sin((0.5 - v15) * 3.14159265);
        long double v23 = sin(v15 * 3.14159265);
        double v20 = v10 * v23 + v5 * v22;
        double v21 = v6 * v22 - v9 * v23;
        double v9 = v23 * v6 + v9 * v22;
        double v10 = v10 * v22 - v5 * v23;
      }
      else
      {
        double v20 = v8 * v15 + v5 * (1.0 - v15);
        double v21 = v7 * v15 + v6 * (1.0 - v15);
        double v9 = v11 * v15 + v9 * (1.0 - v15);
        double v10 = v12 * v15 + v10 * (1.0 - v15);
      }
    }
    else
    {
      double v25 = v7;
      double v26 = v14;
      double v24 = acos(v13);
      long double v16 = sin(v24 * (1.0 - v15));
      long double v17 = v24 * v15;
      long double v18 = v16 / v26;
      long double v19 = sin(v17) / v26;
      double v20 = v8 * v19 + v5 * v18;
      double v21 = v25 * v19 + v6 * v18;
      double v9 = v11 * v19 + v9 * v18;
      double v10 = v12 * v19 + v10 * v18;
    }
    *(double *)a4 = v20;
    *(double *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v21;
  }
  *(double *)(a4 + 16) = v9;
  *(double *)(a4 + 24) = v10;
}

uint64_t OZQuaternionCubicInterpolator::useTangents(OZQuaternionCubicInterpolator *this)
{
  return 0;
}

char *OZQuaternionCubicInterpolator::isActive(OZQuaternionCubicInterpolator *this, OZSpline *a2, void *a3)
{
  if (a3) {
    int v4 = (*(uint64_t (**)(void *))(*(void *)a3 + 208))(a3) == 0;
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(void *)(*(void *)(*((void *)a2 + 20) + 32) + 152);
  if (!v5) {
    return 0;
  }
  BOOL result = *(char **)(v5 + 48);
  if (result)
  {
    if (result) {
      return (char *)((OZChannel::getValueAsInt((OZChannel *)(result + 592), MEMORY[0x1E4F1FA48], 0.0) != 0) & ~v4);
    }
  }
  return result;
}

void std::__call_once_param<std::tuple<OZChannelEnumInterpMode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7A0E300(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumInterpMode_Factory::OZChannelEnumInterpMode_Factory(OZChannelEnumInterpMode_Factory *this)
{
  long long v3 = xmmword_1B8378BA0;
  long long v4 = xmmword_1B837A6C0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1110258;
  *((void *)this + 16) = &unk_1F1110328;
}

void sub_1B7A0E3D0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumInterpMode_Factory::create(OZChannelEnumInterpMode_Factory *this, const PCString *a2)
{
}

void sub_1B7A0E48C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumInterpMode_Factory::createCopy(OZChannelEnumInterpMode_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7A0E580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumInterpMode_Factory::createChannelCopy(OZChannelEnumInterpMode_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7A0E674(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void intermediate<double>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = *a2;
  double v5 = a2[1];
  double v7 = a2[2];
  double v8 = a2[3];
  double v9 = v6 * v6 + v5 * v5 + v7 * v7 + v8 * v8;
  double v10 = *a2;
  double v11 = v5;
  double v12 = v7;
  double v13 = v8;
  if (v9 != 0.0)
  {
    double v10 = v6 / v9;
    double v11 = -v5 / v9;
    double v12 = -v7 / v9;
    double v13 = -v8 / v9;
  }
  double v70 = a2[1];
  double v14 = a3[1];
  double v15 = a3[2];
  double v16 = a3[3];
  double v69 = v10 * *a3 - (v11 * v14 + v12 * v15 + v13 * v16);
  double v65 = v11 * *a3 + v10 * v14;
  double v63 = v13 * *a3 + v10 * v16;
  double v64 = v12 * *a3 + v10 * v15;
  double v61 = v13 * v14 - v11 * v16;
  double v62 = v12 * v16 - v13 * v15;
  double v60 = v11 * v15 - v12 * v14;
  double v17 = a1[1];
  double v18 = a1[2];
  double v19 = a1[3];
  double v20 = v11 * *a1 + v10 * v17 + v12 * v19 - v13 * v18;
  double v21 = v12 * *a1 + v10 * v18 + v13 * v17 - v11 * v19;
  double v22 = v11 * v18 - v12 * v17 + v13 * *a1 + v10 * v19;
  if (v10 * *a1 - (v11 * v17 + v12 * v18 + v13 * v19) <= 1.0) {
    double v23 = v10 * *a1 - (v11 * v17 + v12 * v18 + v13 * v19);
  }
  else {
    double v23 = 1.0;
  }
  long double v24 = acos(v23);
  double v25 = sin(v24);
  if (v24 == 0.0)
  {
    double v66 = v22;
    double v67 = v21;
    double v68 = v20;
  }
  else
  {
    double v26 = fabs(v25);
    BOOL v29 = v26 < 1.0;
    double v27 = fabs(v24);
    double v28 = v26 * 1.79769313e308;
    BOOL v29 = !v29 || v27 < v28;
    if (v29) {
      double v30 = v24 / v25;
    }
    else {
      double v30 = 0.0;
    }
    double v67 = v21 * v30;
    double v68 = v20 * v30;
    double v66 = v22 * v30;
  }
  double v31 = v65 + v62;
  double v32 = v64 + v61;
  double v33 = v60 + v63;
  double v34 = v69;
  if (v69 > 1.0) {
    double v34 = 1.0;
  }
  long double v35 = acos(v34);
  double v36 = sin(v35);
  if (v35 != 0.0)
  {
    double v37 = fabs(v36);
    BOOL v29 = v37 < 1.0;
    double v38 = fabs(v35);
    double v39 = v37 * 1.79769313e308;
    if (!v29 || v38 < v39) {
      double v41 = v35 / v36;
    }
    else {
      double v41 = 0.0;
    }
    double v31 = v31 * v41;
    double v32 = v32 * v41;
    double v33 = v33 * v41;
  }
  double v42 = v66 + v33;
  double v43 = (v68 + v31) * -0.25;
  double v44 = (v67 + v32) * -0.25;
  double v45 = v42 * -0.25;
  double v46 = sqrt(v44 * v44 + v43 * v43 + v45 * v45);
  double v47 = sin(v46);
  double v48 = fabs(v46);
  BOOL v29 = v48 < 1.0;
  double v49 = fabs(v47);
  double v50 = v48 * 1.79769313e308;
  if (!v29 || v49 < v50) {
    double v52 = v47 / v46;
  }
  else {
    double v52 = 0.0;
  }
  long double v53 = cos(v46);
  double v54 = v6 * v53 - (v8 * (v45 * v52) + v70 * (v43 * v52) + v7 * (v44 * v52));
  double v55 = v70 * v53 + v6 * (v43 * v52) + v7 * (v45 * v52) - v8 * (v44 * v52);
  double v56 = v7 * v53 + v6 * (v44 * v52) + v8 * (v43 * v52) - v70 * (v45 * v52);
  double v57 = v70 * (v44 * v52) - v7 * (v43 * v52) + v8 * v53 + v6 * (v45 * v52);
  double v58 = sqrt(v54 * v54 + v57 * v57 + v55 * v55 + v56 * v56);
  if (v58 == 0.0)
  {
    *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v59 = 1.0;
  }
  else
  {
    *(double *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v55 / v58;
    *(double *)(a4 + 16) = v56 / v58;
    *(double *)(a4 + 24) = v57 / v58;
    double v59 = v54 / v58;
  }
  *(double *)a4 = v59;
}

double squad<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  slerp<double>(a1, a4, a5, (uint64_t)v13);
  slerp<double>(a2, a3, a5, (uint64_t)v12);
  double v11 = (*a5 + *a5) * (1.0 - *a5);
  slerp<double>(v13, v12, &v11, a6);
  return result;
}

void sub_1B7A0EC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  uint64_t Instance = (OZChannelScale::OZChannelScale_valueImpl *)OZChannelScale_Factory::getInstance(this);
  double v16 = (OZFactory *)Instance;
  if (!a7) {
    a7 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(Instance);
  }
  OZChannel2D::OZChannel2D(this, v16, a2, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!a8)
  {
    double v18 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v17);
    double v19 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v18);
    double v20 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v19);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v20);
  }
}

void sub_1B7A0EE34(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, int a7, OZChannelImpl *Instance, OZChannelInfo *a9)
{
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!Instance) {
    uint64_t Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  }
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7, Instance, a9);
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!a9)
  {
    double v17 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v16);
    double v18 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v17);
    double v19 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v18);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v19);
  }
}

void sub_1B7A0EF54(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, int a8, OZChannelImpl *a9, OZChannelInfo *a10)
{
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  uint64_t Instance = (OZChannelScale::OZChannelScale_valueImpl *)OZChannelScale_Factory::getInstance(this);
  double v20 = (OZFactory *)Instance;
  if (!a9) {
    a9 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(Instance);
  }
  OZChannel2D::OZChannel2D(this, a2, a3, v20, a4, a5, a6, a7, a8, a9, a10);
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!a10)
  {
    double v22 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v21);
    double v23 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v22);
    long double v24 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v23);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v24);
  }
}

void sub_1B7A0F094(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, double a2, double a3, OZFactory *a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8, int a9, OZChannelImpl *Instance, OZChannelInfo *a11)
{
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!Instance) {
    uint64_t Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  }
  OZChannel2D::OZChannel2D(this, a2, a3, a4, a5, a6, a7, a8, a9, Instance, a11);
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  if (!a11)
  {
    double v21 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v20);
    double v22 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v21);
    double v23 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v22);
    OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v23);
  }
}

void sub_1B7A0F1CC(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  uint64_t Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(this);
  OZChannel2D::OZChannel2D(this, a2, a3, a4, 0, Instance, 0);
  *(void *)this = &unk_1F1110380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F11106D8;
  uint64_t v10 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v9);
  double v11 = OZChannel::replaceInfo((OZChannel *)((char *)this + 136), v10);
  double v12 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance((OZChannelScale::OZChannelScale_valueInfo *)v11);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 288), v12);
}

void sub_1B7A0F2B0(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale(OZChannelScale *this, const OZChannelScale *a2, OZChannelFolder *a3)
{
  OZChannel2D::OZChannel2D(this, a2, a3);
  void *v3 = &unk_1F1110380;
  v3[2] = &unk_1F11106D8;
}

void OZChannelScale::clone(OZChannelScale *this)
{
}

void sub_1B7A0F3A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

__CFString *OZChannelScale::getObjCWrapperName(OZChannelScale *this)
{
  return @"CHChannelScale";
}

uint64_t OZChannelScale::OZChannelScale_valueImpl::getInstance(OZChannelScale::OZChannelScale_valueImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::OZChannelScale_valueImpl_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::OZChannelScale_valueImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelScale::OZChannelScale_valueImpl::_OZChannelScale_value;
}

void std::__call_once_param<std::tuple<OZChannelScale::OZChannelScale_valueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelScale::OZChannelScale_valueImpl::_OZChannelScale_value) {
    operator new();
  }
}

void sub_1B7A0F490(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelScale::OZChannelScale_valueImpl::OZChannelScale_valueImpl(OZChannelScale::OZChannelScale_valueImpl *this)
{
}

void sub_1B7A0F568(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelScale::OZChannelScale_valueInfo::getInstance(OZChannelScale::OZChannelScale_valueInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::OZChannelScale_valueInfo_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::OZChannelScale_valueInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelScale::OZChannelScale_valueInfo::_OZChannelScale_valueInfo;
}

void std::__call_once_param<std::tuple<OZChannelScale::OZChannelScale_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelScale::OZChannelScale_valueInfo::_OZChannelScale_valueInfo) {
    operator new();
  }
}

void sub_1B7A0F644(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelScale::OZChannelScale_valueInfo *OZChannelScale::OZChannelScale_valueInfo::OZChannelScale_valueInfo(OZChannelScale::OZChannelScale_valueInfo *this)
{
  PCURL::PCURL((PCURL *)&v3, @"%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelScale::OZChannelScale_valueInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11107C0;
  *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F11107E0;
  return this;
}

void sub_1B7A0F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelScale3D_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, Instance, a2, a3, a4, a5, 2, 0, 0);
  *(void *)this = &unk_1F1110838;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1110B90;
  TXParagraphStyleFolder_Factory::createInstance(v11, v12);
  PCURL::PCURL((PCURL *)&v17, @"Channel Z");
  double v14 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), &v17, (OZChannelFolder *)this, 3u, 0, v14, 0);
  PCString::~PCString(&v17);
  double v16 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v15);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v16);
}

void sub_1B7A0F850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, double a2, double a3, double a4, const PCString *a5, OZChannelFolder *a6, unsigned int a7, int a8)
{
  uint64_t Instance = (OZFactory *)OZChannelScale3D_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, a2, a3, Instance, a5, a6, a7, a8, 2, 0, 0);
  *(void *)this = &unk_1F1110838;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1110B90;
  TXParagraphStyleFolder_Factory::createInstance(v17, v18);
  PCURL::PCURL((PCURL *)&v23, @"Channel Z");
  double v20 = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v19);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), a4, &v23, (OZChannelFolder *)this, 3u, 0, v20, 0);
  PCString::~PCString(&v23);
  double v22 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v21);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v22);
}

void sub_1B7A0F9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *(void *)double v5 = &unk_1F1110838;
  *((void *)v5 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1110B90;
  TXParagraphStyleFolder_Factory::createInstance(v5, v6);
  PCURL::PCURL((PCURL *)&v11, @"Channel Z");
  uint64_t Instance = (OZChannelImpl *)OZChannelScale::OZChannelScale_valueImpl::getInstance(v7);
  OZChannelDouble::OZChannelDouble((OZChannelScale3D *)((char *)this + 440), &v11, (OZChannelFolder *)this, 3u, 0, Instance, 0);
  PCString::~PCString(&v11);
  uint64_t v10 = (OZChannelInfo *)OZChannelScale::OZChannelScale_valueInfo::getInstance(v9);
  OZChannel::replaceInfo((OZChannel *)((char *)this + 440), v10);
}

void sub_1B7A0FAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::OZChannelScale3D(OZChannelScale3D *this, const OZChannelScale3D *a2, OZChannelFolder *a3)
{
  OZChannelScale::OZChannelScale(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1110838;
  *(void *)(v5 + 16) = &unk_1F1110B90;
  OZChannel::OZChannel((OZChannel *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  *((void *)this + 55) = &unk_1F1100CF0;
  *((void *)this + 57) = &unk_1F1101050;
}

void sub_1B7A0FBB4(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::clone(OZChannelScale3D *this)
{
}

void sub_1B7A0FC18(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelScale3D::copy(OZChannelScale3D *this, const OZChannelBase *a2, char a3)
{
  OZChannel2D::copy(this, a2, a3);
  if (a2) {
  else
  }
    double v6 = 0;

  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)(v6 + 440), a3);
}

__CFString *OZChannelScale3D::getObjCWrapperName(OZChannelScale3D *this)
{
  return @"CHChannelScale3D";
}

void non-virtual thunk to'OZChannelScale3D::~OZChannelScale3D(OZChannelScale3D *this)
{
  uint64_t v1 = (OZChannelScale3D *)((char *)this - 16);
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1110838;
  *(void *)this = &unk_1F1110B90;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 424));

  OZChannel2D::~OZChannel2D(v1);
}

{
  OZChannelScale3D::~OZChannelScale3D((OZChannelScale3D *)((char *)this - 16));
}

__CFString *OZChannelScaleOverLife::getObjCWrapperName(OZChannelScaleOverLife *this)
{
  return @"CHChannelScaleOverLife";
}

void OZChannelScaleOverLife::OZChannelScaleOverLife(OZChannelScaleOverLife *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelCurve::OZChannelCurve(this, a2, a3, a4);
  void *v4 = &unk_1F1110C00;
  v4[2] = &unk_1F1110FA8;
}

void OZChannelScaleOverLife::OZChannelScaleOverLife(OZChannelScaleOverLife *this, const OZChannelScaleOverLife *a2, OZChannelFolder *a3)
{
}

void non-virtual thunk to'OZChannelScaleOverLife::~OZChannelScaleOverLife(OZChannelScaleOverLife *this)
{
}

{
  uint64_t vars8;

  OZChannelCurve::~OZChannelCurve((OZChannel *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelScaleOverLife::~OZChannelScaleOverLife(OZChannel *this)
{
  OZChannelCurve::~OZChannelCurve(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelShear_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, a6);
  *(void *)this = &unk_1F1111018;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111360;
  TXParagraphStyleFolder_Factory::createInstance(v13, v14);
  PCURL::PCURL((PCURL *)&v17, @"Channel X");
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 136), &v17, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v17);
  TXParagraphStyleFolder_Factory::createInstance(v15, v16);
  PCURL::PCURL((PCURL *)&v17, @"Channel Y");
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 288), &v17, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v17);
}

void sub_1B7A10068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)double v6 = &unk_1F1111018;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111360;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v10, @"Channel X");
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 136), &v10, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v10);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v10, @"Channel Y");
  OZChannelShearAngle::OZChannelShearAngle((OZChannelShearAngle *)((char *)this + 288), &v10, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v10);
}

void sub_1B7A101B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelShear::OZChannelShear(OZChannelShear *this, const OZChannelShear *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1111018;
  *(void *)(v5 + 16) = &unk_1F1111360;
  OZChannel::OZChannel((OZChannel *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  *((void *)this + 17) = &unk_1F1101C30;
  *((void *)this + 19) = &unk_1F1101F90;
  OZChannel::OZChannel((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  *((void *)this + 36) = &unk_1F1101C30;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = &unk_1F1101F90;
}

void sub_1B7A10304(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelShear::clone(OZChannelShear *this)
{
}

void sub_1B7A10378(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelShear::copy(OZChannelShear *this, const OZChannelBase *a2, char a3)
{
  long long v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }

  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);
}

__CFString *OZChannelShear::getObjCWrapperName(OZChannelShear *this)
{
  return @"CHChannelShear";
}

void OZChannelShear::~OZChannelShear(OZChannelShear *this)
{
  OZChannelShear::~OZChannelShear(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1111018;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111360;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

void non-virtual thunk to'OZChannelShear::~OZChannelShear(OZChannelShear *this)
{
}

{
  uint64_t vars8;

  OZChannelShear::~OZChannelShear((OZChannelShear *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

__CFString *OZChannelText::getObjCWrapperName(OZChannelText *this)
{
  return @"CHChannelText";
}

void OZChannelText::OZChannelText(OZChannelText *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelText_Factory::getInstance((OZChannelText_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, 0, 0);
  this->var0 = (void **)&unk_1F11113D0;
  this->var2 = (void **)&unk_1F1111750;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v11);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  double v13 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v13;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B7A10674(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelText::createOZChannelTextInfo(OZChannelText *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelText::createOZChannelTextInfo(void)::_OZChannelTextInfo_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelText::createOZChannelTextInfo(void)::_OZChannelTextInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelText::createOZChannelTextInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelText::_OZChannelTextInfo;
}

uint64_t OZChannelText::createOZChannelTextImpl(OZChannelText *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelText::createOZChannelTextImpl(void)::_OZChannelTextImpl_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelText::createOZChannelTextImpl(void)::_OZChannelTextImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelText::createOZChannelTextImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelText::_OZChannelTextImpl;
}

void OZChannelText::OZChannelText(OZChannelText *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F11113D0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F1111750;
  PCSharedCount::PCSharedCount(v5 + 19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v6);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  double v8 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v8;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B7A1084C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, const PCString *a2, PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t Instance = (OZFactory *)OZChannelText_Factory::getInstance((OZChannelText_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a4, a5, a6, 0, 0);
  this->var0 = (void **)&unk_1F11113D0;
  this->var2 = (void **)&unk_1F1111750;
  PCSharedCount::PCSharedCount((PCSharedCount *)&this->var19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v13);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  double v15 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v15;
  PCString::set(&this->var19, a3);
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B7A10998(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&unk_1F11113D0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1F1111750;
  double v6 = (PCString *)&v5[19];
  PCSharedCount::PCSharedCount(v5 + 19);
  this->var20 = (BOOL)a2[1].var6;
  PCString::set(v6, (const PCString *)&a2[1].var5);
  this->var20 = (BOOL)a2[1].var6;
}

void sub_1B7A10A58(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::clone(OZChannelText *this)
{
}

void sub_1B7A10ACC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void OZChannelText::OZChannelText(OZChannelText *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, a5, a6, 0, 0);
  v7->var0 = (PC_Sp_counted_base *)&unk_1F11113D0;
  v7[2].var0 = (PC_Sp_counted_base *)&unk_1F1111750;
  PCSharedCount::PCSharedCount(v7 + 19);
  this->var20 = 0;
  OZChannelTextInfo = (OZChannelInfo *)OZChannelText::createOZChannelTextInfo(v8);
  this->var16 = OZChannelTextInfo;
  this->var17 = OZChannelTextInfo;
  OZChannelText::createOZChannelTextImpl((OZChannelText *)OZChannelTextInfo);
  PCString v10 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var14 = (OZChannelImpl *)OZChannelText::_OZChannelTextImpl;
  this->var15 = v10;
  this->var7 |= 0x10000uLL;
  OZChannelBase::resetFlag((OZChannelBase *)this, 16, 0);
  (*((void (**)(OZChannelText *))this->var0 + 16))(this);
}

void sub_1B7A10BD0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelText::copy(OZChannelText *this, const OZChannelBase *a2, char a3)
{
  OZChannel::copy((OZChannel *)this, a2, a3);
  if (a2)
  {
    if (v5)
    {
      double v6 = v5;
      PCString::set(&this->var19, v5 + 19);
      this->var20 = (BOOL)v6[20].var0;
    }
  }
}

void OZChannelText::~OZChannelText(OZChannelText *this)
{
  this->var0 = (void **)&unk_1F11113D0;
  this->var2 = (void **)&unk_1F1111750;
  PCString::~PCString(&this->var19);

  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_1F11113D0;
  this->var2 = (void **)&unk_1F1111750;
  PCString::~PCString(&this->var19);

  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_1F11113D0;
  this->var2 = (void **)&unk_1F1111750;
  PCString::~PCString(&this->var19);
  OZChannel::~OZChannel((OZChannel *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelText::~OZChannelText(OZChannelText *this)
{
  p_var19 = (OZChannel *)&this[-1].var19;
  this[-1].var19.var0 = (__CFString *)&unk_1F11113D0;
  this->var0 = (void **)&unk_1F1111750;
  PCString::~PCString((PCString *)&this->var17);

  OZChannel::~OZChannel(p_var19);
}

{
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this - 16));
}

void OZChannelText::assign(OZChannelText *this, const OZChannelBase *a2)
{
  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      PCString::set(&this->var19, v4 + 19);
      this->var20 = (BOOL)v5[20].var0;
    }
  }
}

uint64_t OZChannelText::isModified(OZChannelText *this)
{
  return 1;
}

void OZChannelText::getString(OZChannelText *this@<X0>, PCString *a2@<X8>)
{
}

PCString *OZChannelText::getStringPtr(OZChannelText *this)
{
  return &this->var19;
}

void OZChannelText::setString(OZChannelText *this, PCString a2, char a3)
{
  if ((a3 & 1) == 0) {
    (*((void (**)(OZChannelText *, uint64_t))this->var0 + 58))(this, 1);
  }

  PCString::set(&this->var19, (const PCString *)a2.var0);
}

void OZChannelText::setAttributedString(OZChannelText *this, CFAttributedStringRef aStr)
{
  CFStringRef String = CFAttributedStringGetString(aStr);
  CStringPtr = CFStringGetCStringPtr(String, 0x8000100u);
  PCString::PCString(&v5, CStringPtr);
  (*((void (**)(OZChannelText *, PCString *, void, void))this->var0 + 108))(this, &v5, 0, 0);
  PCString::~PCString(&v5);
}

void sub_1B7A11028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelText::writeHeader(OZChannelText *this, OZFactory *a2, int a3)
{
  return OZChannelBase::writeHeader((OZChannelBase *)&this[-1].var19, a2, a3);
}

uint64_t OZChannelText::writeBody(OZChannelText *this, PCSerializerWriteStream *a2, int a3)
{
  OZChannelBase::writeBody((OZChannelBase *)this, a2, a3);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelTextScope);
  p_var19 = &this->var19;
  if (PCString::size(p_var19))
  {
    PCString::PCString(&v7, p_var19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 114);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v7);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v7);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7A11134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelText::writeBody(OZChannelText *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelText::writeBody((OZChannelText *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelText::parseBegin(OZChannelText *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelText::parseBegin(OZChannelText *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelText::parseElement(OZChannelText *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 114)
  {
    (*(void (**)(PCStreamElement *, PCString *))(*(void *)a3 + 16))(a3, &this->var19);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelText::parseElement(OZChannelText *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZChannelText::parseEnd(OZChannelText *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseEnd((OZChannelBase *)this, a2);
  if (this->var20)
  {
    PCString v3 = PCString::ns_str(&this->var19);
    uint64_t v4 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
    [(__CFString *)v3 rangeOfCharacterFromSet:v4];
    if (v5)
    {
      v8.var0 = 0;
      PCString::set(&v8, (CFStringRef)objc_msgSend((id)-[__CFString componentsSeparatedByCharactersInSet:](v3, "componentsSeparatedByCharactersInSet:", v4), "componentsJoinedByString:", &stru_1F119C770));
      PCString::PCString(&v7, &v8);
      (*((void (**)(OZChannelText *, PCString *, uint64_t, void))this->var0 + 108))(this, &v7, 1, 0);
      PCString::~PCString(&v7);
      PCString::~PCString(&v8);
    }
  }
  return 1;
}

void sub_1B7A1133C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelText::parseEnd(OZChannelText *this, PCSerializerReadStream *a2)
{
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelText::createOZChannelTextInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelText::_OZChannelTextInfo) {
    operator new();
  }
}

void sub_1B7A113D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelTextInfo::OZChannelTextInfo(OZChannelTextInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F11117C0;
  *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F11117E0;
}

void sub_1B7A1147C(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelText::createOZChannelTextImpl(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelText::_OZChannelTextImpl) {
    operator new();
  }
}

void sub_1B7A1151C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

__CFString *OZChannelBlindData::getObjCWrapperName(OZChannelBlindData *this)
{
  return @"CHChannelBlindData";
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, const PCString *a2, void *a3, OZChannelFolder *a4, unsigned int a5, int a6, char a7, NSData *(*a8)(NSData *, NSData *, float, void *), NSData *a9, BOOL (*a10)(NSData *, NSData *, void *), NSData *a11)
{
  uint64_t Instance = (OZFactory *)OZChannelBlindData_Factory::getInstance((OZChannelBlindData_Factory *)this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a4, a5, a6, 0, 0);
  *(void *)this = &unk_1F1111838;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111B98;
  *((void *)this + 19) = 0;
  *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 176), 1);
  *((void *)this + 2OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F10933F0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = a7;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = a8;
  *((void *)this + 39) = [(NSData *)a9 copy];
  *((void *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = a10;
  *((void *)this + 4atomic_store(0, (unint64_t *)this + 1) = [(NSData *)a11 copy];
  *((unsigned char *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((unsigned char *)this + 384) = 0;
  *((void *)this + 47) = 0;
  OZChannelBlindDataInfo = (OZChannelBlindData *)OZChannelBlindData::createOZChannelBlindDataInfo(v20);
  *((void *)this + 16) = OZChannelBlindDataInfo;
  *((void *)this + 17) = OZChannelBlindDataInfo;
  OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindDataInfo);
  uint64_t v22 = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((void *)this + 14) = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((void *)this + 15) = v22;
  OZChannelBlindData::setDefaultValue(this, a3);
  (*(void (**)(OZChannelBlindData *, void))(*(void *)this + 280))(this, 0);
  operator new();
}

{
  OZChannelBlindData::OZChannelBlindData(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B7A11730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  double v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].unint64_t var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::createOZChannelBlindDataInfo(OZChannelBlindData *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBlindData::createOZChannelBlindDataInfo(void)::_OZChannelBlindDataInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelBlindData::createOZChannelBlindDataInfo(void)::_OZChannelBlindDataInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlindData::_OZChannelBlindDataInfo;
}

uint64_t OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindData *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBlindData::createOZChannelBlindDataImpl(void)::_OZChannelBlindDataImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelBlindData::createOZChannelBlindDataImpl(void)::_OZChannelBlindDataImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlindData::_OZChannelBlindDataImpl;
}

uint64_t OZChannelBlindData::setDefaultValue(OZChannelBlindData *this, void *a2)
{
  uint64_t v4 = (PCMutex *)((char *)this + 176);
  PCString v8 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  LOBYTE(v9) = 1;
  *((unsigned char *)this + 336) = 1;
  id v5 = OZChannelBlindData::encodeObjectToData(this, a2);
  if (OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000))
  {
    double v6 = (void *)*((void *)this + 35);
    if (v5)
    {
      if (v6 && (objc_msgSend(v6, "isEqualToData:", v5, v8, v9) & 1) != 0) {
        goto LABEL_8;
      }
    }
    else if (!v6)
    {
      goto LABEL_8;
    }
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
  }
LABEL_8:

  *((void *)this + 35) = v5;
  return PCMutex::unlock(v4);
}

void sub_1B7A1191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, OZFactory *a2, const PCString *a3, unsigned int a4, char a5, NSData *(*a6)(NSData *, NSData *, float, void *), NSData *a7, BOOL (*a8)(NSData *, NSData *, void *), NSData *a9)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, a4, 0, 0);
  *(void *)uint64_t v14 = &unk_1F1111838;
  *(void *)(v14 + 16) = &unk_1F1111B98;
  *(void *)(v14 + 15OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(void *)(v14 + 16OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v14 + 16OZSpline::reparametrize((uint64_t)this + 8) = 0;
  PCMutex::PCMutex((PCMutex *)(v14 + 176), 1);
  *((void *)this + 2OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F10933F0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = a5;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = a6;
  *((void *)this + 39) = [(NSData *)a7 copy];
  *((void *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = a8;
  *((void *)this + 4atomic_store(0, (unint64_t *)this + 1) = [(NSData *)a9 copy];
  *((unsigned char *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((unsigned char *)this + 384) = 0;
  *((void *)this + 47) = 0;
  OZChannelBlindDataInfo = (OZChannelBlindData *)OZChannelBlindData::createOZChannelBlindDataInfo(v15);
  *((void *)this + 16) = OZChannelBlindDataInfo;
  *((void *)this + 17) = OZChannelBlindDataInfo;
  OZChannelBlindData::createOZChannelBlindDataImpl(OZChannelBlindDataInfo);
  uint64_t v17 = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((void *)this + 14) = OZChannelBlindData::_OZChannelBlindDataImpl;
  *((void *)this + 15) = v17;
  operator new();
}

{
  OZChannelBlindData::OZChannelBlindData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B7A11AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  double v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].unint64_t var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::OZChannelBlindData(OZChannelBlindData *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F1111838;
  *(void *)(v4 + 16) = &unk_1F1111B98;
  *(void *)(v4 + 15OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  *(void *)(v4 + 16OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
  *(void *)(v4 + 16OZSpline::reparametrize((uint64_t)this + 8) = 0;
  PCMutex::PCMutex((PCMutex *)(v4 + 176), 1);
  *((void *)this + 2OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F10933F0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = 1;
  *((unsigned char *)this + 336) = 1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 44);
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((unsigned char *)this + 384) = 0;
  *((void *)this + 47) = 0;
  operator new();
}

void sub_1B7A11C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString(v12);
  PCMutex::~PCMutex(v11);
  double v15 = (OZFactory *)*v13;
  if (*v13)
  {
    v10[1].unint64_t var1 = v15;
    operator delete(v15);
  }
  OZChannel::~OZChannel(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::copyInternalData(OZChannelBlindData *this, id *a2)
{
  uint64_t v4 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((unsigned char *)this + 336) = 1;
  *((void *)this + 35) = a2[35];
  *((void *)this + 36) = a2[36];
  *((unsigned char *)this + 296) = *((unsigned char *)a2 + 296);
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = a2[38];
  *((void *)this + 39) = [a2[39] copy];
  *((void *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = a2[40];
  uint64_t v5 = [a2[41] copy];
  double v6 = (id **)((char *)this + 152);
  PCString v7 = (id *)*((void *)this + 19);
  *((void *)this + 4atomic_store(0, (unint64_t *)this + 1) = v5;
  if (v7 != *((id **)this + 20))
  {
    do
    {

      v7 += 4;
    }
    while (v7 != *((id **)this + 20));
    PCString v7 = *v6;
  }
  *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v7;
  for (int i = (char *)a2[19]; i != a2[20]; i += 32)
  {
    long long v25 = *(_OWORD *)i;
    uint64_t v26 = *((void *)i + 2);
    id v9 = *((id *)i + 3);
    id v10 = v9;
    unint64_t v11 = *((void *)this + 20);
    unint64_t v12 = *((void *)this + 21);
    if (v11 >= v12)
    {
      uint64_t v14 = (uint64_t)(v11 - (void)*v6) >> 5;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v12 - (void)*v6;
      if (v16 >> 4 > v15) {
        unint64_t v15 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        double v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v17);
      }
      else {
        double v18 = 0;
      }
      double v19 = &v18[32 * v14];
      *(_OWORD *)double v19 = v25;
      *((void *)v19 + OZChannelEnum::~OZChannelEnum(this - 2) = v26;
      *((void *)v19 + 3) = v10;
      double v21 = (id *)*((void *)this + 19);
      double v20 = (id *)*((void *)this + 20);
      uint64_t v22 = v19;
      if (v20 != v21)
      {
        do
        {
          long long v23 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v22 - OZChannelEnum::~OZChannelEnum(this - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v22 - atomic_store(0, (unint64_t *)this + 1) = v23;
          v22 -= 32;
          v20 -= 4;
        }
        while (v20 != v21);
        double v20 = *v6;
      }
      double v13 = v19 + 32;
      *((void *)this + 19) = v22;
      *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v19 + 32;
      *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = &v18[32 * v17];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(v11 + 16) = v26;
      *(void *)(v11 + 24) = v9;
      double v13 = (char *)(v11 + 32);
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v13;
  }
  return PCMutex::unlock(v4);
}

void sub_1B7A11EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::~OZChannelBlindData(OZChannelBlindData *this)
{
  *(void *)this = &unk_1F1111838;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111B98;
  uint64_t v2 = *((void *)this + 34);
  if (v2)
  {
    if (*(void *)v2 && *(unsigned char *)(v2 + 8))
    {
      PCMutex::unlock(*(PCMutex **)v2);
      *(unsigned char *)(v2 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    }
    MEMORY[0x1BA9BFBA0](v2, 0x1020C405F07FB98);
  }
  for (uint64_t i = *((void *)this + 19); i != *((void *)this + 20); i += 32)

  uint64_t v5 = (void **)((char *)this + 360);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v5);
  PCString::~PCString((PCString *)this + 44);
  PCString::~PCString((PCString *)this + 43);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 176));
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v4;
    operator delete(v4);
  }
  OZChannel::~OZChannel((OZChannel *)this);
}

{
  uint64_t vars8;

  OZChannelBlindData::~OZChannelBlindData(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelBlindData::~OZChannelBlindData(OZChannelBlindData *this)
{
}

{
  uint64_t vars8;

  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelBlindData::resetToDefault(OZChannelBlindData *this, char a2)
{
  OZChannel::resetToDefault((OZChannel *)this, a2);
  PCMutex::lock((PCMutex *)((char *)this + 176));

  *((void *)this + 36) = 0;
  *((unsigned char *)this + 336) = 1;
  uint64_t v3 = *((void *)this + 19);
  if (v3 != *((void *)this + 20))
  {
    do
    {

      v3 += 32;
    }
    while (v3 != *((void *)this + 20));
    uint64_t v3 = *((void *)this + 19);
  }
  *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v3;
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B7A12140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id OZChannelBlindData::encodeObjectToData(OZChannelBlindData *this, void *a2)
{
  if (*((unsigned char *)this + 296))
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
    [v3 encodeObject:a2 forKey:@"BlindDataObject"];
    objc_msgSend(v3, "encodeObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", 0), @"DataIsLegacy");
    id v4 = (id)[v3 encodedData];

    return v4;
  }
  else
  {
    return OZChannelBlindData::legacyEncodeObjectToData(this, a2);
  }
}

void OZChannelBlindData::clone(OZChannelBlindData *this)
{
}

void sub_1B7A122D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

PCMutex *OZChannelBlindData::copy(OZChannelBlindData *this, const OZChannelBase *a2, char a3)
{
  var6 = a2[2].var6;
  if (*(void *)var6 && !*((unsigned char *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((unsigned char *)var6 + OZSpline::reparametrize((uint64_t)this + 8) = 1;
  }
  OZChannel::copy((OZChannel *)this, a2, a3);
  OZChannelBlindData::copyInternalData(this, (id *)&a2->var0);
  PCString v7 = a2[2].var6;
  double result = *(PCMutex **)v7;
  if (*(void *)v7)
  {
    if (*((unsigned char *)v7 + 8))
    {
      double result = (PCMutex *)PCMutex::unlock(result);
      *((unsigned char *)v7 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    }
  }
  return result;
}

uint64_t OZChannelBlindData::assign(OZChannelBlindData *this, const OZChannelBase *a2)
{
  var6 = a2[2].var6;
  if (*(void *)var6 && !*((unsigned char *)var6 + 8))
  {
    PCMutex::lock(*(PCMutex **)var6);
    *((unsigned char *)var6 + OZSpline::reparametrize((uint64_t)this + 8) = 1;
  }
  OZChannel::assign((OZChannel *)this, a2);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((unsigned char *)this + 336) = 1;
  uint64_t v5 = (void *)*((void *)this + 35);
  if (v5 != (void *)a2[2].var7)
  {

    *((void *)this + 35) = (id)a2[2].var7;
  }
  double v6 = (void *)*((void *)this + 36);
  if (v6 != (void *)a2[2].var8)
  {

    *((void *)this + 36) = (id)a2[2].var8;
  }
  PCString v8 = (id *)*((void *)this + 19);
  PCString v7 = (id **)((char *)this + 152);
  if (v8 != *((id **)this + 20))
  {
    do
    {

      v8 += 4;
    }
    while (v8 != *((id **)this + 20));
    PCString v8 = *v7;
  }
  *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v8;
  for (uint64_t i = a2[1].var5; i != (PCString *)a2[1].var6; i += 4)
  {
    long long v27 = *(_OWORD *)&i->var0;
    var0 = i[2].var0;
    id v10 = i[3].var0;
    unint64_t v11 = v10;
    unint64_t v12 = *((void *)this + 20);
    unint64_t v13 = *((void *)this + 21);
    if (v12 >= v13)
    {
      uint64_t v15 = (uint64_t)(v12 - (void)*v7) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v13 - (void)*v7;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18) {
        double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v18);
      }
      else {
        double v19 = 0;
      }
      double v20 = &v19[32 * v15];
      *(_OWORD *)double v20 = v27;
      *((void *)v20 + OZChannelEnum::~OZChannelEnum(this - 2) = var0;
      *((void *)v20 + 3) = v11;
      uint64_t v22 = (id *)*((void *)this + 19);
      double v21 = (id *)*((void *)this + 20);
      long long v23 = v20;
      if (v21 != v22)
      {
        do
        {
          long long v24 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v23 - OZChannelEnum::~OZChannelEnum(this - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v23 - atomic_store(0, (unint64_t *)this + 1) = v24;
          v23 -= 32;
          v21 -= 4;
        }
        while (v21 != v22);
        double v21 = *v7;
      }
      uint64_t v14 = v20 + 32;
      *((void *)this + 19) = v23;
      *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v20 + 32;
      *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = &v19[32 * v18];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v27;
      *(void *)(v12 + 16) = var0;
      *(void *)(v12 + 24) = v10;
      uint64_t v14 = (char *)(v12 + 32);
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v14;
  }
  *((unsigned char *)this + 296) = a2[2].var9;
  *((void *)this + 3OZSpline::reparametrize((uint64_t)this + 8) = a2[2].var10;
  *((void *)this + 39) = [(__CFString *)a2[2].var11 copy];
  *((void *)this + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = a2[2].var12;
  *((void *)this + 4atomic_store(0, (unint64_t *)this + 1) = [(OZChannelTimeConverter *)a2[2].var13 copy];
  long long v25 = a2[2].var6;
  if (*(void *)v25 && *((unsigned char *)v25 + 8))
  {
    PCMutex::unlock(*(PCMutex **)v25);
    *((unsigned char *)v25 + OZSpline::reparametrize((uint64_t)this + 8) = 0;
  }
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B7A125F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::compare(OZChannelBlindData *this, const OZChannelBase *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 34);
  if (*(void *)v3 && !*(unsigned char *)(v3 + 8))
  {
    PCMutex::lock(*(PCMutex **)v3);
    *(unsigned char *)(v3 + OZSpline::reparametrize((uint64_t)this + 8) = 1;
  }
  var6 = a2[2].var6;
  if (*(void *)var6)
  {
    if (!*((unsigned char *)var6 + 8))
    {
      PCMutex::lock(*(PCMutex **)var6);
      *((unsigned char *)var6 + OZSpline::reparametrize((uint64_t)this + 8) = 1;
    }
  }
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v5, a2, a2->var6);
}

void sub_1B7A1284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)&a65);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::writeHeader(OZChannelBlindData *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBlindDataScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 216))(a2, 110, (char *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));

  return OZChannelBase::writeFlags((uint64_t)this, a2, 0);
}

uint64_t non-virtual thunk to'OZChannelBlindData::writeHeader(OZChannelBlindData *this, PCSerializerWriteStream *a2)
{
  return OZChannelBlindData::writeHeader((OZChannelBlindData *)((char *)this - 16), a2);
}

void OZChannelBlindData::writeBody(OZChannelBlindData *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t v6 = (PCMutex *)((char *)this + 176);
  BOOL v29 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v30 = 1;
  if (a3) {
    OZChannelBase::writeFlags((uint64_t)this, a2, 1);
  }
  uint64_t v8 = *((void *)this + 19);
  uint64_t v7 = *((void *)this + 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, unint64_t))(*(void *)a2 + 56))(a2, (unint64_t)(v7 - v8) >> 5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if (*((unsigned char *)this + 336))
  {
    *((unsigned char *)this + 336) = 0;
    uint64_t v10 = *((void *)this + 45);
    for (uint64_t i = *((void *)this + 46); i != v10; PCString::~PCString((PCString *)(i - 8)))
      ;
    *((void *)this + 46) = v10;
    for (uint64_t j = *((void *)this + 19); j != *((void *)this + 20); j += 32)
    {
      unint64_t v12 = *(void **)(j + 24);
      PCAsciiStream::PCAsciiStream((PCAsciiStream *)v28);
      PCAsciiStream::write((PCAsciiStream *)v28, (unsigned char *)[v12 bytes], objc_msgSend(v12, "length"));
      PCAsciiStream::close((PCAsciiStream *)v28);
      PCAsciiStream::getString((PCAsciiStream *)v28, &v27);
      std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 45, &v27);
      PCString::~PCString(&v27);
      PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v28);
    }
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v28);
    PCAsciiStream::write((PCAsciiStream *)v28, (unsigned char *)[*((id *)this + 35) bytes], objc_msgSend(*((id *)this + 35), "length"));
    PCAsciiStream::close((PCAsciiStream *)v28);
    PCAsciiStream::getString((PCAsciiStream *)v28, &v27);
    PCString::set((PCString *)this + 43, &v27);
    PCString::~PCString(&v27);
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)&v27);
    unint64_t v13 = (void *)*((void *)this + 36);
    if (!v13) {
      unint64_t v13 = (void *)*((void *)this + 35);
    }
    PCAsciiStream::write((PCAsciiStream *)&v27, (unsigned char *)[v13 bytes], objc_msgSend(v13, "length"));
    PCAsciiStream::close((PCAsciiStream *)&v27);
    PCAsciiStream::getString((PCAsciiStream *)&v27, &v26);
    PCString::set((PCString *)this + 44, &v26);
    PCString::~PCString(&v26);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&v27);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v28);
  }
  uint64_t v14 = (long long *)*((void *)this + 19);
  if (v14 == *((long long **)this + 20))
  {
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v16 = (PCString *)*((void *)this + 45);
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
      long long v17 = *v14;
      uint64_t v25 = *((void *)v14 + 2);
      long long v24 = v17;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
      (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v24);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      PCString::PCString(&v23, v16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v23);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      PCString::~PCString(&v23);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      v15 += PCString::size(v16++);
      v14 += 2;
    }
    while (v14 != *((long long **)this + 20));
  }
  PCString::PCString(&v22, (const PCString *)this + 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v22);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v22);
  PCString::PCString(&v21, (const PCString *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v21);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v21);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (v15 <= 0x80000 && PCString::size((PCString *)this + 44) <= 0x80000)
  {
    BOOL v20 = 0;
    if (!v6) {
      return;
    }
    goto LABEL_25;
  }
  uint64_t v19 = *((void *)this + 45);
  for (uint64_t k = *((void *)this + 46); k != v19; PCString::~PCString((PCString *)(k - 8)))
    ;
  *((void *)this + 46) = v19;
  PCString::clear((PCString *)this + 44);
  *((unsigned char *)this + 336) = 1;
  uint64_t v6 = v29;
  BOOL v20 = v30 == 0;
  if (v29)
  {
LABEL_25:
    if (!v20) {
      PCMutex::unlock(v6);
    }
  }
}

void sub_1B7A12F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, PCString a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19, PCString a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  PCString::~PCString(&a19);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a20);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a31);
  PCLockSentry<PCMutex>::~PCLockSentry(v31 - 80);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZChannelBlindData::writeBody(OZChannelBlindData *this, PCSerializerWriteStream *a2, int a3)
{
}

uint64_t OZChannelBlindData::parseBegin(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelBlindData::parseBegin(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelBlindData::parseEnd(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  if (*((void *)this + 36) && objc_msgSend(*((id *)this + 35), "isEqualToData:"))
  {

    *((void *)this + 36) = 0;
  }
  return 1;
}

uint64_t non-virtual thunk to'OZChannelBlindData::parseEnd(OZChannelBlindData *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelBlindData::parseElement(OZChannelBlindData *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v20 = 0;
  PCSharedCount::PCSharedCount(&v19);
  int v6 = *((_DWORD *)a3 + 2);
  if (*((_DWORD *)a2 + 26) > 4u)
  {
    switch(v6)
    {
      case 1:
        PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20);
        break;
      case 2:
        goto LABEL_10;
      case 3:
        PCSerializerReadStream::getAsFigTime((uint64_t)a2, (uint64_t)a3, (uint64_t)&v17);
        *(_OWORD *)((char *)this + 24OZSpline::reparametrize((uint64_t)this + 8) = v17;
        *((void *)this + 33) = v18;
        break;
      case 4:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v15, (const PCString *)&v19);
        v8.var0 = (__CFString *)&v15;
        OZChannelBlindData::setData(this, v8);
        id v9 = &v15;
        goto LABEL_15;
      case 5:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v14, (const PCString *)&v19);
        v10.var0 = (__CFString *)&v14;
        OZChannelBlindData::setDefaultData(this, v10);
        id v9 = &v14;
        goto LABEL_15;
      case 6:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19);
        PCString::PCString(&v13, (const PCString *)&v19);
        v11.var0 = (__CFString *)&v13;
        OZChannelBlindData::setValueData(this, v11);
        id v9 = &v13;
LABEL_15:
        PCString::~PCString(v9);
        break;
      default:
        if (v6 == 110)
        {
LABEL_10:
          OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
        }
        else if (v6 == 112)
        {
          unint64_t v16 = 0;
          if ((*(unsigned int (**)(PCStreamElement *, unint64_t *))(*(void *)a3 + 48))(a3, &v16)) {
            OZChannelBase::setFlags((OZChannelBase *)this, v16);
          }
        }
        break;
    }
  }
  else if (v6 == 110)
  {
    (*(void (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(void *)a3 + 96))(a3, 114, &v19);
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)((char *)this + 24OZSpline::reparametrize((uint64_t)this + 8) = *MEMORY[0x1E4F1FA48];
    *((void *)this + 33) = *(void *)(v7 + 16);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
  }
  PCString::~PCString((PCString *)&v19);
  return 1;
}

void sub_1B7A132E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, __int16 a11, char a12, char a13, PCString a14)
{
  PCString::~PCString(&a10);
  PCString::~PCString((PCString *)(v14 - 48));
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setData(OZChannelBlindData *this, PCString a2)
{
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v31);
  unsigned int v4 = PCString::size((PCString *)a2.var0);
  uint64_t v5 = malloc_type_malloc(v4, 0x2956BA2EuLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v31, CStr);
  unsigned int v7 = PCString::size((PCString *)a2.var0);
  unint64_t v8 = PCAsciiStream::read((PCAsciiStream *)v31, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v31);
  free(CStr);
  id v9 = (void *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v5 length:v8];
  BOOL v29 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v30 = 1;
  *((unsigned char *)this + 336) = 1;
  if (v9)
  {
    id v10 = v9;
    long long v27 = *(_OWORD *)((char *)this + 248);
    uint64_t v28 = *((void *)this + 33);
    (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, char *))(*(void *)this + 336))(&v26, this, (char *)this + 248);
    OZChannel::addKeypointAt((OZChannel *)this, &v26);
    unint64_t v11 = *((void *)this + 21);
    unint64_t v12 = *((void *)this + 20);
    if (v12 >= v11)
    {
      uint64_t v14 = *((void *)this + 19);
      uint64_t v15 = (uint64_t)(v12 - v14) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - v14;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18) {
        PCSharedCount v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v18);
      }
      else {
        PCSharedCount v19 = 0;
      }
      int v20 = &v19[32 * v15];
      PCString v21 = &v19[32 * v18];
      *(_OWORD *)int v20 = v27;
      *((void *)v20 + OZChannelEnum::~OZChannelEnum(this - 2) = v28;
      *((void *)v20 + 3) = v9;
      PCString v13 = v20 + 32;
      PCString v23 = (char *)*((void *)this + 19);
      PCString v22 = (char *)*((void *)this + 20);
      if (v22 != v23)
      {
        do
        {
          long long v24 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v20 - OZChannelEnum::~OZChannelEnum(this - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v20 - atomic_store(0, (unint64_t *)this + 1) = v24;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22 != v23);
        PCString v22 = (char *)*((void *)this + 19);
      }
      *((void *)this + 19) = v20;
      *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v13;
      *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = v21;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v27;
      *(void *)(v12 + 16) = v28;
      *(void *)(v12 + 24) = v9;
      PCString v13 = (char *)(v12 + 32);
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v13;
  }
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v31);
  return 0;
}

void sub_1B7A1355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setDefaultData(OZChannelBlindData *this, PCString a2)
{
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v14);
  unsigned int v4 = PCString::size((PCString *)a2.var0);
  uint64_t v5 = malloc_type_malloc(v4, 0x6BC5F659uLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v14, CStr);
  unsigned int v7 = PCString::size((PCString *)a2.var0);
  unint64_t v8 = PCAsciiStream::read((PCAsciiStream *)v14, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v14);
  free(CStr);
  uint64_t v9 = (void *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v5 length:v8];
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((unsigned char *)this + 336) = 1;
  if (!OZChannelBase::testFlag((OZChannelBase *)this, 0x200000000))
  {
LABEL_8:
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  id v10 = (void *)*((void *)this + 35);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (!v10)
  {
LABEL_7:
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
    goto LABEL_8;
  }
  if (([v10 isEqualToData:v9] & 1) == 0) {
    OZChannelBase::setFlag((OZChannelBase *)this, 0x100000000, 1);
  }
LABEL_9:
  uint64_t v11 = (void *)*((void *)this + 35);
  if (v11) {

  }
  id v12 = v9;
  *((void *)this + 35) = v9;
LABEL_12:
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v14);
  return 0;
}

void sub_1B7A136E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::setValueData(OZChannelBlindData *this, PCString a2)
{
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v13);
  unsigned int v4 = PCString::size((PCString *)a2.var0);
  uint64_t v5 = malloc_type_malloc(v4, 0xAD9AE79EuLL);
  CStr = PCString::createCStr((PCString *)a2.var0);
  PCAsciiStream::open((PCAsciiStream *)v13, CStr);
  unsigned int v7 = PCString::size((PCString *)a2.var0);
  unint64_t v8 = PCAsciiStream::read((PCAsciiStream *)v13, v5, v7);
  PCAsciiStream::close((PCAsciiStream *)v13);
  free(CStr);
  uint64_t v9 = (void *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v5 length:v8];
  PCMutex::lock((PCMutex *)((char *)this + 176));
  *((unsigned char *)this + 336) = 1;
  if (v9)
  {
    id v10 = (void *)*((void *)this + 36);
    if (v10) {

    }
    id v11 = v9;
    *((void *)this + 36) = v9;
  }
  PCMutex::unlock((PCMutex *)((char *)this + 176));
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v13);
  return 0;
}

void sub_1B7A13814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZChannelBlindData::parseElement(OZChannelBlindData *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZChannelBlindData::calcHashForState(OZChannelBlindData *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  uint64_t result = OZChannelBase::testFlag((OZChannelBase *)this, 128);
  if ((result & 1) == 0)
  {
    unsigned int v7 = (PCMutex *)((char *)this + 176);
    uint64_t v14 = (char *)this + 176;
    PCMutex::lock((PCMutex *)((char *)this + 176));
    char v15 = 1;
    OZChannel::calcHashForState((OZChannel *)this, a2, a3);
    PluginDataPtr = OZChannelBlindData::getPluginDataPtr(this, a3);
    id v9 = OZChannelBlindData::encodeObjectToData(this, PluginDataPtr);
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v13);
    PCSharedCount::PCSharedCount(&v12);
    PCAsciiStream::write((PCAsciiStream *)v13, (unsigned char *)[v9 bytes], objc_msgSend(v9, "length"));
    PCAsciiStream::close((PCAsciiStream *)v13);
    PCAsciiStream::getString((PCAsciiStream *)v13, &v11);
    PCString::set((PCString *)&v12, &v11);
    PCString::~PCString(&v11);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBlindDataScope);
    PCString::PCString(&v10, (const PCString *)&v12);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v10);
    PCSerializerWriteStream::popScope((uint64_t)a2);

    PCString::~PCString((PCString *)&v12);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v13);
    return PCMutex::unlock(v7);
  }
  return result;
}

void sub_1B7A13A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, char a12)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a12);
  PCLockSentry<PCMutex>::~PCLockSentry(v12 - 48);
  _Unwind_Resume(a1);
}

NSData *OZChannelBlindData::getPluginDataPtr(OZChannelBlindData *this, const CMTime *a2)
{
  unsigned int v4 = (PCMutex *)((char *)this + 176);
  uint64_t v28 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v29 = 1;
  memset(&v27, 0, sizeof(v27));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(void *)this + 328))(&v27, this, a2);
  if ((*(unsigned int (**)(OZChannelBlindData *, void))(*(void *)this + 552))(this, 0))
  {
    uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v27, 1);
    int v6 = Keyframe;
    unsigned int v7 = (long long *)*((void *)this + 19);
    unint64_t v8 = Keyframe - 2;
    if (v7 == Keyframe) {
      id v9 = (long long *)*((void *)this + 19);
    }
    else {
      id v9 = Keyframe - 2;
    }
    PCString v10 = (NSData *)*((void *)v9 + 3);
    if (*((long long **)this + 20) != Keyframe)
    {
      PCString v11 = OZChannelBlindData::decodeObjectFromData(this, *((NSData **)Keyframe + 3));
      if (!v11) {
        objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"Unable to unarchive data" userInfo:0]);
      }
      CMTime time1 = v27;
      CMTimeEpoch v12 = *((void *)v6 + 2);
      *(_OWORD *)&time2.CMTimeValue value = *v6;
      time2.CMTimeEpoch epoch = v12;
      if (!CMTimeCompare(&time1, &time2))
      {
LABEL_19:
        BOOL v21 = 0;
        if (!v4) {
          return v11;
        }
        goto LABEL_20;
      }
      if (v7 != v6)
      {
        PCString v13 = OZChannelBlindData::decodeObjectFromData(this, *((NSData **)v9 + 3));
        if (!v13) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"Unable to unarchive data" userInfo:0]);
        }
        CMTime time1 = v27;
        CMTimeEpoch v14 = *((void *)v8 + 2);
        *(_OWORD *)&time2.CMTimeValue value = *v8;
        time2.CMTimeEpoch epoch = v14;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
        long long v15 = *v6;
        time1.CMTimeEpoch epoch = *((void *)v6 + 2);
        *(_OWORD *)&time1.CMTimeValue value = v15;
        long long v16 = *v8;
        time2.CMTimeEpoch epoch = *((void *)v8 + 2);
        *(_OWORD *)&time2.CMTimeValue value = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v24);
        operator/(&v25, (uint64_t)v24, (uint64_t)&time);
        double Seconds = CMTimeGetSeconds(&time);
        float v18 = Seconds;
        if (*((unsigned char *)this + 296))
        {
          float v19 = Seconds;
          uint64_t v20 = (*((uint64_t (**)(NSData *, NSData *, void, float))this + 38))(v13, v11, *((void *)this + 39), v19);
LABEL_18:
          PCString v11 = (NSData *)v20;
          goto LABEL_19;
        }
        if (objc_opt_respondsToSelector())
        {
          *(float *)&double v22 = v18;
          uint64_t v20 = [(NSData *)v13 interpolateBetween:v11 withWeight:v22];
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
    PCString v10 = (NSData *)*((void *)this + 36);
    if (!v10) {
      PCString v10 = (NSData *)*((void *)this + 35);
    }
  }
  PCString v11 = OZChannelBlindData::decodeObjectFromData(this, v10);
  unsigned int v4 = v28;
  BOOL v21 = v29 == 0;
  if (!v28) {
    return v11;
  }
LABEL_20:
  if (!v21) {
    PCMutex::unlock(v4);
  }
  return v11;
}

void sub_1B7A13D58(void *a1)
{
  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  NSLog(&cfstr_UnableToUnarch_1.isa);
  objc_end_catch();
  JUMPOUT(0x1B7A13C74);
}

void sub_1B7A13DAC()
{
}

void sub_1B7A13DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZChannelBlindData::setInterpolateContext(OZChannelBlindData *this, NSData *a2)
{
  unsigned int v4 = (void *)*((void *)this + 39);
  *((void *)this + 39) = [(NSData *)a2 copy];

  id v5 = (id)*((void *)this + 41);
  *((void *)this + 4atomic_store(0, (unint64_t *)this + 1) = [(NSData *)a2 copy];
}

long long *OZChannelBlindData::findKeyframe(OZChannelBlindData *this, const CMTime *a2, int a3)
{
  id v5 = (long long *)*((void *)this + 19);
  int v6 = (long long *)*((void *)this + 20);
  if (v6 != v5)
  {
    unint64_t v7 = ((char *)v6 - (char *)v5) >> 5;
    do
    {
      unint64_t v8 = &v5[2 * (v7 >> 1)];
      long long v9 = *v8;
      time1.CMTimeEpoch epoch = *((void *)v8 + 2);
      *(_OWORD *)&time1.CMTimeValue value = v9;
      CMTime v13 = *a2;
      int32_t v10 = CMTimeCompare(&time1, &v13);
      if (v10 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v10 < 0) {
        id v5 = v8 + 2;
      }
    }
    while (v7);
  }
  if (v5 == v6) {
    return v6;
  }
  if (a3 != 1)
  {
    if (a3) {
      return v6;
    }
    long long v11 = *v5;
    time1.CMTimeEpoch epoch = *((void *)v5 + 2);
    *(_OWORD *)&time1.CMTimeValue value = v11;
    CMTime v13 = *a2;
    if (CMTimeCompare(&time1, &v13)) {
      return v6;
    }
  }
  return v5;
}

NSData *OZChannelBlindData::decodeObjectFromData(OZChannelBlindData *this, NSData *a2)
{
  uint64_t v2 = a2;
  if (*((unsigned char *)this + 296))
  {
    id v8 = 0;
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:a2 error:&v8];
    if (!v3)
    {
      unsigned int v4 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v5 = [v8 localizedFailureReason];
      [v4 raise:*MEMORY[0x1E4F1C4A0], @"%@", v5 format];
    }
    int v6 = (void *)[v3 decodeObjectOfClass:objc_opt_class() forKey:@"DataIsLegacy"];
    if (v6)
    {
      if (([v6 BOOLValue] & 1) == 0) {
        uint64_t v2 = (NSData *)[v3 decodeObjectOfClass:objc_opt_class() forKey:@"BlindDataObject"];
      }
    }

    return v2;
  }
  else
  {
    return (NSData *)OZChannelBlindData::legacyDecodeObjectFromData(this, a2);
  }
}

void sub_1B7A1404C(void *a1)
{
  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  [0 error];
  NSLog(&cfstr_UnableToUnarch_2.isa);
  objc_end_catch();
  JUMPOUT(0x1B7A14004);
}

void sub_1B7A14094(_Unwind_Exception *a1)
{
}

uint64_t OZChannelBlindData::setPluginDataPtr(OZChannelBlindData *this, const CMTime *a2, void *a3, char a4, int a5, char a6)
{
  memset(&v37, 0, sizeof(v37));
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 328))(&v37);
  if ((a4 & 1) == 0) {
    (*(void (**)(OZChannelBlindData *, uint64_t))(*(void *)this + 464))(this, 1);
  }
  long double v35 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v36 = 1;
  *((unsigned char *)this + 336) = 1;

  *((void *)this + 36) = 0;
  if (((*(uint64_t (**)(OZChannelBlindData *, void))(*(void *)this + 552))(this, 0) & 1) != 0
    || OZChannel::isAnimated((OZChannel *)this))
  {
    if (a3)
    {
      uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v37, 1);
      id v13 = OZChannelBlindData::encodeObjectToData(this, a3);
      long long v33 = *(_OWORD *)&v37.value;
      *(void *)&long long v34 = v37.epoch;
      *((void *)&v34 + atomic_store(0, (unint64_t *)this + 1) = v13;
      CMTimeEpoch v14 = (char **)((char *)this + 152);
      long long v15 = (long long *)*((void *)this + 20);
      if (v15 == Keyframe)
      {
        unint64_t v17 = *((void *)this + 21);
        if (v17 <= (unint64_t)Keyframe)
        {
          uint64_t v21 = ((char *)v15 - *v14) >> 5;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)*v14;
          if (v23 >> 4 > v22) {
            unint64_t v22 = v23 >> 4;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24) {
            long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v24);
          }
          else {
            long long v25 = 0;
          }
          CMTime v26 = (long long *)&v25[32 * v21];
          CMTime v27 = &v25[32 * v24];
          long long v28 = v34;
          *CMTime v26 = v33;
          v26[1] = v28;
          float v19 = v26 + 2;
          char v30 = (char *)*((void *)this + 19);
          char v29 = (char *)*((void *)this + 20);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *((_OWORD *)v29 - 1);
              *(v26 - OZChannelEnum::~OZChannelEnum(this - 2) = *((_OWORD *)v29 - 2);
              *(v26 - atomic_store(0, (unint64_t *)this + 1) = v31;
              v26 -= 2;
              v29 -= 32;
            }
            while (v29 != v30);
            char v29 = *v14;
          }
          *((void *)this + 19) = v26;
          *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v19;
          *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = v27;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          long long v18 = v34;
          long long *Keyframe = v33;
          Keyframe[1] = v18;
          float v19 = Keyframe + 2;
        }
        *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v19;
        if (a5)
        {
          (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(void *)this + 336))(&time1, this, &v37);
          OZChannel::addKeypointAt((OZChannel *)this, &time1);
        }
      }
      else
      {
        long long v16 = *Keyframe;
        time1.CMTimeEpoch epoch = *((void *)Keyframe + 2);
        *(_OWORD *)&time1.CMTimeValue value = v16;
        CMTime time2 = v37;
        if (CMTimeCompare(&time1, &time2))
        {
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)Keyframe, (char *)&v33);
          if (a5)
          {
            (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(void *)this + 336))(&time1, this, &v37);
            OZChannel::addKeypointAt((OZChannel *)this, &time1);
          }
        }
        else if (a6)
        {
          uint64_t v20 = (void *)*((void *)Keyframe + 3);
          *((void *)Keyframe + 3) = v13;
        }
        else
        {
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)Keyframe + 32, (char *)&v33);
        }
      }
    }
    else
    {
      (*(void (**)(OZChannelBlindData *, const CMTime *))(*(void *)this + 608))(this, a2);
    }
  }
  else
  {
    *((void *)this + 36) = OZChannelBlindData::encodeObjectToData(this, a3);
  }
  return PCMutex::unlock((PCMutex *)((char *)this + 176));
}

void sub_1B7A14434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<CMTime,void *>>::insert(char **a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  int v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 5;
  long long v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    unint64_t v18 = ((uint64_t)(v5 - (void)v6) >> 5) + 1;
    if (v18 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v10 - (void)v6;
    if (v20 >> 4 > v18) {
      unint64_t v18 = v20 >> 4;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v18;
    }
    if (v21) {
      unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v21);
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v24 = &v22[32 * v8];
    long long v25 = &v22[32 * v21];
    if (v8 == v21)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v7 >> 4;
        }
        double v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v11, v31);
        unint64_t v24 = &v32[32 * (v31 >> 2)];
        long long v25 = &v32[32 * v33];
        if (v22)
        {
          long long v34 = &v32[32 * v33];
          operator delete(v22);
          long long v25 = v34;
        }
      }
      else
      {
        unint64_t v26 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v26 = v8 + 1;
        }
        v24 -= 32 * (v26 >> 1);
      }
    }
    long long v35 = *((_OWORD *)v3 + 1);
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v3;
    *((_OWORD *)v24 + atomic_store(0, (unint64_t *)this + 1) = v35;
    char v36 = v24 + 32;
    CMTime v37 = *a1;
    double v38 = v24;
    if (*a1 != v9)
    {
      double v39 = v9;
      double v40 = v24;
      do
      {
        double v38 = v40 - 32;
        long long v41 = *((_OWORD *)v39 - 1);
        *((_OWORD *)v40 - OZChannelEnum::~OZChannelEnum(this - 2) = *((_OWORD *)v39 - 2);
        *((_OWORD *)v40 - atomic_store(0, (unint64_t *)this + 1) = v41;
        v39 -= 32;
        v40 -= 32;
      }
      while (v39 != v37);
    }
    for (uint64_t i = a1[1]; v9 != i; v36 += 32)
    {
      long long v43 = *(_OWORD *)v9;
      long long v44 = *((_OWORD *)v9 + 1);
      v9 += 32;
      *(_OWORD *)char v36 = v43;
      *((_OWORD *)v36 + atomic_store(0, (unint64_t *)this + 1) = v44;
    }
    double v45 = *a1;
    *a1 = v38;
    a1[1] = v36;
    a1[2] = v25;
    if (v45) {
      operator delete(v45);
    }
    return v24;
  }
  else if (v9 == (char *)v5)
  {
    long long v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)long long v9 = *(_OWORD *)a3;
    *((_OWORD *)v9 + atomic_store(0, (unint64_t *)this + 1) = v23;
    a1[1] = v9 + 32;
  }
  else
  {
    CMTimeEpoch v12 = v9 + 32;
    unint64_t v13 = v5 - 32;
    if (v5 < 0x20)
    {
      long long v15 = a1[1];
    }
    else
    {
      CMTimeEpoch v14 = (long long *)(v5 - 32);
      long long v15 = a1[1];
      do
      {
        long long v16 = *v14;
        long long v17 = v14[1];
        v14 += 2;
        *(_OWORD *)long long v15 = v16;
        *((_OWORD *)v15 + atomic_store(0, (unint64_t *)this + 1) = v17;
        v15 += 32;
      }
      while ((unint64_t)v14 < v5);
    }
    a1[1] = v15;
    if ((_OWORD *)v5 != v12)
    {
      uint64_t v27 = 32 * ((uint64_t)(v5 - (void)v12) >> 5);
      uint64_t v28 = (uint64_t)&v6[32 * v8 - 8];
      do
      {
        long long v29 = *(_OWORD *)(v28 + v27 - 24);
        *(void *)(v13 + 16) = *(void *)(v28 + v27 - 8);
        *(_OWORD *)unint64_t v13 = v29;
        *(void *)(v13 + 24) = *(void *)(v28 + v27);
        v13 -= 32;
        v27 -= 32;
      }
      while (v27);
    }
    if (v9 <= a3) {
      uint64_t v3 = &a3[32 * (a1[1] > a3)];
    }
    long long v30 = *(_OWORD *)v3;
    *((void *)v9 + OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v9 = v30;
    *(void *)&v6[32 * v8 + 24] = *((void *)v3 + 3);
  }
  return v9;
}

void sub_1B7A146D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBlindData::isModified(OZChannelBlindData *this)
{
  if (*((void *)this + 36)) {
    return 1;
  }
  else {
    return OZChannel::isModified((OZChannel *)this);
  }
}

BOOL OZChannelBlindData::hasKeypoints(OZChannelBlindData *this)
{
  return *((void *)this + 20) != *((void *)this + 19);
}

BOOL OZChannelBlindData::hasMoreThanOneKeypoint(OZChannelBlindData *this)
{
  return *((void *)this + 20) - *((void *)this + 19) > 0x20uLL;
}

BOOL OZChannelBlindData::hasKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  unsigned int v4 = (PCMutex *)((char *)this + 176);
  long long v17 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v18 = 1;
  long long v15 = 0uLL;
  CMTimeEpoch v16 = 0;
  (*(void (**)(long long *__return_ptr, OZChannelBlindData *, const CMTime *))(*(void *)this + 328))(&v15, this, a2);
  int v6 = (long long *)*((void *)this + 19);
  unint64_t v5 = (long long *)*((void *)this + 20);
  *(_OWORD *)&v14.CMTimeValue value = v15;
  v14.CMTimeEpoch epoch = v16;
  if (v5 == v6) {
    goto LABEL_11;
  }
  unint64_t v7 = ((char *)v5 - (char *)v6) >> 5;
  do
  {
    uint64_t v8 = &v6[2 * (v7 >> 1)];
    long long v9 = *v8;
    time1.CMTimeEpoch epoch = *((void *)v8 + 2);
    *(_OWORD *)&time1.CMTimeValue value = v9;
    CMTime time2 = v14;
    int32_t v10 = CMTimeCompare(&time1, &time2);
    if (v10 >= 0) {
      v7 >>= 1;
    }
    else {
      v7 += ~(v7 >> 1);
    }
    if (v10 < 0) {
      int v6 = v8 + 2;
    }
  }
  while (v7);
  if (v6 == v5)
  {
LABEL_11:
    BOOL v12 = 0;
  }
  else
  {
    CMTime time1 = v14;
    long long v11 = *v6;
    time2.CMTimeEpoch epoch = *((void *)v6 + 2);
    *(_OWORD *)&time2.CMTimeValue value = v11;
    BOOL v12 = CMTimeCompare(&time1, &time2) >= 0;
  }
  PCMutex::unlock(v4);
  return v12;
}

void sub_1B7A14888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::addKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  uint64_t result = (*(uint64_t (**)(OZChannelBlindData *))(*(void *)this + 512))(this);
  if (result)
  {
    OZChannel::addKeypointAt((OZChannel *)this, a2);
    memset(&v45, 0, sizeof(v45));
    (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(void *)this + 328))(&v45, this, a2);
    long long v43 = (char *)this + 176;
    PCMutex::lock((PCMutex *)((char *)this + 176));
    char v44 = 1;
    *((unsigned char *)this + 336) = 1;
    uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v45, 1);
    int v6 = Keyframe;
    unint64_t v7 = (long long **)((char *)this + 152);
    if (*((long long **)this + 20) != Keyframe)
    {
      long long v8 = *Keyframe;
      v36.CMTimeEpoch epoch = *((void *)Keyframe + 2);
      *(_OWORD *)&v36.CMTimeValue value = v8;
      CMTime time2 = v45;
      if (CMTimeCompare(&v36, &time2))
      {
        if (*((long long **)this + 19) == v6) {
          long long v9 = (CMTime *)*((void *)this + 19);
        }
        else {
          long long v9 = (CMTime *)(v6 - 2);
        }
        CMTimeValue value = (NSData *)v9[1].value;
        OZChannelBlindData::decodeObjectFromData(this, value);
        if (objc_opt_respondsToSelector())
        {
          if (*v7 == v6)
          {
            id v16 = *((id *)v6 + 3);
          }
          else
          {
            *(_OWORD *)&v42.CMTimeValue value = *v6;
            long long v11 = (NSData *)*((void *)v6 + 3);
            v42.CMTimeEpoch epoch = *((void *)v6 + 2);
            CMTime v41 = *v9;
            CMTime v36 = v45;
            CMTime time2 = v41;
            PC_CMTimeSaferSubtract(&v36, &time2, (uint64_t)&v39);
            CMTime v36 = v42;
            CMTime time2 = v41;
            PC_CMTimeSaferSubtract(&v36, &time2, (uint64_t)v38);
            operator/(&v39, (uint64_t)v38, (uint64_t)&time);
            double Seconds = CMTimeGetSeconds(&time);
            unint64_t v13 = OZChannelBlindData::decodeObjectFromData(this, v11);
            CMTime v14 = OZChannelBlindData::decodeObjectFromData(this, value);
            *(float *)&double v15 = Seconds;
            id v16 = OZChannelBlindData::encodeObjectToData(this, (void *)[(NSData *)v14 interpolateBetween:v13 withWeight:v15]);
          }
          CMTime v36 = v45;
          id v37 = v16;
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)v6, (char *)&v36);
        }
        else
        {
          *(_OWORD *)&v36.CMTimeValue value = *(_OWORD *)&v45.value;
          float v19 = (void *)*((void *)v6 + 3);
          v36.CMTimeEpoch epoch = v45.epoch;
          id v37 = v19;
          id v20 = v19;
          std::vector<std::pair<CMTime,void *>>::insert((char **)this + 19, (char *)v6, (char *)&v36);
        }
      }
      return PCMutex::unlock((PCMutex *)((char *)this + 176));
    }
    if (*v7 == Keyframe)
    {
      char v18 = (void *)*((void *)this + 36);
      if (v18) {
        goto LABEL_15;
      }
      long long v17 = (void **)((char *)this + 280);
    }
    else
    {
      long long v17 = (void **)Keyframe - 1;
    }
    char v18 = *v17;
LABEL_15:
    id v21 = v18;
    CMTime v36 = v45;
    unint64_t v22 = *((void *)this + 21);
    unint64_t v23 = *((void *)this + 20);
    if (v23 >= v22)
    {
      uint64_t v26 = (uint64_t)(v23 - (void)*v7) >> 5;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v22 - (void)*v7;
      if (v28 >> 4 > v27) {
        unint64_t v27 = v28 >> 4;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)this + 168, v29);
      }
      else {
        long long v30 = 0;
      }
      unint64_t v31 = (CMTime *)&v30[32 * v26];
      double v32 = &v30[32 * v29];
      *unint64_t v31 = v36;
      v31[1].CMTimeValue value = (CMTimeValue)v21;
      p_int32_t timescale = &v31[1].timescale;
      long long v34 = (long long *)*((void *)this + 19);
      uint64_t v33 = (long long *)*((void *)this + 20);
      if (v33 != v34)
      {
        do
        {
          long long v35 = *(v33 - 1);
          *(_OWORD *)&v31[-2].CMTimeEpoch epoch = *(v33 - 2);
          *(_OWORD *)&v31[-1].int32_t timescale = v35;
          unint64_t v31 = (CMTime *)((char *)v31 - 32);
          v33 -= 2;
        }
        while (v33 != v34);
        uint64_t v33 = *v7;
      }
      *((void *)this + 19) = v31;
      *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = p_timescale;
      *((void *)this + 2atomic_store(0, (unint64_t *)this + 1) = v32;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      CMTimeEpoch epoch = v45.epoch;
      *(_OWORD *)unint64_t v23 = *(_OWORD *)&v45.value;
      *(void *)(v23 + 16) = epoch;
      *(void *)(v23 + 24) = v21;
      p_int32_t timescale = (CMTimeScale *)(v23 + 32);
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = p_timescale;
    return PCMutex::unlock((PCMutex *)((char *)this + 176));
  }
  return result;
}

void sub_1B7A14C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t OZChannelBlindData::deleteKeypointAt(OZChannelBlindData *this, const CMTime *a2)
{
  unsigned int v4 = (PCMutex *)((char *)this + 176);
  unint64_t v13 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v14 = 1;
  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(void *)this + 328))(&v12, this, a2);
  *((unsigned char *)this + 336) = 1;
  uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v12, 0);
  int v6 = (long long *)*((void *)this + 20);
  if (v6 != Keyframe)
  {
    if ((long long *)((char *)v6 - *((void *)this + 19)) == (long long *)32)
    {

      *((void *)this + 36) = *((id *)Keyframe + 3);
    }

    unint64_t v7 = (long long *)*((void *)this + 20);
    if (Keyframe + 2 != v7)
    {
      do
      {
        long long v8 = Keyframe + 2;
        long long *Keyframe = Keyframe[2];
        uint64_t v9 = *((void *)Keyframe + 7);
        *((void *)Keyframe + OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)Keyframe + 6);
        *((void *)Keyframe + 3) = v9;
        int32_t v10 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v10 != v7);
      uint64_t Keyframe = v8;
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = Keyframe;
    OZChannel::deleteKeypointAt((OZChannel *)this, a2);
  }
  return PCMutex::unlock(v4);
}

void sub_1B7A14DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::previousKeypoint(OZChannelBlindData *this, CMTime *a2)
{
  unsigned int v4 = (PCMutex *)((char *)this + 176);
  id v16 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v17 = 1;
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(void *)this + 328))(&v15, this, a2);
  uint64_t v5 = *((void *)this + 19);
  if (*((void *)this + 20) == v5) {
    goto LABEL_14;
  }
  CMTime time1 = v15;
  CMTimeEpoch v6 = *(void *)(v5 + 16);
  *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)v5;
  time2.CMTimeEpoch epoch = v6;
  if (CMTimeCompare(&time1, &time2) < 1) {
    goto LABEL_14;
  }
  unint64_t v7 = (long long *)*((void *)this + 19);
  uint64_t v8 = *((void *)this + 20) - (void)v7;
  if (!v8) {
    goto LABEL_15;
  }
  unint64_t v9 = v8 >> 5;
  do
  {
    int32_t v10 = &v7[2 * (v9 >> 1)];
    long long v11 = *v10;
    time1.CMTimeEpoch epoch = *((void *)v10 + 2);
    *(_OWORD *)&time1.CMTimeValue value = v11;
    CMTime time2 = v15;
    int32_t v12 = CMTimeCompare(&time1, &time2);
    if (v12 >= 0) {
      v9 >>= 1;
    }
    else {
      v9 += ~(v9 >> 1);
    }
    if (v12 < 0) {
      unint64_t v7 = v10 + 2;
    }
  }
  while (v9);
  if (*((long long **)this + 19) == v7)
  {
LABEL_14:
    LOBYTE(vOZSpline::reparametrize((uint64_t)this + 8) = 0;
LABEL_15:
    uint64_t v13 = 0;
    if (!v4) {
      return v13;
    }
    goto LABEL_16;
  }
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, long long *))(*(void *)this + 336))(&time1, this, v7 - 2);
  *a2 = time1;
  unsigned int v4 = v16;
  LOBYTE(vOZSpline::reparametrize((uint64_t)this + 8) = v17 == 0;
  uint64_t v13 = 1;
  if (!v16) {
    return v13;
  }
LABEL_16:
  if ((v8 & 1) == 0) {
    PCMutex::unlock(v4);
  }
  return v13;
}

void sub_1B7A14FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::nextKeypoint(OZChannelBlindData *this, CMTime *a2)
{
  unsigned int v4 = (PCMutex *)((char *)this + 176);
  uint64_t v13 = (PCMutex *)((char *)this + 176);
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v14 = 1;
  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTime *))(*(void *)this + 328))(&v12, this, a2);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = *((void *)this + 20) - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 5;
    do
    {
      uint64_t v8 = v5 + 32 * (v7 >> 1);
      CMTime time1 = v12;
      CMTimeEpoch v9 = *(void *)(v8 + 16);
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)v8;
      time2.CMTimeEpoch epoch = v9;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        uint64_t v5 = v8 + 32;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
    if (v5 == *((void *)this + 20))
    {
      uint64_t v10 = 0;
      LOBYTE(v6) = 0;
      if (!v4) {
        return v10;
      }
    }
    else
    {
      (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, uint64_t))(*(void *)this + 336))(&time1, this, v5);
      *a2 = time1;
      unsigned int v4 = v13;
      LOBYTE(v6) = v14 == 0;
      uint64_t v10 = 1;
      if (!v13) {
        return v10;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!v4) {
      return v10;
    }
  }
  if ((v6 & 1) == 0) {
    PCMutex::unlock(v4);
  }
  return v10;
}

void sub_1B7A1519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::visibleKeypoints@<X0>(OZChannelBlindData *this@<X0>, CMTimeRange *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (PCMutex *)((char *)this + 176);
  double v77 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v78 = 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  long long v9 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v76.start.CMTimeValue value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v76.start.CMTimeEpoch epoch = v9;
  *(_OWORD *)&v76.duration.int32_t timescale = *(_OWORD *)&a2->duration.timescale;
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, CMTimeRange *))(*(void *)this + 328))(&v75, this, a2);
  v76.CMTime start = v75;
  std::vector<CMTime>::reserve((void **)a4, (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 5);
  double v60 = v8;
  memset(&v75, 0, sizeof(v75));
  CMTimeRange range = v76;
  CMTimeRangeGetEnd(&v75, &range);
  uint64_t v10 = *((void *)this + 19);
  if (v10 != *((void *)this + 20))
  {
    int v11 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    uint64_t v61 = (uint64_t)(a4 + 2);
    while (1)
    {
      CMTimeValue v79 = *(void *)v10;
      CMTimeFlags v12 = *(_DWORD *)(v10 + 12);
      CMTimeScale v80 = *(_DWORD *)(v10 + 8);
      CMTimeEpoch v13 = *(void *)(v10 + 16);
      time1.int32_t timescale = v80;
      time1.flags = v12;
      time1.CMTimeEpoch epoch = v13;
      CMTime time2 = v75;
      time1.CMTimeValue value = v79;
      if (CMTimeCompare(&time1, &time2) < 0) {
        LOBYTE(v1atomic_store(0, (unint64_t *)this + 1) = v12;
      }
      CMTimeRange v71 = v76;
      time.CMTimeValue value = v79;
      time.int32_t timescale = v80;
      time.flags = v12;
      time.CMTimeEpoch epoch = v13;
      if (CMTimeRangeContainsTime(&v71, &time))
      {
        if (a3 && (v11 & 1) != 0)
        {
          CMTimeValue v66 = v79;
          CMTimeScale v67 = v80;
          CMTimeFlags v68 = v12;
          CMTimeEpoch v69 = v13;
          (*(void (**)(long long *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(void *)this + 336))(&v64, this, &v66);
          CMTime v15 = a4[1];
          char v14 = a4[2];
          if (v15 >= v14)
          {
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a4) >> 3);
            unint64_t v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3);
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x555555555555555) {
              unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21) {
              unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v21);
            }
            else {
              unint64_t v22 = 0;
            }
            unint64_t v23 = &v22[24 * v18];
            long long v24 = v64;
            *((void *)v23 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
            *(_OWORD *)unint64_t v23 = v24;
            uint64_t v26 = *a4;
            long long v25 = a4[1];
            unint64_t v27 = v23;
            if (v25 != *a4)
            {
              do
              {
                long long v28 = *(_OWORD *)(v25 - 24);
                *((void *)v27 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v25 - 1);
                *(_OWORD *)(v27 - 24) = v28;
                v27 -= 24;
                v25 -= 24;
              }
              while (v25 != v26);
              long long v25 = *a4;
            }
            char v17 = v23 + 24;
            *a4 = v27;
            a4[1] = v23 + 24;
            a4[2] = &v22[24 * v21];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            long long v16 = v64;
            *((void *)v15 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
            *(_OWORD *)CMTime v15 = v16;
            char v17 = v15 + 24;
          }
          a4[1] = v17;
        }
        CMTimeValue v66 = v79;
        CMTimeScale v67 = v80;
        CMTimeFlags v68 = v12;
        CMTimeEpoch v69 = v13;
        (*(void (**)(long long *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(void *)this + 336))(&v64, this, &v66);
        long long v30 = a4[1];
        unint64_t v29 = a4[2];
        if (v30 >= v29)
        {
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *a4) >> 3);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a4) >> 3);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x555555555555555) {
            unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36) {
            id v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v36);
          }
          else {
            id v37 = 0;
          }
          double v38 = &v37[24 * v33];
          long long v39 = v64;
          *((void *)v38 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
          *(_OWORD *)double v38 = v39;
          CMTime v41 = *a4;
          double v40 = a4[1];
          CMTime v42 = v38;
          if (v40 != *a4)
          {
            do
            {
              long long v43 = *(_OWORD *)(v40 - 24);
              *((void *)v42 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v40 - 1);
              *(_OWORD *)(v42 - 24) = v43;
              v42 -= 24;
              v40 -= 24;
            }
            while (v40 != v41);
            double v40 = *a4;
          }
          double v32 = v38 + 24;
          *a4 = v42;
          a4[1] = v38 + 24;
          a4[2] = &v37[24 * v36];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          long long v31 = v64;
          *((void *)v30 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
          *(_OWORD *)long long v30 = v31;
          double v32 = v30 + 24;
        }
        a4[1] = v32;
      }
      v63.CMTimeValue value = v79;
      v63.int32_t timescale = v80;
      v63.flags = v12;
      v63.CMTimeEpoch epoch = v13;
      CMTime v62 = v75;
      if (CMTimeCompare(&v63, &v62) >= 1) {
        break;
      }
      v10 += 32;
      if (v10 == *((void *)this + 20)) {
        return PCMutex::unlock(v60);
      }
    }
    if (a3 && (v12 & 1) != 0)
    {
      CMTimeValue v66 = v79;
      CMTimeScale v67 = v80;
      CMTimeFlags v68 = v12;
      CMTimeEpoch v69 = v13;
      (*(void (**)(long long *__return_ptr, OZChannelBlindData *, CMTimeValue *))(*(void *)this + 336))(&v64, this, &v66);
      CMTime v45 = a4[1];
      char v44 = a4[2];
      if (v45 >= v44)
      {
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *a4) >> 3);
        unint64_t v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v44 - *a4) >> 3);
        if (2 * v50 > v49) {
          unint64_t v49 = 2 * v50;
        }
        if (v50 >= 0x555555555555555) {
          unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51) {
          double v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v61, v51);
        }
        else {
          double v52 = 0;
        }
        long double v53 = &v52[24 * v48];
        double v54 = &v52[24 * v51];
        long long v55 = v64;
        *((void *)v53 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
        *(_OWORD *)long double v53 = v55;
        double v47 = v53 + 24;
        double v57 = *a4;
        double v56 = a4[1];
        if (v56 != *a4)
        {
          do
          {
            long long v58 = *(_OWORD *)(v56 - 24);
            *((void *)v53 - atomic_store(0, (unint64_t *)this + 1) = *((void *)v56 - 1);
            *(_OWORD *)(v53 - 24) = v58;
            v53 -= 24;
            v56 -= 24;
          }
          while (v56 != v57);
          double v56 = *a4;
        }
        *a4 = v53;
        a4[1] = v47;
        a4[2] = v54;
        if (v56) {
          operator delete(v56);
        }
      }
      else
      {
        long long v46 = v64;
        *((void *)v45 + OZChannelEnum::~OZChannelEnum(this - 2) = v65;
        *(_OWORD *)CMTime v45 = v46;
        double v47 = v45 + 24;
      }
      a4[1] = v47;
    }
  }
  return PCMutex::unlock(v60);
}

void sub_1B7A1580C(_Unwind_Exception *a1)
{
  unsigned int v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v4;
    operator delete(v4);
  }
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 136);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::moveKeypointTo@<X0>(OZChannelBlindData *this@<X0>, const CMTime *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  CMTimeFlags v12 = (PCMutex *)((char *)this + 176);
  unint64_t v23 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v24 = 1;
  memset(&v22, 0, sizeof(v22));
  (*(void (**)(CMTime *__return_ptr, OZChannelBlindData *, const CMTime *))(*(void *)this + 328))(&v22, this, a2);
  *((unsigned char *)this + 336) = 1;
  uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v22, 0);
  char v14 = (long long *)*((void *)this + 20);
  if (v14 != Keyframe)
  {
    CMTime v15 = (NSData *)*((void *)Keyframe + 3);
    if (Keyframe + 2 != v14)
    {
      do
      {
        long long v16 = Keyframe + 2;
        long long *Keyframe = Keyframe[2];
        uint64_t v17 = *((void *)Keyframe + 7);
        *((void *)Keyframe + OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)Keyframe + 6);
        *((void *)Keyframe + 3) = v17;
        unint64_t v18 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v18 != v14);
      uint64_t Keyframe = v16;
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = Keyframe;
    unint64_t v19 = OZChannelBlindData::decodeObjectFromData(this, v15);
    OZChannelBlindData::setPluginDataPtr(this, a3, v19, 0, 0, 1);

    OZChannel::moveKeypointTo((OZChannel *)this, a2, a3, a4, a5, (uint64_t)&v21);
  }
  *(_OWORD *)a6 = *(_OWORD *)&a3->value;
  *(void *)(a6 + 16) = a3->epoch;
  return PCMutex::unlock(v12);
}

void sub_1B7A159D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::moveKeyframe(OZChannelBlindData *this, void *a2, const CMTime *a3, BOOL a4, char a5)
{
  long long v9 = (PCMutex *)((char *)this + 176);
  uint64_t v21 = (char *)this + 176;
  PCMutex::lock((PCMutex *)((char *)this + 176));
  char v22 = 1;
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v19 = *a3;
  if ((OZChannel::getKeyframe((OZChannel *)this, a2, &v20, 0) & 1) == 0
    || (*((unsigned char *)this + 336) = 1,
        uint64_t Keyframe = OZChannelBlindData::findKeyframe(this, &v20, 0),
        int v11 = (long long *)*((void *)this + 20),
        v11 == Keyframe))
  {
    uint64_t v17 = 0;
  }
  else
  {
    CMTimeFlags v12 = (NSData *)*((void *)Keyframe + 3);
    if (Keyframe + 2 != v11)
    {
      do
      {
        CMTimeEpoch v13 = Keyframe + 2;
        long long *Keyframe = Keyframe[2];
        uint64_t v14 = *((void *)Keyframe + 7);
        *((void *)Keyframe + OZChannelEnum::~OZChannelEnum(this - 2) = *((void *)Keyframe + 6);
        *((void *)Keyframe + 3) = v14;
        CMTime v15 = Keyframe + 4;
        Keyframe += 2;
      }
      while (v15 != v11);
      uint64_t Keyframe = v13;
    }
    *((void *)this + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = Keyframe;
    long long v16 = OZChannelBlindData::decodeObjectFromData(this, v12);
    OZChannelBlindData::setPluginDataPtr(this, &v19, v16, 0, 0, a5);

    OZChannel::moveKeyframe((OZChannel *)this, a2, &v19);
    uint64_t v17 = 1;
  }
  PCMutex::unlock(v9);
  return v17;
}

void sub_1B7A15B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlindData::getNumberOfKeyframes(OZChannelBlindData *this)
{
  return (*((void *)this + 20) - *((void *)this + 19)) >> 5;
}

uint64_t OZChannelBlindData::removeValue(OZChannelBlindData *this, const CMTime *a2)
{
  return 1;
}

uint64_t OZChannelBlindData::removeAllValues(OZChannelBlindData *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZChannelBlindData *, void))(*(void *)this + 280))(this, 0);
}

uint64_t OZChannelBlindData::moveValue(OZChannelBlindData *this, const CMTime *a2, const CMTime *a3)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 616))(v4);
  return 1;
}

uint64_t OZChannelBlindData::setValueAndIgnoreRecordOption(OZChannelBlindData *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZChannelBlindData *, const CMTime *))(*(void *)this + 600))(this, a2);
}

id OZChannelBlindData::legacyEncodeObjectToData(OZChannelBlindData *this, void *a2)
{
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  [v3 encodeObject:a2];
  [v3 finishEncoding];
  id v4 = (id)[v3 encodedData];

  return v4;
}

void sub_1B7A15D04(void *a1)
{
  __cxa_begin_catch(a1);

  if (*(unsigned char *)(v2 + 384))
  {
    uint64_t v5 = (void *)[objc_alloc(*(Class *)(v4 + 3504)) initRequiringSecureCoding:0];
    [v5 encodeObject:v1];
    [v5 finishEncoding];
    (id)[v5 encodedData];
  }
  __cxa_end_catch();
  JUMPOUT(0x1B7A15CECLL);
}

void sub_1B7A15D58(_Unwind_Exception *a1)
{
}

uint64_t OZChannelBlindData::legacyDecodeObjectFromData(OZChannelBlindData *this, NSData *a2)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingWithData:a2];
  uint64_t v3 = [v2 decodeObject];

  return v3;
}

void sub_1B7A15DC8(void *a1)
{
  objc_begin_catch(a1);
  PCString::cf_str(v1 + 4);
  NSLog(&cfstr_UnableToUnarch_1.isa);
  objc_end_catch();
  JUMPOUT(0x1B7A15DACLL);
}

void sub_1B7A15DF8(_Unwind_Exception *a1)
{
}

void std::__call_once_param<std::tuple<OZChannelBlindData::createOZChannelBlindDataInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelBlindData::_OZChannelBlindDataInfo) {
    operator new();
  }
}

void sub_1B7A15E5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelBlindDataInfo::OZChannelBlindDataInfo(OZChannelBlindDataInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1111C08;
  *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = &unk_1F1111C28;
}

void sub_1B7A15F08(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelBlindData::createOZChannelBlindDataImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelBlindData::_OZChannelBlindDataImpl) {
    operator new();
  }
}

void sub_1B7A15FE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C407F0BD61ELL);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::OZChannelTransformSwitch(OZChannelTransformSwitch *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1F1111C80;
  *((void *)v6 + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111FC8;
  TXParagraphStyleFolder_Factory::createInstance(v6, v7);
  PCURL::PCURL((PCURL *)&v12, @"Channel Position");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 2u, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v8, v9);
  PCURL::PCURL((PCURL *)&v12, @"Channel Scale");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), &v12, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v12);
  TXParagraphStyleFolder_Factory::createInstance(v10, v11);
  PCURL::PCURL((PCURL *)&v12, @"Channel Rotation");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), &v12, (OZChannelFolder *)this, 3u, 2u, 0, 0);
  PCString::~PCString(&v12);
}

void sub_1B7A16164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::OZChannelTransformSwitch(OZChannelTransformSwitch *this, const OZChannelTransformSwitch *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1111C80;
  *(void *)(v5 + 16) = &unk_1F1111FC8;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 136), (const OZChannelBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 288), (const OZChannelBase *)((char *)a2 + 288), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
}

void sub_1B7A16274(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::clone(OZChannelTransformSwitch *this)
{
}

void sub_1B7A162F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZChannelTransformSwitch::copy(OZChannelTransformSwitch *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannel::copy((OZChannel *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 288), (const OZChannelBase *)((char *)v4 + 288), a3);

  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
}

__CFString *OZChannelTransformSwitch::getObjCWrapperName(OZChannelTransformSwitch *this)
{
  return @"CHChannelTransformSelector";
}

void OZChannelTransformSwitch::~OZChannelTransformSwitch(OZChannelTransformSwitch *this)
{
  OZChannelTransformSwitch::~OZChannelTransformSwitch(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1111C80;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1111FC8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 288));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

void non-virtual thunk to'OZChannelTransformSwitch::~OZChannelTransformSwitch(OZChannelTransformSwitch *this)
{
}

{
  uint64_t vars8;

  OZChannelTransformSwitch::~OZChannelTransformSwitch((OZChannelTransformSwitch *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B7A165E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40FB5DE3D8);
  _Unwind_Resume(a1);
}

void sub_1B7A168C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40C7C6813ELL);
  _Unwind_Resume(a1);
}

void sub_1B7A16A68(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B7A16DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, CGColorSpace *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  _Unwind_Resume(a1);
}

void sub_1B7A174A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B7A17BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *(void *)uint64_t v6 = &unk_1F1112038;
  *(void *)(v6 + 16) = &unk_1F1112310;
  *(void *)(v6 + 56) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B7A18660(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v4 = &unk_1F1112038;
  *(void *)(v4 + 16) = &unk_1F1112310;
  *(void *)(v4 + 56) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B7A186EC(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelVaryingFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F1112038;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112310;
  *((void *)this + 7) |= 0x10000uLL;
  OZChannelFolder::saveStateAsDefault(v11);
}

void sub_1B7A187B8(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::OZChannelVaryingFolder(OZChannelVaryingFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  void *v5 = &unk_1F1112038;
  v5[2] = &unk_1F1112310;
  var0 = a2[1].var0;
  if (var0)
  {
    uint64_t v7 = (char *)*var0;
    uint64_t v8 = (char *)var0[1];
    while (v7 != v8)
    {
      uint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)v7 + 248))();
      v9->var6 = (OZChannelFolder *)this;
      OZChannelFolder::push_back((OZChannelFolder *)this, v9);
      v7 += 8;
    }
  }
}

void sub_1B7A18894(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::~OZChannelVaryingFolder(OZChannelFolder *this)
{
  *(void *)this = &unk_1F1112038;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112310;
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    uint64_t v4 = *(void **)(v2 + 8);
    while (v3 != v4)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
    }
  }

  OZChannelFolder::~OZChannelFolder(this);
}

{
  uint64_t vars8;

  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelVaryingFolder::~OZChannelVaryingFolder(OZChannelVaryingFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *OZChannelVaryingFolder::resetToDefault(OZChannelVaryingFolder *this)
{
  (*(void (**)(OZChannelVaryingFolder *))(*(void *)this + 352))(this);
  uint64_t result = (OZChannelBase *)(*(uint64_t (**)(OZChannelVaryingFolder *, uint64_t))(*(void *)this + 464))(this, 1);
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        OZChannelBase::unregisterParent(*v4, (*v4)->var6);
        uint64_t result = *v4;
        if (*v4) {
          uint64_t result = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))result->var0 + 1))(result);
        }
        *v4++ = 0;
      }
      while (v4 != v5);
      uint64_t v3 = (OZChannelBase ***)*((void *)this + 14);
      uint64_t v4 = *v3;
    }
    v3[1] = v4;
  }
  return result;
}

void OZChannelVaryingFolder::clone(OZChannelVaryingFolder *this)
{
}

void sub_1B7A18B24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelVaryingFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelFolder::copy(this, a2);
  if (a2) {
  else
  }
    uint64_t v4 = 0;

  OZChannelVaryingFolder::copyDescendants(this, v4);
}

void OZChannelVaryingFolder::copyDescendants(OZChannelFolder *this, const OZChannelVaryingFolder *a2)
{
  (*(void (**)(OZChannelFolder *, void))(*(void *)this + 288))(this, 0);
  uint64_t v4 = (uint64_t **)*((void *)a2 + 14);
  if (v4)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    while (v5 != v6)
    {
      uint64_t v7 = *v5++;
      uint64_t v8 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 248))(v7);
      v8->var6 = this;
      OZChannelFolder::push_back(this, v8);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 14);
    if (v9)
    {
      uint64_t v10 = *(void **)v9;
      if (*(void *)v9)
      {
        *(void *)(v9 + OZSpline::reparametrize((uint64_t)this + 8) = v10;
        operator delete(v10);
      }
      MEMORY[0x1BA9BFBA0](v9, 0x80C40D6874129);
    }
    *((void *)this + 14) = 0;
  }
}

void OZChannelVaryingFolder::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  OZChannelBase::assign(this, a2);
  if (a2) {
  else
  }
    uint64_t v4 = 0;

  OZChannelVaryingFolder::copyDescendants((OZChannelFolder *)this, v4);
}

uint64_t OZChannelVaryingFolder::allowsAssignment(OZChannelBase *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = OZChannelBase::allowsAssignment(this, (const OZChannelBase *)result);
    if (result)
    {
      var0 = this[1].var0;
      if (var0 && (uint64_t v6 = *(void **)(v4 + 112)) != 0)
      {
        uint64_t v7 = (char *)*var0;
        uint64_t v8 = (char *)var0[1];
        uint64_t v9 = v6[1];
        if (*v6 == v9 || v7 == v8)
        {
          return 1;
        }
        else
        {
          uint64_t v11 = v7 + 8;
          uint64_t v12 = *v6 + 8;
          do
          {
            uint64_t result = (*(uint64_t (**)(void, void))(**((void **)v11 - 1) + 264))(*((void *)v11 - 1), *(void *)(v12 - 8));
            if (result) {
              BOOL v13 = v12 == v9;
            }
            else {
              BOOL v13 = 1;
            }
            BOOL v14 = v13 || v11 == v8;
            v11 += 8;
            v12 += 8;
          }
          while (!v14);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

OZChannelFolder *OZChannelVaryingFolder::setValue(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  {
    return (OZChannelFolder *)OZChannelFolder::operator=((uint64_t)this);
  }
  else
  {
    return OZChannelFolder::setValue(this, lpsrc);
  }
}

void *OZChannelVaryingFolder::undoWillReplace(OZChannelBase *this)
{
  uint64_t result = OZChannelBase::getChannelRootBase(this);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 768);
    return (void *)v2();
  }
  return result;
}

void *OZChannelVaryingFolder::undoDidReplace(OZChannelBase *this)
{
  uint64_t result = OZChannelBase::getChannelRootBase(this);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 760);
    return (void *)v2();
  }
  return result;
}

uint64_t OZChannelVaryingFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  (*(void (**)(OZChannelFolder *))(*(void *)this + 352))(this);
  uint64_t v4 = OZChannelFolder::parseBegin(this, a2);
  (*(void (**)(OZChannelFolder *, void))(*(void *)this + 288))(this, 0);
  return v4;
}

uint64_t non-virtual thunk to'OZChannelVaryingFolder::parseBegin(OZChannelVaryingFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannelFolder *)((char *)this - 16);
  (*(void (**)(char *))(*((void *)this - 2) + 352))((char *)this - 16);
  uint64_t v4 = OZChannelFolder::parseBegin(v3, a2);
  (*(void (**)(OZChannelFolder *, void))(*(void *)v3 + 288))(v3, 0);
  return v4;
}

uint64_t OZChannelVaryingFolder::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  (*(void (**)(OZChannelFolder *))(*(void *)this + 360))(this);

  return OZChannelFolder::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZChannelVaryingFolder::parseEnd(OZChannelVaryingFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannelFolder *)((char *)this - 16);
  (*(void (**)(char *))(*((void *)this - 2) + 360))((char *)this - 16);

  return OZChannelFolder::parseEnd(v3, a2);
}

uint64_t OZChannelVaryingFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelFolder::writeBody(this, a2, 1, a4, 1);
}

uint64_t non-virtual thunk to'OZChannelVaryingFolder::writeBody(OZChannelVaryingFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, 1, a4, 1);
}

__CFString *OZChannelVaryingFolder::getObjCWrapperName(OZChannelVaryingFolder *this)
{
  return @"CHChannelVaryingFolder";
}

void sub_1B7A19348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  MEMORY[0x1BA9BFBA0](v12, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelVertexFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F1112380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112658;
  *((void *)this + 7) |= 0x10000uLL;
  *((void *)this + 16) = 0;
  OZChannelFolder::saveStateAsDefault(v11);
}

void sub_1B7A1973C(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v4 = &unk_1F1112380;
  *(void *)(v4 + 16) = &unk_1F1112658;
  *(void *)(v4 + 56) |= 0x10000uLL;
  *(void *)(v4 + 12OZSpline::reparametrize((uint64_t)this + 8) = 0;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B7A197D0(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::OZChannelVertexFolder(OZChannelVertexFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *(void *)uint64_t v3 = &unk_1F1112380;
  *(void *)(v3 + 16) = &unk_1F1112658;
  *(void *)(v3 + 56) |= 0x10000uLL;
  *(void *)(v3 + 12OZSpline::reparametrize((uint64_t)this + 8) = 0;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v3);
}

void sub_1B7A19860(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZChannelVertexFolder::~OZChannelVertexFolder(OZChannelVertexFolder *this)
{
  *(void *)this = &unk_1F1112380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112658;
  *((void *)this + 7) |= 0x10000uLL;
  *((void *)this + 16) = 0;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1112380;
  *((void *)this + OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112658;
  *((void *)this + 7) |= 0x10000uLL;
  *((void *)this + 16) = 0;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelVertexFolder::~OZChannelVertexFolder(OZChannelVertexFolder *this)
{
  *((void *)this - OZChannelEnum::~OZChannelEnum(this - 2) = &unk_1F1112380;
  *(void *)this = &unk_1F1112658;
  *((void *)this + 5) |= 0x10000uLL;
  *((void *)this + 14) = 0;
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelVertexFolder::~OZChannelVertexFolder((OZChannelVertexFolder *)((char *)this - 16));
}

uint64_t OZChannelVertexFolder::writeHeader(OZFactory **this, OZFactory *a2, int a3)
{
  char v3 = a3;
  if (a3 && OZFactory::fileRefID(this[1], a2)) {
    int v6 = (*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2) ^ 1;
  }
  else {
    int v6 = 0;
  }
  TXSequenceChannels::pushChannelIntoChannelList((TXSequenceChannels *)a2, (OZChannelBase *)&OZChannelVertexFolderScope);
  (*(void (**)(OZFactory *, uint64_t))(*(void *)a2 + 16))(a2, 122);
  uint64_t v7 = (char *)(this + 4);
  uint64_t v8 = *(void *)a2;
  if (v6) {
    (*(void (**)(OZFactory *, uint64_t, char *))(v8 + 200))(a2, 110, v7);
  }
  else {
    (*(void (**)(OZFactory *, uint64_t, char *))(v8 + 216))(a2, 110, v7);
  }
  (*(void (**)(OZFactory *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  if ((v3 & 1) == 0) {
    OZChannelBase::writeFlags((uint64_t)this, (TXSequenceChannels *)a2, 0);
  }
  if (v6 && ((*(uint64_t (**)(OZFactory *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v10 = OZFactory::fileRefID(this[1], v9);
    (*(void (**)(OZFactory *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v10);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZChannelVertexFolder::writeHeader(OZFactory **this, OZFactory *a2, int a3)
{
  return OZChannelVertexFolder::writeHeader(this - 2, a2, a3);
}

__CFString *OZChannelVertexFolder::getObjCWrapperName(OZChannelVertexFolder *this)
{
  return @"CHChannelVertexFolder";
}

OZChannelBase *OZChannelVertexFolder::setVertexSaveWhenAtDefaultState(OZChannelFolder *this)
{
  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(this, 2);

  return OZChannelBase::setFlag(Descendant, 0x100000000, 0);
}

uint64_t OZChannelVertexFolder::isVertexSaveWhenAtDefaultState(OZChannelFolder *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)OZChannelFolder::getDescendant(this, 2) + 144);

  return v1();
}

void sub_1B7A19D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void sub_1B7A19F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40E74858DCLL);
  _Unwind_Resume(a1);
}

void sub_1B7A1A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40C9B629ABLL);
  _Unwind_Resume(a1);
}

void sub_1B7A1A2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C408C14BFF9);
  _Unwind_Resume(a1);
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, BOOL a7, int a8)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, a8);
  *(void *)uint64_t v9 = &unk_1F11126C8;
  *(void *)(v9 + 16) = &unk_1F1112A10;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)v9, 15);
  (*(void (**)(OZCompoundChannel *))(*(void *)this + 128))(this);
}

void sub_1B7A1A3CC(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  void *v5 = &unk_1F11126C8;
  v5[2] = &unk_1F1112A10;
}

void OZCompoundChannel::OZCompoundChannel(OZCompoundChannel *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  void *v3 = &unk_1F11126C8;
  v3[2] = &unk_1F1112A10;
}

void non-virtual thunk to'OZCompoundChannel::~OZCompoundChannel(OZCompoundChannel *this)
{
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZCompoundChannel::~OZCompoundChannel(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZCompoundChannel::getObjCWrapperName(OZCompoundChannel *this)
{
  return 0;
}

void OZCompoundChannel::clone(OZCompoundChannel *this)
{
}

void sub_1B7A1A59C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40441104D3);
  _Unwind_Resume(a1);
}

BOOL OZCompoundChannel::compare(OZChannelFolder *this, const OZChannelBase *lpsrc)
{
  BOOL result = 0;
  if (lpsrc)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      BOOL v6 = OZChannelFolder::testFoldFlag(this, 0x100000);
      if (v6 == OZChannelFolder::testFoldFlag(v5, 0x100000) && (OZChannelFolder::compare(this, lpsrc) & 1) != 0) {
        return 1;
      }
    }
  }
  return result;
}

void OZCompoundChannel::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelFolder::copy(this, a2);
  if (a2)
  {
    if (v4)
    {
      if (OZChannelFolder::testFoldFlag(v4, 0x100000)) {
        *((_DWORD *)this + 30) |= 0x100000u;
      }
    }
  }
}

uint64_t OZCompoundChannel::hasOnlyOneKeypointAt(OZCompoundChannel *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZCompoundChannel *, const CMTime *, void))(*(void *)this + 568))(this, a2, 0);
}

uint64_t OZCompoundChannel::numberOfKeypointsAt(OZCompoundChannel *this, const CMTime *a2)
{
  return (*(uint64_t (**)(OZCompoundChannel *, const CMTime *, void))(*(void *)this + 568))(this, a2, 0);
}

uint64_t OZCompoundChannel::setValue(OZCompoundChannel *this, unsigned int a2, const CMTime *a3, double a4)
{
  uint64_t v8 = *(void **)(**((void **)this + 14) + 8 * a2);
  if (v8) {
  (*(void (**)(void *, const CMTime *, void, double))(*(void *)v8 + 712))(v8, a3, 0, a4);
  }
  uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000);
  if (result)
  {
    uint64_t v10 = (uint64_t *)*((void *)this + 14);
    uint64_t v11 = *v10;
    if (v10[1] != *v10)
    {
      LODWORD(v1OZChannelEnum::~OZChannelEnum(this - 2) = 0;
      do
      {
        if (a2 != v12)
        {
          BOOL v13 = *(void **)(v11 + 8 * a2);
          if (v13) {
          uint64_t result = (*(uint64_t (**)(void *, const CMTime *))(*(void *)v13 + 736))(v13, a3);
          }
          uint64_t v10 = (uint64_t *)*((void *)this + 14);
          uint64_t v11 = *v10;
        }
        unint64_t v12 = (v12 + 1);
      }
      while (v12 < (v10[1] - v11) >> 3);
    }
  }
  return result;
}

uint64_t OZCompoundChannel::setValue(OZChannelFolder *this, unsigned int a2, const CMTime *a3)
{
  uint64_t result = OZChannelFolder::testFoldFlag(this, 0x100000);
  uint64_t v7 = (uint64_t *)*((void *)this + 14);
  if (result)
  {
    uint64_t v8 = *v7;
    if (*(void *)(*((void *)this + 14) + 8) != v8)
    {
      unint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        uint64_t v11 = *(void **)(v8 + 8 * v9);
        if (v11) {
        uint64_t result = (*(uint64_t (**)(void *, const CMTime *))(*(void *)v11 + 736))(v11, a3);
        }
        unint64_t v9 = v10;
        uint64_t v8 = **((void **)this + 14);
        ++v10;
      }
      while (v9 < (*(void *)(*((void *)this + 14) + 8) - v8) >> 3);
    }
  }
  else
  {
    unint64_t v12 = *(void **)(*v7 + 8 * a2);
    if (v12) {
    BOOL v13 = *(uint64_t (**)(void))(*(void *)v12 + 736);
    }
    return v13();
  }
  return result;
}

OZChannelFolder *OZCompoundChannel::setValue(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, double a4)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000))
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    uint64_t v9 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v9)
    {
      unint64_t v10 = 0;
      unsigned int v11 = 1;
      do
      {
        unint64_t v12 = *(OZChannel **)(v9 + 8 * v10);
        if (v12) {
        if (v12 == a2)
        }
          (*((void (**)(OZChannel *, const CMTime *, void, double))a2->var0 + 89))(a2, a3, 0, a4);
        else {
          (*((void (**)(OZChannel *, const CMTime *))v12->var0 + 92))(v12, a3);
        }
        unint64_t v10 = v11;
        uint64_t v9 = **((void **)this + 14);
        ++v11;
      }
      while (v10 < (*(void *)(*((void *)this + 14) + 8) - v9) >> 3);
    }
    return OZChannelFolder::setFoldFlag(this, 0x100000);
  }
  else
  {
    BOOL v14 = (uint64_t (*)(OZChannel *, const CMTime *, void, __n128))*((void *)a2->var0 + 89);
    v8.n128_f64[0] = a4;
    return (OZChannelFolder *)v14(a2, a3, 0, v8);
  }
}

OZChannelFolder *OZCompoundChannel::compoundAddKeypointAt(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, char a4)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    uint64_t v10 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v10)
    {
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      do
      {
        (*(void (**)(void, const CMTime *))(**(void **)(v10 + 8 * v11) + 600))(*(void *)(v10 + 8 * v11), a3);
        unint64_t v11 = v12;
        uint64_t v10 = **((void **)this + 14);
        ++v12;
      }
      while (v11 < (*(void *)(*((void *)this + 14) + 8) - v10) >> 3);
    }
    return OZChannelFolder::setFoldFlag(this, 0x100000);
  }
  else
  {
    __n128 v8 = (uint64_t (*)(OZChannel *, const CMTime *))*((void *)a2->var0 + 75);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

__n128 OZCompoundChannel::compoundMoveKeypointTo@<Q0>(OZChannelFolder *this@<X0>, OZChannel *a2@<X1>, const CMTime *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a7 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    memset(v24, 0, sizeof(v24));
    (*((void (**)(void *__return_ptr, OZChannel *, const CMTime *, const CMTime *, uint64_t, uint64_t))a2->var0
     + 77))(v24, a2, a3, a4, a5, a6);
    unint64_t v18 = (uint64_t *)*((void *)this + 14);
    uint64_t v19 = *v18;
    if (v18[1] != *v18)
    {
      unint64_t v20 = 0;
      unsigned int v21 = 1;
      do
      {
        char v22 = *(OZChannel **)(v19 + 8 * v20);
        if (v22 != a2)
        {
          (*((void (**)(void *__return_ptr))v22->var0 + 77))(v23);
          unint64_t v18 = (uint64_t *)*((void *)this + 14);
          uint64_t v19 = *v18;
        }
        unint64_t v20 = v21++;
      }
      while (v20 < (v18[1] - v19) >> 3);
    }
    OZChannelFolder::setFoldFlag(this, 0x100000);
    __n128 result = *(__n128 *)&a4->value;
    *(_OWORD *)a8 = *(_OWORD *)&a4->value;
    *(void *)(a8 + 16) = a4->epoch;
  }
  else
  {
    long long v16 = (void (*)(OZChannel *, const CMTime *, const CMTime *, uint64_t, void))*((void *)a2->var0 + 77);
    v16(a2, a3, a4, a5, 0);
  }
  return result;
}

OZChannelFolder *OZCompoundChannel::compoundDeleteKeypointAt(OZChannelFolder *this, OZChannel *a2, const CMTime *a3, char a4)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    uint64_t v10 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v10)
    {
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      do
      {
        (*(void (**)(void, const CMTime *))(**(void **)(v10 + 8 * v11) + 608))(*(void *)(v10 + 8 * v11), a3);
        unint64_t v11 = v12;
        uint64_t v10 = **((void **)this + 14);
        ++v12;
      }
      while (v11 < (*(void *)(*((void *)this + 14) + 8) - v10) >> 3);
    }
    return OZChannelFolder::setFoldFlag(this, 0x100000);
  }
  else
  {
    __n128 v8 = (uint64_t (*)(OZChannel *, const CMTime *))*((void *)a2->var0 + 76);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

OZChannelFolder *OZCompoundChannel::compoundReset(OZChannelFolder *this, OZChannel *a2, char a3)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a3 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    uint64_t v8 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v8)
    {
      unint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        (*(void (**)(void, void))(**(void **)(v8 + 8 * v9) + 288))(*(void *)(v8 + 8 * v9), 0);
        unint64_t v9 = v10;
        uint64_t v8 = **((void **)this + 14);
        ++v10;
      }
      while (v9 < (*(void *)(*((void *)this + 14) + 8) - v8) >> 3);
    }
    return OZChannelFolder::setFoldFlag(this, 0x100000);
  }
  else
  {
    BOOL v6 = (uint64_t (*)(OZChannel *, void))*((void *)a2->var0 + 36);
    return (OZChannelFolder *)v6(a2, 0);
  }
}

OZChannelFolder *OZCompoundChannel::compoundSetIsSpline(OZChannelFolder *this, OZChannel *a2, uint64_t a3, char a4)
{
  if (OZChannelFolder::testFoldFlag(this, 0x100000) || (a4 & 1) != 0)
  {
    OZChannelFolder::resetFoldFlag(this, 0x100000);
    uint64_t v10 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v10)
    {
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      do
      {
        (*(void (**)(void, uint64_t))(**(void **)(v10 + 8 * v11) + 480))(*(void *)(v10 + 8 * v11), a3);
        unint64_t v11 = v12;
        uint64_t v10 = **((void **)this + 14);
        ++v12;
      }
      while (v11 < (*(void *)(*((void *)this + 14) + 8) - v10) >> 3);
    }
    return OZChannelFolder::setFoldFlag(this, 0x100000);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(OZChannel *, uint64_t))*((void *)a2->var0 + 60);
    return (OZChannelFolder *)v8(a2, a3);
  }
}

const void *OZCompoundChannel::removeValue(OZCompoundChannel *this, unsigned int a2, const CMTime *a3)
{
  uint64_t v6 = *(void *)(**((void **)this + 14) + 8 * a2);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
  uint64_t v8 = *(const void **)(**((void **)this + 14) + 8 * a2);
  if (v7)
  {
    if (v8) {
    else
    }
      unint64_t v9 = 0;
    uint64_t v11 = (*(uint64_t (**)(void *, const CMTime *))(*(void *)v9 + 800))(v9, a3);
LABEL_9:
    uint64_t v8 = (const void *)v11;
    goto LABEL_10;
  }
  if (v8)
  {
    {
      uint64_t v8 = 0;
      goto LABEL_10;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(v10 + 744))();
    goto LABEL_9;
  }
LABEL_10:
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x100000))
  {
    uint64_t v12 = **((void **)this + 14);
    if (*(void *)(*((void *)this + 14) + 8) != v12)
    {
      unint64_t v13 = 0;
      unsigned int v14 = 1;
      do
      {
        int v15 = (*(uint64_t (**)(void))(**(void **)(v12 + 8 * v13) + 120))(*(void *)(v12 + 8 * v13));
        long long v16 = *(const void **)(**((void **)this + 14) + 8 * v13);
        if (v15)
        {
          if (v16) {
          else
          }
            uint64_t v17 = 0;
          (*(void (**)(void *, const CMTime *))(*(void *)v17 + 800))(v17, a3);
        }
        else if (v16
        {
          (*(void (**)(void))(v18 + 744))();
        }
        unint64_t v13 = v14;
        uint64_t v12 = **((void **)this + 14);
        ++v14;
      }
      while (v13 < (*(void *)(*((void *)this + 14) + 8) - v12) >> 3);
    }
  }
  return v8;
}

uint64_t OZCompoundChannel::removeValue(OZCompoundChannel *this, const CMTime *a2)
{
  uint64_t v2 = **((void **)this + 14);
  if (*(void *)(*((void *)this + 14) + 8) == v2)
  {
    char v6 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    char v6 = 0;
    unsigned int v7 = 1;
    do
    {
      int v8 = (*(uint64_t (**)(void))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5));
      unint64_t v9 = *(const void **)(**((void **)this + 14) + 8 * v5);
      if (v8)
      {
        if (v9) {
        else
        }
          uint64_t v10 = 0;
        LOBYTE(v1atomic_store(0, (unint64_t *)this + 1) = (*(uint64_t (**)(void *, const CMTime *))(*(void *)v10 + 800))(v10, a2);
      }
      else if (v9)
      {
        if (v11)
        {
          LOBYTE(v1atomic_store(0, (unint64_t *)this + 1) = (*(uint64_t (**)(void))(v12 + 744))();
        }
      }
      else
      {
        LOBYTE(v1atomic_store(0, (unint64_t *)this + 1) = 0;
      }
      v6 |= v11;
      unint64_t v5 = v7;
      uint64_t v2 = **((void **)this + 14);
      ++v7;
    }
    while (v5 < (*(void *)(*((void *)this + 14) + 8) - v2) >> 3);
  }
  return v6 & 1;
}

uint64_t OZCompoundChannel::removeAllValues(OZChannelFolder *this, const CMTime *a2, unsigned int a3)
{
  uint64_t result = OZChannelFolder::testFoldFlag(this, 0x100000);
  unsigned int v7 = (uint64_t *)*((void *)this + 14);
  if (result)
  {
    uint64_t v8 = *v7;
    if (*(void *)(*((void *)this + 14) + 8) != v8)
    {
      unint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v8 + 8 * v9) + 120))(*(void *)(v8 + 8 * v9));
        uint64_t v11 = *(const void **)(**((void **)this + 14) + 8 * v9);
        if (result)
        {
          if (v11) {
          else
          }
            uint64_t v12 = 0;
          uint64_t result = (*(uint64_t (**)(void *, const CMTime *))(*(void *)v12 + 816))(v12, a2);
        }
        else if (v11)
        {
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(void))(v13 + 752))();
          }
        }
        unint64_t v9 = v10;
        uint64_t v8 = **((void **)this + 14);
        ++v10;
      }
      while (v9 < (*(void *)(*((void *)this + 14) + 8) - v8) >> 3);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(*v7 + 8 * a3);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120))(v14);
    int v15 = *(const void **)(**((void **)this + 14) + 8 * a3);
    if (result)
    {
      if (v15) {
      else
      }
        long long v16 = 0;
      uint64_t v18 = *(uint64_t (**)(void))(*(void *)v16 + 816);
      return v18();
    }
    else if (v15)
    {
      if (result)
      {
        return v17();
      }
    }
  }
  return result;
}

void **OZCompoundChannel::removeAllValues(void **this, const CMTime *a2)
{
  uint64_t v2 = *this[14];
  if (this[14][1] != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      this = (void **)(*(uint64_t (**)(void))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5));
      unsigned int v7 = *(const void **)(*v4[14] + 8 * v5);
      if (this)
      {
        if (v7) {
        else
        }
          uint64_t v8 = 0;
        this = (void **)(*(uint64_t (**)(void *, const CMTime *))(*(void *)v8 + 816))(v8, a2);
      }
      else if (v7)
      {
        if (this)
        {
          this = (void **)(*(uint64_t (**)(void))(v9 + 752))();
        }
      }
      unint64_t v5 = v6;
      uint64_t v2 = *v4[14];
      ++v6;
    }
    while (v5 < (v4[14][1] - v2) >> 3);
  }
  return this;
}

unsigned char *OZCompoundChannel::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
}

unsigned char *non-virtual thunk to'OZCompoundChannel::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);
}

const void *OZCompoundChannel::willBeModified(OZChannelBase *this, uint64_t a2)
{
  uint64_t result = OZChannelBase::willBeModified(this, a2);
  var0 = this[1].var0;
  if (var0)
  {
    unsigned int v6 = *var0;
    if (var0[1] != *var0)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        uint64_t result = (const void *)v6[v7];
        if (result)
        {
          if (result)
          {
            uint64_t result = (const void *)(*(uint64_t (**)(const void *, uint64_t))(*(void *)result + 704))(result, a2);
            var0 = this[1].var0;
            unsigned int v6 = *var0;
          }
        }
        unint64_t v7 = v8++;
      }
      while (v7 < ((unsigned char *)var0[1] - (unsigned char *)v6) >> 3);
    }
  }
  return result;
}

void sub_1B7A1C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void sub_1B7A1CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void OZConvexInterpolator::OZConvexInterpolator(OZConvexInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F1112A80;
}

void OZConvexInterpolator::~OZConvexInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZConvexInterpolator::interpolate(OZConvexInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, unsigned char **a5, const CMTime *a6)
{
  CMTime time = *(CMTime *)(a4 + 16);
  CMTime v27 = *(CMTime *)(a5 + 2);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v25 = v27;
  double v13 = CMTimeGetSeconds(&v25);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v24);
    double v13 = Seconds + CMTimeGetSeconds(&v24);
  }
  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, OZConvexInterpolator *, OZSpline *, const CMTime *, char *, unsigned char **))(*(void *)this + 104))(&v23, this, a2, a6, a4, a5);
  double v14 = (*(double (**)(char *, const CMTime *))(*(void *)a4 + 24))(a4, a3);
  double v15 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime v22 = v23;
  float v16 = (CMTimeGetSeconds(&v22) - Seconds) / (v13 - Seconds) * 1.57079633;
  if (v14 >= v15)
  {
    double v20 = cosf(v16);
    double v19 = v14 * v20;
    double v18 = v15 * (1.0 - v20);
  }
  else
  {
    double v17 = sinf(v16);
    double v18 = v14 * (1.0 - v17);
    double v19 = v15 * v17;
  }
  return v19 + v18;
}

uint64_t OZConvexInterpolator::subDivide(OZConvexInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  long long v12 = a6[1];
  uint64_t v13 = *((void *)a6 + 4);
  (*(void (**)(long long *__return_ptr))(*(void *)this + 104))(&v10);
  long long v12 = v10;
  uint64_t v13 = v11;
  (*(void (**)(OZSpline *, long long *, const CMTime *, void))(*(void *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(void *)a6 + 32))(a6, a3);
}

void OZConcaveInterpolator::OZConcaveInterpolator(OZConcaveInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F1112B18;
}

void OZConcaveInterpolator::~OZConcaveInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZConcaveInterpolator::interpolate(OZConcaveInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, unsigned char **a5, const CMTime *a6)
{
  CMTime time = *(CMTime *)(a4 + 16);
  CMTime v27 = *(CMTime *)(a5 + 2);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v25 = v27;
  double v13 = CMTimeGetSeconds(&v25);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v24);
    double v13 = Seconds + CMTimeGetSeconds(&v24);
  }
  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, OZConcaveInterpolator *, OZSpline *, const CMTime *, char *, unsigned char **))(*(void *)this + 104))(&v23, this, a2, a6, a4, a5);
  double v14 = (*(double (**)(char *, const CMTime *))(*(void *)a4 + 24))(a4, a3);
  double v15 = (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
  CMTime v22 = v23;
  float v16 = (CMTimeGetSeconds(&v22) - Seconds) / (v13 - Seconds) * 1.57079633;
  if (v14 >= v15)
  {
    double v20 = 1.0 - sinf(v16);
    double v19 = v14 * v20;
    double v18 = v15 * (1.0 - v20);
  }
  else
  {
    double v17 = 1.0 - cosf(v16);
    double v18 = v14 * (1.0 - v17);
    double v19 = v15 * v17;
  }
  return v19 + v18;
}

uint64_t OZConcaveInterpolator::subDivide(OZConcaveInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  long long v12 = a6[1];
  uint64_t v13 = *((void *)a6 + 4);
  (*(void (**)(long long *__return_ptr))(*(void *)this + 104))(&v10);
  long long v12 = v10;
  uint64_t v13 = v11;
  (*(void (**)(OZSpline *, long long *, const CMTime *, void))(*(void *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(void *)a6 + 32))(a6, a3);
}

void OZSCurveInterpolator::OZSCurveInterpolator(OZSCurveInterpolator *this)
{
  OZInterpolator::OZInterpolator(this);
  void *v1 = &unk_1F1112BB0;
}

void OZSCurveInterpolator::~OZSCurveInterpolator(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

double OZSCurveInterpolator::interpolate(OZSCurveInterpolator *this, OZSpline *a2, const CMTime *a3, char *a4, unsigned char **a5, const CMTime *a6)
{
  CMTime time = *(CMTime *)(a4 + 16);
  CMTime v23 = *(CMTime *)(a5 + 2);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v21 = v23;
  double v13 = CMTimeGetSeconds(&v21);
  if (Seconds > v13)
  {
    OZSpline::getSmallDeltaU(a2, &v20);
    double v13 = Seconds + CMTimeGetSeconds(&v20);
  }
  memset(&v19, 0, sizeof(v19));
  (*(void (**)(CMTime *__return_ptr, OZSCurveInterpolator *, OZSpline *, const CMTime *, char *, unsigned char **))(*(void *)this + 104))(&v19, this, a2, a6, a4, a5);
  CMTime v18 = v19;
  float v14 = (CMTimeGetSeconds(&v18) - Seconds) / (v13 - Seconds) * 3.14159265;
  double v15 = (1.0 - cosf(v14)) * 0.5;
  double v16 = (*(double (**)(char *, const CMTime *))(*(void *)a4 + 24))(a4, a3) * (1.0 - v15);
  return v16 + v15 * (*((double (**)(unsigned char **, const CMTime *))*a5 + 3))(a5, a3);
}

uint64_t OZSCurveInterpolator::subDivide(OZSCurveInterpolator *this, OZSpline *a2, const CMTime *a3, void *a4, void *a5, _OWORD *a6)
{
  long long v12 = a6[1];
  uint64_t v13 = *((void *)a6 + 4);
  (*(void (**)(long long *__return_ptr))(*(void *)this + 104))(&v10);
  long long v12 = v10;
  uint64_t v13 = v11;
  (*(void (**)(OZSpline *, long long *, const CMTime *, void))(*(void *)a2 + 240))(a2, &v12, a3, 0);
  return (*(uint64_t (**)(_OWORD *, const CMTime *))(*(void *)a6 + 32))(a6, a3);
}

void sub_1B7A1E6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

void HGradientBlend::HGradientBlend(HGradientBlend *this)
{
}

void HGradientBlend::~HGradientBlend(HGNode *this)
{
  HgcGradientBlend::~HgcGradientBlend(this);

  HGObject::operator delete(v1);
}

uint64_t HGradientBlend::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v10 = v9;
  uint64_t v11 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v12 = HGRenderer::GetDOD(a2, v11);
  return HGRectIntersection(DOD, v10, v12, v13);
}

uint64_t HGradientBlend::GetROI(HGNode *this, HGRenderer *a2, signed int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, a3);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  return HGRectIntersection(DOD, v10, v6, v5);
}

float createColorBalance@<S0>(void *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, char a5@<W4>, HgcColorBalance **a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  CMTime v20 = (HgcColorBalance *)HGObject::operator new(0x1F0uLL);
  HgcColorBalance::HgcColorBalance(v20);
  (*(void (**)(HgcColorBalance *, void, void))(*(void *)v20 + 120))(v20, 0, *a1);
  float v21 = *a2;
  float v22 = a2[1];
  float v23 = a2[2];
  (*(void (**)(HgcColorBalance *, void, float, float, float, double))(*(void *)v20 + 96))(v20, 0, v21, v22, v23, 0.0);
  float v24 = *a3;
  float v25 = a3[1];
  float v26 = a3[2];
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, double))(*(void *)v20 + 96))(v20, 1, v24, v25, v26, 0.0);
  float v27 = *a4;
  float v28 = a4[1];
  float v29 = a4[2];
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, double))(*(void *)v20 + 96))(v20, 2, v27, v28, v29, 0.0);
  float v30 = a7;
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, float, float))(*(void *)v20 + 96))(v20, 3, v30, v30, v30, v30);
  float v31 = a8;
  float v32 = a9;
  (*(void (**)(HgcColorBalance *, uint64_t, float, float, double, double))(*(void *)v20 + 96))(v20, 4, v31, v32, 0.0, 0.0);
  float result = a10;
  *((float *)v20 + 12atomic_store(0, (unint64_t *)this + 1) = result;
  *((unsigned char *)v20 + 48OZSpline::reparametrize((uint64_t)this + 8) = a5;
  *a6 = v20;
  return result;
}

void sub_1B7A1EB18(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HSampleTiledNoise::HSampleTiledNoise(HSampleTiledNoise *this)
{
}

uint64_t HSampleTiledNoise::GetDOD(HSampleTiledNoise *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 104);
  if (v5 >= 0) {
    int v6 = *((_DWORD *)this + 104);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = *((_DWORD *)this + 105);
  if (v7 >= 0) {
    int v8 = *((_DWORD *)this + 105);
  }
  else {
    int v8 = v7 + 1;
  }
  return HGRectMake4i(-(v6 >> 1), -(v8 >> 1), v5 - (v6 >> 1), v7 - (v8 >> 1));
}

void HSampleTiledNoise::~HSampleTiledNoise(HGNode *this)
{
  HgcSampleTiledNoise::~HgcSampleTiledNoise(this);

  HGObject::operator delete(v1);
}

uint64_t FxColorDescription::FxColorDescription(uint64_t a1, CGColorSpace *a2, int a3, void *a4, char a5)
{
  PCColorDescription::PCColorDescription((uint64_t)space, a2, a3, a4);
  int v7 = space[0];
  *(CGColorSpaceRef *)a1 = space[0];
  if (v7) {
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  }
  *(CGColorSpaceRef *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = space[1];
  *(_DWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 24) = a5;
  PCCFRef<CGColorSpace *>::~PCCFRef(space);
  return a1;
}

void sub_1B7A1EC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

BOOL FxColorDescription::isPremultiplied(FxColorDescription *this)
{
  return this->_isPremultiplied;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, const FxColorDescription *a2, CGColorSpace *a3)
{
  PCColorDescription::PCColorDescription(&this->_pcColorDesc, &a2->_pcColorDesc, a3);
  *(unsigned char *)(v4 + 24) = a2->_isPremultiplied;
}

uint64_t FxColorDescription::FxColorDescription(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = PCColorDescription::PCColorDescription(a1, a2, a3);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, const FxColorDescription *a2, const PCToneMapMethod *a3)
{
  PCColorDescription::PCColorDescription(&this->_pcColorDesc, &a2->_pcColorDesc, a3);
  *(unsigned char *)(v4 + 24) = a2->_isPremultiplied;
}

void FxColorDescription::FxColorDescription(FxColorDescription *this, CGColorSpace *a2, PCToneMapMethod *a3, char a4)
{
  PCColorDescription::PCColorDescription(&this->_pcColorDesc, a2, a3);
  *(unsigned char *)(v5 + 24) = a4;
}

uint64_t FxMakeLegacyColorDescription@<X0>(CGColorSpace *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return FxColorDescription::FxColorDescription(a3, a1, 0, &kPCNoToneMapMethod, a2);
}

uint64_t FxGetDefaultWorkingColorDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (CGColorSpace *)PCGetGamutColorSpace();
  uint64_t v4 = 4;
  return FxColorDescription::FxColorDescription(a1, v2, 0, &v4, 1);
}

int8x8_t *FxHashColorDescription(int8x8_t *a1, const FxColorDescription *a2)
{
  PCHashColorDescription(a1, &a2->_pcColorDesc);
  char isPremultiplied = a2->_isPremultiplied;

  return PCHashWriteStream::writeValue(a1, isPremultiplied);
}

BOOL operator!=(uint64_t a1, uint64_t a2, CGColorSpace *a3)
{
  return (*(unsigned char *)(a1 + 24) != 0) != (*(unsigned char *)(a2 + 24) != 0) || !operator==(a1, a2, a3);
}

void HGaussianBlur::HGaussianBlur(HGaussianBlur *this)
{
  HGNode::HGNode((HGNode *)this);
  void *v1 = &unk_1F1113118;
  v1[51] = 0;
  v1[52] = 0;
}

void HGaussianBlur::~HGaussianBlur(HGNode *this)
{
  *(void *)this = &unk_1F1113118;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HGaussianBlur::~HGaussianBlur(this);

  HGObject::operator delete(v1);
}

HConvolvePass8Tap8Bit *HGaussianBlur::init(HGaussianBlur *this, float a2, float a3, float a4, char a5, int a6, char a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    double v11 = a2 / 1.3;
    float v12 = v11;
    if (a2 >= 1.3)
    {
      float v19 = v11;
      float v20 = (float)(logf(v19) / 1.0397) + 1.0;
      if (v20 < 0.0) {
        float v20 = 0.0;
      }
      int v13 = 2 * (int)v20 + 2;
      if (v13 < 1)
      {
        uint64_t result = (HConvolvePass8Tap8Bit *)*((void *)this + 52);
        if (!result) {
          return result;
        }
        float v22 = 0;
        unint64_t v34 = (HConvolvePass8Tap8Bit **)((char *)this + 416);
        goto LABEL_47;
      }
      unint64_t v35 = this;
      float v12 = v20 - (float)(int)v20;
    }
    else
    {
      unint64_t v35 = this;
      int v13 = 2;
    }
    unsigned int v21 = 0;
    float v22 = 0;
    do
    {
      memset_pattern16(__b, &unk_1B837A9B0, 0x20uLL);
      if (v21 == v13 - 1 || v21 == v13 - 2) {
        float v24 = v12;
      }
      else {
        float v24 = 1.0;
      }
      float v25 = v24 * (float)(1 << (v21 >> 1));
      float v26 = v25 * a4;
      if (v21) {
        float v26 = 0.0;
      }
      float v27 = v25 * a3;
      if ((v21 & 1) == 0) {
        float v27 = 0.0;
      }
      v38[0] = vmulq_n_f32((float32x4_t)xmmword_1B837A990, v27);
      v38[1] = vmulq_n_f32((float32x4_t)xmmword_1B837A9A0, v27);
      v37[0] = vmulq_n_f32((float32x4_t)xmmword_1B837A990, v26);
      v37[1] = vmulq_n_f32((float32x4_t)xmmword_1B837A9A0, v26);
      if (!a6)
      {
        float v29 = (HgcConvolvePass8tap *)HGObject::operator new(0x1A0uLL);
        HgcConvolvePass8tap::HgcConvolvePass8tap(v29);
      }
      float v28 = (HConvolvePass8Tap8Bit *)HGObject::operator new(0x1A0uLL);
      HConvolvePass8Tap8Bit::HConvolvePass8Tap8Bit(v28);
      for (uint64_t i = 0; i != 8; ++i)
      {
        (*(void (**)(HConvolvePass8Tap8Bit *, uint64_t, float, float, double, double))(*(void *)v28 + 96))(v28, i, -*((float *)v38 + i), -*((float *)v37 + i), 0.0, 0.0);
        (*(void (**)(HConvolvePass8Tap8Bit *, void, float, float, float, float))(*(void *)v28 + 96))(v28, (i + 8), __b[i], __b[i], __b[i], __b[i]);
      }
      uint64_t v31 = *(void *)v28;
      if (v22)
      {
        (*(void (**)(HConvolvePass8Tap8Bit *, void, HConvolvePass8Tap8Bit *))(v31 + 120))(v28, 0, v22);
        uint64_t v32 = (*(uint64_t (**)(HConvolvePass8Tap8Bit *, void))(*(void *)v28 + 128))(v28, 0);
        *(_DWORD *)(v32 + 16) |= 2u;
        if (v22 != v28)
        {
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v22 + 24))(v22);
          float v22 = v28;
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v28 + 16))(v28);
        }
      }
      else
      {
        (*(void (**)(HConvolvePass8Tap8Bit *))(v31 + 16))(v28);
        unint64_t v33 = (HConvolvePass8Tap8Bit *)*((void *)v35 + 51);
        float v22 = v28;
        if (v33 != v28)
        {
          if (v33) {
            (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v33 + 24))(v33);
          }
          *((void *)v35 + 5atomic_store(0, (unint64_t *)this + 1) = v28;
          (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v28 + 16))(v28);
          float v22 = v28;
        }
      }
      (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v28 + 24))(v28);
      ++v21;
    }
    while (v21 != v13);
    uint64_t result = (HConvolvePass8Tap8Bit *)*((void *)v35 + 52);
    if (result == v22) {
      return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(void *)v22 + 24))(v22);
    }
    unint64_t v34 = (HConvolvePass8Tap8Bit **)((char *)v35 + 416);
    if (!result)
    {
LABEL_48:
      *unint64_t v34 = v22;
      if (!v22) {
        return result;
      }
      (*(void (**)(HConvolvePass8Tap8Bit *))(*(void *)v22 + 16))(v22);
      return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(void *)v22 + 24))(v22);
    }
LABEL_47:
    uint64_t result = (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HConvolvePass8Tap8Bit *))(*(void *)result + 24))(result);
    goto LABEL_48;
  }
  double v15 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v15);
  (*(void (**)(HGBlur *, void, float, float, double, double))(*(void *)v15 + 96))(v15, 0, fabsf(a2 * a3), fabsf(a2 * a4), 0.0, 0.0);
  if ((a7 & 1) == 0) {
    (*(void (**)(HGBlur *, uint64_t, float, double, double, double))(*(void *)v15 + 96))(v15, 2, 1.0, 0.0, 0.0, 0.0);
  }
  double v16 = (HGBlur *)*((void *)this + 51);
  if (v16 != v15)
  {
    if (v16) {
      (*(void (**)(HGBlur *))(*(void *)v16 + 24))(v16);
    }
    *((void *)this + 5atomic_store(0, (unint64_t *)this + 1) = v15;
    (*(void (**)(HGBlur *))(*(void *)v15 + 16))(v15);
  }
  double v17 = (HGBlur *)*((void *)this + 52);
  if (v17 != v15)
  {
    if (v17) {
      (*(void (**)(HGBlur *))(*(void *)v17 + 24))(v17);
    }
    *((void *)this + 5OZChannelEnum::~OZChannelEnum(this - 2) = v15;
    (*(void (**)(HGBlur *))(*(void *)v15 + 16))(v15);
  }
  return (HConvolvePass8Tap8Bit *)(*(uint64_t (**)(HGBlur *))(*(void *)v15 + 24))(v15);
}

void sub_1B7A1F5D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGaussianBlur::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v3 = *((void *)this + 51);
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(uint64_t, void, HGNode *))(*(void *)v3 + 120))(v3, 0, Input);
  return *((void *)this + 52);
}

uint64_t **FxDeviceMakeSetByAddingDeviceToSet(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t **)a1;
  if (a1)
  {
    CMTime __p = a2;
    if ((void *)(a1 + 8) != std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::find<FxDevice const*>(a1, (uint64_t *)&__p))return v3; {
    deviceSetToRegistryList(v3, &__p);
    }
  }
  else
  {
    CMTime __p = 0;
    int v13 = 0;
    uint64_t v14 = 0;
  }
  v11[0] = FxDeviceGetDeviceKey(a2);
  v11[1] = v4;
  int v6 = (char *)__p;
  uint64_t v5 = v13;
  if (v13 != __p)
  {
    unint64_t v7 = (v13 - (unsigned char *)__p) >> 4;
    do
    {
      uint64_t v8 = (uint64_t)&v6[16 * (v7 >> 1)];
      BOOL v9 = operator<(v8, (uint64_t)v11);
      if (v9) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v9) {
        int v6 = (char *)(v8 + 16);
      }
    }
    while (v7);
    uint64_t v5 = v6;
  }
  std::vector<FxDeviceKey>::insert((uint64_t)&__p, v5, (char *)v11);
  uint64_t v3 = findOrAddSetToSingletonMap((uint64_t *)&__p, (uint64_t)v3, (uint64_t)a2);
  if (__p)
  {
    int v13 = (char *)__p;
    operator delete(__p);
  }
  return v3;
}

void sub_1B7A1F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void deviceSetToRegistryList(void *a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      uint64_t DeviceKey = FxDeviceGetDeviceKey(v3[4]);
      uint64_t v8 = DeviceKey;
      uint64_t v9 = v7;
      double v11 = (uint64_t *)a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - (unsigned char *)*a2) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)*a2;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          double v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v5, v16);
        }
        else {
          double v17 = 0;
        }
        CMTime v18 = (uint64_t *)&v17[16 * v13];
        *CMTime v18 = v8;
        v18[1] = v9;
        float v20 = (char *)*a2;
        float v19 = (char *)a2[1];
        unsigned int v21 = v18;
        if (v19 != *a2)
        {
          do
          {
            *((_OWORD *)v21 - atomic_store(0, (unint64_t *)this + 1) = *((_OWORD *)v19 - 1);
            v21 -= 2;
            v19 -= 16;
          }
          while (v19 != v20);
          float v19 = (char *)*a2;
        }
        float v12 = v18 + 2;
        *a2 = v21;
        a2[1] = v18 + 2;
        a2[2] = &v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *double v11 = DeviceKey;
        v11[1] = v7;
        float v12 = v11 + 2;
      }
      a2[1] = v12;
      float v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          float v23 = v22;
          float v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          float v23 = (void *)v3[2];
          BOOL v24 = *v23 == (void)v3;
          uint64_t v3 = v23;
        }
        while (!v24);
      }
      uint64_t v3 = v23;
    }
    while (v23 != v2);
  }
}

void sub_1B7A1F9BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<FxDeviceKey>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(a1 + 16, v18);
    }
    else {
      float v19 = 0;
    }
    float v20 = &v19[16 * v16];
    CMTime __p = v19;
    float v27 = v20;
    float v28 = v20;
    float v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        float v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v8, v22);
        float v20 = &v23[16 * (v22 >> 2)];
        CMTime __p = v23;
        float v27 = v20;
        float v29 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        float v27 = v20;
      }
    }
    *(_OWORD *)float v20 = *(_OWORD *)v3;
    float v28 = v20 + 16;
    uint64_t v4 = (char *)std::vector<FxDeviceKey>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = __src + 16;
  }
  else
  {
    uint64_t v9 = __src + 16;
    unint64_t v10 = v6 - 16;
    double v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_1B7A1FBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **findOrAddSetToSingletonMap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  {
    operator new();
  }
  double v11 = (PCMutex *)getSingletonLock(void)::mutex;
  PCMutex::lock((PCMutex *)getSingletonLock(void)::mutex);
  char v12 = 1;
  {
    operator new();
  }
  int v6 = (uint64_t **)getSingletonMap(void)::result;
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::find<std::vector<FxDeviceKey>>(getSingletonMap(void)::result, a1);
  if (v6 + 1 == v7)
  {
    if (a2)
    {
      std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::set[abi:ne180100]((uint64_t *)&v9, a2);
      if (!a3) {
        goto LABEL_9;
      }
    }
    else
    {
      v10[0] = 0;
      v10[1] = 0;
      uint64_t v9 = (uint64_t *)v10;
      if (!a3)
      {
LABEL_9:
        unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__emplace_unique_key_args<std::vector<FxDeviceKey>,std::vector<FxDeviceKey> const&,FxDeviceSetObj>(v6, a1, (uint64_t)a1, &v9);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v9, v10[0]);
        goto LABEL_10;
      }
    }
    uint64_t v13 = a3;
    std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_unique_key_args<FxDevice const*,FxDevice const* const&>(&v9, &v13, &v13);
    goto LABEL_9;
  }
LABEL_10:
  if (v11 && v12) {
    PCMutex::unlock(v11);
  }
  return v7 + 7;
}

void sub_1B7A1FDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **FxDeviceGetAllGPUs(HGComputeDeviceManager *a1)
{
  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(a1);
  uint64_t v2 = *GPUComputeDeviceList;
  uint64_t v3 = GPUComputeDeviceList[1];
  if (*GPUComputeDeviceList == v3) {
    return 0;
  }
  SetByAddingDeviceToSet = 0;
  do
  {
    uint64_t v8 = *(uint64_t **)v2;
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    uint64_t v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DeviceForHGDevice = FxDeviceGetDeviceForHGDevice(&v8);
    SetByAddingDeviceToSet = FxDeviceMakeSetByAddingDeviceToSet((uint64_t)SetByAddingDeviceToSet, DeviceForHGDevice);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    v2 += 16;
  }
  while (v2 != v3);
  return SetByAddingDeviceToSet;
}

void sub_1B7A1FEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **FxDeviceComputeActiveGPUsSet(HGComputeDeviceManager *a1)
{
  AllGPUs = FxDeviceGetAllGPUs(a1);
  if (!AllGPUs) {
    return 0;
  }
  uint64_t v2 = AllGPUs + 1;
  uint64_t v3 = *AllGPUs;
  if (*AllGPUs == (uint64_t *)(AllGPUs + 1)) {
    return 0;
  }
  SetByAddingDeviceToSet = 0;
  do
  {
    uint64_t v5 = (void *)v3[4];
    if (FxDeviceIsSharedGPU((const void **)v5)) {
      SetByAddingDeviceToSet = FxDeviceMakeSetByAddingDeviceToSet((uint64_t)SetByAddingDeviceToSet, v5);
    }
    int v6 = (uint64_t *)v3[1];
    if (v6)
    {
      do
      {
        unint64_t v7 = v6;
        int v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        unint64_t v7 = (uint64_t *)v3[2];
        BOOL v8 = *v7 == (void)v3;
        uint64_t v3 = v7;
      }
      while (!v8);
    }
    uint64_t v3 = v7;
  }
  while (v7 != (uint64_t *)v2);
  return SetByAddingDeviceToSet;
}

uint64_t FxDeviceLogActiveSet(void *a1)
{
  return logGPUList("Active GPUs", a1);
}

uint64_t logGPUList(const char *a1, void *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  size_t v4 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)a1, v4);
  if (a2)
  {
    unint64_t v7 = (void *)*a2;
    uint64_t v5 = a2 + 1;
    int v6 = v7;
    if (v7 != v5)
    {
      BOOL v8 = ": ";
      do
      {
        uint64_t v9 = (const void **)v6[4];
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, 2);
        FxDeviceGetLogStdString(v9);
        if ((v19 & 0x80u) == 0) {
          double v11 = __p;
        }
        else {
          double v11 = (void **)__p[0];
        }
        if ((v19 & 0x80u) == 0) {
          uint64_t v12 = v19;
        }
        else {
          uint64_t v12 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
        if ((char)v19 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v13 = (void *)v6[1];
        if (v13)
        {
          do
          {
            unint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unint64_t v14 = (void *)v6[2];
            BOOL v15 = *v14 == (void)v6;
            int v6 = v14;
          }
          while (!v15);
        }
        BOOL v8 = ", ";
        int v6 = v14;
      }
      while (v14 != v5);
    }
  }
  std::stringbuf::str();
  if ((v19 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  NSLog(&cfstr_S_5.isa, v16);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v22);
}

void sub_1B7A201E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::find<FxDevice const*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = FxDeviceSortOrder(v3[4], *a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || FxDeviceSortOrder(*a2, v5[4])) {
    return v2;
  }
  return v5;
}

void *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::find<std::vector<FxDeviceKey>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  size_t v4 = std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__lower_bound<std::vector<FxDeviceKey>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  if (std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(*a2, a2[1], v5[4], v5[5]))return v3; {
  return v5;
  }
}

void *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__lower_bound<std::vector<FxDeviceKey>>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v7 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(v5[4], v5[5], *a2, a2[1]);
      BOOL v8 = v5 + 1;
      if (!v7)
      {
        BOOL v8 = v5;
        a4 = v5;
      }
      uint64_t v5 = (void *)*v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return 0;
  }
  uint64_t v5 = a3;
  while (a1 != a2 && !operator<(a1, v5))
  {
    BOOL v8 = operator<(v5, a1);
    uint64_t result = 0;
    if (!v8)
    {
      a1 += 16;
      v5 += 16;
      if (v5 != a4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

uint64_t *std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::insert[abi:ne180100]<std::__tree_const_iterator<FxDevice const*,std::__tree_node<FxDevice const*,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B7A2043C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::insert[abi:ne180100]<std::__tree_const_iterator<FxDevice const*,std::__tree_node<FxDevice const*,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    size_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_hint_unique_key_args<FxDevice const*,FxDevice const* const&>(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          size_t v4 = v8;
        }
        while (!v9);
      }
      size_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_hint_unique_key_args<FxDevice const*,FxDevice const* const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !FxDeviceSortOrder(*a5, a2[4]))
  {
    if (!FxDeviceSortOrder(a2[4], *a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (void *)a2[1];
      do
      {
        BOOL v15 = v14;
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        BOOL v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!FxDeviceSortOrder(*a5, v15[4])) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (FxDeviceSortOrder(v12[4], *a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>((uint64_t)a1, a3, a5);
}

void *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        if (!FxDeviceSortOrder(*a3, v4[4])) {
          break;
        }
        size_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!FxDeviceSortOrder(v7[4], *a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__emplace_unique_key_args<FxDevice const*,FxDevice const* const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<FxDevice const*,FxDeviceSortOrderFunctor,std::allocator<FxDevice const*>>::__find_equal<FxDevice const*>((uint64_t)a1, &v9, a2);
  int v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    int v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__emplace_unique_key_args<std::vector<FxDeviceKey>,std::vector<FxDeviceKey> const&,FxDeviceSetObj>(uint64_t **a1, uint64_t *a2, uint64_t a3, void *a4)
{
  int v7 = (uint64_t **)std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__find_equal<std::vector<FxDeviceKey>>((uint64_t)a1, &v12, a2);
  BOOL v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__construct_node<std::vector<FxDeviceKey> const&,FxDeviceSetObj>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    BOOL v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__find_equal<std::vector<FxDeviceKey>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(*a3, a3[1], v4[4], v4[5]))break; {
        size_t v4 = (void *)*v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<FxDeviceKey const*>,std::__wrap_iter<FxDeviceKey const*>>(v7[4], v7[5], *a3, a3[1]))break; {
      uint64_t v5 = v7 + 1;
      }
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::__map_value_compare<std::vector<FxDeviceKey>,std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,std::less<std::vector<FxDeviceKey>>,true>,std::allocator<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>>>::__construct_node<std::vector<FxDeviceKey> const&,FxDeviceSetObj>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  BOOL v8 = operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>::pair[abi:ne180100]<std::vector<FxDeviceKey> const&,FxDeviceSetObj,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B7A209A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>::pair[abi:ne180100]<std::vector<FxDeviceKey> const&,FxDeviceSetObj,0>(void *a1, uint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<FxDeviceKey>::__init_with_size[abi:ne180100]<FxDeviceKey*,FxDeviceKey*>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  a1[3] = *a3;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  a1[4] = v6;
  uint64_t v7 = a1 + 4;
  uint64_t v8 = a3[2];
  a1[5] = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    a1[3] = v7;
  }
  return a1;
}

void *std::vector<FxDeviceKey>::__init_with_size[abi:ne180100]<FxDeviceKey*,FxDeviceKey*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B7A20A94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + OZSpline::reparametrize((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<FxDeviceKey>,FxDeviceSetObj const>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<FxDeviceKey> const,FxDeviceSetObj const>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
}

void *std::vector<FxDeviceKey>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  BOOL v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

HGNode *applyColorSpaceConform@<X0>(CGColorSpaceRef space@<X1>, CGColorSpace *a2@<X3>, uint64_t *a3@<X0>, CGColorSpace *a4@<X2>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (PCColorSpaceHandle::isSameColorSpace(space, a2, a4))
  {
    return (HGNode *)applyPremultiplyOnly(a3, (int)a4, (int)a5, a6);
  }
  else
  {
    unint64_t RGBNCLCFromRGBColorSpace = getRGBNCLCFromRGBColorSpace(space);
    int v18 = v13;
    if (PCNCLCCodeIsKnownRGB(&RGBNCLCFromRGBColorSpace)
      && (*(void *)buf = getRGBNCLCFromRGBColorSpace(a2), *(_DWORD *)&buf[8] = v14, PCNCLCCodeIsKnownRGB(buf)))
    {
      return applyNCLCConform(a3, (int *)&RGBNCLCFromRGBColorSpace, (uint64_t)a4, (int *)buf, a5, a6);
    }
    else
    {
      CFStringRef v15 = CFCopyDescription(space);
      CFStringRef v16 = CFCopyDescription(a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&buf[4] = v15;
        __int16 v20 = 2112;
        CFStringRef v21 = v16;
        _os_log_impl(&dword_1B73F3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unsupported color space arguments in FxApplyColorConform(): %@ and %@", buf, 0x16u);
      }
      CFRelease(v15);
      CFRelease(v16);
      return (HGNode *)applyPremultiplyOnly(a3, (int)a4, (int)a5, a6);
    }
  }
}

HGNode *FxApplyColorConform@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v16 = PCMakeRGBNCLCCode(a2);
  int v17 = v11;
  uint64_t v14 = PCMakeRGBNCLCCode(a4);
  int v15 = v12;
  return applyNCLCConform(a1, (int *)&v16, a3, (int *)&v14, a5, a6);
}

HGNode *applyNCLCConform@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (operator==((uint64_t)a2, (uint64_t)a4))
  {
    return (HGNode *)applyPremultiplyOnly(a1, a3, (int)a5, a6);
  }
  else
  {
    uint64_t v31 = a6;
    int v13 = *a2 - 5;
    if (v13 > 7) {
      int v30 = 0;
    }
    else {
      int v30 = dword_1B837A9E0[v13];
    }
    int HGTransfer = getHGTransfer((uint64_t)a2);
    int v15 = a2[2] - 1;
    if (v15 > 8) {
      int v16 = 0;
    }
    else {
      int v16 = dword_1B837AA00[v15];
    }
    int v17 = *a4 - 5;
    if (v17 > 7) {
      int v18 = 0;
    }
    else {
      int v18 = dword_1B837A9E0[v17];
    }
    int v19 = getHGTransfer((uint64_t)a4);
    int v20 = a4[2] - 1;
    if (v20 > 8) {
      int v21 = 0;
    }
    else {
      int v21 = dword_1B837AA00[v20];
    }
    FxSupport::newHGRefWithInput<HGColorConform>(*a1, (HGColorConform **)&v32);
    HGColorConform::SetPremultiplyState(v32, a3, a5);
    if ((HGColorConform::SetConversion((uint64_t)v32, v30, HGTransfer, v16, v18, v19, v21) & 1) == 0
      && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *a2;
      int v24 = a2[1];
      int v25 = a2[2];
      int v26 = *a4;
      int v27 = a4[1];
      int v28 = a4[2];
      *(_DWORD *)buf = 67110400;
      int v34 = v23;
      __int16 v35 = 1024;
      int v36 = v24;
      __int16 v37 = 1024;
      int v38 = v25;
      __int16 v39 = 1024;
      int v40 = v26;
      __int16 v41 = 1024;
      int v42 = v27;
      __int16 v43 = 1024;
      int v44 = v28;
      _os_log_impl(&dword_1B73F3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unsupported nclc arguments in FxApplyColorConform(): (%d-%d-%d) and (%d-%d-%d)", buf, 0x26u);
    }
    HGColorConform::SetToneQualityMode(v32, 2, v22);
    uint64_t result = HGColorConform::SetAntiSymmetricToneCurves(v32, 1, v29);
    *uint64_t v31 = v32;
  }
  return result;
}

void sub_1B7A210FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

HGNode *FxApplyColorConform@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  if (!operator==((uint64_t)a2, (uint64_t)a3, (CGColorSpace *)a3)
    && FxColorDescription::isColorManaged(a2)
    && (FxColorDescription::isColorManaged(a3) & 1) != 0)
  {
    if (FxColorDescriptionCanToneMap(a2))
    {
      int isSDR = FxColorDescription::isSDR(a2);
      if (isSDR == FxColorDescription::isSDR(a3)
        || (int isHDR = FxColorDescription::isHDR(a2), isHDR == FxColorDescription::isHDR(a3)))
      {
        uint64_t DynamicRange = FxColorDescription::getDynamicRange(a2);
        FxColorDescription::setDynamicRange(a3, DynamicRange);
        ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(a2);
        FxColorDescription::setToneMapMethod(a3, ToneMapMethod);
      }
      else
      {
        if (FxColorDescription::isSDR(a2) && FxColorDescription::isHDR(a3))
        {
          return (HGNode *)conformInverseToneMap(a1, a2, a3, a4);
        }
        if (FxColorDescription::isHDR(a2) && FxColorDescription::isSDR(a3))
        {
          return (HGNode *)conformToneMap(a1, a2, a3, a4);
        }
      }
    }
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    BOOL isPremultiplied = FxColorDescription::isPremultiplied(a2);
    int v16 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v17 = FxColorDescription::isPremultiplied(a3);
    return applyColorSpaceConform(CGColorSpace, v16, a1, (CGColorSpace *)isPremultiplied, (char *)v17, a4);
  }
  else
  {
    uint64_t result = (HGNode *)*a1;
    *a4 = *a1;
    if (result)
    {
      int v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (HGNode *)v11();
    }
  }
  return result;
}

uint64_t conformInverseToneMap@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  ToneMapMethod = (PVPerfStats::FrameStats *)FxColorDescription::getToneMapMethod(a2);
  if ((PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4
     || PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
    && FxColorDescription::isPremultiplied(a2)
    && FxColorDescription::isPremultiplied(a3))
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    if (PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v8, v11))
    {
      int v12 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
      if (PCColorSpaceHandle::isSameColorSpace(v12, v8, v13))
      {
        int Size = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
        if (Size == 5) {
          float Gain = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
        }
        else {
          PCColorUtil::getHLGDiffuseWhiteGain(Size);
        }
        return FxApplyGain(a1, a4, Gain);
      }
    }
  }
  *a4 = 0;
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 6)
  {
    int v16 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    BOOL isPremultiplied = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v16, v8, a1, (CGColorSpace *)isPremultiplied, 0, (uint64_t *)&v67);
    uint64_t v18 = *a4;
    unint64_t v19 = v67;
    if (*a4 == v67)
    {
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      }
    }
    else
    {
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      }
      *a4 = v19;
    }
    FxApplyInverseSimpleToneCurve(a4, &v67, 0.7, 12.0);
    uint64_t v28 = *a4;
    unint64_t v29 = v67;
    if (*a4 == v67)
    {
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
      }
    }
    else
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
        unint64_t v29 = v67;
      }
      *a4 = v29;
    }
    int v30 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v31 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v30, a4, 0, (char *)v31, (uint64_t *)&v67);
    uint64_t result = *a4;
    unint64_t v33 = v67;
    if (*a4 != v67)
    {
      if (result) {
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4)
  {
    int v20 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    BOOL v21 = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v20, v8, a1, (CGColorSpace *)v21, 0, (uint64_t *)&v67);
    uint64_t v22 = (PCColorUtil *)*a4;
    unint64_t v23 = v67;
    if (*a4 == v67)
    {
      if (v22) {
        uint64_t v22 = (PCColorUtil *)(*(uint64_t (**)(PCColorUtil *))(*(void *)v22 + 24))(v22);
      }
    }
    else
    {
      if (v22) {
        uint64_t v22 = (PCColorUtil *)(*(uint64_t (**)(PCColorUtil *))(*(void *)v22 + 24))(v22);
      }
      *a4 = v23;
    }
    PCColorUtil::getHLGDiffuseWhiteGain(v22);
    FxApplyGain(a4, (uint64_t *)&v67, v37);
    uint64_t v38 = *a4;
    unint64_t v39 = v67;
    if (*a4 == v67)
    {
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
      }
    }
    else
    {
      if (v38)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
        unint64_t v39 = v67;
      }
      *a4 = v39;
    }
    int v40 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v41 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v40, a4, 0, (char *)v41, (uint64_t *)&v67);
    uint64_t result = *a4;
    unint64_t v33 = v67;
    if (*a4 != v67)
    {
      if (result) {
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
  {
    int v24 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    BOOL v25 = FxColorDescription::isPremultiplied(a2);
    applyColorSpaceConform(v24, v8, a1, (CGColorSpace *)v25, 0, (uint64_t *)&v67);
    uint64_t v26 = *a4;
    unint64_t v27 = v67;
    if (*a4 == v67)
    {
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
      }
    }
    else
    {
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
      }
      *a4 = v27;
    }
    float v50 = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
    FxApplyGain(a4, (uint64_t *)&v67, v50);
    uint64_t v51 = *a4;
    unint64_t v52 = v67;
    if (*a4 == v67)
    {
      if (v51) {
        (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
      }
    }
    else
    {
      if (v51)
      {
        (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
        unint64_t v52 = v67;
      }
      *a4 = v52;
    }
    long double v53 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v54 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v53, a4, 0, (char *)v54, (uint64_t *)&v67);
    uint64_t result = *a4;
    unint64_t v33 = v67;
    if (*a4 != v67)
    {
      if (result) {
LABEL_78:
      }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
LABEL_79:
      *a4 = v33;
      return result;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  BOOL v34 = FxColorDescription::isPremultiplied(a2);
  applyPremultiplyOnly(a1, v34, 0, (uint64_t *)&v67);
  uint64_t v35 = *a4;
  unint64_t v36 = v67;
  if (*a4 == v67)
  {
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
    }
  }
  else
  {
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
    }
    *a4 = v36;
  }
  int v42 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  unint64_t v67 = PCGetNCLCCodeForColorSpace(v42);
  int v68 = v43;
  int v66 = 0;
  int v44 = PVPerfStats::FrameStats::GetSize(ToneMapMethod);
  if (v44 == 3) {
    int v45 = 2;
  }
  else {
    int v45 = 1;
  }
  if (v44 == 1) {
    int v45 = 0;
  }
  int v65 = 0;
  int v66 = v45;
  if (v44 != 3)
  {
    if (PCNCLCCodeCompareRGB(&v67, &kPCNCLC_Rec709))
    {
      int v65 = 0;
      goto LABEL_91;
    }
    if (PCNCLCCodeCompareRGB(&v67, &kPCNCLC_P3_D65))
    {
      int v65 = 1;
      goto LABEL_91;
    }
    int v65 = 2;
    uint64_t v61 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
    CMTime v62 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    applyColorSpaceConform(v62, v61, a4, 0, 0, &v64);
    uint64_t v48 = *a4;
    uint64_t v49 = v64;
    if (*a4 != v64)
    {
      if (!v48) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    if (!v48) {
      goto LABEL_91;
    }
LABEL_90:
    (*(void (**)(uint64_t))(*(void *)v48 + 24))(v48);
    goto LABEL_91;
  }
  long long v46 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
  double v47 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  applyColorSpaceConform(v47, v46, a4, 0, 0, &v64);
  uint64_t v48 = *a4;
  uint64_t v49 = v64;
  if (*a4 == v64)
  {
    if (!v48) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  if (v48) {
LABEL_64:
  }
    (*(void (**)(uint64_t))(*(void *)v48 + 24))(v48);
LABEL_65:
  *a4 = v49;
  uint64_t v64 = 0;
LABEL_91:
  FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>(*a4, &v65, &v66, &v64);
  HGHLG::HLGToSDR::SetToneQualityMode(v64, 2);
  uint64_t v55 = *a4;
  uint64_t v56 = v64;
  if (*a4 != v64)
  {
    if (v55)
    {
      (*(void (**)(uint64_t))(*(void *)v55 + 24))(*a4);
      uint64_t v56 = v64;
    }
    *a4 = v56;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
    }
  }
  double v57 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
  BOOL v58 = FxColorDescription::isPremultiplied(a3);
  applyColorSpaceConform(v8, v57, a4, 0, (char *)v58, &v63);
  uint64_t v59 = *a4;
  uint64_t v60 = v63;
  if (*a4 == v63)
  {
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
    }
  }
  else
  {
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
    }
    *a4 = v60;
  }
  uint64_t result = v64;
  if (v64) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v64 + 24))(v64);
  }
  return result;
}

void sub_1B7A21D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  if (*v13) {
    (*(void (**)(void))(*(void *)*v13 + 24))(*v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t conformToneMap@<X0>(uint64_t *a1@<X0>, FxColorDescription *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  ToneMapMethod = (PVPerfStats::FrameStats *)FxColorDescription::getToneMapMethod(a2);
  if ((PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 4
     || PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
    && FxColorDescription::isPremultiplied(a2)
    && FxColorDescription::isPremultiplied(a3))
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
    if (PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v8, v11))
    {
      int v12 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
      if (PCColorSpaceHandle::isSameColorSpace(v12, v8, v13))
      {
        int Size = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
        if (Size == 5) {
          float Gain = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
        }
        else {
          PCColorUtil::getHLGDiffuseWhiteGain(Size);
        }
        float v52 = 1.0 / Gain;
        return FxApplyGain(a1, a4, v52);
      }
    }
  }
  int v16 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a2);
  BOOL isPremultiplied = FxColorDescription::isPremultiplied(a2);
  applyColorSpaceConform(v16, v8, a1, (CGColorSpace *)isPremultiplied, 0, a4);
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 6)
  {
    FxApplySimpleToneCurve(a4, &v54, 0.7, 12.0);
    uint64_t v18 = *a4;
    unint64_t v19 = v54;
    if (*a4 == v54)
    {
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      }
    }
    else
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
        unint64_t v19 = v54;
      }
      *a4 = v19;
    }
    unint64_t v27 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v28 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v27, a4, 0, (char *)v28, (uint64_t *)&v54);
    uint64_t result = *a4;
    unint64_t v30 = v54;
    if (*a4 != v54)
    {
      if (result) {
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  int v20 = (PCColorUtil *)PVPerfStats::FrameStats::GetSize(ToneMapMethod);
  if (v20 == 4)
  {
    PCColorUtil::getHLGDiffuseWhiteGain(v20);
    FxApplyGain(a4, (uint64_t *)&v54, 1.0 / v21);
    uint64_t v22 = *a4;
    unint64_t v23 = v54;
    if (*a4 == v54)
    {
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      }
    }
    else
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
        unint64_t v23 = v54;
      }
      *a4 = v23;
    }
    uint64_t v38 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v39 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v38, a4, 0, (char *)v39, (uint64_t *)&v54);
    uint64_t result = *a4;
    unint64_t v30 = v54;
    if (*a4 != v54)
    {
      if (result) {
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 5)
  {
    float v24 = PCToneMapMethod::getGain((PCToneMapMethod *)ToneMapMethod);
    FxApplyGain(a4, (uint64_t *)&v54, 1.0 / v24);
    uint64_t v25 = *a4;
    unint64_t v26 = v54;
    if (*a4 == v54)
    {
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
      }
    }
    else
    {
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
        unint64_t v26 = v54;
      }
      *a4 = v26;
    }
    int v45 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v46 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v45, a4, 0, (char *)v46, (uint64_t *)&v54);
    uint64_t result = *a4;
    unint64_t v30 = v54;
    if (*a4 != v54)
    {
      if (result) {
LABEL_59:
      }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
LABEL_60:
      *a4 = v30;
      return result;
    }
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  int v58 = 0;
  if (PVPerfStats::FrameStats::GetSize(ToneMapMethod) == 3) {
    int v31 = 1;
  }
  else {
    int v31 = 2;
  }
  int v58 = v31;
  FxSupport::newHGRefWithInput<HGHLG::HLGToSDR,HGHLG::HLGToSDR::ConversionMethod const&>(*a4, &v58, &v57);
  HGHLG::HLGToSDR::SetToneQualityMode((uint64_t)v57, 2);
  HGHLG::HLGToSDR::SetMinimumInputValueZero((uint64_t)v57, 1);
  if (v58 != 1)
  {
    HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v57, 0);
    int v40 = v57;
    uint64_t v56 = v57;
    if (v57) {
      (*(void (**)(HGHLG::HLGToSDR *))(*(void *)v57 + 16))(v57);
    }
    BOOL v41 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v42 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v8, v41, (uint64_t *)&v56, 0, (char *)v42, (uint64_t *)&v54);
    uint64_t v43 = *a4;
    unint64_t v44 = v54;
    if (*a4 == v54)
    {
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
      }
    }
    else
    {
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
      }
      *a4 = v44;
      unint64_t v54 = 0;
    }
    if (v40) {
      (*(void (**)(HGHLG::HLGToSDR *))(*(void *)v40 + 24))(v40);
    }
    goto LABEL_86;
  }
  HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v57, 1);
  uint64_t v32 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
  unint64_t v54 = PCGetNCLCCodeForColorSpace(v32);
  int v55 = v33;
  if (PCNCLCCodeCompareRGB(&v54, &kPCNCLC_Rec709))
  {
    BOOL v34 = v57;
    long double v53 = v57;
    if (v57) {
      (*(void (**)(HGHLG::HLGToSDR *))(*(void *)v57 + 16))(v57);
    }
    BOOL v35 = FxColorDescription::isPremultiplied(a3);
    applyPremultiplyOnly((uint64_t *)&v53, 0, v35, (uint64_t *)&v56);
    uint64_t v36 = *a4;
    float v37 = v56;
    if ((HGHLG::HLGToSDR *)*a4 == v56)
    {
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
      }
    }
    else
    {
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
      }
      *a4 = (uint64_t)v37;
      uint64_t v56 = 0;
    }
    if (!v34) {
      goto LABEL_86;
    }
  }
  else
  {
    double v47 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
    BOOL v34 = v57;
    long double v53 = v57;
    if (v57) {
      (*(void (**)(HGHLG::HLGToSDR *))(*(void *)v57 + 16))(v57);
    }
    uint64_t v48 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a3);
    BOOL v49 = FxColorDescription::isPremultiplied(a3);
    applyColorSpaceConform(v47, v48, (uint64_t *)&v53, 0, (char *)v49, (uint64_t *)&v56);
    uint64_t v50 = *a4;
    uint64_t v51 = v56;
    if ((HGHLG::HLGToSDR *)*a4 == v56)
    {
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 24))(v50);
      }
    }
    else
    {
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 24))(v50);
      }
      *a4 = (uint64_t)v51;
      uint64_t v56 = 0;
    }
    if (!v34) {
      goto LABEL_86;
    }
  }
  (*(void (**)(HGHLG::HLGToSDR *))(*(void *)v34 + 24))(v34);
LABEL_86:
  uint64_t result = (uint64_t)v57;
  if (v57) {
    return (*(uint64_t (**)(HGHLG::HLGToSDR *))(*(void *)v57 + 24))(v57);
  }
  return result;
}

void sub_1B7A229CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24))(a13);
  }
  if (*v13) {
    (*(void (**)(void))(*(void *)*v13 + 24))(*v13);
  }
  _Unwind_Resume(exception_object);
}

void FxConvertHLGToPQ(uint64_t *a1, CGColorSpace *a2, CGColorSpace *a3)
{
  uint64_t v6 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  applyColorSpaceConform(a2, v6, a1, a3, 0, &v8);
  int v7 = 1;
  FxSupport::newHGRefWithInput<HGHLG::OOTF,HGHLG::OOTF::ColorPrimaries const&>();
}

void sub_1B7A22F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applyPremultiplyOnly@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  if (a2 != a3)
  {
    if (a2) {
      FxSupport::newHGRefWithInput<HGUnpremultiply>();
    }
    FxSupport::newHGRefWithInput<HGPremultiply>();
  }
  uint64_t result = *a1;
  *a4 = result;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

unint64_t getRGBNCLCFromRGBColorSpace(CGColorSpace *a1)
{
  unint64_t v3 = PCGetNCLCCodeForColorSpace(a1);
  int v4 = v1;
  if (PCNCLCCodeIsKnownRGB(&v3)) {
    return PCMakeRGBNCLCCode(v3, HIDWORD(v3));
  }
  else {
    return 0x200000002;
  }
}

void FxSupport::newHGRefWithInput<HGUnpremultiply>()
{
  v0 = (HGUnpremultiply *)HGObject::operator new(0x1A0uLL);
  HGUnpremultiply::HGUnpremultiply(v0);
}

void sub_1B7A231F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void FxSupport::newHGRefWithInput<HGPremultiply>()
{
  v0 = (HGPremultiply *)HGObject::operator new(0x1A0uLL);
  HGPremultiply::HGPremultiply(v0);
}

void sub_1B7A232A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t getHGTransfer(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 8;
  if (v1 > 0xA) {
    return 1;
  }
  else {
    return dword_1B837AA24[v1];
  }
}

uint64_t FxSupport::newHGRefWithInput<HGColorConform>@<X0>(uint64_t a1@<X0>, HGColorConform **a2@<X8>)
{
  int v4 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGColorConform *, void, uint64_t))(*(void *)v4 + 120))(v4, 0, a1);
}

void sub_1B7A23388(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = HGObject::operator new(0x1B0uLL);
  HGHLG::SDRToHLG::SDRToHLG((uint64_t)v8, *a2, *a3);
  *a4 = v8;
  return (*(uint64_t (**)(void *, void, uint64_t))(*(void *)v8 + 120))(v8, 0, a1);
}

void sub_1B7A23458(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGHLG::HLGToSDR,HGHLG::HLGToSDR::ConversionMethod const&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = HGObject::operator new(0x1B0uLL);
  HGHLG::HLGToSDR::HLGToSDR((uint64_t)v6, *a2);
  *a3 = v6;
  return (*(uint64_t (**)(void *, void, uint64_t))(*(void *)v6 + 120))(v6, 0, a1);
}

void sub_1B7A23518(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void FxSupport::newHGRefWithInput<HGHLG::OOTF,HGHLG::OOTF::ColorPrimaries const&>()
{
  v0 = (HGNode *)HGObject::operator new(0x1C0uLL);
  HGHLG::OOTF::OOTF(v0);
}

void sub_1B7A235E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGPQ::InverseOOTF>@<X0>(uint64_t a1@<X0>, HGPQ::InverseOOTF **a2@<X8>)
{
  int v4 = (HGPQ::InverseOOTF *)HGObject::operator new(0x1B0uLL);
  HGPQ::InverseOOTF::InverseOOTF(v4, 1, 100.0, 100.0);
  *a2 = v4;
  return (*(uint64_t (**)(HGPQ::InverseOOTF *, void, uint64_t))(*(void *)v4 + 120))(v4, 0, a1);
}

void sub_1B7A236B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void FxApplyGradientBlendRequest()
{
  v0 = (HGradientBlend *)HGObject::operator new(0x1A0uLL);
  HGradientBlend::HGradientBlend(v0);
}

void sub_1B7A237A0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::makeHeliumFormat(int a1)
{
  if ((a1 - 1) > 0x10) {
    return 0;
  }
  else {
    return dword_1B837AA98[a1 - 1];
  }
}

uint64_t FxSupport::createTextureHandleNode@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, HGBitmapLoader **a5@<X8>)
{
  unsigned int Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)a1);
  unsigned int Width = ProGL::TextureHandle::getWidth((ProGL::Private::TextureImpl **)a1);
  unsigned int Height = ProGL::TextureHandle::getHeight((ProGL::Private::TextureImpl **)a1);
  uint64_t v13 = HGRectMake4i(*a4, a4[1], *a4 + Width, a4[1] + Height);
  uint64_t v15 = v14;
  int v16 = (HGBitmap *)HGObject::operator new(0xC8uLL);
  HGGLTexture::HGGLTexture((uint64_t)v16, v13, v15, a2, a3, Name, 1);
  BOOL v17 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v17);
  *(void *)BOOL v17 = &unk_1F1113380;
  uint64_t v18 = *(void *)(a1 + 8);
  *((void *)v17 + OZChannelEnum::~OZChannelEnum(this - 2) = *(void *)a1;
  *((void *)v17 + 3) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  HGBitmap::SetStorage(v16, v17);
  unint64_t v19 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v19, v16);
  *a5 = v19;
  uint64_t result = (*(uint64_t (**)(HGObject *))(*(void *)v17 + 24))(v17);
  if (v16) {
    return (*(uint64_t (**)(HGBitmap *))(*(void *)v16 + 24))(v16);
  }
  return result;
}

void sub_1B7A23978(_Unwind_Exception *a1)
{
  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

HGBitmapLoader *FxSupport::createBitmapNode@<X0>(PCBitmap **a1@<X0>, unsigned int *a2@<X1>, HGBitmapLoader **a3@<X8>)
{
  FxSupport::pcBitmapToHGBitmap(a1, a2, &v7);
  int v4 = v7;
  uint64_t v5 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  uint64_t result = HGBitmapLoader::HGBitmapLoader(v5, v4);
  *a3 = v5;
  if (v4) {
    return (HGBitmapLoader *)(*(uint64_t (**)(HGBitmap *))(*(void *)v4 + 24))(v4);
  }
  return result;
}

void sub_1B7A23AA0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t FxSupport::pcBitmapToHGBitmap@<X0>(PCBitmap **a1@<X0>, unsigned int *a2@<X1>, HGBitmap **a3@<X8>)
{
  int v6 = (*(uint64_t (**)(void))(**((void **)*a1 + 8) + 48))(*((void *)*a1 + 8));
  uint64_t HeliumFormat = FxSupport::makeHeliumFormat(v6);
  int v8 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  int v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  uint64_t v10 = HGRectMake4i(*a2, a2[1], *a2 + v8, a2[1] + v9);
  uint64_t v12 = v11;
  uint64_t v13 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v13);
  *(void *)uint64_t v13 = &unk_1F11133D0;
  uint64_t v14 = a1[1];
  *((void *)v13 + OZChannelEnum::~OZChannelEnum(this - 2) = *a1;
  *((void *)v13 + 3) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (*(uint64_t (**)(void))(**((void **)*a1 + 8) + 16))(*((void *)*a1 + 8));
  unsigned int BytesPerRow = PCBitmap::getBytesPerRow(*a1);
  Allocationint Size = PCBitmap::getAllocationSize(*a1);
  uint64_t v18 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v18, v10, v12, HeliumFormat, v15, BytesPerRow, AllocationSize);
  *a3 = v18;
  HGBitmap::SetStorage(v18, v13);
  return (*(uint64_t (**)(HGObject *))(*(void *)v13 + 24))(v13);
}

void sub_1B7A23CC8(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::TextureHandleStorage::~TextureHandleStorage(_anonymous_namespace_::TextureHandleStorage *this)
{
  *(void *)this = &unk_1F1113380;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  HGObject::~HGObject(this);
}

{
  void *v1;
  uint64_t vars8;

  HGObject::operator delete(v1);
}

void anonymous namespace'::BitmapStorage::~BitmapStorage(_anonymous_namespace_::BitmapStorage *this)
{
  *(void *)this = &unk_1F11133D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  HGObject::~HGObject(this);
}

{
  void *v1;
  uint64_t vars8;

  HGObject::operator delete(v1);
}

double FxDeviceGetComputeDeviceForRenderer@<D0>(const HGRenderer *a1@<X0>, void *a2@<X8>)
{
  if (a1
  {
    GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(a1);
    uint64_t v6 = *(void *)*GPUComputeDeviceList;
    uint64_t v5 = *(void *)(*GPUComputeDeviceList + 8);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    *a2 = v6;
    a2[1] = v5;
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice(a1, &v7);
    double result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
  }
  return result;
}

uint64_t FxDeviceGetVirtualScreenForComputeDevice(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!v2[2]) {
    return 0xFFFFFFFFLL;
  }
  if (v3)
  {
    int v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return GLVirtualScreen;
}

void sub_1B7A23FB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FxDeviceIsCPU(const void **a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*(void *)v1
    {
      unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
      uint64_t v1 = 1;
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t FxDeviceIsGPU(const void **a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*(void *)v1
    {
      unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
      uint64_t v1 = 1;
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void *FxDeviceGetHGDeviceForGPU@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result {
    && (v3 = result, (double result = (void *)*result) != 0)
  }
  {
    uint64_t v4 = v3[1];
    *a2 = result;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t *FxDeviceGetName(uint64_t a1)
{
  if (a1)
  {
    if (FxDeviceIsGPU((const void **)a1))
    {
      uint64_t v2 = *(uint64_t **)a1;
      if (!*(void *)a1) {
        return v2 + 8;
      }
LABEL_8:
      if (v2)
      {
        uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
        if (v4)
        {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v5 = v2 + 8;
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          return v5;
        }
      }
      return v2 + 8;
    }
    if (FxDeviceIsCPU((const void **)a1))
    {
      uint64_t v2 = *(uint64_t **)a1;
      if (!*(void *)a1) {
        return v2 + 8;
      }
      goto LABEL_8;
    }
  }
  uint64_t v5 = &FxDeviceGetName(FxDevice const*)::empty;
  {
    FxDeviceGetName(FxDevice const*)::empty = 0;
    *(void *)algn_1E9EE5948 = 0;
    qword_1E9EE5950 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA210], &FxDeviceGetName(FxDevice const*)::empty, &dword_1B73F3000);
  }
  return v5;
}

uint64_t FxDeviceGetMemorySize(uint64_t a1)
{
  if (!FxDeviceIsGPU((const void **)a1)) {
    return 0;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return v2[14];
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v4 = v2[14];
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

BOOL FxDeviceIsHeadless(uint64_t a1)
{
  if (!FxDeviceIsGPU((const void **)a1)) {
    return 0;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return v2[154] != 0;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v4 = v2[154] != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

BOOL FxDeviceIsRemovable(uint64_t a1)
{
  if (!FxDeviceIsGPU((const void **)a1)) {
    return 0;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return v2[153] != 0;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v4 = v2[153] != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

uint64_t FxDeviceIsDisplayAttached(uint64_t a1)
{
  if (!FxDeviceIsGPU((const void **)a1)) {
    return 0;
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1
  {
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v4 = TXParagraphStyleFolder_Factory::version((TXParagraphStyleFolder_Factory *)v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_1B7A245AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2) {
    return 0;
  }
  if (*(unsigned char *)a1) {
    return 1;
  }
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

uint64_t makeDeviceKeyForFxDevice(uint64_t a1)
{
  if (!FxDeviceIsGPU((const void **)a1)) {
    return 1;
  }
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(const void **)a1;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return 0;
}

uint64_t FxDeviceSortOrder(uint64_t a1, uint64_t a2)
{
  char DeviceKeyForFxDevice = makeDeviceKeyForFxDevice(a1);
  unint64_t v5 = v4;
  char v6 = makeDeviceKeyForFxDevice(a2);
  if (DeviceKeyForFxDevice) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5 >= v7;
  }
  unsigned int v9 = !v8;
  if (v6) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t *FxDeviceGetDeviceForHGDevice(uint64_t **a1)
{
  double result = *a1;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      *(void *)&long long v4 = 0;
      *((void *)&v4 + atomic_store(0, (unint64_t *)this + 1) = v3;
    }
    else
    {
      long long v4 = xmmword_1B7E7A9D0;
    }
    return getFxDeviceForDeviceKey(&v4, a1);
  }
  return result;
}

uint64_t *getFxDeviceForDeviceKey(_OWORD *a1, void *a2)
{
  {
    operator new();
  }
  unsigned int v9 = (PCMutex *)getSingletonLock(void)::mutex;
  PCMutex::lock((PCMutex *)getSingletonLock(void)::mutex);
  char v10 = 1;
  {
    operator new();
  }
  long long v4 = (uint64_t **)getSingletonMap(void)::result;
  unint64_t v5 = std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::find<FxDeviceKey>(getSingletonMap(void)::result, (uint64_t)a1);
  if (v4 + 1 == (uint64_t **)v5)
  {
    uint64_t v6 = a2[1];
    *(void *)&long long v8 = *a2;
    *((void *)&v8 + atomic_store(0, (unint64_t *)this + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__emplace_unique_key_args<FxDeviceKey,FxDeviceKey const&,FxDeviceObj>(v4, (uint64_t)a1, a1, &v8);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  if (v9 && v10) {
    PCMutex::unlock(v9);
  }
  return v5 + 6;
}

void sub_1B7A24914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FxDeviceGetVirtualScreen(const void **a1)
{
  if (!FxDeviceIsGPU(a1)) {
    return 0xFFFFFFFFLL;
  }
  FxDeviceGetHGDeviceForGPU(a1, &v4);
  uint64_t GLVirtualScreen = HGGPUComputeDevice::GetGLVirtualScreen(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return GLVirtualScreen;
}

void sub_1B7A249E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL FxDeviceIsSharedGPU(const void **a1)
{
  return (int)FxDeviceGetVirtualScreen(a1) >= 0;
}

uint64_t FxDeviceGetLogStdString(const void **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  unsigned int Name = FxDeviceGetName((uint64_t)a1);
  int v3 = *((char *)Name + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t)Name;
  }
  else {
    uint64_t v4 = *Name;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)Name + 23);
  }
  else {
    uint64_t v5 = Name[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v4, v5);
  if (FxDeviceIsGPU(a1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (", 2);
    Memoryint Size = FxDeviceGetMemorySize((uint64_t)a1);
    unint64_t v7 = "KB";
    long long v8 = "MB";
    if (MemorySize >> 20 >= 0x401) {
      long long v8 = "GB";
    }
    if (MemorySize >> 10 >= 0x401) {
      unint64_t v7 = v8;
    }
    if (MemorySize >= 0x401) {
      unsigned int v9 = v7;
    }
    else {
      unsigned int v9 = "B";
    }
    char v10 = (void *)std::ostream::operator<<();
    size_t v11 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
    if (FxDeviceIsRemovable((uint64_t)a1)) {
      uint64_t v12 = "external";
    }
    else {
      uint64_t v12 = "internal";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v12, 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
    if (FxDeviceIsDisplayAttached((uint64_t)a1))
    {
      uint64_t v13 = "has display";
      uint64_t v14 = 11;
    }
    else
    {
      BOOL IsHeadless = FxDeviceIsHeadless((uint64_t)a1);
      if (IsHeadless) {
        uint64_t v13 = "headless";
      }
      else {
        uint64_t v13 = "no display";
      }
      if (IsHeadless) {
        uint64_t v14 = 8;
      }
      else {
        uint64_t v14 = 10;
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", virtual screen ", 17);
    FxDeviceGetVirtualScreen(a1);
    int v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  }
  else
  {
    FxDeviceIsCPU(a1);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v20);
}

void sub_1B7A24D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::find<FxDeviceKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  int v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = v2;
  do
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v6 = v3;
    }
    else if (*((unsigned char *)v3 + 32))
    {
      ++v3;
    }
    else if (v3[5] < v5)
    {
      ++v3;
    }
    else
    {
      uint64_t v6 = v3;
    }
    int v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v6 == v2 || !*((unsigned char *)v6 + 32) && (*(unsigned char *)a2 || v5 < v6[5])) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__emplace_unique_key_args<FxDeviceKey,FxDeviceKey const&,FxDeviceObj>(uint64_t **a1, uint64_t a2, _OWORD *a3, long long *a4)
{
  unint64_t v7 = (void **)std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__find_equal<FxDeviceKey>((uint64_t)a1, &v12, a2);
  long long v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (uint64_t **)v7;
    long long v8 = (uint64_t *)operator new(0x40uLL);
    long long v10 = *a4;
    *((_OWORD *)v8 + OZChannelEnum::~OZChannelEnum(this - 2) = *a3;
    *((_OWORD *)v8 + 3) = v10;
    *(void *)a4 = 0;
    *((void *)a4 + atomic_store(0, (unint64_t *)this + 1) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v9, v8);
  }
  return v8;
}

void *std::__tree<std::__value_type<FxDeviceKey,FxDeviceObj const>,std::__map_value_compare<FxDeviceKey,std::__value_type<FxDeviceKey,FxDeviceObj const>,std::less<FxDeviceKey>,true>,std::allocator<std::__value_type<FxDeviceKey,FxDeviceObj const>>>::__find_equal<FxDeviceKey>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  double result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *(void *)(a3 + 8);
    while (1)
    {
      unint64_t v7 = (void *)v4;
      if (*(unsigned char *)(v4 + 32)) {
        break;
      }
      if (*(unsigned char *)a3 || (unint64_t v8 = *(void *)(v4 + 40), v6 < v8))
      {
        uint64_t v4 = *v7;
        double result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }
      else
      {
        if (v8 >= v6) {
          goto LABEL_14;
        }
LABEL_5:
        double result = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          goto LABEL_14;
        }
      }
    }
    if (*(unsigned char *)a3) {
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  unint64_t v7 = result;
LABEL_14:
  *a2 = v7;
  return result;
}

void HSmearToRect::~HSmearToRect(HGNode *this)
{
  *(void *)this = &unk_1F1113420;
  uint64_t v2 = *((void *)this + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HgcSmearToRect::~HgcSmearToRect(this);
}

{
  void *v1;
  uint64_t vars8;

  HSmearToRect::~HSmearToRect(this);

  HGObject::operator delete(v1);
}

uint64_t HSmearToRect::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    *(void *)&v14[0].var0 = HGRenderer::GetDOD(a2, Input);
    *(void *)&v14[0].var2 = v8;
    Effect_toPCRecti(v14, (uint64_t)&v15);
    int32x2_t v9 = vadd_s32(v15, (int32x2_t)-1);
    v10.i64[0] = v9.i32[0];
    v10.i64[1] = v9.i32[1];
    float64x2_t v11 = vcvtq_f64_s64(v10);
    int32x2_t v12 = vadd_s32(v16, (int32x2_t)0x200000002);
    v10.i64[0] = v12.i32[0];
    v10.i64[1] = v12.i32[1];
    v14[0] = (HGRect)v11;
    v14[1] = (HGRect)vcvtq_f64_s64(v10);
    if (PCRect<double>::contains((double *)this + 52, (double *)&v14[0].var0)) {
      return HGRectMake4i(v15.u32[0], v15.u32[1], v16.i32[0] + v15.i32[0], v16.i32[1] + v15.i32[1]);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

BOOL PCRect<double>::contains(double *a1, double *a2)
{
  double v2 = a2[2];
  uint64_t v3 = 1;
  if (v2 >= 0.0)
  {
    double v4 = a2[3];
    if (v4 >= 0.0)
    {
      double v5 = a1[2];
      if (v5 >= 0.0
        && (double v6 = a1[3], v6 >= 0.0)
        && *a1 <= *a2
        && v5 + *a1 >= v2 + *a2
        && (double v7 = a1[1], v8 = a2[1], v7 <= v8))
      {
        return v7 + v6 >= v8 + v4;
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t HSmearToRect::GetROI(HSmearToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  double v6 = *((double *)this + 52);
  double v5 = *((double *)this + 53);
  signed int v7 = vcvtmd_s64_f64(v6 + 0.0000001);
  signed int v8 = vcvtpd_s64_f64(v6 + *((double *)this + 54));
  double v9 = v5 + *((double *)this + 55);
  HGRect v25 = a4;
  if (v8 - 2 < a4.var0) {
    v25.var0 = v8 - 2;
  }
  signed int v10 = vcvtpd_s64_f64(v9);
  if (v7 + 2 > a4.var2) {
    v25.var2 = v7 + 2;
  }
  signed int v11 = vcvtmd_s64_f64(v5 + 0.0000001);
  if (v10 - 2 < a4.var1) {
    v25.unint64_t var1 = v10 - 2;
  }
  if (v11 + 2 > a4.var3) {
    v25.var3 = v11 + 2;
  }
  Effect_toPCRecti(&v25, (uint64_t)&v21);
  if (v21 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v21;
  }
  if (v23 + v21 >= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = v23 + v21;
  }
  if (v22 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = v22;
  }
  if (v24 + v22 >= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = v24 + v22;
  }
  uint64_t v16 = HGRectMake4i(v12, v14, v13, v15);
  uint64_t v18 = v17;
  uint64_t v20 = HGRectMake4f(v19, -1.0, -1.0, 1.0, 1.0);
  return HGRectGrow(v16, v18, v20);
}

HGNode *HSmearToRect::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  *(void *)&v20.var0 = HGRenderer::GetDOD(a2, Input);
  *(void *)&v20.var2 = v5;
  Effect_toPCRecti(&v20, (uint64_t)&v23);
  *(double *)&v20.var0 = (double)v23;
  *(double *)&v20.var2 = (double)v24;
  double v21 = (double)v25;
  double v22 = (double)v26;
  v19[0] = (double)(v23 - 1);
  v19[1] = (double)(v24 - 1);
  v19[2] = (double)(v25 + 2);
  v19[3] = (double)(v26 + 2);
  if (!PCRect<double>::contains((double *)this + 52, v19))
  {
    if (PCRect<double>::contains((double *)&v20.var0, (double *)this + 52)
      && (double v6 = *((double *)this + 52), v7 = vcvtmd_s64_f64(v6 + 0.5 + 0.0000001), vabdd_f64(v6, (double)v7) < 0.0000001)
      && vabdd_f64(v6 + *((double *)this + 54), (double)v7 + (double)(int)(vcvtmd_s64_f64(v6 + *((double *)this + 54) + 0.5 + 0.0000001) - v7)) < 0.0000001&& (double v8 = *((double *)this + 53), v9 = vcvtmd_s64_f64(v8 + 0.5 + 0.0000001), vabdd_f64(v8 + *((double *)this + 55), (double)v9 + (double)(int)(vcvtmd_s64_f64(v8 + *((double *)this + 55) + 0.5 + 0.0000001) - v9)) < 0.0000001)&& vabdd_f64(v8, (double)v9) < 0.0000001)
    {
      signed int v10 = (HGCrop *)HGObject::operator new(0x1A0uLL);
      HGCrop::HGCrop(v10);
      double v11 = *((double *)this + 52);
      double v12 = *((double *)this + 53);
      float v13 = v11;
      float v14 = v12;
      *(float *)&double v11 = v11 + *((double *)this + 54);
      *(float *)&double v12 = v12 + *((double *)this + 55);
      (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v10 + 96))(v10, 0, v13, v14, *(float *)&v11, *(float *)&v12);
      (*(void (**)(HGCrop *, void, HGNode *))(*(void *)v10 + 120))(v10, 0, Input);
      unsigned int v15 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v15);
      uint64_t v16 = (HGTextureWrap *)*((void *)this + 56);
      if (v16 == v15)
      {
        (*(void (**)(HGTextureWrap *))(*(void *)v15 + 24))(v15);
        unsigned int v15 = (HGTextureWrap *)*((void *)this + 56);
      }
      else
      {
        if (v16) {
          (*(void (**)(HGTextureWrap *))(*(void *)v16 + 24))(v16);
        }
        *((void *)this + 56) = v15;
      }
      (*(void (**)(HGTextureWrap *, void, HGCrop *))(*(void *)v15 + 120))(v15, 0, v10);
      HGTextureWrap::SetTextureWrapMode(*((void *)this + 56), (const char *)1, v18);
      Input = (HGNode *)*((void *)this + 56);
      (*(void (**)(HGCrop *))(*(void *)v10 + 24))(v10);
    }
    else
    {
      return this;
    }
  }
  return Input;
}

void sub_1B7A254A0(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HSmearToRect::setRect(_OWORD *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  a1[26] = *(_OWORD *)a2;
  a1[27] = v2;
  double v3 = *(double *)(a2 + 8);
  float v4 = *(double *)a2 + 0.5;
  *(float *)&long long v2 = v3 + 0.5;
  float v5 = *(double *)a2 + *(double *)(a2 + 16) + -0.5;
  *(float *)&double v3 = v3 + *(double *)(a2 + 24) + -0.5;
  return (*(uint64_t (**)(_OWORD *, void, float, float, float, float))(*(void *)a1 + 96))(a1, 0, v4, *(float *)&v2, v5, *(float *)&v3);
}

void Fx_smearToRect()
{
  v0 = (HgcSmearToRect *)HGObject::operator new(0x1D0uLL);
  HgcSmearToRect::HgcSmearToRect(v0);
}

void sub_1B7A2564C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGColorGamma *PAECreateGammaEncodingNode(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, char a5, char a6)
{
  double v12 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v12);
  if (a1) {
    (*(void (**)(HGColorGamma *, void, uint64_t))(*(void *)v12 + 120))(v12, 0, a1);
  }
  if (a4 == 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v19 = (uint64_t)v12;
    uint64_t v20 = 15;
    goto LABEL_7;
  }
  if (a4 == 1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v19 = (uint64_t)v12;
    uint64_t v20 = 16;
LABEL_7:
    HGColorGamma::SetGammaFunction(v19, v20, v13, _Q0, (float32x4_t)0, (float32x4_t)0, (float32x4_t)0, (int8x16_t)0, (float32x4_t)0, (float32x4_t)0);
    goto LABEL_18;
  }
  if (a2 > 2) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = dword_1B837AB0C[a2];
  }
  if (a3 > 2) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = dword_1B837AB0C[a3];
  }
  if (a4 > 4) {
    int v23 = 1;
  }
  else {
    int v23 = dword_1B837AAF8[a4];
  }
  HGColorGamma::SetConversion((uint64_t)v12, v21, (char *)8, 0, v22, v23, 0);
LABEL_18:
  HGColorGamma::SetPremultiplyState(v12, a5, a6);
  return v12;
}

void sub_1B7A25804(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGColorGamma *PAECreateGammaDecodingNode(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, char a5, char a6)
{
  double v12 = (HGColorGamma *)HGObject::operator new(0x4A0uLL);
  HGColorGamma::HGColorGamma(v12);
  if (a1) {
    (*(void (**)(HGColorGamma *, void, uint64_t))(*(void *)v12 + 120))(v12, 0, a1);
  }
  if (a4 == 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v19 = (uint64_t)v12;
    uint64_t v20 = 14;
    goto LABEL_7;
  }
  if (a4 == 1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v19 = (uint64_t)v12;
    uint64_t v20 = 17;
LABEL_7:
    HGColorGamma::SetGammaFunction(v19, v20, v13, _Q0, (float32x4_t)0, (float32x4_t)0, (float32x4_t)0, (int8x16_t)0, (float32x4_t)0, (float32x4_t)0);
    goto LABEL_18;
  }
  if (a2 > 2) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = dword_1B837AB0C[a2];
  }
  if (a4 > 4) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = dword_1B837AAF8[a4];
  }
  if (a3 > 2) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = dword_1B837AB0C[a3];
  }
  HGColorGamma::SetConversion((uint64_t)v12, v21, (char *)v22, 0, v23, 8, 0);
LABEL_18:
  HGColorGamma::SetPremultiplyState(v12, a5, a6);
  return v12;
}

void sub_1B7A25988(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PAEUploadBitmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = (HGTexture *)HGObject::operator new(0x80uLL);
  HGTexture::HGTexture(v6, *(HGRect *)(a1 + 20), (HGBitmap *)a1);
  int v7 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v7, (HGBitmap *)v6);
  (*(void (**)(HGTexture *))(*(void *)v6 + 24))(v6);
  (*(void (**)(uint64_t, uint64_t, HGBitmapLoader *))(*(void *)a2 + 120))(a2, a3, v7);
  double v8 = *(uint64_t (**)(HGBitmapLoader *))(*(void *)v7 + 24);

  return v8(v7);
}

void sub_1B7A25A88(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void PAEUpload3DLUTEvaluator(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float v3 = (*(float (**)(uint64_t))(*(void *)a1 + 32))(a1);
  float v4 = (*(float (**)(uint64_t))(*(void *)a1 + 40))(a1) - v3;
  float v5 = (HGNode *)HGObject::operator new(0x210uLL);
  HGApply3DLUT::HGApply3DLUT(v5, v2, 0x19u, 1, 0, 1, 1, 1, v4, v3, 0.0, 1.0, 0.0, 0.0, 0);
}

void sub_1B7A25C7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::Evaluate3DIndex(_anonymous_namespace_ *this, _DWORD *a2, float a3, float a4, float a5, float *a6, float *a7, float *a8, float *a9)
{
  *(void *)&long long v13 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  *((void *)&v13 + atomic_store(0, (unint64_t *)this + 1) = LODWORD(a5);
  long long v17 = v13;
  long long v16 = 0uLL;
  (*(void (**)(_anonymous_namespace_ *, long long *, long long *, float *, float *, float *))(*(void *)this + 16))(this, &v17, &v16, a7, a8, a9);
  long long v14 = v16;
  *a2 = v16;
  *a6 = *((float *)&v14 + 1);
  *a7 = *((float *)&v14 + 2);
  *a8 = 1.0;
  return 0;
}

void NewEquirectWrapNode(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, float32x2_t *a5@<X4>, HGNode **a6@<X8>)
{
  double v12 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGNode::HGNode(v12);
  *(void *)double v12 = &unk_1F1114290;
  *((void *)v12 + 5atomic_store(0, (unint64_t *)this + 1) = 0;
  *((void *)v12 + 5OZChannelEnum::~OZChannelEnum(this - 2) = 0;
  HEquirectWrap::init((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12;
}

void sub_1B7A25E00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxBalancedBlendRecord::FxBalancedBlendRecord(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *(double *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = a3;
  return a1;
}

uint64_t FxBalancedBlendRecord::node@<X0>(FxBalancedBlendRecord *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)this;
  *a2 = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t FxSupport::makeHeliumXForm@<X0>(double *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  if (PCMatrix44Tmpl<double>::is2Didentity(a1))
  {
    uint64_t result = *a2;
    *a5 = *a2;
    if (result)
    {
      double v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v11();
    }
  }
  else
  {
    double v12 = (HGTransform *)HGObject::operator new(0x90uLL);
    HGTransform::HGTransform(v12);
    long long v13 = *((_OWORD *)a1 + 5);
    long long v29 = *((_OWORD *)a1 + 4);
    long long v30 = v13;
    long long v14 = *((_OWORD *)a1 + 7);
    long long v31 = *((_OWORD *)a1 + 6);
    long long v32 = v14;
    long long v15 = *((_OWORD *)a1 + 1);
    long long v24 = *(_OWORD *)a1;
    long long v25 = v15;
    long long v16 = *((_OWORD *)a1 + 3);
    long long v26 = *((_OWORD *)a1 + 2);
    uint64_t v17 = *((void *)&v24 + 1);
    long long v18 = v25;
    uint64_t v19 = *((void *)&v29 + 1);
    *((void *)&v24 + atomic_store(0, (unint64_t *)this + 1) = v26;
    *(void *)&long long v25 = v29;
    uint64_t v20 = *((void *)&v30 + 1);
    *((void *)&v25 + atomic_store(0, (unint64_t *)this + 1) = v31;
    *(void *)&long long v26 = v17;
    *(void *)&long long v29 = v18;
    *((void *)&v29 + atomic_store(0, (unint64_t *)this + 1) = v16;
    uint64_t v27 = v19;
    uint64_t v28 = *((void *)&v31 + 1);
    *((void *)&v30 + atomic_store(0, (unint64_t *)this + 1) = v32;
    *(void *)&long long v31 = *((void *)&v18 + 1);
    *((void *)&v31 + atomic_store(0, (unint64_t *)this + 1) = *((void *)&v16 + 1);
    *(void *)&long long v32 = v20;
    (*(void (**)(HGTransform *, long long *))(*(void *)v12 + 72))(v12, &v24);
    uint64_t v21 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v21);
    (*(void (**)(HGXForm *, HGTransform *))(*(void *)v21 + 576))(v21, v12);
    uint64_t v23 = *(void *)v21;
    if (a3)
    {
      if (a4)
      {
        v22.n128_u32[0] = 8.0;
      }
      else
      {
        (*(void (**)(HGXForm *, void, float))(v23 + 592))(v21, 0, 1.0);
        uint64_t v23 = *(void *)v21;
        v22.n128_u64[0] = 0;
      }
      (*(void (**)(HGXForm *, __n128))(v23 + 632))(v21, v22);
    }
    else
    {
      (*(void (**)(HGXForm *, void, double))(v23 + 592))(v21, 0, 0.0);
    }
    if (*a2) {
      (*(void (**)(HGXForm *, void))(*(void *)v21 + 120))(v21, 0);
    }
    *a5 = v21;
    return (*(uint64_t (**)(HGTransform *))(*(void *)v12 + 24))(v12);
  }
  return result;
}

void sub_1B7A26170(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

BOOL PCMatrix44Tmpl<double>::is2Didentity(double *a1)
{
  double v1 = a1[15];
  return fabs(v1) >= 0.0000001
      && fabs(a1[12]) < 0.0000001
      && fabs(a1[13]) < 0.0000001
      && vabdd_f64(*a1, v1) < 0.0000001
      && vabdd_f64(a1[5], v1) < 0.0000001
      && fabs(a1[1]) < 0.0000001
      && fabs(a1[3]) < 0.0000001
      && fabs(a1[4]) < 0.0000001
      && fabs(a1[7]) < 0.0000001;
}

uint64_t PCMatrix44Tmpl<double>::eigen22(uint64_t a1, PCMath *this, double *a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  a7.i64[0] = *(void *)(a1 + 40);
  *(double *)a5.i64 = -(*(double *)a1 + *(double *)a7.i64);
  double v9 = *(double *)a1 * *(double *)a7.i64 - *(double *)(a1 + 8) * *(double *)(a1 + 32);
  a7.i64[0] = 0x3E7AD7F29ABCAF48;
  uint64_t result = PCMath::quadratic(this, 1.0, a5, v9, a3, a3, a7);
  if (result == 1)
  {
    *a3 = *(double *)this;
    return 2;
  }
  return result;
}

uint64_t HContrastBezierRGB::GetDOD(HContrastBezierRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HContrastBezierRGB::GetROI(HContrastBezierRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 == 1)
  {
    uint64_t v5 = HGRectMake4i(0, 0, 0x400u, 1u);
    uint64_t v7 = v6;
    uint64_t v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v7, v8);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(void *)&a4.var0;
  }
}

uint64_t HContrastBezierLuma::GetDOD(HContrastBezierLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HContrastBezierLuma::GetROI(HContrastBezierLuma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 == 1)
  {
    uint64_t v5 = HGRectMake4i(0, 0, 0x400u, 1u);
    uint64_t v7 = v6;
    uint64_t v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v7, v8);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(void *)&a4.var0;
  }
}

void HContrastBezierRGB::~HContrastBezierRGB(HGNode *this)
{
  HgcContrastBezierRGB::~HgcContrastBezierRGB(this);

  HGObject::operator delete(v1);
}

void HContrastBezierLuma::~HContrastBezierLuma(HGNode *this)
{
  HgcContrastBezierLuma::~HgcContrastBezierLuma(this);

  HGObject::operator delete(v1);
}

uint64_t applyAlphaIgnore@<X0>(void *a1@<X0>, HgcStripAlpha **a2@<X8>)
{
  float v4 = (HgcStripAlpha *)HGObject::operator new(0x1A0uLL);
  HgcStripAlpha::HgcStripAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcStripAlpha *, void, void))(*(void *)v4 + 120))(v4, 0, *a1);
}

void sub_1B7A26538(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyAlphaInvert@<X0>(void *a1@<X0>, HGInvertAlpha **a2@<X8>)
{
  float v4 = (HGInvertAlpha *)HGObject::operator new(0x1A0uLL);
  HGInvertAlpha::HGInvertAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGInvertAlpha *, void, void))(*(void *)v4 + 120))(v4, 0, *a1);
}

void sub_1B7A265F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void applyPremultiply()
{
  v0 = (HGPremultiply *)HGObject::operator new(0x1A0uLL);
  HGPremultiply::HGPremultiply(v0);
}

void sub_1B7A266A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void applyPremultiplyWhiteToBlack()
{
  v0 = (HGPremultiplyWhiteToBlack *)HGObject::operator new(0x1A0uLL);
  HGPremultiplyWhiteToBlack::HGPremultiplyWhiteToBlack(v0);
}

void sub_1B7A26760(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t applyClamp@<X0>(void *a1@<X0>, HgcClampToAlpha **a2@<X8>)
{
  float v4 = (HgcClampToAlpha *)HGObject::operator new(0x1A0uLL);
  HgcClampToAlpha::HgcClampToAlpha(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcClampToAlpha *, void, void))(*(void *)v4 + 120))(v4, 0, *a1);
}

void sub_1B7A26818(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

HGInvertAlpha **FxApplyAlphaRequest@<X0>(HGInvertAlpha **result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, HGInvertAlpha **a5@<X8>)
{
  double v9 = *result;
  *a5 = *result;
  if (v9) {
    uint64_t result = (HGInvertAlpha **)(*(uint64_t (**)(HGInvertAlpha *))(*(void *)v9 + 16))(v9);
  }
  switch(a2)
  {
    case 0:
      uint64_t result = (HGInvertAlpha **)applyAlphaIgnore(a5, &v14);
      signed int v10 = v14;
      if (v9 != v14)
      {
        if (!v9) {
          goto LABEL_31;
        }
        goto LABEL_6;
      }
      if (!v9) {
        goto LABEL_41;
      }
      goto LABEL_22;
    case 1:
      if (a3)
      {
        applyAlphaInvert(a5, &v14);
        double v11 = v14;
        if (v9 == v14)
        {
          if (v9) {
            (*(void (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
        }
        else
        {
          if (v9) {
            (*(void (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
          *a5 = v11;
        }
      }
      applyPremultiply();
    case 2:
      if (!a3) {
        goto LABEL_33;
      }
      uint64_t result = (HGInvertAlpha **)applyAlphaInvert(a5, &v14);
      signed int v10 = v14;
      if (v9 == v14)
      {
        if (v9)
        {
LABEL_22:
          uint64_t result = (HGInvertAlpha **)(*(uint64_t (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          signed int v10 = v9;
        }
        else
        {
LABEL_41:
          signed int v10 = 0;
        }
      }
      else
      {
        if (v9) {
LABEL_6:
        }
          uint64_t result = (HGInvertAlpha **)(*(uint64_t (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
LABEL_31:
        *a5 = v10;
      }
      double v9 = v10;
LABEL_33:
      if (a4)
      {
        uint64_t result = (HGInvertAlpha **)applyClamp(a5, &v14);
        long long v13 = v14;
        if (v9 == v14)
        {
          if (v9) {
            return (HGInvertAlpha **)(*(uint64_t (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
        }
        else
        {
          if (v9) {
            uint64_t result = (HGInvertAlpha **)(*(uint64_t (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
          *a5 = v13;
        }
      }
      return result;
    case 3:
      if (a3)
      {
        applyAlphaInvert(a5, &v14);
        double v12 = v14;
        if (v9 == v14)
        {
          if (v9) {
            (*(void (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
        }
        else
        {
          if (v9) {
            (*(void (**)(HGInvertAlpha *))(*(void *)v9 + 24))(v9);
          }
          *a5 = v12;
        }
      }
      applyPremultiplyWhiteToBlack();
    default:
      goto LABEL_33;
  }
}

void sub_1B7A26CA4(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7A27454(void *a1)
{
}

void sub_1B7A279FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PAEGenerateNoise(double a1, double a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v11 = (int)(a2 + a2);
  long long v29 = 0uLL;
  if (a7) {
    int v12 = (int)(a2 + a2);
  }
  else {
    int v12 = a8;
  }
  switch(a5)
  {
    case 0:
      {
      }
      unint64_t v13 = v12;
      long long v14 = getTVNoiseBitmap(int)::bitmaps;
      goto LABEL_15;
    case 1:
      {
      }
      unint64_t v13 = v12;
      long long v14 = getWhiteNoiseBitmap(int)::bitmaps;
      goto LABEL_15;
    case 2:
      {
      }
      unint64_t v13 = v12;
      long long v14 = getGaussianNoiseBitmap(int)::bitmaps;
      goto LABEL_15;
    case 3:
      {
      }
      unint64_t v13 = v12;
      long long v14 = getBlueNoiseBitmap(int)::bitmaps;
      goto LABEL_15;
    case 4:
      {
      }
      unint64_t v13 = v12;
      long long v14 = getPinkNoiseBitmap(int)::bitmaps;
LABEL_15:
      long long v16 = v14;
      uint64_t v15 = *v14;
      unint64_t v17 = (v16[1] - v15) >> 4;
      int v18 = v12 - v13 / v17 * v17;
      if (v18 >= 0) {
        LODWORD(v17) = 0;
      }
      long long v19 = *(_OWORD *)(v15 + 16 * ((int)v17 + v18));
      uint64_t v20 = *(void *)(v15 + 16 * ((int)v17 + v18) + 8);
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v29 + 1);
      long long v29 = v19;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      break;
    default:
      break;
  }
  int v33 = 0;
  FxSupport::createBitmapNode((PCBitmap **)&v29, (unsigned int *)&v33, v30);
  if (a7) {
    int v22 = v11 + 12321 * a8;
  }
  else {
    int v22 = a8;
  }
  std::vector<unsigned char>::vector(&v33, 0x100uLL);
  int v23 = v22 ^ (a6 << 31 >> 31);
  long long v25 = v34;
  long long v24 = v33;
  if (v33 != v34)
  {
    int v26 = 0;
    do
      *v24++ = v26++;
    while (v24 != v25);
  }
  LODWORD(v30[0]) = v23;
  uint64_t v27 = 1;
  unsigned int v28 = v23;
  do
  {
    unsigned int v28 = v27 + 1812433253 * (v28 ^ (v28 >> 30));
    *((_DWORD *)v30 + v27++) = v28;
  }
  while (v27 != 624);
  long long v31 = 0u;
  uint64_t v32 = -1;
  PCRandomShuffle<std::__wrap_iter<unsigned char *>,Rand>((uint64_t)v33, v34, (uint64_t)v30);
  PCCreateBitmap(256, 1, 5u);
}

void sub_1B7A284F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

_anonymous_namespace_::Bitmaps *anonymous namespace'::Bitmaps::Bitmaps(_anonymous_namespace_::Bitmaps *this, const char *a2)
{
  std::vector<std::shared_ptr<PCBitmap>>::vector(this, 3uLL);
  Class v4 = NSClassFromString(&cfstr_Pveffectassets.isa);
  if (v4) {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28B50] bundleForClass:v4];
  }
  else {
    uint64_t v5 = 0;
  }
  char v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", objc_msgSend(v5, "bundleIdentifier"));
  if (v5) {
    char v7 = v6;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
    do
    {
      PCLoadBitmap((const __CFURL *)[v5 URLForResource:objc_msgSend(NSString, "stringWithFormat:", @"%s%u", a2, v9), @"tiff" withExtension], &v14);
      uint64_t v10 = *(void *)this + v8;
      long long v11 = v14;
      long long v14 = 0uLL;
      int v12 = *(std::__shared_weak_count **)(v10 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
      v8 += 16;
      uint64_t v9 = (v9 + 1);
    }
    while (v8 != 48);
  }
  return this;
}

void sub_1B7A28888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::Bitmaps::~Bitmaps(void **this)
{
  uint64_t v1 = this;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::vector<std::shared_ptr<PCBitmap>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, a2);
    Class v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B7A28950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t PCRandomShuffle<std::__wrap_iter<unsigned char *>,Rand>(uint64_t result, char *a2, uint64_t a3)
{
  if ((char *)result != a2)
  {
    v12[10] = v3;
    v12[11] = v4;
    uint64_t v6 = result;
    char v7 = (char *)(result + 1);
    if ((char *)(result + 1) != a2)
    {
      uint64_t v9 = a3 + 2504;
      uint64_t v10 = 0x200000000;
      do
      {
        v12[0] = 0;
        v12[1] = (v10 >> 32) - 1;
        uint64_t result = std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v9, a3, v12);
        char v11 = *v7;
        *v7++ = *(unsigned char *)(v6 + result);
        *(unsigned char *)(v6 + result) = v11;
        v10 += 0x100000000;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + OZSpline::reparametrize((uint64_t)this + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 3OZChannelEnum::~OZChannelEnum(this - 2) = v3 + v4 * v3 - a3;
      *(void *)(result + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 3OZChannelEnum::~OZChannelEnum(this - 2) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x80000000uLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 4OZSpline::reparametrize((uint64_t)this + 8) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 6OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

BOOL Effect_toPCRecti@<W0>(const HGRect *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_1B7E74760;
  BOOL result = HGRectIsNull(*(void *)&a1->var0, *(void *)&a1->var2);
  if (result)
  {
    int32x2_t v5 = (int32x2_t)-1;
  }
  else
  {
    int32x2_t v6 = vmax_s32(*(int32x2_t *)&a1->var0, vdup_n_s32(0xC0000001));
    int32x2_t v7 = vmin_s32(*(int32x2_t *)&a1->var2, vdup_n_s32(0x3FFFFFFEu));
    *(int32x2_t *)a2 = v6;
    int32x2_t v5 = vsub_s32(v7, v6);
  }
  *(int32x2_t *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = v5;
  return result;
}

uint64_t FxSupport::makeHeliumCrop@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, HGCrop **a3@<X8>)
{
  int32x2_t v6 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v6);
  (*(void (**)(HGCrop *, void, void))(*(void *)v6 + 120))(v6, 0, *a2);
  uint64_t v7 = HGRectMake4i(*a1, a1[1], a1[2] + *a1, a1[3] + a1[1]);
  uint64_t result = (*(uint64_t (**)(HGCrop *, void, float, float, float, float))(*(void *)v6 + 96))(v6, 0, (float)(int)v7, (float)SHIDWORD(v7), (float)v8, (float)v9);
  *a3 = v6;
  return result;
}

void sub_1B7A28E24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

long long *getFxTimeZero(void)
{
  {
    getFxTimeZero(void)::kZeroTime = *MEMORY[0x1E4F1FA48];
    qword_1E9EE5A10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  }
  return &getFxTimeZero(void)::kZeroTime;
}

long long *getFxTimeInvalid(void)
{
  {
    getFxTimeInvalid(void)::kInvalidTime = *MEMORY[0x1E4F1F9F8];
    qword_1E9EE5A30 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  return &getFxTimeInvalid(void)::kInvalidTime;
}

void sub_1B7A29214(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t sub_1B7A293C0()
{
  return 0;
}

void sub_1B7A298B8(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B7A29A34(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B7A29ADC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7A29C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7A29EC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 232);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7A29F74(_Unwind_Exception *exception_object)
{
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

int *Interval::pixelToFloat@<X0>(int *this@<X0>, double *a2@<X8>)
{
  int v4 = this[1];
  int v5 = this[2];
  int v6 = this[3];
  double v7 = (double)*this + 0.5;
  double v8 = (double)v5 + -0.5;
  if (v8 >= v7) {
    double v9 = (double)*this + 0.5;
  }
  else {
    double v9 = (double)v5 + -0.5;
  }
  if (v7 >= v8) {
    double v10 = (double)*this + 0.5;
  }
  else {
    double v10 = (double)v5 + -0.5;
  }
  double v11 = (double)v4 + 0.5;
  double v12 = (double)v6 + -0.5;
  if (v12 >= v11) {
    double v13 = (double)v4 + 0.5;
  }
  else {
    double v13 = (double)v6 + -0.5;
  }
  if (v11 >= v12) {
    double v14 = (double)v4 + 0.5;
  }
  else {
    double v14 = (double)v6 + -0.5;
  }
  if (v9 > v10) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  if (v13 > v14) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v13;
  a2[3] = v14;
  return this;
}

unint64_t Interval::floatToPixel(double *a1)
{
  uint64_t v1 = (uint64_t)"pha31OZChannelColorNoAlpha_gammaImplE";
  LODWORD(vatomic_store(0, (unint64_t *)this + 1) = vcvtmd_s64_f64(*a1 + -0.51);
  if (fabs(*a1) == INFINITY) {
    uint64_t v1 = 0x80000000;
  }
  double v2 = a1[2];
  unint64_t v3 = (unint64_t)vcvtmd_s64_f64(v2 + -0.51) << 32;
  if (fabs(v2) == INFINITY) {
    unint64_t v3 = 0x8000000000000000;
  }
  return v3 | v1;
}

double Interval::normalized@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = sqrt(v2 * v2 + v3 * v3);
  if (v4 < 0.000000100000001 && v4 > -0.000000100000001) {
    double v4 = 1.0;
  }
  double result = v2 / v4;
  *a2 = result;
  a2[1] = v3 / v4;
  return result;
}

void *Interval::eightPointDOD@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (***a3)(int8x16_t *__return_ptr, void, long long *)@<X2>, uint64_t a4@<X8>)
{
  PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2(a4);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)&long long v53 = *(void *)a1;
  *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v8;
  (**a3)(&v54, a3, &v53);
  uint64_t v10 = v54.i64[1];
  uint64_t v9 = v54.i64[0];
  *(void *)a4 = v54.i64[0];
  *(_OWORD *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = __PAIR128__(v10, v9);
  *(void *)(a4 + 24) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)&long long v53 = *(void *)a1;
  *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v11;
  (**a3)(&v54, a3, &v53);
  double v12 = *(double *)a4;
  double v13 = *(double *)(a4 + 24);
  if (*(double *)v54.i64 < *(double *)a4) {
    double v12 = *(double *)v54.i64;
  }
  v14.f64[0] = *(float64_t *)(a4 + 8);
  *(void *)&v14.f64[1] = v54.i64[1];
  *(void *)&v15.f64[0] = v54.i64[0];
  v15.f64[1] = *(float64_t *)(a4 + 16);
  int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f64(v15, v14), v54, *(int8x16_t *)(a4 + 8));
  if (v13 < *(double *)&v54.i64[1]) {
    double v13 = *(double *)&v54.i64[1];
  }
  *(double *)a4 = v12;
  *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v16;
  *(double *)(a4 + 24) = v13;
  long long v53 = *(_OWORD *)(a1 + 8);
  (**a3)(&v54, a3, &v53);
  double v17 = *(double *)a4;
  double v18 = *(double *)(a4 + 24);
  v19.f64[0] = *(float64_t *)(a4 + 8);
  *(void *)&v19.f64[1] = v54.i64[1];
  *(void *)&v20.f64[0] = v54.i64[0];
  if (*(double *)v54.i64 < *(double *)a4) {
    double v17 = *(double *)v54.i64;
  }
  v20.f64[1] = *(float64_t *)(a4 + 16);
  int8x16_t v21 = vbslq_s8((int8x16_t)vcgtq_f64(v20, v19), v54, *(int8x16_t *)(a4 + 8));
  if (v18 < *(double *)&v54.i64[1]) {
    double v18 = *(double *)&v54.i64[1];
  }
  *(double *)a4 = v17;
  *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v21;
  *(double *)(a4 + 24) = v18;
  uint64_t v22 = *(void *)(a1 + 24);
  *(void *)&long long v53 = *(void *)(a1 + 8);
  *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v22;
  double result = ((void *(*)(int8x16_t *__return_ptr, void, long long *))**a3)(&v54, a3, &v53);
  double v24 = *(double *)a4;
  double v25 = *(double *)(a4 + 24);
  v26.f64[0] = *(float64_t *)(a4 + 8);
  *(void *)&v26.f64[1] = v54.i64[1];
  *(void *)&v27.f64[0] = v54.i64[0];
  if (*(double *)v54.i64 < *(double *)a4) {
    double v24 = *(double *)v54.i64;
  }
  v27.f64[1] = *(float64_t *)(a4 + 16);
  int8x16_t v28 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), v54, *(int8x16_t *)(a4 + 8));
  if (v25 < *(double *)&v54.i64[1]) {
    double v25 = *(double *)&v54.i64[1];
  }
  *(double *)a4 = v24;
  *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v28;
  *(double *)(a4 + 24) = v25;
  if (*(double *)a1 <= *(double *)a2 && *(double *)a2 <= *(double *)(a1 + 8))
  {
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)&long long v53 = *(void *)a2;
    *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v29;
    (**a3)(&v54, a3, &v53);
    double v30 = *(double *)a4;
    double v31 = *(double *)(a4 + 24);
    v32.f64[0] = *(float64_t *)(a4 + 8);
    *(void *)&v32.f64[1] = v54.i64[1];
    *(void *)&v33.f64[0] = v54.i64[0];
    if (*(double *)v54.i64 < *(double *)a4) {
      double v30 = *(double *)v54.i64;
    }
    v33.f64[1] = *(float64_t *)(a4 + 16);
    int8x16_t v34 = vbslq_s8((int8x16_t)vcgtq_f64(v33, v32), v54, *(int8x16_t *)(a4 + 8));
    if (v31 < *(double *)&v54.i64[1]) {
      double v31 = *(double *)&v54.i64[1];
    }
    *(double *)a4 = v30;
    *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v34;
    *(double *)(a4 + 24) = v31;
    uint64_t v35 = *(void *)(a1 + 24);
    *(void *)&long long v53 = *(void *)a2;
    *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v35;
    double result = ((void *(*)(int8x16_t *__return_ptr, void, long long *))**a3)(&v54, a3, &v53);
    double v36 = *(double *)a4;
    double v37 = *(double *)(a4 + 24);
    v38.f64[0] = *(float64_t *)(a4 + 8);
    *(void *)&v38.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4) {
      double v36 = *(double *)v54.i64;
    }
    *(void *)&v39.f64[0] = v54.i64[0];
    v39.f64[1] = *(float64_t *)(a4 + 16);
    int8x16_t v40 = vbslq_s8((int8x16_t)vcgtq_f64(v39, v38), v54, *(int8x16_t *)(a4 + 8));
    if (v37 < *(double *)&v54.i64[1]) {
      double v37 = *(double *)&v54.i64[1];
    }
    *(double *)a4 = v36;
    *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v40;
    *(double *)(a4 + 24) = v37;
  }
  double v41 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 16) <= v41 && v41 <= *(double *)(a1 + 24))
  {
    *(void *)&long long v53 = *(void *)a1;
    *((double *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v41;
    (**a3)(&v54, a3, &v53);
    double v42 = *(double *)a4;
    double v43 = *(double *)(a4 + 24);
    v44.f64[0] = *(float64_t *)(a4 + 8);
    *(void *)&v44.f64[1] = v54.i64[1];
    *(void *)&v45.f64[0] = v54.i64[0];
    if (*(double *)v54.i64 < *(double *)a4) {
      double v42 = *(double *)v54.i64;
    }
    v45.f64[1] = *(float64_t *)(a4 + 16);
    int8x16_t v46 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v44), v54, *(int8x16_t *)(a4 + 8));
    if (v43 < *(double *)&v54.i64[1]) {
      double v43 = *(double *)&v54.i64[1];
    }
    *(double *)a4 = v42;
    *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v46;
    *(double *)(a4 + 24) = v43;
    uint64_t v47 = *(void *)(a2 + 8);
    *(void *)&long long v53 = *(void *)(a1 + 8);
    *((void *)&v53 + atomic_store(0, (unint64_t *)this + 1) = v47;
    double result = ((void *(*)(int8x16_t *__return_ptr, void, long long *))**a3)(&v54, a3, &v53);
    double v48 = *(double *)a4;
    double v49 = *(double *)(a4 + 24);
    v50.f64[0] = *(float64_t *)(a4 + 8);
    *(void *)&v50.f64[1] = v54.i64[1];
    if (*(double *)v54.i64 < *(double *)a4) {
      double v48 = *(double *)v54.i64;
    }
    *(void *)&v51.f64[0] = v54.i64[0];
    v51.f64[1] = *(float64_t *)(a4 + 16);
    int8x16_t v52 = vbslq_s8((int8x16_t)vcgtq_f64(v51, v50), v54, *(int8x16_t *)(a4 + 8));
    if (v49 < *(double *)&v54.i64[1]) {
      double v49 = *(double *)&v54.i64[1];
    }
    *(double *)a4 = v48;
    *(int8x16_t *)(a4 + OZSpline::reparametrize((uint64_t)this + 8) = v52;
    *(double *)(a4 + 24) = v49;
  }
  return result;
}

void NewEquirectProjectNode()
{
  v0 = (LiHgcEquirectProject *)HGObject::operator new(0x1B0uLL);
  *(_OWORD *)v0 = 0u;
  *((_OWORD *)v0 + atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v0 + OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 5) = 0u;
  *((_OWORD *)v0 + 6) = 0u;
  *((_OWORD *)v0 + 7) = 0u;
  *((_OWORD *)v0 + OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v0 + 9) = 0u;
  *((_OWORD *)v0 + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v0 + 1atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v0 + 1OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v0 + 13) = 0u;
  *((_OWORD *)v0 + 14) = 0u;
  *((_OWORD *)v0 + 15) = 0u;
  *((_OWORD *)v0 + 16) = 0u;
  *((_OWORD *)v0 + 17) = 0u;
  *((_OWORD *)v0 + 1OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v0 + 19) = 0u;
  *((_OWORD *)v0 + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v0 + 2atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v0 + 2OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v0 + 23) = 0u;
  *((_OWORD *)v0 + 24) = 0u;
  *((_OWORD *)v0 + 25) = 0u;
  *((_OWORD *)v0 + 26) = 0u;
  LiHgcEquirectProject::LiHgcEquirectProject(v0);
}

void sub_1B7A2AC8C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float computeDistanceToEquirectImagePlane(float a1, float a2, LiHeEquirectProject *a3)
{
  float v3 = a2 * 3.14159265 / 180.0;
  return LiHeEquirectProject::computeDistanceToImagePlane(a3, a1, v3);
}

uint64_t RetimeAddBlend2::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27) {
    return 27;
  }
  else {
    return a2;
  }
}

uint64_t RetimeAddBlend6::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27) {
    return 27;
  }
  else {
    return a2;
  }
}

void FxSupport::makeRetimeAddBlend2(FxSupport *this)
{
  uint64_t v1 = (HgcRetimeAddBlend2 *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v1 + 1atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + 1OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 1OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v1 + 2atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + 2OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  HgcRetimeAddBlend2::HgcRetimeAddBlend2(v1);
}

void sub_1B7A2ADA0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void FxSupport::makeRetimeAddBlend6(FxSupport *this)
{
  uint64_t v1 = (HgcRetimeAddBlend6 *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v1 + 1atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + 1OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 1OZSpline::reparametrize((uint64_t)this + 8) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = 0u;
  *((_OWORD *)v1 + 2atomic_store(0, (unint64_t *)this + 1) = 0u;
  *((_OWORD *)v1 + 2OZChannelEnum::~OZChannelEnum(this - 2) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  HgcRetimeAddBlend6::HgcRetimeAddBlend6(v1);
}

void sub_1B7A2AE3C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void RetimeAddBlend2::~RetimeAddBlend2(HGNode *this)
{
  HgcRetimeAddBlend2::~HgcRetimeAddBlend2(this);

  HGObject::operator delete(v1);
}

void RetimeAddBlend6::~RetimeAddBlend6(HGNode *this)
{
  HgcRetimeAddBlend6::~HgcRetimeAddBlend6(this);

  HGObject::operator delete(v1);
}

void sub_1B7A2B06C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B7A2B2E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

FxMatrix44 *FxMatrixFromPCMatrix(uint64_t a1)
{
  uint64_t v1 = [[FxMatrix44 alloc] initWithMatrix44Data:a1];

  return v1;
}

__n128 FxMatrixToPCMatrix@<Q0>(FxMatrix44 *a1@<X0>, uint64_t a2@<X8>)
{
  float v3 = [(FxMatrix44 *)a1 matrix];
  long long v4 = *(_OWORD *)&(*v3)[2][2];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&(*v3)[2][0];
  *(_OWORD *)(a2 + 8OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v4;
  long long v5 = *(_OWORD *)&(*v3)[3][2];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&(*v3)[3][0];
  *(_OWORD *)(a2 + 11OZChannelEnum::~OZChannelEnum(this - 2) = v5;
  long long v6 = *(_OWORD *)&(*v3)[0][2];
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  __n128 result = *(__n128 *)&(*v3)[1][0];
  long long v8 = *(_OWORD *)&(*v3)[1][2];
  *(__n128 *)(a2 + 3OZChannelEnum::~OZChannelEnum(this - 2) = result;
  *(_OWORD *)(a2 + 4OZSpline::reparametrize((uint64_t)this + 8) = v8;
  return result;
}

uint64_t FxApplySDRToHDR@<X0>(uint64_t a1@<X0>, CGColorSpace *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return FxApplySDRToHDR(a2, a1, (uint64_t)a2, a3, a4);
}

uint64_t FxApplySDRToHDR@<X0>(CGColorSpace *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  int v22 = 0;
  unint64_t v20 = PCGetNCLCCodeForColorSpace(a1);
  int v21 = v10;
  if (operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_Rec709) || operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_sRGB))
  {
    CGColorSpaceRef v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
    int v22 = 0;
  }
  else
  {
    if (operator==((uint64_t)&v20, (uint64_t)&kPCNCLC_P3_D65))
    {
      CGColorSpaceRef v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_P3_D65);
      int v12 = 1;
    }
    else
    {
      CGColorSpaceRef v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
      int v12 = 2;
    }
    int v22 = v12;
  }
  FxApplyColorConform(a2, a1, 1, v11, 0);
  BOOL v19 = a4 != 0;
  FxSupport::newHGRefWithInput<HGHLG::SDRToHLG,HGHLG::SDRToHLG::SDRInputType &,HGHLG::SDRToHLG::ConversionMethod const&>(*a5, &v22, (int *)&v19, &v18);
  uint64_t v13 = *a5;
  uint64_t v14 = v18;
  if (*a5 == v18)
  {
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    }
  }
  else
  {
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
      uint64_t v14 = v18;
    }
    *a5 = v14;
  }
  CGColorSpaceRef v15 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  FxApplyColorConform(a5, v15, 0, a3, 1);
  uint64_t result = *a5;
  uint64_t v17 = v18;
  if (*a5 == v18)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    }
  }
  else
  {
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
      uint64_t v17 = v18;
    }
    *a5 = v17;
  }
  return result;
}

void sub_1B7A2B6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (*v9) {
    (*(void (**)(void))(*(void *)*v9 + 24))(*v9);
  }
  _Unwind_Resume(exception_object);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, float *a2@<X8>)
{
  long long v4 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);

  return FxApplyBT2446A(a1, v4, v4, a2);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, CGColorSpace *a2@<X1>, CGColorSpace *a3@<X2>, float *a4@<X8>)
{
  PCColor::PCColor(&v41, *a1, a1[1], a1[2], a2);
  long long v6 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
  uint64_t v40 = 0;
  float v39 = 0.0;
  PCColor::getRGB(&v41, (float *)&v40 + 1, (float *)&v40, &v39, v6);
  v38[0] = *((float *)&v40 + 1);
  LODWORD(v38[1]) = v40;
  _OWORD v38[2] = v39;
  getRec2020RGBToYCbCrMatrix();
  operator*<float>((float *)&getRec2020RGBToYCbCrMatrix(void)::result, v38, (float *)&v37.var0.var0);
  int var0 = v37.var0.var0;
  float v7 = *((float *)&v37.var0.var0 + 1);
  float v9 = *(float *)v37.var0.var1;
  float v10 = powf(*(float *)&v37.var0.var0 * 255.0, flt_1B7E7CE48[(float)(*(float *)&v37.var0.var0 * 255.0) > 70.0]+ (float)((float)(*(float *)&v37.var0.var0 * 255.0)* (float)(flt_1B7E7CE40[(float)(*(float *)&v37.var0.var0 * 255.0) > 70.0]+ (float)((float)(*(float *)&v37.var0.var0 * 255.0)* flt_1B7E7CE38[(float)(*(float *)&v37.var0.var0 * 255.0) > 70.0]))));
  float v11 = 1.0;
  if (*(float *)&var0 > 0.0) {
    float v11 = (float)(v10 / *(float *)&var0) * 1.075;
  }
  float v12 = v7 * v11;
  float v13 = v9 * v11;
  float v14 = v10 + (float)(v13 * 1.4746);
  float v15 = v14 / 1000.0;
  if (v14 > 1000.0) {
    float v15 = 1.0;
  }
  if (v14 >= 0.0) {
    float v16 = v15;
  }
  else {
    float v16 = 0.0;
  }
  float v17 = powf(v16, 2.4);
  float v18 = (float)(v10 + (float)(v12 * -0.16455)) + (float)(v13 * -0.57135);
  float v19 = v18 / 1000.0;
  if (v18 > 1000.0) {
    float v19 = 1.0;
  }
  if (v18 >= 0.0) {
    float v20 = v19;
  }
  else {
    float v20 = 0.0;
  }
  float v21 = powf(v20, 2.4);
  float v22 = v10 + (float)(v12 * 1.8814);
  float v23 = v22 / 1000.0;
  if (v22 > 1000.0) {
    float v23 = 1.0;
  }
  if (v22 >= 0.0) {
    float v24 = v23;
  }
  else {
    float v24 = 0.0;
  }
  float v25 = powf(v24, 2.4);
  {
    getRec2020RGBToYCbCrMatrix();
    int v35 = getRec2020RGBToYCbCrMatrix(void)::result;
    getRec2020RGBToYCbCrMatrix();
    int v36 = dword_1E9EE5A44;
    getRec2020RGBToYCbCrMatrix();
    getRec2020LuminanceCoefficients(void)::uint64_t result = v35;
    *(_DWORD *)algn_1E9EE5A74 = v36;
    dword_1E9EE5A78 = dword_1E9EE5A48;
  }
  float v26 = *(float *)&getRec2020LuminanceCoefficients(void)::result;
  float v27 = *(float *)algn_1E9EE5A74;
  float v28 = *(float *)&dword_1E9EE5A78;
  uint64_t v29 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
  float v30 = (float)((float)(v17 * v26) + (float)(v21 * v27)) + (float)(v25 * v28);
  float v31 = powf(v30, -0.16667) * 12.0;
  if (v30 <= 0.0) {
    float v31 = 0.0;
  }
  PCColor::PCColor(&v37, v17 * v31, v21 * v31, v25 * v31, v29);
  PCColor::getRGB(&v37, (float *)&v40 + 1, (float *)&v40, &v39, a3);
  int v32 = v40;
  float v33 = v39;
  *a4 = *((float *)&v40 + 1);
  *((_DWORD *)a4 + atomic_store(0, (unint64_t *)this + 1) = v32;
  a4[2] = v33;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v37.var1._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v41.var1._obj);
}

void sub_1B7A2BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CGColorSpace *a26)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v26 + 48));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

CGColorSpace **FxApplyBT2446A@<X0>(float *a1@<X0>, CGColorSpace *a2@<X1>, float *a3@<X8>)
{
  return FxApplyBT2446A(a1, a2, a2, a3);
}

float operator*<float>@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = a2[1];
  float v4 = a2[2];
  float result = (float)((float)(*a1 * *a2) + (float)(a1[1] * v3)) + (float)(a1[2] * v4);
  float v6 = (float)((float)(*a2 * a1[3]) + (float)(v3 * a1[4])) + (float)(v4 * a1[5]);
  float v7 = (float)((float)(*a2 * a1[6]) + (float)(v3 * a1[7])) + (float)(v4 * a1[8]);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

void getRec2020RGBToYCbCrMatrix(void)
{
  {
    makeRec2020RGBToYCbCrMatrix();
    __cxa_atexit((void (*)(void *))OZChannelBase::setRangeName, &getRec2020RGBToYCbCrMatrix(void)::result, &dword_1B73F3000);
  }
}

double makeRec2020RGBToYCbCrMatrix(void)
{
  *(void *)&long long v0 = 0x3D72E48F3F2D9168;
  *((void *)&v0 + atomic_store(0, (unint64_t *)this + 1) = 0xBEB88269BE0EFB2FLL;
  getRec2020RGBToYCbCrMatrix(void)::double result = 1049002141;
  *(_OWORD *)&dword_1E9EE5A44 = v0;
  dword_1E9EE5A54 = 1056964608;
  double result = -0.000013070241;
  qword_1E9EE5A58 = 0xBEEB69083F000000;
  dword_1E9EE5A60 = -1121667137;
  return result;
}

CGColorSpace **FxGetRGBAForRenderingCGI(PCColor *a1, FxColorDescription *this, float *a3, float *a4, float *a5, float *a6)
{
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(this);
  if (FxColorDescription::isHDR(this))
  {
    PCToneMapMethod v14 = *(PCToneMapMethod *)FxColorDescription::getToneMapMethod(this);
    if (a6) {
      return PCColor::getRGBA(&a1->var0.var0, a3, a4, a5, a6, CGColorSpace, 1, &v14);
    }
    else {
      return PCColor::getRGB(&a1->var0.var0, a3, a4, a5, CGColorSpace, 1, &v14);
    }
  }
  else if (a6)
  {
    return PCColor::getRGBA(a1, a3, a4, a5, a6, CGColorSpace);
  }
  else
  {
    return PCColor::getRGB(a1, a3, a4, a5, CGColorSpace);
  }
}

void createContrastBezierLumaNode()
{
  long long v0 = (HContrastBezierLuma *)HGObject::operator new(0x1A0uLL);
  HContrastBezierLuma::HContrastBezierLuma(v0);
}

void sub_1B7A2BF24(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void createContrastBezierRGBNode()
{
  long long v0 = (HContrastBezierRGB *)HGObject::operator new(0x1A0uLL);
  HContrastBezierRGB::HContrastBezierRGB(v0);
}

void sub_1B7A2C0F8(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t createContrastLumaNode@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, HgcContrastLuma **a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  PCToneMapMethod v14 = (HgcContrastLuma *)HGObject::operator new(0x1A0uLL);
  HgcContrastLuma::HgcContrastLuma(v14);
  (*(void (**)(HgcContrastLuma *, void, void))(*(void *)v14 + 120))(v14, 0, *a1);
  float v15 = a5;
  (*(void (**)(HgcContrastLuma *, uint64_t, float, double, double, double))(*(void *)v14 + 96))(v14, 1, v15, 0.0, 0.0, 0.0);
  float v16 = a6;
  (*(void (**)(HgcContrastLuma *, void, float, double, double, double))(*(void *)v14 + 96))(v14, 0, v16, 0.0, 0.0, 0.0);
  if (a2) {
    v17.n128_f32[0] = 1.0;
  }
  else {
    v17.n128_f32[0] = 0.0;
  }
  (*(void (**)(HgcContrastLuma *, uint64_t, __n128, double, double, double))(*(void *)v14 + 96))(v14, 3, v17, 0.0, 0.0, 0.0);
  v18.n128_u64[0] = 0;
  if (a3) {
    v18.n128_f32[0] = 1.0;
  }
  (*(void (**)(HgcContrastLuma *, uint64_t, __n128, double, double, double))(*(void *)v14 + 96))(v14, 4, v18, 0.0, 0.0, 0.0);
  float v19 = a7;
  uint64_t result = (*(uint64_t (**)(HgcContrastLuma *, uint64_t, float, double, double, double))(*(void *)v14 + 96))(v14, 2, v19, 0.0, 0.0, 0.0);
  *a4 = v14;
  return result;
}

void sub_1B7A2C31C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t createContrastRGBNode@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, HgcContrastRGB **a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  PCToneMapMethod v14 = (HgcContrastRGB *)HGObject::operator new(0x1A0uLL);
  HgcContrastRGB::HgcContrastRGB(v14);
  (*(void (**)(HgcContrastRGB *, void, void))(*(void *)v14 + 120))(v14, 0, *a1);
  float v15 = a5;
  (*(void (**)(HgcContrastRGB *, uint64_t, float, double, double, double))(*(void *)v14 + 96))(v14, 1, v15, 0.0, 0.0, 0.0);
  float v16 = a6;
  (*(void (**)(HgcContrastRGB *, void, float, double, double, double))(*(void *)v14 + 96))(v14, 0, v16, 0.0, 0.0, 0.0);
  if (a2) {
    v17.n128_f32[0] = 1.0;
  }
  else {
    v17.n128_f32[0] = 0.0;
  }
  (*(void (**)(HgcContrastRGB *, uint64_t, __n128, double, double, double))(*(void *)v14 + 96))(v14, 3, v17, 0.0, 0.0, 0.0);
  v18.n128_u64[0] = 0;
  if (a3) {
    v18.n128_f32[0] = 1.0;
  }
  (*(void (**)(HgcContrastRGB *, uint64_t, __n128, double, double, double))(*(void *)v14 + 96))(v14, 4, v18, 0.0, 0.0, 0.0);
  float v19 = a7;
  uint64_t result = (*(uint64_t (**)(HgcContrastRGB *, uint64_t, float, double, double, double))(*(void *)v14 + 96))(v14, 2, v19, 0.0, 0.0, 0.0);
  *a4 = v14;
  return result;
}

void sub_1B7A2C540(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HContrastBezierLuma::HContrastBezierLuma(HContrastBezierLuma *this)
{
}

void sub_1B7A2C5EC(_Unwind_Exception *a1)
{
  HgcContrastBezierLuma::~HgcContrastBezierLuma(v1);
  _Unwind_Resume(a1);
}

void HContrastBezierRGB::HContrastBezierRGB(HContrastBezierRGB *this)
{
}

void sub_1B7A2C664(_Unwind_Exception *a1)
{
  HgcContrastBezierRGB::~HgcContrastBezierRGB(v1);
  _Unwind_Resume(a1);
}

uint64_t HConvolvePass8Tap::GetOutput(HConvolvePass8Tap *this, HGRenderer *a2)
{
  (*(void (**)(HConvolvePass8Tap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32);

  return HgcConvolvePass8tap::GetOutput(this, a2);
}

void HConvolvePass8Tap::~HConvolvePass8Tap(HGNode *this)
{
  HgcConvolvePass8tap::~HgcConvolvePass8tap(this);

  HGObject::operator delete(v1);
}

void HEquirectWrap::init(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  uint64_t v70 = 0x3FF0000000000000;
  uint64_t v66 = 0;
  uint64_t v67 = 0x3FF0000000000000;
  uint64_t v65 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  float64x2_t v10 = vcvtq_f64_f32(a3[1]);
  v64[0] = vcvtq_f64_f32(*a3);
  v64[1] = v10;
  float64x2_t v11 = vcvtq_f64_f32(a4[1]);
  v64[2] = vcvtq_f64_f32(*a4);
  v64[3] = v11;
  HGTransform::HGTransform((HGTransform *)v63);
  HGTransform::LoadMatrixd((HGTransform *)v63, (double *)v64);
  HGTransform::Transpose((HGTransform *)v63);
  uint64_t v62 = 0x3FF0000000000000;
  uint64_t v59 = 0x3FF0000000000000;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  float64x2_t v12 = vcvtq_f64_f32(a5[1]);
  v56[0] = vcvtq_f64_f32(*a5);
  v56[1] = v12;
  float64x2_t v13 = vcvtq_f64_f32(a6[1]);
  v56[2] = vcvtq_f64_f32(*a6);
  v56[3] = v13;
  HGTransform::HGTransform((HGTransform *)v55);
  HGTransform::LoadMatrixd((HGTransform *)v55, (double *)v56);
  HGTransform::Transpose((HGTransform *)v55);
  PCToneMapMethod v14 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v14);
  __asm { FMOV            V1.2D, #-0.5 }
  float64x2_t v20 = vcvtq_f64_f32(*a2);
  float64x2_t v47 = _Q1;
  float64x2_t v53 = vmulq_f64(v20, _Q1);
  float64x2_t v54 = v20;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v56, v53.f64, (uint64_t)&v53);
  float v21 = v53.f64[0];
  float v22 = v53.f64[1];
  float v23 = v53.f64[0] + v54.f64[0];
  float v24 = v53.f64[1] + v54.f64[1];
  uint64_t v26 = HGRectMake4f(v25, v21, v22, v23, v24);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v14 + 96))(v14, 0, (float)(int)v26, (float)SHIDWORD(v26), (float)v27, (float)v28);
  uint64_t v29 = *(HGCrop **)(a1 + 408);
  if (v29 != v14)
  {
    if (v29) {
      (*(void (**)(HGCrop *))(*(void *)v29 + 24))(v29);
    }
    *(void *)(a1 + 40OZSpline::reparametrize((uint64_t)this + 8) = v14;
    (*(void (**)(HGCrop *))(*(void *)v14 + 16))(v14);
  }
  HGTransform::HGTransform((HGTransform *)v52);
  HGTransform::Multiply(v52, v63);
  HGTransform::Scale((HGTransform *)v52, 1.0, -1.0, 1.0);
  HGTransform::Translate((HGTransform *)v52, a2->f32[0] * -0.5, a2->f32[1], 0.0);
  HGTransform::Multiply(v52, v55);
  HGTransform::HGTransform((HGTransform *)v51);
  HGTransform::Multiply(v51, v63);
  HGTransform::Scale((HGTransform *)v51, 1.0, -1.0, 1.0);
  HGTransform::Translate((HGTransform *)v51, a2->f32[0] * 0.5, a2->f32[1], 0.0);
  HGTransform::Multiply(v51, v55);
  float v30 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v30);
  (*(void (**)(HGXForm *, float64x2_t *))(*(void *)v30 + 576))(v30, v52);
  (*(void (**)(HGXForm *, void, HGCrop *))(*(void *)v30 + 120))(v30, 0, v14);
  float v31 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v31);
  (*(void (**)(HGXForm *, float64x2_t *))(*(void *)v31 + 576))(v31, v51);
  (*(void (**)(HGXForm *, void, HGCrop *))(*(void *)v31 + 120))(v31, 0, v14);
  int v32 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v32);
  (*(void (**)(HGHWMultiBlend *, void, HGXForm *))(*(void *)v32 + 120))(v32, 0, v30);
  (*(void (**)(HGHWMultiBlend *, uint64_t, HGXForm *))(*(void *)v32 + 120))(v32, 1, v31);
  (*(void (**)(HGHWMultiBlend *, uint64_t, HGCrop *))(*(void *)v32 + 120))(v32, 2, v14);
  float v33 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v33);
  double v34 = COERCE_FLOAT(*a2);
  double v35 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a2));
  float64x2_t v48 = vmulq_f64(vcvtq_f64_f32(*a2), v47);
  double v49 = v34;
  double v50 = v35 + v35;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v56, v48.f64, (uint64_t)&v48);
  float v36 = v48.f64[0];
  float v37 = v48.f64[1];
  float v38 = v48.f64[0] + v49;
  float v39 = v48.f64[1] + v50;
  uint64_t v41 = HGRectMake4f(v40, v36, v37, v38, v39);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v33 + 96))(v33, 0, (float)(int)v41, (float)SHIDWORD(v41), (float)v42, (float)v43);
  (*(void (**)(HGCrop *, void, HGHWMultiBlend *))(*(void *)v33 + 120))(v33, 0, v32);
  float64x2_t v44 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v44);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v44, (const char *)3, v45);
  (*(void (**)(HGTextureWrap *, void, HGCrop *))(*(void *)v44 + 120))(v44, 0, v33);
  int8x16_t v46 = *(HGTextureWrap **)(a1 + 416);
  if (v46 != v44)
  {
    if (v46) {
      (*(void (**)(HGTextureWrap *))(*(void *)v46 + 24))(v46);
    }
    *(void *)(a1 + 416) = v44;
    (*(void (**)(HGTextureWrap *))(*(void *)v44 + 16))(v44);
  }
  (*(void (**)(HGTextureWrap *))(*(void *)v44 + 24))(v44);
  (*(void (**)(HGCrop *))(*(void *)v33 + 24))(v33);
  (*(void (**)(HGHWMultiBlend *))(*(void *)v32 + 24))(v32);
  (*(void (**)(HGXForm *))(*(void *)v31 + 24))(v31);
  (*(void (**)(HGXForm *))(*(void *)v30 + 24))(v30);
  HGTransform::~HGTransform((HGTransform *)v51);
  HGTransform::~HGTransform((HGTransform *)v52);
  (*(void (**)(HGCrop *))(*(void *)v14 + 24))(v14);
  HGTransform::~HGTransform((HGTransform *)v55);
  HGTransform::~HGTransform((HGTransform *)v63);
}

void sub_1B7A2CEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
  }
  (*(void (**)(uint64_t))(*(void *)v60 + 24))(v60);
  (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
  (*(void (**)(uint64_t))(*(void *)v58 + 24))(v58);
  (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
  HGTransform::~HGTransform((HGTransform *)&a15);
  HGTransform::~HGTransform((HGTransform *)&a33);
  (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
  HGTransform::~HGTransform((HGTransform *)&a55);
  HGTransform::~HGTransform((HGTransform *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t HEquirectWrap::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(void, void, HGNode *))(**((void **)this + 51) + 120))(*((void *)this + 51), 0, Input);
  return *((void *)this + 52);
}

void HEquirectWrap::~HEquirectWrap(HGNode *this)
{
  HEquirectWrap::~HEquirectWrap(this);

  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1114290;
  double v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  float v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

void HConvolvePass8Tap8Bit::HConvolvePass8Tap8Bit(HConvolvePass8Tap8Bit *this)
{
}

void sub_1B7A2D270(_Unwind_Exception *a1)
{
  HgcConvolvePass8tap::~HgcConvolvePass8tap(v1);
  _Unwind_Resume(a1);
}

void sub_1B7A2DE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

void HRenderToEquirect::HRenderToEquirect(HRenderToEquirect *this)
{
}

void sub_1B7A2E1B0(_Unwind_Exception *a1)
{
  HgcRenderToEquirect::~HgcRenderToEquirect(v1);
  _Unwind_Resume(a1);
}

void HRenderToEquirect::~HRenderToEquirect(HGNode *this)
{
  *(void *)this = &unk_1F1114760;
  HgcRenderToEquirect::~HgcRenderToEquirect(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F1114760;
  HgcRenderToEquirect::~HgcRenderToEquirect(this);

  HGObject::operator delete(v1);
}

uint64_t HRenderToEquirect::SetXPlusPT(double *a1, double *a2)
{
  float v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[52];
  float v7 = a1[53];
  float v8 = a1[54];
  float v9 = a1[55];
  float v10 = a1[56];
  float v11 = a1[57];
  float v12 = a1[58];
  float v13 = a1[59];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 13, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 14, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::SetXMinusPT(double *a1, double *a2)
{
  float v3 = a1 + 68;
  if (a1 + 68 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[68];
  float v7 = a1[69];
  float v8 = a1[70];
  float v9 = a1[71];
  float v10 = a1[72];
  float v11 = a1[73];
  float v12 = a1[74];
  float v13 = a1[75];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 15, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 16, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::SetYPlusPT(double *a1, double *a2)
{
  float v3 = a1 + 84;
  if (a1 + 84 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[84];
  float v7 = a1[85];
  float v8 = a1[86];
  float v9 = a1[87];
  float v10 = a1[88];
  float v11 = a1[89];
  float v12 = a1[90];
  float v13 = a1[91];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 9, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 10, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::SetYMinusPT(double *a1, double *a2)
{
  float v3 = a1 + 100;
  if (a1 + 100 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[100];
  float v7 = a1[101];
  float v8 = a1[102];
  float v9 = a1[103];
  float v10 = a1[104];
  float v11 = a1[105];
  float v12 = a1[106];
  float v13 = a1[107];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 11, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 12, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::SetZPlusPT(double *a1, double *a2)
{
  float v3 = a1 + 116;
  if (a1 + 116 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[116];
  float v7 = a1[117];
  float v8 = a1[118];
  float v9 = a1[119];
  float v10 = a1[120];
  float v11 = a1[121];
  float v12 = a1[122];
  float v13 = a1[123];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 5, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 6, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::SetZMinusPT(double *a1, double *a2)
{
  float v3 = a1 + 132;
  if (a1 + 132 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v3[j] = a2[j];
      v3 += 4;
      a2 += 4;
    }
  }
  float v6 = a1[132];
  float v7 = a1[133];
  float v8 = a1[134];
  float v9 = a1[135];
  float v10 = a1[136];
  float v11 = a1[137];
  float v12 = a1[138];
  float v13 = a1[139];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 7, v6, v7, v8, v9);
  PCToneMapMethod v14 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v15.n128_f32[0] = v10;
  v16.n128_f32[0] = v11;
  v17.n128_f32[0] = v12;
  v18.n128_f32[0] = v13;

  return v14(a1, 8, v15, v16, v17, v18);
}

uint64_t HRenderToEquirect::GetDOD(HRenderToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *, void, void))(*(void *)this + 104))(this, 1, v19, *(void *)&a4.var0, *(void *)&a4.var2);
  float v15 = *(float *)v19;
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 2, v19);
  float v14 = *(float *)v19;
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 3, v19);
  long long v5 = v19[0];
  (*(void (**)(HRenderToEquirect *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 4, v19);
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)&v19[0]);
  uint64_t v23 = 0;
  float64x2_t v7 = vcvtq_f64_f32(*(float32x2_t *)((char *)v19 + 8));
  v19[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)&v5 + 8));
  v19[0] = vcvtq_f64_f32(*(float32x2_t *)&v5);
  v19[2] = v6;
  v19[3] = v7;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v27 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::invert((double *)v19, (double *)v19, 0.0);
  __asm { FMOV            V2.2D, #-0.5 }
  float64x2_t v16 = vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v14), LODWORD(v15))), _Q2);
  double v17 = v15;
  double v18 = v14;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v19, v16.f64, (uint64_t)&v16);
  return HGRectMake4i(vcvtmd_s64_f64(v16.f64[0]), vcvtmd_s64_f64(v16.f64[1]), vcvtpd_s64_f64(v16.f64[0] + v17), vcvtpd_s64_f64(v16.f64[1] + v18));
}

uint64_t *HRenderToEquirect::getInputPixelTransform(HRenderToEquirect *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = (uint64_t *)((char *)this + 416);
      break;
    case 1:
      uint64_t result = (uint64_t *)((char *)this + 544);
      break;
    case 2:
      uint64_t result = (uint64_t *)((char *)this + 672);
      break;
    case 3:
      uint64_t result = (uint64_t *)((char *)this + 800);
      break;
    case 4:
      uint64_t result = (uint64_t *)((char *)this + 928);
      break;
    case 5:
      uint64_t result = (uint64_t *)((char *)this + 1056);
      break;
    default:
      {
        uint64_t result = &HRenderToEquirect::getInputPixelTransform(int)::transform;
      }
      else
      {
        {
          qword_1E9EE5B00 = 0x3FF0000000000000;
          qword_1E9EE5AD8 = 0x3FF0000000000000;
          qword_1E9EE5AB0 = 0x3FF0000000000000;
          HRenderToEquirect::getInputPixelTransform(int)::transform = 0x3FF0000000000000;
          unk_1E9EE5A90 = 0u;
          unk_1E9EE5AA0 = 0u;
          xmmword_1E9EE5AB8 = 0u;
          unk_1E9EE5AC8 = 0u;
          *(_OWORD *)algn_1E9EE5AE0 = 0u;
          *(_OWORD *)&algn_1E9EE5AE0[16] = 0u;
          __cxa_atexit((void (*)(void *))OZChannelBase::setRangeName, &HRenderToEquirect::getInputPixelTransform(int)::transform, &dword_1B73F3000);
        }
        uint64_t result = &HRenderToEquirect::getInputPixelTransform(int)::transform;
      }
      break;
  }
  return result;
}

uint64_t HRenderToEquirect::GetROI(HRenderToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HRenderToEquirect *, void, double *, void, void))(*(void *)this + 104))(this, 0, &v13, *(void *)&a4.var0, *(void *)&a4.var2);
  double v6 = *(float *)&v13;
  double v13 = *(float *)&v13 * -0.5;
  double v14 = v13;
  double v15 = v6;
  double v16 = v6;
  InputPixelTransform = HRenderToEquirect::getInputPixelTransform(this, a3);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)InputPixelTransform, &v13, (uint64_t)&v13);
  uint64_t v8 = HGRectMake4i(vcvtmd_s64_f64(v13), vcvtmd_s64_f64(v14), vcvtpd_s64_f64(v13 + v15), vcvtpd_s64_f64(v14 + v16));
  uint64_t v10 = v9;
  uint64_t v11 = HGRectMake4i(0xFFFFFFFE, 0xFFFFFFFE, 2u, 2u);
  return HGRectGrow(v8, v10, v11);
}

void fx_RenderToEquirect()
{
  long long v0 = (HRenderToEquirect *)HGObject::operator new(0x4A0uLL);
  HRenderToEquirect::HRenderToEquirect(v0);
}

void sub_1B7A2F0B4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FxBitmapRepHGBitmap::FxBitmapRepHGBitmap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = &unk_1F11149C8;
  *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v3;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(int *)(*(void *)(a1 + 8) + 16);
  if v4 <= 0x1D && ((0x3BC800ABu >> v4)) {
    *(_DWORD *)(a1 + 16) = dword_1B837AC48[v4];
  }
  return a1;
}

uint64_t FxBitmapRepHGBitmap::getData(FxBitmapRepHGBitmap *this)
{
  return *(void *)(*((void *)this + 1) + 80);
}

uint64_t FxBitmapRepHGBitmap::getAllocationSize(FxBitmapRepHGBitmap *this)
{
  return *(void *)(*((void *)this + 1) + 72);
}

uint64_t FxBitmapRepHGBitmap::getWidth(FxBitmapRepHGBitmap *this)
{
  return (*(_DWORD *)(*((void *)this + 1) + 28) - *(_DWORD *)(*((void *)this + 1) + 20));
}

uint64_t FxBitmapRepHGBitmap::getHeight(FxBitmapRepHGBitmap *this)
{
  return (*(_DWORD *)(*((void *)this + 1) + 32) - *(_DWORD *)(*((void *)this + 1) + 24));
}

uint64_t FxBitmapRepHGBitmap::getPixelFormat(FxBitmapRepHGBitmap *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t FxBitmapRepHGBitmap::getBytesPerRow(FxBitmapRepHGBitmap *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 64);
}

void FxBitmapRepHGBitmap::~FxBitmapRepHGBitmap(FxBitmapRepHGBitmap *this)
{
  FxBitmapRepHGBitmap::~FxBitmapRepHGBitmap(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t v1;

  *(void *)this = &unk_1F11149C8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
}

void HSimpleBorder::~HSimpleBorder(HGNode *this)
{
  *(void *)this = &unk_1F1114A38;
  HgcSimpleBorder::~HgcSimpleBorder(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F1114A38;
  HgcSimpleBorder::~HgcSimpleBorder(this);

  HGObject::operator delete(v1);
}

uint64_t HSimpleBorder::GetDOD(HSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 106)), vcvtms_s32_f32(*((float *)this + 107)), vcvtps_s32_f32(*((float *)this + 108)), vcvtps_s32_f32(*((float *)this + 109)));
}

uint64_t HSimpleBorder::GetROI(HSimpleBorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

HGNode *fxSimpleBorder@<X0>(long long *a1@<X1>, double *a2@<X3>, int a3@<W4>, HGNode **a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v33 = 0x3FF0000000000000;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v33, a2, 0.0))
  {
    double v15 = (HGNode *)HGObject::operator new(0x1A0uLL);
    uint64_t result = HGNode::HGNode(v15);
    goto LABEL_11;
  }
  long long v12 = a1[1];
  long long v31 = *a1;
  long long v32 = v12;
  if (a3 == 2)
  {
    *(double *)&long long v31 = *(double *)&v31 - a5;
    *((double *)&v31 + atomic_store(0, (unint64_t *)this + 1) = *((double *)&v31 + 1) - a6;
    double v13 = *((double *)&v32 + 1);
    *(double *)&long long v32 = a5 + a5 + *(double *)&v32;
    double v14 = a6 + a6;
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    double v13 = a6;
    *(double *)&long long v31 = *(double *)&v31 - a5 * 0.5;
    *((double *)&v31 + atomic_store(0, (unint64_t *)this + 1) = *((double *)&v31 + 1) - a6 * 0.5;
    double v14 = *((double *)&v32 + 1);
    *(double *)&long long v32 = *(double *)&v32 + a5;
LABEL_7:
    *((double *)&v32 + atomic_store(0, (unint64_t *)this + 1) = v14 + v13;
  }
  double v28 = 0.0;
  double v29 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v30 = _Q0;
  if (PCMatrix44Tmpl<double>::transformRect<double>(a2, (double *)&v31, (uint64_t)&v28))
  {
    float v22 = v28;
    float v23 = v29;
    float v24 = v28 + *(double *)&v30;
    float v25 = v29 + *((double *)&v30 + 1);
    HGRectf::Init((HGRectf *)&v27, v22, v23, v24, v25);
    uint64_t v26 = (HgcSimpleBorder *)HGObject::operator new(0x240uLL);
    HgcSimpleBorder::HgcSimpleBorder(v26);
  }
  double v15 = (HGNode *)HGObject::operator new(0x1A0uLL);
  uint64_t result = HGNode::HGNode(v15);
LABEL_11:
  *a4 = v15;
  return result;
}

void sub_1B7A2F790(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float32_t OMUtil::computeAverageOfVec3fSample@<S0>(void *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D2>)
{
  unint64_t v3 = (a1[1] - *a1) / 12;
  if (a1[1] == *a1)
  {
    float32x2_t v6 = 0;
    float v7 = 0.0;
  }
  else
  {
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = (a1[1] - *a1) / 12;
    }
    long long v5 = (float *)(*a1 + 8);
    float32x2_t v6 = 0;
    float v7 = 0.0;
    do
    {
      a3 = *((double *)v5 - 1);
      float32x2_t v6 = vadd_f32(v6, *(float32x2_t *)&a3);
      float v8 = *v5;
      v5 += 3;
      float v7 = v7 + v8;
      --v4;
    }
    while (v4);
  }
  *(float *)&a3 = (float)v3;
  *a2 = vdiv_f32(v6, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  float32_t result = v7 / (float)v3;
  a2[1].f32[0] = result;
  return result;
}

uint64_t OMUtil::getBoundingBox(uint64_t *a1, uint64_t a2, int a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  float v16 = a4->f32[0] + 0.004;
  float v17 = a4->f32[1] + 0.004;
  v72[0].f32[0] = v16;
  v72[0].f32[1] = v17;
  *(float *)&a7 = a4[1].f32[0] + 0.004;
  v72[0].f32[2] = *(float *)&a7;
  unint64_t v19 = a1[1];
  unint64_t v18 = a1[2];
  if (v19 >= v18)
  {
    unint64_t v20 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(float *)unint64_t v19 = v16;
    *(float *)(v19 + 4) = v17;
    unint64_t v20 = v19 + 12;
    *(_DWORD *)(v19 + OZSpline::reparametrize((uint64_t)this + 8) = LODWORD(a7);
  }
  a1[1] = v20;
  float32x2_t v21 = vadd_f32(*a4, (float32x2_t)vdup_n_s32(0x3B83126Fu));
  *(float32x2_t *)v72[0].f32 = v21;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v20 >= v18)
  {
    unint64_t v22 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v20 = v21.i32[0];
    *(void *)(v20 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    unint64_t v22 = v20 + 12;
  }
  a1[1] = v22;
  float32x2_t v23 = vadd_f32(*a4, (float32x2_t)0xBB83126F3B83126FLL);
  *(float32x2_t *)v72[0].f32 = v23;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v22 >= v18)
  {
    unint64_t v24 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v22 = v23.i32[0];
    *(void *)(v22 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    unint64_t v24 = v22 + 12;
  }
  a1[1] = v24;
  float32x2_t v25 = vadd_f32(*a4, (float32x2_t)0xBB83126F3B83126FLL);
  *(float32x2_t *)v72[0].f32 = v25;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v24 >= v18)
  {
    unint64_t v26 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v24 = v25.i32[0];
    *(void *)(v24 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    unint64_t v26 = v24 + 12;
  }
  a1[1] = v26;
  float32x2_t v27 = vadd_f32(*a4, (float32x2_t)0x3B83126FBB83126FLL);
  *(float32x2_t *)v72[0].f32 = v27;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v26 >= v18)
  {
    unint64_t v28 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v26 = v27.i32[0];
    *(void *)(v26 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    unint64_t v28 = v26 + 12;
  }
  a1[1] = v28;
  float32x2_t v29 = vadd_f32(*a4, (float32x2_t)0x3B83126FBB83126FLL);
  *(float32x2_t *)v72[0].f32 = v29;
  v72[0].f32[2] = a4[1].f32[0] + -0.004;
  if (v28 >= v18)
  {
    unint64_t v30 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v28 = v29.i32[0];
    *(void *)(v28 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    unint64_t v30 = v28 + 12;
  }
  a1[1] = v30;
  float32x2_t v31 = vadd_f32(*a4, (float32x2_t)vdup_n_s32(0xBB83126F));
  *(float32x2_t *)v72[0].f32 = v31;
  v72[0].f32[2] = a4[1].f32[0] + 0.004;
  if (v30 >= v18)
  {
    long long v32 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
    unint64_t v18 = a1[2];
  }
  else
  {
    *(_DWORD *)unint64_t v30 = v31.i32[0];
    *(void *)(v30 + 4) = *(uint64_t *)((char *)v72[0].i64 + 4);
    long long v32 = (_DWORD *)(v30 + 12);
  }
  a1[1] = (uint64_t)v32;
  float32x2_t v34 = (float32x2_t)vdup_n_s32(0xBB83126F);
  float32x2_t v33 = vadd_f32(*a4, v34);
  *(float32x2_t *)v72[0].f32 = v33;
  v34.f32[0] = a4[1].f32[0] + -0.004;
  v72[0].f32[2] = v34.f32[0];
  if ((unint64_t)v32 >= v18)
  {
    uint64_t v35 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a1, v72);
  }
  else
  {
    *long long v32 = v33.i32[0];
    v32[1] = v72[0].i32[1];
    v33.i32[0] = v72[0].i32[2];
    v32[2] = v72[0].i32[2];
    uint64_t v35 = (uint64_t)(v32 + 3);
  }
  a1[1] = v35;
  long long v69 = 0;
  uint64_t v70 = 0;
  uint64_t v36 = (void **)a1;
  uint64_t v71 = 0;
  if (a3)
  {
    OMUtil::reduceSample(a1, (uint64_t *)&v69, 5.62950094e14);
    uint64_t v36 = &v69;
    OMUtil::computeAverageOfVec3fSample(&v69, (float32x2_t *)v72, v37);
    v33.i32[1] = v72[0].i32[1];
    *a4 = *(float32x2_t *)v72[0].f32;
    v33.i32[0] = v72[0].i32[2];
    a4[1].i32[0] = v72[0].i32[2];
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v39 = PCPrincipalComponentAnalysisCompute<Vec3f,std::vector<Vec3f>>((float32x2_t **)v36, a4, *(double *)&v33, *(double *)&v34, a7, a8, a9, a10, a11, a12, (uint64_t)v72, &v66);
  if (!v39)
  {
    float v40 = v66[1];
    float v41 = v66[2];
    float v42 = v66[3];
    float v43 = sqrtf((float)((float)(*v66 * *v66) + (float)(v40 * v40)) + (float)(v41 * v41));
    v72[0].f32[0] = *v66 / v43;
    v72[0].f32[1] = v40 / v43;
    v72[0].f32[2] = v41 / v43;
    float v44 = v66[4];
    float v45 = v66[5];
    float v46 = sqrtf((float)((float)(v42 * v42) + (float)(v44 * v44)) + (float)(v45 * v45));
    v64[0].f32[0] = v42 / v46;
    v64[0].f32[1] = v44 / v46;
    v64[0].f32[2] = v45 / v46;
    float v47 = v66[6];
    float v48 = v66[7];
    float v49 = v66[8];
    float v50 = sqrtf((float)((float)(v47 * v47) + (float)(v48 * v48)) + (float)(v49 * v49));
    v63[0].f32[0] = v47 / v50;
    v63[0].f32[1] = v48 / v50;
    v63[0].f32[2] = v49 / v50;
    OMUtil::setBwMatrixWithDirectionalVector((OMUtil *)v72, (const Vec3f *)v64, (const Vec3f *)v63, &v65, v38);
    inv((const Mat4f *)&v65, v72);
    float64x2_t v51 = (float32x2_t *)*v36;
    float32x2_t v52 = (float32x2_t)vdup_n_s32(0x49742400u);
    float32x2_t v53 = (float32x2_t)vdup_n_s32(0xC9742400);
    float v54 = -1000000.0;
    if (*v36 == v36[1])
    {
      float v55 = 1000000.0;
    }
    else
    {
      float v55 = 1000000.0;
      do
      {
        *(float32x2_t *)v63[0].f32 = *v51;
        v63[0].i32[2] = v51[1].i32[0];
        v63[0].i32[3] = 1065353216;
        operator*(v72[0].f32, v63[0].f32, v64[0].f32);
        proj((float32x2_t *)v64, (float32x2_t *)v61, v56);
        float32x2_t v52 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v52, *(float32x2_t *)v61[0].f32), *(int8x8_t *)v61[0].f32, (int8x8_t)v52);
        float32x2_t v53 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v61[0].f32, v53), *(int8x8_t *)v61[0].f32, (int8x8_t)v53);
        if (v61[0].f32[2] < v55) {
          float v55 = v61[0].f32[2];
        }
        if (v61[0].f32[2] > v54) {
          float v54 = v61[0].f32[2];
        }
        float64x2_t v51 = (float32x2_t *)((char *)v51 + 12);
      }
      while (v51 != v36[1]);
    }
    float32x2_t v57 = vmul_f32(vsub_f32(v53, v52), (float32x2_t)0x3F0000003F000000);
    float v58 = (float)(v54 - v55) * 0.5;
    *(float32x2_t *)v62.int var0 = vadd_f32(v52, v57);
    v62.var0[2] = v55 + v58;
    Mat4f::MakeHTrans((Mat4f *)v63, &v62);
    Mat4f::operator*(v65.var0, v63, v64);
    *(float32x2_t *)v60.int var0 = v57;
    v60.var0[2] = v58;
    Mat4f::MakeHScale((Mat4f *)v61, &v60);
    Mat4f::operator*(v64[0].f32, v61, v72);
    Mat4f::operator=(a2, (uint64_t)v72);
  }
  std::vector<Vec3f>::erase((uint64_t)a1, a1[1] - 96, a1[1]);
  if (v66)
  {
    uint64_t v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  return v39;
}

void sub_1B7A2FDF8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(void *)(v1 - 20OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 184);
  if (v4)
  {
    *(void *)(v1 - 176) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OMUtil::reduceSample(uint64_t *a1, uint64_t *a2, double a3)
{
  a2[1] = *a2;
  std::vector<Vec3f>::reserve(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  uint64_t v5 = *a1;
  unint64_t v6 = a2[1];
  if ((int)(-1431655765 * ((unint64_t)(a1[1] - *a1) >> 2)) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    float v9 = *(float *)&a3;
    float32x2_t v10 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      float v11 = rintf(*(float *)(v5 + v7 + 8) * v9) / v9;
      float32x2_t v12 = vdiv_f32(vrndx_f32(vmul_n_f32(*(float32x2_t *)(v5 + v7), v9)), v10);
      float32x2_t v27 = v12;
      float v28 = v11;
      if (v6 >= a2[2])
      {
        uint64_t v13 = std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(a2, &v27);
        float v9 = *(float *)&a3;
        unint64_t v6 = v13;
        uint64_t v5 = *a1;
      }
      else
      {
        *(_DWORD *)unint64_t v6 = v12.i32[0];
        *(_DWORD *)(v6 + 4) = v27.i32[1];
        *(float *)(v6 + OZSpline::reparametrize((uint64_t)this + 8) = v28;
        v6 += 12;
      }
      a2[1] = v6;
      ++v8;
      v7 += 12;
    }
    while (v8 < (int)(-1431655765 * ((unint64_t)(a1[1] - v5) >> 2)));
  }
  unint64_t v14 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 2));
  if (v6 == *a2) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  float v16 = (float *)*a2;
  uint64_t v17 = a2[1];
  if (*a2 == v17 || (unint64_t v18 = v16 + 3, v16 + 3 == (float *)v17))
  {
LABEL_17:
    float v16 = (float *)a2[1];
  }
  else
  {
    float v19 = *v16;
    while (1)
    {
      float v20 = v19;
      float v19 = *v18;
      if (vabds_f32(v20, *v18) < 0.00001
        && vabds_f32(*(v18 - 2), v18[1]) < 0.00001
        && vabds_f32(*(v18 - 1), v18[2]) < 0.00001)
      {
        break;
      }
      v18 += 3;
      v16 += 3;
      if (v18 == (float *)v17) {
        goto LABEL_17;
      }
    }
    unint64_t v22 = v18 - 3;
    if (v18 - 3 != (float *)v17)
    {
      float32x2_t v23 = v18 + 3;
      if (v23 != (float *)v17)
      {
        float v24 = *v22;
        do
        {
          float v25 = *v23;
          if (vabds_f32(v24, *v23) >= 0.00001
            || vabds_f32(v22[1], v23[1]) >= 0.00001
            || vabds_f32(v22[2], v23[2]) >= 0.00001)
          {
            _OWORD v22[3] = v25;
            v22 += 3;
            v22[1] = v23[1];
            v22[2] = v23[2];
            float v24 = v25;
          }
          v23 += 3;
        }
        while (v23 != (float *)v17);
      }
      float v16 = v22 + 3;
    }
  }
  return std::vector<Vec3f>::erase((uint64_t)a2, (uint64_t)v16, v17);
}

float OMUtil::setBwMatrixWithDirectionalVector(OMUtil *this, const Vec3f *a2, const Vec3f *a3, const Vec3f *a4, Mat4f *a5)
{
  Mat4f::MakeDiag((uint64_t)a4, 1.0);
  float v9 = *((float *)this + 2);
  *(void *)a4->int var0 = *(void *)this;
  a4->var0[2] = v9;
  a4[1].var0[0] = 0.0;
  float v10 = a2->var0[2];
  *(void *)&a4[1].var0[1] = *(void *)a2->var0;
  a4[2].var0[0] = v10;
  a4[2].var0[1] = 0.0;
  float v11 = a3->var0[2];
  *(void *)&a4[2].var0[2] = *(void *)a3->var0;
  a4[3].var0[1] = v11;
  a4[3].var0[2] = 0.0;
  trans((const Mat4f *)a4, (uint64_t)v13);
  return Mat4f::operator=((uint64_t)a4, (uint64_t)v13);
}

uint64_t std::vector<Vec3f>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 4 * ((a3 - a2) >> 2);
      uint64_t v4 = a2;
      do
      {
        *(void *)uint64_t v4 = *(void *)(v4 + v5);
        *(_DWORD *)(v4 + OZSpline::reparametrize((uint64_t)this + 8) = *(_DWORD *)(v4 + v5 + 8);
        v4 += 12;
      }
      while (v4 + v5 != v3);
    }
    *(void *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = v4;
  }
  return a2;
}

void std::vector<Vec3f>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    CMTime __p = std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    float v9 = (char *)__p + v5;
    float v10 = (char *)__p + 12 * v6;
    std::vector<Vec3f>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      float v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7A30280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL OMUtil::findIntersectionOfLineSegment(float *a1, float *a2, float *a3)
{
  float v3 = *a1;
  float v4 = a1[1];
  float v5 = a1[2] - *a1;
  float v6 = a2[1];
  float v7 = a2[3] - v6;
  float v8 = a1[3] - v4;
  float v9 = a2[2] - *a2;
  if (vabds_f32(v5 * v7, v8 * v9) < 0.000001) {
    return 0;
  }
  float v11 = (float)(v5 * v7) - (float)(v8 * v9);
  float v12 = v4 - v6;
  float v13 = v3 - *a2;
  float v14 = (float)((float)(v12 * v9) - (float)(v7 * v13)) / v11;
  float v15 = (float)((float)(v5 * v12) - (float)(v8 * v13)) / v11;
  BOOL v16 = v14 > 1.0;
  if (v15 > 1.0) {
    BOOL v16 = 1;
  }
  if (v14 < -0.0000001) {
    BOOL v16 = 1;
  }
  if (v15 < -0.0000001) {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    *a3 = v3 + (float)(v5 * v14);
    a3[1] = a1[1] + (float)(v14 * (float)(a1[3] - a1[1]));
  }
  return !v16;
}

BOOL OMUtil::findIntersectionOfLineSegment(float *a1, float *a2)
{
  float v2 = a1[1];
  float v3 = a1[2] - *a1;
  float v4 = a2[1];
  float v5 = a2[3] - v4;
  float v6 = a1[3] - v2;
  float v7 = a2[2] - *a2;
  if (vabds_f32(v3 * v5, v6 * v7) < 0.000001) {
    return 0;
  }
  float v9 = (float)(v3 * v5) - (float)(v6 * v7);
  float v10 = v2 - v4;
  float v11 = *a1 - *a2;
  float v12 = (float)((float)(v10 * v7) - (float)(v5 * v11)) / v9;
  float v13 = (float)((float)(v3 * v10) - (float)(v6 * v11)) / v9;
  BOOL v14 = v12 <= 1.0;
  if (v13 > 1.0) {
    BOOL v14 = 0;
  }
  if (v12 < -0.0000001) {
    BOOL v14 = 0;
  }
  return v13 >= -0.0000001 && v14;
}

BOOL OMUtil::findIntersectionOfLineSegmentExclusive(float *a1, float *a2)
{
  float v2 = a1[1];
  float v3 = a1[2] - *a1;
  float v4 = a2[1];
  float v5 = a2[3] - v4;
  float v6 = a1[3] - v2;
  float v7 = a2[2] - *a2;
  if (vabds_f32(v3 * v5, v6 * v7) < 0.000001) {
    return 0;
  }
  float v9 = (float)(v3 * v5) - (float)(v6 * v7);
  float v10 = v2 - v4;
  float v11 = *a1 - *a2;
  float v12 = (float)((float)(v10 * v7) - (float)(v5 * v11)) / v9;
  float v13 = (float)((float)(v3 * v10) - (float)(v6 * v11)) / v9;
  BOOL v14 = v12 <= 0.9999;
  if (v13 > 0.9999) {
    BOOL v14 = 0;
  }
  if (v12 < 0.0001) {
    BOOL v14 = 0;
  }
  return v13 >= 0.0001 && v14;
}

void OMUtilErf::errorFunction(OMUtilErf *this, float a2, float a3, float a4)
{
  if (a2 >= 1.0)
  {
    if (a2 >= 4.0) {
      erff((float)((float)(a3 + -0.5) - a4) * a2);
    }
    else {
      erff((float)((float)(a3 + -0.5) - a4) * 4.0);
    }
  }
  else
  {
    powf(a3, a2 + 1.0);
    powf(1.0 - a3, a2 + 1.0);
  }
}

void OMUtilErf::setSigma(OMUtilErf **this, float a2, float a3, int a4)
{
  float v4 = *this;
  this[1] = *this;
  if (a4 >= 1)
  {
    float v8 = (OMUtilErf *)this;
    int v9 = 0;
    float v10 = (float)(a4 - 1);
    float v11 = this + 2;
    do
    {
      OMUtilErf::errorFunction((OMUtilErf *)this, a2, (float)v9 / v10, a3);
      int v13 = v12;
      if ((unint64_t)v4 >= *v11)
      {
        this = *(OMUtilErf ***)v8;
        uint64_t v15 = ((uint64_t)v4 - *(void *)v8) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = *v11 - (void)this;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v11, v18);
          this = *(OMUtilErf ***)v8;
          float v4 = (OMUtilErf *)*((void *)v8 + 1);
        }
        else
        {
          float v19 = 0;
        }
        float v20 = &v19[4 * v15];
        *(_DWORD *)float v20 = v13;
        BOOL v14 = (OMUtilErf *)(v20 + 4);
        while (v4 != (OMUtilErf *)this)
        {
          int v21 = *((_DWORD *)v4 - 1);
          float v4 = (OMUtilErf *)((char *)v4 - 4);
          *((_DWORD *)v20 - atomic_store(0, (unint64_t *)this + 1) = v21;
          v20 -= 4;
        }
        *(void *)float v8 = v20;
        *((void *)v8 + atomic_store(0, (unint64_t *)this + 1) = v14;
        *((void *)v8 + OZChannelEnum::~OZChannelEnum(this - 2) = &v19[4 * v18];
        if (this) {
          operator delete(this);
        }
      }
      else
      {
        *(_DWORD *)float v4 = v12;
        BOOL v14 = (OMUtilErf *)((char *)v4 + 4);
      }
      *((void *)v8 + atomic_store(0, (unint64_t *)this + 1) = v14;
      ++v9;
      float v4 = v14;
    }
    while (v9 != a4);
  }
}

uint64_t PCPrincipalComponentAnalysisCompute<Vec3f,std::vector<Vec3f>>(float32x2_t **a1, float32x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10, uint64_t a11, void *a12)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  __CLPK_integer __lda = 3;
  __CLPK_integer __n = 3;
  __lworuint64_t k = -1;
  __woruint64_t k = 0.0;
  __CLPK_integer v28 = -1;
  __iworuint64_t k = 0;
  __CLPK_integer __info = 0;
  float32x4_t v13 = 0uLL;
  memset(__a, 0, 36);
  a12[1] = *a12;
  BOOL v14 = *a1;
  uint64_t v15 = a1[1];
  if (*a1 != v15)
  {
    float32x2_t v16 = *a2;
    float v17 = a2[1].f32[0];
    float32x2_t v18 = 0;
    float v19 = 0.0;
    float32x2_t v20 = 0;
    do
    {
      *(float *)&__int32 v21 = v14[1].f32[0] - v17;
      float32x2_t v22 = *v14;
      BOOL v14 = (float32x2_t *)((char *)v14 + 12);
      *(float32x2_t *)a10.i8 = vsub_f32(v22, v16);
      v12.i32[0] = vdup_lane_s32(*(int32x2_t *)a10.i8, 1).u32[0];
      v12.i32[1] = v21;
      int8x16_t v23 = (int8x16_t)vmulq_f32((float32x4_t)vzip1q_s32(a10, vrev64q_s32(a10)), (float32x4_t)vzip1q_s32(v12, v12));
      int32x4_t v12 = (int32x4_t)vextq_s8(v23, v23, 8uLL);
      v24.i32[0] = vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8).u32[0];
      v24.i32[1] = v23.i32[0];
      float32x2_t v18 = vadd_f32(v24, v18);
      float v19 = *(float *)&v23.i32[3] + v19;
      __a[2] = v19;
      float32x4_t v13 = vaddq_f32((float32x4_t)v23, v13);
      *(float32x4_t *)&__a[3] = v13;
      *(float32x2_t *)__a = v18;
      *(float *)&v12.i32[1] = *(float *)&v21 * *(float *)&v21;
      float32x2_t v20 = vadd_f32(*(float32x2_t *)v12.i8, v20);
      *(float32x2_t *)&__a[7] = v20;
    }
    while (v14 != v15);
  }
  int v25 = ssyevd_("Vectors", "Upper", &__n, __a, &__lda, __w, &__work, &__lwork, &__iwork, &v28, &__info);
  if (!(v25 | __info))
  {
    __lworuint64_t k = (int)__work;
    operator new[]();
  }
  return __info | v25;
}

void std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::CVec3LessThan &,Vec3f *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
BOOL anonymous namespace'::CVec3LessThan::operator()(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = *a2;
  if (vabds_f32(*a1, *a2) >= 0.00001) {
    return v2 < v3;
  }
  float v2 = a1[1];
  float v3 = a2[1];
  if (vabds_f32(v2, v3) >= 0.00001) {
    return v2 < v3;
  }
  float v4 = a1[2];
  float v5 = a2[2];
  return vabds_f32(v4, v5) >= 0.00001 && v4 < v5;
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::CVec3LessThan &,Vec3f *,0>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  {
    int v11 = *((_DWORD *)a4 + 2);
    uint64_t v12 = *(void *)a4;
    *a4 = *a5;
    a4[1] = a5[1];
    a4[2] = a5[2];
    *(void *)a5 = v12;
    *((_DWORD *)a5 + OZChannelEnum::~OZChannelEnum(this - 2) = v11;
    {
      int v13 = *((_DWORD *)a3 + 2);
      uint64_t v14 = *(void *)a3;
      *a3 = *a4;
      a3[1] = a4[1];
      a3[2] = a4[2];
      *(void *)a4 = v14;
      *((_DWORD *)a4 + OZChannelEnum::~OZChannelEnum(this - 2) = v13;
      {
        int v15 = *((_DWORD *)a2 + 2);
        uint64_t v16 = *(void *)a2;
        *a2 = *a3;
        a2[1] = a3[1];
        a2[2] = a3[2];
        *(void *)a3 = v16;
        *((_DWORD *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v15;
        {
          float result = a1[2];
          uint64_t v17 = *(void *)a1;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          *(void *)a2 = v17;
          a2[2] = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2, float *a3)
{
  if (v6)
  {
    float v9 = *a1;
    int v8 = *((_DWORD *)a1 + 1);
    int v10 = *((_DWORD *)a1 + 2);
    if (result)
    {
      *a1 = *a3;
      a1[1] = a3[1];
      a1[2] = a3[2];
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *a2 = v9;
      *((_DWORD *)a2 + atomic_store(0, (unint64_t *)this + 1) = v8;
      *((_DWORD *)a2 + OZChannelEnum::~OZChannelEnum(this - 2) = v10;
      if (!result) {
        return result;
      }
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
    }
    *a3 = v9;
    *((_DWORD *)a3 + atomic_store(0, (unint64_t *)this + 1) = v8;
    *((_DWORD *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v10;
  }
  else if (result)
  {
    int v11 = *((_DWORD *)a2 + 2);
    uint64_t v12 = *(void *)a2;
    *a2 = *a3;
    a2[1] = a3[1];
    a2[2] = a3[2];
    *(void *)a3 = v12;
    *((_DWORD *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v11;
    if (result)
    {
      int v13 = *((_DWORD *)a1 + 2);
      uint64_t v14 = *(void *)a1;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      *(void *)a2 = v14;
      *((_DWORD *)a2 + OZChannelEnum::~OZChannelEnum(this - 2) = v13;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      {
        int v6 = *((_DWORD *)a1 + 2);
        uint64_t v7 = *(void *)a1;
        *a1 = *(a2 - 3);
        a1[1] = *(a2 - 2);
        a1[2] = *(a2 - 1);
        *(void *)(a2 - 3) = v7;
        *((_DWORD *)a2 - atomic_store(0, (unint64_t *)this + 1) = v6;
      }
      return 1;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      int v8 = a1 + 6;
      float v9 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (2)
  {
      goto LABEL_24;
    float v12 = *v9;
    float v13 = v9[1];
    float v14 = v9[2];
    *float v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    int v15 = a1;
    if (v8 == a1) {
      goto LABEL_23;
    }
    uint64_t v16 = v10;
    while (1)
    {
      uint64_t v17 = (uint64_t)a1 + v16;
      float v18 = *(float *)((char *)a1 + v16 + 12);
      if (vabds_f32(v12, v18) >= 0.00001)
      {
        if (v12 >= v18)
        {
          int v15 = (float *)((char *)a1 + v16 + 24);
          goto LABEL_23;
        }
        float v19 = *(float *)((char *)a1 + v16 + 16);
        goto LABEL_19;
      }
      float v19 = *(float *)(v17 + 16);
      if (vabds_f32(v13, v19) < 0.00001) {
        break;
      }
      if (v13 >= v19) {
        goto LABEL_22;
      }
LABEL_19:
      v8 -= 3;
      *(float *)(v17 + 24) = v18;
      uint64_t v22 = (uint64_t)a1 + v16;
      int v23 = *(_DWORD *)((char *)a1 + v16 + 20);
      *(float *)(v22 + 2OZSpline::reparametrize((uint64_t)this + 8) = v19;
      *(_DWORD *)(v22 + 3OZChannelEnum::~OZChannelEnum(this - 2) = v23;
      v16 -= 12;
      if (v16 == -24)
      {
        int v15 = a1;
        goto LABEL_23;
      }
    }
    float v20 = *(float *)((char *)a1 + v16 + 20);
    if (vabds_f32(v14, v20) >= 0.00001 && v14 < v20) {
      goto LABEL_19;
    }
LABEL_22:
    int v15 = v8;
LABEL_23:
    *int v15 = v12;
    v15[1] = v13;
    v15[2] = v14;
    if (++v11 != 8)
    {
LABEL_24:
      int v8 = v9;
      v10 += 12;
      v9 += 3;
      if (v9 == a2) {
        return 1;
      }
      continue;
    }
    return v9 + 3 == a2;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::CVec3LessThan &,Vec3f *>(float *a1, float *a2, float *a3, float *a4)
{
  {
    int v9 = *((_DWORD *)a3 + 2);
    uint64_t v10 = *(void *)a3;
    *a3 = *a4;
    a3[1] = a4[1];
    a3[2] = a4[2];
    *(void *)a4 = v10;
    *((_DWORD *)a4 + OZChannelEnum::~OZChannelEnum(this - 2) = v9;
    {
      int v11 = *((_DWORD *)a2 + 2);
      uint64_t v12 = *(void *)a2;
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *(void *)a3 = v12;
      *((_DWORD *)a3 + OZChannelEnum::~OZChannelEnum(this - 2) = v11;
      {
        float result = a1[2];
        uint64_t v13 = *(void *)a1;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        *(void *)a2 = v13;
        a2[2] = result;
      }
    }
  }
  return result;
}

BOOL OMRect::pickInside(OMRect *this, const Vec2f *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v8);
  (*(void (**)(uint64_t *__return_ptr, OMRect *))(*(void *)this + 24))(&v7, this);
  if (a2->var0[0] < *(float *)&v8 || a2->var0[0] > *(float *)&v7) {
    return 0;
  }
  float v6 = a2->var0[1];
  return v6 <= *((float *)&v7 + 1) && v6 >= *((float *)&v8 + 1);
}

float OMRect::move(OMRect *this, int a2, const Vec2f *a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  do
  {
    if (a2 != v3)
    {
      int32x2_t v6 = vceq_f32(*(float32x2_t *)(*((void *)this + 3) + 8 * v3), *(float32x2_t *)(*((void *)this + 3) + 8 * a2));
      if (v6.i8[0]) {
        int v5 = v3;
      }
      if (v6.i8[4]) {
        int v4 = v3;
      }
    }
    ++v3;
  }
  while (v3 != 4);
  float result = a3->var0[0];
  uint64_t v8 = *((void *)this + 3);
  int v9 = (float *)(v8 + 8 * v4);
  if (a3->var0[0] != *v9)
  {
    float v10 = a3->var0[1];
    int v11 = (float32x2_t *)(v8 + 8 * v5);
    if (v10 != v11->f32[1])
    {
      uint64_t v12 = (float *)(v8 + 8 * a2);
      float v13 = v12[1];
      *(float *)&unsigned int v14 = result - *v12;
      float v15 = v10 - v13;
      *uint64_t v12 = *v12 + *(float *)&v14;
      v12[1] = v13 + v15;
      *int v11 = vadd_f32((float32x2_t)v14, *v11);
      float result = *v9 + 0.0;
      float v16 = v15 + v9[1];
      *int v9 = result;
      v9[1] = v16;
    }
  }
  return result;
}

uint64_t OMRect::getBottom@<X0>(uint64_t this@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v2 = 0;
  float32x2_t v3 = (float32x2_t)vdup_n_s32(0x47C35000u);
  do
  {
    float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, *(float32x2_t *)(*(void *)(this + 24) + v2)), *(int8x8_t *)(*(void *)(this + 24) + v2), (int8x8_t)v3);
    v2 += 8;
  }
  while (v2 != 32);
  *a2 = v3;
  return this;
}

uint64_t OMRect::getTop@<X0>(uint64_t this@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v2 = 0;
  float32x2_t v3 = (float32x2_t)vdup_n_s32(0xC7C35000);
  do
  {
    float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(*(void *)(this + 24) + v2), v3), *(int8x8_t *)(*(void *)(this + 24) + v2), (int8x8_t)v3);
    v2 += 8;
  }
  while (v2 != 32);
  *a2 = v3;
  return this;
}

void OMRect::~OMRect(OMRect *this)
{
  OMSamplesElem::~OMSamplesElem(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OMSamplesElem::~OMSamplesElem(OMSamplesElem *this)
{
  *(void *)this = &unk_1F1114D08;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  float32x2_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void OMSamplesElem::getBottom(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1B7A32104(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

float cross@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  float v4 = a1[2];
  float v5 = a1[3];
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = a3[2];
  float v9 = a3[3];
  float v10 = (float)(v6 * v9) - (float)(v8 * v7);
  float v11 = (float)(v8 * v5) - (float)(v4 * v9);
  float v12 = (float)(v4 * v7) - (float)(v6 * v5);
  float v14 = *a1;
  float v13 = a1[1];
  float v16 = *a2;
  float v15 = a2[1];
  float v18 = *a3;
  float v17 = a3[1];
  float v19 = (float)(v17 * v12) + (float)((float)(v13 * v10) + (float)(v15 * v11));
  float v20 = -(float)((float)((float)(*a1 * v10) + (float)(v11 * *a2)) + (float)(v12 * *a3));
  *a4 = v19;
  a4[1] = v20;
  float result = -(float)((float)((float)((float)((float)(v15 * v8) - (float)(v17 * v6)) * v14)
                          + (float)((float)((float)(v17 * v4) - (float)(v13 * v8)) * v16))
                  + (float)((float)((float)(v13 * v6) - (float)(v15 * v4)) * v18));
  a4[2] = (float)((float)(v14 * (float)((float)(v15 * v9) - (float)(v17 * v7)))
                + (float)((float)((float)(v17 * v5) - (float)(v13 * v9)) * v16))
        + (float)((float)((float)(v13 * v7) - (float)(v15 * v5)) * v18);
  a4[3] = result;
  return result;
}

float proj@<S0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D1>)
{
  float v3 = a1[1].f32[0];
  LODWORD(a3) = a1[1].i32[1];
  *a2 = vdiv_f32(*a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  float result = v3 / *(float *)&a3;
  a2[1].f32[0] = v3 / *(float *)&a3;
  return result;
}

Mat2f *Mat2f::MakeRot(Mat2f *this, double a2)
{
  __double2 v3 = __sincos_stret(a2);
  float sinval = v3.__sinval;
  float cosval = v3.__cosval;
  *(float *)this = cosval;
  *((float *)this + atomic_store(0, (unint64_t *)this + 1) = -sinval;
  *((float *)this + OZChannelEnum::~OZChannelEnum(this - 2) = sinval;
  *((float *)this + 3) = cosval;
  return this;
}

void Mat4f::Mat4f(Mat4f *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18)
{
  *(float *)this = a2;
  *((float *)this + atomic_store(0, (unint64_t *)this + 1) = a3;
  *((float *)this + OZChannelEnum::~OZChannelEnum(this - 2) = a4;
  *((float *)this + 3) = a5;
  *((float *)this + 4) = a6;
  *((float *)this + 5) = a7;
  *((float *)this + 6) = a8;
  *((float *)this + 7) = a9;
  *((_OWORD *)this + OZChannelEnum::~OZChannelEnum(this - 2) = a17;
  *((_OWORD *)this + 3) = a18;
}

float Mat4f::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + OZSpline::reparametrize((uint64_t)this + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1OZChannelEnum::~OZChannelEnum(this - 2) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 2OZSpline::reparametrize((uint64_t)this + 8) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 3OZChannelEnum::~OZChannelEnum(this - 2) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 4OZSpline::reparametrize((uint64_t)this + 8) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 5OZChannelEnum::~OZChannelEnum(this - 2) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  float result = *(float *)(a2 + 60);
  *(float *)(a1 + 6OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = result;
  return result;
}

float32x4_t Mat4f::operator*@<Q0>(float *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v3 = *a2;
  float32x4_t v4 = a2[1];
  float32x4_t v5 = a2[2];
  float32x4_t v6 = a2[3];
  float32x4_t v7 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*a2, a1[4]), vmulq_n_f32(v4, a1[5])), vmulq_n_f32(v5, a1[6])), vmulq_n_f32(v6, a1[7]));
  *a3 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*a2, *a1), vmulq_n_f32(v4, a1[1])), vmulq_n_f32(v5, a1[2])), vmulq_n_f32(v6, a1[3]));
  a3[1] = v7;
  float32x4_t result = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v3, a1[8]), vmulq_n_f32(v4, a1[9])), vmulq_n_f32(v5, a1[10])), vmulq_n_f32(v6, a1[11]));
  float32x4_t v9 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v3, a1[12]), vmulq_n_f32(v4, a1[13])), vmulq_n_f32(v5, a1[14])), vmulq_n_f32(v6, a1[15]));
  a3[2] = result;
  a3[3] = v9;
  return result;
}

float32x4_t Mat4f::operator/=(float32x4_t *a1, int32x2_t a2)
{
  float32x4_t v2 = (float32x4_t)vdupq_lane_s32(a2, 0);
  float32x4_t v3 = vdivq_f32(a1[1], v2);
  *a1 = vdivq_f32(*a1, v2);
  a1[1] = v3;
  float32x4_t v4 = vdivq_f32(a1[2], v2);
  float32x4_t result = vdivq_f32(a1[3], v2);
  a1[2] = v4;
  a1[3] = result;
  return result;
}

float operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = a2[3];
  float v7 = (float)((float)((float)(*a2 * a1[4]) + (float)(v4 * a1[5])) + (float)(v5 * a1[6])) + (float)(v6 * a1[7]);
  *a3 = (float)((float)((float)(*a2 * *a1) + (float)(v4 * a1[1])) + (float)(v5 * a1[2])) + (float)(v6 * a1[3]);
  a3[1] = v7;
  float v8 = (float)((float)((float)(v3 * a1[8]) + (float)(v4 * a1[9])) + (float)(v5 * a1[10])) + (float)(v6 * a1[11]);
  float result = (float)((float)((float)(v3 * a1[12]) + (float)(v4 * a1[13])) + (float)(v5 * a1[14])) + (float)(v6 * a1[15]);
  a3[2] = v8;
  a3[3] = result;
  return result;
}

float trans@<S0>(const Mat4f *a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)a1 + 1);
  int v3 = *((_DWORD *)a1 + 4);
  int v4 = *((_DWORD *)a1 + 5);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = v3;
  int v5 = *((_DWORD *)a1 + 9);
  int v6 = *((_DWORD *)a1 + 12);
  int v7 = *((_DWORD *)a1 + 13);
  *(_DWORD *)(a2 + OZSpline::reparametrize((uint64_t)this + 8) = *((_DWORD *)a1 + 8);
  *(_DWORD *)(a2 + 1OZChannelEnum::~OZChannelEnum(this - 2) = v6;
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 2OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v4;
  *(_DWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 2OZSpline::reparametrize((uint64_t)this + 8) = v7;
  int v8 = *((_DWORD *)a1 + 3);
  int v9 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 7);
  *(_DWORD *)(a2 + 3OZChannelEnum::~OZChannelEnum(this - 2) = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 36) = v9;
  float result = *((float *)a1 + 10);
  int v12 = *((_DWORD *)a1 + 11);
  int v13 = *((_DWORD *)a1 + 14);
  int v14 = *((_DWORD *)a1 + 15);
  *(float *)(a2 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = result;
  *(_DWORD *)(a2 + 44) = v13;
  *(_DWORD *)(a2 + 4OZSpline::reparametrize((uint64_t)this + 8) = v8;
  *(_DWORD *)(a2 + 5OZChannelEnum::~OZChannelEnum(this - 2) = v10;
  *(_DWORD *)(a2 + 56) = v12;
  *(_DWORD *)(a2 + 6OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v14;
  return result;
}

float32x4_t adj@<Q0>(const Mat4f *a1@<X0>, float32x4_t *a2@<X8>)
{
  int v4 = (float *)((char *)a1 + 16);
  int v5 = (float *)((char *)a1 + 32);
  int v6 = (float *)((char *)a1 + 48);
  cross((float *)a1 + 4, (float *)a1 + 8, (float *)a1 + 12, v8.f32);
  *a2 = v8;
  cross((float *)a1, v5, v6, v8.f32);
  a2[1] = vnegq_f32(v8);
  cross((float *)a1, v4, v6, v8.f32);
  a2[2] = v8;
  cross((float *)a1, v4, v5, v8.f32);
  float32x4_t result = vnegq_f32(v8);
  a2[3] = result;
  return result;
}

double inv@<D0>(const Mat4f *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v18 = adj(a1, &v20);
  uint64_t v5 = *(uint64_t *)((char *)v20.i64 + 4);
  __int32 v4 = v20.i32[3];
  __int32 v6 = v21;
  __int32 v7 = v22;
  __int32 v8 = v23;
  __int32 v9 = v24;
  __int32 v10 = v25;
  __int32 v11 = v26;
  __int32 v12 = v27;
  __int32 v13 = v28;
  __int32 v14 = v29;
  __int32 v15 = v30;
  __int32 v16 = v31;
  __int32 v17 = v32;
  v18.f32[0] = (float)((float)((float)(v20.f32[0] * *(float *)a1) + (float)(v20.f32[1] * *((float *)a1 + 1)))
                     + (float)(v20.f32[2] * *((float *)a1 + 2)))
             + (float)(v20.f32[3] * *((float *)a1 + 3));
  a2->i32[0] = v20.i32[0];
  a2->i32[1] = v6;
  a2->i32[2] = v10;
  a2->i32[3] = v14;
  a2[1].i32[0] = v5;
  a2[1].i32[1] = v7;
  a2[1].i32[2] = v11;
  a2[1].i32[3] = v15;
  a2[2].i32[0] = HIDWORD(v5);
  a2[2].i32[1] = v8;
  a2[2].i32[2] = v12;
  a2[2].i32[3] = v16;
  a2[3].i32[0] = v4;
  a2[3].i32[1] = v9;
  a2[3].i32[2] = v13;
  a2[3].i32[3] = v17;

  *(void *)&double result = Mat4f::operator/=(a2, *(int32x2_t *)v18.f32).u64[0];
  return result;
}

uint64_t Mat4f::MakeDiag(uint64_t this, float a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = this;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (v2 == i) {
        *(float *)(this + 16 * v2 + 4 * vOZChannelEnum::~OZChannelEnum(this - 2) = a2;
      }
      else {
        *(_DWORD *)(v3 + 4 * i) = 0;
      }
    }
    ++v2;
    v3 += 16;
  }
  while (v2 != 4);
  return this;
}

float Mat4f::MakeHRot(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v4 = *a2;
  float v3 = a2[1];
  float v5 = a2[2];
  float v6 = a2[3];
  __int32 v7 = a1;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (v2 == i) {
        a1[4 * v2 + v2] = 1.0;
      }
      else {
        v7[i] = 0.0;
      }
    }
    ++v2;
    v7 += 4;
  }
  while (v2 != 4);
  float v9 = v5 + v5;
  float v10 = (float)(v5 + v5) * v6;
  float v11 = v3 + v3;
  float v12 = (float)(v3 + v3) * v6;
  float v13 = v4 + v4;
  float v14 = v13 * v6;
  float v15 = (float)(v3 + v3) * v5;
  float v16 = v13 * v5;
  float v17 = v13 * v3;
  float v18 = v13 * *a2;
  float v19 = v11 * a2[1];
  float v20 = v9 * a2[2];
  *a1 = (float)(1.0 - v19) - v20;
  a1[1] = v17 - v10;
  a1[2] = v16 + v12;
  float v21 = 1.0 - v18;
  a1[4] = v17 + v10;
  a1[5] = v21 - v20;
  a1[6] = v15 - v14;
  a1[8] = v16 - v12;
  a1[9] = v15 + v14;
  float result = v21 - v19;
  a1[10] = v21 - v19;
  return result;
}

float Mat4f::MakeHRot(Mat4f *this, const Vec3f *a2, double a3)
{
  __double2 v5 = __sincos_stret(a3 * 0.5);
  float sinval = v5.__sinval;
  float32x2_t v9 = vmul_n_f32(*(float32x2_t *)a2->var0, sinval);
  float cosval = v5.__cosval;
  float v10 = a2->var0[2] * sinval;
  float v11 = cosval;
  return Mat4f::MakeHRot((float *)this, (float *)&v9);
}

float Mat4f::MakeHScale(Mat4f *this, const Vec3f *a2)
{
  uint64_t v2 = 0;
  float v3 = this;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (v2 == i) {
        *((_DWORD *)this + 4 * v2 + vOZChannelEnum::~OZChannelEnum(this - 2) = 1065353216;
      }
      else {
        *((_DWORD *)v3 + i) = 0;
      }
    }
    ++v2;
    float v3 = (Mat4f *)((char *)v3 + 16);
  }
  while (v2 != 4);
  *(float *)this = a2->var0[0];
  *((_DWORD *)this + 5) = LODWORD(a2->var0[1]);
  float result = a2->var0[2];
  *((float *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = result;
  return result;
}

float Mat4f::MakeHTrans(Mat4f *this, const Vec3f *a2)
{
  uint64_t v2 = 0;
  float v3 = this;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (v2 == i) {
        *((_DWORD *)this + 4 * v2 + vOZChannelEnum::~OZChannelEnum(this - 2) = 1065353216;
      }
      else {
        *((_DWORD *)v3 + i) = 0;
      }
    }
    ++v2;
    float v3 = (Mat4f *)((char *)v3 + 16);
  }
  while (v2 != 4);
  *((_DWORD *)this + 3) = LODWORD(a2->var0[0]);
  *((_DWORD *)this + 7) = LODWORD(a2->var0[1]);
  float result = a2->var0[2];
  *((float *)this + 1atomic_store(0, (unint64_t *)this + 1) = result;
  return result;
}

uint64_t FxApplySimpleToneCurve@<X0>(uint64_t *a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  FxSupport::newHGRefWithInput<HgcSimpleToneCurve>(*a1, &v9);
  float v7 = powf(a4, a3);
  (*(void (**)(HgcSimpleToneCurve *, void, float, double, double, double))(*(void *)v9 + 96))(v9, 0, 1.0 / v7, 0.0, 0.0, 0.0);
  uint64_t result = (*(uint64_t (**)(HgcSimpleToneCurve *, uint64_t, float, double, double, double))(*(void *)v9 + 96))(v9, 1, a3, 0.0, 0.0, 0.0);
  *a2 = v9;
  return result;
}

void sub_1B7A329CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FxApplyInverseSimpleToneCurve@<X0>(uint64_t *a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  FxSupport::newHGRefWithInput<HgcInverseSimpleToneCurve>(*a1, &v9);
  float v7 = powf(a4, a3);
  (*(void (**)(HgcInverseSimpleToneCurve *, void, float, double, double, double))(*(void *)v9 + 96))(v9, 0, 1.0 / (float)(1.0 / v7), 0.0, 0.0, 0.0);
  uint64_t result = (*(uint64_t (**)(HgcInverseSimpleToneCurve *, uint64_t, float, double, double, double))(*(void *)v9 + 96))(v9, 1, 1.0 / a3, 0.0, 0.0, 0.0);
  *a2 = v9;
  return result;
}

void sub_1B7A32AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FxApplyGain@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  if (fabsf(a3 + -1.0) >= 0.00001) {
    FxSupport::newHGRefWithInput<HGColorMatrix>();
  }
  uint64_t result = *a1;
  *a2 = result;
  if (result)
  {
    float v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v4();
  }
  return result;
}

void sub_1B7A32CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FxSupport::newHGRefWithInput<HgcSimpleToneCurve>@<X0>(uint64_t a1@<X0>, HgcSimpleToneCurve **a2@<X8>)
{
  float v4 = (HgcSimpleToneCurve *)HGObject::operator new(0x1A0uLL);
  HgcSimpleToneCurve::HgcSimpleToneCurve(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcSimpleToneCurve *, void, uint64_t))(*(void *)v4 + 120))(v4, 0, a1);
}

void sub_1B7A32D6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HgcInverseSimpleToneCurve>@<X0>(uint64_t a1@<X0>, HgcInverseSimpleToneCurve **a2@<X8>)
{
  float v4 = (HgcInverseSimpleToneCurve *)HGObject::operator new(0x1A0uLL);
  HgcInverseSimpleToneCurve::HgcInverseSimpleToneCurve(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HgcInverseSimpleToneCurve *, void, uint64_t))(*(void *)v4 + 120))(v4, 0, a1);
}

void sub_1B7A32E24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

unint64_t FxConvertFxNCLCValueToPCNCLCCode(int a1)
{
  return PCMakeNCLCCode(BYTE2(a1), BYTE1(a1));
}

uint64_t FxConvertPCNCLCCodeToFxNCLCValue(_DWORD *a1)
{
  return (*a1 << 16) | (a1[1] << 8);
}

uint64_t OMKeyer2D::getAlphaLuma(OMKeyer2D *this, float a2)
{
  return (*(uint64_t (**)(OMKeyer2D *))(*(void *)this + 56))(this);
}

float OMKeyer2D::getAlphaSatOffset(OMKeyer2D *this, int a2)
{
  return *(float *)(*((void *)this + 9) + 4 * a2);
}

void OMKeyer2D::~OMKeyer2D(OMKeyer2D *this)
{
  *(void *)this = &unk_1F1114D48;
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  __double2 v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 1OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v5;
    operator delete(v5);
  }
}

void OMKeyer2D::tolAdd(OMKeyer2D *a1, void *a2, void *a3, int a4, float *a5, float *a6, float *a7)
{
  uint64_t v260 = *MEMORY[0x1E4F143B8];
  if (*a2 == a2[1]) {
    return;
  }
  if ((a4 & 1) == 0)
  {
    float32x2_t v9 = (float *)*((void *)a1 + 9);
    if (*v9 == 0.0)
    {
      uint64_t v156 = 1;
      do
      {
        if (v156 == 255) {
          return;
        }
        float v157 = v9[v156++];
      }
      while (v157 == 0.0);
      if ((unint64_t)(v156 - 2) > 0xFD) {
        return;
      }
    }
  }
  __x[0] = 0;
  std::vector<int>::vector(&v246, 0x168uLL, __x);
  CMTime __p = 0;
  CMTime v244 = 0;
  CMTime v245 = 0;
  if ((int)(-1431655765 * ((a2[1] - *a2) >> 2)) < 1)
  {
    float v13 = 1000.0;
    float v14 = -1000.0;
    float v12 = -1000.0;
    float v208 = 1000.0;
  }
  else
  {
    float v10 = 0;
    uint64_t v11 = 0;
    float v12 = -1000.0;
    float v13 = 1000.0;
    float v208 = 1000.0;
    float v14 = -1000.0;
    do
    {
      float v15 = (float *)(*a3 + 12 * v11);
      if (a4)
      {
        float v16 = v15[1];
        __float2 v17 = __sincosf_stret(*v15 * 6.2832);
        float v18 = v15[2];
        if (v18 > v14)
        {
          *a6 = v16;
          float v14 = v18;
        }
        float v19 = v16 * v17.__cosval;
        float v20 = v16 * v17.__sinval;
        if (v18 < v208)
        {
          *a5 = v16;
          float v208 = v18;
        }
      }
      else
      {
        float v21 = v15[2];
        float v22 = 0.0;
        if ((float)(v21 * 255.0) >= 0.0)
        {
          float v22 = 255.0;
          if ((float)(v21 * 255.0) <= 255.0) {
            float v22 = v21 * 255.0;
          }
        }
        float v23 = v15[1];
        __float2 v24 = __sincosf_stret(*v15 * 6.2832);
        float v25 = *(float *)(*((void *)a1 + 9) + 4 * (int)v22);
        float v19 = (float)(v23 * v24.__cosval) - (float)(v25 * *((float *)a1 + 14));
        float v20 = (float)(v23 * v24.__sinval) - (float)(v25 * *((float *)a1 + 15));
        if (v21 > v14) {
          float v14 = v21;
        }
        float v26 = v208;
        if (v21 < v208) {
          float v26 = v21;
        }
        float v208 = v26;
      }
      if (v10 >= v245)
      {
        __int32 v27 = (float *)__p;
        uint64_t v28 = ((char *)v10 - (unsigned char *)__p) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = (char *)v245 - (unsigned char *)__p;
        if (((char *)v245 - (unsigned char *)__p) >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          __int32 v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v245, v31);
          __int32 v27 = (float *)__p;
          float v10 = v244;
        }
        else
        {
          __int32 v32 = 0;
        }
        float v33 = (float *)&v32[8 * v28];
        float *v33 = v19;
        v33[1] = v20;
        float v34 = v33;
        while (v10 != v27)
        {
          int v35 = *((_DWORD *)v10 - 2);
          v10 -= 2;
          *((_DWORD *)v34 - OZChannelEnum::~OZChannelEnum(this - 2) = v35;
          v34 -= 2;
          v34[1] = v10[1];
        }
        float v10 = v33 + 2;
        CMTime __p = v34;
        CMTime v244 = v33 + 2;
        CMTime v245 = (float *)&v32[8 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *float v10 = v19;
        v10[1] = v20;
        v10 += 2;
      }
      CMTime v244 = v10;
      float v36 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
      float v37 = atan2f(v20, v19);
      if (v37 < 0.0) {
        float v37 = v37 + 6.2832;
      }
      v246.__begin_[(float)((float)(v37 / 6.2832) * 360.0)] = 1;
      if (v36 > v12) {
        float v12 = v36;
      }
      if (v36 < v13) {
        float v13 = v36;
      }
      ++v11;
    }
    while (v11 < (int)(-1431655765 * ((a2[1] - *a2) >> 2)));
  }
  __x[0] = -1;
  std::vector<int>::vector(&v242, 0x168uLL, __x);
  __x[0] = -1;
  std::vector<int>::vector(&v241, 0x168uLL, __x);
  uint64_t v39 = 0;
  int v40 = 0;
  std::vector<int>::pointer begin = v242.__begin_;
  int v42 = 10000;
  std::vector<int>::pointer v43 = v241.__begin_;
  do
  {
    std::vector<int>::pointer v44 = v246.__begin_;
    std::vector<int>::pointer v45 = v241.__begin_;
    int v46 = 360;
    unsigned int v47 = v39;
    do
    {
      unsigned int v48 = v47 - 360;
      if (v47 <= 0x167) {
        unsigned int v48 = v47;
      }
      int v49 = v44[v48];
      if (begin[v39] < 0)
      {
        if (!v49) {
          goto LABEL_54;
        }
        begin[v39] = v48;
LABEL_53:
        v45[v39] = v48;
        goto LABEL_54;
      }
      if (v49) {
        goto LABEL_53;
      }
LABEL_54:
      ++v47;
      --v46;
    }
    while (v46);
    int v50 = v43[v39];
    int v51 = begin[v39];
    if (v50 <= v51) {
      v50 += 360;
    }
    int v52 = v50 - v51;
    if (v52 < v42)
    {
      int v42 = v52;
      int v40 = v39;
    }
    ++v39;
  }
  while (v39 != 360);
  v38.n128_f64[0] = v13;
  BOOL v53 = v13 >= 0.1 || v42 <= 90;
  if (v53 && v38.n128_f64[0] >= 0.01)
  {
    float v54 = ((double)v241.__begin_[v40] + 1.0) / 360.0;
    float v209 = v54;
    float v55 = (float)begin[v40] / 360.0;
    float v56 = (float)(v55 + v55) * 3.14159265;
    __float2 v57 = __sincosf_stret(v56);
    float v58 = v12 * v57.__cosval;
    float v59 = v12 * v57.__sinval;
    *(float *)__x = v12 * v57.__cosval;
    *(float *)&__x[1] = v12 * v57.__sinval;
    float v60 = (float)(v209 + v209) * 3.14159265;
    __float2 v62 = __sincosf_stret(v60);
    v252.var0[0] = v12 * v62.__cosval;
    v252.var0[1] = v12 * v62.__sinval;
    if (sqrtf((float)((float)(v58 - (float)(v12 * v62.__cosval)) * (float)(v58 - (float)(v12 * v62.__cosval)))+ (float)((float)(v59 - (float)(v12 * v62.__sinval)) * (float)(v59 - (float)(v12 * v62.__sinval)))) >= 0.05&& sqrtf((float)((float)(v58 - (float)(v13 * v57.__cosval)) * (float)(v58 - (float)(v13 * v57.__cosval)))+ (float)((float)(v59 - (float)(v13 * v57.__sinval)) * (float)(v59 - (float)(v13 * v57.__sinval)))) >= 0.05)
    {
      *(float *)&int v63 = 0.01;
    }
    else
    {
      *(float *)&int v63 = 0.05;
    }
    float v212 = *(float *)&v63;
    *(void *)&long long v247 = 1065353216;
    float v158 = OMUtil::angle((OMUtil *)&v247, (const Vec2f *)__x, v61);
    uint64_t v159 = v247;
    float v161 = *(float *)__x;
    float v160 = *(float *)&__x[1];
    *(void *)&long long v247 = 1065353216;
    float v163 = OMUtil::angle((OMUtil *)&v247, &v252, v162);
    if ((float)((float)(*(float *)&v159 * v160) - (float)(*((float *)&v159 + 1) * v161)) >= 0.0) {
      float v164 = v158;
    }
    else {
      float v164 = 6.2832 - v158;
    }
    float v165 = v252.var0[0];
    float v166 = v252.var0[1];
    if ((float)((float)(*(float *)&v247 * v252.var0[1]) - (float)(*((float *)&v247 + 1) * v252.var0[0])) >= 0.0) {
      float v167 = v163;
    }
    else {
      float v167 = 6.2832 - v163;
    }
    float v168 = sqrtf((float)(*(float *)__x * *(float *)__x) + (float)(*(float *)&__x[1] * *(float *)&__x[1]));
    __float2 v169 = __sincosf_stret(v164 - v212);
    float v170 = (float)(v212 + 1.0) * v168;
    *(float *)__x = v169.__cosval * v170;
    *(float *)&__x[1] = v169.__sinval * v170;
    float v171 = sqrtf((float)(v165 * v165) + (float)(v166 * v166));
    __float2 v172 = __sincosf_stret(v212 + v167);
    v252.var0[0] = (float)((float)(v212 + 1.0) * v171) * v172.__cosval;
    v252.var0[1] = (float)((float)(v212 + 1.0) * v171) * v172.__sinval;
    CMTime v173 = *(_DWORD **)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40);
    _DWORD *v173 = __x[0];
    v173[1] = __x[1];
    uint64_t v174 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    *(Vec2f *)(*(void *)(v174 + 40) + 16) = v252;
    *(void *)(*(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40) + OZSpline::reparametrize((uint64_t)this + 8) = 0;
    uint64_t v175 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    float v176 = sqrtf((float)((float)(v13 * v57.__cosval) * (float)(v13 * v57.__cosval))+ (float)((float)(v13 * v57.__sinval) * (float)(v13 * v57.__sinval)))* (float)(1.0 - v212);
    uint64_t v177 = *(void *)(v175 + 40);
    *(float *)(v177 + 24) = v176 * v169.__cosval;
    *(float *)(v177 + 2OZSpline::reparametrize((uint64_t)this + 8) = v176 * v169.__sinval;
    uint64_t v178 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    float v179 = sqrtf((float)((float)(v13 * v62.__cosval) * (float)(v13 * v62.__cosval))+ (float)((float)(v13 * v62.__sinval) * (float)(v13 * v62.__sinval)))* (float)(1.0 - v212);
    uint64_t v180 = *(void *)(v178 + 40);
    *(float *)(v180 + 3OZChannelEnum::~OZChannelEnum(this - 2) = v179 * v172.__cosval;
    *(float *)(v180 + 36) = v179 * v172.__sinval;
  }
  else
  {
    v238 = 0;
    v239 = 0;
    uint64_t v240 = 0;
    int v71 = v64;
    uint64_t v72 = (v64 - 1);
    if (v64 <= 1)
    {
      unint64_t v84 = (uint64_t *)((char *)a1 + 208);
      uint64_t v93 = *((void *)a1 + 26);
      *((void *)a1 + 27) = v93;
      float v237 = 0.0;
      HIDWORD(v236) = 0;
      *(void *)&long long v65 = 0;
      float32x2_t v87 = 0;
      double v78 = 0.0;
      uint64_t v83 = (_DWORD *)v93;
    }
    else
    {
      uint64_t v73 = (float32x2_t *)((char *)v238 + 8);
      float32x2_t v74 = *(float32x2_t *)v238;
      float v75 = 10000.0;
      uint64_t v76 = (v64 - 1);
      do
      {
        float32x2_t v77 = *v73++;
        double v78 = *(double *)&v77;
        float32x2_t v79 = vsub_f32(v77, v74);
        float v80 = sqrtf(vaddv_f32(vmul_f32(v79, v79)));
        if (v80 >= v75) {
          float v81 = v75;
        }
        else {
          float v81 = v80;
        }
        if (v80 >= 0.0001) {
          float v75 = v81;
        }
        float32x2_t v74 = *(float32x2_t *)&v78;
        --v76;
      }
      while (v76);
      uint64_t v82 = 0;
      unint64_t v84 = (uint64_t *)((char *)a1 + 208);
      uint64_t v83 = (_DWORD *)*((void *)a1 + 26);
      *((void *)a1 + 27) = v83;
      unint64_t v236 = 0;
      float v237 = 0.0;
      do
      {
        uint64_t v85 = v82++;
        *(void *)&long long v65 = *((void *)v238 + v85);
        float32x2_t v86 = vsub_f32(*(float32x2_t *)((char *)v238 + 8 * v82), *(float32x2_t *)&v65);
        float32x2_t v87 = vmul_f32(v86, v86);
        float v88 = sqrtf(vaddv_f32(v87));
        if (v88 != 0.0)
        {
          *(void *)__x = *((void *)v238 + v85);
          __x[2] = 0;
          if ((unint64_t)v83 >= *((void *)a1 + 28))
          {
            uint64_t v83 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)a1 + 26, __x);
          }
          else
          {
            *uint64_t v83 = v65;
            v83[1] = __x[1];
            v83[2] = __x[2];
            v83 += 3;
          }
          *((void *)a1 + 27) = v83;
          *(float *)&long long v65 = v75;
          if (v75 < v88)
          {
            do
            {
              long long v66 = v65;
              float32x2_t v89 = *(float32x2_t *)((char *)v238 + 8 * v85);
              float32x2_t v90 = vsub_f32(*(float32x2_t *)((char *)v238 + 8 * v82), v89);
              int32x2_t v91 = (int32x2_t)vmul_f32(v90, v90);
              *(float *)v91.i32 = sqrtf(vaddv_f32((float32x2_t)v91));
              long long v210 = v66;
              float32x2_t v92 = vadd_f32(v89, vmul_n_f32(vdiv_f32(v90, (float32x2_t)vdup_lane_s32(v91, 0)), *(float *)&v66));
              *(float32x2_t *)__x = v92;
              __x[2] = 0;
              if ((unint64_t)v83 >= *((void *)a1 + 28))
              {
                uint64_t v83 = (_DWORD *)std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>((uint64_t *)a1 + 26, __x);
              }
              else
              {
                *uint64_t v83 = v92.i32[0];
                v83[1] = __x[1];
                v83[2] = __x[2];
                v83 += 3;
              }
              *((void *)a1 + 27) = v83;
              HIDWORD(v7OZSpline::reparametrize((uint64_t)this + 8) = __x[1];
              float32x2_t v87 = vadd_f32((float32x2_t)v236, *(float32x2_t *)__x);
              unint64_t v236 = (unint64_t)v87;
              float v237 = v237 + *(float *)&__x[2];
              long long v65 = v210;
              *(float *)&long long v65 = v75 + *(float *)&v210;
            }
            while ((float)(v75 + *(float *)&v210) < v88);
          }
        }
      }
      while (v82 != v72);
      uint64_t v93 = *v84;
      v87.i32[0] = HIDWORD(v236);
      LODWORD(v7OZSpline::reparametrize((uint64_t)this + 8) = v236;
      *(float *)&long long v65 = v237;
    }
    *(float *)&long long v66 = (float)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v83 - v93) >> 2));
    *(float *)&double v78 = *(float *)&v78 / *(float *)&v66;
    v87.f32[0] = v87.f32[0] / *(float *)&v66;
    *(float *)&long long v65 = *(float *)&v65 / *(float *)&v66;
    unint64_t v236 = __PAIR64__(v87.u32[0], LODWORD(v78));
    float v237 = *(float *)&v65;
    OMUtil::getBoundingBox(v84, (uint64_t)a1 + 144, 1, (float32x2_t *)&v236, *(double *)&v65, *(double *)&v87, v78, *(double *)&v66, v67, v68, v69, v70);
    long long v247 = xmmword_1B7E75640;
    operator*((float *)a1 + 36, (float *)&v247, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v232, v94);
    Vec2f v252 = v232;
    float v253 = v233;
    long long v247 = xmmword_1B837AD50;
    operator*((float *)a1 + 36, (float *)&v247, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v232, v95);
    Vec2f v254 = v232;
    float v255 = v233;
    long long v247 = xmmword_1B837AD60;
    operator*((float *)a1 + 36, (float *)&v247, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v232, v96);
    Vec2f v256 = v232;
    float v257 = v233;
    long long v247 = xmmword_1B837AD70;
    operator*((float *)a1 + 36, (float *)&v247, (float *)__x);
    proj((float32x2_t *)__x, (float32x2_t *)&v232, v97);
    uint64_t v98 = 0;
    Vec2f v258 = v232;
    float v259 = v233;
    int64_t v99 = (__int32 *)&v254 + 1;
    do
    {
      v261.val[0].i32[0] = *(v99 - 4);
      v261.val[0].i32[1] = *(v99 - 1);
      v261.val[1].i32[0] = *(v99 - 3);
      v261.val[1].i32[1] = *v99;
      uint64_t v100 = (float *)((char *)&v247 + v98);
      vst2_f32(v100, v261);
      v98 += 16;
      v99 += 6;
    }
    while (v98 != 32);
    uint64_t v101 = 0;
    int v102 = 0;
    float v103 = 1000.0;
    do
    {
      float v104 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)((char *)&v247 + 8 * v101), *(float32x2_t *)((char *)&v247
                                                                                                 + 8 * v101))));
      if (v104 < v103)
      {
        float v103 = v104;
        int v102 = v101;
      }
      ++v101;
    }
    while (v101 != 4);
    if (v102 <= 2) {
      int v105 = v102 + 1;
    }
    else {
      int v105 = 0;
    }
    int v106 = v102 - 1;
    if (v102 < 1) {
      int v106 = 3;
    }
    if (sqrtf((float)(*((float *)&v247 + 2 * v105) * *((float *)&v247 + 2 * v105))+ (float)(*((float *)&v247 + 2 * v105 + 1) * *((float *)&v247 + 2 * v105 + 1))) < sqrtf((float)(*((float *)&v247 + 2 * v106) * *((float *)&v247 + 2 * v106))+ (float)(*((float *)&v247 + 2 * v106 + 1) * *((float *)&v247 + 2 * v106 + 1))))
    {
      int v106 = v102;
      int v102 = v105;
    }
    if (v102 <= 2) {
      int v107 = v102 + 1;
    }
    else {
      int v107 = 0;
    }
    float32x2_t v108 = *(float32x2_t *)((char *)&v247 + 8 * v106);
    float32x2_t v109 = *(float32x2_t *)((char *)&v247 + 8 * v102);
    if (v107 <= 2) {
      int v110 = v107 + 1;
    }
    else {
      int v110 = 0;
    }
    float32x2_t v196 = v109;
    float32x2_t v111 = vmul_f32(vadd_f32(v108, v109), (float32x2_t)0x3F0000003F000000);
    float32x2_t v200 = *(float32x2_t *)((char *)&v247 + 8 * v110);
    float32x2_t v202 = *(float32x2_t *)((char *)&v247 + 8 * v107);
    float32x2_t v112 = vsub_f32(v111, vmul_f32(vadd_f32(v202, v200), (float32x2_t)0x3F0000003F000000));
    float32x2_t v235 = vadd_f32(v111, vmul_f32(v112, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
    uint64_t v113 = v247;
    float v114 = *((float *)&v247 + 3);
    float v199 = *((float *)&v247 + 2);
    float v197 = v251;
    float v198 = v250;
    float32x2_t v195 = v108;
    *(float32x2_t *)&long long v115 = v108;
    *((float32x2_t *)&v115 + atomic_store(0, (unint64_t *)this + 1) = v235;
    float32x2_t v211 = v235;
    *(_OWORD *)__x = v115;
    float v116 = (float)((float)((float)(*(float *)&v247 + *((float *)&v247 + 2)) + v248) + v250) * 0.25;
    Vec2f v232 = 0;
    float v117 = (float)((float)((float)(*((float *)&v247 + 1) + *((float *)&v247 + 3)) + v249) + v251) * 0.25;
    float v233 = v116;
    float v234 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)__x, (float *)&v232)) {
      goto LABEL_114;
    }
    *(float32x2_t *)&long long v118 = v211;
    *((float32x2_t *)&v118 + atomic_store(0, (unint64_t *)this + 1) = v196;
    long long v231 = v118;
    float32x2_t v228 = 0;
    float v229 = v116;
    float v230 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v231, (float *)&v228)) {
      goto LABEL_114;
    }
    *(float32x2_t *)&long long v119 = v196;
    *((float32x2_t *)&v119 + atomic_store(0, (unint64_t *)this + 1) = v202;
    long long v227 = v119;
    uint64_t v224 = 0;
    float v225 = v116;
    float v226 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v227, (float *)&v224)) {
      goto LABEL_114;
    }
    *(float32x2_t *)&long long v120 = v202;
    *((float32x2_t *)&v120 + atomic_store(0, (unint64_t *)this + 1) = v200;
    long long v223 = v120;
    uint64_t v220 = 0;
    float v221 = v116;
    float v222 = v117;
    if (OMUtil::findIntersectionOfLineSegment((float *)&v223, (float *)&v220) {
      || (*(float32x2_t *)&long long v121 = v200,
    }
          *((float32x2_t *)&v121 + atomic_store(0, (unint64_t *)this + 1) = v195,
          long long v219 = v121,
          uint64_t v216 = 0,
          float v217 = v116,
          float v218 = v117,
          OMUtil::findIntersectionOfLineSegment((float *)&v219, (float *)&v216)))
    {
LABEL_114:
      int32x2_t v122 = (int32x2_t)vmul_f32(v112, v112);
      *(float *)v122.i32 = sqrtf(vaddv_f32((float32x2_t)v122));
      float32x2_t v211 = vmul_f32(vdiv_f32(v112, (float32x2_t)vdup_lane_s32(v122, 0)), (float32x2_t)vdup_n_s32(0x3C23D70Au));
      float32x2_t v235 = v211;
    }
    if (v12 == 0.0) {
      float v123 = 0.01;
    }
    else {
      float v123 = v12;
    }
    int32x2_t v124 = (int32x2_t)vmul_f32(v200, v200);
    *(float *)v124.i32 = sqrtf(vaddv_f32((float32x2_t)v124));
    float32x2_t v125 = vdiv_f32(v200, (float32x2_t)vdup_lane_s32(v124, 0));
    float v201 = v123;
    Vec2f v232 = (Vec2f)vmul_n_f32(v125, v123);
    int32x2_t v126 = (int32x2_t)vmul_f32(v202, v202);
    *(float *)v126.i32 = sqrtf(vaddv_f32((float32x2_t)v126));
    *(float32x2_t *)&long long v231 = vmul_n_f32(vdiv_f32(v202, (float32x2_t)vdup_lane_s32(v126, 0)), v201);
    float v127 = sqrtf((float)((float)(*(float *)&v113 - v199) * (float)(*(float *)&v113 - v199))+ (float)((float)(*((float *)&v113 + 1) - v114) * (float)(*((float *)&v113 + 1) - v114)))/ sqrtf((float)((float)(*(float *)&v113 - v198) * (float)(*(float *)&v113 - v198))+ (float)((float)(*((float *)&v113 + 1) - v197) * (float)(*((float *)&v113 + 1) - v197)));
    if (v127 > 0.8 && v127 < 1.2 && sqrtf((float)(v116 * v116) + (float)(v117 * v117)) < 0.02)
    {
      OMPie::OMPie((OMPie *)__x, 0);
      float v128 = v214;
      *(Vec2f *)v214 = v232;
      v128[2] = v231;
      v128[1] = 0;
      v128[3] = 0;
      v128[4] = 0;
      OMPie::computeOppositeArc((OMPie *)__x, v129, v130);
      OMPie::getArcOut((float32x2_t **)__x, 0.6, &v228);
      Vec2f v232 = (Vec2f)v228;
      OMPie::getArcOut((float32x2_t **)__x, 0.4, &v228);
      *(float32x2_t *)&long long v231 = v228;
      OMPie::getArcOut((float32x2_t **)__x, 0.5, &v228);
      float32x2_t v211 = v228;
      float32x2_t v235 = v228;
      if (v214)
      {
        long long v215 = v214;
        operator delete(v214);
      }
    }
    uint64_t v131 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    **(Vec2f **)(v131 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v232;
    uint64_t v132 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    *(void *)(*(void *)(v132 + 40) + 16) = v231;
    *(float32x2_t *)(*(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40) + OZSpline::reparametrize((uint64_t)this + 8) = v211;
    *(float32x2_t *)(*(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40) + 24) = v211;
    *(float32x2_t *)(*(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40) + 3OZChannelEnum::~OZChannelEnum(this - 2) = v211;
    float v133 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    OMPie::computeArc(v133, v134, v135);
    double v136 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    OMPie::getArcOut(v136, -0.01, (float32x2_t *)__x);
    double v137 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    OMPie::getArcOut(v137, 1.01, &v228);
    float32x2_t v138 = vsub_f32(*(float32x2_t *)__x, v211);
    int32x2_t v139 = (int32x2_t)vmul_f32(v138, v138);
    *(float *)v139.i32 = sqrtf(vaddv_f32((float32x2_t)v139));
    float32x2_t v140 = vmul_n_f32(vdiv_f32(v138, (float32x2_t)vdup_lane_s32(v139, 0)), *(float *)v139.i32);
    float32x2_t v141 = (float32x2_t)vdup_n_s32(0x3F851EB8u);
    *(float32x2_t *)__x = vadd_f32(v211, vmul_f32(v140, v141));
    float32x2_t v142 = vsub_f32(v228, v211);
    int32x2_t v143 = (int32x2_t)vmul_f32(v142, v142);
    *(float *)v143.i32 = sqrtf(vaddv_f32((float32x2_t)v143));
    float32x2_t v228 = vadd_f32(v211, vmul_f32(vmul_n_f32(vdiv_f32(v142, (float32x2_t)vdup_lane_s32(v143, 0)), *(float *)v143.i32), v141));
    int v144 = (float32x2_t **)(*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    OMPie::getArcOut(v144, 0.5, (float32x2_t *)&v227);
    uint64_t v145 = v227;
    Vec2f v232 = *(Vec2f *)__x;
    *(float32x2_t *)&long long v231 = v228;
    uint64_t v146 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    **(Vec2f **)(v146 + 4OZChannelFolder::resetToDefault((OZChannelFolder *)this, 0) = v232;
    uint64_t v147 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    *(void *)(*(void *)(v147 + 40) + 16) = v231;
    uint64_t v148 = (*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1);
    float v149 = sqrtf((float)((float)(v211.f32[0] - *(float *)&v145) * (float)(v211.f32[0] - *(float *)&v145))+ (float)((float)(v211.f32[1] - *((float *)&v145 + 1)) * (float)(v211.f32[1] - *((float *)&v145 + 1))));
    float v150 = sqrtf((float)((float)(*(float *)&v145 - v211.f32[0]) * (float)(*(float *)&v145 - v211.f32[0]))+ (float)((float)(*((float *)&v145 + 1) - v211.f32[1]) * (float)(*((float *)&v145 + 1) - v211.f32[1])));
    float v151 = *(float *)&v145 + (float)((float)(v150 * (float)((float)(v211.f32[0] - *(float *)&v145) / v149)) * 1.04);
    float v152 = *((float *)&v145 + 1)
         + (float)((float)(v150 * (float)((float)(v211.f32[1] - *((float *)&v145 + 1)) / v149)) * 1.04);
    uint64_t v153 = *(void *)(v148 + 40);
    *(float *)(v153 + OZSpline::reparametrize((uint64_t)this + 8) = v151;
    *(float *)(v153 + 1OZChannelEnum::~OZChannelEnum(this - 2) = v152;
    uint64_t v154 = *(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40);
    *(float *)(v154 + 24) = v151;
    *(float *)(v154 + 2OZSpline::reparametrize((uint64_t)this + 8) = v152;
    uint64_t v155 = *(void *)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40);
    *(float *)(v155 + 3OZChannelEnum::~OZChannelEnum(this - 2) = v151;
    *(float *)(v155 + 36) = v152;
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
  }
  unint64_t v181 = *(float32x2_t **)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40);
  uint64_t v182 = *(float32x2_t **)((*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1) + 40);
  float32x2_t v183 = *v181;
  int32x2_t v184 = (int32x2_t)vmul_f32(v183, v183);
  float32x2_t v185 = v182[2];
  int32x2_t v186 = (int32x2_t)vmul_f32(v185, v185);
  int32x2_t v187 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v184, v186), (float32x2_t)vzip2_s32(v184, v186)));
  if (*(float *)v187.i32 >= *(float *)&v187.i32[1])
  {
    if (*(float *)v187.i32 > *(float *)&v187.i32[1]) {
      v182[2] = vmul_n_f32(vdiv_f32(v185, (float32x2_t)vdup_lane_s32(v187, 1)), *(float *)v187.i32);
    }
  }
  else
  {
    float32x2_t *v181 = vmul_lane_f32(vdiv_f32(v183, (float32x2_t)vdup_lane_s32(v187, 0)), (float32x2_t)v187, 1);
  }
  (*(void (**)(OMKeyer2D *, float))(*(void *)a1 + 72))(a1, (float)(v208 + v208) + -1.0);
  (*(void (**)(OMKeyer2D *, float))(*(void *)a1 + 80))(a1, (float)(v14 + v14) + -1.0);
  if (a4)
  {
    if (v42 <= 179
      && (float64x2_t v188 = (OMPie *)(*(uint64_t (**)(OMKeyer2D *))(*(void *)a1 + 96))(a1), OMPie::isQuadActive(v188)))
    {
      *a7 = 1.0;
      if ((int)(-1431655765 * ((uint64_t)(a2[1] - *a2) >> 2)) >= 1)
      {
        uint64_t v189 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 2);
        uint64_t v190 = (float *)(*a3 + 8);
        float v191 = 1.0;
        do
        {
          float v192 = *(v190 - 1);
          if (*v190 > (float)(v208 + (float)((float)(v14 - v208) * 0.45))
            && *v190 < (float)(v208 + (float)((float)(v14 - v208) * 0.55))
            && v192 < v191)
          {
            *a7 = v192;
            float v191 = v192;
          }
          v190 += 3;
          --v189;
        }
        while (v189);
      }
    }
    else
    {
      *a5 = 0.0;
      *a6 = 0.0;
      *a7 = 0.0;
    }
    OMKeyer2D::computeSatOffsetVector(a1);
  }
  if (v241.__begin_)
  {
    v241.__end_ = v241.__begin_;
    operator delete(v241.__begin_);
  }
  if (v242.__begin_)
  {
    v242.__end_ = v242.__begin_;
    operator delete(v242.__begin_);
  }
  if (__p)
  {
    CMTime v244 = (float *)__p;
    operator delete(__p);
  }
  if (v246.__begin_)
  {
    v246.__end_ = v246.__begin_;
    operator delete(v246.__begin_);
  }
}