uint64_t OZXSetObjectOpacity(void *a1, const CMTime *a2, unsigned int a3, double a4)
{
  OZScene *v4;
  void *Node;
  OZElement *v8;

  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  Node = OZScene::getNode(v4, a3);
  if (!Node) {
    return 11;
  }
  if (!v8) {
    return 11;
  }
  OZElement::setOpacity(v8, a4, a2);
  return 0;
}

uint64_t OZXDisableRenderingObject(uint64_t *a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 7;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    return 7;
  }
  Node = OZScene::getNode(*(OZScene **)(v3 + 24), a2);
  if (!Node) {
    return 11;
  }
  v42 = v8;
  if (!v8) {
    return 11;
  }
  v9 = (void *)(v4 + 1248);
  v10 = *(void **)(v4 + 1248);
  if (a3)
  {
    if (!v10) {
      goto LABEL_19;
    }
    v11 = (void *)(v4 + 1248);
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= (unint64_t)v8;
      if (v12 >= (unint64_t)v8) {
        v14 = v10;
      }
      else {
        v14 = v10 + 1;
      }
      if (v13) {
        v11 = v10;
      }
      v10 = (void *)*v14;
    }
    while (*v14);
    if (v11 == v9 || (unint64_t v15 = v11[4], (unint64_t)v8 < v15) || v15 == *(void *)(v4 + 1280)) {
LABEL_19:
    }
      std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)(v4 + 1240), (unint64_t *)&v42, (uint64_t *)&v42);
  }
  else if (v10)
  {
    v17 = (void *)(v4 + 1248);
    do
    {
      unint64_t v18 = v10[4];
      BOOL v19 = v18 >= (unint64_t)v8;
      if (v18 >= (unint64_t)v8) {
        v20 = v10;
      }
      else {
        v20 = v10 + 1;
      }
      if (v19) {
        v17 = v10;
      }
      v10 = (void *)*v20;
    }
    while (*v20);
    if (v17 != v9)
    {
      unint64_t v21 = v17[4];
      if ((unint64_t)v8 >= v21 && v21 != *(void *)(v4 + 1280)) {
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>(v4 + 1240, (unint64_t *)&v42);
      }
    }
  }
  v41[0] = 0;
  v41[1] = 0;
  v40 = (uint64_t *)v41;
  OZScene::getCloneNodes((uint64_t *)v4, a2, &v40);
  v22 = v40;
  if (v40 != (uint64_t *)v41)
  {
    do
    {
      v39 = 0;
      v23 = OZScene::getNode((OZScene *)v4, *((_DWORD *)v22 + 7));
      if (v23)
      {
        v39 = v24;
        if (v24)
        {
          v25 = (void *)*v9;
          if (a3)
          {
            if (!v25) {
              goto LABEL_51;
            }
            v26 = (void *)(v4 + 1248);
            do
            {
              unint64_t v27 = v25[4];
              BOOL v28 = v27 >= (unint64_t)v24;
              if (v27 >= (unint64_t)v24) {
                v29 = v25;
              }
              else {
                v29 = v25 + 1;
              }
              if (v28) {
                v26 = v25;
              }
              v25 = (void *)*v29;
            }
            while (*v29);
            if (v26 == v9 || (unint64_t v30 = v26[4], (unint64_t)v24 < v30) || v30 == *(void *)(v4 + 1280)) {
LABEL_51:
            }
              std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)(v4 + 1240), (unint64_t *)&v39, (uint64_t *)&v39);
          }
          else if (v25)
          {
            v31 = (void *)(v4 + 1248);
            do
            {
              unint64_t v32 = v25[4];
              BOOL v33 = v32 >= (unint64_t)v24;
              if (v32 >= (unint64_t)v24) {
                v34 = v25;
              }
              else {
                v34 = v25 + 1;
              }
              if (v33) {
                v31 = v25;
              }
              v25 = (void *)*v34;
            }
            while (*v34);
            if (v31 != v9)
            {
              unint64_t v35 = v31[4];
              if ((unint64_t)v24 >= v35 && v35 != *(void *)(v4 + 1280)) {
                std::__tree<OZLocking *>::__erase_unique<OZLocking *>(v4 + 1240, (unint64_t *)&v39);
              }
            }
          }
        }
      }
      v36 = (uint64_t *)v22[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t *)v22[2];
          BOOL v38 = *v37 == (void)v22;
          v22 = v37;
        }
        while (!v38);
      }
      v22 = v37;
    }
    while (v37 != (uint64_t *)v41);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v40, v41[0]);
  return 0;
}

CFComparisonResult OZXDisableElementWithPublishedParam(void *a1, PCString *a2, int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unint64_t v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy && TargetChannelForProxy != (OZChannelBase *)v7)
    {
      ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(TargetChannelForProxy);
      if (ChannelRootBase)
      {
        ObjectManipulator = (uint64_t *)OZChannelBase::getObjectManipulator(ChannelRootBase);
        if (ObjectManipulator)
        {
          uint64_t v12 = *ObjectManipulator;
          if (a3) {
            BOOL v13 = (void (**)(void))(v12 + 40);
          }
          else {
            BOOL v13 = (void (**)(void))(v12 + 32);
          }
          (*v13)();
        }
      }
    }
  }
  return v5;
}

void sub_1B7CF0F14(void *a1)
{
}

CFComparisonResult OZXEnableTextDynamicLineSpacing(void *a1, PCString *a2, uint64_t a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unint64_t v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13) {
              (*(void (**)(void *, uint64_t))(*(void *)v13 + 80))(v13, a3);
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B7CF10AC(void *a1)
{
}

CFComparisonResult OZXSetTextOneLineScaleThreshold(void *a1, PCString *a2, double a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  unint64_t v15 = 0;
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13) {
              (*(void (**)(void *, double))(*(void *)v13 + 88))(v13, a3);
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B7CF1244(void *a1)
{
}

uint64_t OZXGetTextAttributedString(void *a1, unsigned int a2, NSMutableAttributedString *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  Node = OZScene::getNode(v4, a2);
  if (Node)
  {
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = v8;
        CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        __n128 v10 = OZXGetPosterFrameTime(a1, &v14);
        if (v11)
        {
          NSLog(&cfstr_WarningCouldNo_0.isa, v10.n128_f64[0]);
        }
        else if (v14.flags)
        {
LABEL_13:
          BOOL v13 = (void *)(*(uint64_t (**)(void *, CMTime *, void, __n128))(*(void *)v9 + 120))(v9, &v14, 0, v10);
          [(NSMutableAttributedString *)a3 setAttributedString:v13];

          return 0;
        }
        __n128 v10 = *(__n128 *)MEMORY[0x1E4F1FA48];
        CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        goto LABEL_13;
      }
    }
  }
  return 11;
}

uint64_t OZXClearTranscription(uint64_t a1)
{
  v2 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v2);
  if (!result)
  {
    if (v2)
    {
      (**v2)(v2);
      return 0;
    }
  }
  return result;
}

void sub_1B7CF1468(void *a1)
{
}

uint64_t __OZXGetTranscriptionDelegate(uint64_t a1, void *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  if (!a2) {
    return 11;
  }
  uint64_t v4 = v2 + 1200;
  uint64_t v5 = *(void *)(v2 + 1208);
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  v13[0] = v5;
  v13[1] = v5;
  uint64_t v14 = v4;
  char v15 = 0;
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  uint64_t v10 = v4;
  while (1)
  {
    if (v13[0] == v10)
    {
      uint64_t v8 = 11;
      goto LABEL_15;
    }
    if (v13[0] != v14)
    {
      v6 = *(const void **)(v13[0] + 16);
      if (v6)
      {
        if (v7) {
          break;
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v13);
  }
  uint64_t v8 = 0;
  *a2 = v7;
LABEL_15:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  return v8;
}

uint64_t OZXSetLoopMarkerFromTranscription(void *a1)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    return 7;
  }
  uint64_t v2 = *(void *)(v1 + 1208);
  memset(v30, 0, sizeof(v30));
  int v31 = 1065353216;
  v27[0] = v2;
  v27[1] = v2;
  uint64_t v28 = v1 + 1200;
  char v29 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  uint64_t v21 = v1 + 1200;
  uint64_t v22 = v2;
  uint64_t v23 = v1 + 1200;
  char v24 = 0;
  while (1)
  {
    if (v27[0] == v21) {
      goto LABEL_20;
    }
    if (v27[0] != v28)
    {
      uint64_t v3 = *(const void **)(v27[0] + 16);
      if (v3)
      {
        if (v4) {
          break;
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v27);
  }
  (*(void (**)(void *, uint64_t))(*(void *)v4 + 48))(v4, 1);
  uint64_t v7 = *(void *)(v1 + 1136);
  uint64_t v10 = *(uint64_t ***)(v7 + 8);
  BOOL v9 = (uint64_t **)(v7 + 8);
  uint64_t v8 = v10;
  if (v10 == v9 + 1)
  {
LABEL_20:
    uint64_t v5 = 11;
    goto LABEL_21;
  }
  Float64 v11 = v6;
  while (*((_DWORD *)v8 + 27) != 7)
  {
    int v12 = v8[1];
    if (v12)
    {
      do
      {
        BOOL v13 = (uint64_t **)v12;
        int v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        BOOL v13 = (uint64_t **)v8[2];
        BOOL v14 = *v13 == (uint64_t *)v8;
        uint64_t v8 = v13;
      }
      while (!v14);
    }
    uint64_t v8 = v13;
    if (v13 == v9 + 1) {
      goto LABEL_20;
    }
  }
  uint64_t v16 = (uint64_t)(v8 + 4);
  OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v19, (const OZTimeMarker *)(v8 + 4));
  OZFigTimeForChannelSeconds(&v18, v11, 0x40000);
  CMTime v20 = v18;
  int v17 = std::__tree<OZTimeMarker>::find<OZTimeMarker>((uint64_t)v9, v16);
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v9, v17);
  (*(void (**)(void))v17[4])();
  operator delete(v17);
  std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v9, (uint64_t)&v19, (const OZTimeMarker *)&v19);
  OZTimeMarker::~OZTimeMarker(&v19);
  uint64_t v5 = 0;
LABEL_21:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
  return v5;
}

void sub_1B7CF1840(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZTimeMarker::~OZTimeMarker((PCString *)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF1784);
}

double OZXGetTranscriptionDuration(uint64_t a1, CMTime *a2)
{
  uint64_t v6 = 0;
  if (!__OZXGetTranscriptionDelegate(a1, &v6))
  {
    if (v6)
    {
      Float64 v4 = (*(double (**)(uint64_t, void))(*(void *)v6 + 48))(v6, 0);
      OZFigTimeForChannelSeconds(&v5, v4, 0x40000);
      double result = *(double *)&v5.value;
      *a2 = v5;
    }
  }
  return result;
}

void sub_1B7CF1910(void *a1)
{
}

uint64_t OZXResetToDefaultTranscription(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v2);
  if (!result)
  {
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      return 0;
    }
  }
  return result;
}

void sub_1B7CF1984(void *a1)
{
}

uint64_t OZXSetTranscriptionLocale(uint64_t a1, NSString *a2)
{
  uint64_t v4 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v4);
  if (!result)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, NSString *))(*(void *)v4 + 72))(v4, a2);
      return 0;
    }
  }
  return result;
}

void sub_1B7CF1A04(void *a1)
{
}

uint64_t OZXSetTranscriptionText(uint64_t a1, NSString *a2)
{
  uint64_t v5 = 0;
  uint64_t v3 = __OZXGetTranscriptionDelegate(a1, &v5);
  if (!v3 && v5) {
    (*(void (**)(uint64_t, NSString *))(*(void *)v5 + 16))(v5, a2);
  }
  return v3;
}

uint64_t OZXAdjustTranscriptionLineSpacingForCurrentFont(void *a1, const PCString *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*a1) {
    return 7;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v2 = __OZXGetTranscriptionDelegateAndLineSpacingChannel(a1, a2, &v4, &v5);
  uint64_t result = 11;
  if (!v2 && v5)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
      return 0;
    }
  }
  return result;
}

CFComparisonResult __OZXGetTranscriptionDelegateAndLineSpacingChannel(void *a1, const PCString *a2, void *a3, void *a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  Float64 v11 = 0;
  CFComparisonResult result = __OZXGetPublishedChannel(a1, a2, &v11);
  if (result) {
    return result;
  }
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (!v8) {
    return 7;
  }
  if (v11)
  {
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v8 + 720), (OZChannelBase *)v11);
    if (TargetChannelForProxy)
    {
      if (a4)
      {
        if (v10) {
          *a4 = v10;
        }
      }
    }
  }
  return __OZXGetTranscriptionDelegate((uint64_t)a1, a3);
}

void sub_1B7CF1BFC(void *a1)
{
}

uint64_t OZXSetTranscriptionMediaOffset(uint64_t a1, const CMTime *a2)
{
  uint64_t v5 = 0;
  uint64_t v3 = __OZXGetTranscriptionDelegate(a1, &v5);
  if (!v3 && v5) {
    (*(void (**)(uint64_t, const CMTime *))(*(void *)v5 + 24))(v5, a2);
  }
  return v3;
}

uint64_t OZXSetTranscription(uint64_t a1, void *a2, const __CFString *a3, const CMTime *a4, uint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v10);
  if (!result)
  {
    if (v10)
    {
      (*(void (**)(uint64_t, void *, const __CFString *, const CMTime *, uint64_t))(*(void *)v10 + 32))(v10, a2, a3, a4, a5);
      return 0;
    }
  }
  return result;
}

void sub_1B7CF1D10(void *a1)
{
}

uint64_t OZXTranscriptionHitTest(void *a1, CGPoint a2, const CMTime *a3, BOOL *a4)
{
  if (a4) {
    *a4 = 0;
  }
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  uint64_t v6 = *(void *)(v5 + 1208);
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  v18[0] = v6;
  v18[1] = v6;
  uint64_t v19 = v5 + 1200;
  char v20 = 0;
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v12 = v5 + 1200;
  uint64_t v13 = v6;
  uint64_t v14 = v5 + 1200;
  char v15 = 0;
  while (v18[0] != v12)
  {
    if (v18[0] != v19)
    {
      uint64_t v7 = *(const void **)(v18[0] + 16);
      if (v7)
      {
        {
          OZRenderState::OZRenderState(&v11);
          CMTimeEpoch epoch = a3->epoch;
          *(_OWORD *)&v11.var0.var0 = *(_OWORD *)&a3->value;
          v11.var0.var3 = epoch;
          v11.var20 = 0;
          v11.var25 = 0;
          operator new();
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v18);
  }
  uint64_t v8 = 11;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v21);
  return v8;
}

void sub_1B7CF1FE0(void *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF1FB8);
}

uint64_t OZXSetShapePoints(uint64_t a1, void *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  CMTime v125 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  OZScene::begin((OZScene *)v4, (uint64_t)v123);
  OZScene::end_sel((OZScene *)v4, (uint64_t)v121);
  if (!a3 || (uint64_t v8 = v123[0], v123[0] == v121[0]))
  {
LABEL_22:
    uint64_t v19 = (OZChannelBase *)PCString::PCString((PCString *)&__p, "Rotoshape");
    OZChannelBase::getNextUniqueID(v19);
    *(_OWORD *)v117 = xmmword_1B837FBE0;
    uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)v117);
    uint64_t v21 = SceneNode;
    uint64_t v11 = SceneNode - 200;
    if (SceneNode) {
      int v22 = (OZRotoshape *)(SceneNode - 200);
    }
    else {
      int v22 = 0;
    }
    PCString::~PCString((PCString *)&__p);
    OZRotoshape::setInterpolation(v22, 1u);
    if (*a4) {
      (*(void (**)(void *))(*((void *)v22 + 2372) + 344))((void *)v22 + 2372);
    }
    uint64_t v23 = (OZChannelBase *)PCString::PCString((PCString *)&__p, "Group");
    OZChannelBase::getNextUniqueID(v23);
    *(_OWORD *)v117 = xmmword_1B8380BF0;
    char v24 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v117);
    PCString::~PCString((PCString *)&__p);
    long long v119 = *(_OWORD *)(v4 + 1376);
    uint64_t v25 = *(void *)(v4 + 1392);
    *(_OWORD *)v117 = *MEMORY[0x1E4F1FA48];
    int v26 = *(char **)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v120 = v25;
    v118 = v26;
    (*(void (**)(OZSceneNode *, void **, void))(*(void *)v24 + 1136))(v24, v117, 0);
    OZScene::addRootNode((OZScene *)v4, v24);
    unint64_t v27 = (void *)((char *)v22 + 200);
    if (v21) {
      uint64_t v28 = (void *)((char *)v22 + 200);
    }
    else {
      uint64_t v28 = 0;
    }
    (*(void (**)(OZSceneNode *, void *, void))(*(void *)v24 + 984))(v24, v28, 0);
    long long v119 = *(_OWORD *)(v4 + 1376);
    uint64_t v29 = *(void *)(v4 + 1392);
    *(_OWORD *)v117 = *MEMORY[0x1E4F1FA48];
    unint64_t v30 = *(char **)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v120 = v29;
    v118 = v30;
    (*(void (**)(OZRotoshape *, void **, void))(*(void *)v22 + 336))(v22, v117, 0);
    if (a4[8])
    {
      *(_OWORD *)v117 = xmmword_1B8380C60;
      uint64_t Behavior = OZApplication::createBehavior(theApp, (unsigned int *)v117);
      (*(void (**)(void **__return_ptr, void *))(*v27 + 1128))(v117, (void *)v22 + 25);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(Behavior + 56), (const PCTimeRange *)v117, 0);
      OZWriteOnBehavior::setDefaultSpeedType((OZWriteOnBehavior *)Behavior, 0);
      (*(void (**)(void *, uint64_t, void))(*v27 + 360))((void *)v22 + 25, Behavior, 0);
    }
  }
  else
  {
    do
    {
      if (v8 == v123[2] || (BOOL v9 = *(const void **)(v8 + 16)) == 0)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = (uint64_t)v10;
        if (v10)
        {
          int v12 = *a4;
          if (v12 == OZShape::isMask((OZShape *)(v10 + 18976)))
          {
            v100 = *(const void **)(v11 + 1160);
            if (v100) {
            goto LABEL_14;
            }
          }
        }
      }
      OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v123);
      uint64_t v8 = v123[0];
    }
    while (v123[0] != v121[0]);
    if (!v11) {
      goto LABEL_22;
    }
LABEL_14:
    OZRotoshape::deleteAll((OZRotoshape *)v11);
    if (a4[8])
    {
      uint64_t v14 = *(void *)(v11 + 1208);
      if (v14 != v11 + 1200)
      {
        while (1)
        {
          char v15 = *(const void **)(v14 + 16);
          if (v15)
          {
            if (v16)
            {
              int v17 = v16;
              if (((*(uint64_t (**)(char *))(*(void *)v16 + 480))(v16) & 1) == 0) {
                break;
              }
            }
          }
          uint64_t v14 = *(void *)(v14 + 8);
          if (v14 == v11 + 1200) {
            goto LABEL_32;
          }
        }
        (*(void (**)(char *))(*(void *)v17 + 488))(v17);
        long long v119 = *(_OWORD *)(v4 + 1376);
        uint64_t v101 = *(void *)(v4 + 1392);
        *(_OWORD *)v117 = *MEMORY[0x1E4F1FA48];
        v102 = *(char **)(MEMORY[0x1E4F1FA48] + 16);
        uint64_t v120 = v101;
        v118 = v102;
        OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v17 + 56), (const PCTimeRange *)v117, 0);
      }
    }
  }
LABEL_32:
  if (!*a4)
  {
    LODWORD(v13) = *((_DWORD *)a4 + 4);
    (*(void (**)(uint64_t, void, void, double))(*(void *)(v11 + 27320) + 712))(v11 + 27320, MEMORY[0x1E4F1FA48], 0, (double)v13);
    (*(void (**)(uint64_t, void, unsigned __int8 *, uint64_t))(*(void *)(v11 + 26160) + 840))(v11 + 26160, MEMORY[0x1E4F1FA48], a4 + 24, 1);
  }
  v117[0] = 0;
  v117[1] = 0;
  v118 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  uint64_t v32 = [a2 countByEnumeratingWithState:&v113 objects:v126 count:16];
  if (v32)
  {
    uint64_t v33 = *(void *)v114;
    do
    {
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)v114 != v33) {
          objc_enumerationMutation(a2);
        }
        [*(id *)(*((void *)&v113 + 1) + 8 * i) CGPointValue];
        uint64_t v37 = v35;
        uint64_t v38 = v36;
        v39 = v117[1];
        if (v117[1] >= v118)
        {
          int64_t v41 = ((char *)v117[1] - (char *)v117[0]) >> 4;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = v118 - (char *)v117[0];
          if ((v118 - (char *)v117[0]) >> 3 > v42) {
            unint64_t v42 = v43 >> 3;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v118, v44);
          v47 = &v46[16 * v41];
          *(void *)v47 = v37;
          *((void *)v47 + 1) = v38;
          v48 = (char *)v117[0];
          v49 = (char *)v117[1];
          v50 = v47;
          while (v49 != v48)
          {
            long long v51 = *((_OWORD *)v49 - 1);
            v49 -= 16;
            *((_OWORD *)v50 - 1) = v51;
            v50 -= 16;
          }
          v40 = v47 + 16;
          v117[0] = v50;
          v117[1] = v47 + 16;
          v118 = &v46[16 * v45];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(void *)v117[1] = v35;
          v39[1] = v36;
          v40 = v39 + 2;
        }
        v117[1] = v40;
      }
      uint64_t v32 = [a2 countByEnumeratingWithState:&v113 objects:v126 count:16];
    }
    while (v32);
  }
  if (v117[1] != v117[0])
  {
    CMTime v112 = v125;
    OZRotoshape::addVertices(v11, &v112, (uint64_t)v117);
  }
  if (*a4) {
    OZRotoshape::closeCurve((OZRotoshape *)v11);
  }
  OZRotoshape::finishCurve((OZRotoshape *)v11);
  OZShape::setInterpolation((OZShape *)(v11 + 18976), *((_DWORD *)a4 + 1));
  if (a4[2])
  {
    __p = 0;
    v110 = 0;
    v111 = 0;
    v52 = (void *)(v11 + 19184);
    OZChannelCurve::getEnabledVerticesList((os_unfair_lock_s *)(v11 + 19184), MEMORY[0x1E4F1FA48], (char **)&v107);
    v54 = (char **)v107;
    v53 = v108;
    if (v107 != v108)
    {
      int v55 = 0;
      uint64_t v56 = (((unsigned char *)v108 - (unsigned char *)v107) >> 4) - 1;
      v57 = (CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        if (v55 && v56 != v55)
        {
          OZChannelCurve::setVertexInterpolation((uint64_t)v52, *v54, v54[1], 4);
          uint64_t v105 = 0;
          uint64_t v106 = 0;
          uint64_t v103 = 0;
          uint64_t v104 = 0;
          OZChannelCurve::getVertexDerivatives(v52, *v54, v54[1], v57, (double *)&v106, (double *)&v105, (double *)&v104, (double *)&v103);
          v59 = v110;
          v58 = v111;
          if (v110 >= v111)
          {
            v61 = (char *)__p;
            uint64_t v62 = (v110 - (unsigned char *)__p) >> 3;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61) {
              goto LABEL_147;
            }
            uint64_t v64 = v111 - (unsigned char *)__p;
            if ((v111 - (unsigned char *)__p) >> 2 > v63) {
              unint64_t v63 = v64 >> 2;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v111, v65);
              v61 = (char *)__p;
              v59 = v110;
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[8 * v62];
            *(void *)v67 = v106;
            v60 = v67 + 8;
            while (v59 != v61)
            {
              uint64_t v68 = *((void *)v59 - 1);
              v59 -= 8;
              *((void *)v67 - 1) = v68;
              v67 -= 8;
            }
            v58 = &v66[8 * v65];
            __p = v67;
            v110 = v60;
            v111 = v58;
            if (v61)
            {
              operator delete(v61);
              v58 = v111;
            }
          }
          else
          {
            *(void *)v110 = v106;
            v60 = v59 + 8;
          }
          v110 = v60;
          if (v60 >= v58)
          {
            v70 = (char *)__p;
            uint64_t v71 = (v60 - (unsigned char *)__p) >> 3;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61) {
              goto LABEL_147;
            }
            uint64_t v73 = v58 - (unsigned char *)__p;
            if (v73 >> 2 > v72) {
              unint64_t v72 = v73 >> 2;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v111, v74);
              v70 = (char *)__p;
              v60 = v110;
            }
            else
            {
              v75 = 0;
            }
            v76 = &v75[8 * v71];
            *(void *)v76 = v105;
            v69 = v76 + 8;
            while (v60 != v70)
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v76 - 1) = v77;
              v76 -= 8;
            }
            v58 = &v75[8 * v74];
            __p = v76;
            v110 = v69;
            v111 = v58;
            if (v70)
            {
              operator delete(v70);
              v58 = v111;
            }
          }
          else
          {
            *(void *)v60 = v105;
            v69 = v60 + 8;
          }
          v110 = v69;
          if (v69 >= v58)
          {
            v79 = (char *)__p;
            uint64_t v80 = (v69 - (unsigned char *)__p) >> 3;
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 61) {
              goto LABEL_147;
            }
            uint64_t v82 = v58 - (unsigned char *)__p;
            if (v82 >> 2 > v81) {
              unint64_t v81 = v82 >> 2;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83)
            {
              v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v111, v83);
              v79 = (char *)__p;
              v69 = v110;
            }
            else
            {
              v84 = 0;
            }
            v85 = &v84[8 * v80];
            *(void *)v85 = v104;
            v78 = v85 + 8;
            while (v69 != v79)
            {
              uint64_t v86 = *((void *)v69 - 1);
              v69 -= 8;
              *((void *)v85 - 1) = v86;
              v85 -= 8;
            }
            v58 = &v84[8 * v83];
            __p = v85;
            v110 = v78;
            v111 = v58;
            if (v79)
            {
              operator delete(v79);
              v58 = v111;
            }
          }
          else
          {
            *(void *)v69 = v104;
            v78 = v69 + 8;
          }
          v110 = v78;
          if (v78 >= v58)
          {
            v88 = (char *)__p;
            uint64_t v89 = (v78 - (unsigned char *)__p) >> 3;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61) {
LABEL_147:
            }
              std::vector<double>::__throw_length_error[abi:ne180100]();
            uint64_t v91 = v58 - (unsigned char *)__p;
            if (v91 >> 2 > v90) {
              unint64_t v90 = v91 >> 2;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v111, v92);
              v88 = (char *)__p;
              v78 = v110;
            }
            else
            {
              v93 = 0;
            }
            v94 = &v93[8 * v89];
            *(void *)v94 = v103;
            v87 = v94 + 8;
            while (v78 != v88)
            {
              uint64_t v95 = *((void *)v78 - 1);
              v78 -= 8;
              *((void *)v94 - 1) = v95;
              v94 -= 8;
            }
            __p = v94;
            v110 = v87;
            v111 = &v93[8 * v92];
            if (v88) {
              operator delete(v88);
            }
          }
          else
          {
            *(void *)v78 = v103;
            v87 = v78 + 8;
          }
          v110 = v87;
          v53 = v108;
        }
        ++v55;
        v54 += 2;
      }
      while (v54 != v53);
      v96 = (char **)v107;
      if (v107 != v53)
      {
        unsigned int v97 = 0;
        int v98 = 0;
        v99 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          if (v98 && v56 != v98)
          {
            OZChannelCurve::setInputTangents((uint64_t)v52, *v96, v96[1], v99, *((double *)__p + v97), *((double *)__p + v97 + 1));
            OZChannelCurve::setOutputTangents((uint64_t)v52, *v96, v96[1], v99, *((double *)__p + v97 + 2), *((double *)__p + v97 + 3));
            v97 += 4;
            v53 = v108;
          }
          ++v98;
          v96 += 2;
        }
        while (v96 != v53);
        v53 = v107;
      }
    }
    if (v53)
    {
      v108 = v53;
      operator delete(v53);
    }
    if (__p)
    {
      v110 = (char *)__p;
      operator delete(__p);
    }
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v122);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v124);
  return 0;
}

void sub_1B7CF2C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a41);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a50);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B7CF2B28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZXCreateFontWithName(const __CFString *a1, CGFloat a2, const CGAffineTransform *a3, const __CTFont **a4)
{
  if (!a4) {
    return 11;
  }
  uint64_t v5 = OZCreateFontWithName(a1, a2, a3);
  if (!v5) {
    return 11;
  }
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

void *OZXSetValueForChannel(void *result, uint64_t a2, void *a3, _DWORD *a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if (v8)
    {
      BOOL v9 = v8;
      int v10 = objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "intValue");
      if ((*(uint64_t (**)(void *))(*(void *)v9 + 840))(v9))
      {
        uint64_t v11 = *(void *)(*(uint64_t (**)(void *))(*(void *)v9 + 840))(v9);
        if (v10) {
          (*(void (**)(void))(v11 + 32))();
        }
        else {
          (*(void (**)(void))(v11 + 40))();
        }
      }
      *a4 = 0;
    }
    if (v12)
    {
      unint64_t v13 = v12;
      v14.n128_f64[0] = (double)(int)objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "intValue");
      (*(void (**)(void *, void, void, __n128))(*(void *)v13 + 712))(v13, MEMORY[0x1E4F1FA48], 0, v14);
      *a4 = 0;
    }
    if (v15)
    {
      uint64_t v16 = v15;
      unsigned int Tag = objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "unsignedIntValue");
      OZChannelEnum::getNumberOfStrings(v16);
      if (*((void *)v16 + 22) != *((void *)v16 + 21)) {
        unsigned int Tag = OZChannelEnum::getTag(v16, Tag);
      }
      (*(void (**)(OZChannelEnum *, void, void, double))(*(void *)v16 + 712))(v16, MEMORY[0x1E4F1FA48], 0, (double)Tag);
      *a4 = 0;
    }
    if (v18)
    {
      uint64_t v19 = v18;
      CFStringRef v20 = (const __CFString *)[a3 valueForKeyPath:a2];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v43.var0 = 0;
        PCString::set(&v43, v20);
        (*(void (**)(void *, PCString *, uint64_t, uint64_t))(*(void *)v19 + 864))(v19, &v43, 1, 1);
        PCString::~PCString(&v43);
      }
      *a4 = 0;
    }
    if (v21)
    {
      int v22 = v21;
      double v41 = 0.0;
      double v42 = 0.0;
      double v40 = 0.0;
      objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "getRed:green:blue:alpha:", &v42, &v41, &v40, 0);
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      float v24 = v42;
      float v25 = v41;
      float v26 = v40;
      PCColor::PCColor(&v39, v24, v25, v26, 1.0, DeviceRGB);
      (*(void (**)(void *, void, PCColor *, void))(*(void *)v22 + 840))(v22, MEMORY[0x1E4F1FA48], &v39, 0);
      CGColorSpaceRelease(DeviceRGB);
      *a4 = 0;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v39.var1._obj);
    }
    if (v27)
    {
      uint64_t v28 = v27;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, void, void))(*(void *)v28 + 712))(v28, MEMORY[0x1E4F1FA48], 0);
      *a4 = 0;
    }
    if (v29)
    {
      unint64_t v30 = v29;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      OZChannel2D::setValue(v30, MEMORY[0x1E4F1FA48], v31, v31);
      *a4 = 0;
    }
    if (v32)
    {
      uint64_t v33 = v32;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, void, void))(*(void *)v33 + 712))(v33, MEMORY[0x1E4F1FA48], 0);
      *a4 = 0;
    }
    if (v34)
    {
      uint64_t v35 = v34;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, void, void))(*(void *)v35 + 712))(v35, MEMORY[0x1E4F1FA48], 0);
      *a4 = 0;
    }
    if (v36)
    {
      uint64_t v37 = v36;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, void, void))(*(void *)v37 + 712))(v37, MEMORY[0x1E4F1FA48], 0);
      *a4 = 0;
    }
    if (result)
    {
      uint64_t v38 = result;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      uint64_t result = (void *)(*(uint64_t (**)(void))(v38[55] + 712))();
      *a4 = 0;
    }
  }
  return result;
}

void sub_1B7CF365C(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 72));
  _Unwind_Resume(a1);
}

void *__OZXGetPublishedSettingDictionary(NSString *a1, NSNumber *a2, NSString *a3, NSObject *a4, NSArray *a5, NSString *a6)
{
  int v12 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:6];
  [v12 setObject:a2 forKeyedSubscript:@"PVEffectParam_ObjectIDKey"];
  [v12 setObject:a1 forKeyedSubscript:@"PVEffectParam_NameKey"];
  [v12 setObject:a3 forKeyedSubscript:@"PVEffectParam_TypeKey"];
  [v12 setObject:a4 forKeyedSubscript:@"PVEffectParam_ValueKey"];
  [v12 setObject:a5 forKeyedSubscript:@"PVEffectParam_ValuesArrayKey"];
  [v12 setObject:a6 forKeyedSubscript:@"PVEffectParam_ChanRefKey"];
  return v12;
}

void *__OZXGetPublishedSettingForOZChannelObjectRoot(void *result, uint64_t a2, NSString *a3, NSString *a4)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0;
    if (a2)
    {
      if (*(void *)v4)
      {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
        if (result)
        {
          if (*(void *)(*(void *)v4 + 24))
          {
            uint64_t v7 = objc_msgSend(NSNumber, "numberWithBool:", (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)result + 24))(result, 1, 1));
            return __OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamBoo.isa, v7, 0, a4);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelBool(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0;
    if (this)
    {
      uint64_t v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(void *)(v6 + 24))
        {
          BOOL v9 = objc_msgSend(NSNumber, "numberWithBool:", OZChannel::getValueAsInt(this, a5, 0.0) != 0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamBoo.isa, v9, 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void *__OZXGetPublishedSettingForOZChannelEnum(uint64_t a1, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!this || !*(void *)a1) {
    return v6;
  }
  if ((a5->flags & 1) == 0 || !*(void *)(*(void *)a1 + 24)) {
    return 0;
  }
  uint64_t ValueAsInt = OZChannel::getValueAsInt(this, a5, 0.0);
  if (*(void ***)&this[1].var3 == this[1].var2)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = (NSArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    int NumberOfStrings = OZChannelEnum::getNumberOfStrings((OZChannelEnum *)this);
    if (NumberOfStrings >= 1)
    {
      unsigned int v12 = 0;
      do
        -[NSArray addObject:](v10, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", OZChannelEnum::getTag((OZChannelEnum *)this, v12++)));
      while (NumberOfStrings != v12);
    }
  }
  uint64_t v6 = __OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamEnu.isa, [NSNumber numberWithInt:ValueAsInt], v10, a4);

  return v6;
}

void *__OZXGetPublishedSettingForOZChannelText(uint64_t a1, OZChannelBase *a2, NSString *a3, NSString *a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a2 && *(void *)a1)
  {
    if ((*(unsigned char *)(a5 + 12) & 1) != 0 && *(void *)(*(void *)a1 + 24))
    {
      (*((void (**)(PCString *__return_ptr, OZChannelBase *))a2->var0 + 106))(&v19, a2);
      ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a2);
      if (ObjectManipulator
      {
        unsigned int v12 = v11;
        unint64_t v13 = (NSNumber *)[NSNumber numberWithUnsignedInt:v11[70]];
        uint64_t v14 = (*(uint64_t (**)(unsigned int *, uint64_t, void))(*(void *)v12 + 120))(v12, a5, 0);
        char v15 = (void *)v14;
        if (v14)
        {
          uint64_t v16 = @"effect.param.attributedstring";
          int v17 = (__CFString *)v14;
LABEL_12:
          uint64_t v6 = __OZXGetPublishedSettingDictionary(a3, v13, &v16->isa, v17, 0, a4);

          PCString::~PCString(&v19);
          return v6;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      int v17 = PCString::ns_str(&v19);
      char v15 = 0;
      uint64_t v16 = @"effect.param.string";
      goto LABEL_12;
    }
    return 0;
  }
  return v6;
}

void *__OZXGetPublishedSettingForOZChannelColorNoAlpha(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a2 && *(void *)a1)
  {
    if ((*(unsigned char *)(a5 + 12) & 1) != 0 && *(void *)(*(void *)a1 + 24))
    {
      PCColor::PCColor(&v14);
      (*(void (**)(uint64_t, uint64_t, PCColor *, double))(*(void *)a2 + 824))(a2, a5, &v14, 0.0);
      uint64_t v13 = 0;
      float v12 = 0.0;
      PCColor::getColorSpace(&v14, &v11);
      PCColor::getRGB(&v14, (float *)&v13 + 1, (float *)&v13, &v12, (const PCColorSpaceHandle *)&v11);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
      uint64_t v6 = __OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamCol.isa, [MEMORY[0x1E4F428B8] colorWithRed:*((float *)&v13 + 1) green:*(float *)&v13 blue:v12 alpha:1.0], 0, a4);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t *__OZXGetPublishedSettingForOZChannelUint32(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0;
    if (this)
    {
      uint64_t v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(void *)(v6 + 24))
        {
          BOOL v9 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", OZChannel::getValueAsUint(this, a5, 0.0));
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamUin.isa, v9, 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelDouble(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0;
    if (this)
    {
      uint64_t v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(void *)(v6 + 24))
        {
          OZChannel::getValueAsDouble(this, a5, 0.0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamDou.isa, objc_msgSend(NSNumber, "numberWithDouble:"), 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelScale(uint64_t *result, uint64_t a2, NSString *a3, NSString *a4, CMTime *a5)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = 0;
    if (a2)
    {
      uint64_t v7 = *v6;
      if (v7)
      {
        if ((a5->flags & 1) != 0 && *(void *)(v7 + 24))
        {
          OZChannel::getValueAsDouble((OZChannel *)(a2 + 136), a5, 0.0);
          double v12 = v11;
          OZChannel::getValueAsDouble((OZChannel *)(a2 + 288), a5, 0.0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamDou.isa, [NSNumber numberWithDouble:v12], 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void *__OZXGetPublishedSettingForOZChannelShape(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, long long *a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  if (!a2 || !*(void *)a1) {
    return v5;
  }
  if ((*((unsigned char *)a5 + 12) & 1) == 0 || !*(void *)(*(void *)a1 + 24)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 856);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v21);
  long long v21 = *a5;
  uint64_t v22 = *((void *)a5 + 2);
  CMTime v18 = 0;
  PCString v19 = 0;
  uint64_t v20 = 0;
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  OZShape::getSamples(v9, (uint64_t)&v21, (char *)&v18, (char *)&__p);
  int v10 = __p;
  if (v19 == v18 || (v19 - (unsigned char *)v18) >> 3 != (v16 - (unsigned char *)__p) >> 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    double v11 = (NSArray *)objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:");
    if (v19 != v18)
    {
      unint64_t v12 = 0;
      if ((unint64_t)((v19 - (unsigned char *)v18) >> 3) <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = (v19 - (unsigned char *)v18) >> 3;
      }
      do
      {
        if (v12 >= (v19 - (unsigned char *)v18) >> 3 || v12 >= (v16 - (unsigned char *)__p) >> 3) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        -[NSArray addObject:](v11, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", *((double *)v18 + v12), *((double *)__p + v12)));
        ++v12;
      }
      while (v13 != v12);
    }
    uint64_t v5 = __OZXGetPublishedSettingDictionary(a3, 0, &cfstr_EffectParamPoi.isa, 0, v11, a4);
    int v10 = __p;
  }
  if (v10)
  {
    uint64_t v16 = v10;
    operator delete(v10);
  }
  if (v18)
  {
    PCString v19 = v18;
    operator delete(v18);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
  return v5;
}

uint64_t __OZXAddPublishedSettingsToArray(uint64_t result, void *a2, OZChannelBase *this, uint64_t a4, uint64_t a5)
{
  if (result && a2 && this && *a2 && (*(unsigned char *)(a5 + 12) & 1) != 0) {
    OZChannelBase::getRef(this, 1);
  }
  return result;
}

uint64_t __OZXGetPublishedSettings(void *a1, char a2, CMTime *a3, BOOL a4, CMTime *a5)
{
  if (!a1) {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  uint64_t v6 = *(void *)(*a1 + 24);
  if (!v6) {
    return 0;
  }
  uint64_t v9 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:21];
  int v10 = *(OZChannelBase ****)(v6 + 864);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v9;
  unint64_t v12 = *v10;
  if (*v10 != v10[1])
  {
    long long v21 = (OZPublishSettings *)(v6 + 720);
    while (1)
    {
      uint64_t v13 = *v12;
      if ((a2 & 1) == 0) {
        break;
      }
      if (v13) {
        goto LABEL_14;
      }
LABEL_18:
      if (++v12 == v10[1]) {
        return v11;
      }
    }
    BOOL v14 = OZChannelBase::testFlag(*v12, 2);
    if (v13) {
      char v15 = v14;
    }
    else {
      char v15 = 1;
    }
    if (v15) {
      goto LABEL_18;
    }
LABEL_14:
    if (v16)
    {
      uint64_t v17 = (OZChannelBase *)v16;
      CMTime v18 = PCString::ns_str(v16 + 4);
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v21, v17);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v13)
        {
          long long v22 = *(_OWORD *)&a3->value;
          CMTimeEpoch epoch = a3->epoch;
          __OZXAddPublishedSettingsToArray(v11, a1, TargetChannelForProxy, (uint64_t)v18, (uint64_t)&v22);
        }
      }
    }
    goto LABEL_18;
  }
  return v11;
}

uint64_t OZXGetPublishedSettings(void *a1)
{
  uint64_t v2 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  OZXGetPosterFrameTime(a1, &v7);
  if (v3 || (v7.flags & 1) == 0) {
    CMTime v7 = *v2;
  }
  CMTime v6 = v8;
  CMTime v5 = v7;
  return __OZXGetPublishedSettings(a1, 0, &v6, 1, &v5);
}

uint64_t OZXGetPublishedSetting(void *a1, PCString *a2, CMTime *a3, char a4)
{
  CMTime v15 = *a3;
  CMTime v16 = v15;
  CMTime v5 = (void *)__OZXGetPublishedSettings(a1, a4, &v16, 0, &v15);
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x3052000000;
  unint64_t v12 = __Block_byref_object_copy__17;
  uint64_t v13 = __Block_byref_object_dispose__17;
  uint64_t v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = *(void *)"";
  v8[2] = ___Z22OZXGetPublishedSettingPvR8PCString6CMTimeb_block_invoke;
  v8[3] = &unk_1E616DF40;
  v8[4] = &v9;
  v8[5] = a2;
  [v5 enumerateObjectsUsingBlock:v8];
  uint64_t v6 = v10[5];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1B7CF4A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

uint64_t ___Z22OZXGetPublishedSettingPvR8PCString6CMTimeb_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = -[__CFString isEqualToString:](PCString::ns_str(*(PCString **)(a1 + 40)), "isEqualToString:", [a2 objectForKeyedSubscript:@"PVEffectParam_NameKey"]);
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
    *a4 = 1;
  }
  return result;
}

uint64_t OZXSetPublishedSettings(uint64_t *a1, void *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 7;
  }
  unsigned int v67 = 11;
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 7;
  }
  CMTime v5 = *(OZNotificationManager **)(*(void *)(v3 + 1584) + 168);
  if (v5) {
    OZNotificationManager::processNotifications(v5);
  }
  uint64_t v6 = *(void *)(v3 + 864);
  if (!v6) {
    return 11;
  }
  v52 = (OZDocument **)v3;
  CMTime v7 = *(OZChannelBase ***)v6;
  if (*(void *)v6 != *(void *)(v6 + 8))
  {
    uint64_t v53 = v6;
    do
    {
      CMTime v8 = *v7;
      if (*v7) {
      else
      }
        uint64_t v56 = 0;
      v54 = v7;
      int v55 = v8;
      BOOL v9 = OZChannelBase::testFlag(v8, 2);
      if (v56) {
        char v10 = v9;
      }
      else {
        char v10 = 1;
      }
      if ((v10 & 1) == 0)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        uint64_t v11 = [a2 countByEnumeratingWithState:&v63 objects:v68 count:16];
        if (v11)
        {
          uint64_t v12 = *(void *)v64;
          do
          {
            uint64_t v13 = 0;
            do
            {
              if (*(void *)v64 != v12) {
                objc_enumerationMutation(a2);
              }
              CFStringRef v14 = *(const __CFString **)(*((void *)&v63 + 1) + 8 * v13);
              v62.var0 = 0;
              PCString::set(&v62, v14);
              if (!PCString::compare(&v56->var4, &v62))
              {
                TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v52 + 90), v56);
                CMTime v16 = TargetChannelForProxy;
                if (TargetChannelForProxy)
                {
                  if (TargetChannelForProxy != v55)
                  {
                    OZXSetValueForChannel(TargetChannelForProxy, (uint64_t)v14, a2, &v67);
                    if (v17)
                    {
                      CMTime v18 = v17;
                      int v19 = objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "intValue");
                      (*(void (**)(void *, void, void, double))(*(void *)v18 + 712))(v18, MEMORY[0x1E4F1FA48], 0, (double)v19);
                      unsigned int v67 = 0;
                    }
                    if (v20)
                    {
                      long long v21 = v20;
                      unsigned int Tag = objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "unsignedIntValue");
                      if (Tag < OZChannelEnum::getNumberOfStrings(v21))
                      {
                        if (*((void *)v21 + 22) != *((void *)v21 + 21)) {
                          unsigned int Tag = OZChannelEnum::getTag(v21, Tag);
                        }
                        (*(void (**)(OZChannelEnum *, void, void, double))(*(void *)v21 + 712))(v21, MEMORY[0x1E4F1FA48], 0, (double)Tag);
                        unsigned int v67 = 0;
                      }
                    }
                    if (v23)
                    {
                      float v24 = v23;
                      CFStringRef v25 = (const __CFString *)[a2 valueForKeyPath:v14];
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        v61.var0 = 0;
                        PCString::set(&v61, v25);
                        (*(void (**)(void *, PCString *, uint64_t, uint64_t))(*(void *)v24 + 864))(v24, &v61, 1, 1);
                        PCString::~PCString(&v61);
                      }
                      unsigned int v67 = 0;
                    }
                    if (v26)
                    {
                      unint64_t v27 = v26;
                      double v59 = 0.0;
                      double v60 = 0.0;
                      double v58 = 0.0;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "getRed:green:blue:alpha:", &v60, &v59, &v58, 0);
                      DeviceRGB = CGColorSpaceCreateDeviceRGB();
                      float v29 = v60;
                      float v30 = v59;
                      float v31 = v58;
                      PCColor::PCColor(&v57, v29, v30, v31, 1.0, DeviceRGB);
                      (*(void (**)(void *, void, PCColor *, void))(*(void *)v27 + 840))(v27, MEMORY[0x1E4F1FA48], &v57, 0);
                      CGColorSpaceRelease(DeviceRGB);
                      unsigned int v67 = 0;
                      PCCFRef<CGColorSpace *>::~PCCFRef(&v57.var1._obj);
                    }
                    if (v32)
                    {
                      uint64_t v33 = v32;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, void, void))(*(void *)v33 + 712))(v33, MEMORY[0x1E4F1FA48], 0);
                      unsigned int v67 = 0;
                    }
                    if (v34)
                    {
                      uint64_t v35 = v34;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      OZChannel2D::setValue(v35, MEMORY[0x1E4F1FA48], v36, v36);
                      unsigned int v67 = 0;
                    }
                    if (v37)
                    {
                      uint64_t v38 = v37;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, void, void))(*(void *)v38 + 712))(v38, MEMORY[0x1E4F1FA48], 0);
                      unsigned int v67 = 0;
                    }
                    if (v39)
                    {
                      double v40 = v39;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, void, void))(*(void *)v40 + 712))(v40, MEMORY[0x1E4F1FA48], 0);
                      unsigned int v67 = 0;
                    }
                    if (v41)
                    {
                      double v42 = v41;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, void, void))(*(void *)v42 + 712))(v42, MEMORY[0x1E4F1FA48], 0);
                      unsigned int v67 = 0;
                    }
                    if (v43)
                    {
                      unint64_t v44 = v43;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, void, void))(v44[55] + 712))(v44 + 55, MEMORY[0x1E4F1FA48], 0);
                      unsigned int v67 = 0;
                    }
                    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v16);
                    if (ObjectManipulator)
                    {
                      if (v46)
                      {
                        v47 = v46;
                        if (*((OZChannelBase **)v46 + 136) == v16)
                        {
                          uint64_t CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)v46);
                          if (CurrentSnapshot) {
                            OZRigWidget::setActiveSnapshot(v47, *(_DWORD *)(CurrentSnapshot + 32), 1);
                          }
                        }
                      }
                    }
                  }
                }
              }
              PCString::~PCString(&v62);
              ++v13;
            }
            while (v11 != v13);
            uint64_t v49 = [a2 countByEnumeratingWithState:&v63 objects:v68 count:16];
            uint64_t v11 = v49;
          }
          while (v49);
        }
      }
      CMTime v7 = v54 + 1;
    }
    while (v54 + 1 != *(OZChannelBase ***)(v53 + 8));
  }
  OZDocument::postNotification(v52[198], 12);
  v50 = (OZNotificationManager *)*((void *)v52[198] + 21);
  if (v50) {
    OZNotificationManager::processNotifications(v50);
  }
  OZScene::dirty((OZScene *)v52);
  return v67;
}

uint64_t OZXSetDuration(void *a1, const CMTime *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  memset(&v26, 0, sizeof(v26));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v2 + 336), (__n128 *)&time1);
  CMTime v24 = *(CMTime *)(v2 + 1352);
  CMTime v22 = *(CMTime *)(v2 + 1376);
  PC_CMTimeSaferAdd(&v24, &v22, (uint64_t)&v20);
  CMTime v24 = v20;
  CMTime v22 = time1;
  PC_CMTimeSaferSubtract(&v24, &v22, (uint64_t)&v26);
  OZScene::begin((OZScene *)v2, (uint64_t)&v24);
  v4.n128_f64[0] = OZScene::end_sel((OZScene *)v2, (uint64_t)&v22);
  while (v24.value != v22.value)
  {
    if (v24.value != v24.epoch)
    {
      CMTime v5 = *(void **)(v24.value + 16);
      if (v5)
      {
        (*(void (**)(CMTime *__return_ptr, void, __n128))(*v5 + 1128))(&v20, *(void *)(v24.value + 16), v4);
        CMTime time1 = v20;
        CMTime time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
        CMTime time1 = v27;
        CMTime time2 = v26;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CMTime time1 = v20;
          CMTime v19 = *a2;
          (*(void (**)(void *, CMTime *, void))(*v5 + 1136))(v5, &time1, 0);
        }
        for (uint64_t i = (void *)v5[126]; i != v5 + 125; uint64_t i = (void *)i[1])
        {
          uint64_t v7 = i[2];
          (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v7 + 608))(&time1, v7);
          CMTime time2 = time1;
          CMTime v27 = v19;
          PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v17);
          CMTime time2 = v17;
          CMTime v27 = v26;
          if ((CMTimeCompare(&time2, &v27) & 0x80000000) == 0)
          {
            CMTime time2 = time1;
            long long v15 = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v7 + 56), (const PCTimeRange *)&time2, 0);
          }
        }
        CMTime v8 = v5 + 122;
        for (j = (void *)v5[123]; j != v8; j = (void *)j[1])
        {
          uint64_t v10 = j[2];
          (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v10 + 592))(&time1, v10);
          CMTime time2 = time1;
          CMTime v27 = v19;
          PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v17);
          CMTime time2 = v17;
          CMTime v27 = v26;
          if ((CMTimeCompare(&time2, &v27) & 0x80000000) == 0)
          {
            CMTime time2 = time1;
            long long v15 = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v10 + 88), (const PCTimeRange *)&time2, 0);
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(&v24);
  }
  *(_OWORD *)&v20.value = *(_OWORD *)(v2 + 1352);
  CMTimeEpoch v12 = *(void *)(v2 + 1368);
  *(_OWORD *)&v21.value = *(_OWORD *)&a2->value;
  CMTimeEpoch v13 = a2->epoch;
  v20.CMTimeEpoch epoch = v12;
  v21.CMTimeEpoch epoch = v13;
  OZScene::setTimeRange((OZScene *)v2, (const PCTimeRange *)&v20);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return 0;
}

void sub_1B7CF598C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v37 - 192);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF5968);
}

uint64_t OZXSetCameraQuaternion(uint64_t *a1, const CMTime *a2, double *a3)
{
  if (!a1) {
    return 7;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 7;
  }
  __n128 v4 = *(OZScene **)(v3 + 24);
  if (!v4) {
    return 7;
  }
  unsigned int ActiveCamera = OZScene::getActiveCamera(*(OZScene **)(v3 + 24), a2);
  Node = OZScene::getNode(v4, ActiveCamera);
  if (!Node) {
    return 11;
  }
  if (!v8) {
    return 11;
  }
  BOOL v9 = v8;
  uint64_t v10 = (OZChannelBase *)*((void *)v4 + 188);
  if (v10) {
    OZChannelBase::setRangeName(v10, (const PCString *)1);
  }
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v19, a3);
  memset(v14, 0, sizeof(v14));
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  int v15 = 4;
  PCMatrix44Tmpl<double>::getTransformation((long long *)&v19, (uint64_t)v14);
  long long v12 = v16;
  uint64_t v13 = v17;
  OZTransformNode::setRotation(v9, (uint64_t)&v12);
  return 0;
}

uint64_t OZXFindFilter(uint64_t a1, const PCString *a2, void *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  OZScene::begin(*(OZScene **)(*(void *)a1 + 24), (uint64_t)v16);
  OZScene::end_sel(v3, (uint64_t)v14);
  uint64_t v6 = 11;
  while (v16[0] != v14[0])
  {
    if (v16[0] != v16[2])
    {
      uint64_t v7 = *(void *)(v16[0] + 16);
      if (v7)
      {
        uint64_t v8 = v7 + 976;
        for (uint64_t i = *(void *)(v7 + 984); i != v8; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v10 = *(void *)(i + 16);
          InternalName = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v10 + 48));
          if (!PCString::compare(InternalName, a2))
          {
            if (v10) {
            else
            }
              long long v12 = 0;
            uint64_t v6 = 0;
            *a3 = v12;
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v16);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v17);
  return v6;
}

void sub_1B7CF5CC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF5CA0);
}

uint64_t OZXEquirectProjectFilterSetFrontFacing(void *a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  CFStringRef v14 = 0;
  PCString::PCString(&v13, "SelfieEffectUsesCameraFacing");
  CFComparisonResult v6 = __OZXGetPublishedChannel(a1, &v13, &v14);
  PCString::~PCString(&v13);
  if (!v6)
  {
    uint64_t v7 = (OZPublishSettings *)(v4 + 720);
    uint64_t v8 = v14;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v7, (OZChannelBase *)v14);
    if (TargetChannelForProxy) {
      BOOL v10 = TargetChannelForProxy == (OZChannelBase *)v8;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (v11) {
        (*(void (**)(void *, void, void, double))(*(void *)v11 + 712))(v11, MEMORY[0x1E4F1FA48], 0, (double)a3);
      }
    }
  }
  return v6;
}

void sub_1B7CF5E28(void *a1)
{
}

uint64_t OZXEquirectProjectFilterSetQuaternion(void *a1, double a2, double a3, double a4, double a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (OZPublishSettings *)(v6 + 720);
  *(double *)uint64_t v17 = a2;
  *(double *)&v17[1] = a3;
  *(double *)&v17[2] = a4;
  *(double *)&v17[3] = a5;
  uint64_t v9 = MEMORY[0x1E4F1FA48];
  do
  {
    long long v16 = 0;
    PCString::PCString(&v15, off_1E616DF60[v7]);
    CFComparisonResult v10 = __OZXGetPublishedChannel(a1, &v15, &v16);
    PCString::~PCString(&v15);
    if (!v10)
    {
      uint64_t v11 = v16;
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v8, (OZChannelBase *)v16);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != (OZChannelBase *)v11)
        {
          if (v13) {
            (*(void (**)(void *, uint64_t, void, double))(*(void *)v13 + 712))(v13, v9, 0, *(double *)&v17[v7]);
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != 4);
  return v10;
}

void sub_1B7CF5FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B7CF5FB0);
  }
  _Unwind_Resume(exception_object);
}

CFComparisonResult OZXSetSelfieRollRadians(void *a1, double a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  PCString v13 = 0;
  PCString::PCString(&v12, "SelfieDeviceRollAngle");
  CFComparisonResult v5 = __OZXGetPublishedChannel(a1, &v12, &v13);
  PCString::~PCString(&v12);
  if (!v5)
  {
    uint64_t v6 = (OZPublishSettings *)(v3 + 720);
    uint64_t v7 = v13;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v13);
    if (TargetChannelForProxy) {
      BOOL v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v10) {
        (*(void (**)(void *, void, void, double))(*(void *)v10 + 712))(v10, MEMORY[0x1E4F1FA48], 0, a2 / 6.28318531);
      }
    }
  }
  return v5;
}

void sub_1B7CF6160(void *a1)
{
}

uint64_t OZXSetUseRenderCache(void *a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  Node = OZScene::getNode(v3, a2);
  if (!Node) {
    return 11;
  }
  if (!v6) {
    return 11;
  }
  OZElement::cacheRenders(v6, a3);
  return 0;
}

uint64_t OZXClearCachedRender(void *a1, unsigned int a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(OZScene **)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  Node = OZScene::getNode(v2, a2);
  if (!Node) {
    return 11;
  }
  if (!v4) {
    return 11;
  }
  OZElement::clearCachedRender(v4);
  return 0;
}

uint64_t OZXCreateGroupWithGroup(OZDocument **a1, int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (!a1) {
    return 7;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return 7;
  }
  uint64_t v7 = (OZChannelBase **)*((void *)v6 + 3);
  if (!v7) {
    return 7;
  }
  Node = OZScene::getNode(*((OZScene **)v6 + 3), a3);
  if (!Node) {
    return 7;
  }
  if (!v11) {
    return 7;
  }
  PCString v12 = v11;
  PCString v13 = (OZChannelBase *)OZChannelBase::setRangeName(v7[188], (const PCString *)1);
  *a5 = OZChannelBase::getNextUniqueID(v13);
  *(_OWORD *)uint64_t v18 = xmmword_1B8380BF0;
  uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, v18);
  if (OZGroup::is360Group((OZGroup *)v12)) {
    return 11;
  }
  OZScene::addRootNodeBefore((OZScene *)v7, SceneNode, (OZSceneNode *)v12);
  OZTransformNode::setTranslation((OZTransformNode *)SceneNode, 0.0, 0.0, 0.0, MEMORY[0x1E4F1FA48]);
  OZGroup::setDimensionType((uint64_t)SceneNode, a4, 1);
  OZSceneNode::removeFromParent((OZSceneNode *)v12);
  (*(void (**)(OZSceneNode *, char *, void))(*(void *)SceneNode + 992))(SceneNode, v12, 0);
  __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(v12 + 56), &v19);
  (*(void (**)(OZSceneNode *, __n128 *, void, __n128))(*(void *)SceneNode + 1120))(SceneNode, &v19, 0, TimeOffset);
  (*(void (**)(unsigned int *__return_ptr, char *))(*(void *)v12 + 1128))(v18, v12);
  (*(void (**)(OZSceneNode *, unsigned int *, void))(*(void *)SceneNode + 1136))(SceneNode, v18, 0);
  OZScene::setCurrentObject((OZScene *)v7, SceneNode);
  OZDocument::postNotification(*a1, 60);
  uint64_t v17 = (OZNotificationManager *)*((void *)*a1 + 21);
  if (v17) {
    OZNotificationManager::processNotifications(v17);
  }
  OZScene::dirty((OZScene *)v7);
  return 0;
}

void sub_1B7CF6558(void *a1)
{
}

uint64_t OZXCreateCamera(OZChannelBase *a1, PCString a2, unsigned int *a3)
{
  if (!a1) {
    return 7;
  }
  if (a1->var0)
  {
    uint64_t v3 = (OZScene *)*((void *)a1->var0 + 3);
    if (v3)
    {
      *a3 = OZChannelBase::getNextUniqueID(a1);
      long long v7 = xmmword_1B837FEA0;
      uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v7);
      (*(void (**)(OZSceneNode *, uint64_t, void))(*(void *)SceneNode + 1136))(SceneNode, (uint64_t)v3 + 1352, 0);
      OZScene::addRootNode(v3, SceneNode);
      CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      OZCamera::cameraAtTime(SceneNode, &v6);
    }
  }
  return 7;
}

void sub_1B7CF67DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF67BCLL);
}

uint64_t OZXSetCameraTransform(uint64_t a1, int a2, long long *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  CMTime v6 = (OZChannelBase *)*((void *)v3 + 188);
  if (v6) {
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  }
  memset(v11, 0, sizeof(v11));
  int v12 = 4;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  *(void *)&v9._isIntroOptional = 0x3FF0000000000000;
  v9._pBuildInEnableChan = 0;
  v9._pBuildOutEnableChan = 0;
  uint64_t v10 = 0;
  if (!PCMatrix44Tmpl<double>::getTransformation(a3, (uint64_t)v11, (double *)&v9._isIntroOptional)) {
    return 11;
  }
  OZSceneCamera::OZSceneCamera((OZSceneCamera *)&v9, v3, a2);
  LiRenderingTechnology::setRasterizeEdges((uint64_t)&v9, 0);
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  METimeRemap::setOutroDuration(&v9, &v8);
  OZSceneCamera::setTranslation((uint64_t)&v9, (double *)v11);
  OZSceneCamera::setRotation((uint64_t)&v9, (double *)&v9._isIntroOptional);
  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v9);
  return 0;
}

uint64_t OZXGetCameraTransform(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  CFComparisonResult v5 = *(OZScene **)(*(void *)a1 + 24);
  if (!v5) {
    return 7;
  }
  OZSceneCamera::OZSceneCamera((OZSceneCamera *)&v24, v5, a2);
  LiRenderingTechnology::setRasterizeEdges(v6, 0);
  CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  METimeRemap::setOutroDuration(&v24, &v23);
  unint64_t v20 = 0;
  double v21 = 0.0;
  double v22 = 0.0;
  OZSceneCamera::getTranslation((uint64_t)&v24, (uint64_t)&v20);
  v19[0] = 1.0;
  memset(&v19[1], 0, 24);
  OZSceneCamera::getRotation((uint64_t)&v24, v19);
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  v12[5] = 0x3FF0000000000000;
  v12[0] = 0x3FF0000000000000;
  memset(&v12[1], 0, 32);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  __n128 v7 = PCMatrix44Tmpl<double>::leftRotate((long long *)v12, v19);
  v7.n128_u64[0] = v20;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v12, (float64x2_t)v7, v21, v22);
  if (v12 != a3)
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      METimeRemap v9 = &a3[i];
      long long v10 = *(_OWORD *)&v12[i + 2];
      _OWORD *v9 = *(_OWORD *)&v12[i];
      v9[1] = v10;
    }
  }
  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v24);
  return 0;
}

void sub_1B7CF6A90(void *a1)
{
  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)(v1 - 104));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF6A70);
}

uint64_t OZXSetCameraProjection(uint64_t a1, unsigned int a2, double *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t v6 = (OZChannelBase *)*((void *)v3 + 188);
  if (v6) {
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  }
  Node = OZScene::getNode(v3, a2);
  if (!Node) {
    return 6;
  }
  if (!v8) {
    return 6;
  }
  METimeRemap v9 = v8;
  OZChannel::getValueAsInt((OZChannel *)(v8 + 6552), MEMORY[0x1E4F1FA48], 0.0);
  long double v10 = atan(1.0 / *a3);
  (*(void (**)(void *, void, void, long double))(v9[851] + 712))(v9 + 851, MEMORY[0x1E4F1FA48], 0, (v10 + v10) * 180.0 / 3.14159265);
  double v11 = a3[10];
  double v12 = a3[11];
  (*(void (**)(void *, void, void, double))(v9[870] + 712))(v9 + 870, MEMORY[0x1E4F1FA48], 0, v12 / v11);
  (*(void (**)(void *, void, void, double))(v9[889] + 712))(v9 + 889, MEMORY[0x1E4F1FA48], 0, -v12 / (-1.0 - v11));
  return 0;
}

void sub_1B7CF6CB0(void *a1)
{
}

uint64_t OZXGetCameraLocalToClipMatrix(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(OZScene **)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  Node = OZScene::getNode(v2, a2);
  if (Node)
  {
    if (v4)
    {
      CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      OZCamera::cameraAtTime(v4, &v6);
    }
  }
  return 6;
}

void sub_1B7CF6E2C(void *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF6E18);
}

uint64_t getCameraWorldUnitScale(void *a1, unsigned int a2, double *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  Node = OZScene::getNode(v3, a2);
  if (Node)
  {
    if (v5)
    {
      CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      OZCamera::cameraAtTime(v5, &v8);
    }
  }
  return 6;
}

void sub_1B7CF6F9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF6F68);
}

uint64_t OZXGetCameraWorldUnitScaleIgnoringAspect(void *a1, unsigned int a2, double *a3)
{
  return getCameraWorldUnitScale(a1, a2, a3);
}

uint64_t OZXEnableCamera(void *a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  CMTime v6 = (OZChannelBase *)*((void *)v3 + 188);
  if (v6) {
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  }
  Node = OZScene::getNode(v3, a2);
  if (!Node) {
    return 6;
  }
  if (!v8) {
    return 6;
  }
  if (a3) {
    OZCamera::enable(v8);
  }
  else {
    (*(void (**)(void))(*((void *)v8 + 2) + 40))();
  }
  return 0;
}

void sub_1B7CF70DC(void *a1)
{
}

uint64_t OZXGetIsCameraEnabled(void *a1, unsigned int a2, BOOL *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  Node = OZScene::getNode(v3, a2);
  if (!Node) {
    return 6;
  }
  if (!v6) {
    return 6;
  }
  char v7 = (*(uint64_t (**)(void))(v6[2] + 24))();
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

void sub_1B7CF71C4(void *a1)
{
}

uint64_t OZXSetImageElementFootage(uint64_t *a1, unsigned int a2, char *a3, OZChannelObjectRoot *a4, int a5)
{
  v50[3] = *(CGColorSpace **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return 7;
  }
  char v7 = *(OZDocument ***)(v6 + 24);
  if (!v7) {
    return 7;
  }
  Object = (const void *)OZScene::getObject(*(OZScene **)(v6 + 24), a2);
  if (!Object) {
    return 11;
  }
  uint64_t v13 = 11;
  if (a3)
  {
    long long v14 = v12;
    if (v12)
    {
      if (*a3)
      {
        uint64_t v15 = PCURL::PCURL((PCURL *)&v43, a3, 0);
        double v42 = 0;
        Instance = (PMMediaManager *)PMMediaManager::getInstance(v15);
        if (PMMediaManager::open(Instance, &v43, &v42, 0)) {
          goto LABEL_36;
        }
        PCSharedCount::PCSharedCount((PCSharedCount *)v49);
        v50[0] = 0;
        if (PMClip::getVideoDescription((uint64_t)v42, __dst))
        {
          PMClip::close(v42);
          if (v42)
          {
            PMClip::~PMClip(v42);
            MEMORY[0x1BA9BFBA0]();
          }
          char v17 = 0;
        }
        else
        {
          PCURL::getShortFilename(&v43, (PCString *)&time1);
          OZChannelBase::getNextUniqueID(v19);
          *(_OWORD *)&v39.int64_t value = xmmword_1B83804B0;
          uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v39);
          PCString::~PCString((PCString *)&time1);
          if (SceneNode)
          {
            memset(&v41, 0, sizeof(v41));
            CMTimeMake(&v41, value, (int)v48);
            LODWORD(v21) = value;
            CMTimeMakeWithSeconds(&v39, (double)v21 / v48, 0x40000);
            CMTime v41 = v39;
            CMTime time = v39;
            CMTimeConvertScale(&v39, &time, (int)v48, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            CMTime v41 = v39;
            if (a5) {
              OZXSetDuration(a1, &v41);
            }
            PCSharedCount::PCSharedCount((PCSharedCount *)&v39);
            OZScene::addNode(v7, SceneNode, (PCString *)&v39, 1, 0, 0);
            PCString::~PCString((PCString *)&v39);
            OZFootage::setClip(SceneNode, v42, 1, 1, 0);
            (*(void (**)(CMTime *__return_ptr, OZSceneNode *))(*(void *)SceneNode + 1128))(&v39, SceneNode);
            uint64_t v22 = *((void *)v14 + 120);
            memset(&v38, 0, sizeof(v38));
            CMTime v23 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)v14 + 640))(v14);
            double LoopOffset = OZRetimingUtil::GetLoopOffset(v23, &v38);
            memset(&v37, 0, sizeof(v37));
            uint64_t v25 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *, double))(*(void *)v14 + 640))(v14, LoopOffset);
            OZRetimingUtil::GetMaxLoopOffset(v25, (uint64_t)&v37);
            Footage = OZImageElement::getFootage(v14);
            long long v27 = Footage;
            if (Footage) {
              BOOL v28 = (*(unsigned int (**)(void *))(*(void *)Footage + 1376))(Footage) == 1;
            }
            else {
              BOOL v28 = 0;
            }
            (*(void (**)(OZImageElement *, OZSceneNode *, void, void))(*(void *)v14 + 1448))(v14, SceneNode, 0, 0);
            OZScene::recalcDependencies((OZScene *)v7);
            if (v27 && ((*(uint64_t (**)(void *))(*(void *)v27 + 1336))(v27) & 1) == 0)
            {
              uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v27 + 640))(v27);
              (*(void (**)(void *, uint64_t))(*(void *)v27 + 608))(v27, v29);
            }
            float v30 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(void *)v14 + 640))(v14);
            OZRetimingUtil::SetEndCondition(v30, a4);
            float v31 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)v14 + 640))(v14);
            CMTime time1 = v39;
            OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 42), (__n128 *)&time2);
            OZRetimingUtil::SetTimeOffsetAndExtent(v31, &time1, &v39, &time2, v32);
            if (v22)
            {
              uint64_t v33 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 640))(v22);
              OZChannelObjectRoot::recomputeTimeRangeFromChildren(v33, 1, 1, 1, 1, 0);
            }
            if (a4)
            {
              if (v28 || (time1 = v38, CMTime time2 = v37, !CMTimeCompare(&time1, &time2)))
              {
                v34 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)v14 + 640))(v14);
                uint64_t v35 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)v14 + 640))(v14);
                OZRetimingUtil::GetMaxLoopOffset(v35, (uint64_t)&time1);
                OZRetimingUtil::SetLoopOffset(v34, &time1, v36);
              }
            }
            char v17 = 1;
          }
          else
          {
            PMClip::close(v42);
            if (v42)
            {
              PMClip::~PMClip(v42);
              MEMORY[0x1BA9BFBA0]();
            }
            char v17 = 0;
          }
          uint64_t v13 = 2;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(v50);
        PCString::~PCString(v49);
        if (v17)
        {
LABEL_36:
          PCURL::~PCURL((PCURL *)&v43);
          return 0;
        }
        else
        {
          PCURL::~PCURL((PCURL *)&v43);
        }
      }
    }
  }
  return v13;
}

uint64_t OZXSetStickerPathWithPublishedParam(void *a1, PCString *a2, PCString *a3)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v33);
  if (!a1 || !*(void *)a1) {
    goto LABEL_23;
  }
  if (PCString::empty(a3))
  {
    uint64_t v6 = 11;
    goto LABEL_24;
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  if (!v7)
  {
LABEL_23:
    uint64_t v6 = 7;
    goto LABEL_24;
  }
  uint64_t v32 = 0;
  uint64_t v6 = __OZXGetPublishedChannel(a1, a2, &v32);
  if (!v6)
  {
    CMTime v8 = v32;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v7 + 720), (OZChannelBase *)v32);
    uint64_t v6 = 0;
    if (TargetChannelForProxy)
    {
      if (TargetChannelForProxy != (OZChannelBase *)v8)
      {
        if (v10 {
          && (ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10)) != 0
        }
        {
          if (v6)
          {
            PCString::PCString(&v31, a3);
            PCURL::PCURL((PCURL *)v30, &v31, 0);
            unsigned int v13 = *(_DWORD *)(v6 + 80);
            CStr = PCString::createCStr(a3);
            uint64_t v6 = OZXSetImageElementFootage((uint64_t *)a1, v13, CStr, (OZChannelObjectRoot *)1, 1);
            if (!v6)
            {
              long long v28 = *(_OWORD *)(v7 + 1376);
              uint64_t v29 = *(void *)(v7 + 1392);
              uint64_t v15 = *(void *)(v7 + 1136);
              uint64_t v18 = *(uint64_t ***)(v15 + 8);
              char v17 = (uint64_t **)(v15 + 8);
              long long v16 = v18;
              if (v18 != v17 + 1)
              {
                while (*((_DWORD *)v16 + 27) != 7)
                {
                  __n128 v19 = v16[1];
                  if (v19)
                  {
                    do
                    {
                      unint64_t v20 = (uint64_t **)v19;
                      __n128 v19 = (uint64_t *)*v19;
                    }
                    while (v19);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v20 = (uint64_t **)v16[2];
                      BOOL v21 = *v20 == (uint64_t *)v16;
                      long long v16 = v20;
                    }
                    while (!v21);
                  }
                  long long v16 = v20;
                  if (v20 == v17 + 1) {
                    goto LABEL_27;
                  }
                }
                uint64_t v23 = (uint64_t)(v16 + 4);
                OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v25, (const OZTimeMarker *)(v16 + 4));
                long long v26 = v28;
                uint64_t v27 = v29;
                METimeRemap v24 = std::__tree<OZTimeMarker>::find<OZTimeMarker>((uint64_t)v17, v23);
                std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v17, v24);
                (*(void (**)(void))v24[4])();
                operator delete(v24);
                std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v17, (uint64_t)&v25, (const OZTimeMarker *)&v25);
                OZTimeMarker::~OZTimeMarker(&v25);
              }
LABEL_27:
              uint64_t v6 = 0;
            }
            PCURL::~PCURL((PCURL *)v30);
            PCString::~PCString(&v31);
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
    }
  }
LABEL_24:
  PCAutoreleasePool::~PCAutoreleasePool(&v33);
  return v6;
}

void sub_1B7CF7C04(void *a1)
{
  PCURL::~PCURL((PCURL *)(v1 - 80));
  PCString::~PCString((PCString *)(v1 - 72));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7CF795CLL);
}

void sub_1B7CF7C58(_Unwind_Exception *a1)
{
  PCAutoreleasePool::~PCAutoreleasePool((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t OZXIsUsingSubstituteFont(uint64_t a1, BOOL *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v5 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v5);
  if (a2 && !result)
  {
    if (v5)
    {
      char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

void sub_1B7CF7CF0(void *a1)
{
}

uint64_t OZXTranscriptionGetLineCount(uint64_t a1, unsigned int *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v5 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v5);
  if (a2 && !result)
  {
    if (v5)
    {
      unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

void sub_1B7CF7D80(void *a1)
{
}

uint64_t OZXTranscriptionSetShouldDisableFadeOut(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t result = __OZXGetTranscriptionDelegate(a1, &v4);
  if (!result)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 96))(v4, a2);
      return 0;
    }
  }
  return result;
}

void sub_1B7CF7E00(void *a1)
{
}

void *OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    unsigned int v13 = v4;
    long long v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    unsigned int v13 = v4;
    long long v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  uint64_t v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      long long v14 = v4;
      METimeRemap v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      long double v10 = v9 + 3;
      if (!v9) {
        long double v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        double v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

void sub_1B7CF8514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1B7CF89AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCString a12)
{
}

void sub_1B7CF91A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,PCString a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a61, (void *)a62);
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

void sub_1B7CF9BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

void OZImageMask::OZImageMask(OZImageMask *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(void *)this = &unk_1F11621E8;
  *((void *)this + 2) = &unk_1F1162730;
  *((void *)this + 6) = &unk_1F1162988;
  *((void *)this + 136) = &unk_1F11629E0;
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Source");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120), &v7, (OZChannelFolder *)((char *)this + 448), 0x64u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Color Channel Choices");
  PCURL::PCURL((PCURL *)&v6, @"Channel Mask Color Channel");
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2704), 3u, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Blend Mode Enum");
  PCURL::PCURL((PCURL *)&v6, @"Channel Mask Blend Mode");
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2960), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Invert");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3216), &v7, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Stencil Mode");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3368), 1, &v7, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Stretch");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3520), &v7, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0, 0);
  PCString::~PCString(&v7);
  *((unsigned char *)this + 3672) = 0;
  (*(void (**)(OZImageMask *))(*(void *)this + 1040))(this);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 1120), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1120));
  PCURL::PCURL((PCURL *)&v7, @"Channel Mask Image");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1256), &v7, 0);
  PCString::~PCString(&v7);
  *((void *)this + 460) = 0;
}

void sub_1B7CFA064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v19);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelBase::setRangeName(v13, v21);
  OZSceneNode::~OZSceneNode(v12);
  _Unwind_Resume(a1);
}

void OZImageMask::OZImageMask(OZImageMask *this, const OZImageMask *a2, char a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(void *)this = &unk_1F11621E8;
  *((void *)this + 2) = &unk_1F1162730;
  *((void *)this + 6) = &unk_1F1162988;
  *((void *)this + 136) = &unk_1F11629E0;
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120), (const OZImageMask *)((char *)a2 + 1120), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2704), (const OZImageMask *)((char *)a2 + 2704), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2960), (const OZImageMask *)((char *)a2 + 2960), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3216), (const OZChannelBase *)((char *)a2 + 3216), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3368), (const OZChannelBase *)((char *)a2 + 3368), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3520), (const OZChannelBase *)((char *)a2 + 3520), (OZChannelFolder *)((char *)this + 448));
  *((unsigned char *)this + 3672) = *((unsigned char *)a2 + 3672);
  *((void *)this + 460) = 0;
}

void sub_1B7CFA2D4(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v7);
  OZChannelBool::~OZChannelBool(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v3);
  OZChannelBase::setRangeName(v2, v9);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B7CFA338()
{
}

void sub_1B7CFA340()
{
}

void OZImageMask::~OZImageMask(OZImageMask *this)
{
  *(void *)this = &unk_1F11621E8;
  *((void *)this + 2) = &unk_1F1162730;
  *((void *)this + 6) = &unk_1F1162988;
  uint64_t v2 = (OZChannelBase *)((char *)this + 1088);
  *((void *)this + 136) = &unk_1F11629E0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3520));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3368));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3216));
  OZChannelEnum::~OZChannelEnum((OZImageMask *)((char *)this + 2960));
  OZChannelEnum::~OZChannelEnum((OZImageMask *)((char *)this + 2704));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120));
  OZChannelBase::setRangeName(v2, v3);

  OZSceneNode::~OZSceneNode(this);
}

{
  uint64_t vars8;

  OZImageMask::~OZImageMask(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZImageMask::~OZImageMask(OZImageMask *this)
{
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 48));
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 1088));
}

{
  uint64_t vars8;

  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 1088));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZImageMask::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 1120);
  OZChanSceneNodeRef::operator=(a1 + 1256, (uint64_t)v5 + 1256);
  OZChannelBase::operator=(a1 + 1440, (uint64_t)v5 + 1440);
  OZChannelBase::operator=(a1 + 1592, (uint64_t)v5 + 1592);
  OZChannelPosition::operator=(a1 + 1744, (uint64_t)v5 + 1744);
  OZChannelBase::operator=(a1 + 2448, (uint64_t)v5 + 2448);
  OZChannelBase::operator=(a1 + 2704, (uint64_t)v5 + 2704);
  OZChannelBase::operator=(a1 + 2960, (uint64_t)v5 + 2960);
  OZChannelBase::operator=(a1 + 3216, (uint64_t)v5 + 3216);
  uint64_t result = OZChannelBase::operator=(a1 + 3368, (uint64_t)v5 + 3368);
  *(void *)(a1 + 3680) = 0;
  return result;
}

uint64_t OZImageMask::eval(OZImageMask *this, OZRenderParams *a2)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (!MaskSource) {
    return 0;
  }
  if (!v5) {
    return 0;
  }
  PCString v6 = v5;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v12, a2);
  CMTime v9 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(this, &v9, &v10);
  __n128 v12 = v10;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = v11;
  uint64_t v7 = (*(uint64_t (**)(void *, __n128 *))(*(void *)v6 + 96))(v6, &v12);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v12);
  return v7;
}

void sub_1B7CFA738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

const void *OZImageMask::getMaskSource(OZImageMask *this)
{
  uint64_t result = (const void *)*((void *)this + 460);
  if (!result)
  {
    uint64_t result = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 1256));
    *((void *)this + 460) = result;
    if (!result)
    {
      uint64_t result = (const void *)*((void *)this + 120);
      if (result) {
      *((void *)this + 460) = result;
      }
    }
  }
  return result;
}

double OZImageMask::getMaskSourceTime@<D0>(OZImageMask *this@<X0>, CMTime *a2@<X1>, __n128 *a3@<X8>)
{
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  OZChannelImageWithOptions::getFrame((OZImageMask *)((char *)this + 1120), a2, a3);
  (*(void (**)(CMTime *__return_ptr, OZImageMask *))(*(void *)this + 1128))(&v6, this);
  CMTime v7 = v6;
  CMTime v8 = *(CMTime *)a3->n128_u8;
  PC_CMTimeSaferAdd(&v8, &v7, (uint64_t)&v9);
  double result = v9.n128_f64[0];
  *a3 = v9;
  a3[1].n128_u64[0] = v10;
  return result;
}

uint64_t *OZImageMask::getImageBounds(OZImageMask *a1, uint64_t a2, const OZRenderState *a3)
{
  double result = (uint64_t *)OZImageMask::getMaskSource(a1);
  if (result)
  {
    CMTime v7 = result;
    OZRenderState::OZRenderState(&v17, a3);
    $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a3->var0;
    OZImageMask::getMaskSourceTime(a1, (CMTime *)&var0, &v15);
    *(__n128 *)&v17.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v15;
    v17.var0.var3 = v16;
    uint64_t v8 = *v7;
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, OZRenderState *))(v8 + 16))(v7, a2, &v17);
    }
    else
    {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, OZRenderState *))(v8 + 80))(v7, a2, &v17);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 16) = _Q0;
  }
  return result;
}

uint64_t *non-virtual thunk to'OZImageMask::getImageBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZImageMask::getImageBounds((OZImageMask *)(a1 - 1088), a2, a3);
}

uint64_t OZImageMask::getImageBoundsWithEffects(OZImageMask *a1, uint64_t a2, const OZRenderState *a3)
{
  if ((*(uint64_t (**)(OZImageMask *))(*(void *)a1 + 416))(a1))
  {
    OZRenderState::OZRenderState(&v11, a3);
    $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a3->var0;
    OZImageMask::getMaskSourceTime(a1, (CMTime *)&var0, &v9);
    *(__n128 *)&v11.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v9;
    v11.var0.var3 = v10;
    *(void *)(*(void *)(*((void *)a1 + 122) + 16) + 24) = (char *)a1 + 1088;
    return (*(uint64_t (**)(void, uint64_t, OZRenderState *))(**(void **)(*((void *)a1 + 123) + 16)
                                                                       + 80))(*(void *)(*((void *)a1 + 123) + 16), a2, &v11);
  }
  else
  {
    CMTime v7 = *(uint64_t (**)(OZImageMask *, uint64_t, const OZRenderState *))(*(void *)a1 + 1208);
    return v7(a1, a2, a3);
  }
}

uint64_t non-virtual thunk to'OZImageMask::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZImageMask::getImageBoundsWithEffects((OZImageMask *)(a1 - 1088), a2, a3);
}

uint64_t OZImageMask::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1216))();
}

uint64_t non-virtual thunk to'OZImageMask::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 1088) + 1216))();
}

void OZImageMask::getDimensions(OZImageMask *this, float *a2, float *a3, const OZRenderState *a4)
{
  MaskSource = OZImageMask::getMaskSource(this);
  *a3 = 0.0;
  *a2 = 0.0;
  OZRenderState::OZRenderState(&v12, a4);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a4->var0;
  OZImageMask::getMaskSourceTime(this, (CMTime *)&var0, &v10);
  *(__n128 *)&v12.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v10;
  v12.var0.var3 = v11;
  if (MaskSource) {
    (*(void (**)(const void *, float *, float *, OZRenderState *))(*(void *)MaskSource + 96))(MaskSource, a2, a3, &v12);
  }
}

void non-virtual thunk to'OZImageMask::getDimensions(OZImageMask *this, float *a2, float *a3, const OZRenderState *a4)
{
}

uint64_t OZImageMask::hitCheck()
{
  return 0;
}

__n128 OZImageMask::getNaturalDuration@<Q0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    uint64_t v5 = *(void (**)(void))(v4[2] + 280);
    v5();
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v7 + 16);
  }
  return result;
}

double non-virtual thunk to'OZImageMask::getNaturalDuration@<D0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = OZImageMask::getNaturalDuration((OZImageMask *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

double OZImageMask::getPixelAspectRatioRN(OZImageMask *this)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (!MaskSource) {
    return 1.0;
  }
  if (!v2) {
    return 1.0;
  }
  uint64_t v3 = v2;
  if (v4)
  {
    CMTime v6 = *(void (**)(void *))(*(void *)v4 + 1328);
    v6(v4);
    return result;
  }
  if (!v5) {
    return 1.0;
  }
  uint64_t v8 = *(void (**)(void))(*(void *)v5 + 1368);

  v8();
  return result;
}

double non-virtual thunk to'OZImageMask::getPixelAspectRatioRN(OZImageMask *this)
{
  return OZImageMask::getPixelAspectRatioRN((OZImageMask *)((char *)this - 1088));
}

uint64_t OZImageMask::getNaturalDurationFlags(OZImageMask *this)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (!MaskSource) {
    return 6;
  }
  if (!v2) {
    return 6;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2[2] + 288);

  return v3();
}

uint64_t non-virtual thunk to'OZImageMask::getNaturalDurationFlags(OZImageMask *this)
{
  return OZImageMask::getNaturalDurationFlags((OZImageMask *)((char *)this - 16));
}

unint64_t OZImageMask::isActiveAtTime(OZImageMask *this, CMTime *a2, int a3, int a4, int a5)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    OZRenderState v12 = v11;
    if ((*(unsigned char *)(*((void *)this + 120) + 1024) & 4) != 0) {
      return 0;
    }
  }
  else
  {
    unint64_t result = 0;
    *((unsigned char *)this + 3672) = 0;
    OZRenderState v12 = (unsigned char *)*((void *)this + 120);
    if ((v12[1024] & 4) != 0) {
      return result;
    }
  }
  uint64_t v14 = (*(uint64_t (**)(unsigned char *))(*(void *)v12 + 640))(v12);
  uint64_t v15 = (*(uint64_t (**)(OZImageMask *))(*(void *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v24);
  CMTime v20 = *a2;
  *(__n128 *)&time1.int64_t value = v24;
  time1.CMTimeEpoch epoch = v25;
  PC_CMTimeFloorToSampleDuration(&v20, &time1, (uint64_t)&time2);
  *(_OWORD *)&a2->int64_t value = *(_OWORD *)&time2.value;
  CMTimeEpoch epoch = time2.epoch;
  a2->CMTimeEpoch epoch = time2.epoch;
  *(_OWORD *)&v22.int64_t value = *(_OWORD *)&a2->value;
  v22.CMTimeEpoch epoch = epoch;
  unint64_t result = OZObjectManipulator::isActiveAtTime((OZImageMask *)((char *)this + 16), &v22, a3, a4, a5);
  if (!result) {
    return result;
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v14 + 712))(&v20, v14);
  uint64_t v17 = (*(uint64_t (**)(OZImageMask *))(*(void *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v17 + 336), &v18);
  CMTime time1 = v20;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime time1 = v20;
    CMTime time2 = v21;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v24);
    *(__n128 *)&time1.int64_t value = v24;
    time1.CMTimeEpoch epoch = v25;
    *(__n128 *)&time2.int64_t value = v18;
    time2.CMTimeEpoch epoch = v19;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
    CMTime time1 = *a2;
    CMTime time2 = v23;
    if (CMTimeCompare(&time1, &time2) < 1) {
      return 1;
    }
    if (v21.flags) {
      return (v21.flags >> 4) & 1;
    }
  }
  return 0;
}

unint64_t non-virtual thunk to'OZImageMask::isActiveAtTime(OZImageMask *this, CMTime *a2, int a3, int a4, int a5)
{
  return OZImageMask::isActiveAtTime((OZImageMask *)((char *)this - 16), a2, a3, a4, a5);
}

unint64_t OZImageMask::isActiveInTimeRange(OZImageMask *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    OZRenderState v12 = v11;
    if ((*(unsigned char *)(*((void *)this + 120) + 1024) & 4) != 0) {
      return 0;
    }
  }
  else
  {
    unint64_t result = 0;
    *((unsigned char *)this + 3672) = 0;
    OZRenderState v12 = (unsigned char *)*((void *)this + 120);
    if ((v12[1024] & 4) != 0) {
      return result;
    }
  }
  uint64_t v14 = (*(uint64_t (**)(unsigned char *))(*(void *)v12 + 640))(v12);
  memset(&v18, 0, sizeof(v18));
  uint64_t v15 = (*(uint64_t (**)(OZImageMask *))(*(void *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v18);
  PCTimeRange::getRangeEnclosingWholeFrames(a2, &v18, (uint64_t)v17);
  unint64_t result = OZObjectManipulator::isActiveInTimeRange((OZImageMask *)((char *)this + 16), (const PCTimeRange *)v17, a3, a4, a5);
  if (!result) {
    return result;
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v14 + 712))(v16, v14);
  CMTime v22 = v16[0];
  CMTime time1 = v16[0];
  CMTime time2 = v16[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v21);
  CMTime v20 = v17[0];
  CMTime time1 = v17[0];
  CMTime time2 = v17[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  CMTime time1 = v19;
  CMTime time2 = v22;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    CMTime time1 = v20;
    CMTime time2 = v21;
    return CMTimeCompare(&time1, &time2) < 1;
  }
  return 0;
}

unint64_t non-virtual thunk to'OZImageMask::isActiveInTimeRange(OZImageMask *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  return OZImageMask::isActiveInTimeRange((OZImageMask *)((char *)this - 16), a2, a3, a4, a5);
}

void OZImageMask::allowDrag(OZImageMask *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (lpsrc)
  {
    BOOL v16 = v14 != 0;
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v15 = 0;
  }
  BOOL v18 = (OZChannelBase *)(*(uint64_t (**)(OZImageMask *))(*(void *)this + 640))(this) != a3
     || !v16
     || v15 == 0;
  if (!v18
    && (uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v15 + 272))(v15),
        v19 == (*(uint64_t (**)(OZImageMask *))(*(void *)this + 272))(this)))
  {
    *a6 = 1;
    *a5 = a4 & 8;
  }
  else
  {
    OZSceneNode::allowDrag(this, lpsrc, a3, a4, a5, a6, a7);
  }
}

void non-virtual thunk to'OZImageMask::allowDrag(OZImageMask *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

uint64_t OZImageMask::performDragOperation(OZChannelBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  if (lpsrc)
  {
  }
  else
  {
    uint64_t v15 = 0;
    BOOL v16 = 0;
  }
  BOOL v18 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))this->var0 + 80))(this) != a3
     || v15 == 0
     || v16 == 0;
  if (!v18
    && (uint64_t v19 = (*(uint64_t (**)(void *))(*v16 + 272))(v16),
        uint64_t v20 = (*((uint64_t (**)(OZChannelBase *))this->var0 + 34))(this),
        a5 == 1)
    && v19 == v20)
  {
    PCSharedCount::PCSharedCount(&v24);
    OZChannelBase::addToUndo(this + 10, (const PCString *)&v24);
    PCString::~PCString((PCString *)&v24);
    OZChanElementOrFootageRef::setImageNode((OZChanElementOrFootageRef *)&this[11].var3, v15);
    (*((void (**)(OZChannelBase *))this->var0 + 62))(this);
    (*(void (**)(void *, void))(v16[2] + 40))(v16 + 2, 0);
    var9 = (OZDocument **)this[8].var9;
    if (var9) {
      OZDocument::postNotification(var9[198], 8);
    }
    return 1;
  }
  else
  {
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B7CFB968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZImageMask::performDragOperation(OZImageMask *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZImageMask::performDragOperation((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZImageMask::parseEnd(OZImageMask *this, PCSerializerReadStream *a2)
{
  if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1256), MEMORY[0x1E4F1FA48], 0.0)) {
    *((unsigned char *)this + 3672) = 1;
  }
  if (*((void *)this + 124)) {
    *(void *)(*(void *)(*((void *)this + 122) + 16) + 24) = (char *)this + 1088;
  }
  return 1;
}

uint64_t non-virtual thunk to'OZImageMask::parseEnd(OZImageMask *this, PCSerializerReadStream *a2)
{
  return 1;
}

void OZImageMask::makeRender(OZImageMask *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
  uint64_t v4 = (const void *)*((void *)this + 120);
  if (v4)
  {
    if (v5) {
      (*(void (**)(void *, OZRenderParams *))(*(void *)v5 + 2008))(v5, a2);
    }
  }
  operator new();
}

void sub_1B7CFBB3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C401B86770FLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZImageMask::makeRender(OZImageMask *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

uint64_t OZImageMask::openMedia(OZImageMask *this)
{
  MaskSource = OZImageMask::getMaskSource(this);
  if (!MaskSource) {
    return 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (!v4)
  {
    uint64_t v4 = v5;
    if (!v5) {
      return 0;
    }
  }
  CMTime v6 = *(uint64_t (**)(void *))(*(void *)v4 + 104);

  return v6(v4);
}

uint64_t OZImageMask::prerollBegin(OZImageMask *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    OZRenderState v12 = v11;
    if (v11)
    {
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    OZRenderState v12 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v19, a2);
  __n128 v17 = 0uLL;
  uint64_t v18 = 0;
  CMTime v16 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(a1, &v16, &v17);
  __n128 v19 = v17;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = v18;
  if (v12 || (OZRenderState v12 = v13) != 0) {
    uint64_t v14 = (*(uint64_t (**)(void *, __n128 *, uint64_t, uint64_t, double))(*(void *)v12 + 112))(v12, &v19, a3, a4, a5);
  }
  else {
    uint64_t v14 = 0;
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v19);
  return v14;
}

void sub_1B7CFBE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::prerollEnd(OZImageMask *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource)
  {
    uint64_t v8 = v7;
    if (v7)
    {
    }
    else
    {
      __n128 v9 = 0;
    }
  }
  else
  {
    __n128 v9 = 0;
    uint64_t v8 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v15, a2);
  __n128 v13 = 0uLL;
  uint64_t v14 = 0;
  CMTime v12 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(this, &v12, &v13);
  __n128 v15 = v13;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = v14;
  if (v8 || (uint64_t v8 = v9) != 0) {
    uint64_t v10 = (*(uint64_t (**)(void *, __n128 *, PMFrameRequest *))(*(void *)v8 + 120))(v8, &v15, a3);
  }
  else {
    uint64_t v10 = 0;
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v15);
  return v10;
}

void sub_1B7CFC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::setRate(OZImageMask *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource)
  {
    uint64_t v10 = v9;
    if (v9)
    {
    }
    else
    {
      int64_t v11 = 0;
    }
  }
  else
  {
    int64_t v11 = 0;
    uint64_t v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v17, a2);
  __n128 v15 = 0uLL;
  uint64_t v16 = 0;
  CMTime v14 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(this, &v14, &v15);
  __n128 v17 = v15;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = v16;
  if (v10 || (uint64_t v10 = v11) != 0) {
    uint64_t v12 = (*(uint64_t (**)(void *, __n128 *, PMFrameRequest *, double))(*(void *)v10 + 128))(v10, &v17, a3, a4);
  }
  else {
    uint64_t v12 = 0;
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v17);
  return v12;
}

void sub_1B7CFC234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::scheduleTokens(OZImageMask *a1, const OZRenderParams *a2, long long **a3, uint64_t a4, uint64_t a5)
{
  OZSceneNode::scheduleTokens((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    uint64_t v12 = v11;
    if (v11)
    {
    }
    else
    {
      __n128 v13 = 0;
    }
  }
  else
  {
    __n128 v13 = 0;
    uint64_t v12 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v17, a2);
  memset(v16, 0, sizeof(v16));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v16, a4);
  if (v12 || (uint64_t v12 = v13) != 0) {
    uint64_t v14 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t, uint64_t))(*(void *)v12 + 136))(v12, v17, v16, a4, a5);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v18 = (void **)v16;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v17);
  return v14;
}

void sub_1B7CFC454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::hintTokensWillImage(OZImageMask *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    uint64_t v10 = v9;
    if (v9)
    {
    }
    else
    {
      int64_t v11 = 0;
    }
  }
  else
  {
    int64_t v11 = 0;
    uint64_t v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a2);
  memset(v14, 0, sizeof(v14));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v14, a4);
  if (v10 || (uint64_t v10 = v11) != 0) {
    uint64_t v12 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t))(*(void *)v10 + 144))(v10, v15, v14, a4);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v16 = (void **)v14;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v12;
}

void sub_1B7CFC680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::getTokensImage(OZImageMask *a1, const OZRenderParams *a2, long long **a3, uint64_t a4)
{
  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    uint64_t v10 = v9;
    if (v9)
    {
    }
    else
    {
      int64_t v11 = 0;
    }
  }
  else
  {
    int64_t v11 = 0;
    uint64_t v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a2);
  memset(v14, 0, sizeof(v14));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, v14, a4);
  if (v10 || (uint64_t v10 = v11) != 0) {
    uint64_t v12 = (*(uint64_t (**)(void *, unsigned char *, void *, uint64_t))(*(void *)v10 + 152))(v10, v15, v14, a4);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v16 = (void **)v14;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v12;
}

void sub_1B7CFC8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void OZImageMask::remapTokens(OZImageMask *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  OZSceneNode::remapTokens((uint64_t)a1, a2, (uint64_t)a3, a4);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = v7 + 48 * v8;
      uint64_t v13 = *(void *)(v10 + 24);
      uint64_t v12 = (uint64_t *)(v10 + 24);
      uint64_t v11 = v13;
      if (v12[1] != v13)
      {
        uint64_t v14 = 0;
        unsigned int v15 = 1;
        do
        {
          uint64_t v16 = 3 * v14;
          CMTime v23 = *(CMTime *)(v11 + 24 * v14);
          __n128 v21 = 0uLL;
          uint64_t v22 = 0;
          CMTime v20 = v23;
          OZImageMask::getMaskSourceTime(a1, &v20, &v21);
          uint64_t v17 = *(void *)(*a3 + 48 * v8 + 24) + 8 * v16;
          __n128 v18 = v21;
          *(void *)(v17 + 16) = v22;
          *(__n128 *)uint64_t v17 = v18;
          uint64_t v14 = v15;
          uint64_t v11 = *v12;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3) > v15++);
        uint64_t v7 = *a3;
        uint64_t v6 = a3[1];
      }
      uint64_t v8 = ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) > v9);
  }
}

const void *OZImageMask::pruneTokensAtTime(OZImageMask *this, CMTime *a2, const char *a3)
{
  CMTime v13 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v13, a3);
  unint64_t result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      uint64_t v7 = result;
      if (v8)
      {
        long long v11 = *(_OWORD *)&a2->value;
        CMTimeEpoch epoch = a2->epoch;
        return (const void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)v8 + 160))(v8, &v11, a3);
      }
      else
      {
        if (result)
        {
          long long v9 = *(_OWORD *)&a2->value;
          CMTimeEpoch v10 = a2->epoch;
          return (const void *)(*(uint64_t (**)(const void *, long long *, const char *))(*(void *)result
                                                                                                 + 160))(result, &v9, a3);
        }
      }
    }
  }
  return result;
}

const void *OZImageMask::pruneTokensExceptAtTime(OZImageMask *this, CMTime *a2, const char *a3)
{
  CMTime v13 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v13, a3);
  unint64_t result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      uint64_t v7 = result;
      if (v8)
      {
        long long v11 = *(_OWORD *)&a2->value;
        CMTimeEpoch epoch = a2->epoch;
        return (const void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)v8 + 168))(v8, &v11, a3);
      }
      else
      {
        if (result)
        {
          long long v9 = *(_OWORD *)&a2->value;
          CMTimeEpoch v10 = a2->epoch;
          return (const void *)(*(uint64_t (**)(const void *, long long *, const char *))(*(void *)result
                                                                                                 + 168))(result, &v9, a3);
        }
      }
    }
  }
  return result;
}

const void *OZImageMask::pruneAllTokens(OZImageMask *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  unint64_t result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      uint64_t v4 = result;
      if (result
      {
        uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 176);
        return (const void *)v5();
      }
    }
  }
  return result;
}

uint64_t OZImageMask::getMaskBlendMode(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2960), MEMORY[0x1E4F1FA48], 0.0);
}

BOOL OZImageMask::getInvert(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3216), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL OZImageMask::getStencil(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3368), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL OZImageMask::getStretch(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3520), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

void *non-virtual thunk to'OZImageMask::getHashForStateRN@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 - 1072), a2, a3, a4, a5);
}

_OWORD *non-virtual thunk to'OZImageMask::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 - 1072), a2, a3);
}

uint64_t non-virtual thunk to'OZImageMask::getWorkingColorDescription@<X0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  return OZSceneNode::getWorkingColorDescription((OZImageMask *)((char *)this - 1088), a2);
}

float non-virtual thunk to'OZImageMask::getBlendingGamma(OZImageMask *this)
{
  return OZSceneNode::getBlendingGamma((OZImageMask *)((char *)this - 1088));
}

uint64_t non-virtual thunk to'OZImageMask::getObjectManipulator(OZImageMask *this)
{
  return (uint64_t)this - 1072;
}

uint64_t non-virtual thunk to'OZImageMask::getMaskBlendMode(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1872), MEMORY[0x1E4F1FA48], 0.0);
}

BOOL non-virtual thunk to'OZImageMask::getStencil(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 15, MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL non-virtual thunk to'OZImageMask::getInvert(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 14, MEMORY[0x1E4F1FA48], 0.0) != 0;
}

void OZNodeCamera::OZNodeCamera(OZNodeCamera *this, OZScene *a2, int a3, OZViewerState *a4)
{
  *((void *)this + 66) = &unk_1F1199AC8;
  *((void *)this + 67) = 0;
  *((unsigned char *)this + 544) = 1;
  LiSimpleCamera::LiSimpleCamera(this, (uint64_t *)&off_1F1162E70);
  *(void *)this = &unk_1F1162B28;
  *((void *)this + 66) = &unk_1F1162E50;
  *((void *)this + 58) = a2;
  *((_DWORD *)this + 118) = a3;
  *((void *)this + 60) = a4;
  *((unsigned char *)this + 488) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 62) = 0;
  *((unsigned char *)this + 520) = 0;
  LiSimpleCamera::setCameraModel((uint64_t)this, 1);
  (*(void (**)(OZNodeCamera *, double))(*(void *)this + 512))(this, 45.0);
  uint64_t v8 = *((void *)this + 58);
  float64x2_t v10 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(v8 + 344)));
  (*(void (**)(OZNodeCamera *, float64x2_t *))(*(void *)this + 288))(this, &v10);
  (*(void (**)(OZNodeCamera *, double))(*(void *)this + 696))(this, *(double *)(v8 + 384));
  long long v9 = (void *)(*(uint64_t (**)(OZNodeCamera *))(*(void *)this + 768))(this);
  if (v9)
  {
    if (v9) {
      LOBYTE(v9) = OZGroup::shouldLockToCamera((OZGroup *)v9, *((_DWORD *)a4 + 60) == 9);
    }
  }
  *((unsigned char *)this + 520) = (_BYTE)v9;
}

void sub_1B7CFD190(_Unwind_Exception *a1)
{
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v1, (const PCString *)&off_1F1162E70);
  *(void *)(v1 + 528) = v2;
  *(unsigned char *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
  _Unwind_Resume(a1);
}

uint64_t OZNodeCamera::getCrop(OZNodeCamera *this)
{
  return 0;
}

uint64_t OZNodeCamera::update(OZNodeCamera *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZNodeCamera *))(*(void *)this + 768))(this);
  if (!*((unsigned char *)this + 520))
  {
    uint64_t v3 = *((void *)this + 58);
    if (*((unsigned char *)this + 488))
    {
      uint64_t v4 = (void *)v2;
      OZRenderState::OZRenderState(&v39);
      long long v37 = *((_OWORD *)this + 31);
      uint64_t v38 = *((void *)this + 64);
      OZScene::getCurrentTime(*((OZScene **)this + 58), (__n128 *)v28);
      *(_OWORD *)&v39.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)v28;
      v39.var0.var3 = *(void *)&v28[16];
      v39.var3 = *(double *)(v3 + 384);
      *(_WORD *)&v39.var8 = 256;
      if (v4) {
      uint64_t v36 = 0x3FF0000000000000;
      }
      uint64_t v33 = 0x3FF0000000000000;
      uint64_t v30 = 0x3FF0000000000000;
      *(void *)long long v28 = 0x3FF0000000000000;
      long long v5 = 0uLL;
      *(_OWORD *)&v28[8] = 0u;
      long long v29 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      if (v4)
      {
        (*(void (**)(void *, unsigned char *, OZRenderState *))(*(void *)v4 + 1256))(v4, v28, &v39);
        long long v5 = 0uLL;
      }
      long long v22 = v5;
      long long v23 = v5;
      long long v21 = v5;
      int v24 = 4;
      long long v25 = v5;
      long long v26 = v5;
      uint64_t v27 = 0;
      PCMatrix44Tmpl<double>::getTransformation((long long *)v28, (uint64_t)&v21);
      long long v19 = v25;
      uint64_t v20 = v26;
      (*(void (**)(OZNodeCamera *, long long *))(*(void *)this + 400))(this, &v19);
      v39.var9 = 0;
      if (v4) {
        (*(void (**)(void *, unsigned char *, OZRenderState *))(*(void *)v4 + 1256))(v4, v28, &v39);
      }
      PCMatrix44Tmpl<double>::getTransformation((long long *)v28, (uint64_t)&v21);
      uint64_t v18 = 0x3FF0000000000000;
      uint64_t v15 = 0x3FF0000000000000;
      uint64_t v12 = 0x3FF0000000000000;
      uint64_t v9 = 0x3FF0000000000000;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      *((void *)&v23 + 1) = 0x3FF0000000000000;
      if (*((double *)&v22 + 1) != 1.0)
      {
        uint64_t v9 = *((void *)&v22 + 1);
        *(double *)&long long v10 = *((double *)&v22 + 1) * 0.0;
        *((double *)&v10 + 1) = *((double *)&v22 + 1) * 0.0;
        *(double *)&long long v11 = *((double *)&v22 + 1) * 0.0;
      }
      if (*(double *)&v23 != 1.0)
      {
        *((double *)&v11 + 1) = *(double *)&v23 * 0.0;
        uint64_t v12 = v23;
        *(double *)&long long v13 = *(double *)&v23 * 0.0;
        *((double *)&v13 + 1) = *(double *)&v23 * 0.0;
      }
      (*(void (**)(OZNodeCamera *, uint64_t *, __n128))(*(void *)this + 432))(this, &v9, (__n128)(unint64_t)v23);
      PCMatrix44Tmpl<double>::transform<double>((double *)v28, (double *)&v37, (double *)&v37);
      PCMatrix44Tmpl<double>::invert((double *)&v9, (double *)&v9, 0.0);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v9, (double *)&v37, (double *)&v37);
      (*(void (**)(OZNodeCamera *, long long *))(*(void *)this + 448))(this, &v37);
    }
    else
    {
      v39.var7.var0[1][2] = 1.0;
      v39.var7.var0[0][1] = 1.0;
      v39.var3 = 1.0;
      v39.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0x3FF0000000000000;
      memset(&v39.var0.var1, 0, 32);
      memset(&v39.var4, 0, 32);
      memset(&v39.var7.var0[0][2], 0, 32);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(void *)this + 432))(this, &v39);
      (*(void (**)(OZNodeCamera *, char *))(*(void *)this + 448))(this, (char *)this + 496);
      v39.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0x3FF0000000000000;
      memset(&v39.var0.var1, 0, 24);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(void *)this + 480))(this, &v39);
      uint64_t v6 = *(void *)(v3 + 344);
      v7.i64[0] = (int)v6;
      v7.i64[1] = SHIDWORD(v6);
      *(float64x2_t *)&v39.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = vcvtq_f64_s64(v7);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(void *)this + 288))(this, &v39);
    }
  }
  return 1;
}

uint64_t OZNodeCamera::setAnimTime(uint64_t this, double a2)
{
  if (a2 != 1.0) {
    *(unsigned char *)(this + 488) = 1;
  }
  return this;
}

void OZNodeCamera::~OZNodeCamera(OZNodeCamera *this)
{
  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1F1162E70);
  *(void *)(v1 + 528) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1F1162E70);
  *(void *)(v1 + 528) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));

  JUMPOUT(0x1BA9BFBA0);
}

void *OZNodeCamera::getNode(OZNodeCamera *this)
{
  return OZScene::getNode(*((OZScene **)this + 58), *((_DWORD *)this + 118));
}

void virtual thunk to'OZNodeCamera::~OZNodeCamera(OZNodeCamera *this)
{
  LiSimpleCamera::~LiSimpleCamera((OZNodeCamera *)((char *)this + *(void *)(*(void *)this - 24)), (const PCString *)&off_1F1162E70);
  *(void *)(v1 + 528) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 544) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 536);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZNodeCamera::~OZNodeCamera((OZNodeCamera *)((char *)this + *(void *)(*(void *)this - 24)));
}

void OZChannelGradientWithTransform::OZChannelGradientWithTransform(OZChannelGradientWithTransform *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
}

void sub_1B7CFD9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelGradientPositioned::~OZChannelGradientPositioned(v12);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::OZChannelGradientWithTransform(OZChannelGradientWithTransform *this, const OZChannelGradientWithTransform *a2, OZChannelFolder *a3)
{
  OZChannelGradientPositioned::OZChannelGradientPositioned(this, a2, a3);
  *long long v5 = &unk_1F11636D0;
  v5[2] = &unk_1F11639B0;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 309), (const OZChannelGradientWithTransform *)((char *)a2 + 2472), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2728), (const OZChannelGradientWithTransform *)((char *)a2 + 2728), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2984), (const OZChannelGradientWithTransform *)((char *)a2 + 2984), (OZChannelFolder *)this);
  (*(void (**)(OZChannelGradientWithTransform *, const OZChannelGradientWithTransform *, uint64_t))(*(void *)this + 232))(this, a2, 1);
}

void sub_1B7CFDB48(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelGradientPositioned::~OZChannelGradientPositioned(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::~OZChannelGradientWithTransform(OZChannelGradientWithTransform *this)
{
  *(void *)this = &unk_1F11636D0;
  *((void *)this + 2) = &unk_1F11639B0;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2984));
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2728));
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2472));

  OZChannelGradientPositioned::~OZChannelGradientPositioned(this);
}

{
  uint64_t vars8;

  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelGradientWithTransform::~OZChannelGradientWithTransform(OZChannelGradientWithTransform *this)
{
}

{
  uint64_t vars8;

  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZChannelGradientWithTransform *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelGradientWithTransform::clone(OZChannelGradientWithTransform *this)
{
}

void sub_1B7CFDCE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4058F95B6ELL);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZChannelGradientPositioned::copy(this, a2, a3);
  if (v4) {
  OZChannelEnum::copy(this + 309, (const OZChannelBase *)((char *)v4 + 2472), a3);
  }
  OZChannelEnum::copy(this + 341, (const OZChannelBase *)((char *)v4 + 2728), a3);

  OZChannelEnum::copy(this + 373, (const OZChannelBase *)((char *)v4 + 2984), a3);
}

uint64_t OZChannelGradientWithTransform::parseEnd(OZChannelGradientWithTransform *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelGradient::parseEnd(this, a2);
  if ((*((unsigned char *)this + 2528) & 2) == 0)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2472), MEMORY[0x1E4F1FA48], 0.0);
    double v6 = 1.0;
    if (ValueAsInt != 2) {
      double v6 = 0.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 2728), v4, v6, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2472), 2, 0);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZChannelGradientWithTransform::parseEnd(OZChannelGradientWithTransform *this, PCSerializerReadStream *a2)
{
  return OZChannelGradientWithTransform::parseEnd((OZChannelGradientWithTransform *)((char *)this - 16), a2);
}

uint64_t OZMaterialRootChannelResetCallback(OZChannelBase *a1, void *a2)
{
  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
  if (ObjectManipulator) {
  else
  }
    uint64_t v3 = 0;
  uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)&v3[71], MEMORY[0x1E4F1FA48], 0.0);
  ((void (*)(PCString *))v3->var0[11].data)(v3);
  ((void (*)(PCString *))v3->var0[11].length)(v3);
  OZChannel::setValue((OZChannel *)&v3[71], v4, (double)ValueAsInt, 0);
  PCURL::PCURL((PCURL *)&v7, @"Material Default Name");
  PCString::set(v3 + 162, &v7);
  PCString::~PCString(&v7);
  return ((uint64_t (*)(PCString *))v3->var0[12].isa)(v3);
}

void sub_1B7CFDFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZMaterialBase::OZMaterialBase(OZMaterialBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  *(void *)this = &unk_1F1139198;
  *((void *)this + 1) = a2;
  PCString v7 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZMaterialBase *)((char *)this + 32));
  *((void *)this + 6) = &unk_1F10A7F98;
  OZImageNode::OZImageNode((OZMaterialBase *)((char *)this + 56));
  *(void *)this = &unk_1F1163A20;
  *((void *)this + 2) = &unk_1F1163BE0;
  *((void *)this + 6) = &unk_1F1163E38;
  *((void *)this + 7) = &unk_1F1163E90;
  PCMutex::PCMutex((PCMutex *)((char *)this + 80));
  OZChannelMaterialRoot::OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152), a3, 0, a4, 8u);
  PCString::PCString(v9, "Material");
  OZChannelDouble::OZChannelDouble((OZMaterialBase *)((char *)this + 416), 0, v9, (OZChannelFolder *)((char *)this + 152), 3u, 10, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Material Facet Assignment");
  OZChannelUint16::OZChannelUint16((OZChannelUint16 *)((char *)this + 568), 31, v9, (OZChannelFolder *)((char *)this + 152), 1u, 2, 0, 0);
  PCString::~PCString(v9);
  PCString::PCString(v9, "Sequence ID");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 720), 0, v9, (OZChannelFolder *)((char *)this + 152), 2u, 130, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Material Wrap Around Enum");
  PCURL::PCURL((PCURL *)&v13, @"Material Wrap Around");
  OZChannelEnum::OZChannelEnum((OZMaterialBase *)((char *)this + 872), 0, v9, &v13, (OZChannelFolder *)((char *)this + 152), 4u, 2, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(v9);
  PCString::PCString(v9, "Is Edited");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1128), 0, v9, (OZChannelFolder *)((char *)this + 152), 5u, 0x82u, 0, 0);
  PCString::~PCString(v9);
  *((void *)this + 160) = 0;
  *((unsigned char *)this + 1288) = 0;
  PCURL::PCURL((OZMaterialBase *)((char *)this + 1296), @"Material Default Name");
  *((unsigned char *)this + 1304) = 0;
  OZLiCachingDelegate::instance(v8);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 152, this);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 152), 0x400000);
  *((void *)this + 45) = v7;
  *(_OWORD *)&v9[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *MEMORY[0x1E4F1FA48];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v11 = *(_OWORD *)&v9[0].var0;
  uint64_t v12 = v10;
  OZChannelObjectRootBase::setTimeExtent((OZMaterialBase *)((char *)this + 152), (const PCTimeRange *)v9, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 152), 0x20000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 152), 0x80000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 152));
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 152), (void (*)(OZChannelBase *, void *))OZMaterialRootChannelResetCallback, 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 568), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 568));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 720), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 720), 0x100000000, 0);
}

void sub_1B7CFE3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, PCMutex *a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCString a20)
{
  PCString::~PCString(v27);
  OZChannelBool::~OZChannelBool(v26);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(a11);
  OZChannelMaterialRoot::~OZChannelMaterialRoot(v22);
  PCMutex::~PCMutex(a12);
  OZChannelBase::setRangeName(v21, v29);
  *(void *)(v20 + 16) = &unk_1F1138080;
  uint64_t v30 = *(void *)(v20 + 24);
  if (v30)
  {
    *(void *)(v30 + 8) = 0;
    *(void *)(v20 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZMaterialBase::OZMaterialBase(OZMaterialBase *this, const OZMaterialBase *a2, char a3)
{
  *(void *)this = &unk_1F1139198;
  uint64_t v6 = *((void *)a2 + 1);
  PCString v7 = (char *)this + 16;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = v6;
  *((void *)this + 2) = &unk_1F1144468;
  PCWorkingColorVector::PCWorkingColorVector((OZMaterialBase *)((char *)this + 32));
  *((void *)this + 6) = &unk_1F10A7F98;
  OZImageNode::OZImageNode((OZMaterialBase *)((char *)this + 56));
  *(void *)this = &unk_1F1163A20;
  *((void *)this + 2) = &unk_1F1163BE0;
  *((void *)this + 6) = &unk_1F1163E38;
  *((void *)this + 7) = &unk_1F1163E90;
  PCMutex::PCMutex((PCMutex *)((char *)this + 80));
  OZChannelMaterialRoot::OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152), (const OZMaterialBase *)((char *)a2 + 152), 0);
  OZChannel::OZChannel((OZChannel *)((char *)this + 416), (const OZChannelBase *)((char *)a2 + 416), (OZChannelFolder *)((char *)this + 152));
  *((void *)this + 52) = &unk_1F1100CF0;
  *((void *)this + 54) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 568), (const OZChannelBase *)((char *)a2 + 568), (OZChannelFolder *)((char *)this + 152));
  *((void *)this + 71) = &unk_1F1101860;
  *((void *)this + 73) = &unk_1F1101BC0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 720), (const OZChannelBase *)((char *)a2 + 720), (OZChannelFolder *)((char *)this + 152));
  *((void *)this + 90) = &unk_1F1101490;
  *((void *)this + 92) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((OZMaterialBase *)((char *)this + 872), (const OZMaterialBase *)((char *)a2 + 872), (OZChannelFolder *)((char *)this + 152));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1128), (const OZChannelBase *)((char *)a2 + 1128), (OZChannelFolder *)((char *)this + 152));
  *((void *)this + 160) = *((void *)a2 + 160);
  *((unsigned char *)this + 1288) = 0;
  PCString::PCString((PCString *)this + 162, (const PCString *)a2 + 162);
  *((unsigned char *)this + 1304) = *((unsigned char *)a2 + 1304);
  OZLiCachingDelegate::instance(v8);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 152, this);
  *((void *)this + 45) = v7;
  long long v11 = *MEMORY[0x1E4F1FA48];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v13 = v11;
  uint64_t v14 = v12;
  OZChannelObjectRootBase::setTimeExtent((OZMaterialBase *)((char *)this + 152), (const PCTimeRange *)&v11, 1);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 152), (void (*)(OZChannelBase *, void *))OZMaterialRootChannelResetCallback, 0, 0);
  if ((a3 & 2) != 0)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v9);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 152), NextUniqueID);
  }
}

void sub_1B7CFE828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCMutex *a10, OZChannelBase *a11, uint64_t a12)
{
  PCString::~PCString(v13);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelMaterialRoot::~OZChannelMaterialRoot(v15);
  PCMutex::~PCMutex(a10);
  OZChannelBase::setRangeName(a11, v21);
  *(void *)(v12 + 16) = &unk_1F1138080;
  uint64_t v22 = *(void *)(v12 + 24);
  if (v22)
  {
    *(void *)(v22 + 8) = 0;
    *(void *)(v12 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t OZMaterialBase::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = a1 + 152;
  OZChannelBehaviorRoot::operator=(a1 + 152, a2 + 152);

  return OZChannelSceneNode::setSceneNode(v3, (OZSceneNode *)a1);
}

void OZMaterialBase::~OZMaterialBase(OZMaterialBase *this)
{
  *(void *)this = &unk_1F1163A20;
  uint64_t v2 = (OZMaterialBase *)((char *)this + 16);
  *((void *)this + 2) = &unk_1F1163BE0;
  *((void *)this + 6) = &unk_1F1163E38;
  uint64_t v3 = (OZChannelBase *)((char *)this + 56);
  *((void *)this + 7) = &unk_1F1163E90;
  uint64_t v4 = *((void *)this + 160);
  if (v4)
  {
    long long v5 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4);
    uint64_t v6 = (OZObjectManipulator ***)v5;
    if (v5)
    {
      OZScene::unregisterObject(v5, v2);
      OZScene::removeObjectFromLoadObjectsWithDuplicateIDs(v6, v2);
    }
  }
  PCString::~PCString((PCString *)this + 162);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1128));
  OZChannelEnum::~OZChannelEnum((OZMaterialBase *)((char *)this + 872));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 416));
  OZChannelMaterialRoot::~OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 80));
  OZChannelBase::setRangeName(v3, v7);
  *((void *)this + 2) = &unk_1F1138080;
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    *((void *)this + 3) = 0;
  }
}

void *OZMaterialBase::removeThisFromBehaviors(void *this)
{
  uint64_t v1 = (const void *)this[160];
  if (v1)
  {
    uint64_t v2 = this;
    if (this
    {
      uint64_t v3 = this + 125;
      uint64_t v4 = this[126];
      if ((void *)v4 != this + 125)
      {
        long long v5 = v2 + 2;
        do
        {
          this = (void *)(*(uint64_t (**)(void, void *))(**(void **)(v4 + 16) + 152))(*(void *)(v4 + 16), v5);
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while ((void *)v4 != v3);
      }
    }
  }
  return this;
}

uint64_t OZMaterialBase::setOwner(uint64_t this, OZObjectManipulator *a2)
{
  *(void *)(this + 1280) = a2;
  return this;
}

uint64_t OZMaterialBase::getScene(OZMaterialBase *this)
{
  uint64_t result = *((void *)this + 160);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZMaterialBase::getScene(OZMaterialBase *this)
{
  uint64_t result = *((void *)this + 158);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  return result;
}

uint64_t OZMaterialBase::getSceneNode(OZMaterialBase *this)
{
  uint64_t result = *((void *)this + 160);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZMaterialBase::getSceneNode(OZMaterialBase *this)
{
  uint64_t result = *((void *)this + 158);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

uint64_t OZMaterialBase::getSceneNodeConst(OZMaterialBase *this)
{
  uint64_t result = *((void *)this + 160);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

uint64_t OZMaterialBase::getWorkingColorDescription@<X0>(OZMaterialBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(OZMaterialBase *))(*(void *)this + 112))(this);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 288);
    return v4();
  }
  else
  {
    return FxGetDefaultWorkingColorDescription(a2);
  }
}

uint64_t non-virtual thunk to'OZMaterialBase::getWorkingColorDescription@<X0>(OZMaterialBase *this@<X0>, uint64_t a2@<X8>)
{
  return OZMaterialBase::getWorkingColorDescription((OZMaterialBase *)((char *)this - 56), a2);
}

float OZMaterialBase::getBlendingGamma(OZMaterialBase *this)
{
  uint64_t v1 = (*(uint64_t (**)(OZMaterialBase *))(*(void *)this + 112))(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)v1 + 296);
    v2();
  }
  else
  {
    return PCRenderModel::getDefaultBlendingGamma(0);
  }
  return result;
}

float non-virtual thunk to'OZMaterialBase::getBlendingGamma(OZMaterialBase *this)
{
  return OZMaterialBase::getBlendingGamma((OZMaterialBase *)((char *)this - 56));
}

void OZMaterialBase::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void non-virtual thunk to'OZMaterialBase::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

uint64_t OZMaterialBase::updateReferenceIDs(uint64_t a1, void *a2)
{
  uint64_t v4 = (OZChannel *)(a1 + 1128);
  long long v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 1128), MEMORY[0x1E4F1FA48], 0.0);
  OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 152), a2);
  double v7 = 1.0;
  if (!ValueAsInt) {
    double v7 = 0.0;
  }

  return OZChannel::setValue(v4, v5, v7, 1);
}

uint64_t OZMaterialBase::setIsEdited(OZMaterialBase *this, unsigned int a2, int a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 1128), MEMORY[0x1E4F1FA48], (double)a2, a3);
}

uint64_t non-virtual thunk to'OZMaterialBase::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZMaterialBase::updateReferenceIDs(a1 - 16, a2);
}

uint64_t OZMaterialBase::setNewName(OZMaterialBase *this, const PCString *a2, uint64_t a3)
{
  uint64_t result = *((void *)this + 160);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const PCString *, OZMaterialBase *, uint64_t, void))(*(void *)result + 488))(result, a2, this, a3, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'OZMaterialBase::setNewName(OZMaterialBase *this, const PCString *a2, uint64_t a3)
{
  uint64_t result = *((void *)this + 158);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const PCString *, char *, uint64_t, void))(*(void *)result + 488))(result, a2, (char *)this - 16, a3, 0);
  }
  return result;
}

BOOL OZMaterialBase::isSimilarToMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 568), MEMORY[0x1E4F1FA48], 0.0);
  return ValueAsInt == OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), v3, 0.0);
}

uint64_t OZMaterialBase::copyMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  double ValueAsInt = (double)OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), MEMORY[0x1E4F1FA48], 0.0);

  return OZChannel::setValue((OZChannel *)((char *)this + 568), v3, ValueAsInt, 0);
}

uint64_t OZMaterialBase::deleteThis(OZMaterialBase *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 152) == a2 && (uint64_t v3 = *((void *)this + 160)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 184))();
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'OZMaterialBase::deleteThis(OZMaterialBase *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 136) == a2 && (uint64_t v3 = *((void *)this + 158)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 184))();
  }
  else {
    return 0;
  }
}

uint64_t OZMaterialBase::isSelected(OZMaterialBase *this)
{
  return *((unsigned __int8 *)this + 1304);
}

uint64_t non-virtual thunk to'OZMaterialBase::isSelected(OZMaterialBase *this)
{
  return *((unsigned __int8 *)this + 1288);
}

uint64_t OZMaterialBase::select(uint64_t this)
{
  *(unsigned char *)(this + 1304) = 1;
  return this;
}

uint64_t non-virtual thunk to'OZMaterialBase::select(uint64_t this)
{
  *(unsigned char *)(this + 1288) = 1;
  return this;
}

uint64_t OZMaterialBase::deselect(uint64_t this)
{
  *(unsigned char *)(this + 1304) = 0;
  return this;
}

uint64_t non-virtual thunk to'OZMaterialBase::deselect(uint64_t this)
{
  *(unsigned char *)(this + 1288) = 0;
  return this;
}

uint64_t OZMaterialBase::setPresetFromMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 1128), MEMORY[0x1E4F1FA48], 0.0, 0);
}

uint64_t OZMaterialBase::willResetMaterial(OZMaterialBase *this)
{
  (*(void (**)(void, OZMaterialBase *))(**((void **)this + 160) + 520))(*((void *)this + 160), this);
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 160) + 496);

  return v2();
}

uint64_t OZMaterialBase::doResetMaterial(OZMaterialBase *this)
{
  (*(void (**)(void, OZMaterialBase *))(**((void **)this + 160) + 520))(*((void *)this + 160), this);
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 160) + 504);

  return v2();
}

uint64_t OZMaterialBase::didResetMaterial(OZMaterialBase *this)
{
  (*(void (**)(void, OZMaterialBase *))(**((void **)this + 160) + 520))(*((void *)this + 160), this);
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 160) + 512);

  return v2();
}

uint64_t OZMaterialBase::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 184);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 44));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZMaterialBase::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZMaterialBase::writeHeader(this - 6, a2);
}

uint64_t OZMaterialBase::writeBody(OZMaterialBase *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  {
    PCMutex::PCMutex(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
    __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock, &dword_1B73F3000);
  }
  PCMutex::lock(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialBaseScope);
  uint64_t v8 = *((unsigned __int8 *)this + 1288);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 200);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  OZChannelObjectRoot::writeBody((OZMaterialBase *)((char *)this + 152), a2, 0, 1, a5);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return PCMutex::unlock(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
}

void sub_1B7CFF5CC(_Unwind_Exception *a1)
{
}

uint64_t non-virtual thunk to'OZMaterialBase::writeBody(OZMaterialBase *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZMaterialBase::writeBody((OZMaterialBase *)((char *)this - 48), a2, 0, 0, a5);
}

uint64_t OZMaterialBase::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);

  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 19), a2);
}

uint64_t non-virtual thunk to'OZMaterialBase::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZFactory::setNeedsSaving(*(this - 5), (const OZFactory *)1);

  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 13), a2);
}

uint64_t OZMaterialBase::parseBegin(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZMaterialBase::parseBegin(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZMaterialBase::parseEnd(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannelFolder *)((char *)this + 152);
  (*(void (**)(OZMaterialBase *, PCSerializerReadStream *))(*(void *)this + 200))(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 568), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 568), 0x400000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 872), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 872), 0x400000, 0);
  OZChannelBase::setFlags((OZChannelBase *)((char *)this + 416), 2uLL);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 416), 0x400000, 0);
  OZChannelFolder::setFoldFlag(v3, 0x400000);
  OZChannelBase::setFlag((OZChannelBase *)v3, 8, 0);
  OZChannelBase::resetFlag((OZChannelBase *)v3, 32, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 720), 128, 0);
  OZChannelFolder::setFoldFlag(v3, 0x80000);
  OZChannelBase::resetFlag((OZChannelBase *)v3, 1, 0);
  return 1;
}

uint64_t non-virtual thunk to'OZMaterialBase::parseEnd(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZMaterialBase::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRoot::parseElement(this + 19, a2, a3);
  if (*((_DWORD *)a3 + 2) == 200)
  {
    char v6 = 0;
    (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, &v6);
    *((unsigned char *)this + 1288) = v6;
  }
  return 1;
}

uint64_t non-virtual thunk to'OZMaterialBase::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZMaterialBase::allowDrag(OZMaterialBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    {
      *a5 = a4 & 1;
    }
  }
}

void non-virtual thunk to'OZMaterialBase::allowDrag(OZMaterialBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    {
      *a5 = a4 & 1;
    }
  }
}

uint64_t OZMaterialBase::prepareForDragOperation()
{
  return 1;
}

uint64_t non-virtual thunk to'OZMaterialBase::prepareForDragOperation()
{
  return 1;
}

uint64_t OZMaterialBase::performDragOperation(OZMaterialBase *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  int v8 = a6;
  if (!(*(uint64_t (**)(OZMaterialBase *, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(void *)this + 96))(this, a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t v12 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v12 = (*(uint64_t (**)(OZMaterialBase *))(*(void *)this + 96))(this);
  if (!a2) {
    return 0;
  }
LABEL_3:
  uint64_t result = 0;
  if (v8 == 1 && v13)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
    if (ObjectManipulator) {
    else
    }
      long long v16 = 0;
    uint64_t v17 = *(void *)(v12 + 1584);
    PCURL::PCURL((PCURL *)&v23, @"Undo Material Change");
    OZDocument::startCaptureModifiedChannels(v17, &v23);
    PCString::~PCString(&v23);
    if (v16)
    {
      long long v19 = (const CMTime *)MEMORY[0x1E4F1FA48];
      unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v16 + 568), MEMORY[0x1E4F1FA48], 0.0);
      int v21 = *(_DWORD *)((*(uint64_t (**)(char *))(*(void *)v16 + 208))(v16) + 120);
      (*(void (**)(char *, void *))(*(void *)v16 + 80))(v16, v13);
      uint64_t v22 = (OZChannelFolder *)(*(uint64_t (**)(char *))(*(void *)v16 + 208))(v16);
      OZChannelFolder::setFoldFlags(v22, v21);
      OZChannel::setValue((OZChannel *)(v16 + 568), v19, (double)ValueAsInt, 0);
    }
    OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v12 + 1584), v18);
    return 1;
  }
  return result;
}

void sub_1B7CFFC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZMaterialBase::performDragOperation(OZMaterialBase *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZMaterialBase::performDragOperation((OZMaterialBase *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZMaterialBase::buildRenderGraph(OZMaterialBase *this, OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

void sub_1B7D00030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  PCSharedCount::~PCSharedCount(v18);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a16, a17);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v19 - 168);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v19 - 136));
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void LiVramLimitsExceededMaterial::LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  *((void *)this + 87) = &unk_1F1199AC8;
  *((void *)this + 88) = 0;
  *((unsigned char *)this + 712) = 1;
  LiMaterial::LiMaterial(this, (uint64_t *)off_1F1127090);
  *(void *)this = &unk_1F1126F88;
  *((void *)this + 87) = &unk_1F1127070;
  *((void *)this + 83) = 0x3FF0000000000000;
  *((_OWORD *)this + 42) = xmmword_1B7E733D0;
  *((void *)this + 86) = 0x3FF0000000000000;
}

void sub_1B7D00250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 696) = v3;
  *(unsigned char *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZMaterialBase::buildRenderGraph(OZMaterialBase *this, OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

uint64_t OZMaterialBase::channelValueWillBeSet(OZMaterialBase *this, OZChannel *a2, const CMTime *a3, double a4)
{
  uint64_t result = *((void *)this + 160);
  if (result) {
    return (*(uint64_t (**)(uint64_t, OZChannel *, const CMTime *, BOOL))(*(void *)result + 552))(result, a2, a3, a4 != 0.0);
  }
  return result;
}

void OZChannelUint16::OZChannelUint16(OZChannelUint16 *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelUint16_FactoryBase = (OZFactory *)getOZChannelUint16_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint16_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1101860;
  this->var2 = (void **)&unk_1F1101BC0;
  OZChannelUint16Info = (OZChannelUint16 *)OZChannelUint16::createOZChannelUint16Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
    this->var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
  }
  this->var16 = var17;
  OZChannelUint16::createOZChannelUint16Impl(OZChannelUint16Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B7D003E0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChanObjectRefWithPicker_Factory::getInstance(this);
  OZChanObjectManipRef::OZChanObjectManipRef(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1163FC0;
  *((void *)this + 2) = &unk_1F1164350;
  *((void *)this + 21) = (char *)this + 168;
  *((void *)this + 22) = (char *)this + 168;
  *((void *)this + 23) = 0;
  operator new();
}

void sub_1B7D004D0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectRefWithPicker_Factory::getInstance(OZChanObjectRefWithPicker_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanObjectRefWithPicker_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChanObjectRefWithPicker_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectRefWithPicker_Factory::_instance;
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4, a5, a6);
  void *v6 = &unk_1F1163FC0;
  v6[2] = &unk_1F1164350;
  v6[21] = v6 + 21;
  v6[22] = v6 + 21;
  v6[23] = 0;
  operator new();
}

void sub_1B7D00600(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F1163FC0;
  v4[2] = &unk_1F1164350;
  v4[21] = v4 + 21;
  v4[22] = v4 + 21;
  v4[23] = 0;
  operator new();
}

void sub_1B7D006C4(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, const OZChanObjectRefWithPicker *a2, OZChannelFolder *a3)
{
  OZChanObjectManipRef::OZChanObjectManipRef(this, (const OZChannelBase *)a2, a3);
  *uint64_t v4 = &unk_1F1163FC0;
  v4[2] = &unk_1F1164350;
  std::list<PCUUID>::list((uint64_t)(v4 + 21), (__n128 *)((char *)a2 + 168));
  operator new();
}

void sub_1B7D007D0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this)
{
  *(void *)this = &unk_1F1163FC0;
  *((void *)this + 2) = &unk_1F1164350;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    std::__list_imp<unsigned int>::clear(*((void **)this + 20));
    MEMORY[0x1BA9BFBA0](v2, 0x1020C4062D53EE8);
  }
  *((void *)this + 20) = 0;
  std::__list_imp<unsigned int>::clear((void *)this + 21);

  OZChanObjectManipRef::~OZChanObjectManipRef(this);
}

{
  uint64_t vars8;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this)
{
}

{
  uint64_t vars8;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanObjectRefWithPicker *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanObjectRefWithPicker::clone(OZChanObjectRefWithPicker *this)
{
}

void sub_1B7D00970(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectRefWithPicker::resetAcceptedObjects(uint64_t this)
{
  uint64_t v1 = this;
  *(_DWORD *)(this + 194) = 0;
  uint64_t v2 = (unsigned char *)(this + 194);
  *(_DWORD *)(this + 197) = 0;
  uint64_t v3 = *(void *)(this + 160);
  for (uint64_t i = *(int32x4_t **)(v3 + 8); i != (int32x4_t *)v3; uint64_t i = (int32x4_t *)i->i64[1])
  {
    v18[0] = i[1];
    this = OZFactories::findFactory(*(void *)(theApp + 32), (unsigned int *)v18);
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18[0], (int32x4_t)xmmword_1B8380BC0)))))
    {
      unint64_t v5 = this;
      long long v17 = xmmword_1B83804B0;
      this = OZFactory::isKindOfClass(this, (int32x4_t *)&v17);
      if (this)
      {
        *(unsigned char *)(v1 + 195) = 1;
      }
      else
      {
        long long v16 = xmmword_1B8381910;
        this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v16);
        if (this)
        {
          *(unsigned char *)(v1 + 196) = 1;
        }
        else
        {
          long long v15 = xmmword_1B837FF30;
          this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v15);
          if (this)
          {
            *(unsigned char *)(v1 + 198) = 1;
          }
          else
          {
            long long v14 = xmmword_1B837FF40;
            this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v14);
            if (this)
            {
              *(unsigned char *)(v1 + 199) = 1;
            }
            else
            {
              long long v13 = xmmword_1B837FE90;
              this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v13);
              if (this) {
                *(unsigned char *)(v1 + 200) = 1;
              }
            }
          }
        }
      }
    }
    else
    {
      *uint64_t v2 = 1;
    }
  }
  for (j = *(int32x4_t **)(v1 + 176); j != (int32x4_t *)(v1 + 168); j = (int32x4_t *)j->i64[1])
  {
    v18[0] = j[1];
    this = OZFactories::findFactory(*(void *)(theApp + 32), (unsigned int *)v18);
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18[0], (int32x4_t)xmmword_1B8380BC0)))))
    {
      unint64_t v7 = this;
      long long v12 = xmmword_1B83804B0;
      this = OZFactory::isKindOfClass(this, (int32x4_t *)&v12);
      if (this)
      {
        *(unsigned char *)(v1 + 195) = 0;
      }
      else
      {
        long long v11 = xmmword_1B8381910;
        this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v11);
        if (this)
        {
          *(unsigned char *)(v1 + 196) = 0;
        }
        else
        {
          long long v10 = xmmword_1B837FF30;
          this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v10);
          if (this)
          {
            *(unsigned char *)(v1 + 198) = 0;
          }
          else
          {
            long long v9 = xmmword_1B837FF40;
            this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v9);
            if (this)
            {
              *(unsigned char *)(v1 + 199) = 0;
            }
            else
            {
              long long v8 = xmmword_1B837FE90;
              this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v8);
              if (this) {
                *(unsigned char *)(v1 + 200) = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      *(_WORD *)(v1 + 195) = 0;
      *(unsigned char *)(v1 + 197) = 0;
    }
  }
  return this;
}

uint64_t OZChanObjectRefWithPicker::copy(OZChannelBase *this, const OZChannelBase *a2)
{
  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::copy((OZChannel *)this, a2, 0);
  std::__list_imp<unsigned int>::clear(this[1].var6);
  if (a2) {
  var6 = a2[1].var6;
  }
  for (uint64_t i = (__n128 *)*((void *)var6 + 1); i != (__n128 *)var6; uint64_t i = (__n128 *)i->n128_u64[1])
    std::list<PCUUID>::push_back((__n128 **)this[1].var6, i + 1);
  if (a2 != this) {
    std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t *)&this[1].var7, a2[1].var8, (uint64_t)&a2[1].var7);
  }

  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanObjectRefWithPicker::assign(OZChanObjectRefWithPicker *this, const OZChannelBase *a2)
{
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      unint64_t v5 = v4;
      std::__list_imp<unsigned int>::clear(*((void **)this + 20));
      uint64_t v6 = *((void *)v5 + 20);
      for (uint64_t i = *(__n128 **)(v6 + 8); i != (__n128 *)v6; uint64_t i = (__n128 *)i->n128_u64[1])
        std::list<PCUUID>::push_back(*((__n128 ***)this + 20), i + 1);
      if (v5 != this) {
        std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t *)this + 21, *((void *)v5 + 22), (uint64_t)v5 + 168);
      }
    }
  }

  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanObjectRefWithPicker::setValue(OZChannelBase *this, double a2, double a3)
{
  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::setValue((OZChannel *)this, MEMORY[0x1E4F1FA48], a3, 0);

  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanObjectRefWithPicker::operator=(uint64_t a1, uint64_t a2)
{
  OZChannelBase::operator=(a1, a2);
  return a1;
}

unint64_t OZChanObjectRefWithPicker::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  unint64_t result = OZChanObjectManipRef::canReferenceObject(this, a2);
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 232))(a2);
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    unint64_t v7 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v7 + 272))();
    if ((_DWORD *)v5 == v7 && !BYTE1(this[1].var11)) {
      return 0;
    }
    if (!BYTE3(this[1].var5) && v8)
    {
      v21[0] = 0;
      v21[1] = 0;
      uint64_t v20 = (uint64_t *)v21;
      int v9 = v7[20];
      OZScene::getReferencedNodes(v8, *(_DWORD *)(v5 + 80), &v20);
      long long v10 = v20;
      if (v20 != (uint64_t *)v21)
      {
        while (*((_DWORD *)v10 + 7) != v9)
        {
          long long v11 = (uint64_t *)v10[1];
          if (v11)
          {
            do
            {
              long long v12 = v11;
              long long v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              long long v12 = (uint64_t *)v10[2];
              BOOL v17 = *v12 == (void)v10;
              long long v10 = v12;
            }
            while (!v17);
          }
          long long v10 = v12;
          if (v12 == (uint64_t *)v21) {
            goto LABEL_14;
          }
        }
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
        return 0;
      }
LABEL_14:
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
    }
    if (BYTE3(this[1].var10))
    {
      if (LOBYTE(this[1].var10))
      {
        if (!result) {
          return result;
        }
        int v13 = (*(uint64_t (**)(unint64_t))(*(void *)result + 1352))(result);
LABEL_25:
        BOOL v17 = v13 == 0;
        return !v17;
      }
      if (BYTE1(this[1].var10))
      {
        if (!result) {
          return result;
        }
        int v13 = (*(uint64_t (**)(unint64_t))(*(void *)result + 1360))(result);
        goto LABEL_25;
      }
LABEL_31:
      BOOL v17 = result == 0;
      return !v17;
    }
    if (BYTE2(this[1].var10))
    {
LABEL_21:
      long long v15 = a2;
      ptrdiff_t v16 = 16;
LABEL_30:
      goto LABEL_31;
    }
    if (BYTE6(this[1].var10))
    {
      long long v15 = a2;
      ptrdiff_t v16 = 48;
      goto LABEL_30;
    }
    if (HIBYTE(this[1].var10))
    {
      goto LABEL_21;
    }
    if (LOBYTE(this[1].var11))
    {
      unint64_t v18 = *(void *)((*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 256))(a2) + 8);
      int32x4_t v19 = (int32x4_t)xmmword_1B837FE90;
      return OZFactory::isKindOfClass(v18, &v19);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1B7D01244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t OZChanObjectRefWithPicker::addAcceptedFactoryUUID(uint64_t a1, __n128 *a2)
{
  std::list<PCUUID>::push_back(*(__n128 ***)(a1 + 160), a2);

  return OZChanObjectRefWithPicker::resetAcceptedObjects(a1);
}

uint64_t OZChanObjectRefWithPicker::removeAcceptedFactoryUUID(uint64_t a1, int32x4_t *a2)
{
  uint64_t v3 = *(int32x4_t **)(a1 + 160);
  uint64_t v4 = v3;
  while (1)
  {
    uint64_t v4 = (int32x4_t *)v4->i64[1];
    if (v4 == v3) {
      break;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v4[1], *a2)))) & 1) == 0)
    {
      uint64_t v5 = v4->i64[0];
      *(void *)(v5 + 8) = v4->i64[1];
      *(void *)v4->i64[1] = v5;
      --v3[1].i64[0];
      operator delete(v4);
      goto LABEL_6;
    }
  }
  std::list<PCUUID>::push_back((__n128 **)(a1 + 168), (__n128 *)a2);
LABEL_6:

  return OZChanObjectRefWithPicker::resetAcceptedObjects(a1);
}

uint64_t OZChanObjectRefWithPicker::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  OZChanSceneNodeRef::removeDependency(this);

  return OZChannel::parseBegin((OZChannel *)this, a2);
}

uint64_t non-virtual thunk to'OZChanObjectRefWithPicker::parseBegin(OZChanObjectRefWithPicker *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannel *)((char *)this - 16);
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)((char *)this - 16));

  return OZChannel::parseBegin(v3, a2);
}

uint64_t OZChanObjectRefWithPicker::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChanObjectRefWithPicker::parseEnd(OZChanObjectRefWithPicker *this, PCSerializerReadStream *a2)
{
  uint64_t v2 = (OZChannelBase *)((char *)this - 16);
  OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChanSceneNodeRef::setDependency(v2);
  return 1;
}

void std::__call_once_param<std::tuple<OZChanObjectRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D0145C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker_Factory::OZChanObjectRefWithPicker_Factory(OZChanObjectRefWithPicker_Factory *this)
{
  long long v3 = xmmword_1B8381730;
  long long v4 = xmmword_1B8381310;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11643C0;
  *((void *)this + 16) = &unk_1F1164490;
}

void sub_1B7D0152C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker_Factory::create(OZChanObjectRefWithPicker_Factory *this, const PCString *a2)
{
}

void sub_1B7D015A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker_Factory::createCopy(OZChanObjectRefWithPicker_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D01658(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker_Factory::createChannelCopy(OZChanObjectRefWithPicker_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D01710(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t std::list<PCUUID>::list(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = a1;
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = 0;
  for (uint64_t i = a2; ; std::list<PCUUID>::push_back((__n128 **)a1, i + 1))
  {
    uint64_t i = (__n128 *)i->n128_u64[1];
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_1B7D0178C(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<PCUUID>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<PCUUID>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    int v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      long long v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        long long v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B7D018C4(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B7D018E4(_Unwind_Exception *a1)
{
}

uint64_t OZChannelEnumRetime_Factory::getInstance(OZChannelEnumRetime_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelEnumRetime_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelEnumRetime_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumRetime_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumRetime_Factory::_instance;
}

void OZChannelEnumRetime::OZChannelEnumRetime(OZChannelEnumRetime *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  Instance = (OZFactory *)OZChannelEnumRetime_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, 0, 0);
  *(void *)this = &unk_1F113DAE8;
  *((void *)this + 2) = &unk_1F113DE58;
  *((void *)this + 1) = OZChannelEnumRetime_Factory::getInstance(v13);
}

void sub_1B7D01A20(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumRetime_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D01A80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumRetime_Factory::OZChannelEnumRetime_Factory(OZChannelEnumRetime_Factory *this)
{
  long long v3 = xmmword_1B8378A10;
  long long v4 = xmmword_1B8383840;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11644E8;
  *((void *)this + 16) = &unk_1F11645B8;
}

void sub_1B7D01B50(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnumRetime_Factory::create(OZChannelEnumRetime_Factory *this, const PCString *a2)
{
}

void sub_1B7D01C08(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumRetime_Factory::createCopy(OZChannelEnumRetime_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D01CFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumRetime_Factory::createChannelCopy(OZChannelEnumRetime_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D01DF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZImageGenerator::OZImageGenerator(OZImageGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *(void *)uint64_t v6 = &unk_1F1164610;
  *(void *)(v6 + 16) = &unk_1F1164F28;
  *(void *)(v6 + 48) = &unk_1F1165180;
  *(void *)(v6 + 6528) = &unk_1F11651D8;
  unint64_t v7 = (OZChannelFolder *)(v6 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18776), a3, (OZChannelFolder *)(v6 + 448), 1u, 0, 0);
  PCURL::PCURL((PCURL *)&v8, @"Channel Generator Width");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 18904), &v8, v7, 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Generator Height");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19056), &v8, v7, 0x12Du, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Generator Pixel Aspect Ratio");
  OZChannelAspectRatio::OZChannelAspectRatio((OZChannelAspectRatio *)((char *)this + 19208), &v8, v7, 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v8);
  *(_OWORD *)((char *)this + 19368) = 0u;
  *(void *)((char *)this + 18396) = 0x100000002;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19208), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19208));
  OZChannel::setMin((OZChannel *)((char *)this + 18904), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 18904), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18904), 0x100000000, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19056), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 19056), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19056), 0x100000000, 0);
  *((unsigned char *)this + 19360) = 0;
}

void sub_1B7D02074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZElement::~OZElement(v10);
  _Unwind_Resume(a1);
}

void OZImageGenerator::OZImageGenerator(OZImageGenerator *this, const OZImageGenerator *a2, uint64_t a3)
{
  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1164610;
  *(void *)(v5 + 16) = &unk_1F1164F28;
  *(void *)(v5 + 48) = &unk_1F1165180;
  *(void *)(v5 + 6528) = &unk_1F11651D8;
  uint64_t v6 = (OZChannelFolder *)(v5 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 18904), (const OZChannelBase *)((char *)a2 + 18904), v6);
  *((void *)this + 2363) = &unk_1F1101490;
  *((void *)this + 2365) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19056), (const OZChannelBase *)((char *)a2 + 19056), v6);
  *((void *)this + 2382) = &unk_1F1101490;
  *((void *)this + 2384) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19208), (const OZChannelBase *)((char *)a2 + 19208), v6);
  *((void *)this + 2401) = &unk_1F1102000;
  *((unsigned char *)this + 19360) = *((unsigned char *)a2 + 19360);
  *((void *)this + 2403) = &unk_1F1102360;
  *(_OWORD *)((char *)this + 19368) = 0u;
}

void sub_1B7D022F4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZElement::~OZElement(v1);
  _Unwind_Resume(a1);
}

void OZImageGenerator::~OZImageGenerator(OZImageGenerator *this)
{
  *(void *)this = &unk_1F1164610;
  *((void *)this + 2) = &unk_1F1164F28;
  *((void *)this + 6) = &unk_1F1165180;
  *((void *)this + 816) = &unk_1F11651D8;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2422);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19208));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19056));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));

  OZElement::~OZElement((OZElement *)this);
}

{
  uint64_t vars8;

  OZImageGenerator::~OZImageGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZImageGenerator::~OZImageGenerator(OZImageGenerator *this)
{
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 48));
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZImageGenerator::operator=(uint64_t a1, const void *a2)
{
  OZElement::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 18904, (uint64_t)v4 + 18904);

  return OZChannelBase::operator=(a1 + 19056, (uint64_t)v5 + 19056);
}

uint64_t OZImageGenerator::eval(OZImageGenerator *this, OZRenderParams *a2)
{
  return 0;
}

void OZImageGenerator::getPixelAspectRatio(OZImageGenerator *this)
{
}

uint64_t OZImageGenerator::hasDescendants(OZImageGenerator *this)
{
  return 0;
}

uint64_t OZImageGenerator::numberOfDescendants(OZImageGenerator *this)
{
  return 0;
}

void OZImageGenerator::setName(OZImageGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18776), a2, 0);

  OZObjectManipulator::setName((OZImageGenerator *)((char *)this + 16), a2, a3);
}

void non-virtual thunk to'OZImageGenerator::setName(OZImageGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18760), a2, 0);

  OZObjectManipulator::setName(this, a2, a3);
}

__n128 OZImageGenerator::getNaturalDuration@<Q0>(OZImageGenerator *this@<X0>, __n128 *a2@<X8>)
{
  if ((*(uint64_t (**)(OZImageGenerator *))(*(void *)this + 272))(this)) {
    long long v4 = (__n128 *)((*(uint64_t (**)(OZImageGenerator *))(*(void *)this + 272))(this) + 1376);
  }
  else {
    long long v4 = (__n128 *)MEMORY[0x1E4F1FA48];
  }
  __n128 result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

__n128 non-virtual thunk to'OZImageGenerator::getNaturalDuration@<Q0>(OZImageGenerator *this@<X0>, __n128 *a2@<X8>)
{
  long long v3 = (char *)this - 16;
  if ((*(uint64_t (**)(char *))(*((void *)this - 2) + 272))((char *)this - 16)) {
    long long v4 = (__n128 *)((*(uint64_t (**)(char *))(*(void *)v3 + 272))(v3) + 1376);
  }
  else {
    long long v4 = (__n128 *)MEMORY[0x1E4F1FA48];
  }
  __n128 result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

uint64_t OZImageGenerator::getNaturalDurationFlags(OZImageGenerator *this)
{
  return 6;
}

uint64_t non-virtual thunk to'OZImageGenerator::getNaturalDurationFlags(OZImageGenerator *this)
{
  return 6;
}

void OZImageGenerator::getOriginalBounds(uint64_t a1, double *a2, CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 18904), a3, 0.0);
  double v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 19056), a3, 0.0);
  *a2 = v7 * -0.5;
  a2[1] = v8 * -0.5;
  a2[2] = v7;
  a2[3] = v8;
}

OZChannelInfo *OZImageGenerator::didAddToScene(OZImageGenerator *this, CMTimeEpoch *a2)
{
  long long v4 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  OZTransformNode::didAddToScene((OZTransformNode *)this, (OZScene *)a2);
  if (a2)
  {
    uint64_t v5 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v17, (const OZSceneSettings *)(a2 + 42));
    if (*(unsigned char *)(theApp + 80)
      || (double v6 = (OZPreferenceManager *)OZPreferenceManager::Instance(v5),
          UseProjectDurationForStills = (OZPreferenceManager *)OZPreferenceManager::getUseProjectDurationForStills(v6),
          UseProjectDurationForStills))
    {
      *(_OWORD *)&v23.int64_t value = *((_OWORD *)a2 + 86);
      CMTimeEpoch epoch = a2[174];
    }
    else
    {
      OZPreferenceManager::Instance(UseProjectDurationForStills);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(a2 + 42), (__n128 *)&time2);
      OZPreferenceManager::getDefaultStillDuration(&time2, (uint64_t)&time1);
      *(_OWORD *)&v23.int64_t value = *(_OWORD *)&time1.value;
      CMTimeEpoch epoch = time1.epoch;
    }
    v23.CMTimeEpoch epoch = epoch;
    double v9 = (float)SDWORD2(v17);
    double v10 = (float)SHIDWORD(v17);
    double v11 = v20;
    *(void *)&long long v17 = &unk_1F113E428;
    PCString::~PCString(&v22);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v21);
    float v12 = v11;
  }
  else
  {
    float v12 = 1.0;
    double v10 = 486.0;
    double v9 = 720.0;
  }
  long long v17 = *((_OWORD *)this + 13);
  uint64_t v18 = *((void *)this + 28);
  CMTime v19 = *(CMTime *)((char *)this + 232);
  if (!*((unsigned char *)this + 19360)
    || (OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19208), MEMORY[0x1E4F1FA48], 0.0), v13 == 0.0))
  {
    float v14 = v9;
    float v15 = v10;
    OZImageGenerator::initializeGeneratorBounds(this, v14, v15, v12);
    CMTime v19 = v23;
    OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&v17, 0);
  }
  CMTime time2 = v19;
  CMTime time1 = *v4;
  if (!CMTimeCompare(&time1, &time2))
  {
    CMTime v19 = v23;
    OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&v17, 0);
  }
  OZChannel::setSliderMax((OZChannel *)((char *)this + 18904), v9);
  return OZChannel::setSliderMax((OZChannel *)((char *)this + 19056), v10);
}

void sub_1B7D02AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void OZImageGenerator::initializeGeneratorBounds(OZImageGenerator *this, float a2, float a3, float a4)
{
  double v7 = (OZChannelBase *)((char *)this + 18904);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 18904), a2);
  OZChannelBase::reset(v7, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19056), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19056), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19208), a4);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19208), 0);
  *((unsigned char *)this + 19360) = 1;
}

uint64_t OZImageGenerator::setTimeOffsetAndDuration(OZImageGenerator *this, CMTime *a2, CMTime *a3)
{
  CMTime v13 = *a3;
  CMTime time1 = *a3;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) <= 0
    && (*(uint64_t (**)(OZImageGenerator *))(*(void *)this + 272))(this))
  {
    uint64_t v5 = (*(uint64_t (**)(OZImageGenerator *))(*(void *)this + 272))(this);
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&time1, (const OZSceneSettings *)(v5 + 336));
    uint64_t v6 = (*(uint64_t (**)(OZImageGenerator *))(*(void *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v8);
    operator*(&v8, time1.epoch, &time2);
    CMTime v13 = time2;
    time1.int64_t value = (CMTimeValue)&unk_1F113E428;
    PCString::~PCString(&v12);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  }
  CMTime time1 = *a2;
  CMTime v10 = v13;
  return OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&time1, 0);
}

void sub_1B7D02D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZSceneSettings::~OZSceneSettings((PCString *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageGenerator::parseBegin(OZImageGenerator *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 19360) = 1;
  return OZElement::parseBegin((OZElement *)this, a2);
}

uint64_t non-virtual thunk to'OZImageGenerator::parseBegin(OZImageGenerator *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 19312) = 1;
  return OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
}

uint64_t OZImageGenerator::variesOverTime(OZImageGenerator *this)
{
  return 0;
}

void OZImageGenerator::makeRenderImageSource(OZImageGenerator *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7D02E20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4049CE406CLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZImageGenerator::makeRenderImageSource(OZImageGenerator *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void OZImageGenerator::pixelTransformSupport(OZImageGenerator *this, const LiRenderParameters *a2, OZRenderParams *a3)
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v5, "subclass must implement");
  PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageGenerator.mm");
  PCException::PCException(exception, &v5, &v4, 226);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7D02EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void OZImageGenerator::getHelium(OZImageGenerator *this, LiAgent *a2, const OZRenderParams *a3)
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v5, "subclass must implement");
  PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageGenerator.mm");
  PCException::PCException(exception, &v5, &v4, 231);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7D02FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t OZImageGenerator::filteredEdges(OZImageGenerator *this)
{
  return 0;
}

void OZNULLBehavior::OZNULLBehavior(OZNULLBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *PCString v5 = &unk_1F11652C8;
  uint64_t v6 = v5 + 2;
  v5[2] = &unk_1F1165548;
  v5[6] = &unk_1F11657A0;
  PCURL::PCURL((PCURL *)&v7, @"NULL Behavior Missing");
  PCString::append(&v7, a3);
  (*(void (**)(void *, PCString *, void))(*v6 + 120))(v6, &v7, 0);
  PCString::~PCString(&v7);
}

void sub_1B7D0311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZBehavior::~OZBehavior(v10);
  _Unwind_Resume(a1);
}

void OZNULLBehavior::OZNULLBehavior(OZNULLBehavior *this, const OZNULLBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  *long long v3 = &unk_1F11652C8;
  v3[2] = &unk_1F1165548;
  v3[6] = &unk_1F11657A0;
}

void non-virtual thunk to'OZNULLBehavior::~OZNULLBehavior(OZNULLBehavior *this)
{
}

{
  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

void OZNULLBehavior::~OZNULLBehavior(OZNULLBehavior *this)
{
  OZBehavior::~OZBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelBehaviorRoot_Factory::getInstance(OZChannelBehaviorRoot_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBehaviorRoot_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    PCString v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelBehaviorRoot_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBehaviorRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBehaviorRoot_Factory::_instance;
}

void OZChannelBehaviorRoot::OZChannelBehaviorRoot(OZChannelBehaviorRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelBehaviorRoot_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1165810;
  *((void *)this + 2) = &unk_1F1165BA8;
  *((void *)this + 32) = 0;
}

void OZChannelBehaviorRoot::OZChannelBehaviorRoot(OZChannelBehaviorRoot *this, const OZChannelBehaviorRoot *a2, OZChannelFolder *a3)
{
  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *long long v3 = &unk_1F1165810;
  v3[2] = &unk_1F1165BA8;
  v3[32] = 0;
}

void non-virtual thunk to'OZChannelBehaviorRoot::~OZChannelBehaviorRoot(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelBehaviorRoot::~OZChannelBehaviorRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelBehaviorRoot::operator=(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 232))(a1, a2, 0);
}

__CFString *OZChannelBehaviorRoot::reset(OZChannelBase *this, uint64_t a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[2].var4.var0;
  if (var0) {
    (*((void (**)(__CFString *))var0->isa + 59))(var0);
  }
  OZChannelBase::reset(this, a2);
  __n128 result = this[2].var4.var0;
  if (result)
  {
    uint64_t v6 = (uint64_t (*)(void))*((void *)result->isa + 58);
    return (__CFString *)v6();
  }
  return result;
}

void OZChannelBehaviorRoot::clone(OZChannelBehaviorRoot *this)
{
}

void sub_1B7D03810(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelBehaviorRoot::compare(OZChannelBehaviorRoot *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result) {
    return (const OZChannelBase *)((__CFString *)*((void *)this + 32) == result[2].var4.var0
  }
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

void std::__call_once_param<std::tuple<OZChannelBehaviorRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D03924(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorRoot_Factory::OZChannelBehaviorRoot_Factory(OZChannelBehaviorRoot_Factory *this)
{
  long long v3 = xmmword_1B83817E0;
  long long v4 = xmmword_1B83838A0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1165C18;
  *((void *)this + 16) = &unk_1F1165CE8;
}

void sub_1B7D039F4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorRoot_Factory::create(OZChannelBehaviorRoot_Factory *this, const PCString *a2)
{
}

void sub_1B7D03AA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorRoot_Factory::createCopy(OZChannelBehaviorRoot_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D03BA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorRoot_Factory::createChannelCopy(OZChannelBehaviorRoot_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D03C98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZSingleChanCurveNode::OZSingleChanCurveNode(OZSingleChanCurveNode *this, OZSingleChanBehaviorIF *a2, OZChannel *a3)
{
  uint64_t v6 = (OZBehavior *)(*(uint64_t (**)(OZSingleChanBehaviorIF *))(*(void *)a2 + 72))(a2);
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, v6, a3);
  *(void *)this = &unk_1F1165D40;
  *((void *)this + 4) = a2;
  *((_DWORD *)this + 10) = a3->var3;
}

void OZSingleChanCurveNode::OZSingleChanCurveNode(OZSingleChanCurveNode *this, OZSingleChanBehaviorIF *a2, OZChannel *a3, int a4)
{
  CMTime v8 = (OZBehavior *)(*(uint64_t (**)(OZSingleChanBehaviorIF *))(*(void *)a2 + 72))(a2);
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, v8, a3);
  *(void *)this = &unk_1F1165D40;
  *((void *)this + 4) = a2;
  *((_DWORD *)this + 10) = a4;
}

void OZSingleChanCurveNode::~OZSingleChanCurveNode(OZSingleChanCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSingleChanCurveNode::solveNode(OZSingleChanCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 64))(*((void *)this + 4));
  if ((result & 1) == 0)
  {
    CMTime v10 = *(uint64_t (**)(__n128, __n128))(**((void **)this + 4) + 16);
    v8.n128_f64[0] = a3;
    v9.n128_f64[0] = a4;
    return v10(v8, v9);
  }
  return result;
}

uint64_t OZSingleChanCurveNode::solveNode(OZSingleChanCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 64))(*((void *)this + 4));
  if ((result & 1) == 0)
  {
    long long v4 = *(uint64_t (**)(void))(**((void **)this + 4) + 24);
    return v4();
  }
  return result;
}

uint64_t OZSingleChanCurveNode::getNeededRange(OZSingleChanCurveNode *this, OZCurveNodeParam *a2)
{
  return (*(uint64_t (**)(void, void, OZCurveNodeParam *))(**((void **)this + 4) + 32))(*((void *)this + 4), *((unsigned int *)this + 10), a2);
}

uint64_t OZSingleChanCurveNode::getNeededTime(OZSingleChanCurveNode *this, const CMTime *a2)
{
  return (*(uint64_t (**)(void, const CMTime *))(**((void **)this + 4) + 40))(*((void *)this + 4), a2);
}

uint64_t OZSingleChanCurveNode::isPointToPoint(OZSingleChanCurveNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 48))();
}

uint64_t OZSingleChanCurveNode::isRemappingTime(OZSingleChanCurveNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 56))();
}

void OZSingleChanCurveNode::cloneNode(OZSingleChanCurveNode *this)
{
}

void sub_1B7D04088(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChanCurveNode::compare(OZSingleChanCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

void OZFontFace::OZFontFace(OZFontFace *this, const PCString *a2, const PCString *a3, OZFontFamily *a4)
{
  *(void *)this = &unk_1F1165E38;
  PCString v7 = (PCString *)((char *)this + 16);
  PCString::PCString((PCString *)this + 1, a2);
  PCString::PCString(v7, a3);
  *((void *)this + 3) = a4;
}

void sub_1B7D0418C(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFontFace::~OZFontFace(PCString *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1165E38;
  uint64_t v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1165E38;
  uint64_t v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZCoreTextTypeface::OZCoreTextTypeface(OZCoreTextTypeface *this, const PCString *a2, const PCString *a3, int a4, OZFontFamily *a5)
{
  OZFontFace::OZFontFace(this, a2, a3, a5);
  *(void *)uint64_t v6 = &unk_1F1165E60;
  *(_DWORD *)(v6 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a4;
}

void OZCoreTextTypeface::~OZCoreTextTypeface(PCString *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1165E38;
  uint64_t v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1165E38;
  uint64_t v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1165E38;
  uint64_t v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanTransformNodeRef::OZChanTransformNodeRef(OZChanTransformNodeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  *PCString v5 = &unk_1F1165EB0;
  v5[2] = &unk_1F1166230;
}

void OZChanTransformNodeRef::OZChanTransformNodeRef(OZChanTransformNodeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *long long v3 = &unk_1F1165EB0;
  v3[2] = &unk_1F1166230;
}

void non-virtual thunk to'OZChanTransformNodeRef::~OZChanTransformNodeRef(OZChanTransformNodeRef *this)
{
}

{
  uint64_t vars8;

  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanTransformNodeRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanTransformNodeRef::~OZChanTransformNodeRef(OZChanTransformNodeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanTransformNodeRef::clone(OZChanTransformNodeRef *this)
{
}

void sub_1B7D0457C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanTransformNodeRef::getTransformNode(OZChannelBase *this)
{
  uint64_t result = OZChanSceneNodeRef::getNode(this);
  if (result)
  {
  }
  return result;
}

uint64_t OZChanTransformNodeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *lpsrc)
{
  if (!lpsrc
  {
    return 0;
  }

  return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
}

void OZAlignSimBehavior::OZAlignSimBehavior(OZAlignSimBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *PCString v5 = &unk_1F11662A0;
  v5[2] = &unk_1F1166598;
  v5[6] = &unk_1F11667F0;
  v5[42] = &unk_1F1166848;
  PCURL::PCURL((PCURL *)&v7, @"Align Sim Behavior Rotation Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align Sim Behavior Rotation Axis");
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 504), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align Sim Behavior Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Align Sim Behavior Axis");
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align Sim Behavior Invert Axis");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1016), &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align Sim Behavior Spring Coefficient");
  OZChannelDouble::OZChannelDouble((OZAlignSimBehavior *)((char *)this + 1168), 100.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Align Sim Behavior Drag Coefficient");
  OZChannelDouble::OZChannelDouble((OZAlignSimBehavior *)((char *)this + 1320), 15.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1168), 500.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1320), 40.0);
}

void sub_1B7D04960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior::OZAlignSimBehavior(OZAlignSimBehavior *this, OZAlignSimBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11662A0;
  *(void *)(v5 + 16) = &unk_1F1166598;
  *(void *)(v5 + 48) = &unk_1F11667F0;
  *(void *)(v5 + 336) = &unk_1F1166848;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZAlignSimBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760), (OZAlignSimBehavior *)((char *)a2 + 760), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  *((void *)this + 146) = &unk_1F1100CF0;
  *((void *)this + 148) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((void *)this + 165) = &unk_1F1100CF0;
  *((void *)this + 167) = &unk_1F1101050;
}

void sub_1B7D04BD4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior::~OZAlignSimBehavior(OZAlignSimBehavior *this)
{
  *(void *)this = &unk_1F11662A0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166598;
  *((void *)this + 6) = &unk_1F11667F0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166848;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1168));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1016));
  OZChannelEnum::~OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760));
  OZChannelEnum::~OZChannelEnum((OZAlignSimBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZAlignSimBehavior::~OZAlignSimBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZAlignSimBehavior::~OZAlignSimBehavior(OZAlignSimBehavior *this)
{
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 48));
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZAlignSimBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 760, (uint64_t)v5 + 760);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);

  return OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
}

void OZAlignSimBehavior::accumForces(OZAlignSimBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v74 = *(CMTime *)((char *)a2 + 176);
  CMTime v73 = v74;
  if ((*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v73, 0, 1, 1))
  {
    double v5 = *((double *)a2 + 7);
    double v6 = *((double *)a2 + 8);
    double v7 = *((double *)a2 + 9);
    CMTime v72 = v74;
    double v8 = 0.0;
    signed int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v72, 0.0);
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    if (ValueAsInt <= 2)
    {
      double v8 = dbl_1B8383958[ValueAsInt];
      double v10 = dbl_1B8383970[ValueAsInt];
      double v11 = dbl_1B8383988[ValueAsInt];
      double v12 = dbl_1B83839A0[ValueAsInt];
      double v13 = dbl_1B83839B8[ValueAsInt];
      double v14 = dbl_1B83839D0[ValueAsInt];
    }
    double v15 = v5 * v14;
    double v16 = v6 * v13;
    double v17 = v7 * v12;
    double v18 = v17 * v17 + v16 * v16 + v15 * v15;
    if (v18 <= -0.0000001 || v18 >= 0.0000001)
    {
      double v19 = sqrt(v18);
      if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
      {
        double v15 = v15 / v19;
        double v16 = v16 / v19;
        double v17 = v17 / v19;
      }
      double v20 = 0.0;
      int v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v74, 0.0);
      double v22 = -v15;
      double v23 = -v16;
      double v24 = -v17;
      if (!v21)
      {
        double v22 = v15;
        double v23 = v16;
        double v24 = v17;
      }
      *(double *)uint64_t v71 = v22;
      *(double *)&v71[1] = v10 * v24 - v8 * v23;
      *(double *)&v71[6] = v24;
      *(double *)&v71[7] = v11 * v23 - v10 * v22;
      *(double *)&v71[2] = v11;
      *(double *)&v71[3] = v23;
      *(double *)&v71[4] = v8 * v22 - v11 * v24;
      *(double *)&v71[5] = v10;
      *(double *)&v71[8] = v8;
      long long v66 = 0x3FF0000000000000uLL;
      long long v67 = 0uLL;
      long long v68 = 0x3FF0000000000000uLL;
      long long v69 = 0uLL;
      uint64_t v70 = 0x3FF0000000000000;
      CMTime v65 = v74;
      int v25 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v65, 0.0);
      if (v25 == 2)
      {
        long long v66 = 0uLL;
        long long v67 = xmmword_1B7E733D0;
        long long v68 = xmmword_1B7E733D0;
        long long v69 = xmmword_1B7E7C890;
      }
      else
      {
        if (v25 != 1)
        {
LABEL_16:
          *(double *)v26.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v71, (double *)&v66, (uint64_t)v64);
          double v60 = 1.0;
          double v61 = 0.0;
          double v62 = 0.0;
          double v63 = 0.0;
          PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v64, (uint64_t)&v60, v26, v27, v28, v29, v30);
          double v32 = *((double *)a2 + 3);
          double v31 = *((double *)a2 + 4);
          double v33 = *((double *)a2 + 5);
          double v34 = *((double *)a2 + 6);
          double v35 = v32 * v32 + v31 * v31 + v33 * v33 + v34 * v34;
          if (v35 != 0.0)
          {
            double v32 = v32 / v35;
            double v31 = -v31 / v35;
            double v33 = -v33 / v35;
            double v34 = -v34 / v35;
          }
          double v36 = v60 * v32 - (v63 * v34 + v62 * v33 + v61 * v31);
          double v37 = v61 * v33 - v62 * v31;
          double v38 = v62 * v34 - v63 * v33 + v60 * v31 + v61 * v32;
          double v39 = v63 * v31 - v61 * v34 + v60 * v33 + v62 * v32;
          double v40 = v37 + v60 * v34 + v63 * v32;
          double v41 = sqrt(v36 * v36 + v38 * v38 + v39 * v39 + v40 * v40);
          double v42 = 1.0;
          if (v41 == 0.0)
          {
            double v44 = 0.0;
            double v45 = 0.0;
            double v46 = 0.0;
            double v43 = 1.0;
          }
          else
          {
            double v43 = v36 / v41;
            double v44 = v38 / v41;
            double v45 = v39 / v41;
            double v46 = v40 / v41;
          }
          double v47 = sqrt(v44 * v44 + v45 * v45 + v46 * v46);
          if (v47 >= 0.000000100000001 || v47 <= -0.000000100000001) {
            double v42 = v47;
          }
          double v49 = v44 / v42;
          double v50 = v45 / v42;
          double v51 = v46 / v42;
          long double v52 = acos(v43);
          double v53 = v52 + v52;
          if (v53 > 3.14159265) {
            double v53 = v53 + -6.28318531;
          }
          if (v53 >= -3.14159265) {
            double v54 = v53;
          }
          else {
            double v54 = v53 + 6.28318531;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), &v74, 0.0);
          double v56 = v55;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), &v74, 0.0);
          double v58 = *((double *)a2 + 12);
          double v59 = v50 * (v56 * v54) - v57 * *((double *)a2 + 11) + *((double *)a2 + 20);
          *((double *)a2 + 19) = *((double *)a2 + 19) + v49 * (v56 * v54) - v57 * *((double *)a2 + 10);
          *((double *)a2 + 20) = v59;
          *((double *)a2 + 21) = v51 * (v56 * v54) - v57 * v58 + *((double *)a2 + 21);
          return;
        }
        long long v69 = 0uLL;
        long long v66 = xmmword_1B7E733E0;
        long long v67 = xmmword_1B7E7E030;
        long long v68 = 0uLL;
        double v20 = 1.0;
      }
      uint64_t v70 = *(void *)&v20;
      goto LABEL_16;
    }
  }
}

double PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7)
{
  a3.i64[0] = *(void *)a1;
  a4.i64[0] = *(void *)(a1 + 32);
  double v7 = *(double *)(a1 + 64);
  *(double *)a7.i64 = *(double *)a1 + 1.0;
  *(double *)a2 = sqrt(fmax(*(double *)a7.i64 + *(double *)a4.i64 + v7, 0.0)) * 0.5;
  *(double *)a7.i64 = sqrt(fmax(*(double *)a7.i64 - *(double *)a4.i64 - v7, 0.0)) * 0.5;
  *(double *)a3.i64 = 1.0 - *(double *)a3.i64;
  *(double *)a6.i64 = sqrt(fmax(*(double *)a3.i64 + *(double *)a4.i64 - v7, 0.0)) * 0.5;
  *(double *)a3.i64 = sqrt(fmax(*(double *)a3.i64 - *(double *)a4.i64 + v7, 0.0)) * 0.5;
  *(double *)a4.i64 = *(double *)(a1 + 56) - *(double *)(a1 + 40);
  v8.f64[0] = NAN;
  v8.f64[1] = NAN;
  int8x16_t v9 = (int8x16_t)vnegq_f64(v8);
  int8x16_t v10 = vbslq_s8(v9, a7, a4);
  *(void *)(a2 + 8) = v10.i64[0];
  *(double *)v10.i64 = *(double *)(a1 + 16) - *(double *)(a1 + 48);
  int8x16_t v11 = vbslq_s8(v9, a6, v10);
  *(void *)(a2 + 16) = v11.i64[0];
  *(double *)v11.i64 = *(double *)(a1 + 24) - *(double *)(a1 + 8);
  a3.i64[0] = vbslq_s8(v9, a3, v11).u64[0];
  *(void *)(a2 + 24) = a3.i64[0];
  return *(double *)a3.i64;
}

void OZAlignSimBehavior::accumForces(OZAlignSimBehavior *this, OZSimStateArray *a2)
{
  CMTime v72 = *(CMTime *)((unsigned char *)a2 + 1);
  CMTime v71 = v72;
  if (!(*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v71, 0, 1, 1))return;
  CMTime v70 = v72;
  double v57 = 0.0;
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v70, 0.0);
  double v5 = 0.0;
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if (ValueAsInt <= 2)
  {
    double v57 = dbl_1B8383958[ValueAsInt];
    double v5 = dbl_1B8383970[ValueAsInt];
    double v6 = dbl_1B8383988[ValueAsInt];
    double v7 = dbl_1B83839A0[ValueAsInt];
    double v8 = dbl_1B83839B8[ValueAsInt];
    double v9 = dbl_1B83839D0[ValueAsInt];
  }
  long long v65 = 0x3FF0000000000000uLL;
  long long v66 = 0uLL;
  long long v67 = 0x3FF0000000000000uLL;
  long long v68 = 0uLL;
  uint64_t v69 = 0x3FF0000000000000;
  CMTime v64 = v72;
  double v10 = 0.0;
  int v11 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v64, 0.0);
  if (v11 == 2)
  {
    long long v65 = 0uLL;
    long long v66 = xmmword_1B7E733D0;
    long long v67 = xmmword_1B7E733D0;
    long long v68 = xmmword_1B7E7C890;
  }
  else
  {
    if (v11 != 1) {
      goto LABEL_9;
    }
    long long v68 = 0uLL;
    long long v65 = xmmword_1B7E733E0;
    long long v66 = xmmword_1B7E7E030;
    long long v67 = 0uLL;
    double v10 = 1.0;
  }
  uint64_t v69 = *(void *)&v10;
LABEL_9:
  int v12 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v72, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), &v72, 0.0);
  double v56 = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), &v72, 0.0);
  double v16 = *(double **)a2;
  double v15 = (double *)*((void *)a2 + 1);
  if (*(double **)a2 != v15)
  {
    double v17 = v14;
    double v54 = v8;
    double v55 = v7;
    double v53 = v9;
    do
    {
      double v18 = v9 * v16[7];
      double v19 = v8 * v16[8];
      double v20 = v7 * v16[9];
      double v21 = v18 * v18 + v19 * v19 + v20 * v20;
      if (v21 <= -0.0000001 || v21 >= 0.0000001)
      {
        double v22 = sqrt(v21);
        if (v22 <= -0.000000100000001 || v22 >= 0.000000100000001)
        {
          double v18 = v18 / v22;
          double v19 = v19 / v22;
          double v20 = v20 / v22;
        }
        if (v12)
        {
          double v18 = -v18;
          double v19 = -v19;
          double v20 = -v20;
        }
        *(double *)double v63 = v18;
        *(double *)&v63[1] = v5 * v20 - v57 * v19;
        *(double *)&v63[6] = v20;
        *(double *)&v63[7] = v6 * v19 - v5 * v18;
        *(double *)&v63[2] = v6;
        *(double *)&v63[3] = v19;
        *(double *)&v63[4] = v57 * v18 - v6 * v20;
        *(double *)&v63[5] = v5;
        *(double *)&v63[8] = v57;
        *(double *)v23.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v63, (double *)&v65, (uint64_t)v62);
        double v58 = 1.0;
        double v60 = 0.0;
        double v61 = 0.0;
        double v59 = 0.0;
        PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v62, (uint64_t)&v58, v23, v24, v25, v26, v27);
        double v29 = v16[3];
        double v28 = v16[4];
        double v30 = v16[5];
        double v31 = v16[6];
        double v32 = v29 * v29 + v28 * v28 + v30 * v30 + v31 * v31;
        if (v32 != 0.0)
        {
          double v29 = v29 / v32;
          double v28 = -v28 / v32;
          double v30 = -v30 / v32;
          double v31 = -v31 / v32;
        }
        double v33 = v58 * v29 - (v61 * v31 + v60 * v30 + v59 * v28);
        double v34 = v58 * v28 + v59 * v29;
        double v35 = v58 * v30 + v60 * v29;
        double v36 = v58 * v31 + v61 * v29;
        double v37 = v60 * v31 - v61 * v30;
        double v38 = v61 * v28 - v59 * v31;
        double v39 = v59 * v30 - v60 * v28;
        double v40 = v37 + v34;
        double v41 = v38 + v35;
        double v42 = v39 + v36;
        double v43 = sqrt(v40 * v40 + v41 * v41 + v42 * v42);
        if (v43 < 0.000000100000001 && v43 > -0.000000100000001) {
          double v43 = 1.0;
        }
        double v45 = v40 / v43;
        double v46 = v41 / v43;
        double v47 = v42 / v43;
        long double v48 = acos(v33);
        double v49 = v48 + v48;
        if (v49 > 3.14159265) {
          double v49 = v49 + -6.28318531;
        }
        if (v49 < -3.14159265) {
          double v49 = v49 + 6.28318531;
        }
        double v50 = v56 * v49;
        double v51 = v17 * v16[12];
        double v52 = v16[20] + v46 * v50 - v17 * v16[11];
        v16[19] = v16[19] + v45 * v50 - v17 * v16[10];
        v16[20] = v52;
        v16[21] = v47 * v50 - v51 + v16[21];
        double v15 = (double *)*((void *)a2 + 1);
        double v8 = v54;
        double v7 = v55;
        double v9 = v53;
      }
      v16 += 31;
    }
    while (v16 != v15);
  }
}

void OZAlignSimBehavior::accumInitialValues(OZAlignSimBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v44 = *(CMTime *)((char *)a2 + 176);
  CMTime v43 = v44;
  if ((*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v43, 0, 1, 1))
  {
    double v5 = *((double *)a2 + 7);
    double v6 = *((double *)a2 + 8);
    double v7 = *((double *)a2 + 9);
    CMTime v42 = v44;
    double v8 = 0.0;
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v42, 0.0);
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    if (ValueAsInt <= 2)
    {
      double v8 = dbl_1B83839D0[ValueAsInt];
      double v10 = dbl_1B83839B8[ValueAsInt];
      double v11 = dbl_1B83839A0[ValueAsInt];
      double v12 = dbl_1B8383988[ValueAsInt];
      double v13 = dbl_1B8383970[ValueAsInt];
      double v14 = dbl_1B8383958[ValueAsInt];
    }
    double v15 = v5 * v8;
    double v16 = v6 * v10;
    double v17 = v7 * v11;
    double v18 = v15 * v15 + v16 * v16 + v17 * v17;
    if (v18 <= -0.0000001 || v18 >= 0.0000001)
    {
      double v19 = sqrt(v18);
      if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
      {
        double v15 = v15 / v19;
        double v16 = v16 / v19;
        double v17 = v17 / v19;
      }
      double v20 = 0.0;
      int v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v44, 0.0);
      double v22 = -v15;
      double v23 = -v16;
      double v24 = -v17;
      if (!v21)
      {
        double v24 = v17;
        double v23 = v16;
        double v22 = v15;
      }
      *(double *)double v41 = v22;
      *(double *)&v41[1] = v13 * v24 - v14 * v23;
      *(double *)&v41[6] = v24;
      *(double *)&v41[7] = v12 * v23 - v13 * v22;
      *(double *)&v41[2] = v12;
      *(double *)&v41[3] = v23;
      *(double *)&v41[4] = v14 * v22 - v12 * v24;
      *(double *)&v41[5] = v13;
      *(double *)&v41[8] = v14;
      long long v36 = 0x3FF0000000000000uLL;
      long long v37 = 0uLL;
      long long v38 = 0x3FF0000000000000uLL;
      long long v39 = 0uLL;
      uint64_t v40 = 0x3FF0000000000000;
      CMTime v35 = v44;
      int v25 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v35, 0.0);
      if (v25 == 2)
      {
        long long v36 = 0uLL;
        long long v37 = xmmword_1B7E733D0;
        long long v38 = xmmword_1B7E733D0;
        long long v39 = xmmword_1B7E7C890;
      }
      else
      {
        if (v25 != 1) {
          goto LABEL_16;
        }
        long long v39 = 0uLL;
        long long v36 = xmmword_1B7E733E0;
        long long v37 = xmmword_1B7E7E030;
        long long v38 = 0uLL;
        double v20 = 1.0;
      }
      uint64_t v40 = *(void *)&v20;
LABEL_16:
      *(double *)v26.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v41, (double *)&v36, (uint64_t)v34);
      uint64_t v31 = 0x3FF0000000000000;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v34, (uint64_t)&v31, v26, v27, v28, v29, v30);
      if (&v31 != (uint64_t *)((char *)a2 + 24))
      {
        *((void *)a2 + 3) = v31;
        *((_OWORD *)a2 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v32;
        *((void *)a2 + 6) = v33;
      }
    }
  }
}

void OZAlignSimBehavior::accumInitialValues(OZAlignSimBehavior *this, OZSimStateArray *a2, int a3)
{
  CMTime v47 = *(CMTime *)((unsigned char *)a2 + 1);
  CMTime v46 = v47;
  if (!(*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v46, 0, 1, 1))return;
  CMTime v45 = v47;
  double v6 = 0.0;
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v45, 0.0);
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  if (ValueAsInt <= 2)
  {
    double v6 = dbl_1B8383958[ValueAsInt];
    double v8 = dbl_1B8383970[ValueAsInt];
    double v9 = dbl_1B8383988[ValueAsInt];
    double v10 = dbl_1B83839A0[ValueAsInt];
    double v11 = dbl_1B83839B8[ValueAsInt];
    double v12 = dbl_1B83839D0[ValueAsInt];
  }
  long long v40 = 0x3FF0000000000000uLL;
  long long v41 = 0uLL;
  long long v42 = 0x3FF0000000000000uLL;
  long long v43 = 0uLL;
  uint64_t v44 = 0x3FF0000000000000;
  CMTime v39 = v47;
  double v13 = 0.0;
  int v14 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v39, 0.0);
  if (v14 == 2)
  {
    long long v40 = 0uLL;
    long long v41 = xmmword_1B7E733D0;
    long long v42 = xmmword_1B7E733D0;
    long long v43 = xmmword_1B7E7C890;
    goto LABEL_8;
  }
  if (v14 == 1)
  {
    long long v43 = 0uLL;
    long long v40 = xmmword_1B7E733E0;
    long long v41 = xmmword_1B7E7E030;
    long long v42 = 0uLL;
    double v13 = 1.0;
LABEL_8:
    uint64_t v44 = *(void *)&v13;
  }
  int v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v47, 0.0);
  double v18 = a2;
  uint64_t v17 = *(void *)a2;
  uint64_t v16 = *((void *)v18 + 1);
  if (v16 != v17 && a3 >= 1)
  {
    int v19 = v15;
    uint64_t v20 = v16 - 248;
    int v21 = 1;
    do
    {
      double v22 = v12 * *(double *)(v20 + 56);
      double v23 = v11 * *(double *)(v20 + 64);
      double v24 = v10 * *(double *)(v20 + 72);
      double v25 = v22 * v22 + v23 * v23 + v24 * v24;
      if (v25 <= -0.0000001 || v25 >= 0.0000001)
      {
        double v26 = sqrt(v25);
        if (v26 <= -0.000000100000001 || v26 >= 0.000000100000001)
        {
          double v22 = v22 / v26;
          double v23 = v23 / v26;
          double v24 = v24 / v26;
        }
        if (v19)
        {
          double v24 = -v24;
          double v23 = -v23;
          double v22 = -v22;
        }
        *(double *)long long v38 = v22;
        *(double *)&v38[1] = v8 * v24 - v6 * v23;
        *(double *)&v38[6] = v24;
        *(double *)&v38[7] = v9 * v23 - v8 * v22;
        *(double *)&v38[2] = v9;
        *(double *)&v38[3] = v23;
        *(double *)&v38[4] = v6 * v22 - v9 * v24;
        *(double *)&v38[5] = v8;
        *(double *)&v38[8] = v6;
        *(double *)v27.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v38, (double *)&v40, (uint64_t)v37);
        uint64_t v34 = 0x3FF0000000000000;
        uint64_t v36 = 0;
        long long v35 = 0uLL;
        PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v37, (uint64_t)&v34, v27, v28, v29, v30, v31);
        if ((uint64_t *)(v20 + 24) != &v34)
        {
          *(void *)(v20 + 24) = v34;
          long long v32 = v35;
          *(void *)(v20 + 48) = v36;
          *(_OWORD *)(v20 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v32;
        }
      }
      if (v20 == v17) {
        break;
      }
      v20 -= 248;
    }
    while (v21++ < a3);
  }
}

void OZLinkBehavior::OZLinkBehavior(OZLinkBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 864));
  *(void *)this = &unk_1F1166888;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166C00;
  *((void *)this + 6) = &unk_1F1166E58;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166EB0;
  *((void *)this + 67) = &unk_1F1166ED8;
  *((void *)this + 108) = &unk_1F1166F38;
  PCURL::PCURL((PCURL *)&v42, @"Link Behavior Source Object");
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064), &v42, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0);
  PCString::~PCString(&v42);
  OZChannelRef::OZChannelRef((OZLinkBehavior *)((char *)this + 1272));
  PCURL::PCURL((PCURL *)&v42, @"Link Behavior Source Attribute");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 1296), 0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD5u, 2, 0, 0);
  PCString::~PCString(&v42);
  *((unsigned char *)this + 1450) = 0;
  *((unsigned char *)this + 1464) = 0;
  *((_OWORD *)this + 9OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 93) = _Q0;
  *((void *)this + 190) = 0;
  *((void *)this + 189) = 0;
  *((void *)this + 188) = (char *)this + 1512;
  *((void *)this + 193) = 0;
  *((void *)this + 19OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 191) = (char *)this + 1536;
  PCURL::PCURL(v11, @"Link Behavior Apply Mode Enum");
  PCURL::PCURL((PCURL *)&v41, @"Link Behavior Apply Mode");
  Instance = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(v12);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1552), 2u, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v14, @"Link Behavior Scale");
  uint64_t v16 = (OZLinkBehavior::OZLinkBehavior_scaleChanInfo *)OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(v15);
  uint64_t v17 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 1808), &v42, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v42);
  PCURL::PCURL(v18, @"Link Behavior Mix Mode Enum");
  PCURL::PCURL((PCURL *)&v41, @"Link Behavior Mix Mode");
  uint64_t v20 = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1960), 6u, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, v20, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v21, @"Link Behavior Ease Range");
  double v23 = (OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *)OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(v22);
  double v24 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(v23);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 2216), 10, &v42, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, (OZChannelImpl *)v23, v24);
  PCString::~PCString(&v42);
  PCURL::PCURL(v25, @"Link Behavior Custom Mix");
  int8x16_t v27 = (OZLinkBehavior::OZLinkBehavior_customMixChanInfo *)OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(v26);
  int8x16_t v28 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 2368), 1.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v42);
  PCURL::PCURL(v29, @"Link Behavior Apply Link When Enum");
  PCURL::PCURL((PCURL *)&v41, @"Link Behavior Apply Link When");
  int8x16_t v31 = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(v30);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2520), 0, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, v31, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v32, @"Link Behavior Clamp Source Value Within Range");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2776), 1, &v42, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCString::PCString(v33, "Continuous;Fixed");
  PCString::PCString(&v41, "Source Frame Mode");
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2928), &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCString::PCString(v34, "Source Frame");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3184), &v42, (OZChannelFolder *)((char *)this + 56), 0xDAu, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v35, @"Link Behavior Size Offset X");
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3336), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v36, @"Link Behavior Size Offset Y");
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3488), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v37, @"Link Behavior Edge Offset");
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3640), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD8u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCString::PCString(v38, "Disable Automatic Channel Scale");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3792), 0, &v42, (OZChannelFolder *)((char *)this + 56), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v42);
  long long v40 = xmmword_1B8380BC0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1064, (__n128 *)&v40);
  long long v39 = xmmword_1B8380C00;
  OZChanObjectRefWithPicker::removeAcceptedFactoryUUID((uint64_t)this + 1064, (int32x4_t *)&v39);
  *((unsigned char *)this + 1265) = 1;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1064, 1);
  *((void *)this + 493) = 0;
  *((unsigned char *)this + 1449) = 1;
  OZLinkBehavior::initChannelRanges(this);
}

void sub_1B7D06628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannel *a11, OZChannel *a12, OZChannelEnum *a13, OZChannel *a14, OZChannelEnum *a15, void **a16, void **a17, OZChannel *a18, void **a19, OZLocking *a20)
{
  PCString::~PCString((PCString *)(v28 - 88));
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v27);
  OZChannel::~OZChannel(v26);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelBool::~OZChannelBool(v24);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v20 + 1528, *a16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v20 + 1504, *a17);
  OZChannel::~OZChannel(a18);
  OZChannelRef::~OZChannelRef(a19);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v22);
  OZLocking::~OZLocking(a20);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v20);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::initChannelRanges(OZLinkBehavior *this)
{
  char v2 = (OZChannel *)((char *)this + 1552);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1552), 0);
  OZChannel::setDefaultValue(v2, 2.0);
  OZChannelBase::reset((OZChannelBase *)v2, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1960), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1960), 6.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1960), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 2216), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2216), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2216), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2216), 100.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2216), 10.0);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2216), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2216), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2216), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 2368), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2368), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2368), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2368), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2368), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2368), 0.01);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2368), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2368), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2520), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2520), 0.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2520), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2776), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2776), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2776), 0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1808), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1808), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1808), 0.5);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1808), 0.1);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1808), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1808), 0);
  *((void *)this + 18OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
}

void OZLinkBehavior::OZLinkBehavior(OZLinkBehavior *this, const OZLinkBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 864));
  *(void *)this = &unk_1F1166888;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166C00;
  *((void *)this + 6) = &unk_1F1166E58;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166EB0;
  *((void *)this + 67) = &unk_1F1166ED8;
  *((void *)this + 108) = &unk_1F1166F38;
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064), (const OZLinkBehavior *)((char *)a2 + 1064), (OZChannelFolder *)((char *)this + 56));
  OZChannelRef::OZChannelRef((OZLinkBehavior *)((char *)this + 1272));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1296), (const OZChannelBase *)((char *)a2 + 1296), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 16OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101490;
  *((void *)this + 164) = &unk_1F11017F0;
  *((unsigned char *)this + 1450) = 0;
  *((unsigned char *)this + 1464) = 0;
  *((_OWORD *)this + 9OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 93) = _Q0;
  *((void *)this + 190) = 0;
  *((void *)this + 189) = 0;
  *((void *)this + 188) = (char *)this + 1512;
  *((void *)this + 193) = 0;
  *((void *)this + 19OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 191) = (char *)this + 1536;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1552), (const OZLinkBehavior *)((char *)a2 + 1552), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1808), (const OZChannelBase *)((char *)a2 + 1808), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 226) = &unk_1F1100CF0;
  *((void *)this + 228) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1960), (const OZLinkBehavior *)((char *)a2 + 1960), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2216), (const OZChannelBase *)((char *)a2 + 2216), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 277) = &unk_1F1100CF0;
  *((void *)this + 279) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2368), (const OZChannelBase *)((char *)a2 + 2368), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 296) = &unk_1F1100CF0;
  *((void *)this + 298) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2520), (const OZLinkBehavior *)((char *)a2 + 2520), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2776), (const OZChannelBase *)((char *)a2 + 2776), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2928), (const OZLinkBehavior *)((char *)a2 + 2928), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3184), (const OZChannelBase *)((char *)a2 + 3184), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3336), (const OZChannelBase *)((char *)a2 + 3336), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 417) = &unk_1F1100CF0;
  *((void *)this + 419) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3488), (const OZChannelBase *)((char *)a2 + 3488), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 436) = &unk_1F1100CF0;
  *((void *)this + 438) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3640), (const OZChannelBase *)((char *)a2 + 3640), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 455) = &unk_1F1100CF0;
  *((void *)this + 457) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3792), (const OZChannelBase *)((char *)a2 + 3792), (OZChannelFolder *)((char *)this + 56));
  long long v12 = xmmword_1B8380BC0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1064, (__n128 *)&v12);
  long long v11 = xmmword_1B8380C00;
  OZChanObjectRefWithPicker::removeAcceptedFactoryUUID((uint64_t)this + 1064, (int32x4_t *)&v11);
  *((unsigned char *)this + 1265) = 1;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1064, 1);
  *((unsigned char *)this + 1218) = 1;
  *((unsigned char *)this + 1449) = 0;
  OZLinkBehavior::setSourceChannelRef(this, (std::string *)a2 + 53, 1);
  OZLinkBehavior::copy(this, a2);
}

void sub_1B7D06F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, OZChannelEnum *a11, OZChannel *a12, OZChannelEnum *a13, OZChannel *a14, OZChannelEnum *a15, void **a16, void **a17, OZChannel *a18, void **a19, OZLocking *a20)
{
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(v25);
  OZChannelPercent::~OZChannelPercent(v24);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v20 + 1528, *a16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v20 + 1504, *a17);
  OZChannel::~OZChannel(a18);
  OZChannelRef::~OZChannelRef(a19);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v21);
  OZLocking::~OZLocking(a20);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v20);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::setSourceChannelRef(OZLinkBehavior *this, std::string *a2, int a3)
{
  double v6 = (std::string *)((char *)this + 1272);
  if (OZChannelRef::operator!=((unsigned __int8 *)a2, (unsigned __int8 *)this + 1272))
  {
    OZChannelRef::operator=(v6, a2);
    SourceChannel = OZLinkBehavior::getSourceChannel(this);
    ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
    if (OZLinkBehavior::areChannelsCompatible(this, SourceChannel, ChanBase, 0))
    {
      OZLinkBehavior::buildExpressions(this);
    }
    else
    {
      OZLinkBehavior::clearExpressions(this, a3);
    }
  }
}

double OZLinkBehavior::copy(OZLinkBehavior *this, const OZBehavior *lpsrc)
{
  if (v3)
  {
    uint64_t v5 = v3;
    OZChannel::setValue((OZChannel *)this + 7, (const OZChannelBase *)(v3 + 1064));
    OZChannelRef::operator=((std::string *)this + 53, (const std::string *)v5 + 53);
    OZChannelBase::operator=((uint64_t)this + 1296, (uint64_t)(v5 + 1296));
    OZChannel::setValue((OZChannel *)((char *)this + 1552), (const OZChannelBase *)(v5 + 1552));
    OZChannel::setValue((OZChannel *)((char *)this + 1808), (const OZChannelBase *)(v5 + 1808));
    OZChannel::setValue((OZChannel *)((char *)this + 1960), (const OZChannelBase *)(v5 + 1960));
    OZChannel::setValue((OZChannel *)((char *)this + 2216), (const OZChannelBase *)(v5 + 2216));
    OZChannel::setValue((OZChannel *)((char *)this + 2368), (const OZChannelBase *)(v5 + 2368));
    OZChannel::setValue((OZChannel *)((char *)this + 2520), (const OZChannelBase *)(v5 + 2520));
    OZChannel::setValue((OZChannel *)((char *)this + 2776), (const OZChannelBase *)(v5 + 2776));
    OZChannel::setValue((OZChannel *)((char *)this + 2928), (const OZChannelBase *)(v5 + 2928));
    OZChannel::setValue((OZChannel *)((char *)this + 3184), (const OZChannelBase *)(v5 + 3184));
    *((void *)this + 18OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)v5 + 182);
    *((unsigned char *)this + 1464) = v5[1464];
    uint64_t v6 = *((void *)v5 + 188);
    if ((char *)v6 != v5 + 1512)
    {
      double v7 = *(void **)(v6 + 40);
      if (!v7[5] || !v7[6] || !v7[7]) {
        OZLinkBehavior::resolveExpressionChannels((OZChannel *)v5);
      }
      operator new();
    }
    double result = *((double *)v5 + 182);
    *((double *)this + 18OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = result;
  }
  return result;
}

void sub_1B7D07338(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B3C40905E94F1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::~OZLinkBehavior(OZLinkBehavior *this)
{
  *(void *)this = &unk_1F1166888;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166C00;
  *((void *)this + 6) = &unk_1F1166E58;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1166EB0;
  *((void *)this + 67) = &unk_1F1166ED8;
  *((void *)this + 108) = &unk_1F1166F38;
  int v2 = theApp
    && OZBehavior::getScene(this)
    && *(unsigned char *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1848) == 0;
  OZLinkBehavior::clearAll(this, v2);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3336));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3184));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 2928));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2776));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 2520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2216));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 1960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1808));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 1552));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1528, *((void **)this + 192));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1504, *((void **)this + 189));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1296));
  OZChannelRef::~OZChannelRef((void **)this + 159);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064));
  *((void *)this + 108) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 872));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZLinkBehavior::~OZLinkBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLinkBehavior::clearAll(OZLinkBehavior *this, int a2)
{
  OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 1064), 0, a2 ^ 1u);
  OZLinkBehavior::clearExpressions(this, a2);
  PCString::PCString(&v4, "");
  OZChannelRef::OZChannelRef((OZChannelRef *)&v5, &v4);
  OZLinkBehavior::setSourceChannelRef(this, &v5, a2);
  OZChannelRef::~OZChannelRef((void **)&v5.__r_.__value_.__l.__data_);
  PCString::~PCString(&v4);
}

void sub_1B7D07604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, void *a10)
{
}

void non-virtual thunk to'OZLinkBehavior::~OZLinkBehavior(OZLinkBehavior *this)
{
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 48));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 336));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannel *OZLinkBehavior::resolveExpressionChannels(OZChannel *this)
{
  var17 = this[9].var17;
  p_var18 = &this[9].var18;
  if (var17 != (OZChannelInfo *)&this[9].var18)
  {
    do
    {
      OZLinkChannelExpression::resolveChannelRefs(*((OZLinkChannelExpression **)var17 + 5));
      this = OZLinkChannelExpression::syncChannelRanges(*((OZLinkChannelExpression **)var17 + 5), 0);
      long long v3 = (OZChannelInfo *)*((void *)var17 + 1);
      if (v3)
      {
        do
        {
          PCString v4 = (OZChannelInfo **)v3;
          long long v3 = *(OZChannelInfo **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          PCString v4 = (OZChannelInfo **)*((void *)var17 + 2);
          BOOL v5 = *v4 == var17;
          var17 = (OZChannelInfo *)v4;
        }
        while (!v5);
      }
      var17 = (OZChannelInfo *)v4;
    }
    while (v4 != (OZChannelInfo **)p_var18);
  }
  return this;
}

void OZLinkBehavior::addExpression(uint64_t **this, unsigned int a2, OZLinkChannelExpression *a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)(this + 108));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v6);
  unsigned int v7 = a2;
  double v8 = a3;
  std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(this + 188, &v7, (uint64_t)&v7);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B7D0785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

char *OZLinkBehavior::allowDrag(OZLinkBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  if (lpsrc)
  {
    *a5 = 0;
    if (result && a7 == 1 && *a6 == 1)
    {
      if ((OZChannelBase *)((char *)this + 56) == a3)
      {
        int v15 = (const OZObjectManipulator *)result;
        uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)result + 264))(result);
        double result = (char *)(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
        if ((char *)v16 == result)
        {
          double result = (char *)OZChanObjectRefWithPicker::canReferenceObject((OZChannelBase *)((char *)this + 1064), v15);
          if (result)
          {
            *a6 = 1;
            *a5 = a4 & 8;
          }
        }
      }
      return result;
    }
  }
  else
  {
    *a5 = 0;
  }

  return OZBehavior::allowDrag((char *)this, lpsrc, a3, a4, a5, a6, a7);
}

char *non-virtual thunk to'OZLinkBehavior::allowDrag(OZLinkBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  return OZLinkBehavior::allowDrag((OZLinkBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

unint64_t OZLinkBehavior::performDragOperation(OZLinkBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  if (lpsrc
  {
    if ((OZChannelBase *)((char *)this + 56) == a3
      && (uint64_t v18 = (*(uint64_t (**)(const OZObjectManipulator *))(*(void *)v16 + 264))(v16),
          v18 == (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)))
    {
      unint64_t result = OZChanObjectRefWithPicker::canReferenceObject((OZChannelBase *)((char *)this + 1064), v17);
      if (result)
      {
        PCString::PCString(&v21, "source object selection");
        OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 1064), &v21);
        PCString::~PCString(&v21);
        OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 1064), v17, 0);
        if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this))
        {
          uint64_t v20 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
          OZDocument::postNotification(*(OZDocument **)(v20 + 1584), 8);
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return OZBehavior::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

void sub_1B7D07C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

unint64_t non-virtual thunk to'OZLinkBehavior::performDragOperation(OZLinkBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  return OZLinkBehavior::performDragOperation((OZLinkBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZLinkBehavior::setChannelRef(OZLinkBehavior *this, OZChannelBase *a2)
{
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v4 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
    OZDocument::postNotification(*(OZDocument **)(v4 + 1584), 0x8000000);
  }

  OZSingleChannelBehavior::setChannelRef(this, a2);
}

uint64_t OZLinkBehavior::setSourceAttribute(OZLinkBehavior *this, int a2)
{
  OZChannel::setValue((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], (double)a2, 0);
  uint64_t result = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
  if (result)
  {
    return OZScene::dirtyLockDependencies(result);
  }
  return result;
}

uint64_t OZLinkBehavior::areChannelsCompatible(OZLinkBehavior *this, OZChannelBase *lpsrc, OZChannelBase *a3, BOOL *a4)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = 0;
  if (lpsrc && a3)
  {
      || OZChannelBase::testFlag(lpsrc, 2))
    {
      return 0;
    }
    unint64_t var7 = a3->var7;
    if ((lpsrc->var7 & 0x1000) == 0)
    {
      if ((var7 & 0x1000) == 0)
      {
LABEL_12:
        double v25 = &v25;
        double v26 = &v25;
        uint64_t v27 = 0;
        double v10 = operator new(0x18uLL);
        long long v11 = (char *)this + 16;
        if (!this) {
          long long v11 = 0;
        }
        v10[1] = &v25;
        v10[2] = v11;
        void *v10 = &v25;
        double v25 = v10;
        double v26 = v10;
        uint64_t v27 = 1;
        uint64_t v8 = OZBehavior::IsChanAAffectedByChanB(lpsrc, (uint64_t)a3, (uint64_t)&v25) ^ 1;
        std::__list_imp<unsigned int>::clear(&v25);
        return v8;
      }
      return 0;
    }
    if ((var7 & 0x1000) == 0) {
      return 0;
    }
    if (a4) {
      *a4 = 1;
    }
    uint64_t v8 = 0;
    int v14 = (uint64_t *)v12[14];
    if (v14)
    {
      int v15 = (uint64_t *)v13[14];
      if (v15)
      {
        uint64_t v17 = *v14;
        uint64_t v16 = v14[1];
        uint64_t v18 = v16 - *v14;
        uint64_t v20 = *v15;
        uint64_t v19 = *(void *)(v13[14] + 8);
        if (v18 == v19 - v20)
        {
          if (v17 == v16 || v20 == v19) {
            goto LABEL_12;
          }
          uint64_t v21 = v17 + 8;
          uint64_t v22 = v20 + 8;
          while ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(*(void *)(v21 - 8) + 8)+ 8), *(int32x4_t *)(*(void *)(*(void *)(v22 - 8) + 8)+ 8))))) & 1) == 0)
          {
            if (v21 != v16)
            {
              v21 += 8;
              BOOL v23 = v22 == v19;
              v22 += 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_12;
          }
        }
        return 0;
      }
    }
  }
  return v8;
}

void sub_1B7D080CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLinkBehavior::getSourceChannel(OZLinkBehavior *this)
{
  if (!(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)
    || !OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064)))
  {
    return 0;
  }
  uint64_t Object = OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
  long long v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)Object + 216))(Object);

  return OZChannelRef::getChannel((OZLinkBehavior *)((char *)this + 1272), v3);
}

void OZLinkBehavior::buildExpressions(OZLinkBehavior *this)
{
  OZLinkBehavior::clearExpressions(this, 1);
  if (OZSingleChannelBehavior::getChanBase(this))
  {
    if (OZLinkBehavior::getSourceChannel(this))
    {
      SourceChannel = OZLinkBehavior::getSourceChannel(this);
      if (!SourceChannel
      {
        long long v12 = OZLinkBehavior::getSourceChannel(this);
        if (v12) {
        else
        }
          double v13 = 0;
        uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v13);
        uint64_t v15 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
        uint64_t v16 = (const OZChannelBase *)(*(uint64_t (**)(void))(v15 + 640))();
        OZChannelRef::OZChannelRef((OZChannelRef *)v18, v13, v16);
        operator new();
      }
      uint64_t v4 = (const void ***)v3[14];
      if (v4)
      {
        BOOL v5 = *v4;
        if (*v4 != v4[1])
        {
          int v6 = 1;
          do
          {
            if (*v5)
            {
              if (v7)
              {
                uint64_t v8 = v7;
                if (!OZChannelBase::testFlag(v7, 2))
                {
                  uint64_t v9 = OZChannelBase::getObjectManipulator(v8);
                  uint64_t v10 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 232))(v9);
                  long long v11 = (const OZChannelBase *)(*(uint64_t (**)(void))(v10 + 640))();
                  OZChannelRef::OZChannelRef((OZChannelRef *)v18, v8, v11);
                  operator new();
                }
              }
            }
            ++v6;
            ++v5;
          }
          while (v5 != v4[1]);
        }
      }
    }
    OZLinkBehavior::calcInternalScale(this);
  }
  OZLinkBehavior::validateParamStates(this);
  uint64_t v17 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
  OZDocument::postNotification(*(OZDocument **)(v17 + 1584), 0x8000000);
}

void sub_1B7D08514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1BA9BFBA0](v2, 0x10B3C40905E94F1);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::clearExpressions(OZLinkBehavior *this, int a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v4);
  v13[0] = 0;
  v13[1] = 0;
  long long v12 = v13;
  BOOL v5 = (void *)*((void *)this + 188);
  int v6 = (_OWORD *)((char *)this + 1512);
  if (v5 != (void *)((char *)this + 1512))
  {
    do
    {
      OZLinkBehavior::deleteExpressionParamChannels((uint64_t **)this, v5[5], (uint64_t)&v12);
      uint64_t v7 = v5[5];
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      v5[5] = 0;
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          BOOL v5 = v9;
        }
        while (!v10);
      }
      BOOL v5 = v9;
    }
    while (v9 != (void *)v6);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1504, *((void **)this + 189));
  *((void *)this + 188) = v6;
  _OWORD *v6 = 0u;
  if (a2)
  {
    if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)) {
      BOOL v10 = theApp == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      uint64_t v11 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
      OZDocument::postNotification(*(OZDocument **)(v11 + 1584), 0x8000000);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
}

void sub_1B7D086EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

OZChannelBase *OZLinkBehavior::getSourceChannelUUID@<X0>(OZLinkBehavior *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = OZLinkBehavior::getSourceChannel(this);
  if (result)
  {
    uint64_t result = OZLinkBehavior::getSourceChannel(this);
    *(_OWORD *)a3 = *(_OWORD *)((char *)result->var1 + 8);
    if (a2)
    {
      uint64_t result = OZLinkBehavior::getSourceChannel(this);
      var6 = result->var6;
      if (var6) {
        *(_OWORD *)a3 = *(_OWORD *)(*((void *)var6 + 1) + 8);
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t OZLinkBehavior::getTargetChannelUUID@<X0>(OZLinkBehavior *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = OZSingleChannelBehavior::getChanBase(this);
  if (result)
  {
    uint64_t result = OZSingleChannelBehavior::getChanBase(this);
    *(_OWORD *)a3 = *(_OWORD *)(*(void *)(result + 8) + 8);
    if (a2)
    {
      uint64_t result = OZSingleChannelBehavior::getChanBase(this);
      uint64_t v7 = *(void *)(result + 48);
      if (v7) {
        *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v7 + 8) + 8);
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

void OZLinkBehavior::getMixFactor(OZLinkBehavior *this, const CMTime *a2)
{
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 1960), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime v26 = time1;
      CMTimeEpoch epoch = time1.epoch;
      *(_OWORD *)&v23.int64_t value = *(_OWORD *)&time1.value;
      goto LABEL_3;
    case 1u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTimeEpoch v6 = time1.epoch;
      CMTime v26 = time1;
      CMTime v27 = v25;
      goto LABEL_5;
    case 2u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime v26 = time1;
      CMTime v27 = v25;
      CMTime time2 = time1;
      CMTime time1 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        BOOL v8 = 0;
      }
      else
      {
        OZLinkBehavior::getEaseRange(this, &v22);
        CMTime time1 = v26;
        CMTime time2 = v22;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = *a2;
        CMTime time2 = v23;
        BOOL v8 = CMTimeCompare(&time1, &time2) < 1;
      }
      CMTime time1 = v26;
      CMTime time2 = v27;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
      OZLinkBehavior::getEaseRange(this, &v21);
      CMTime time1 = v22;
      CMTime time2 = v21;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      CMTime time1 = *a2;
      CMTime time2 = v23;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        unsigned int v14 = 0;
      }
      else
      {
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        CMTime time1 = *a2;
        CMTime time2 = v20;
        unsigned int v14 = CMTimeCompare(&time1, &time2) >> 31;
      }
      if ((v8 | v14) != 1) {
        return;
      }
      if ((v8 & v14) == 1)
      {
        CMTime v23 = v26;
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v26;
        CMTime time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseInFactor(v16, a2, &v23, &v22);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v22;
        CMTime time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getEaseOutFactor(v17, a2, &v23, &v20);
      }
      else if (v8)
      {
        *(_OWORD *)&v23.int64_t value = *(_OWORD *)&v26.value;
        CMTimeEpoch epoch = v26.epoch;
LABEL_3:
        v23.CMTimeEpoch epoch = epoch;
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v26;
        CMTime time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseInFactor(v5, a2, &v23, &v22);
      }
      else
      {
        *(_OWORD *)&time1.int64_t value = *(_OWORD *)&v26.value;
        CMTimeEpoch v6 = v26.epoch;
LABEL_5:
        time1.CMTimeEpoch epoch = v6;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v22;
        CMTime time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getEaseOutFactor(v7, a2, &v23, &v20);
      }
      break;
    case 3u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime v26 = time1;
      CMTimeEpoch v9 = time1.epoch;
      *(_OWORD *)&v23.int64_t value = *(_OWORD *)&time1.value;
      goto LABEL_9;
    case 4u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTimeEpoch v11 = time1.epoch;
      CMTime v26 = time1;
      CMTime v27 = v25;
      goto LABEL_11;
    case 5u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime v26 = time1;
      CMTime v27 = v25;
      CMTime time2 = time1;
      CMTime time1 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        BOOL v13 = 0;
      }
      else
      {
        OZLinkBehavior::getEaseRange(this, &v22);
        CMTime time1 = v26;
        CMTime time2 = v22;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = *a2;
        CMTime time2 = v23;
        BOOL v13 = CMTimeCompare(&time1, &time2) < 1;
      }
      CMTime time1 = v26;
      CMTime time2 = v27;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
      OZLinkBehavior::getEaseRange(this, &v21);
      CMTime time1 = v22;
      CMTime time2 = v21;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      CMTime time1 = *a2;
      CMTime time2 = v23;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        unsigned int v15 = 0;
      }
      else
      {
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        CMTime time1 = *a2;
        CMTime time2 = v20;
        unsigned int v15 = CMTimeCompare(&time1, &time2) >> 31;
      }
      if ((v13 | v15) != 1) {
        return;
      }
      if ((v13 & v15) == 1)
      {
        CMTime v23 = v26;
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v26;
        CMTime time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getAccelerationFactor(v18, a2, &v23, &v22);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v22;
        CMTime time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getDecelerationFactor(v19, a2, &v23, &v20);
      }
      else if (v13)
      {
        *(_OWORD *)&v23.int64_t value = *(_OWORD *)&v26.value;
        CMTimeEpoch v9 = v26.epoch;
LABEL_9:
        v23.CMTimeEpoch epoch = v9;
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v26;
        CMTime time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getAccelerationFactor(v10, a2, &v23, &v22);
      }
      else
      {
        *(_OWORD *)&time1.int64_t value = *(_OWORD *)&v26.value;
        CMTimeEpoch v11 = v26.epoch;
LABEL_11:
        time1.CMTimeEpoch epoch = v11;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        CMTime time1 = v22;
        CMTime time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        CMTime time1 = v26;
        CMTime time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getDecelerationFactor(v12, a2, &v23, &v20);
      }
      break;
    default:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2368), a2, 0.0);
      return;
  }
}

double OZLinkBehavior::getEaseInFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime time1 = *a2;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0 || (time1 = *a2, CMTime time2 = *a4, CMTimeCompare(&time1, &time2) > 0))
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    int32_t v7 = CMTimeCompare(&time1, &time2);
    double result = 1.0;
    if (v7 < 0) {
      return 0.0;
    }
  }
  else
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    CMTime time1 = *a4;
    CMTime time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
    operator/(&v14, (uint64_t)v13, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    double v10 = 1.0;
    if (Seconds <= 1.0) {
      double v10 = Seconds;
    }
    BOOL v11 = Seconds < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    return v12 * v12 * (3.0 - (v12 + v12));
  }
  return result;
}

CMTime *OZLinkBehavior::getEaseRange@<X0>(OZLinkBehavior *this@<X0>, CMTime *a2@<X8>)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2216), MEMORY[0x1E4F1FA48], 0.0);
  Float64 v5 = v4;
  OZBehavior::getFrameDuration(this, (__n128 *)&v7);
  return operator*(&v7, a2, v5);
}

double OZLinkBehavior::getEaseOutFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime time1 = *a2;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0 || (time1 = *a2, CMTime time2 = *a4, CMTimeCompare(&time1, &time2) > 0))
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    int32_t v7 = CMTimeCompare(&time1, &time2);
    double result = 0.0;
    if (v7 < 0) {
      return 1.0;
    }
  }
  else
  {
    CMTime time1 = *a4;
    CMTime time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    CMTime time1 = *a4;
    CMTime time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
    operator/(&v14, (uint64_t)v13, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    double v10 = 1.0;
    if (Seconds <= 1.0) {
      double v10 = Seconds;
    }
    BOOL v11 = Seconds < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    return v12 * v12 * (3.0 - (v12 + v12));
  }
  return result;
}

void OZLinkBehavior::getAccelerationFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime time1 = *a2;
  CMTime time2 = *a4;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = *a4;
      CMTime time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      CMTimeGetSeconds(&time);
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v7);
      CMTimeGetSeconds(&v7);
    }
  }
}

void OZLinkBehavior::getDecelerationFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime time1 = *a2;
  CMTime time2 = *a4;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = *a4;
      CMTime time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      CMTimeGetSeconds(&time);
      CMTime time1 = *a4;
      CMTime time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v7);
      CMTime time1 = v8;
      CMTime time2 = v7;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
      CMTimeGetSeconds(&v9);
    }
  }
}

double OZLinkBehavior::getInternalScale(OZLinkBehavior *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3792), MEMORY[0x1E4F1FA48], 0.0);
  double result = 1.0;
  if (!ValueAsInt) {
    return *((double *)this + 182);
  }
  return result;
}

void OZLinkBehavior::calcInternalScale(OZLinkBehavior *this)
{
  OZLinkBehavior::getSourceChannelUUID(this, 0, (uint64_t)&v58);
  OZLinkBehavior::getSourceChannelUUID(this, 1, (uint64_t)v56);
  OZLinkBehavior::getTargetChannelUUID(this, 0, (uint64_t)&v52);
  OZLinkBehavior::getTargetChannelUUID(this, 1, (uint64_t)&v48);
  int v3 = v58;
  int v2 = HIDWORD(v58);
  int v5 = v59;
  int v4 = v60;
  if (*(void *)v56 == v58 && *(_DWORD *)&v56[8] == v59 && v57 == v60)
  {
    int v4 = v57;
    int v5 = *(_DWORD *)&v56[8];
    int v2 = *(_DWORD *)&v56[4];
    int v3 = *(_DWORD *)v56;
  }
  else if (*(_DWORD *)v56 == -1740272879 && *(void *)&v56[4] == 0x97C399D625BC4998 && v57 == -786165934 {
         || *(_DWORD *)&v56[4] == 579932631
  }
         && *(_DWORD *)v56 == 813156494
         && *(_DWORD *)&v56[8] == -1183318013
         && v57 == -1819691262
         || *(_DWORD *)v56 == -1206155824
         && *(_DWORD *)&v56[4] == -1939336745
         && *(_DWORD *)&v56[8] == -1836449789
         && v57 == -1821413486
         || *(_DWORD *)v56 == 1683370175
         && *(_DWORD *)&v56[4] == -1267840585
         && *(_DWORD *)&v56[8] == -2073336591
         && v57 == -229854912
         || *(_DWORD *)v56 == -2020973379
         && *(_DWORD *)&v56[4] == 422580696
         && *(_DWORD *)&v56[8] == -1161625590
         && v57 == -1783652482
         || *(_DWORD *)&v56[4] == 579932631
         && *(_DWORD *)v56 == 229652390
         && *(_DWORD *)&v56[8] == -1522466813
         && v57 == -1819691262)
  {
    uint64_t v58 = *(void *)v56;
    int v4 = v57;
    int v5 = *(_DWORD *)&v56[8];
    int v2 = *(_DWORD *)&v56[4];
    int v3 = *(_DWORD *)v56;
    int v59 = *(_DWORD *)&v56[8];
    int v60 = v57;
  }
  int v6 = v52;
  int v7 = v53;
  int v8 = v54;
  int v9 = v55;
  if (v48 == v52 && v49 == v53 && v50 == v54 && v51 == v55)
  {
    int v9 = v51;
    int v8 = v50;
    int v7 = v49;
    int v6 = v48;
  }
  else if (v48 == -1740272879 && v49 == 633096600 && v50 == -1748788778 && v51 == -786165934 {
         || v49 == 579932631 && v48 == 813156494 && v50 == -1183318013 && v51 == -1819691262
  }
         || v48 == -1206155824 && v49 == -1939336745 && v50 == -1836449789 && v51 == -1821413486
         || v48 == 1683370175 && v49 == -1267840585 && v50 == -2073336591 && v51 == -229854912
         || v48 == -2020973379 && v49 == 422580696 && v50 == -1161625590 && v51 == -1783652482
         || v49 == 579932631 && v48 == 229652390 && v50 == -1522466813 && v51 == -1819691262)
  {
    int v52 = v48;
    int v53 = v49;
    int v9 = v51;
    int v8 = v50;
    int v7 = v49;
    int v6 = v48;
    int v54 = v50;
    int v55 = v51;
  }
  if (v3 == -1740272879 && v2 == 633096600 && v5 == -1748788778 && v4 == -786165934
    || v4 == -1819691262 && v2 == 579932631 && v3 == 813156494 && v5 == -1183318013)
  {
    if (OZLinkBehavior::getSourceChannel(this)->var3 == 1)
    {
      int v10 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 344);
    }
    else
    {
      unsigned int var3 = OZLinkBehavior::getSourceChannel(this)->var3;
      uint64_t v12 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
      if (var3 == 2)
      {
        int v10 = *(_DWORD *)(v12 + 348);
      }
      else
      {
        int v14 = *(_DWORD *)(v12 + 344);
        int v10 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 348);
        if (v14 > v10) {
          int v10 = v14;
        }
      }
    }
    double v13 = (double)v10;
  }
  else if (v3 == 1683370175 && v2 == -1267840585 && v5 == -2073336591 && v4 == -229854912)
  {
    double v13 = 6.28318531;
  }
  else if (v3 == -2020973379 && v2 == 422580696 && v5 == -1161625590 && v4 == -1783652482 {
         || (double v13 = 0.0, v4 == -1819691262) && v2 == 579932631 && v3 == 229652390 && v5 == -1522466813)
  }
  {
    double v13 = 1.0;
  }
  if (v6 == -1740272879 && v7 == 633096600 && v8 == -1748788778 && v9 == -786165934
    || v6 == 813156494 && v7 == 579932631 && v8 == -1183318013 && v9 == -1819691262)
  {
    if (*(_DWORD *)(OZSingleChannelBehavior::getChanBase(this) + 24) == 1)
    {
      int v15 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 344);
    }
    else
    {
      int v16 = *(_DWORD *)(OZSingleChannelBehavior::getChanBase(this) + 24);
      uint64_t v17 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
      if (v16 == 2)
      {
        int v15 = *(_DWORD *)(v17 + 348);
      }
      else
      {
        int v19 = *(_DWORD *)(v17 + 344);
        int v15 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 348);
        if (v19 > v15) {
          int v15 = v19;
        }
      }
    }
    double v18 = (double)v15;
  }
  else if (v6 == 1683370175 && v7 == -1267840585 && v8 == -2073336591 && v9 == -229854912)
  {
    double v18 = 6.28318531;
  }
  else
  {
    double v18 = 1.0;
    if ((v6 != -2020973379 || v7 != 422580696 || v8 != -1161625590 || v9 != -1783652482)
      && (v3 != 229652390 || v2 != 579932631 || v5 != -1522466813 || v4 != -1819691262))
    {
      double v18 = 0.0;
      if (v6 == 362132562 && v7 == 579998167 && v8 == -1937833981 && v9 == -1819691262)
      {
        if (OZSingleChannelBehavior::getChanBase(this))
        {
          ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
          uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(ChanBase);
          if (ObjectManipulator)
          {
            if (v45)
            {
              OZFxPlugSharedBase::getPluginUUID(v45, &v61);
              PCString::PCString(&v47, "E61FE95E-0108-47DA-8F29-3CB3C47428EF");
              int v46 = PCString::compare(&v61, &v47);
              PCString::~PCString(&v47);
              PCString::~PCString(&v61);
              if (v46) {
                double v18 = 0.0;
              }
              else {
                double v18 = v13;
              }
            }
          }
        }
      }
    }
  }
  if (v13 != 0.0 || (CMTime v20 = (OZLinkBehavior *)*((void *)this + 188), v20 == (OZLinkBehavior *)((char *)this + 1512)))
  {
    double v21 = v13;
  }
  else
  {
    double v21 = v13;
    do
    {
      CMTime v22 = (OZLinkChannelExpression *)*((void *)v20 + 5);
      OZLinkChannelExpression::getSourceValueRange(v22);
      if (v23 > v13) {
        double v13 = v23;
      }
      long double SourceSliderRange = OZLinkChannelExpression::getSourceSliderRange(v22);
      double v25 = 1.0;
      if (SourceSliderRange >= 10.0)
      {
        long double v26 = log10(SourceSliderRange);
        double v25 = __exp10((double)(int)vcvtmd_s64_f64(v26 + 0.5 + 0.0000001));
      }
      BOOL v27 = v25 < v21 || v21 == 0.0;
      if (v27) {
        double v21 = v25;
      }
      uint64_t v28 = (OZLinkBehavior *)*((void *)v20 + 1);
      if (v28)
      {
        do
        {
          double v29 = v28;
          uint64_t v28 = *(OZLinkBehavior **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          double v29 = (OZLinkBehavior *)*((void *)v20 + 2);
          BOOL v27 = *(void *)v29 == (void)v20;
          CMTime v20 = v29;
        }
        while (!v27);
      }
      CMTime v20 = v29;
    }
    while (v29 != (OZLinkBehavior *)((char *)this + 1512));
  }
  if (v18 != 0.0 || (int8x16_t v30 = (OZLinkBehavior *)*((void *)this + 188), v30 == (OZLinkBehavior *)((char *)this + 1512)))
  {
    double v31 = v18;
  }
  else
  {
    double v31 = v18;
    do
    {
      uint64_t TargetChannel = OZLinkBehavior::getTargetChannel(this, *((OZLinkChannelExpression **)v30 + 5));
      if (TargetChannel)
      {
        uint64_t v33 = (void *)TargetChannel;
        *(double *)&v61.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0.0;
        (*(void (**)(void, PCString *))(**(void **)(*(void *)(TargetChannel + 112) + 8) + 256))(*(void *)(*(void *)(TargetChannel + 112) + 8), &v61);
        $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v61.var0;
        *(double *)&v61.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0.0;
        (*(void (**)(void))(**(void **)(v33[14] + 8) + 264))();
        if (*(double *)&var0 - *(double *)&v61.var0 > v18) {
          double v18 = *(double *)&var0 - *(double *)&v61.var0;
        }
        double v35 = (*(double (**)(void *))(*v33 + 808))(v33) - *(double *)(v33[16] + 16);
        double v36 = 1.0;
        if (v35 >= 10.0)
        {
          long double v37 = log10(v35);
          double v36 = __exp10((double)(int)vcvtmd_s64_f64(v37 + 0.5 + 0.0000001));
        }
        if (v36 < v31 || v31 == 0.0) {
          double v31 = v36;
        }
      }
      long long v39 = (OZLinkBehavior *)*((void *)v30 + 1);
      if (v39)
      {
        do
        {
          long long v40 = v39;
          long long v39 = *(OZLinkBehavior **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          long long v40 = (OZLinkBehavior *)*((void *)v30 + 2);
          BOOL v27 = *(void *)v40 == (void)v30;
          int8x16_t v30 = v40;
        }
        while (!v27);
      }
      int8x16_t v30 = v40;
    }
    while (v40 != (OZLinkBehavior *)((char *)this + 1512));
  }
  double v41 = 1.0;
  BOOL v42 = v13 == v18 && v21 == v31;
  if (!v42 && v13 != 0.0 && v18 != 0.0)
  {
    if (v13 >= 3.40282347e38 || v18 >= 3.40282347e38)
    {
      if (v21 != 0.0 && v31 != 0.0) {
        double v41 = v31 / v21;
      }
    }
    else
    {
      double v41 = v31 / v13;
    }
  }
  *((double *)this + 18OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v41;
}

void sub_1B7D0A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
}

uint64_t OZLinkBehavior::getTargetChannel(OZLinkBehavior *this, OZLinkChannelExpression *a2)
{
  int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  int TargetChannelID = OZLinkBehavior::getTargetChannelID((uint64_t)this, (uint64_t)a2);
  uint64_t v6 = 0;
  if (OZSingleChannelBehavior::getChanBase(this) && TargetChannelID != -1)
  {
    ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(this);
    if (ChanBase
    {
      uint64_t Descendant = OZChannelFolder::getDescendant(v8, TargetChannelID);
    }
    else
    {
      uint64_t Descendant = OZSingleChannelBehavior::getChanBase(this);
    }
    uint64_t v6 = Descendant;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
  return v6;
}

void sub_1B7D0A640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

BOOL OZLinkBehavior::allExpressionsWithinLimits(OZLinkBehavior *this, const CMTime *a2, OZLinkChannelExpression *a3)
{
  if (!*((void *)this + 190)) {
    return 1;
  }
  int v5 = (char *)*((void *)this + 188);
  uint64_t v6 = (char *)this + 1512;
  do
  {
    BOOL v7 = v5 == v6;
    if (v5 == v6) {
      break;
    }
    int v8 = (OZLinkChannelExpression *)*((void *)v5 + 5);
    BOOL v9 = v8 == a3 || OZLinkChannelExpression::isWithinLimits((OZLinkBehavior **)v8, a2);
    int v10 = (char *)*((void *)v5 + 1);
    if (v10)
    {
      do
      {
        BOOL v11 = v10;
        int v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        BOOL v11 = (char *)*((void *)v5 + 2);
        BOOL v12 = *(void *)v11 == (void)v5;
        int v5 = v11;
      }
      while (!v12);
    }
    int v5 = v11;
  }
  while (v9);
  return v7;
}

double OZLinkBehavior::solveNode(OZLinkBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  if (OZLinkBehavior::getSourceChannel(this)
    || OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0))
  {
    memset(&v15, 0, sizeof(v15));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v15);
    CMTime v14 = v15;
    if ((*(unsigned int (**)(OZLinkBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v14, 0, 1, 1))
    {
      if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0))
      {
        return OZLinkBehavior::solveWithSourceAttributes(this, a2, a3, v9, a5);
      }
      else
      {
        BOOL v11 = OZLinkBehavior::expressionForChannel(this, a2);
        if (v11)
        {
          BOOL v12 = (OZLinkBehavior **)v11;
          if (OZLinkBehavior::allExpressionsWithinLimits(this, &v15, (OZLinkChannelExpression *)v11))
          {
            double v13 = 0.0;
            OZLinkChannelExpression::solve(v12, a5, &v15, &v13, 0);
            return v13;
          }
        }
      }
    }
  }
  return a5;
}

double OZLinkBehavior::solveWithSourceAttributes(OZLinkBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  double v9 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v38, v9);
  if (!*((unsigned char *)this + 1450))
  {
    uint64_t Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
    if (Object)
    {
      if (v12)
      {
        double v13 = v12;
        TargetElement = (OZSceneNode *)OZLinkBehavior::getTargetElement(this);
        if (TargetElement)
        {
          *((unsigned char *)this + 1450) = 1;
          OZRenderState::OZRenderState(&v37);
          OZLinkBehavior::getSourceFrame(this, a3, (uint64_t)&v35);
          *(_OWORD *)&v37.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v35;
          v37.var0.unsigned int var3 = v36;
          v37.var29 = OZLinkBehavior::getBoundsType(this);
          OZRenderState::TransformSet::rotation((uint64_t *)&v37.var30, 0);
          (*(void (**)(long long *__return_ptr, OZSceneNode *, OZRenderState *))(*(void *)v13 + 1496))(&v35, v13, &v37);
          if (*(double *)&v36 < 0.0 || *((double *)&v36 + 1) < 0.0)
          {
            *((unsigned char *)this + 1450) = 0;
            a5 = 0.0;
          }
          else
          {
            uint64_t ChanBase = OZSingleChannelBehavior::getChanBase(this);
            int v16 = *(_DWORD **)(ChanBase + 8);
            int v18 = v16[2];
            int v17 = v16[3];
            int v20 = v16[4];
            int v19 = v16[5];
            if (v18 == 291593097 && v17 == -876591041 && v20 == -1188129301 && v19 == 209773980
              || (double v21 = *(_DWORD **)(*(void *)(ChanBase + 48) + 8),
                  int v23 = v21[2],
                  int v22 = v21[3],
                  int v25 = v21[4],
                  int v24 = v21[5],
                  v23 == 291593097)
              && v22 == -876591041
              && v25 == -1188129301
              && v24 == 209773980
              || v18 == -1250726091 && v17 == 686887383 && v20 == -1122435069 && v19 == -1819691262
              || v23 == -1250726091 && v22 == 686887383 && v25 == -1122435069 && v24 == -1819691262)
            {
              v34[0] = v35;
              v34[1] = v36;
              double v26 = OZLinkBehavior::computeScale((uint64_t)this, TargetElement, v13, (double *)v34, a2, &v37);
              double Offset = 0.0;
              char v28 = 1;
            }
            else
            {
              v33[0] = v35;
              v33[1] = v36;
              double v26 = OZLinkBehavior::computeValue((uint64_t)this, (uint64_t)TargetElement, (uint64_t)v13, (double *)v33, a2, (uint64_t)&v37);
              double Offset = OZLinkBehavior::getOffset(this, a2, a3);
              char v28 = 0;
            }
            *((unsigned char *)this + 1450) = 0;
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1808), a3, 0.0);
            double v30 = Offset + v26 * v29;
            if ((v28 & 1) == 0)
            {
              int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1552), MEMORY[0x1E4F1FA48], 0.0);
              if (ValueAsInt)
              {
                if (ValueAsInt == 1) {
                  double v30 = v30 * a5;
                }
              }
              else
              {
                double v30 = v30 + a5;
              }
            }
            OZLinkBehavior::getMixFactor(this, a3);
            a5 = (v30 - a5) * v32 + a5;
          }
        }
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v38);
  return a5;
}

void sub_1B7D0ABE0(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t *OZLinkBehavior::expressionForChannel(OZLinkBehavior *this, unsigned int a2)
{
  unsigned int v13 = a2;
  int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  uint64_t v5 = *((void *)this + 189);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (_DWORD *)((char *)this + 1512);
  do
  {
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      double v9 = (uint64_t *)v5;
    }
    else {
      double v9 = (uint64_t *)(v5 + 8);
    }
    if (v8) {
      uint64_t v6 = (_DWORD *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != (_DWORD *)((char *)this + 1512) && v6[8] <= a2)
  {
    CMTime v14 = &v13;
    int v10 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 188, &v13, (uint64_t)&std::piecewise_construct, &v14)[5];
  }
  else
  {
LABEL_12:
    int v10 = 0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return v10;
}

void sub_1B7D0ACE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZLinkBehavior::solveNode(OZLinkBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZLinkBehavior::solveNode((OZLinkBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZLinkBehavior::getSourceFrame(OZLinkBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2928), MEMORY[0x1E4F1FA48], 0.0) {
    && (uint64_t Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064))) != 0
  }
  {
    BOOL v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3184), MEMORY[0x1E4F1FA48], 0.0);
    double v10 = v9;
    (*(void (**)(CMTime *__return_ptr, void *))(*(void *)v8 + 1128))(v17, v8);
    memset(&v16, 0, sizeof(v16));
    CMTime v15 = v17[1];
    uint64_t v11 = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)&v14);
    CMTime v19 = v15;
    CMTime v18 = v14;
    PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v16);
    CMTime v15 = v17[0];
    CMTime v13 = v16;
    Float64 Seconds = CMTimeGetSeconds(&v13);
    OZFigTimeForChannelSeconds(&v14, v10 * Seconds, 0x40000);
    CMTime v19 = v15;
    CMTime v18 = v14;
    PC_CMTimeSaferAdd(&v19, &v18, a3);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(void *)(a3 + 16) = a2->epoch;
  }
}

double OZLinkBehavior::computeScale(uint64_t a1, OZSceneNode *a2, OZSceneNode *a3, double *a4, int a5, const OZRenderState *a6)
{
  uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v33 = 0x3FF0000000000000;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v26 = 0x3FF0000000000000;
  uint64_t v23 = 0x3FF0000000000000;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  OZTransformNode::getCommonAncestorTransforms(a3, a2, a6, (uint64_t)&v33, (uint64_t)&v23);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v33, a4, (uint64_t)a4);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v23, a4, (uint64_t)a4);
  if (*(double *)(a1 + 1488) < 0.0 || *(double *)(a1 + 1496) < 0.0)
  {
    (*(void (**)(_OWORD *__return_ptr, OZSceneNode *, const OZRenderState *))(*(void *)a2 + 1496))(v22, a2, a6);
    long long v11 = v22[1];
    *(_OWORD *)(a1 + 147OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22[0];
    *(_OWORD *)(a1 + 1488) = v11;
  }
  BOOL v12 = (double *)(a1 + 1488);
  uint64_t ChanBase = OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)a1);
  int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E4F1FA48], 0.0);
  CMTime v15 = *(_DWORD **)(ChanBase + 8);
  int v17 = v15[2];
  int v16 = v15[3];
  int v19 = v15[4];
  int v18 = v15[5];
  if ((v17 == 291593097 && v16 == -876591041 && v19 == -1188129301 && v18 == 209773980
     || v17 == -1250726091 && v16 == 686887383 && v19 == -1122435069 && v18 == -1819691262)
    && (ValueAsUint & 0xFFFFFFFE) == 2)
  {
    int v20 = a4 + 3;
    if (ValueAsUint == 2) {
      int v20 = a4 + 2;
    }
    else {
      BOOL v12 = (double *)(a1 + 1496);
    }
  }
  else if (a5 == 2)
  {
    int v20 = a4 + 3;
    BOOL v12 = (double *)(a1 + 1496);
  }
  else
  {
    double result = 1.0;
    if (a5 != 1) {
      return result;
    }
    int v20 = a4 + 2;
  }
  return *v20 / *v12;
}

double OZLinkBehavior::computeValue(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, uint64_t a6)
{
  long long v11 = (OZChannel *)(a1 + 1296);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsUint <= 0xD && ((1 << ValueAsUint) & 0x3F0E) != 0) {
    OZRenderState::TransformSet::translation((uint64_t *)(a6 + 248), 0);
  }
  uint64_t v45 = 0x3FF0000000000000;
  uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 1256))(a3, &v36, a6);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v36, a4, (uint64_t)a4);
  unsigned int v14 = OZChannel::getValueAsUint(v11, MEMORY[0x1E4F1FA48], 0.0);
  if (v14 <= 0xD && ((1 << v14) & 0x3F0E) != 0) {
    OZRenderState::TransformSet::translation((uint64_t *)(a6 + 248), 1);
  }
  CMTime v15 = *(const void **)(a2 + 960);
  if (v15)
  {
    if (v16)
    {
      uint64_t v35 = 0x3FF0000000000000;
      uint64_t v32 = 0x3FF0000000000000;
      uint64_t v29 = 0x3FF0000000000000;
      uint64_t v26 = 0x3FF0000000000000;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      (*(void (**)(void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 1264))(v16, &v26, a6, v17, v18, v19, v20, v21);
      PCMatrix44Tmpl<double>::transformRect<double>((double *)&v26, a4, (uint64_t)a4);
    }
  }
  double v22 = 0.0;
  switch(OZChannel::getValueAsUint(v11, MEMORY[0x1E4F1FA48], 0.0))
  {
    case 1u:
    case 8u:
      if (a5 == 2) {
        goto LABEL_13;
      }
      if (a5 == 1) {
        goto LABEL_16;
      }
      break;
    case 2u:
LABEL_16:
      double v22 = a4[2];
      break;
    case 3u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_13:
      double v22 = a4[3];
      break;
    case 4u:
      double v22 = *a4;
      break;
    case 5u:
      double v23 = *a4;
      double v24 = a4[2];
      goto LABEL_21;
    case 6u:
      double v22 = a4[1];
      break;
    case 7u:
      double v23 = a4[1];
      double v24 = a4[3];
LABEL_21:
      double v22 = v23 + v24;
      break;
    default:
      return v22;
  }
  return v22;
}

double OZLinkBehavior::getOffset(OZLinkBehavior *this, int a2, const CMTime *a3)
{
  switch(OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 1u:
    case 8u:
      if (a2 == 2) {
        goto LABEL_2;
      }
      if (a2 != 1) {
        goto LABEL_10;
      }
      goto LABEL_6;
    case 2u:
LABEL_6:
      uint64_t v6 = (OZChannel *)((char *)this + 3336);
      goto LABEL_7;
    case 3u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_2:
      uint64_t v6 = (OZChannel *)((char *)this + 3488);
      goto LABEL_7;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      uint64_t v6 = (OZChannel *)((char *)this + 3640);
LABEL_7:
      OZChannel::getValueAsDouble(v6, a3, 0.0);
      break;
    default:
LABEL_10:
      double result = 0.0;
      break;
  }
  return result;
}

const PCString *OZLinkBehavior::getTargetElement(OZLinkBehavior *this)
{
  double result = (const PCString *)OZSingleChannelBehavior::getAffectedObject(this);
  if (result)
  {
    int v3 = result;
    if (!result)
    {
      if (result)
      {
        double result = (const PCString *)OZSingleChannelBehavior::getChanBase(this);
        if (result)
        {
          uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
          double result = (const PCString *)OZChannelBase::getObjectManipulator(ChanBase);
          if (result)
          {
            if (result)
            {
              OZFxPlugSharedBase::getPluginUUID(result, &v7);
              PCString::PCString(&v6, "546352EB-956A-4DDA-9071-C82CC50B7F73");
              int v5 = PCString::compare(&v7, &v6);
              PCString::~PCString(&v6);
              PCString::~PCString(&v7);
              if (v5)
              {
                return 0;
              }
              else
              {
                double result = (const PCString *)((uint64_t (*)(const PCString *))v3->var0[7].info)(v3);
                if (result) {
              }
                }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B7D0B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZLinkBehavior::getBoundsType(OZLinkBehavior *this)
{
  unsigned int v1 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0) - 8;
  if (v1 > 4) {
    return 0;
  }
  else {
    return dword_1B8383BD8[v1];
  }
}

__n128 OZLinkBehavior::solveNode(OZLinkBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.int64_t value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZLinkBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 680))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZLinkBehavior::solveNode(OZLinkBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZLinkBehavior::solveNode((OZLinkBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

uint64_t OZLinkBehavior::updateObjectState(OZLinkBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 320))(this)
                             + 240);
    return v3();
  }
  return result;
}

uint64_t OZLinkBehavior::enable(OZLinkBehavior *this)
{
  OZObjectManipulator::enable((OZLinkBehavior *)((char *)this + 16));

  return OZLinkBehavior::updateObjectState(this);
}

uint64_t non-virtual thunk to'OZLinkBehavior::enable(OZLinkBehavior *this)
{
  unsigned int v1 = (OZLinkBehavior *)((char *)this - 16);
  OZObjectManipulator::enable(this);

  return OZLinkBehavior::updateObjectState(v1);
}

uint64_t OZLinkBehavior::disable(OZLinkBehavior *this)
{
  OZObjectManipulator::disable((OZLinkBehavior *)((char *)this + 16));

  return OZLinkBehavior::updateObjectState(this);
}

uint64_t non-virtual thunk to'OZLinkBehavior::disable(OZLinkBehavior *this)
{
  unsigned int v1 = (OZLinkBehavior *)((char *)this - 16);
  OZObjectManipulator::disable(this);

  return OZLinkBehavior::updateObjectState(v1);
}

uint64_t OZLinkBehavior::willRemoveSceneNodeFromScene(OZLinkBehavior *this, OZScene *a2)
{
  OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);

  return OZLocking::removeFromLockingGroup((OZLinkBehavior *)((char *)this + 864));
}

uint64_t OZLinkBehavior::willRemove(PCString *this)
{
  uint64_t v2 = ((uint64_t (*)(PCString *))this->var0[10].isa)(this);
  OZSingleChannelBehavior::willRemove(this);
  uint64_t v3 = *(uint64_t (**)(uint64_t, PCString *))(*(void *)v2 + 240);

  return v3(v2, this);
}

uint64_t OZLinkBehavior::didAddToNode(OZLinkBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 852) && (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2))
  {
    (*(void (**)(OZLinkBehavior *))(*(void *)this + 808))(this);
    OZLinkBehavior::validateLinkedChannels((uint64_t **)this);
  }

  return OZLinkBehavior::validateParamStates(this);
}

void OZLinkBehavior::validateLinkedChannels(uint64_t **this)
{
  uint64_t v2 = (OZChannel *)(this + 162);
  if (OZChannel::getValueAsUint((OZChannel *)(this + 162), MEMORY[0x1E4F1FA48], 0.0))
  {
    int ValueAsUint = OZChannel::getValueAsUint(v2, MEMORY[0x1E4F1FA48], 0.0);
    uint64_t ChanBase = (OZLinkBehavior *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
    if ((OZLinkBehavior::isAttributeCompatibleToDestChannel(ChanBase, ValueAsUint, (OZChannelBase *)ChanBase) & 1) == 0)
    {
      OZLinkBehavior::setSourceAttribute((OZLinkBehavior *)this, 0);
    }
  }
  else
  {
    BOOL v11 = 0;
    SourceChannel = OZLinkBehavior::getSourceChannel((OZLinkBehavior *)this);
    PCString v6 = (OZChannelBase *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
    if (OZLinkBehavior::areChannelsCompatible((OZLinkBehavior *)this, SourceChannel, v6, &v11))
    {
      if (!v11)
      {
        PCString v7 = (uint64_t **)this[188];
        if (v7 != this + 189)
        {
          std::string::size_type v8 = (std::string::size_type)v7[5];
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 188, this[188]);
          operator delete(v7);
          v10.__r_.__value_.__r.__words[0] = *(unsigned int *)(OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this)
                                                             + 24);
          v10.__r_.__value_.__l.__size_ = v8;
          std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(this + 188, (unsigned int *)&v10, (uint64_t)&v10);
        }
      }
      OZLinkBehavior::calcInternalScale((OZLinkBehavior *)this);
    }
    else
    {
      PCString::PCString(&v9, "");
      OZChannelRef::OZChannelRef((OZChannelRef *)&v10, &v9);
      OZLinkBehavior::setSourceChannelRef((OZLinkBehavior *)this, &v10, 1);
      OZChannelRef::~OZChannelRef((void **)&v10.__r_.__value_.__l.__data_);
      PCString::~PCString(&v9);
    }
  }
}

void sub_1B7D0BCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, void *a11)
{
}

uint64_t OZLinkBehavior::validateParamStates(OZLinkBehavior *this)
{
  uint64_t v2 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
  if (v2)
  {
    if ((uint64_t v3 = *((void *)v2 + 198)) != 0 && *(unsigned char *)(v3 + 184)
      || TXParagraphStyleFolder_Factory::version(v2))
    {
      if (OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064))
        && (OZLinkBehavior::getSourceChannel(this)
         || OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0))
        && (uint64_t Object = (OZObjectManipulator *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064)),
            (OZLinkBehavior::checkForRecursion(this, Object) & 1) == 0))
      {
        (*(void (**)(OZLinkBehavior *, uint64_t))(*(void *)this + 824))(this, 1);
      }
      else
      {
        (*(void (**)(OZLinkBehavior *, uint64_t))(*(void *)this + 832))(this, 1);
      }
    }
  }
  OZLinkBehavior::mixModeChanged(this);
  OZLinkBehavior::applyModeChanged(this);
  OZLinkBehavior::applyLinkWhenChanged(this);
  uint64_t v6 = *((void *)this + 2);
  int v5 = (char *)this + 16;
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v6 + 24))(v5, 0, 1);
  v5[1449] = result;
  return result;
}

uint64_t OZLinkBehavior::addToChannel(OZLinkBehavior *this, OZChannelBase *lpsrc)
{
  uint64_t v4 = (void **)*((void *)this + 104);
  if (v4)
  {
    OZChannelRef::~OZChannelRef(v4);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 104) = 0;
  }
  OZLinkBehavior::addToChannelHelper(this, lpsrc);
  if (!(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 320))(this))
  {
    SceneNodeFromChan = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)lpsrc, v5);
    (*(void (**)(OZChannelBehavior *, OZLinkBehavior *, void))(*(void *)SceneNodeFromChan + 360))(SceneNodeFromChan, this, 0);
  }
  ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(this, lpsrc);

  return OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 640), ObjectManipulatorForChannel, 0);
}

uint64_t OZLinkBehavior::addToChannelHelper(OZLinkBehavior *this, OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    if (v4)
    {
      OZChannelBehavior::setAffectedChannel(this, lpsrc);
      OZSingleChannelBehavior::addToOneChannel(this, v4);
    }
    else if (v5)
    {
      PCString v7 = (const void ***)v5[14];
      if (v7)
      {
        for (uint64_t i = *v7; i != v7[1]; ++i)
        {
          if (*i)
          {
            if (v9)
            {
              std::string v10 = v9;
              if ((*((unsigned int (**)(OZChannel *))v9->var0 + 64))(v9))
              {
                OZChannelBehavior::setAffectedChannel(this, lpsrc);
                OZSingleChannelBehavior::addToOneChannel(this, v10);
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

OZSingleChannelBehavior *OZLinkBehavior::commonDidAddToNode(OZSingleChannelBehavior *this)
{
  if (!*((void *)this + 104)) {
    return this;
  }
  unsigned int v1 = this;
  uint64_t v2 = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(void *)this + 320))(this);
  this = (OZSingleChannelBehavior *)OZChanObjectManipRef::getObjectID((OZChannel *)((char *)v1 + 640));
  if (!this || (int v3 = (int)this, *(_DWORD *)(v2 + 80) == this))
  {
    uint64_t v5 = v2 + 16;
    goto LABEL_12;
  }
  if (OZSceneNode::getEffect((OZSceneNode *)v2, (int)this))
  {
    this = (OZSingleChannelBehavior *)OZSceneNode::getEffect((OZSceneNode *)v2, v3);
    uint64_t v4 = (char *)this + 48;
  }
  else
  {
    this = (OZSingleChannelBehavior *)OZSceneNode::getBehavior((OZSceneNode *)v2, v3);
    if (!this)
    {
      uint64_t v5 = 0;
      goto LABEL_12;
    }
    this = (OZSingleChannelBehavior *)OZSceneNode::getBehavior((OZSceneNode *)v2, v3);
    uint64_t v4 = (char *)this + 16;
  }
  if (this) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_12:
  int v6 = *((_DWORD *)v1 + 200);
  int v7 = *((_DWORD *)v1 + 201);
  int v8 = *((_DWORD *)v1 + 202);
  int v9 = *((_DWORD *)v1 + 203);
  if (!(v7 | v6 | v8 | v9)) {
    goto LABEL_50;
  }
  if (v5)
  {
    this = (OZSingleChannelBehavior *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 256))(v5);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)this + 1) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)goto LABEL_51; {
    int v6 = *((_OWORD *)v1 + 50);
    }
    int v7 = HIDWORD(*((void *)v1 + 100));
    int v8 = *((void *)v1 + 101);
    int v9 = HIDWORD(*((_OWORD *)v1 + 50));
  }
  std::string v10 = *(_DWORD **)(v2 + 8);
  int v11 = v10[2];
  int v12 = v10[3];
  int v14 = v10[4];
  int v13 = v10[5];
  if (v11 != v6 || v12 != v7 || v14 != v8 || v13 != v9)
  {
    uint64_t v18 = *(void *)(v2 + 984);
    if (v18 == v2 + 976) {
      goto LABEL_38;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v18 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v21 + 40) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
      {
        double v22 = (void *)(v21 + 48);
        if (v20)
        {
          InternalName = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v21 + 48));
          this = (OZSingleChannelBehavior *)PCString::size(InternalName);
          if (this)
          {
            this = (OZSingleChannelBehavior *)PCString::compare(InternalName, (const PCString *)v1 + 105);
            if (!this) {
              goto LABEL_45;
            }
          }
        }
        else
        {
          uint64_t v20 = *(void *)(v18 + 16);
          uint64_t v19 = (void *)(v21 + 48);
        }
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18 != v2 + 976);
    double v22 = v19;
    if (!v19)
    {
LABEL_38:
      uint64_t v24 = *(void *)(v2 + 1008);
      if (v24 == v2 + 1000)
      {
LABEL_42:
        double v22 = 0;
      }
      else
      {
        while (1)
        {
          long long v25 = *(OZSingleChannelBehavior **)(v24 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)v25 + 1)+ 8), *((int32x4_t *)v1 + 50))))) & 1) == 0&& v25 != v1)
          {
            break;
          }
          uint64_t v24 = *(void *)(v24 + 8);
          if (v24 == v2 + 1000) {
            goto LABEL_42;
          }
        }
        double v22 = (void *)((char *)v25 + 16);
      }
    }
LABEL_45:
    uint64_t v26 = v2 + 16;
    if (!v2) {
      uint64_t v26 = 0;
    }
    if (v22) {
      uint64_t v5 = (uint64_t)v22;
    }
    else {
      uint64_t v5 = v26;
    }
LABEL_50:
    if (!v5) {
      return this;
    }
    goto LABEL_51;
  }
  uint64_t v5 = v2 + 16;
LABEL_51:
  this = (OZSingleChannelBehavior *)(*(uint64_t (**)(uint64_t, void, double))(*(void *)v5 + 224))(v5, *((void *)v1 + 104), *((double *)v1 + 107));
  long long v28 = (OZChannelBase *)this;
  if (*((double *)v1 + 107) < 3.0)
  {
    this = (OZSingleChannelBehavior *)OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(this, v27);
    *((_DWORD *)v1 + 21OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = this;
  }
  if (v28)
  {
    OZLinkBehavior::addToChannelHelper(v1, v28);
    this = (OZSingleChannelBehavior *)*((void *)v1 + 104);
    if (this)
    {
      OZChannelRef::~OZChannelRef((void **)this);
      this = (OZSingleChannelBehavior *)MEMORY[0x1BA9BFBA0]();
    }
    *((void *)v1 + 104) = 0;
  }
  return this;
}

uint64_t non-virtual thunk to'OZLinkBehavior::sceneDidChange(OZLinkBehavior *this)
{
  return OZLinkBehavior::validateParamStates((OZLinkBehavior *)((char *)this - 16));
}

void OZLinkBehavior::notify(OZLinkBehavior *this, char a2)
{
  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0x10) != 0) {
    (*(void (**)(OZLinkBehavior *))(*(void *)this + 816))(this);
  }
  if ((a2 & 0xC) != 0
    && (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)
    && *(void *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1584))
  {
    (*(void (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
    uint64_t v4 = *(OZNotificationManager **)(*(void *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)
                                               + 1584)
                                   + 168);
    if (v4 && OZNotificationManager::wasChannelModified(v4, (const OZChannelBase *)((char *)this + 1960)))
    {
      OZLinkBehavior::mixModeChanged(this);
    }
    else
    {
      (*(void (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
      uint64_t v5 = *(OZNotificationManager **)(*(void *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)
                                                 + 1584)
                                     + 168);
      if (v5 && OZNotificationManager::wasChannelModified(v5, (const OZChannelBase *)((char *)this + 1552)))
      {
        OZLinkBehavior::applyModeChanged(this);
      }
      else
      {
        (*(void (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
        int v6 = *(OZNotificationManager **)(*(void *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this
                                                                                                 + 336))(this)
                                                   + 1584)
                                       + 168);
        if (!v6 || !OZNotificationManager::wasChannelModified(v6, (const OZChannelBase *)((char *)this + 2520)))
        {
          (*(void (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
          int v7 = *(OZNotificationManager **)(*(void *)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this)
                                                     + 1584)
                                         + 168);
          if (v7)
          {
            if (OZNotificationManager::wasChannelModified(v7, (const OZChannelBase *)((char *)this + 1296)))
            {
              if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0))
              {
                uint64_t Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
                if (Object)
                {
                  if (v9) {
                    (*(void (**)(void *))(*(void *)v9 + 496))(v9);
                  }
                }
              }
            }
          }
          goto LABEL_17;
        }
        OZLinkBehavior::applyLinkWhenChanged(this);
      }
    }
    OZLinkBehavior::updateObjectState(this);
LABEL_17:
    OZLinkBehavior::updateApplyMode(this);
  }
}

void OZLinkBehavior::mixModeChanged(OZLinkBehavior *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1960), MEMORY[0x1E4F1FA48], 0.0);
  int v3 = (OZChannelBase *)((char *)this + 2368);
  if (ValueAsInt == 6)
  {
    OZChannelBase::resetFlag(v3, 2, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2216), 2, 1);
  }
  else
  {
    OZChannelBase::setFlag(v3, 2, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2216), 2, 1);
  }
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v4 = *(OZDocument **)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1584);
    OZDocument::postNotification(v4, 134742016);
  }
}

void OZLinkBehavior::applyModeChanged(OZLinkBehavior *this)
{
  uint64_t v2 = (char *)*((void *)this + 188);
  int v3 = (char *)this + 1512;
  if (v2 != (char *)this + 1512)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v5 = *(OZChannelBase **)(*((void *)v2 + 5) + 40);
      if (v5)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1552), v4, 0.0))
        {
          OZChannelBase::resetFlag(v5, 2, 1);
        }
        else
        {
          (*((void (**)(OZChannelBase *, void))v5->var0 + 36))(v5, 0);
          OZChannelBase::setFlag(v5, 2, 1);
        }
      }
      int v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this))
  {
    int v9 = *(OZDocument **)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1584);
    OZDocument::postNotification(v9, 134742016);
  }
}

void OZLinkBehavior::applyLinkWhenChanged(OZLinkBehavior *this)
{
  uint64_t v2 = (char *)*((void *)this + 188);
  int v3 = (char *)this + 1512;
  if (v2 != (char *)this + 1512)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v5 = *(OZChannelBase **)(*((void *)v2 + 5) + 48);
      if (v5)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 1
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 4)
        {
          OZChannelBase::resetFlag(v5, 2, 1);
        }
        else
        {
          OZChannelBase::setFlag(v5, 2, 1);
        }
      }
      int v6 = *(OZChannelBase **)(*((void *)v2 + 5) + 56);
      if (v6)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 2
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 4)
        {
          OZChannelBase::resetFlag(v6, 2, 1);
        }
        else
        {
          OZChannelBase::setFlag(v6, 2, 1);
        }
      }
      int v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          int v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), MEMORY[0x1E4F1FA48], 0.0);
  int v11 = (OZChannelBase *)((char *)this + 2776);
  if (ValueAsInt) {
    OZChannelBase::resetFlag(v11, 2, 1);
  }
  else {
    OZChannelBase::setFlag(v11, 2, 1);
  }
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this))
  {
    int v12 = *(OZDocument **)((*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1584);
    OZDocument::postNotification(v12, 134742016);
  }
}

uint64_t OZLinkBehavior::updateApplyMode(OZLinkBehavior *this)
{
  uint64_t result = OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E4F1FA48], 0.0);
  if (!result) {
    goto LABEL_49;
  }
  uint64_t result = OZSingleChannelBehavior::getChanBase(this);
  if (!result) {
    goto LABEL_49;
  }
  int v3 = *(_DWORD **)(result + 8);
  int v4 = v3[2];
  int v5 = v3[3];
  int v6 = v3[4];
  int v7 = v3[5];
  BOOL v8 = v4 == 291593097 && v5 == -876591041;
  BOOL v9 = v8 && v6 == -1188129301;
  if (v9 && v7 == 209773980) {
    goto LABEL_50;
  }
  int v11 = *(_DWORD **)(*(void *)(result + 48) + 8);
  int v12 = v11[2];
  int v13 = v11[3];
  int v14 = v11[4];
  uint64_t result = v11[5];
  BOOL v15 = v12 == 291593097 && v13 == -876591041;
  BOOL v16 = v15 && v14 == -1188129301;
  BOOL v17 = v16 && result == 209773980;
  if (v17
    || (v4 == -1250726091 ? (BOOL v18 = v5 == 686887383) : (BOOL v18 = 0),
        v18 ? (BOOL v19 = v6 == -1122435069) : (BOOL v19 = 0),
        v19 ? (BOOL v20 = v7 == -1819691262) : (BOOL v20 = 0),
        v20
     || (v12 == -1250726091 ? (BOOL v21 = v13 == 686887383) : (BOOL v21 = 0),
         v21 ? (BOOL v22 = v14 == -1122435069) : (BOOL v22 = 0),
         v22 ? (BOOL v23 = result == -1819691262) : (BOOL v23 = 0),
         v23)))
  {
LABEL_50:
    if (!*((unsigned char *)this + 1464))
    {
      *((unsigned char *)this + 1464) = 1;
      PCURL::PCURL((PCURL *)&v24, @"Link Behavior Apply Mode Convert Pixels to Scale");
      (*(void (**)(char *, PCString *, uint64_t))(*((void *)this + 194) + 848))((char *)this + 1552, &v24, 1);
      PCString::~PCString(&v24);
      return (*(uint64_t (**)(char *, void, void, double))(*((void *)this + 194) + 712))((char *)this + 1552, MEMORY[0x1E4F1FA48], 0, 0.0);
    }
  }
  else
  {
LABEL_49:
    if (*((unsigned char *)this + 1464))
    {
      *((unsigned char *)this + 1464) = 0;
      PCURL::PCURL((PCURL *)&v24, @"Link Behavior Apply Mode Enum");
      (*(void (**)(char *, PCString *, uint64_t))(*((void *)this + 194) + 848))((char *)this + 1552, &v24, 1);
      PCString::~PCString(&v24);
      return (*(uint64_t (**)(char *, void))(*((void *)this + 194) + 280))((char *)this + 1552, 0);
    }
  }
  return result;
}

void sub_1B7D0CF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void non-virtual thunk to'OZLinkBehavior::notify(OZLinkBehavior *this, char a2)
{
}

BOOL OZLinkBehavior::isRebuildUIChannel(OZLinkBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 2928) == a2;
}

void OZLinkBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    int v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      int v5 = *(const void **)(v2 + 16);
      if (v5) {
      else
      }
        int v6 = 0;
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v6 + 2928), v4, 0.0);
      BOOL v8 = (OZChannelBase *)(v6 + 3184);
      if (ValueAsInt) {
        OZChannelBase::resetFlag(v8, 0x400000, 1);
      }
      else {
        OZChannelBase::setFlag(v8, 0x400000, 1);
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void *OZLinkBehavior::checkForRecursion(OZLinkBehavior *this, OZObjectManipulator *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = (void *)(*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      int v4 = (OZGroup *)result;
      if (v5) {
        int v6 = (OZSceneNode *)(*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
      }
      else {
      return (void *)((OZGroup::hasDescendant(v4, v6) & 1) != 0);
      }
    }
  }
  return result;
}

void OZLinkBehavior::updateReferenceIDs(std::string *a1, uint64_t a2)
{
  OZSingleChannelBehavior::updateReferenceIDs(a1, (uint64_t **)a2);
  unsigned int ID = OZChannelRef::getID((OZChannelRef *)&a1[53]);
  uint64_t v7 = *(void *)(a2 + 8);
  int v6 = (void *)(a2 + 8);
  uint64_t v5 = v7;
  if (v7)
  {
    BOOL v8 = v6;
    do
    {
      unsigned int v9 = *(_DWORD *)(v5 + 28);
      BOOL v10 = v9 >= ID;
      if (v9 >= ID) {
        int v11 = (uint64_t *)v5;
      }
      else {
        int v11 = (uint64_t *)(v5 + 8);
      }
      if (v10) {
        BOOL v8 = (void *)v5;
      }
      uint64_t v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && ID >= *((_DWORD *)v8 + 7)) {
      OZChannelRef::setID(a1 + 53, *((_DWORD *)v8 + 8));
    }
  }
  __p = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  int v12 = (std::string::__raw *)a1[62].__r_.__value_.__r.__words[2];
  int v13 = (std::string::__raw *)&a1[63];
  if (v12 == v13)
  {
    BOOL v17 = 0;
  }
  else
  {
    do
    {
      OZLinkChannelExpression::getParamChannelRefs(v12[1].__words[2], &__p);
      int v14 = (std::string::__raw *)v12->__words[1];
      if (v14)
      {
        do
        {
          BOOL v15 = v14;
          int v14 = (std::string::__raw *)v14->__words[0];
        }
        while (v14);
      }
      else
      {
        do
        {
          BOOL v15 = (std::string::__raw *)v12->__words[2];
          BOOL v16 = v15->__words[0] == (void)v12;
          int v12 = v15;
        }
        while (!v16);
      }
      int v12 = v15;
    }
    while (v15 != v13);
    BOOL v17 = (OZChannelRef **)__p;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v25);
  while (v17 != v27)
  {
    BOOL v18 = *v17;
    unsigned int v19 = OZChannelRef::getID(*v17);
    uint64_t v20 = *v6;
    if (*v6)
    {
      BOOL v21 = v6;
      do
      {
        unsigned int v22 = *(_DWORD *)(v20 + 28);
        BOOL v23 = v22 >= v19;
        if (v22 >= v19) {
          PCString v24 = (uint64_t *)v20;
        }
        else {
          PCString v24 = (uint64_t *)(v20 + 8);
        }
        if (v23) {
          BOOL v21 = (void *)v20;
        }
        uint64_t v20 = *v24;
      }
      while (*v24);
      if (v21 != v6 && v19 >= *((_DWORD *)v21 + 7)) {
        OZChannelRef::setID((std::string *)v18, *((_DWORD *)v21 + 8));
      }
    }
    ++v17;
  }
  PCString::~PCString(&v25);
  if (__p)
  {
    long long v27 = (OZChannelRef **)__p;
    operator delete(__p);
  }
}

void sub_1B7D0D2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'OZLinkBehavior::updateReferenceIDs(uint64_t a1, uint64_t a2)
{
}

void OZLinkBehavior::willReset(OZLinkBehavior *this)
{
}

uint64_t OZLinkBehavior::isAttributeCompatibleToDestChannel(OZLinkBehavior *this, int a2, OZChannelBase *a3)
{
  if (a2 != 1)
  {
    if (a3)
    {
      char v17 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), (int32x4_t)xmmword_1B8378A20)))) ^ 1;
      return v17 & 1;
    }
LABEL_37:
    char v17 = 0;
    return v17 & 1;
  }
  if (!a3) {
    goto LABEL_37;
  }
  var1 = a3->var1;
  int v5 = *((_DWORD *)var1 + 2);
  int v4 = *((_DWORD *)var1 + 3);
  int v7 = *((_DWORD *)var1 + 4);
  int v6 = *((_DWORD *)var1 + 5);
  BOOL v10 = v5 == -725694774 && v4 == 686756311 && v7 == -1640300541 && v6 == -1819691262;
  char v17 = v10
     || (v5 == 291593097 ? (BOOL v11 = v4 == -876591041) : (BOOL v11 = 0),
         v11 ? (BOOL v12 = v7 == -1188129301) : (BOOL v12 = 0),
         v12 ? (BOOL v13 = v6 == 209773980) : (BOOL v13 = 0),
         v13)
     || v5 == -1250726091 && v4 == 686887383 && v7 == -1122435069 && v6 == -1819691262;
  return v17 & 1;
}

OZLinkBehavior *OZLinkBehavior::getEvalDepChansForRef(OZLinkBehavior *this, void *a2, uint64_t a3, OZLinkBehavior **a4)
{
  if (a3)
  {
    int v4 = this;
    if ((void *)((char *)this + 1064) == a2)
    {
      this = (OZLinkBehavior *)OZLinkBehavior::getSourceChannel(this);
      if (this)
      {
        SourceChannel = OZLinkBehavior::getSourceChannel(v4);
        this = (OZLinkBehavior *)operator new(0x18uLL);
        *((void *)this + OZLinkBehavior::clearAll(this, 1) = a4;
        *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = SourceChannel;
        int v7 = *a4;
        *(void *)this = *a4;
        *((void *)v7 + OZLinkBehavior::clearAll(this, 1) = this;
        *a4 = this;
        a4[2] = (OZLinkBehavior *)((char *)a4[2] + 1);
      }
    }
  }
  return this;
}

void OZLinkBehavior::addExpressionParamChannel(uint64_t **this, OZLinkChannelExpression *a2, OZChannelBase *a3, int a4)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + OZLinkBehavior::clearAll(this, 1) = a3;
  std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__emplace_multi<std::pair<OZLinkChannelExpression *,OZChannelBase *>>(this + 191, &v8);
  if (a4)
  {
    int v7 = (OZChannelFolder *)((uint64_t (*)(uint64_t **))(*this)[39])(this);
    OZChannelFolder::push_back(v7, a3);
  }
}

void OZLinkBehavior::fixParamChannelNames(OZLinkBehavior *this)
{
  unsigned int v1 = (char *)*((void *)this + 188);
  uint64_t v2 = (char *)this + 1512;
  if (v1 != (char *)this + 1512)
  {
    do
    {
      OZLinkChannelExpression::fixParamChannelNames(*((OZChannelBase ***)v1 + 5));
      int v3 = (char *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          int v4 = v3;
          int v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (char *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          unsigned int v1 = v4;
        }
        while (!v5);
      }
      unsigned int v1 = v4;
    }
    while (v4 != v2);
  }
}

uint64_t *OZLinkBehavior::deleteExpressionParamChannels(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v21 = a2;
  BOOL v5 = a1 + 191;
  int v6 = std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__equal_range_multi<OZLinkChannelExpression *>((uint64_t)(a1 + 191), &v21);
  int v7 = v6;
  unsigned int v9 = v8;
  if (v6 != v8)
  {
    BOOL v10 = v6;
    do
    {
      BOOL v11 = (OZChannelBase *)v10[5];
      uint64_t v20 = v11;
      if (a3)
      {
        for (uint64_t i = *(void **)(a3 + 8); i; uint64_t i = (void *)*i)
        {
          unint64_t v13 = i[4];
          if ((unint64_t)v11 >= v13)
          {
            if (v13 >= (unint64_t)v11) {
              goto LABEL_14;
            }
            ++i;
          }
        }
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a3, (unint64_t *)&v20, (uint64_t *)&v20);
      }
      if (((uint64_t (*)(uint64_t **))(*a1)[40])(a1))
      {
        uint64_t v14 = ((uint64_t (*)(uint64_t **))(*a1)[40])(a1);
        (*(void (**)(uint64_t, OZChannelBase *))(*(void *)v14 + 888))(v14, v20);
      }
      BOOL v15 = (OZChannelFolder *)((uint64_t (*)(uint64_t **))(*a1)[39])(a1);
      OZChannelFolder::removeDescendant(v15, v20);
      if (v20) {
        (*((void (**)(OZChannelBase *))v20->var0 + 1))(v20);
      }
LABEL_14:
      BOOL v16 = (uint64_t *)v10[1];
      if (v16)
      {
        do
        {
          char v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = (uint64_t *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          BOOL v10 = v17;
        }
        while (!v18);
      }
      BOOL v10 = v17;
    }
    while (v17 != v9);
  }
  return std::__tree<unsigned int>::erase(v5, v7, v9);
}

uint64_t OZLinkBehavior::getTargetChannelID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 1504);
  if (v2 == (void *)(a1 + 1512)) {
    return 0xFFFFFFFFLL;
  }
  while (v2[5] != a2)
  {
    int v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        int v4 = v3;
        int v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        int v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    uint64_t v2 = v4;
    if (v4 == (void *)(a1 + 1512)) {
      return 0xFFFFFFFFLL;
    }
  }
  return *((unsigned int *)v2 + 8);
}

void OZLinkBehavior::writeBody(OZLinkBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  BOOL v10 = (OZLockingGroup *)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v10);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLinkBehaviorScope);
  BOOL v11 = (char *)*((void *)this + 188);
  BOOL v12 = (char *)this + 1512;
  if (v11 != (char *)this + 1512)
  {
    do
    {
      unint64_t v13 = (void *)*((void *)v11 + 5);
      if (v13[5] && v13[6] && v13[7])
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1007);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 1030, *(unsigned int *)(*(void *)(*((void *)v11 + 5) + 40) + 24));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 1031, *(unsigned int *)(*(void *)(*((void *)v11 + 5) + 48) + 24));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 1032, *(unsigned int *)(*(void *)(*((void *)v11 + 5) + 56) + 24));
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
      uint64_t v14 = (char *)*((void *)v11 + 1);
      if (v14)
      {
        do
        {
          BOOL v15 = v14;
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          BOOL v15 = (char *)*((void *)v11 + 2);
          BOOL v16 = *(void *)v15 == (void)v11;
          BOOL v11 = v15;
        }
        while (!v16);
      }
      BOOL v11 = v15;
    }
    while (v15 != v12);
  }
  OZSingleChannelBehavior::writeBody(this, a2, a3, a4, a5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1002);
  if (OZLinkBehavior::getSourceChannel(this))
  {
    char v17 = (char *)this + 1272;
    if (*((char *)this + 1295) < 0) {
      char v17 = *(const char **)v17;
    }
    PCString::PCString(&v30, v17);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
    PCString::~PCString(&v30);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  BOOL v18 = (char *)*((void *)this + 188);
  if (v18 != v12)
  {
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1003);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1005);
      uint64_t v19 = *((void *)v18 + 5);
      uint64_t v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0) {
        uint64_t v20 = *(const char **)v20;
      }
      PCString::PCString(&v30, v20);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1006);
      uint64_t TargetChannelID = OZLinkBehavior::getTargetChannelID((uint64_t)this, *((void *)v18 + 5));
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, TargetChannelID);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1020);
      uint64_t v22 = *((void *)v18 + 5);
      BOOL v23 = (const char *)(v22 + 64);
      if (*(char *)(v22 + 87) < 0) {
        BOOL v23 = *(const char **)v23;
      }
      PCString::PCString(&v30, v23);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1021);
      uint64_t v24 = *((void *)v18 + 5);
      PCString v25 = (const char *)(v24 + 88);
      if (*(char *)(v24 + 111) < 0) {
        PCString v25 = *(const char **)v25;
      }
      PCString::PCString(&v30, v25);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1022);
      uint64_t v26 = *((void *)v18 + 5);
      long long v27 = (const char *)(v26 + 112);
      if (*(char *)(v26 + 135) < 0) {
        long long v27 = *(const char **)v27;
      }
      PCString::PCString(&v30, v27);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v28 = (char *)*((void *)v18 + 1);
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (char *)*((void *)v18 + 2);
          BOOL v16 = *(void *)v29 == (void)v18;
          BOOL v18 = v29;
        }
        while (!v16);
      }
      BOOL v18 = v29;
    }
    while (v29 != v12);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
}

void sub_1B7D0DE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void non-virtual thunk to'OZLinkBehavior::writeBody(OZLinkBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
}

uint64_t OZLinkBehavior::parseBegin(OZLinkBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZLinkBehavior::parseBegin(OZLinkBehavior *this, PCSerializerReadStream *a2)
{
  int v3 = (OZLinkBehavior *)((char *)this - 48);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZLinkBehaviorScope);
  OZSingleChannelBehavior::parseBegin(v3, a2);
  return 1;
}

uint64_t OZLinkBehavior::parseElement(OZLinkChannelExpression **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v14);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 1019)
  {
    switch(v6)
    {
      case 1002:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14);
        OZChannelRef::OZChannelRef((OZChannelRef *)&v12, (PCString *)&v14);
        OZLinkBehavior::setSourceChannelRef((OZLinkBehavior *)this, &v12, 1);
        goto LABEL_17;
      case 1005:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14);
        operator new();
      case 1006:
        LODWORD(v12.__r_.__value_.__l.__data_) = 0;
        PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v12);
        long long v8 = this[493];
        if (v8) {
          OZLinkBehavior::addExpression((uint64_t **)this, v12.__r_.__value_.__l.__data_, v8);
        }
        goto LABEL_18;
      case 1007:
        unsigned int v13 = 0;
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 1030, (uint64_t)&v13);
        operator new();
      default:
        goto LABEL_18;
    }
  }
  switch(v6)
  {
    case 1020:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14);
      unsigned int v9 = this[493];
      if (v9)
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)&v12, (PCString *)&v14);
        OZChannelRef::operator=((std::string *)((char *)v9 + 64), &v12);
        goto LABEL_17;
      }
      break;
    case 1021:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14);
      BOOL v10 = this[493];
      if (v10)
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)&v12, (PCString *)&v14);
        OZChannelRef::operator=((std::string *)((char *)v10 + 88), &v12);
        goto LABEL_17;
      }
      break;
    case 1022:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14);
      int v7 = this[493];
      if (v7)
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)&v12, (PCString *)&v14);
        OZChannelRef::operator=((std::string *)((char *)v7 + 112), &v12);
LABEL_17:
        OZChannelRef::~OZChannelRef((void **)&v12.__r_.__value_.__l.__data_);
      }
      break;
  }
LABEL_18:
  OZSingleChannelBehavior::parseElement(this, a2, a3);
  PCString::~PCString((PCString *)&v14);
  return 1;
}

void sub_1B7D0E2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
}

uint64_t non-virtual thunk to'OZLinkBehavior::parseElement(OZLinkChannelExpression **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZLinkBehavior::didFinishLoadingIntoScene(OZChannel *this)
{
  OZLinkBehavior::resolveExpressionChannels(this);
  OZLinkBehavior::calcInternalScale((OZLinkBehavior *)this);
  OZLinkBehavior::fixParamChannelNames((OZLinkBehavior *)this);
  OZLinkBehavior::validateParamStates((OZLinkBehavior *)this);

  return OZLinkBehavior::updateApplyMode((OZLinkBehavior *)this);
}

uint64_t non-virtual thunk to'OZLinkBehavior::didFinishLoadingIntoScene(OZLinkBehavior *this)
{
  return OZLinkBehavior::didFinishLoadingIntoScene((OZChannel *)((char *)this - 16));
}

uint64_t OZLinkBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t result = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E4F1FA48], 0.0);
  if (result)
  {
    unint64_t v9 = a1 + 864;
    for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
    {
      unint64_t v11 = i[4];
      if (v9 >= v11)
      {
        if (v11 >= v9) {
          return result;
        }
        ++i;
      }
    }
    char v17 = (unint64_t *)(a1 + 864);
    std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v17, (uint64_t *)&v17);
    if (a2)
    {
      PCDirectedGraph<OZLocking *>::addEdge(a3, a2, a1 + 864);
    }
    else
    {
      unint64_t v16 = a1 + 864;
      char v17 = &v16;
      std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
    }
    TargetElement = (char *)OZLinkBehavior::getTargetElement((OZLinkBehavior *)a1);
    if (TargetElement) {
      OZLocking::getLockDependenciesForElement(TargetElement, a1 + 864, a3, a4);
    }
    uint64_t Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)(a1 + 1064));
    if (Object)
    {
      if (v14) {
        OZLocking::getLockDependenciesForElement(v14, a1 + 864, a3, a4);
      }
    }
    BOOL v15 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    OZLocking::addLockDependenciesForDependents((char *)(a1 + 864), v15, (uint64_t)a3, a4);
    char v17 = (unint64_t *)(a1 + 864);
    return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v17);
  }
  return result;
}

uint64_t non-virtual thunk to'OZLinkBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZLinkBehavior::getLockDependencies(a1 - 864, a2, a3, a4);
}

uint64_t OZLinkBehavior::getLockingGroups(OZLinkBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZLinkBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZLinkBehavior::getLockingGroups(OZLinkBehavior *this)
{
  unsigned int v1 = (char *)this - 864;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 108) + 336))((char *)this - 864);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

uint64_t OZLinkBehavior::canReferenceBehavior(OZLinkBehavior *this, OZObjectManipulator *a2)
{
  return OZLinkBehavior::checkForRecursion(this, a2) ^ 1;
}

uint64_t non-virtual thunk to'OZLinkBehavior::getLockingID(OZLinkBehavior *this)
{
  return *((unsigned int *)this - 196);
}

uint64_t OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::OZLinkBehavior_applyModeChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::OZLinkBehavior_applyModeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::_OZLinkBehavior_applyModeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::_OZLinkBehavior_applyModeChan) {
    operator new();
  }
}

void sub_1B7D0E78C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::OZLinkBehavior_applyModeChanImpl(OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *this)
{
}

void sub_1B7D0E860(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_scaleChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::OZLinkBehavior_scaleChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::OZLinkBehavior_scaleChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_scaleChanImpl::_OZLinkBehavior_scaleChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_scaleChanImpl::_OZLinkBehavior_scaleChan) {
    operator new();
  }
}

void sub_1B7D0E93C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_scaleChanImpl::OZLinkBehavior_scaleChanImpl(OZLinkBehavior::OZLinkBehavior_scaleChanImpl *this)
{
}

void sub_1B7D0EA14(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_scaleChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::OZLinkBehavior_scaleChanInfo_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::OZLinkBehavior_scaleChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_scaleChanInfo::_OZLinkBehavior_scaleChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_scaleChanInfo::_OZLinkBehavior_scaleChanInfo) {
    operator new();
  }
}

void sub_1B7D0EAF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_scaleChanInfo *OZLinkBehavior::OZLinkBehavior_scaleChanInfo::OZLinkBehavior_scaleChanInfo(OZLinkBehavior::OZLinkBehavior_scaleChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 0.5, 0.1, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_scaleChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11670A8;
  *((void *)this + 10) = &unk_1F11670C8;
  return this;
}

void sub_1B7D0EBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::OZLinkBehavior_mixModeChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::OZLinkBehavior_mixModeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::_OZLinkBehavior_mixModeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::_OZLinkBehavior_mixModeChan) {
    operator new();
  }
}

void sub_1B7D0EC9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::OZLinkBehavior_mixModeChanImpl(OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *this)
{
}

void sub_1B7D0ED70(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::OZLinkBehavior_easeRangeChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::OZLinkBehavior_easeRangeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::_OZLinkBehavior_easeRangeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::_OZLinkBehavior_easeRangeChan) {
    operator new();
  }
}

void sub_1B7D0EE4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::OZLinkBehavior_easeRangeChanImpl(OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *this)
{
}

void sub_1B7D0EF20(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::OZLinkBehavior_easeRangeChanInfo_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::OZLinkBehavior_easeRangeChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::_OZLinkBehavior_easeRangeChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::_OZLinkBehavior_easeRangeChanInfo) {
    operator new();
  }
}

void sub_1B7D0EFFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::OZLinkBehavior_easeRangeChanInfo(OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 10.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1167210;
  *((void *)this + 10) = &unk_1F1167230;
  return this;
}

void sub_1B7D0F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_customMixChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::OZLinkBehavior_customMixChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::OZLinkBehavior_customMixChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_customMixChanImpl::_OZLinkBehavior_customMixChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_customMixChanImpl::_OZLinkBehavior_customMixChan) {
    operator new();
  }
}

void sub_1B7D0F1A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_customMixChanImpl::OZLinkBehavior_customMixChanImpl(OZLinkBehavior::OZLinkBehavior_customMixChanImpl *this)
{
}

void sub_1B7D0F278(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_customMixChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::OZLinkBehavior_customMixChanInfo_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::OZLinkBehavior_customMixChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_customMixChanInfo::_OZLinkBehavior_customMixChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_customMixChanInfo::_OZLinkBehavior_customMixChanInfo) {
    operator new();
  }
}

void sub_1B7D0F354(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_customMixChanInfo *OZLinkBehavior::OZLinkBehavior_customMixChanInfo::OZLinkBehavior_customMixChanInfo(OZLinkBehavior::OZLinkBehavior_customMixChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_customMixChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1167300;
  *((void *)this + 10) = &unk_1F1167320;
  return this;
}

void sub_1B7D0F428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::OZLinkBehavior_applyLinkWhenChanImpl_once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::OZLinkBehavior_applyLinkWhenChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::_OZLinkBehavior_applyLinkWhenChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::_OZLinkBehavior_applyLinkWhenChan) {
    operator new();
  }
}

void sub_1B7D0F504(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::OZLinkBehavior_applyLinkWhenChanImpl(OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *this)
{
}

void sub_1B7D0F5D8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    BOOL v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    *((void *)v10 + 5) = *(void *)(a3 + 8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__emplace_multi<std::pair<OZLinkChannelExpression *,OZChannelBase *>>(uint64_t **a1, long long *a2)
{
  int v4 = (uint64_t *)operator new(0x30uLL);
  long long v5 = *a2;
  *((_OWORD *)v4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *a2;
  int v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4]) {
          break;
        }
        unsigned int v7 = (uint64_t *)*v7;
        long long v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unsigned int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    long long v8 = v6 + 1;
  }
  else
  {
    long long v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void *std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__equal_range_multi<OZLinkChannelExpression *>(uint64_t a1, unint64_t *a2)
{
  char v2 = (void *)(a1 + 8);
  PCString v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v4 = *a2;
  while (1)
  {
    unint64_t v5 = v3[4];
    if (v4 >= v5) {
      break;
    }
    char v2 = v3;
LABEL_7:
    PCString v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  unsigned int v7 = (void *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= v4;
      if (v8 >= v4) {
        BOOL v10 = v7;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      if (v9) {
        uint64_t result = v7;
      }
      unsigned int v7 = (void *)*v10;
    }
    while (*v10);
  }
  unint64_t v11 = (void *)v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= v11[4]) {
        std::string v12 = v11 + 1;
      }
      else {
        std::string v12 = v11;
      }
      unint64_t v11 = (void *)*v12;
    }
    while (*v12);
  }
  return result;
}

void OZCollisionBehavior::OZCollisionBehavior(OZCollisionBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *unint64_t v4 = &unk_1F11673F0;
  v4[2] = &unk_1F11676E8;
  v4[6] = &unk_1F1167940;
  v4[42] = &unk_1F1167998;
}

void OZCollisionBehavior::OZCollisionBehavior(OZCollisionBehavior *this, OZCollisionBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *PCString v3 = &unk_1F11673F0;
  v3[2] = &unk_1F11676E8;
  v3[6] = &unk_1F1167940;
  v3[42] = &unk_1F1167998;
}

void non-virtual thunk to'OZCollisionBehavior::~OZCollisionBehavior(OZCollisionBehavior *this)
{
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 48));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZCollisionBehavior::~OZCollisionBehavior(OZCollisionBehavior *this)
{
  OZReflexiveBehavior::~OZReflexiveBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZCollisionBehavior::handleCollisions(OZCollisionBehavior *this, OZTransformNode *a2, OZSimulationState *a3, OZSimulationState *a4, BOOL a5, BOOL *a6)
{
  *a6 = 0;
}

__n128 OZCollisionBehavior::handleCollisions(OZCollisionBehavior *this, OZTransformNode *a2, OZSimStateArray *a3, OZSimStateArray *a4, BOOL a5, BOOL *a6)
{
  uint64_t v6 = *(void *)a4;
  if (*(void *)a4 != *((void *)a4 + 1))
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)a3;
    long long v40 = (char *)a3 + 24;
    uint64_t v36 = (long long *)((char *)a4 + 24);
    uint64_t v37 = *(void *)a4;
    do
    {
      uint64_t v9 = v6 + v7;
      uint64_t v54 = 0x3FF0000000000000;
      uint64_t v56 = 0;
      long long v55 = 0uLL;
      uint64_t v41 = 0x3FF0000000000000;
      uint64_t v51 = 0;
      long long v50 = 0uLL;
      long long v42 = 0u;
      memset(v43, 0, sizeof(v43));
      long long v44 = 0u;
      memset(v45, 0, sizeof(v45));
      long long v46 = 0u;
      memset(v47, 0, sizeof(v47));
      long long v10 = *(_OWORD *)(v6 + v7);
      uint64_t v53 = *(void *)(v6 + v7 + 16);
      unint64_t v11 = (uint64_t *)(v6 + v7 + 24);
      long long v52 = v10;
      if (v11 != &v54)
      {
        uint64_t v54 = *v11;
        long long v12 = *(_OWORD *)(v9 + 32);
        uint64_t v56 = *(void *)(v9 + 48);
        long long v55 = v12;
      }
      long long v13 = *(_OWORD *)(v9 + 56);
      uint64_t v58 = *(void *)(v9 + 72);
      long long v57 = v13;
      long long v14 = *(_OWORD *)(v9 + 80);
      uint64_t v60 = *(void *)(v9 + 96);
      long long v59 = v14;
      long long v15 = *(_OWORD *)(v9 + 104);
      uint64_t v62 = *(void *)(v9 + 120);
      long long v61 = v15;
      long long v16 = *(_OWORD *)(v9 + 128);
      uint64_t v64 = *(void *)(v9 + 144);
      long long v63 = v16;
      __n128 v17 = *(__n128 *)(v9 + 152);
      uint64_t v66 = *(void *)(v9 + 168);
      __n128 v65 = v17;
      long long v67 = *v36;
      uint64_t v68 = *((void *)a4 + 5);
      uint64_t v18 = *(void *)(v9 + 192);
      long long v69 = *(_OWORD *)(v9 + 176);
      uint64_t v70 = v18;
      uint64_t v19 = (uint64_t *)(v8 + v7 + 24);
      if (v19 != &v41)
      {
        uint64_t v41 = *v19;
        long long v20 = *(_OWORD *)(v8 + v7 + 32);
        v43[0] = *(void *)(v8 + v7 + 48);
        long long v42 = v20;
      }
      uint64_t v21 = v8;
      long long v22 = *(_OWORD *)(v8 + v7 + 56);
      v43[3] = *(void *)(v8 + v7 + 72);
      *(_OWORD *)&v43[1] = v22;
      long long v23 = *(_OWORD *)(v8 + v7 + 80);
      v45[0] = *(void *)(v8 + v7 + 96);
      long long v44 = v23;
      long long v24 = *(_OWORD *)(v8 + v7 + 104);
      v45[3] = *(void *)(v8 + v7 + 120);
      *(_OWORD *)&v45[1] = v24;
      long long v25 = *(_OWORD *)(v8 + v7 + 128);
      v47[0] = *(void *)(v8 + v7 + 144);
      long long v46 = v25;
      long long v26 = *(_OWORD *)(v8 + v7 + 152);
      v47[3] = *(void *)(v8 + v7 + 168);
      *(_OWORD *)&v47[1] = v26;
      long long v48 = *(_OWORD *)v40;
      uint64_t v49 = *((void *)v40 + 2);
      uint64_t v27 = *(void *)(v8 + v7 + 192);
      long long v50 = *(_OWORD *)(v8 + v7 + 176);
      uint64_t v51 = v27;
      (*(void (**)(void))(*(void *)this + 728))();
      long long v28 = v52;
      *(void *)(v9 + 16) = v53;
      *(_OWORD *)uint64_t v9 = v28;
      uint64_t v6 = v37;
      if (v11 != &v54)
      {
        uint64_t *v11 = v54;
        uint64_t v29 = v37 + v7;
        long long v30 = v55;
        *(void *)(v29 + 48) = v56;
        *(_OWORD *)(v29 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v30;
      }
      long long v31 = v57;
      *(void *)(v9 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v58;
      *(_OWORD *)(v9 + 56) = v31;
      long long v32 = v59;
      *(void *)(v9 + 96) = v60;
      *(_OWORD *)(v9 + 80) = v32;
      long long v33 = v61;
      *(void *)(v9 + 120) = v62;
      *(_OWORD *)(v9 + 104) = v33;
      long long v34 = v63;
      *(void *)(v9 + 144) = v64;
      *(_OWORD *)(v9 + 128) = v34;
      __n128 result = v65;
      *(void *)(v9 + 168) = v66;
      *(__n128 *)(v9 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = result;
      v7 += 248;
      uint64_t v8 = v21;
    }
    while (v37 + v7 != *((void *)a4 + 1));
  }
  return result;
}

void OZReflexiveBehavior::OZReflexiveBehavior(OZReflexiveBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  *unint64_t v5 = &unk_1F11679D8;
  v5[2] = &unk_1F1167CC0;
  v5[6] = &unk_1F1167F18;
  v5[42] = &unk_1F1167F70;
  PCURL::PCURL((PCURL *)&v6, @"Behavior Affects Leaf Nodes");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 344), 0, &v6, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v6);
  *(_DWORD *)((char *)this + 497) = 0x1000000;
}

void sub_1B7D0FEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZSimulationBehavior::~OZSimulationBehavior(v10);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior::OZReflexiveBehavior(OZReflexiveBehavior *this, OZReflexiveBehavior *a2, char a3)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11679D8;
  *(void *)(v5 + 16) = &unk_1F1167CC0;
  *(void *)(v5 + 48) = &unk_1F1167F18;
  *(void *)(v5 + 336) = &unk_1F1167F70;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 344), (const OZChannelBase *)((char *)a2 + 344), (OZChannelFolder *)((char *)this + 56));
  *((unsigned char *)this + 497) = 0;
  *((unsigned char *)this + 498) = *((unsigned char *)a2 + 498);
  *(_WORD *)((char *)this + 499) = *(_WORD *)((char *)a2 + 499);
}

void sub_1B7D0FFD8(_Unwind_Exception *a1)
{
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior::~OZReflexiveBehavior(OZReflexiveBehavior *this)
{
  *(void *)this = &unk_1F11679D8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1167CC0;
  *((void *)this + 6) = &unk_1F1167F18;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1167F70;
  if (OZBehavior::getSceneNode(this))
  {
    uint64_t v2 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(void *)this + 320))(this);
    PCString v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
    OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  }
  if (*((unsigned char *)this + 497))
  {
    uint64_t v4 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(void *)this + 336))(this);
    OZDocument::removeCPPObserver(*(void *)(v4 + 1584));
    *((unsigned char *)this + 497) = 0;
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 344));

  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZReflexiveBehavior::~OZReflexiveBehavior(OZReflexiveBehavior *this)
{
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 48));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZReflexiveBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSimulationBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  uint64_t result = OZChannelBase::operator=(a1 + 344, (uint64_t)(v4 + 344));
  *(unsigned char *)(a1 + 496) = v5[496];
  *(_WORD *)(a1 + 498) = *((_WORD *)v5 + 249);
  return result;
}

void *OZReflexiveBehavior::findPreviousSimulationBehavior(OZReflexiveBehavior *this, OZSceneNode **a2)
{
  uint64_t v2 = (OZSceneNode *)(a2 + 125);
  if (a2 + 125 == (OZSceneNode **)a2[126]) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    PCString v6 = *(OZReflexiveBehavior **)(*(void *)v2 + 16);
    if (v6 == this) {
      break;
    }
    unint64_t v7 = *((void *)v6 + 1);
    long long v9 = xmmword_1B8380C40;
    if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v9)) {
      uint64_t v5 = v6;
    }
    uint64_t v2 = *(OZSceneNode **)v2;
  }
  while (v2 != a2[126]);
  if (!v5) {
    return 0;
  }
  else {
}
  }

uint64_t OZReflexiveBehavior::didAddToNode(OZReflexiveBehavior *this, OZSceneNode **a2)
{
  PreviousSimulationuint64_t Behavior = OZReflexiveBehavior::findPreviousSimulationBehavior(this, a2);
  uint64_t v5 = (void *)(*((uint64_t (**)(OZSceneNode **))*a2 + 80))(a2);
  OZChannelObjectRoot::insertBehaviorAfter(v5, (uint64_t)this, (uint64_t)PreviousSimulationBehavior);
  int v6 = (*((uint64_t (**)(OZSceneNode **))*a2 + 126))(a2);
  *((unsigned char *)this + 496) = v6;
  if (v6 && !*((unsigned char *)this + 499)) {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 344), 2, 0);
  }
  else {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 344), 2, 0);
  }
  if (*((unsigned char *)this + 500))
  {
    if (*((unsigned char *)this + 496) && !*((unsigned char *)this + 499))
    {
      unint64_t v7 = a2[1];
      int v8 = *((_DWORD *)v7 + 2);
      int v9 = *((_DWORD *)v7 + 3);
      int v10 = *((_DWORD *)v7 + 4);
      int v11 = *((_DWORD *)v7 + 5);
      BOOL v12 = v8 == -351952328 && v9 == -1278930473;
      BOOL v13 = v12 && v10 == -1492189181;
      BOOL v14 = v13 && v11 == -1821967528;
      if (v14
        || (v8 == -1953631563 ? (BOOL v15 = v9 == -1287843369) : (BOOL v15 = 0),
            v15 ? (BOOL v16 = v10 == -1417084925) : (BOOL v16 = 0),
            v16 ? (BOOL v17 = v11 == -1821967528) : (BOOL v17 = 0),
            v17))
      {
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
        OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
        *((unsigned char *)this + 498) = 1;
      }
    }
    *((unsigned char *)this + 500) = 0;
  }
  if (!*((unsigned char *)this + 497))
  {
    uint64_t v18 = (*((uint64_t (**)(OZSceneNode **))*a2 + 34))(a2);
    if (v18)
    {
      OZDocument::addCPPObserver(*(void *)(v18 + 1584), (uint64_t)this + 336, 1001);
      *((unsigned char *)this + 497) = 1;
    }
  }

  return OZSimulationBehavior::didAddToNode((uint64_t)this, (OZSceneNode *)a2);
}

uint64_t OZReflexiveBehavior::didInsert(OZReflexiveBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  return (*(uint64_t (**)(OZReflexiveBehavior *, OZSceneNode *))(*(void *)this + 96))(this, a2);
}

void OZReflexiveBehavior::willRemove(OZReflexiveBehavior *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(void *)this + 320))(this);
  PCString v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  if (*((unsigned char *)this + 497))
  {
    uint64_t v4 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(void *)this + 336))(this);
    OZDocument::removeCPPObserver(*(void *)(v4 + 1584));
    *((unsigned char *)this + 497) = 0;
  }
}

uint64_t *OZReflexiveBehavior::didAddSceneNodeToScene(uint64_t *this, OZScene *a2)
{
  if (!*((unsigned char *)this + 497))
  {
    uint64_t v2 = this;
    this = OZDocument::addCPPObserver(*((void *)a2 + 198), (uint64_t)(this + 42), 1001);
    *((unsigned char *)v2 + 497) = 1;
  }
  return this;
}

uint64_t OZReflexiveBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  if (*(unsigned char *)(this + 497))
  {
    uint64_t v2 = this;
    this = OZDocument::removeCPPObserver(*((void *)a2 + 198));
    *(unsigned char *)(v2 + 497) = 0;
  }
  return this;
}

BOOL OZReflexiveBehavior::affectsSelf(OZReflexiveBehavior *this)
{
  return !*((unsigned char *)this + 496) || *((unsigned char *)this + 498) == 0;
}

uint64_t OZReflexiveBehavior::setAffectsLeafNodes(OZReflexiveBehavior *this, unsigned int a2)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], (double)a2, 0);
}

OZChannelBase *OZReflexiveBehavior::hideAffectsLeafNodes(OZReflexiveBehavior *this, int a2)
{
  char v2 = a2;
  uint64_t v4 = (OZChannelBase *)((char *)this + 344);
  if (a2) {
    uint64_t result = OZChannelBase::setFlag(v4, 2, 0);
  }
  else {
    uint64_t result = OZChannelBase::resetFlag(v4, 2, 0);
  }
  *((unsigned char *)this + 499) = v2;
  return result;
}

uint64_t OZReflexiveBehavior::notify(OZReflexiveBehavior *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(OZReflexiveBehavior *))(*(void *)this + 336))(this);
  if ((a2 & 8) != 0)
  {
    uint64_t v5 = result;
    uint64_t result = *(void *)(*(void *)(result + 1584) + 168);
    if (result)
    {
      uint64_t result = OZNotificationManager::wasChannelModified((OZNotificationManager *)result, (const OZChannelBase *)((char *)this + 344));
      if (result)
      {
        int v6 = *(OZChannelBase **)(v5 + 1504);
        if (v6) {
          OZChannelBase::setRangeName(v6, (const PCString *)1);
        }
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], 0.0);
        *((unsigned char *)this + 498) = result != 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZReflexiveBehavior::notify(OZReflexiveBehavior *this, char a2)
{
  return OZReflexiveBehavior::notify((OZReflexiveBehavior *)((char *)this - 336), a2);
}

uint64_t OZReflexiveBehavior::parseEnd(OZReflexiveBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 500) = 0;
  *((unsigned char *)this + 498) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], 0.0) != 0;

  return OZBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZReflexiveBehavior::parseEnd(OZReflexiveBehavior *this, PCSerializerReadStream *a2)
{
  PCString v3 = (OZReflexiveBehavior *)((char *)this - 48);
  *((unsigned char *)this + 45OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 450) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 296), MEMORY[0x1E4F1FA48], 0.0) != 0;

  return OZBehavior::parseEnd(v3, a2);
}

uint64_t OZMetalTextureCache::instance(OZMetalTextureCache *this)
{
  if (OZMetalTextureCache::instance(void)::once != -1) {
    dispatch_once(&OZMetalTextureCache::instance(void)::once, &__block_literal_global_83);
  }
  return _instance;
}

void ___ZN19OZMetalTextureCache8instanceEv_block_invoke()
{
}

void sub_1B7D109C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::OZMetalTextureCache(OZMetalTextureCache *this)
{
  PCSingleton::PCSingleton(this, 100);
  *(void *)uint64_t v1 = &unk_1F1167FF0;
  *((void *)v1 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)v1 + OZLinkBehavior::clearAll(this, 1) = (char *)v1 + 16;
  *((void *)v1 + 3) = 0;
  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(v1);
  if (*GPUComputeDeviceList != GPUComputeDeviceList[1]) {
    operator new();
  }
}

void sub_1B7D10C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSingleton *a10)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(v10, *((void **)a10 + 2));
  PCSingleton::~PCSingleton(a10);
  _Unwind_Resume(a1);
}

unint64_t OZMetalTextureCache::getCache@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t result = [a2 registryID];
  int v8 = *(void **)(a1 + 16);
  unint64_t v7 = (void *)(a1 + 16);
  int v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  int v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= result;
    if (v10 >= result) {
      BOOL v12 = v6;
    }
    else {
      BOOL v12 = v6 + 1;
    }
    if (v11) {
      int v9 = v6;
    }
    int v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || result < v9[4]) {
LABEL_12:
  }
    int v9 = v7;
  uint64_t v14 = v9[5];
  uint64_t v13 = v9[6];
  *a3 = v14;
  a3[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t OZMetalTextureCache::add(OZMetalTextureCache *a1, uint64_t *a2, void *a3, PCHash128 *a4)
{
  uint64_t v14 = 0x3FF0000000000000;
  uint64_t v11 = 0x3FF0000000000000;
  uint64_t v8 = 0x3FF0000000000000;
  uint64_t v5 = 0x3FF0000000000000;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  OZMetalTextureCache::add(a1, a2, (long long *)&v5, a3, a4);
  return 1;
}

uint64_t OZMetalTextureCache::add(OZMetalTextureCache *this, uint64_t *a2, long long *a3, void *a4, PCHash128 *a5)
{
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v18 = *a2;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    long long v11 = a3[5];
    long long v23 = a3[4];
    long long v24 = v11;
    long long v12 = a3[7];
    long long v25 = a3[6];
    long long v26 = v12;
    long long v13 = a3[1];
    long long v19 = *a3;
    long long v20 = v13;
    long long v14 = a3[3];
    long long v21 = a3[2];
    long long v22 = v14;
    OZMetalTextureCache::getCache((uint64_t)this, a4, &v16);
    PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::addValue(*v16, a5, &v18, *(void *)(*a2 + 72));
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
    }
  }
  else
  {
    OZMetalTextureCache::remove(this, a5);
  }
  return 1;
}

void sub_1B7D10E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)va);
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::remove(OZMetalTextureCache *this, const PCHash128 *a2)
{
  char v2 = (char *)*((void *)this + 1);
  PCString v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::removeKey(**((uint64_t ***)v2 + 5), a2);
      uint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          long long v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          char v2 = v6;
        }
        while (!v7);
      }
      char v2 = v6;
    }
    while (v6 != v3);
  }
}

void OZMetalTextureCache::find(uint64_t a1@<X0>, void *a2@<X1>, const PCHash128 *a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  OZMetalTextureCache::getCache(a1, a2, &v15);
  uint64_t v8 = *v15;
  char v17 = 0;
  PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::findValue(v8, a3, &v17, (uint64_t)&v13);
  uint64_t v9 = v13;
  if (v13)
  {
    if (a4 && v14 != a4)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        long long v11 = &a4[i];
        long long v12 = *(_OWORD *)&v14[i + 16];
        _OWORD *v11 = *(_OWORD *)&v14[i];
        v11[1] = v12;
      }
    }
    *a5 = v9;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    }
  }
  else
  {
    *a5 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1B7D11020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 48);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::clear(OZMetalTextureCache *this)
{
  uint64_t v1 = (char *)*((void *)this + 1);
  char v2 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    do
    {
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::clear(**((os_unfair_lock_s ***)v1 + 5));
      PCString v3 = (char *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          PCString v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (char *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
}

void OZMetalTextureCache::~OZMetalTextureCache(OZMetalTextureCache *this)
{
  *(void *)this = &unk_1F1167FF0;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1167FF0;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::shared_ptr[abi:ne180100]<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7D111F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100]((os_unfair_lock_s ***)va, 0);
  _Unwind_Resume(a1);
}

os_unfair_lock_s **std::__shared_ptr_pointer<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>> *,std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::__shared_ptr_default_delete<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>,std::allocator<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>>::__on_zero_shared(uint64_t a1)
{
  unint64_t result = *(os_unfair_lock_s ***)(a1 + 24);
  if (result)
  {
    PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>> *,std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::__shared_ptr_default_delete<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>,std::allocator<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

os_unfair_lock_s **PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(os_unfair_lock_s **a1)
{
  return a1;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::clear(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1;
  char v2 = a1 + 4;
  PCSpinLock::lock(a1 + 4);
  PCString v3 = *(void **)&v1[8]._os_unfair_lock_opaque;
  v1 += 8;
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy((uint64_t)&v1[-2], v3);
  *(void *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(void *)&v1->_os_unfair_lock_opaque = 0;
  *(void *)&v1[2]._os_unfair_lock_opaque = 0;
  *(void *)&v1[6]._os_unfair_lock_opaque = *(void *)&v1[4]._os_unfair_lock_opaque;
  *(void *)&v1[12]._os_unfair_lock_opaque = 0;
  PCSpinLock::unlock(v2);
}

void std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, a2[1]);
    PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(uint64_t a1)
{
  char v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 16));
  PCString v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

os_unfair_lock_s **std::unique_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](os_unfair_lock_s ***a1, os_unfair_lock_s **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::setMaxCost(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 88) = a2;
  if (!*(void *)(a1 + 104))
  {
    while (*(void *)(a1 + 80) > a2 || *(void *)(a1 + 40) > *(void *)(a1 + 96))
    {
      BOOL v5 = *(uint64_t ***)(a1 + 48);
      if (v5 == *(uint64_t ***)(a1 + 56)) {
        break;
      }
      uint64_t v8 = *v5;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v8);
      long long v6 = v8;
      BOOL v7 = (PGHelium::MetalTextureCacheEntry *)(v8 + 6);
      *(void *)(a1 + 80) -= v8[23];
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v6);
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v7);
      operator delete(v6);
      a2 = *(void *)(a1 + 88);
    }
  }
  PCSpinLock::unlock(v4);
}

void sub_1B7D1155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 200);
  unint64_t v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(void *)(*a1 + 8 * v3) = *(void *)(*a1 + 8 * v4);
    *(void *)(*(void *)(*a1 + 8 * v3) + 200) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    uint64_t v5 = *a1 + 8 * v3;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble(a1, v5);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1] - *result;
  unint64_t v4 = *(void *)(*(void *)a2 + 200);
  unint64_t v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      uint64_t v17 = *(void *)(v2 + 8 * v4);
      do
      {
        unint64_t v18 = v4 - 1;
        unint64_t v19 = (v4 - 1) >> 1;
        uint64_t v20 = *(void *)(v2 + 8 * v19);
        if (*(void *)(v20 + 192) <= *(void *)(v17 + 192)) {
          break;
        }
        *(void *)(v2 + 8 * v4) = v20;
        *(void *)(v2 + 8 * v19) = v17;
        uint64_t v2 = *result;
        *(void *)(*(void *)(*result + 8 * v4) + 200) = v4;
        uint64_t v17 = *(void *)(v2 + 8 * v19);
        *(void *)(v17 + 200) = v19;
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  char v6 = 0;
  unint64_t v7 = v3 >> 3;
  uint64_t v8 = 2 * v4;
  uint64_t v9 = *(void *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v10 = v8 + 2;
    unint64_t v11 = *(void *)(v9 + 192);
    BOOL v12 = v10 < v7 && v11 > *(void *)(*(void *)(v2 + 8 * v10) + 192);
    unint64_t v13 = *(void *)(*(void *)(v2 + 8 * v5) + 192);
    if (v11 <= v13 && !v12) {
      break;
    }
    BOOL v15 = v11 > v13 && v12;
    if (v12) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v5;
    }
    if (v15)
    {
      if (v13 <= *(void *)(*(void *)(v2 + 8 * v10) + 192)) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v10;
      }
    }
    *(void *)(v2 + 8 * v4) = *(void *)(v2 + 8 * v16);
    *(void *)(v2 + 8 * v16) = v9;
    uint64_t v2 = *result;
    *(void *)(*(void *)(*result + 8 * v4) + 200) = v4;
    uint64_t v9 = *(void *)(v2 + 8 * v16);
    *(void *)(v9 + 200) = v16;
    uint64_t v8 = 2 * v16;
    char v6 = 1;
    unint64_t v5 = (2 * v16) | 1;
    unint64_t v4 = v16;
    if (v5 >= v7) {
      return result;
    }
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v4 = *(void *)(*(void *)a2 + 200);
    goto LABEL_24;
  }
  return result;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::addValue(uint64_t a1, const PCHash128 *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 16);
  v49[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  if (*(void *)(a1 + 88) >= a4 || *(void *)(a1 + 104))
  {
    uint64_t v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
    unint64_t v10 = v9;
    v49[0] = v9;
    if ((void *)(a1 + 32) == v9)
    {
      uint64_t v18 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v18;
      uint64_t v19 = *a3;
      uint64_t v38 = v19;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      }
      long long v43 = *(_OWORD *)(a3 + 9);
      long long v44 = *(_OWORD *)(a3 + 11);
      long long v45 = *(_OWORD *)(a3 + 13);
      long long v46 = *(_OWORD *)(a3 + 15);
      long long v39 = *(_OWORD *)(a3 + 1);
      long long v40 = *(_OWORD *)(a3 + 3);
      long long v41 = *(_OWORD *)(a3 + 5);
      long long v42 = *(_OWORD *)(a3 + 7);
      *(void *)&long long v47 = a4;
      *((void *)&v47 + OZLinkBehavior::clearAll(this, 1) = v18;
      uint64_t v48 = 0;
      long long v25 = *(_OWORD *)a2;
      uint64_t v26 = v19;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      }
      long long v31 = v43;
      long long v32 = v44;
      long long v33 = v45;
      long long v34 = v46;
      long long v27 = v39;
      long long v28 = v40;
      long long v29 = v41;
      long long v30 = v42;
      uint64_t v36 = v48;
      long long v35 = v47;
      v37[0] = (uint64_t)std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v25, (uint64_t)&v25);
      v37[1] = v20;
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v26);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v37);
      unint64_t v21 = *(void *)(a1 + 80) + a4;
      *(void *)(a1 + 80) = v21;
      if (!*(void *)(a1 + 104))
      {
        while (v21 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
        {
          long long v24 = *(void **)(a1 + 48);
          if (v24 == *(void **)(a1 + 56)) {
            break;
          }
          *(void *)&long long v25 = *v24;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v25);
          long long v22 = (uint64_t *)v25;
          long long v23 = (PGHelium::MetalTextureCacheEntry *)(v25 + 48);
          *(void *)(a1 + 80) -= *(void *)(v25 + 184);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v22);
          PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v23);
          operator delete(v22);
          unint64_t v21 = *(void *)(a1 + 80);
        }
      }
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v38);
    }
    else
    {
      BOOL v12 = v9 + 6;
      uint64_t v11 = v9[6];
      uint64_t v13 = *a3;
      if (v11 != *a3)
      {
        if (v11)
        {
          (*(void (**)(void))(*(void *)v11 + 24))(v10[6]);
          uint64_t v13 = *a3;
        }
        *BOOL v12 = v13;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        }
      }
      if (v12 != a3)
      {
        uint64_t v14 = 0;
        BOOL v15 = v10 + 7;
        unint64_t v16 = a3 + 1;
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
            v15[i] = v16[i];
          ++v14;
          v15 += 4;
          v16 += 4;
        }
        while (v14 != 4);
      }
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::update(a1, (uint64_t)v49, a4);
    }
  }
  PCSpinLock::unlock(v8);
}

void sub_1B7D11A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&a33);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)(v33 - 88));
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = ((char *)v5 - (unsigned char *)*a1) >> 3;
  uint64_t v7 = *a2;
  *(void *)(*a2 + 200) = v6;
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v13 = v6 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      uint64_t v7 = *a2;
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v16 = &v15[8 * v6];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = v7;
    uint64_t v11 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - OZLinkBehavior::clearAll(this, 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v5 = v7;
    uint64_t v11 = v5 + 1;
  }
  a1[1] = v11;
  unint64_t v21 = *(void *)(*a2 + 200);
  if (v21)
  {
    long long v22 = (char *)*a1;
    uint64_t v23 = *((void *)*a1 + v21);
    do
    {
      unint64_t v24 = v21 - 1;
      unint64_t v25 = (v21 - 1) >> 1;
      uint64_t v26 = *(void *)&v22[8 * v25];
      if (*(void *)(v26 + 192) <= *(void *)(v23 + 192)) {
        break;
      }
      *(void *)&v22[8 * v21] = v26;
      *(void *)&v22[8 * v25] = v23;
      long long v22 = (char *)*a1;
      *(void *)(*((void *)*a1 + v21) + 200) = v21;
      uint64_t v23 = *(void *)&v22[8 * v25];
      *(void *)(v23 + 200) = v25;
      unint64_t v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 72) + 1;
  *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v6;
  *(void *)(*(void *)a2 + 19OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v6;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = a3 - *(void *)(*(void *)a2 + 184);
  if (v9)
  {
    unint64_t v10 = v9 + *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v10;
    *(void *)(v8 + 184) = a3;
    if (!*(void *)(a1 + 104))
    {
      while (v10 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
      {
        uint64_t v11 = *(uint64_t ***)(a1 + 48);
        if (v11 == *(uint64_t ***)(a1 + 56)) {
          break;
        }
        unint64_t v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        uint64_t v12 = v14;
        uint64_t v13 = (PGHelium::MetalTextureCacheEntry *)(v14 + 6);
        *(void *)(a1 + 80) -= v14[23];
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v13);
        operator delete(v12);
        unint64_t v10 = *(void *)(a1 + 80);
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xD0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B7D11DE8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  long long v11 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v11;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)(v2 + 48));
    }
    operator delete((void *)v2);
  }
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::findValue(uint64_t a1@<X0>, const PCHash128 *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = (os_unfair_lock_s *)(a1 + 16);
  v19[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  long long v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
  long long v10 = v9;
  v19[0] = v9;
  if ((void *)(a1 + 32) == v9)
  {
    *a3 = 0;
    *(void *)(a4 + 128) = 0x3FF0000000000000;
    *(void *)(a4 + 88) = 0x3FF0000000000000;
    *(void *)(a4 + 48) = 0x3FF0000000000000;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  }
  else
  {
    uint64_t v11 = v9[6];
    *(void *)a4 = v11;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    }
    long long v12 = *(_OWORD *)(v10 + 7);
    long long v13 = *(_OWORD *)(v10 + 9);
    long long v14 = *(_OWORD *)(v10 + 11);
    *(_OWORD *)(a4 + 56) = *(_OWORD *)(v10 + 13);
    *(_OWORD *)(a4 + 40) = v14;
    *(_OWORD *)(a4 + 24) = v13;
    *(_OWORD *)(a4 + 8) = v12;
    long long v15 = *(_OWORD *)(v10 + 15);
    long long v16 = *(_OWORD *)(v10 + 17);
    long long v17 = *(_OWORD *)(v10 + 19);
    *(_OWORD *)(a4 + 120) = *(_OWORD *)(v10 + 21);
    *(_OWORD *)(a4 + 104) = v17;
    *(_OWORD *)(a4 + 88) = v16;
    *(_OWORD *)(a4 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v15;
    uint64_t v18 = *(void *)(a1 + 72) + 1;
    *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v18;
    v10[24] = v18;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v19);
    *a3 = 1;
  }
  PCSpinLock::unlock(v8);
}

void sub_1B7D12060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_s *a10)
{
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v10);
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a10);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::removeKey(uint64_t *a1, const PCHash128 *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 2);
  v8[1] = a1 + 2;
  PCSpinLock::lock((os_unfair_lock_t)a1 + 4);
  long long v5 = (uint64_t **)(a1 + 3);
  long long v6 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)(a1 + 3), a2);
  v8[0] = v6;
  if (a1 + 4 != v6)
  {
    a1[10] -= v6[23];
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove(a1 + 6, (uint64_t)v8);
    long long v7 = v8[0];
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v5, v8[0]);
    PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)(v7 + 6));
    operator delete(v7);
  }
  PCSpinLock::unlock(v4);
}

void sub_1B7D12134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAffectedNodes_Factory::getInstance(OZChannelAffectedNodes_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelAffectedNodes_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelAffectedNodes_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes_Factory::_instance;
}

__CFString *OZChannelAffectedNodes::getObjCWrapperName(OZChannelAffectedNodes *this)
{
  return @"CHChannel";
}

void OZTransitiveBehavior::OZTransitiveBehavior(OZTransitiveBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  *long long v5 = &unk_1F11680A0;
  v5[2] = &unk_1F1168390;
  v5[6] = &unk_1F11685E8;
  v5[42] = &unk_1F1168640;
  PCURL::PCURL((PCURL *)&v7, @"Transitive Behavior Scope Enum");
  PCURL::PCURL((PCURL *)&v6, @"Transitive Behavior Scope");
  OZChannelEnum::OZChannelEnum((OZTransitiveBehavior *)((char *)this + 344), 1u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Transitive Behavior Affected Nodes");
  OZChannelAffectedNodes::OZChannelAffectedNodes((OZTransitiveBehavior *)((char *)this + 600), &v7, (OZChannelFolder *)((char *)this + 56), 0x12Du, 0, 0, 0);
  PCString::~PCString(&v7);
  *((void *)this + 94) = (char *)this + 752;
  *((void *)this + 95) = (char *)this + 752;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((unsigned char *)this + 780) = 0;
  *((_DWORD *)this + 196) = 3;
  *((unsigned char *)this + 788) = 1;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 600), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 600));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 600), 0);
}

void sub_1B7D12388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZSimulationBehavior::~OZSimulationBehavior(v12);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior::OZTransitiveBehavior(OZTransitiveBehavior *this, OZTransitiveBehavior *a2, char a3)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11680A0;
  *(void *)(v5 + 16) = &unk_1F1168390;
  *(void *)(v5 + 48) = &unk_1F11685E8;
  *(void *)(v5 + 336) = &unk_1F1168640;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 344), (OZTransitiveBehavior *)((char *)a2 + 344), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 600), (const OZChannelBase *)((char *)a2 + 600), v6);
  *((void *)this + 75) = &unk_1F11686A0;
  *((void *)this + 77) = &unk_1F1168A00;
  std::list<unsigned int>::list((void *)this + 94, (uint64_t)a2 + 752);
  *((_DWORD *)this + 194) = 0;
  *((unsigned char *)this + 780) = 0;
  *((_DWORD *)this + 196) = 3;
  *((unsigned char *)this + 788) = 1;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 600), 0);
}

void sub_1B7D12554(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior::~OZTransitiveBehavior(OZTransitiveBehavior *this)
{
  *(void *)this = &unk_1F11680A0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1168390;
  *((void *)this + 6) = &unk_1F11685E8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1168640;
  OZTransitiveBehavior::clearScope(this);
  if (*((unsigned char *)this + 780))
  {
    uint64_t v2 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 336))(this);
    OZDocument::removeCPPObserver(*(void *)(v2 + 1584));
    *((unsigned char *)this + 780) = 0;
  }
  std::__list_imp<unsigned int>::clear((void *)this + 94);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 600));
  OZChannelEnum::~OZChannelEnum((OZTransitiveBehavior *)((char *)this + 344));

  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  uint64_t vars8;

  OZTransitiveBehavior::~OZTransitiveBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZTransitiveBehavior::clearScope(OZTransitiveBehavior *this)
{
  int v2 = *((_DWORD *)this + 196);
  if ((*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this))
  {
    uint64_t v3 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
    uint64_t v4 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      if (v2 == 1)
      {
        Node = OZScene::getNode(v4, *((_DWORD *)this + 194));
        if (Node)
        {
          long long v10 = (void *)(*(uint64_t (**)(void *))(*(void *)Node + 640))(Node);
LABEL_13:
          OZChannelObjectRoot::removeBehavior(v10, (uint64_t)this);
LABEL_14:
          *((_DWORD *)this + 196) = 3;
          return;
        }
      }
      else if (v2)
      {
        for (uint64_t i = *((void *)this + 95);
              (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
              uint64_t i = *(void *)(i + 8))
        {
          PCString v7 = OZScene::getNode(v5, *(_DWORD *)(i + 16));
          if (v7)
          {
            long long v8 = (void *)(*(uint64_t (**)(void *))(*(void *)v7 + 640))(v7);
            OZChannelObjectRoot::removeBehavior(v8, (uint64_t)this);
          }
        }
        goto LABEL_14;
      }
      long long v10 = (void *)((char *)v5 + 920);
      goto LABEL_13;
    }
  }
}

void non-virtual thunk to'OZTransitiveBehavior::~OZTransitiveBehavior(OZTransitiveBehavior *this)
{
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 48));
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void *OZTransitiveBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSimulationBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZTransitiveBehavior::clearScope((OZTransitiveBehavior *)a1);
  if (v5 != (void *)a1) {
    std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t *)(a1 + 752), v5[95], (uint64_t)(v5 + 94));
  }
  *(_DWORD *)(a1 + 776) = *((_DWORD *)v5 + 194);
  *(_DWORD *)(a1 + 784) = *((_DWORD *)v5 + 196);
  uint64_t result = OZTransitiveBehavior::updateScope((OZTransitiveBehavior *)a1);
  *(unsigned char *)(a1 + 788) = *((unsigned char *)v5 + 788);
  return result;
}

void *OZTransitiveBehavior::updateScope(OZTransitiveBehavior *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = (void *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
    uint64_t v4 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 272))(v4);
    if (result)
    {
      uint64_t v5 = (OZScene *)result;
      if (ValueAsInt == 1)
      {
        uint64_t v7 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
        long long v8 = *(_DWORD **)(v7 + 960);
        if (v8)
        {
          PCString v6 = (void *)(*(uint64_t (**)(void))(*(void *)v8 + 640))(*(void *)(v7 + 960));
          int v9 = v8[20];
        }
        else
        {
          int v9 = 0;
          PCString v6 = (void *)((char *)v5 + 920);
        }
        *((_DWORD *)this + 194) = v9;
      }
      else
      {
        if (ValueAsInt)
        {
          for (uint64_t i = *((void *)this + 95);
                (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
                uint64_t i = *(void *)(i + 8))
          {
            uint64_t result = OZScene::getNode(v5, *(_DWORD *)(i + 16));
            if (result)
            {
              uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*result + 640))(result);
              uint64_t result = OZChannelObjectRoot::addBehavior(v11, (uint64_t)this);
            }
          }
          goto LABEL_16;
        }
        PCString v6 = result + 115;
      }
      uint64_t result = OZChannelObjectRoot::addBehavior(v6, (uint64_t)this);
LABEL_16:
      *((_DWORD *)this + 196) = ValueAsInt;
    }
  }
  return result;
}

void *OZTransitiveBehavior::didAddToNode(OZTransitiveBehavior *this, OZSceneNode *a2)
{
  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  uint64_t result = (void *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
  if (result)
  {
    uint64_t result = OZTransitiveBehavior::updateScope(this);
    if (!*((unsigned char *)this + 780))
    {
      uint64_t result = (void *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
      if (result)
      {
        uint64_t result = OZDocument::addCPPObserver(result[198], (uint64_t)this + 336, 1001);
        *((unsigned char *)this + 780) = 1;
      }
    }
  }
  return result;
}

uint64_t OZTransitiveBehavior::didInsert(OZTransitiveBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  return (*(uint64_t (**)(OZTransitiveBehavior *, OZSceneNode *))(*(void *)this + 96))(this, a2);
}

void OZTransitiveBehavior::willRemove(OZTransitiveBehavior *this)
{
  OZTransitiveBehavior::clearScope(this);
  if (*((unsigned char *)this + 780))
  {
    uint64_t v2 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 336))(this);
    OZDocument::removeCPPObserver(*(void *)(v2 + 1584));
    *((unsigned char *)this + 780) = 0;
  }
  *((void *)this + 4OZLinkBehavior::clearAll(this, 1) = 0;
}

uint64_t *OZTransitiveBehavior::didAddSceneNodeToScene(uint64_t *this, OZScene *a2)
{
  *((unsigned char *)this + 788) = 1;
  if (!*((unsigned char *)this + 780))
  {
    uint64_t v2 = this;
    this = OZDocument::addCPPObserver(*((void *)a2 + 198), (uint64_t)(this + 42), 1001);
    *((unsigned char *)v2 + 780) = 1;
  }
  return this;
}

void OZTransitiveBehavior::willRemoveSceneNodeFromScene(OZTransitiveBehavior *this, OZScene *a2)
{
  if (*((unsigned char *)this + 780))
  {
    OZDocument::removeCPPObserver(*((void *)a2 + 198));
    *((unsigned char *)this + 780) = 0;
  }
}

BOOL OZTransitiveBehavior::isRebuildUIChannel(OZTransitiveBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 344) == a2;
}

void OZTransitiveBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v5 = *(char **)(v2 + 16);
      if (v5) {
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 344), v4, 0.0);
      }
      if (ValueAsInt == 2) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
    uint64_t v7 = *(void *)(a2 + 8);
    for (i = ValueAsInt == 2 && *(void *)(a2 + 16) < 2uLL; v7 != a2; uint64_t v7 = *(void *)(v7 + 8))
    {
      long long v10 = *(char **)(v7 + 16);
      if (v10) {
      uint64_t v11 = (OZChannelBase *)(v10 + 600);
      }
      if (i) {
        OZChannelBase::resetFlag(v11, 0x400000, 1);
      }
      else {
        OZChannelBase::setFlag(v11, 0x400000, 1);
      }
    }
  }
}

unint64_t OZTransitiveBehavior::canAddToSceneNode(OZTransitiveBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  long long v6 = xmmword_1B8381350;
  if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v6)) {
    return 0;
  }
  else {
    return OZSimulationBehavior::canAddToSceneNode(this, a2);
  }
}

BOOL OZTransitiveBehavior::affectsSelf(OZTransitiveBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], 0.0) == 2;
}

uint64_t OZTransitiveBehavior::notify(OZTransitiveBehavior *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 336))(this);
  if ((a2 & 8) != 0)
  {
    uint64_t v5 = result;
    uint64_t result = *(void *)(*(void *)(result + 1584) + 168);
    if (result)
    {
      uint64_t result = OZNotificationManager::wasChannelModified((OZNotificationManager *)result, (const OZChannelBase *)((char *)this + 344));
      if (result)
      {
        long long v6 = *(OZChannelBase **)(v5 + 1504);
        if (v6) {
          OZChannelBase::setRangeName(v6, (const PCString *)1);
        }
        OZTransitiveBehavior::clearScope(this);
        uint64_t result = (uint64_t)OZTransitiveBehavior::updateScope(this);
      }
    }
  }
  if ((a2 & 0x10) != 0 && (*((unsigned char *)this + 788) || *((_DWORD *)this + 196) == 2))
  {
    OZTransitiveBehavior::clearScope(this);
    uint64_t result = (uint64_t)OZTransitiveBehavior::updateScope(this);
    *((unsigned char *)this + 788) = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'OZTransitiveBehavior::notify(OZTransitiveBehavior *this, char a2)
{
  return OZTransitiveBehavior::notify((OZTransitiveBehavior *)((char *)this - 336), a2);
}

uint64_t OZTransitiveBehavior::dirtyAllDescendants(uint64_t this, int8x16_t *a2)
{
  if (a2)
  {
    uint64_t v3 = (OZTransitiveBehavior *)this;
    this = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 960))(a2);
    if (this)
    {
      uint64_t v4 = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 1024))(a2);
      this = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 1032))(a2);
      if (v4 != this)
      {
        uint64_t v5 = this;
        do
        {
          this = OZTransitiveBehavior::dirtyAllDescendants(v3, *(OZSceneNode **)(v4 + 16));
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4 != v5);
      }
    }
    else if (vorr_s8(*(int8x8_t *)a2[2].i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2[2], a2[2], 8uLL)))
    {
      long long v6 = *(uint64_t (**)(int8x16_t *))(a2->i64[0] + 496);
      return v6(a2);
    }
  }
  return this;
}

int8x8_t *OZTransitiveBehavior::dirty(OZTransitiveBehavior *this)
{
  OZBehavior::dirty(this);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = (int8x8_t *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
    uint64_t v4 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
    uint64_t result = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 272))(v4);
    if (result)
    {
      if (ValueAsInt == 1)
      {
        uint64_t result = (int8x8_t *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(void *)this + 320))(this);
        uint64_t v7 = (int8x16_t *)result[120];
        if (v7)
        {
          return (int8x8_t *)OZTransitiveBehavior::dirtyAllDescendants((uint64_t)this, v7);
        }
      }
      else
      {
        uint64_t v5 = (OZScene *)result;
        if (ValueAsInt)
        {
          long long v8 = (char *)this + 752;
          for (uint64_t i = *((void *)this + 95); (char *)i != v8; uint64_t i = *(void *)(i + 8))
          {
            uint64_t result = (int8x8_t *)OZScene::getNode(v5, *(_DWORD *)(i + 16));
            if (result
              && *(void *)&vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
            {
              uint64_t result = (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(void *)result + 496))(result);
            }
          }
        }
        else
        {
          OZScene::begin((OZScene *)result, (uint64_t)v12);
          OZScene::end_sel(v5, (uint64_t)v10);
          while (v12[0] != v10[0])
          {
            if (v12[0] != v12[2])
            {
              long long v6 = *(int8x8_t **)(v12[0] + 16);
              if (v6)
              {
                if (vorr_s8(v6[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v6[4].i8, *(int8x16_t *)v6[4].i8, 8uLL)))
                {
                  (*(void (**)(int8x8_t *))(*(void *)v6 + 496))(v6);
                }
              }
            }
            OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v12);
          }
          std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v11);
          return (int8x8_t *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
        }
      }
    }
  }
  return result;
}

void sub_1B7D13414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t *non-virtual thunk to'OZTransitiveBehavior::dirty(OZTransitiveBehavior *this)
{
  return OZTransitiveBehavior::dirty((OZTransitiveBehavior *)((char *)this - 16));
}

BOOL OZTransitiveBehavior::canRigChannel(OZTransitiveBehavior *this, const OZChannelBase *a2)
{
  return (const OZChannelBase *)((char *)this + 600) != a2;
}

BOOL non-virtual thunk to'OZTransitiveBehavior::canRigChannel(OZTransitiveBehavior *this, const OZChannelBase *a2)
{
  return (const OZChannelBase *)((char *)this + 584) != a2;
}

uint64_t OZTransitiveBehavior::writeBody(OZTransitiveBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTransitiveBehaviorScope);
  for (uint64_t i = *((void *)this + 95);
        (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
        uint64_t i = *(void *)(i + 8))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 301);
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 56))(a2, *(unsigned int *)(i + 16));
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);

  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZTransitiveBehavior::writeBody(OZTransitiveBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZTransitiveBehavior::writeBody((OZTransitiveBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZTransitiveBehavior::parseBegin(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZTransitiveBehavior::parseBegin(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTransitiveBehavior::parseEnd(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZTransitiveBehavior::parseEnd(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZTransitiveBehavior *)((char *)this - 48);
  OZTransitiveBehavior::updateScope((OZTransitiveBehavior *)((char *)this - 48));
  OZBehavior::parseEnd(v3, a2);
  return 1;
}

uint64_t OZTransitiveBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 301)
  {
    int v9 = 0;
    PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v9);
    long long v6 = operator new(0x18uLL);
    v6[4] = v9;
    uint64_t v7 = this[94];
    *(void *)long long v6 = v7;
    *((void *)v6 + OZLinkBehavior::clearAll(this, 1) = this + 94;
    *((void *)v7 + OZLinkBehavior::clearAll(this, 1) = v6;
    this[94] = (PCSerializer *)v6;
    this[96] = (PCSerializer *)((char *)this[96] + 1);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZTransitiveBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void *OZTransitiveBehavior::updateReferenceIDs(OZTransitiveBehavior *a1, void *a2)
{
  OZChannelObjectRoot::updateReferenceIDs((void *)a1 + 7, a2);
  OZTransitiveBehavior::clearScope(a1);
  uint64_t v4 = *((void *)a1 + 95);
  if ((OZTransitiveBehavior *)v4 != (OZTransitiveBehavior *)((char *)a1 + 752))
  {
    uint64_t v7 = a2[1];
    long long v6 = a2 + 1;
    uint64_t v5 = v7;
    do
    {
      if (v5)
      {
        unsigned int v8 = *(_DWORD *)(v4 + 16);
        int v9 = v6;
        uint64_t v10 = v5;
        do
        {
          unsigned int v11 = *(_DWORD *)(v10 + 28);
          BOOL v12 = v11 >= v8;
          if (v11 >= v8) {
            uint64_t v13 = (uint64_t *)v10;
          }
          else {
            uint64_t v13 = (uint64_t *)(v10 + 8);
          }
          if (v12) {
            int v9 = (void *)v10;
          }
          uint64_t v10 = *v13;
        }
        while (*v13);
        if (v9 != v6 && v8 >= *((_DWORD *)v9 + 7)) {
          *(_DWORD *)(v4 + 16) = *((_DWORD *)v9 + 8);
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while ((OZTransitiveBehavior *)v4 != (OZTransitiveBehavior *)((char *)a1 + 752));
  }

  return OZTransitiveBehavior::updateScope(a1);
}

void *non-virtual thunk to'OZTransitiveBehavior::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZTransitiveBehavior::updateReferenceIDs((OZTransitiveBehavior *)(a1 - 16), a2);
}

void OZChannelAffectedNodes::clone(OZChannelAffectedNodes *this)
{
}

void sub_1B7D1385C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelAffectedNodes_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D138C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes_Factory::OZChannelAffectedNodes_Factory(OZChannelAffectedNodes_Factory *this)
{
  long long v3 = xmmword_1B8378A10;
  long long v4 = xmmword_1B8383DF0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1168A70;
  *((void *)this + 16) = &unk_1F1168B40;
}

void sub_1B7D13998(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes_Factory::create(OZChannelAffectedNodes_Factory *this, const PCString *a2)
{
}

void sub_1B7D13A14(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes_Factory::createCopy(OZChannelAffectedNodes_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D13B08(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes_Factory::createChannelCopy(OZChannelAffectedNodes_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D13BFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes::OZChannelAffectedNodes(OZChannelAffectedNodes *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannel::OZChannel((OZChannel *)this, a2, a3, 0, a4, 0, a5, a6);
  *(void *)int v9 = &unk_1F11686A0;
  *((void *)v9 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1168A00;
  OZChannelAffectedNodesInfo = (OZChannelAffectedNodes *)OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(v9);
  if (a6)
  {
    uint64_t v11 = *((void *)this + 17);
  }
  else
  {
    uint64_t v11 = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
    *((void *)this + 17) = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
  }
  *((void *)this + 16) = v11;
  OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodesInfo);
  if (a5)
  {
    uint64_t v12 = *((void *)this + 15);
  }
  else
  {
    uint64_t v12 = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
    *((void *)this + 15) = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
  }
  *((void *)this + 14) = v12;
}

void sub_1B7D13CE8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(OZChannelAffectedNodes *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::_OZChannelAffectedNodesInfo_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::_OZChannelAffectedNodesInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
}

uint64_t OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodes *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::_OZChannelAffectedNodesImpl_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::_OZChannelAffectedNodesImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
}

void std::__call_once_param<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelAffectedNodes::_OZChannelAffectedNodesInfo) {
    operator new();
  }
}

void sub_1B7D13E1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodesInfo::OZChannelAffectedNodesInfo(OZChannelAffectedNodesInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1168B98;
  *((void *)this + 10) = &unk_1F1168BB8;
}

void sub_1B7D13EC8(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelAffectedNodes::_OZChannelAffectedNodesImpl) {
    operator new();
  }
}

void sub_1B7D13FB8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes::OZChannelAffectedNodes(OZChannelAffectedNodes *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  Instance = (OZFactory *)OZChannelAffectedNodes_Factory::getInstance(this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  *(void *)this = &unk_1F11686A0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1168A00;
  OZChannelAffectedNodesInfo = (OZChannelAffectedNodes *)OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(v15);
  if (a7)
  {
    uint64_t v17 = *((void *)this + 17);
  }
  else
  {
    uint64_t v17 = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
    *((void *)this + 17) = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
  }
  *((void *)this + 16) = v17;
  OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodesInfo);
  if (a6)
  {
    uint64_t v18 = *((void *)this + 15);
  }
  else
  {
    uint64_t v18 = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
    *((void *)this + 15) = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
  }
  *((void *)this + 14) = v18;
}

void sub_1B7D14108(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZProcessControl::OZProcessControl(OZProcessControl *this)
{
  *(void *)this = &unk_1F1168C88;
  *((unsigned char *)this + 8) = 0;
  *((_OWORD *)this + OZLinkBehavior::clearAll(this, 1) = 0u;
  *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((void *)this + 6) = 0;
  operator new();
}

void sub_1B7D14198(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4076DFA842);
  _Unwind_Resume(a1);
}

void OZProcessControl::~OZProcessControl(OZProcessControl *this)
{
  *(void *)this = &unk_1F1168C88;
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F1168C88;
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZProcessControl::setProgressHandler(uint64_t this, int (*a2)(void))
{
  *(void *)(this + 40) = a2;
  return this;
}

uint64_t OZProcessControl::setHeliumRenderer(uint64_t this, HGRenderer *a2)
{
  *(void *)(this + 48) = a2;
  return this;
}

BOOL OZProcessControl::isAborted(OZProcessControl *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 8);
  if (v1) {
    return 1;
  }
  uint64_t v2 = (unsigned int (*)(void))*((void *)this + 5);
  return v2 && v2() != 0;
}

__darwin_time_t OZGetTime(void)
{
  gettimeofday(&v1, 0);
  return 1000 * v1.tv_sec + v1.tv_usec / 1000;
}

uint64_t OZGetCornersFromBounds3d(float a1, float a2, float a3, float a4, uint64_t result)
{
  *(float *)uint64_t result = a1;
  *(float *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = 0;
  *(float *)(result + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a2;
  *(float *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  *(float *)(result + 24) = a2;
  *(float *)(result + 28) = a4;
  *(_DWORD *)(result + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(float *)(result + 36) = a1;
  *(float *)(result + 40) = a4;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void OZClampBoundsToMaxTextureSize(OZChannelBase *a1, double *a2, double *a3)
{
  if (a2 && *a2 > 4096.0)
  {
    *a2 = 4096.0;
    int v6 = 1;
    if (!a3) {
      goto LABEL_8;
    }
  }
  else
  {
    int v6 = 0;
    if (!a3) {
      goto LABEL_8;
    }
  }
  if (*a3 > 4096.0)
  {
    *a3 = 4096.0;
LABEL_9:
    PCURL::PCURL((PCURL *)&v7, @"Object is too big message");
    OZChannelBase::setRangeName(a1, &v7);
    PCString::~PCString(&v7);
    goto LABEL_10;
  }
LABEL_8:
  if (v6) {
    goto LABEL_9;
  }
LABEL_10:
  if (a2 && *a2 == 0.0) {
    *a2 = 1.0;
  }
  if (a3)
  {
    if (*a3 == 0.0) {
      *a3 = 1.0;
    }
  }
}

void sub_1B7D14484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

double OZClampBoundsToMaxTextureSize(OZChannelBase *a1, uint64_t a2)
{
  if (a2)
  {
    double v3 = *(double *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    double v7 = v3;
    OZClampBoundsToMaxTextureSize(a1, &v7, (double *)&v6);
    uint64_t v5 = v6;
    double result = v7;
    *(double *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v5;
  }
  return result;
}

void OZLiGenerator::OZLiGenerator(OZLiGenerator *this, OZImageGenerator *a2, const OZRenderParams *a3)
{
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1199AC8;
  *((void *)this + 18OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 1464) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F1168DB8);
  *(void *)this = &unk_1F1168CC8;
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1168D98;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a2;
  OZRenderParams::OZRenderParams((OZLiGenerator *)((char *)this + 24), a3);
}

void sub_1B7D145A8(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1168DB8);
  *(void *)(v1 + 1448) = v2;
  *(unsigned char *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  _Unwind_Resume(a1);
}

uint64_t OZLiGenerator::pixelTransformSupport(OZLiGenerator *this, const LiRenderParameters *a2)
{
  return (*(uint64_t (**)(void, const LiRenderParameters *, char *))(**((void **)this + 2) + 2288))(*((void *)this + 2), a2, (char *)this + 24);
}

uint64_t OZLiGenerator::getHelium(OZLiGenerator *this, LiAgent *a2)
{
  long long v4 = (FxColorDescription *)((char *)this + 24);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v4, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v4, *(float *)(*((void *)a2 + 6) + 192));
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 2) + 2296);

  return v6();
}

uint64_t OZLiGenerator::filteredEdges(OZLiGenerator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 2304))();
}

uint64_t OZLiGenerator::estimateRenderMemory()
{
  return 0;
}

void *OZLiGenerator::print(uint64_t a1)
{
  double result = *(void **)(a1 + 16);
  if (result)
  {
    if (result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 2360);
      return (void *)v2();
    }
  }
  return result;
}

void OZLiGenerator::~OZLiGenerator(OZLiGenerator *this)
{
  *(void *)this = &unk_1F1168CC8;
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1168D98;
  OZRenderParams::~OZRenderParams((OZLiGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1168DB8);
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1168CC8;
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1168D98;
  OZRenderParams::~OZRenderParams((OZLiGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F1168DB8);
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiGenerator::~OZLiGenerator(OZLiGenerator *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F1168CC8;
  *((void *)v1 + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1168D98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1168DB8);
  *((void *)v1 + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1199AC8;
  v1[1464] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F1168CC8;
  *((void *)v1 + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1168D98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F1168DB8);
  *((void *)v1 + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1199AC8;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);

  JUMPOUT(0x1BA9BFBA0);
}

void OZImageMaskRender::makeImageSource(OZImageMaskRender *this, OZRenderParams *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 181) + 1248))(*((void *)this + 181));
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 181) + 2448), MEMORY[0x1E4F1FA48], 0.0);
  MaskSource = (OZImageNode *)OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  uint64_t v10 = 0;
  PCSharedCount::PCSharedCount(&v11);
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v9, MaskSource, a2);
  if (ValueAsInt) {
    int v7 = 0;
  }
  else {
    int v7 = v4;
  }
  if (v7 == 1) {
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)a2, &v8);
  operator new();
}

void sub_1B7D152FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,PCSharedCount a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x1BA9BFBA0](v72, 0x10B1C40DE3F20C5);
  PCSharedCount::~PCSharedCount(&a31);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a60);
  std::__list_imp<unsigned int>::clear(&a40);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a70);
  PCSharedCount::~PCSharedCount(v71);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)(v73 - 168));
  PCSharedCount::~PCSharedCount(v70);
  _Unwind_Resume(a1);
}

void OZImageNodeRender::~OZImageNodeRender(OZImageNodeRender *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 24)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 32)) = a2[2];
  OZRenderParams::~OZRenderParams((OZImageNodeRender *)((char *)this + 16));
}

void OZImageMaskRender::OZImageMaskRender(uint64_t a1, const OZRenderParams *a2, const OZRenderParams *a3, int a4)
{
  *(void *)(a1 + 1560) = &unk_1F1199AC8;
  *(void *)(a1 + 1568) = 0;
  *(unsigned char *)(a1 + 1576) = 1;
  LiImageSource::LiImageSource((LiImageSource *)(a1 + 1544), (uint64_t *)&off_1F1169178);
  OZImageNodeRender::OZImageNodeRender((OZImageNodeRender *)a1, (OZImageNode *)&off_1F1169150, a2, a3);
  *(void *)a1 = &unk_1F1168F70;
  *(void *)(a1 + 1544) = &unk_1F1169068;
  *(void *)(a1 + 1560) = &unk_1F1169130;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1456) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1464));
  *(_OWORD *)(a1 + 147OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1488) = _Q0;
  *(_DWORD *)(a1 + 1508) = a4;
  *(void *)(a1 + 151OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1520));
  *(void *)(a1 + 1528) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1536));
  *(int64x2_t *)(a1 + 147OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = vdupq_n_s64(0xC12E848000000000);
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x413E848000000000uLL);
  if (a2) {
  else
  }
    uint64_t v13 = 0;
  *(void *)(a1 + 1448) = v13;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v22, a3);
  long long v14 = *(OZImageMask **)(a1 + 1448);
  CMTime v21 = *(CMTime *)a3;
  OZImageMask::getMaskSourceTime(v14, &v21, &v17);
  __n128 v22 = v17;
  uint64_t v25 = 0;
  uint64_t v23 = v18;
  uint64_t v24 = 0;
  MaskSource = (OZImageNode *)OZImageMask::getMaskSource(*(OZImageMask **)(a1 + 1448));
  long long v16 = *(OZImageNode **)(*(void *)(a1 + 1448) + 960);
  if (v16) {
  if (MaskSource != v16)
  }
    OZImageMaskRender::makeImageSource((OZImageMaskRender *)a1, (OZRenderParams *)&v22);
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v20, MaskSource, (OZRenderParams *)&v22);
  if (MaskSource) {
  OZChannelBase::setRangeName((OZChannelBase *)a3, &v19);
  }
  operator new();
}

void sub_1B7D159CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,PCSharedCount a50)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v57 - 88));
  PCSharedCount::~PCSharedCount(v56);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a40);
  std::__list_imp<unsigned int>::clear(&a20);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a50);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x228]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x290]);
  PCSharedCount::~PCSharedCount(v55);
  PCSharedCount::~PCSharedCount(v54);
  PCSharedCount::~PCSharedCount(v53);
  OZImageNodeRender::~OZImageNodeRender((OZImageNodeRender *)v50, (uint64_t *)&off_1F1169150);
  OZChannelBase::setRangeName(v52, (const PCString *)&off_1F1169178);
  *(void *)(v50 + 1560) = v51;
  *(unsigned char *)(v50 + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v50 + 1568));
  _Unwind_Resume(a1);
}

void sub_1B7D15AEC()
{
}

void sub_1B7D15AF4()
{
}

void sub_1B7D15AFC()
{
}

void sub_1B7D15B04()
{
}

void sub_1B7D15B0C()
{
}

void sub_1B7D15B14()
{
}

void *OZImageMaskRender::calculateBackProjection(uint64_t a1, const LiCamera *a2, const OZRenderState *a3, uint64_t a4)
{
  double result = *(void **)(*(void *)(a1 + 1448) + 960);
  if (result)
  {
    if (result)
    {
      PCString v8 = result;
      OZRenderState::OZRenderState(&v21, a3);
      OZRenderState::setEyeMatrix(&v21, a2);
      uint64_t v20 = 0x3FF0000000000000;
      uint64_t v17 = 0x3FF0000000000000;
      uint64_t v14 = 0x3FF0000000000000;
      uint64_t v11 = 0x3FF0000000000000;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      (*(void (**)(void *, uint64_t *, OZRenderState *))(*(void *)v8 + 1256))(v8, &v11, &v21);
      (*(void (**)(void *__return_ptr, const LiCamera *))(*(void *)a2 + 48))(v9, a2);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (long long *)&v11, (uint64_t)v10);
      return (void *)PCMatrix44Tmpl<double>::planarInverseZ(a4, v10, 0.0);
    }
  }
  return result;
}

void OZImageMaskRender::calcStretch(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  if ((*(unsigned int (**)(void))(**((void **)this + 181) + 1256))())
  {
    double v22 = 0.0;
    double v23 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v24 = _Q0;
    double v19 = 0.0;
    double v20 = 0.0;
    long long v21 = _Q0;
    uint64_t v11 = *((void *)this + 180);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else
    {
      uint64_t v12 = *((void *)this + 182);
      if (!v12) {
        throw_PCNullPointerException(1);
      }
    }
    if (((*(uint64_t (**)(uint64_t, LiAgent *, double *))(*(void *)v12 + 24))(v12, a2, &v22) & 1) == 0)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v18, "OZImageMaskRender::getHelium: couldn't get input boundary");
      PCException::PCException(exception, &v18);
    }
    if (((**(uint64_t (***)(OZImageMaskRender *, LiAgent *, double *))this)(this, a2, &v19) & 1) == 0)
    {
      uint64_t v17 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v18, "OZImageMaskRender::getHelium: couldn't get mask boundary");
      PCException::PCException(v17, &v18);
    }
    double v14 = *(double *)&v24 / *(double *)&v21;
    v13.f64[0] = *(double *)&v24 * 0.5 + v22 - (*(double *)&v21 * 0.5 + v19);
    double v15 = *((double *)&v24 + 1) / *((double *)&v21 + 1);
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, v13, *((double *)&v24 + 1) * 0.5 + v23 - (*((double *)&v21 + 1) * 0.5 + v20), 0.0);
    PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v14, v15, 1.0);
  }
}

void sub_1B7D15ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZImageMaskRender::getClampNode@<X0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  OZImageMaskRender::calcStretch(this, a2, (uint64_t)v21);
  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  int v7 = MaskSource;
  if (MaskSource) {
    double v8 = (*(double (**)(const void *))(*(void *)MaskSource + 40))(MaskSource);
  }
  else {
    double v8 = 1.0;
  }
  int v9 = *(const void **)(*((void *)this + 181) + 960);
  if (v9)
  {
    if (!v7) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!v7) {
      goto LABEL_14;
    }
  }
  if (v11)
  {
    unint64_t v12 = v11[1];
    long long v20 = xmmword_1B7E78220;
    if (OZFactory::isKindOfClass(v12, (int32x4_t *)&v20)) {
      (*(void (**)(void))(**((void **)this + 181) + 1256))(*((void *)this + 181));
    }
  }
  if (v10)
  {
    double v13 = v8 / (*(double (**)(void *))(*(void *)v10 + 1328))(v10);
    if (v13 != 1.0)
    {
      v21[0] = v13 * v21[0];
      double v22 = v13 * v22;
      double v23 = v13 * v23;
      double v24 = v13 * v24;
    }
  }
LABEL_14:
  uint64_t v14 = *((void *)this + 181);
  CMTime v19 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v14 + 1880), &v19, 0.0);
  double v16 = v15;
  OZChannel::getValueAsDouble((OZChannel *)(v14 + 2032), &v19, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate(v21, v16, v17, 0.0);
  LiAgent::loadTransform((uint64_t)a2, (uint64_t)v21);
  return LiAgent::getHelium(a2, *((LiImageSource **)this + 182), a3);
}

uint64_t OZImageMaskRender::getStencilClampNode@<X0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v31 = 0x3FF0000000000000;
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  int v7 = *(const void **)(*((void *)this + 181) + 960);
  if (v7)
  {
    if (!MaskSource) {
      goto LABEL_17;
    }
  }
  else
  {
    double v8 = 0;
    if (!MaskSource) {
      goto LABEL_17;
    }
  }
  if (v9)
  {
    uint64_t v10 = v9;
    unint64_t v11 = v9[1];
    long long v21 = xmmword_1B7E78220;
    if (OZFactory::isKindOfClass(v11, (int32x4_t *)&v21))
    {
      if ((*(uint64_t (**)(void *))(*v10 + 1632))(v10))
      {
        int v12 = 0;
        if (v8)
        {
LABEL_9:
          (*(void (**)(void *))(*(void *)v8 + 1328))(v8);
          goto LABEL_12;
        }
      }
      else
      {
        int v12 = (*(uint64_t (**)(void *))(*v10 + 1664))(v10);
        if (v8) {
          goto LABEL_9;
        }
      }
      double v13 = *((double *)this + 7);
LABEL_12:
      if (v13 == 1.0) {
        int v14 = 0;
      }
      else {
        int v14 = v12;
      }
      if (v14 == 1)
      {
        uint64_t v22 = *(void *)&v13;
        *((double *)&v24 + OZLinkBehavior::clearAll(this, 1) = v13 * 0.0;
        *(double *)&long long v27 = v13 * 0.0;
        *((double *)&v29 + OZLinkBehavior::clearAll(this, 1) = v13 * 0.0;
      }
    }
  }
LABEL_17:
  uint64_t v15 = *((void *)this + 181);
  CMTime v20 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v15 + 1880), &v20, 0.0);
  double v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(v15 + 2032), &v20, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v22, v17, v18, 0.0);
  LiAgent::loadTransform((uint64_t)a2, (uint64_t)&v22);
  if (*((void *)this + 189) && v8) {
    operator new();
  }
  return LiAgent::getHelium(a2, *((LiImageSource **)this + 182), a3);
}

void sub_1B7D16580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40DA4F106CLL);
  _Unwind_Resume(a1);
}

double OZImageMaskRender::getStencilWrapPixelXForm@<D0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, _OWORD *a3@<X8>)
{
  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  int v7 = (long long *)*((void *)a2 + 20);
  long long v8 = v7[3];
  long long v10 = *v7;
  long long v9 = v7[1];
  a3[2] = v7[2];
  a3[3] = v8;
  *a3 = v10;
  a3[1] = v9;
  long long v11 = v7[7];
  long long v13 = v7[4];
  long long v12 = v7[5];
  a3[6] = v7[6];
  a3[7] = v11;
  a3[4] = v13;
  a3[5] = v12;
  uint64_t v55 = 0x3FF0000000000000;
  uint64_t v52 = 0x3FF0000000000000;
  uint64_t v49 = 0x3FF0000000000000;
  uint64_t v46 = 0x3FF0000000000000;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v45 = 0x3FF0000000000000;
  uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v26 = 0x3FF0000000000000;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  if (MaskSource)
  {
    if (v14)
    {
      uint64_t v15 = v14;
      OZRenderState::OZRenderState(&v25, (const OZRenderState *)((char *)this + 16));
      uint64_t v16 = *((void *)this + 162);
      v25.var6 = 1;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v16 + 16))(v24, v16);
      for (uint64_t i = 0; i != 16; i += 4)
      {
        double v18 = (char *)&v25 + i * 8;
        long long v19 = *(_OWORD *)&v24[i + 2];
        *(_OWORD *)(v18 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)&v24[i];
        *(_OWORD *)(v18 + 88) = v19;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v16 + 632))(v16))
      {
        double v20 = (*(double (**)(uint64_t))(*(void *)v16 + 320))(v16);
        if (v20 != 0.0)
        {
          v25.var7.var0[0][3] = v25.var7.var0[0][3] - v20 * v25.var7.var0[0][2];
          v25.var7.var0[1][3] = v25.var7.var0[1][3] - v20 * v25.var7.var0[1][2];
          v25.var7.var0[2][3] = v25.var7.var0[2][3] - v20 * v25.var7.var0[2][2];
          v25.var7.var0[3][3] = v25.var7.var0[3][3] - v20 * v25.var7.var0[3][2];
        }
      }
      double v21 = (*(double (**)(uint64_t))(*(void *)v16 + 488))(v16);
      if (v21 != 1.0)
      {
        *(float64x2_t *)&v25.var7.var0[0][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[0][0], v21);
        *(float64x2_t *)&v25.var7.var0[1][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[1][0], v21);
        *(float64x2_t *)&v25.var7.var0[2][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[2][0], v21);
        *(float64x2_t *)&v25.var7.var0[3][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[3][0], v21);
        v25.var7.var0[0][2] = v21 * v25.var7.var0[0][2];
        v25.var7.var0[1][2] = v21 * v25.var7.var0[1][2];
        v25.var7.var0[2][2] = v21 * v25.var7.var0[2][2];
        v25.var7.var0[3][2] = v21 * v25.var7.var0[3][2];
      }
      (*(void (**)(void *, uint64_t *, OZRenderState *))(*(void *)v15 + 1256))(v15, &v36, &v25);
    }
  }
  double v22 = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v36);
  (*(void (**)(void, uint64_t *, char *, double))(**(void **)(*((void *)this + 180) + 96) + 1264))(*(void *)(*((void *)this + 180) + 96), &v26, (char *)this + 16, v22);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v26);
  return PCMatrix44Tmpl<double>::rightMult((uint64_t)a3, (double *)&v46);
}

void OZImageMaskRender::getWrapNode(OZImageMaskRender *this@<X0>, double **a2@<X1>, uint64_t *a3@<X8>)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 181) + 2448), MEMORY[0x1E4F1FA48], 0.0);
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 181) + 1248))();
  uint64_t v59 = 0x3FF0000000000000;
  uint64_t v56 = 0x3FF0000000000000;
  uint64_t v53 = 0x3FF0000000000000;
  double v50 = 1.0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v49 = 0x3FF0000000000000;
  uint64_t v46 = 0x3FF0000000000000;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v40 = 0x3FF0000000000000;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  if (v7)
  {
    OZImageMaskRender::getStencilWrapPixelXForm(this, (LiAgent *)a2, v28);
    for (uint64_t i = 0; i != 8; i += 2)
    {
      long long v9 = (_OWORD *)((char *)&v50 + i * 16);
      long long v10 = v28[i + 1];
      _OWORD *v9 = v28[i];
      v9[1] = v10;
    }
  }
  else
  {
    long long v11 = a2[20];
    if (v11 != &v50)
    {
      uint64_t v12 = 0;
      long long v13 = &v50;
      do
      {
        for (uint64_t j = 0; j != 4; ++j)
          v13[j] = v11[j];
        ++v12;
        v13 += 4;
        v11 += 4;
      }
      while (v12 != 4);
    }
    MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
    double v16 = 1.0;
    double v17 = 1.0;
    if (MaskSource) {
      double v17 = (*(double (**)(const void *))(*(void *)MaskSource + 40))(MaskSource);
    }
    double v18 = *(const void **)(*((void *)this + 181) + 960);
    if (v18)
    {
      if (v19) {
        double v16 = (*(double (**)(void *))(*(void *)v19 + 1328))(v19);
      }
    }
    if (v16 != 1.0 || v17 != 1.0)
    {
      double v20 = v17 / v16;
      if (v17 / v16 != 1.0)
      {
        double v50 = v20 * v50;
        *((double *)&v52 + OZLinkBehavior::clearAll(this, 1) = v20 * *((double *)&v52 + 1);
        *(double *)&long long v55 = v20 * *(double *)&v55;
        *((double *)&v57 + OZLinkBehavior::clearAll(this, 1) = v20 * *((double *)&v57 + 1);
      }
    }
  }
  uint64_t v21 = *((void *)this + 181);
  CMTime v39 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v21 + 1880), &v39, 0.0);
  double v23 = v22;
  OZChannel::getValueAsDouble((OZChannel *)(v21 + 2032), &v39, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate(&v50, v23, v24, 0.0);
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v40, &v50, 0.0);
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v29 = 0x3FF0000000000000;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  LiAgent::LiAgent((LiAgent *)v28, (const LiAgent *)a2);
  LiAgent::setPixelTransform((uint64_t)v28, (uint64_t)&v29);
  LiAgent::setImageSpace((uint64_t)v28, 1);
  LiRenderingTechnology::setEnableMetalRendering((uint64_t)v28, 1);
  LiAgent::getHelium((LiAgent *)v28, *((LiImageSource **)this + 182), a3);
  if (*a3)
  {
    LiAgent::getBoundary((LiAgent *)v28, (uint64_t)&v27);
    if (ValueAsInt == 2)
    {
      uint64_t v26 = (HWrapMirror *)HGObject::operator new(0x2C0uLL);
      HWrapMirror::HWrapMirror(v26);
    }
    if (ValueAsInt == 1)
    {
      OZRenderState v25 = (HWrapRepeat *)HGObject::operator new(0x2C0uLL);
      HWrapRepeat::HWrapRepeat(v25);
    }
    (*(void (**)(void, void, uint64_t))(MEMORY[0] + 120))(0, 0, *a3);
    if (*a3)
    {
      (*(void (**)(uint64_t))(*(void *)*a3 + 24))(*a3);
      *a3 = 0;
      (*(void (**)(void))(MEMORY[0] + 16))(0);
    }
    (*(void (**)(void))(MEMORY[0] + 24))(0);
  }
  LiAgent::~LiAgent((LiAgent *)v28);
}

void sub_1B7D16FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HGObject::operator delete(v14);
  if (*v13) {
    (*(void (**)(void))(*(void *)*v13 + 24))(*v13);
  }
  LiAgent::~LiAgent((LiAgent *)&a13);
  _Unwind_Resume(a1);
}

void OZImageMaskRender::getHelium(OZImageMaskRender *this@<X0>, double **a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((unsigned char *)this + 1504))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 181) + 2448), MEMORY[0x1E4F1FA48], 0.0);
    int v7 = (*(uint64_t (**)(void))(**((void **)this + 181) + 1248))();
    if (ValueAsInt) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v7 == 0;
    }
    if (v8)
    {
      if (ValueAsInt && *((void *)this + 180))
      {
        OZImageMaskRender::getWrapNode(this, a2, a3);
      }
      else
      {
        OZImageMaskRender::getClampNode(this, (LiAgent *)a2, a3);
      }
    }
    else
    {
      OZImageMaskRender::getStencilClampNode(this, (LiAgent *)a2, a3);
    }
  }
  else
  {
    long long v9 = (LiImageSource *)*((void *)this + 182);
    LiAgent::getHelium((LiAgent *)a2, v9, a3);
  }
}

void virtual thunk to'OZImageMaskRender::getHelium(OZImageMaskRender *this@<X0>, double **a2@<X1>, uint64_t *a3@<X8>)
{
}

void OZImageMaskRender::~OZImageMaskRender(PCSharedCount *this)
{
  OZChannelBase::setRangeName((OZChannelBase *)(v2 + 1544), (const PCString *)&off_1F1169178);
  this[195].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[197].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[196].var0);
}

{
  uint64_t vars8;

  OZImageMaskRender::~OZImageMaskRender(this);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZImageMaskRender::~OZImageMaskRender(OZImageMaskRender *this)
{
}

{
  uint64_t vars8;

  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 32)));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1BA9BFBA0);
}

void OZImageMaskRender::~OZImageMaskRender(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  int v4 = *a2;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)v4 - 3)) = a2[4];
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)this->var0 - 4)) = a2[5];
  PCSharedCount::~PCSharedCount(this + 192);
  PCSharedCount::~PCSharedCount(this + 190);
  PCSharedCount::~PCSharedCount(this + 183);
  uint64_t v5 = a2[1];
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v5;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)v5 - 3)) = a2[2];
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)this->var0 - 4)) = a2[3];
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[2]);
}

void HWrapRepeat::HWrapRepeat(HWrapRepeat *this)
{
}

void sub_1B7D17644(_Unwind_Exception *a1)
{
  HgcWrapRepeat::~HgcWrapRepeat(v1);
  _Unwind_Resume(a1);
}

void HWrapRepeat::~HWrapRepeat(HGNode *this)
{
  HgcWrapRepeat::~HgcWrapRepeat(this);

  HGObject::operator delete(v1);
}

uint64_t HWrapRepeat::GetDOD(HWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  if (HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2)) {
    uint64_t v5 = &HGRectNull;
  }
  else {
    uint64_t v5 = &HGRectInfinite;
  }
  return *(void *)v5;
}

uint64_t HWrapRepeat::GetROI(HWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  double v10 = 0.0;
  double v11 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v12 = _Q0;
  if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 72, (double *)this + 52, (uint64_t)&v10)) {
    return 0;
  }
  else {
    return HGRectMake4i(vcvtmd_s64_f64(v10 + -1.1 + 0.0000001), vcvtmd_s64_f64(v11 + -1.1 + 0.0000001), vcvtpd_s64_f64(v10 + -1.1 + *(double *)&v12 + 2.2), vcvtpd_s64_f64(v11 + -1.1 + *((double *)&v12 + 1) + 2.2));
  }
}

uint64_t HWrapRepeat::setMaskRect(_OWORD *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  a1[26] = *(_OWORD *)a2;
  a1[27] = v2;
  float v3 = *(double *)a2;
  *(float *)&long long v2 = *(double *)(a2 + 8);
  float v4 = *(double *)(a2 + 16);
  float v5 = *(double *)(a2 + 24);
  return (*(uint64_t (**)(_OWORD *, void, float, float, float, float))(*(void *)a1 + 96))(a1, 0, v3, *(float *)&v2, v4, v5);
}

uint64_t HWrapRepeat::setMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 448;
  if (a1 + 448 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v2 + i) = *(void *)(v4 + i);
      ++v3;
      v2 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
}

uint64_t HWrapRepeat::setInvMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 576;
  if (a1 + 576 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v2 + i) = *(void *)(v4 + i);
      ++v3;
      v2 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
}

uint64_t anonymous namespace'::setShaderMatrixParam(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  float v6 = *(double *)a2;
  float v7 = *(double *)(a2 + 32);
  float v8 = *(double *)(a2 + 64);
  float v9 = *(double *)(a2 + 96);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, a3, v6, v7, v8, v9);
  float v10 = *(double *)(a2 + 8);
  float v11 = *(double *)(a2 + 40);
  float v12 = *(double *)(a2 + 72);
  float v13 = *(double *)(a2 + 104);
  (*(void (**)(uint64_t, void, float, float, float, float))(*(void *)a1 + 96))(a1, (v3 + 1), v10, v11, v12, v13);
  float v14 = *(double *)(a2 + 16);
  float v15 = *(double *)(a2 + 48);
  float v16 = *(double *)(a2 + 80);
  float v17 = *(double *)(a2 + 112);
  (*(void (**)(uint64_t, void, float, float, float, float))(*(void *)a1 + 96))(a1, (v3 + 2), v14, v15, v16, v17);
  v18.n128_u64[0] = *(void *)(a2 + 24);
  v18.n128_f32[0] = v18.n128_f64[0];
  v19.n128_u64[0] = *(void *)(a2 + 56);
  v19.n128_f32[0] = v19.n128_f64[0];
  v20.n128_u64[0] = *(void *)(a2 + 88);
  v20.n128_f32[0] = v20.n128_f64[0];
  v21.n128_u64[0] = *(void *)(a2 + 120);
  v21.n128_f32[0] = v21.n128_f64[0];
  double v22 = *(uint64_t (**)(uint64_t, void, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);

  return v22(a1, (v3 + 3), v18, v19, v20, v21);
}

void HWrapMirror::HWrapMirror(HWrapMirror *this)
{
}

void sub_1B7D17A80(_Unwind_Exception *a1)
{
  HgcWrapMirror::~HgcWrapMirror(v1);
  _Unwind_Resume(a1);
}

void HWrapMirror::~HWrapMirror(HGNode *this)
{
  HgcWrapMirror::~HgcWrapMirror(this);

  HGObject::operator delete(v1);
}

uint64_t OZFolderLightShadow::initChannels(OZFolderLightShadow *this)
{
  uint64_t v2 = (OZChannel *)((char *)this + 280);
  OZChannel::setMin((OZChannel *)((char *)this + 280), 0.0);
  OZChannel::setMax(v2, 500.0);
  OZChannel::setSliderMax(v2, 20.0);
  OZChannel::setMax((OZChannel *)((char *)this + 128), 10.0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x20000);
  (*(void (**)(OZFolderLightShadow *, void, void))(*(void *)this + 104))(this, 0, 0);
  int v3 = *(uint64_t (**)(OZFolderLightShadow *))(*(void *)this + 128);

  return v3(this);
}

void OZFolderLightShadow::OZFolderLightShadow(OZFolderLightShadow *this, const OZFolderLightShadow *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1169AB0;
  *(void *)(v5 + 16) = &unk_1F1169D88;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  *((void *)this + 35) = &unk_1F1100CF0;
  *((void *)this + 37) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), (const OZChannelBase *)((char *)a2 + 432), (OZChannelFolder *)this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584), (const OZFolderLightShadow *)((char *)a2 + 584), (OZChannelFolder *)this);
}

void sub_1B7D17C94(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v4);
  OZChannel::~OZChannel(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderLightShadow::OZFolderLightShadow(OZFolderLightShadow *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  void *v6 = &unk_1F1169AB0;
  v6[2] = &unk_1F1169D88;
  PCURL::PCURL((PCURL *)&v7, @"Channel Lighting Shadow Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 1.0, &v7, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Lighting Shadow Softness");
  OZChannelDouble::OZChannelDouble((OZFolderLightShadow *)((char *)this + 280), 0.0, &v7, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Lighting Shadow Uniform Softness");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 1, &v7, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Lighting Shadow Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584), 0.0, 0.0, 0.0, &v7, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v7);
  OZFolderLightShadow::initChannels(this);
}

void sub_1B7D17EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  float v15 = v14;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v15);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B7D17F08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D17F18()
{
}

void sub_1B7D17F20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D17F30()
{
}

void OZFolderLightShadow::~OZFolderLightShadow(OZFolderLightShadow *this)
{
  *(void *)this = &unk_1F1169AB0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1169D88;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 432));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZFolderLightShadow::~OZFolderLightShadow(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFolderLightShadow::~OZFolderLightShadow(OZFolderLightShadow *this)
{
}

{
  uint64_t vars8;

  OZFolderLightShadow::~OZFolderLightShadow((OZFolderLightShadow *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

unint64_t OZFolderLightShadow::hasShadows(OZChannelBase *this, const CMTime *a2)
{
  return OZChannelBase::isEnabled(this, 0, 0);
}

uint64_t OZFolderLightShadow::hasShadows(OZFolderLightShadow *this, const CMTime *a2, uint64_t a3)
{
  return (*(uint64_t (**)(OZFolderLightShadow *, uint64_t, void))(*(void *)this + 104))(this, a3, 0);
}

uint64_t OZFolderLightShadow::opacity(OZFolderLightShadow *this)
{
  return (uint64_t)this + 128;
}

uint64_t OZFolderLightShadow::softness(OZFolderLightShadow *this)
{
  return (uint64_t)this + 280;
}

uint64_t OZFolderLightShadow::uniformSoftness(OZFolderLightShadow *this)
{
  return (uint64_t)this + 432;
}

uint64_t OZFolderLightShadow::color(OZFolderLightShadow *this)
{
  return (uint64_t)this + 584;
}

const void *EnvironmentResetCallback(const void *result, void *a2)
{
  if (result)
  {
    if (result)
    {
      uint64_t v2 = result;
      (*(void (**)(const void *, void))(*(void *)result + 280))(result, 0);
      double result = (const void *)v2[6];
      if (result)
      {
      }
    }
  }
  return result;
}

uint64_t OZ3DExtrusionProperties::init(OZ3DExtrusionProperties *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 2592), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3128), 8519684);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 3128), 0, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 3408), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 3408), 500.0);
  OZChannel::setMax((OZChannel *)((char *)this + 3256), 10.0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3128));
  (*(void (**)(OZ3DExtrusionProperties *, void, void))(*(void *)this + 104))(this, 0, 0);
  PCURL::PCURL((PCURL *)v5, @"Bevel Properties Edge Width");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1336), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, @"Bevel Properties Edge Depth");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1488), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, @"Bevel Properties Edge Width");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2032), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, @"Bevel Properties Edge Depth");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2184), v5, 0);
  PCString::~PCString(v5);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1200), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1896), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5848), 0x800000);
  OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 2.0, 0);
  OZChannel::setDefaultToCurrentValue((OZChannel *)((char *)this + 536));
  OZChannel::setMin((OZChannel *)((char *)this + 128), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 792), -5.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 5.0);
  OZChannel::setValue((OZChannel *)((char *)this + 2336), &v4, 0.0, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2336), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1336), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1488), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2032), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2184), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1336), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1488), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2032), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2184), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1336), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1488), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2032), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2184), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1336), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1488), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2032), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2184), 0.01);
  (*(void (**)(char *, CMTime *, void, double))(*((void *)this + 167) + 712))((char *)this + 1336, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, void, double))(*((void *)this + 186) + 712))((char *)this + 1488, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, void, double))(*((void *)this + 254) + 712))((char *)this + 2032, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, void, double))(*((void *)this + 273) + 712))((char *)this + 2184, &v4, 0, 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1336), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1488), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2032), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2184), 4.0);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 7440), @"TXMaterialAssignmentFolderController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 8080), @"TXMaterialAssignmentController");
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)((char *)this + 7568), @"TXMaterialAssignmentLabelController");
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1200), 0x400000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1896), 0x400000, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 3944), @"OZEnvironmentMapController");
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 5848), @"OZEnvironmentRotationController");
  OZChannel::setMax((OZChannel *)((char *)this + 5544), 1000000.0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 944), @"OZChanEnumWithImagesController");
  PCString::PCString(v5, "Square;Bevel;Round;Concave;Groove;Ridge;Double_Round;Square_Ring;Bevel_Ring;Round_Ring;Outline");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 944), v5);
  PCString::~PCString(v5);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 1640), @"OZChanEnumWithImagesController");
  PCString::PCString(v5, "-;-;Square;Bevel;Round;Concave;Groove;Ridge;Double_Round;Square_Ring;Bevel_Ring;Round_Ring;Outline");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 1640), v5);
  PCString::~PCString(v5);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3560), 4);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 3560), (void (*)(OZChannelBase *, void *))EnvironmentResetCallback, 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3560), 0x20000);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3560), 0x100000000, 0);
  *(_OWORD *)&v5[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = xmmword_1B8383F10;
  v6[0] = unk_1B8383F20;
  *(_OWORD *)((char *)v6 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = unk_1B8383F2C;
  OZChannelEnum::setTags((OZ3DExtrusionProperties *)((char *)this + 3944), (char *)v5, 11);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4744), 0x400000, 0);
  OZChannel::setMax((OZChannel *)((char *)this + 2976), 1000000.0);
  PCString::PCString(&v3, "-;Lighting_Style_Standard;Lighting_Style_Medium_Center;Lighting_Style_Medium_Left;Lighting_Style_Medium_Right;Lighti"
    "ng_Style_Above;Lighting_Style_Backlit;Lighting_Style_Below;Lighting_Style_Diagonal_Left;Lighting_Style_Diagonal_Righ"
    "t;Lighting_Style_Drama_Top_Left;Lighting_Style_Drama_Top_Right");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 2720), &v3);
  PCString::~PCString(&v3);
  return (*(uint64_t (**)(OZ3DExtrusionProperties *))(*(void *)this + 128))(this);
}

void sub_1B7D18810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  void *v6 = &unk_1F1169DF8;
  _OWORD v6[2] = &unk_1F116A0D8;
  PCURL::PCURL((PCURL *)&v41, @"3D Property Extrusion Depth");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 128), 10.0, &v41, (OZChannelFolder *)this, 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v7, @"Bevel Properties Extrude Direction Deprecated Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Extrude Direction");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), &v41, &v40, (OZChannelFolder *)this, 0x1F9u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v8, @"Bevel Properties Extrude Direction Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Extrude Direction");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), &v41, &v40, (OZChannelFolder *)this, 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v9, @"3D Property Extrusion Weight");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 792), 0.0, &v41, (OZChannelFolder *)this, 0x207u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v10, @"Bevel Properties Front Profile Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Front Edge Profile");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), 2u, &v41, &v40, (OZChannelFolder *)this, 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v11, @"Bevel Properties Front Edge Size");
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), &v41, (OZChannelFolder *)this, 0x1F6u, 0, 2u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v12, @"Bevel Properties Back Profile Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Back Corner Profile");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), 0, &v41, &v40, (OZChannelFolder *)this, 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v13, @"Bevel Properties Back Corner Size");
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), &v41, (OZChannelFolder *)this, 0x1F7u, 0, 2u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v14, @"Bevel Properties Corner Style Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Corner Style");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), &v41, &v40, (OZChannelFolder *)this, 0x20Cu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v15, @"Extrusion Properties Lighting Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), &v41, (OZChannelFolder *)this, 0x20Fu, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v16, @"Bevel Properties Lighting Style Enum");
  PCURL::PCURL((PCURL *)&v40, @"Bevel Properties Lighting Style");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), 1u, &v41, &v40, (OZChannelFolder *)((char *)this + 2592), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v17, @"Bevel Properties Lighting Style Intensity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), 1.0, &v41, (OZChannelFolder *)((char *)this + 2592), 0x20Eu, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v18, @"Extrusion Properties Self Shadows Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), &v41, (OZChannelFolder *)((char *)this + 2592), 0x211u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v19, @"Extrusion Properties Self Shadows Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), 1.0, &v41, (OZChannelFolder *)((char *)this + 3128), 0x212u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v20, @"Extrusion Properties Self Shadows Softness");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 3408), 0.0, &v41, (OZChannelFolder *)((char *)this + 3128), 0x213u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v21, @"Material Environment Properties");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), &v41, (OZChannelFolder *)((char *)this + 2592), 0x200u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v22, @"Material Environment Type Enum");
  PCURL::PCURL((PCURL *)&v40, @"Material Environment Type");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x209u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v23, @"Material Environment Map Selection Enum");
  PCURL::PCURL((PCURL *)&v40, @"Material Environment Map Selection");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), 3u, &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x215u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v24, @"Material Environment Map Deprecated Selection Enum");
  PCURL::PCURL((PCURL *)&v40, @"Material Environment Map Selection");
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), 4u, &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x208u, 0xAu);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v25, @"four; five; six");
  PCURL::PCURL((PCURL *)&v40, @"Material Environment Map Selection");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x201u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v26, @"Material Environment Gradient");
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Au, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v27, @"Material Environment Intensity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), 1.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x202u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v28, @"Material Environment Reflectivity");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 5696), 50.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x203u, 2, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v29, @"Material Environment Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), 0.0, 0.0, 0.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x204u, 0, 4u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v30, @"Material Environment Contrast");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6704), 100.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x205u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v31, @"Material Environment Saturation");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6856), 100.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Du, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v32, "Environment Normalization");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 7008), 1.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Bu, 134217730, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v33, @"Material Environment Anisotropy Enable");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), 0, &v41, (OZChannelFolder *)this, 0x216u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v34, "");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), &v41, (OZChannelFolder *)this, 0x257u, 0xAu, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v35, @"Extrusion Properties Material Assignment Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), &v41, (OZChannelFolder *)this, 0x1FDu, 2u, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v36, @"Extrusion Properties Material Assignment Mode Enum");
  PCURL::PCURL((PCURL *)&v40, @"Extrusion Properties Material Assignment Mode");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), 0, &v41, &v40, (OZChannelFolder *)((char *)this + 7440), 0x210u, 2, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v37, @"Extrusion Properties Material Assignment Mode Multiple Materials");
  PCURL::PCURL((PCURL *)&v40, @"Extrusion Properties Material Assignment Mode");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), 2u, &v41, &v40, (OZChannelFolder *)((char *)this + 7440), 0x1FEu, 32778, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCString::PCString(v38, "");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 8080), 0, &v41, (OZChannelFolder *)((char *)this + 7440), 0x1FFu, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v39, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v41, (OZChannelFolder *)this, 0x214u, 2u, 0, 0);
  PCString::~PCString(&v41);
  OZ3DExtrusionProperties::init(this);
}

void sub_1B7D1944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelPercent *a23,OZChannelEnum *a24,OZChannelEnum *a25,OZChannel2D *a26,OZChannelEnum *a27,OZChannel2D *a28,OZChannelEnum *a29)
{
  OZChannelBool::~OZChannelBool(v30);
  OZChannel::~OZChannel(v32);
  OZChannelEnum::~OZChannelEnum(v31);
  OZChannelEnum::~OZChannelEnum(v38);
  OZChannelFolder::~OZChannelFolder(v33);
  OZChannelFolder::~OZChannelFolder(v37);
  OZChannelBool::~OZChannelBool(v35);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 112));
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 120));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel2D::~OZChannel2D(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel2D::~OZChannel2D(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 128));
  OZChannelFolder::~OZChannelFolder(v29);
  _Unwind_Resume(a1);
}

void sub_1B7D195F0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D194F8);
}

void sub_1B7D19600()
{
}

void sub_1B7D19608()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19500);
}

void sub_1B7D19618()
{
}

void sub_1B7D19620()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19508);
}

void sub_1B7D19630()
{
}

void sub_1B7D19638()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19510);
}

void sub_1B7D19648()
{
}

void sub_1B7D19650()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19518);
}

void sub_1B7D19660()
{
}

void sub_1B7D19668()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19520);
}

void sub_1B7D19678()
{
}

void sub_1B7D19680()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19528);
}

void sub_1B7D19690()
{
}

void sub_1B7D19698()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19530);
}

void sub_1B7D196A8()
{
}

void sub_1B7D196B0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19538);
}

void sub_1B7D196C0()
{
}

void sub_1B7D196C8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19540);
}

void sub_1B7D196D8()
{
}

void sub_1B7D196E0()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19548);
}

void sub_1B7D19700()
{
}

void sub_1B7D19708()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19550);
}

void sub_1B7D19728()
{
}

void sub_1B7D19730()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19558);
}

void sub_1B7D19750()
{
}

void sub_1B7D19758()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19560);
}

void sub_1B7D19778()
{
}

void sub_1B7D19780()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19568);
}

void sub_1B7D19790()
{
}

void sub_1B7D19798()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19570);
}

void sub_1B7D197A8()
{
}

void sub_1B7D197B0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19578);
}

void sub_1B7D197C0()
{
}

void sub_1B7D197C8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19580);
}

void sub_1B7D197D8()
{
}

void sub_1B7D197E0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19588);
}

void sub_1B7D197F0()
{
}

void sub_1B7D197F8()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19590);
}

void sub_1B7D19818()
{
}

void sub_1B7D19820()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D19598);
}

void sub_1B7D19830()
{
}

void sub_1B7D19838()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195A0);
}

void sub_1B7D19858()
{
}

void sub_1B7D19860()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195A8);
}

void sub_1B7D19870()
{
}

void sub_1B7D19878()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195B0);
}

void sub_1B7D19898()
{
}

void sub_1B7D198A0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195B8);
}

void sub_1B7D198B0()
{
}

void sub_1B7D198B8()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195C0);
}

void sub_1B7D198D8()
{
}

void sub_1B7D198E0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195C8);
}

void sub_1B7D198F0()
{
}

void sub_1B7D198F8()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195D0);
}

void sub_1B7D19918()
{
}

void sub_1B7D19920()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195D8);
}

void sub_1B7D19940()
{
}

void sub_1B7D19948()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D195E0);
}

void sub_1B7D19958()
{
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, int a6)
{
  Instance = (OZFactory *)OZ3DExtrusionProperties_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, a6);
  *(void *)this = &unk_1F1169DF8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116A0D8;
  PCURL::PCURL((PCURL *)&v47, @"3D Property Extrusion Depth");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 128), 10.0, &v47, (OZChannelFolder *)this, 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v13, @"Bevel Properties Extrude Direction Deprecated Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Extrude Direction");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), &v47, &v46, (OZChannelFolder *)this, 0x1F9u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v14, @"Bevel Properties Extrude Direction Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Extrude Direction");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), &v47, &v46, (OZChannelFolder *)this, 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v15, @"3D Property Extrusion Weight");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 792), 0.0, &v47, (OZChannelFolder *)this, 0x207u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v16, @"Bevel Properties Front Profile Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Front Edge Profile");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), 2u, &v47, &v46, (OZChannelFolder *)this, 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v17, @"Bevel Properties Front Edge Size");
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), &v47, (OZChannelFolder *)this, 0x1F6u, 0, 2u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v18, @"Bevel Properties Back Profile Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Back Edge Profile");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), 0, &v47, &v46, (OZChannelFolder *)this, 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v19, @"Bevel Properties Back Edge Size");
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), &v47, (OZChannelFolder *)this, 0x1F7u, 0, 2u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v20, @"Bevel Properties Corner Style Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Corner Style");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), &v47, &v46, (OZChannelFolder *)this, 0x20Cu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v21, @"Extrusion Properties Lighting Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), &v47, (OZChannelFolder *)this, 0x20Fu, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v22, @"Bevel Properties Lighting Style Enum");
  PCURL::PCURL((PCURL *)&v46, @"Bevel Properties Lighting Style");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), 1u, &v47, &v46, (OZChannelFolder *)((char *)this + 2592), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v23, @"Bevel Properties Lighting Style Intensity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), 1.0, &v47, (OZChannelFolder *)((char *)this + 2592), 0x20Eu, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v24, @"Extrusion Properties Self Shadows Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), &v47, (OZChannelFolder *)((char *)this + 2592), 0x211u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v25, @"Extrusion Properties Self Shadows Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), 1.0, &v47, (OZChannelFolder *)((char *)this + 3128), 0x212u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v26, @"Extrusion Properties Self Shadows Softness");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 3408), 0.0, &v47, (OZChannelFolder *)((char *)this + 3128), 0x213u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v27, @"Material Environment Properties");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), &v47, (OZChannelFolder *)((char *)this + 2592), 0x200u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v28, @"Material Environment Type Enum");
  PCURL::PCURL((PCURL *)&v46, @"Material Environment Type");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x209u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v29, @"Material Environment Map Selection Enum");
  PCURL::PCURL((PCURL *)&v46, @"Material Environment Map Selection");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), 3u, &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x215u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v30, @"Material Environment Map Deprecated Selection Enum");
  PCURL::PCURL((PCURL *)&v46, @"Material Environment Map Selection");
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), 4u, &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x208u, 0xAu);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v31, @"Material Environment Map Selection Enum");
  PCURL::PCURL((PCURL *)&v46, @"Material Environment Map Selection");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x201u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v32, @"Material Environment Gradient");
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Au, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v33, @"Material Environment Intensity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), 1.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x202u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v34, @"Material Environment Reflectivity");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 5696), 50.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x203u, 2, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v35, @"Material Environment Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), 0.0, 0.0, 0.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x204u, 0, 4u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v36, @"Material Environment Contrast");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6704), 100.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x205u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v37, @"Material Environment Saturation");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6856), 100.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Du, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v38, "Environment Normalization");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 7008), 1.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Bu, 134217730, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v39, @"Material Environment Anisotropy Enable");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), 0, &v47, (OZChannelFolder *)this, 0x216u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v40, "");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), &v47, (OZChannelFolder *)this, 0x257u, 0xAu, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v41, @"Extrusion Properties Material Assignment Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), &v47, (OZChannelFolder *)this, 0x1FDu, 2u, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v42, @"Extrusion Properties Material Assignment Mode Enum");
  PCURL::PCURL((PCURL *)&v46, @"Extrusion Properties Material Assignment Mode");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), 0, &v47, &v46, (OZChannelFolder *)((char *)this + 7440), 0x210u, 2, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v43, @"Extrusion Properties Material Assignment Mode Multiple Materials");
  PCURL::PCURL((PCURL *)&v46, @"Extrusion Properties Material Assignment Mode");
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), 2u, &v47, &v46, (OZChannelFolder *)((char *)this + 7440), 0x1FEu, 32778, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCString::PCString(v44, "");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 8080), 0, &v47, (OZChannelFolder *)((char *)this + 7440), 0x1FFu, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v45, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v47, (OZChannelFolder *)this, 0x214u, 2u, 0, 0);
  PCString::~PCString(&v47);
  OZ3DExtrusionProperties::init(this);
}

void sub_1B7D1A594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelPercent *a23,OZChannelEnum *a24,OZChannelEnum *a25,OZChannel2D *a26,OZChannelEnum *a27,OZChannel2D *a28,OZChannelEnum *a29)
{
  OZChannelBool::~OZChannelBool(v30);
  OZChannel::~OZChannel(v32);
  OZChannelEnum::~OZChannelEnum(v31);
  OZChannelEnum::~OZChannelEnum(v38);
  OZChannelFolder::~OZChannelFolder(v33);
  OZChannelFolder::~OZChannelFolder(v37);
  OZChannelBool::~OZChannelBool(v35);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 112));
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 120));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel2D::~OZChannel2D(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel2D::~OZChannel2D(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 128));
  OZChannelFolder::~OZChannelFolder(v29);
  _Unwind_Resume(a1);
}

void sub_1B7D1A738()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A640);
}

void sub_1B7D1A748()
{
}

void sub_1B7D1A750()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A648);
}

void sub_1B7D1A760()
{
}

void sub_1B7D1A768()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A650);
}

void sub_1B7D1A778()
{
}

void sub_1B7D1A780()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A658);
}

void sub_1B7D1A790()
{
}

void sub_1B7D1A798()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A660);
}

void sub_1B7D1A7A8()
{
}

void sub_1B7D1A7B0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A668);
}

void sub_1B7D1A7C0()
{
}

void sub_1B7D1A7C8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A670);
}

void sub_1B7D1A7D8()
{
}

void sub_1B7D1A7E0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A678);
}

void sub_1B7D1A7F0()
{
}

void sub_1B7D1A7F8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A680);
}

void sub_1B7D1A808()
{
}

void sub_1B7D1A810()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A688);
}

void sub_1B7D1A820()
{
}

void sub_1B7D1A828()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A690);
}

void sub_1B7D1A848()
{
}

void sub_1B7D1A850()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A698);
}

void sub_1B7D1A870()
{
}

void sub_1B7D1A878()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6A0);
}

void sub_1B7D1A898()
{
}

void sub_1B7D1A8A0()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6A8);
}

void sub_1B7D1A8C0()
{
}

void sub_1B7D1A8C8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6B0);
}

void sub_1B7D1A8D8()
{
}

void sub_1B7D1A8E0()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6B8);
}

void sub_1B7D1A8F0()
{
}

void sub_1B7D1A8F8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6C0);
}

void sub_1B7D1A908()
{
}

void sub_1B7D1A910()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6C8);
}

void sub_1B7D1A920()
{
}

void sub_1B7D1A928()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6D0);
}

void sub_1B7D1A938()
{
}

void sub_1B7D1A940()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6D8);
}

void sub_1B7D1A960()
{
}

void sub_1B7D1A968()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6E0);
}

void sub_1B7D1A978()
{
}

void sub_1B7D1A980()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6E8);
}

void sub_1B7D1A9A0()
{
}

void sub_1B7D1A9A8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6F0);
}

void sub_1B7D1A9B8()
{
}

void sub_1B7D1A9C0()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A6F8);
}

void sub_1B7D1A9E0()
{
}

void sub_1B7D1A9E8()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A700);
}

void sub_1B7D1A9F8()
{
}

void sub_1B7D1AA00()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A708);
}

void sub_1B7D1AA20()
{
}

void sub_1B7D1AA28()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A710);
}

void sub_1B7D1AA38()
{
}

void sub_1B7D1AA40()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A718);
}

void sub_1B7D1AA60()
{
}

void sub_1B7D1AA68()
{
  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A720);
}

void sub_1B7D1AA88()
{
}

void sub_1B7D1AA90()
{
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B7D1A728);
}

void sub_1B7D1AAA0()
{
}

uint64_t OZ3DExtrusionProperties_Factory::getInstance(OZ3DExtrusionProperties_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DExtrusionProperties_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZ3DExtrusionProperties_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DExtrusionProperties_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DExtrusionProperties_Factory::_instance;
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, const OZ3DExtrusionProperties *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F1169DF8;
  *(void *)(v5 + 16) = &unk_1F116A0D8;
  OZChannel::OZChannel((OZChannel *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  *((void *)this + 16) = &unk_1F1100CF0;
  *((void *)this + 18) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), (const OZ3DExtrusionProperties *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), (const OZ3DExtrusionProperties *)((char *)a2 + 536), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)this);
  *((void *)this + 99) = &unk_1F1100CF0;
  *((void *)this + 10OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), (const OZ3DExtrusionProperties *)((char *)a2 + 944), (OZChannelFolder *)this);
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), (const OZ3DExtrusionProperties *)((char *)a2 + 1200), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), (const OZ3DExtrusionProperties *)((char *)a2 + 1640), (OZChannelFolder *)this);
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), (const OZ3DExtrusionProperties *)((char *)a2 + 1896), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), (const OZ3DExtrusionProperties *)((char *)a2 + 2336), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), (const OZChannelFolder *)((char *)a2 + 2592), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), (const OZ3DExtrusionProperties *)((char *)a2 + 2720), (OZChannelFolder *)((char *)this + 2592));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), (const OZChannelBase *)((char *)a2 + 2976), (OZChannelFolder *)((char *)this + 2592));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), (const OZChannelFolder *)((char *)a2 + 3128), (OZChannelFolder *)((char *)this + 2592));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), (const OZChannelBase *)((char *)a2 + 3256), (OZChannelFolder *)((char *)this + 3128));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3408), (const OZChannelBase *)((char *)a2 + 3408), (OZChannelFolder *)((char *)this + 3128));
  *((void *)this + 426) = &unk_1F1100CF0;
  *((void *)this + 428) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), (const OZChannelFolder *)((char *)a2 + 3560), (OZChannelFolder *)((char *)this + 2592));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), (const OZ3DExtrusionProperties *)((char *)a2 + 3688), (OZChannelFolder *)((char *)this + 3560));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), (const OZ3DExtrusionProperties *)((char *)a2 + 3944), (OZChannelFolder *)((char *)this + 3560));
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), (const OZ3DExtrusionProperties *)((char *)a2 + 4200), (OZChannelFolder *)((char *)this + 3560));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), (const OZ3DExtrusionProperties *)((char *)a2 + 4488), (OZChannelFolder *)((char *)this + 3560));
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), (const OZ3DExtrusionProperties *)((char *)a2 + 4744), (OZChannelFolder *)((char *)this + 3560));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), (const OZChannelBase *)((char *)a2 + 5544), (OZChannelFolder *)((char *)this + 3560));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5696), (const OZChannelBase *)((char *)a2 + 5696), (OZChannelFolder *)((char *)this + 3560));
  *((void *)this + 71OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 714) = &unk_1F1101050;
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), (const OZ3DExtrusionProperties *)((char *)a2 + 5848), (OZChannelFolder *)((char *)this + 3560));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6704), (const OZChannelBase *)((char *)a2 + 6704), (OZChannelFolder *)((char *)this + 3560));
  *((void *)this + 838) = &unk_1F1100CF0;
  *((void *)this + 840) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6856), (const OZChannelBase *)((char *)a2 + 6856), (OZChannelFolder *)((char *)this + 3560));
  *((void *)this + 857) = &unk_1F1100CF0;
  *((void *)this + 859) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7008), (const OZChannelBase *)((char *)a2 + 7008), (OZChannelFolder *)((char *)this + 3560));
  *((void *)this + 876) = &unk_1F1100CF0;
  *((void *)this + 878) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), (const OZChannelBase *)((char *)a2 + 7160), (OZChannelFolder *)((char *)this + 3560));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), (const OZChannelFolder *)((char *)a2 + 7312), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), (const OZChannelFolder *)((char *)a2 + 7440), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), (const OZ3DExtrusionProperties *)((char *)a2 + 7568), (OZChannelFolder *)((char *)this + 7440));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), (const OZ3DExtrusionProperties *)((char *)a2 + 7824), (OZChannelFolder *)((char *)this + 7440));
  OZChannel::OZChannel((OZChannel *)((char *)this + 8080), (const OZChannelBase *)((char *)a2 + 8080), (OZChannelFolder *)((char *)this + 7440));
  *((void *)this + 1010) = &unk_1F1100CF0;
  *((void *)this + 101OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), (const OZChannelBase *)((char *)a2 + 8232), (OZChannelFolder *)this);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 3560), (void (*)(OZChannelBase *, void *))EnvironmentResetCallback, 0, 0);
}

void sub_1B7D1B0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelFolder *a10, OZChannelBool *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelFolder *a23,OZChannelPercent *a24,OZChannelEnum *a25,OZChannelEnum *a26,OZChannel2D *a27,OZChannelEnum *a28)
{
  OZChannelBool::~OZChannelBool(v33);
  OZChannel::~OZChannel(v30);
  OZChannelEnum::~OZChannelEnum(v31);
  OZChannelEnum::~OZChannelEnum(v29);
  OZChannelFolder::~OZChannelFolder(v34);
  OZChannelFolder::~OZChannelFolder(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v35);
  OZChannel::~OZChannel(v32);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(a23);
  OZChannelPercent::~OZChannelPercent(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v37 - 96));
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel2D::~OZChannel2D(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v37 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v37 - 128));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 120));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 112));
  OZChannel::~OZChannel(*(OZChannel **)(v37 - 104));
  OZChannelFolder::~OZChannelFolder(v28);
  _Unwind_Resume(a1);
}

void sub_1B7D1B20C()
{
}

void sub_1B7D1B214()
{
}

void sub_1B7D1B21C()
{
}

void sub_1B7D1B224()
{
}

void sub_1B7D1B22C()
{
}

void sub_1B7D1B234()
{
}

void sub_1B7D1B23C()
{
}

void sub_1B7D1B244()
{
}

void sub_1B7D1B24C()
{
}

void sub_1B7D1B254()
{
}

void sub_1B7D1B25C()
{
}

void sub_1B7D1B264()
{
}

void sub_1B7D1B26C()
{
}

void sub_1B7D1B274()
{
}

void sub_1B7D1B27C()
{
}

void sub_1B7D1B284()
{
}

void sub_1B7D1B28C()
{
}

void sub_1B7D1B294()
{
}

void sub_1B7D1B29C()
{
}

void sub_1B7D1B2A4()
{
}

void sub_1B7D1B2AC()
{
}

void sub_1B7D1B2B4()
{
}

void sub_1B7D1B2BC()
{
}

void sub_1B7D1B2C4()
{
}

void sub_1B7D1B2CC()
{
}

void sub_1B7D1B2D4()
{
}

void sub_1B7D1B2DC()
{
}

void sub_1B7D1B2E4()
{
}

void sub_1B7D1B2EC()
{
}

void sub_1B7D1B2F4()
{
}

uint64_t OZ3DExtrusionProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    OZChannelFolder::operator=(a1);
  }
  return a1;
}

OZChannelBase *OZ3DExtrusionProperties::enable(OZ3DExtrusionProperties *this, int a2, char a3)
{
  double result = OZChannelBase::enable((OZChannelBase *)this, a2, a3);
  if (a2)
  {
    float v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return (OZChannelBase *)OZChannel::setValue((OZChannel *)((char *)this + 8232), v6, 1.0, 0);
  }
  return result;
}

void OZ3DExtrusionProperties::~OZ3DExtrusionProperties(OZ3DExtrusionProperties *this)
{
  *(void *)this = &unk_1F1169DF8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116A0D8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8232));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8080));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7440));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7312));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6856));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6704));
  OZChannelRotation3D::~OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5696));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5544));
  OZChannelGradient::~OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488));
  *((void *)this + 525) = &unk_1F114B650;
  *((void *)this + 527) = &unk_1F114B9C0;
  PCString::~PCString((PCString *)this + 560);
  char v2 = (void **)((char *)this + 4456);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 525);
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 3560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3408));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 3128));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 2976));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 2592));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336));
  OZChannel2D::~OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640));
  OZChannel2D::~OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DExtrusionProperties::~OZ3DExtrusionProperties(OZ3DExtrusionProperties *this)
{
}

{
  uint64_t vars8;

  OZ3DExtrusionProperties::~OZ3DExtrusionProperties((OZ3DExtrusionProperties *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DExtrusionProperties::environmentType(OZ3DExtrusionProperties *this)
{
  char isDisabled = OZChannelBase::isDisabled((OZChannelBase *)((char *)this + 3560), 0);
  uint64_t result = 0;
  if ((isDisabled & 1) == 0)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], 0.0)) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DExtrusionProperties::writeBody(OZ3DExtrusionProperties *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZ3DExtrusionProperties::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  if (*(unsigned char *)(theApp + 81)) {
    OZChannelFolder::setFoldFlag(this, 4);
  }
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 7440), 0x800000);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 7440), 4);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7440), 2, 0);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 280), 2))
  {
    double v4 = 0.0;
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 280), MEMORY[0x1E4F1FA48], 0.0);
    if (ValueAsInt != 1)
    {
      double v4 = 1.0;
      if ((ValueAsInt & 0xFFFFFFFE) != 2)
      {
        if (ValueAsInt == 4) {
          unsigned int v6 = 2;
        }
        else {
          unsigned int v6 = ValueAsInt;
        }
        double v4 = (double)v6;
      }
    }
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], v4, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 4488), 2))
  {
    uint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 4488), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 3944), v7, (double)ValueAsUint, 0);
    if (ValueAsUint >= OZChannelEnum::getNumberOfStrings((OZChannelEnum *)((char *)this + 3944))) {
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], 0.0, 0);
    }
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5544), 0x100000000, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 280), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4488), 10, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1200), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1896), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5848), 0x800000);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 3688), 2))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3688), MEMORY[0x1E4F1FA48], 0.0) == 1) {
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], 1.0, 0);
    }
    if (OZChannelBase::isDisabled((OZChannelBase *)((char *)this + 3560), 1)) {
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], 0.0, 0);
    }
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3688), 2, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 7824), 0x8000))
  {
    float v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 7824), MEMORY[0x1E4F1FA48], 0.0);
    double v11 = 1.0;
    if (v10) {
      double v11 = 0.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 7568), v9, v11, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 4200), 2))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4200), 10, 0);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4200), MEMORY[0x1E4F1FA48], 0.0))
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 3560), 1, 1);
      double DefaultValue = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 4200), MEMORY[0x1E4F1FA48], 0.0);
    }
    else
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 3560), 0, 1);
      double DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 3944));
    }
    OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], DefaultValue, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3560), 0x100000000, 0);
  }
  if (OZChannelBase::isEnabled((OZChannelBase *)this, 1, 1)) {
    OZChannel::setValue((OZChannel *)((char *)this + 8232), MEMORY[0x1E4F1FA48], 1.0, 0);
  }

  return OZChannelFolder::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZ3DExtrusionProperties::parseEnd(OZ3DExtrusionProperties *this, PCSerializerReadStream *a2)
{
  return OZ3DExtrusionProperties::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void std::__call_once_param<std::tuple<OZ3DExtrusionProperties_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D1BA94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties_Factory::OZ3DExtrusionProperties_Factory(OZ3DExtrusionProperties_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B8383F00;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F116A148;
  *((void *)this + 16) = &unk_1F116A218;
}

void sub_1B7D1BB64(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties_Factory::create(OZ3DExtrusionProperties_Factory *this, const PCString *a2)
{
}

void sub_1B7D1BBDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties_Factory::createCopy(OZ3DExtrusionProperties_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D1BC94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties_Factory::createChannelCopy(OZ3DExtrusionProperties_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D1BD4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelImageWithOptions_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, 0);
  *(void *)this = &unk_1F116A270;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116A5C8;
  PCURL::PCURL((PCURL *)&v15, @"Channel Image Label");
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v15, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Image Frame");
  float v12 = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v11);
  float v13 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(v12);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v15, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Image Hold Frame");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v15, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Image Offset Label");
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 0.0, 0.0, &v15, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, @"Channel Image Wrap Mode Enum");
  PCURL::PCURL((PCURL *)&v14, @"Channel Image Wrap Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v15, &v14, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v14);
  PCString::~PCString(&v15);
  *((void *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
  *((unsigned char *)this + 1064) = 0;
}

void sub_1B7D1BFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  float v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, 0);
  void *v7 = &unk_1F116A270;
  v7[2] = &unk_1F116A5C8;
  PCURL::PCURL((PCURL *)&v12, @"Channel Image Label");
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Image Frame");
  Instance = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v8);
  int v10 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v12, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Image Hold Frame");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v12, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Image Offset Label");
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 0.0, 0.0, &v12, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Image Wrap Mode Enum");
  PCURL::PCURL((PCURL *)&v11, @"Channel Image Wrap Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v12, &v11, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  *((void *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
  *((unsigned char *)this + 1064) = 0;
}

void sub_1B7D1C2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  float v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, 0);
  *uint64_t v5 = &unk_1F116A270;
  PCString v5[2] = &unk_1F116A5C8;
  PCURL::PCURL((PCURL *)&v10, @"Channel Image Label");
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v10, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Image Frame");
  Instance = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v6);
  float v8 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v10, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Image Hold Frame");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v10, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Image Offset Label");
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 50.0, 50.0, &v10, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, @"Channel Image Wrap Mode Enum");
  PCURL::PCURL((PCURL *)&v9, @"Channel Image Wrap Mode Label");
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v10, &v9, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  *((void *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
}

void sub_1B7D1C604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  float v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, const OZChannelImageWithOptions *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *uint64_t v5 = &unk_1F116A270;
  PCString v5[2] = &unk_1F116A5C8;
  uint64_t v6 = (uint64_t)(v5 + 17);
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageForImageWithOptions *)(v5 + 17), (const OZChannelImageWithOptions *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 320), (const OZChannelBase *)((char *)a2 + 320), (OZChannelFolder *)this);
  *((void *)this + 40) = &unk_1F1101490;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), (const OZChannelBase *)((char *)a2 + 472), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), (const OZChannelImageWithOptions *)((char *)a2 + 624), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), (const OZChannelImageWithOptions *)((char *)a2 + 1328), (OZChannelFolder *)this);
  *((void *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel(v6, (OZChannelImageWithOptions *)((char *)this + 624));
}

void sub_1B7D1C808(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v6);
  OZChannelPosition::~OZChannelPosition(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannel::~OZChannel(v3);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D1C864()
{
}

__CFString *OZChannelImageWithOptions::getObjCWrapperName(OZChannelImageWithOptions *this)
{
  return @"CHChannelImageWithOptions";
}

void OZChannelImageWithOptions::clone(OZChannelImageWithOptions *this)
{
}

void sub_1B7D1C8C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::copy(OZChannelImageWithOptions *this, const OZChannelBase *a2, uint64_t a3)
{
  long long v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelMoveableImage::copy((OZChannelImageWithOptions *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannel::copy((OZChannel *)((char *)this + 320), (const OZChannelBase *)((char *)v4 + 320), a3);
  OZChannel::copy((OZChannel *)((char *)this + 472), (const OZChannelBase *)((char *)v4 + 472), a3);
  OZChannelPosition::copy((OZChannelImageWithOptions *)((char *)this + 624), (const OZChannelBase *)((char *)v4 + 624), a3);

  OZChannelEnum::copy((PCString *)this + 166, (const OZChannelBase *)((char *)v4 + 1328), a3);
}

uint64_t OZChannelImageWithOptions::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t result = OZChannelFolder::parseEnd(this, a2);
  *((void *)this + 7) |= 0x1000000000uLL;
  return result;
}

uint64_t non-virtual thunk to'OZChannelImageWithOptions::parseEnd(OZChannelImageWithOptions *this, PCSerializerReadStream *a2)
{
  uint64_t result = OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  *((void *)this + 5) |= 0x1000000000uLL;
  return result;
}

uint64_t OZChannelImageWithOptions::getFrame@<X0>(OZChannelImageWithOptions *this@<X0>, const CMTime *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t result = (uint64_t)OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (!result
    || (v7 = result, (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 840))(result)) == 0)
    || (uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 840))(v7),
        (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 264))(v8)) == 0))
  {
    uint64_t v16 = MEMORY[0x1E4F1FA48];
    *a3 = *(__n128 *)MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = *(void *)(v16 + 16);
    goto LABEL_8;
  }
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 840))(v7);
  PCString v10 = (OZScene *)(*(uint64_t (**)(void))(v9 + 264))();
  PCString v11 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 320), MEMORY[0x1E4F1FA48], 0.0);
  OZScene::getTimeForFrame(v10, v12, a3);
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 472), v11, 0.0);
  if (!result)
  {
    ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    (*(void (**)(CMTime *__return_ptr))(*(void *)ChannelRootBase + 712))(&v20);
    CMTime time2 = v20;
    CMTime time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
    CMTime time1 = *(CMTime *)a3->n128_u8;
    CMTime time2 = v17;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
    *a3 = v18;
    CMTimeEpoch v14 = v19;
    a3[1].n128_u64[0] = v19;
    *(__n128 *)&time1.int64_t value = *a3;
    time1.CMTimeEpoch epoch = v14;
    CMTime time2 = *v11;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      *a3 = *(__n128 *)&v11->value;
      CMTimeEpoch epoch = v11->epoch;
LABEL_8:
      a3[1].n128_u64[0] = epoch;
    }
  }
  return result;
}

void OZChannelImageWithOptions::setTimeRange(OZChannelImageWithOptions *this)
{
  ImageNode = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 136));
  if (ImageNode)
  {
    uint64_t v3 = (*(uint64_t (**)(const void *))(*(void *)ImageNode + 104))(ImageNode);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 216))(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4);
        if (v7)
        {
          uint64_t v8 = v7;
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v6 + 712))(v14, v6);
          long long v11 = v15;
          uint64_t v12 = v16;
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v10);
          operator/(&v11, (uint64_t)&v10, (uint64_t)&time);
          double Seconds = CMTimeGetSeconds(&time);
          OZChannel::setMax((OZChannel *)((char *)this + 320), Seconds);
        }
      }
    }
  }
}

void non-virtual thunk to'OZChannelImageWithOptions::~OZChannelImageWithOptions(OZChannelImageWithOptions *this)
{
}

{
  uint64_t vars8;

  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZChannelImageWithOptions *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::OZChannelImageWithOptions_frameImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::OZChannelImageWithOptions_frameImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::_OZChannelImageWithOptions_frame;
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::_OZChannelImageWithOptions_frame) {
    operator new();
  }
}

void sub_1B7D1CF2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::OZChannelImageWithOptions_frameImpl(OZChannelUint32 *this)
{
}

void sub_1B7D1D000(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::OZChannelImageWithOptions_frameInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::OZChannelImageWithOptions_frameInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::_OZChannelImageWithOptions_frameInfo;
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::_OZChannelImageWithOptions_frameInfo) {
    operator new();
  }
}

void sub_1B7D1D0DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::OZChannelImageWithOptions_frameInfo(OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F116A6B0;
  *((void *)this + 10) = &unk_1F116A6D0;
  return this;
}

void sub_1B7D1D1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelImageForImageWithOptions_Factory::getInstance(this);
  OZChannelMoveableImage::OZChannelMoveableImage(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F116A728;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116AAB0;
  if (a3) {
  else
  }
    long long v11 = 0;
  *((void *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v11;
}

uint64_t OZChannelImageForImageWithOptions_Factory::getInstance(OZChannelImageForImageWithOptions_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelImageForImageWithOptions_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZChannelImageForImageWithOptions_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageForImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageForImageWithOptions_Factory::_instance;
}

void OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this, const OZChannelImageForImageWithOptions *a2, OZChannelFolder *a3)
{
  OZChannelMoveableImage::OZChannelMoveableImage(this, a2, a3);
  *uint64_t v5 = &unk_1F116A728;
  PCString v5[2] = &unk_1F116AAB0;
  if (a3) {
  else
  }
    uint64_t v6 = 0;
  *((void *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v6;
}

void non-virtual thunk to'OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this)
{
}

{
  uint64_t vars8;

  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelImageForImageWithOptions *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this)
{
  OZChannelMoveableImage::~OZChannelMoveableImage(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelImageForImageWithOptions::clone(OZChannelImageForImageWithOptions *this)
{
}

void sub_1B7D1D4FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions::setObjectID(OZChannelBase *this, unsigned int a2)
{
  OZChanObjectManipRef::setObjectID(this, a2, 0);
  var8 = (OZChannelImageWithOptions *)this[1].var8;
  if (var8)
  {
    OZChannelImageWithOptions::setTimeRange(var8);
  }
}

void std::__call_once_param<std::tuple<OZChannelImageForImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D1D5B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions_Factory::OZChannelImageForImageWithOptions_Factory(OZChannelImageForImageWithOptions_Factory *this)
{
  long long v3 = xmmword_1B8384030;
  long long v4 = xmmword_1B8384020;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F116AB20;
  *((void *)this + 16) = &unk_1F116ABF0;
}

void sub_1B7D1D684(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions_Factory::create(OZChannelImageForImageWithOptions_Factory *this, const PCString *a2)
{
}

void sub_1B7D1D738(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions_Factory::createCopy(OZChannelImageForImageWithOptions_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D1D830(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions_Factory::createChannelCopy(OZChannelImageForImageWithOptions_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D1D928(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChanElementOrFootageRef_Factory::getInstance(this);
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F116AC48;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116AFC8;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5, a6);
  void *v6 = &unk_1F116AC48;
  _OWORD v6[2] = &unk_1F116AFC8;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4);
  *long long v4 = &unk_1F116AC48;
  v4[2] = &unk_1F116AFC8;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *long long v3 = &unk_1F116AC48;
  v3[2] = &unk_1F116AFC8;
}

void non-virtual thunk to'OZChanElementOrFootageRef::~OZChanElementOrFootageRef(OZChanElementOrFootageRef *this)
{
}

{
  uint64_t vars8;

  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanElementOrFootageRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanElementOrFootageRef::~OZChanElementOrFootageRef(OZChanElementOrFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanElementOrFootageRef::clone(OZChanElementOrFootageRef *this)
{
}

void sub_1B7D1DBF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanElementOrFootageRef::getImageNode(OZChannelBase *this)
{
  uint64_t result = OZChanSceneNodeRef::getNode(this);
  if (result)
  {
  }
  return result;
}

uint64_t OZChanElementOrFootageRef::setImageNode(OZChanElementOrFootageRef *this, OZImageNode *lpsrc)
{
  if (lpsrc) {

  }
  return OZChanSceneNodeRef::setNode(this, lpsrc);
}

unint64_t OZChanElementOrFootageRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = *(void *)((*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 256))(a2) + 8);
  long long v7 = xmmword_1B7E78B90;
  if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v7)) {
    return OZChanSceneNodeRef::canReferenceObject(this, a2);
  }
  long long v6 = xmmword_1B83804B0;
  unint64_t result = OZFactory::isKindOfClass(v4, (int32x4_t *)&v6);
  if (result) {
    return OZChanSceneNodeRef::canReferenceObject(this, a2);
  }
  return result;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = &unk_1F116B038;
  *(void *)(v6 + 16) = &unk_1F116B3B8;
  *(void *)(v6 + 160) = 0;
  *(unsigned char *)(v6 + 168) = 0;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F116B038;
  *(void *)(v4 + 16) = &unk_1F116B3B8;
  *(void *)(v4 + 160) = 0;
  *(unsigned char *)(v4 + 168) = 0;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, const OZChannelMoveableImage *a2, OZChannelFolder *a3)
{
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3);
  *uint64_t v5 = &unk_1F116B038;
  PCString v5[2] = &unk_1F116B3B8;
  uint64_t v6 = *((void *)a2 + 20);
  if (v6)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 248))(v6);
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  *((void *)this + 20) = v6;
  *((unsigned char *)this + 168) = v7;
}

void sub_1B7D1DF24(_Unwind_Exception *a1)
{
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelMoveableImage::~OZChannelMoveableImage(OZChannelMoveableImage *this)
{
  *(void *)this = &unk_1F116B038;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116B3B8;
  if (*((unsigned char *)this + 168))
  {
    uint64_t v2 = *((void *)this + 20);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    *((void *)this + 20) = 0;
  }

  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(this);
}

{
  uint64_t vars8;

  OZChannelMoveableImage::~OZChannelMoveableImage(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelMoveableImage::~OZChannelMoveableImage(OZChannelMoveableImage *this)
{
}

{
  uint64_t vars8;

  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelMoveableImage *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZChannelMoveableImage::copy(OZChannelMoveableImage *this, const OZChannelBase *a2, uint64_t a3)
{
  OZChanSceneNodeRef::copy(this, a2, a3);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)this + 20) + 232);
  uint64_t v8 = *((void *)this + 20);

  return v7(v8, v6, a3);
}

void OZChannelMoveableImage::clone(OZChannelMoveableImage *this)
{
}

void sub_1B7D1E164(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4071F57909);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMoveableImage::setOffsetChannel(uint64_t this, OZChannel2D *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 168))
  {
    this = *(void *)(this + 160);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(unsigned char *)(v3 + 168) = 0;
  }
  *(void *)(v3 + 160) = a2;
  return this;
}

void OZMaskComp::OZMaskComp(OZMaskComp *this)
{
  *((void *)this + 14) = &unk_1F1199AC8;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F116B540);
  *(void *)this = &unk_1F116B430;
  *((void *)this + 14) = &unk_1F116B520;
  *((unsigned char *)this + 104) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((void *)this + 1OZLinkBehavior::clearAll(this, 1) = 0;
}

void sub_1B7D1E2A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v2;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void OZMaskComp::setMasks(uint64_t a1)
{
  OZChannelBase::setRangeName(*(OZChannelBase **)(a1 + 88), &v1);
  operator new();
}

void sub_1B7D1EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount *a17, PCSharedCount *a18)
{
}

void *PCPtr<OZImageMaskRender>::operator=<LiImageSource>(void *a1, const void **a2)
{
  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_5;
  }
  *a1 = v4;
  if (!v4)
  {
LABEL_5:
    uint64_t v6 = &v9;
    PCSharedCount::PCSharedCount(&v9);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v9);
    goto LABEL_6;
  }
  uint64_t v5 = (const PCSharedCount *)(a2 + 1);
  uint64_t v6 = &v8;
  PCSharedCount::PCSharedCount(&v8, v5);
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v8);
LABEL_6:
  PCSharedCount::~PCSharedCount(v6);
  return a1;
}

void sub_1B7D1EBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

CGColorSpace **OZMaskComp::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)a2 + 8) = 1;
  HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  uint64_t RequestedColorDescription = LiAgent::getRequestedColorDescription(v3);
  PCSharedCount v8 = *(CGColorSpace **)RequestedColorDescription;
  v99._pcColorDesc._colorSpaceRef._obuint64_t j = v8;
  if (v8) {
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  }
  uint64_t v9 = *(void *)(RequestedColorDescription + 8);
  v99._pcColorDesc._toneMapMethod._gain = *(float *)(RequestedColorDescription + 16);
  *(void *)&v99._pcColorDesc._dynamicRange = v9;
  v99._isPremultiplied = *(unsigned char *)(RequestedColorDescription + 24);
  uint64_t v80 = (OZMaskComp *)this;
  if (FxColorDescription::isDynamicRangeManaged(&v99))
  {
    {
      makeMaskingColorDescription(FxColorDescription const&)::maskingSpace = (uint64_t)PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
    }
    FxColorDescription::FxColorDescription((uint64_t)&v98, (CGColorSpace *)makeMaskingColorDescription(FxColorDescription const&)::maskingSpace, 0, &makeMaskingColorDescription(FxColorDescription const&)::toneMapMethod, 1);
  }
  else
  {
    memset(&v98, 0, sizeof(v98));
    PCColorDescription::PCColorDescription(&v98._pcColorDesc);
    v98._isPremultiplied = 1;
  }
  int isDynamicRangeManaged = FxColorDescription::isDynamicRangeManaged(&v99);
  int v101 = 1038174126;
  uint64_t v100 = 0x3F170A3D3E99999ALL;
  if (isDynamicRangeManaged)
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v98);
    PCGetColorSpaceLuminanceCoefficients(CGColorSpace, (float *)&v100);
  }
  LiAgent::getHelium(v3, this[2], (uint64_t *)&v97);
  if (v97)
  {
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v94);
    uint64_t Crop = LiAgent::getCrop(v3);
    LiImagePolygon::operator=((uint64_t)v94, Crop);
    unint64_t v13 = this[6] - this[5];
    if ((v13 >> 4))
    {
      v79 = a3;
      v93 = 0;
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v90);
      if ((int)(v13 >> 4) >= 1)
      {
        uint64_t v14 = (v13 >> 4) + 1;
        while (1)
        {
          uint64_t v15 = (v14 - 2);
          uint64_t v16 = this[8];
          CMTime v17 = (float *)((char *)v16 + 152 * v15);
          if (v17[36] != 0.0) {
            break;
          }
LABEL_107:
          if ((unint64_t)--v14 <= 1) {
            goto LABEL_108;
          }
        }
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        if (*((unsigned char *)v16 + 152 * v15 + 5))
        {
          uint64_t v88 = v100;
          LODWORD(v89) = v101;
        }
        else
        {
          *((_DWORD *)&v88 + *((int *)v16 + 38 * v15 + 2)) = 1065353216;
        }
        LiAgent::loadTransform((uint64_t)v3, (uint64_t)v16 + 152 * v15 + 16);
        __n128 v18 = (LiImageSource *)*((void *)this[5] + 2 * v15);
        if (v18)
        {
          if (v19)
          {
            CMTime v20 = v19;
            __n128 v21 = v3;
            double v22 = HeliumRenderer;
            unint64_t DOD = HGRenderer::GetDOD(HeliumRenderer, v97);
            unint64_t v25 = v24;
            if (HGRectIsNull(DOD, v24))
            {
              int v26 = 0;
              LODWORD(v27) = 0;
              int v28 = -1;
              int v29 = -1;
            }
            else
            {
              unint64_t v27 = HIDWORD(DOD);
              if ((int)DOD <= -1073741823) {
                int v26 = -1073741823;
              }
              else {
                int v26 = DOD;
              }
              if (SHIDWORD(DOD) <= -1073741823) {
                LODWORD(v27) = -1073741823;
              }
              if ((int)v25 >= 1073741822) {
                int v30 = 1073741822;
              }
              else {
                int v30 = v25;
              }
              unint64_t v31 = HIDWORD(v25);
              if (SHIDWORD(v25) >= 1073741822) {
                LODWORD(v3OZLinkBehavior::clearAll(this, 1) = 1073741822;
              }
              int v28 = v30 - v26;
              int v29 = v31 - v27;
            }
            HeliumRenderer = v22;
            v20[184] = (double)v26;
            v20[185] = (double)(int)v27;
            v20[186] = (double)v28;
            v20[187] = (double)v29;
            uint64_t v3 = v21;
            this = (LiImageSource **)v80;
          }
        }
        LiAgent::getHelium(v3, v18, (uint64_t *)&v87);
        if (!v87)
        {
          uint64_t v32 = (HGNode *)HGObject::operator new(0x1A0uLL);
          HGNode::HGNode(v32);
          if (v87 == v32)
          {
            if (v32) {
              (*(void (**)(HGNode *))(*(void *)v32 + 24))(v32);
            }
          }
          else
          {
            if (v87) {
              (*(void (**)(void))(*(void *)v87 + 24))();
            }
            v87 = v32;
          }
        }
        ActualColorDescription = (FxColorDescription *)LiAgent::getActualColorDescription(v3);
        long long v34 = (const LiImagePolygon *)LiAgent::getCrop(v3);
        LiImagePolygon::LiImagePolygon((LiImagePolygon *)&v82, v34);
        int v35 = *(_DWORD *)v17;
        BOOL v36 = *(_DWORD *)v17 != 1;
        uint64_t v37 = (char *)v16 + 152 * v15;
        int v40 = v37[6];
        uint64_t v39 = (unsigned __int8 *)(v37 + 6);
        int v38 = v40;
        BOOL v41 = *(_DWORD *)v17 == 3;
        if (!v40) {
          BOOL v36 = 1;
        }
        if (v38) {
          BOOL v41 = 0;
        }
        if (!v36 || v41)
        {
          intersect(HeliumRenderer, (uint64_t)v90, &v93, (uint64_t)&v82, &v87);
LABEL_89:
          uint64_t v86 = v85;
          goto LABEL_90;
        }
        if (v38) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v35 == 1;
        }
        if (v38) {
          BOOL v44 = v35 != 3;
        }
        else {
          BOOL v44 = 1;
        }
        if (!v43 && v44)
        {
          if (v35 == 2)
          {
            if (v38)
            {
              uint64_t v92 = v91;
              if (((v86 - v85) & 0x1FFFFFFFE0) != 0)
              {
                cropToPolygon(HeliumRenderer, &v87, (LiImagePolygon *)&v82, 1, 0, (HGCrop **)&v81);
                long long v45 = v81;
                if (v87 != v81)
                {
                  if (v87) {
                    goto LABEL_66;
                  }
                  goto LABEL_67;
                }
                if (!v87) {
                  goto LABEL_89;
                }
                goto LABEL_88;
              }
              goto LABEL_90;
            }
          }
          else if (v93 || v38)
          {
            if (((v92 - v91) & 0x1FFFFFFFE0) != 0)
            {
              cropToPolygon(HeliumRenderer, &v93, (LiImagePolygon *)v90, 1, 0, (HGCrop **)&v81);
              PCString v46 = v81;
              if (v93 == v81)
              {
                if (v93) {
                  (*(void (**)(void))(*(void *)v93 + 24))();
                }
              }
              else
              {
                if (v93)
                {
                  (*(void (**)(void))(*(void *)v93 + 24))();
                  PCString v46 = v81;
                }
                v93 = v46;
              }
              uint64_t v92 = v91;
            }
            if (((v86 - v85) & 0x1FFFFFFFE0) == 0) {
              goto LABEL_90;
            }
            cropToPolygon(HeliumRenderer, &v87, (LiImagePolygon *)&v82, 1, 0, (HGCrop **)&v81);
            long long v45 = v81;
            if (v87 != v81)
            {
              if (!v87) {
                goto LABEL_67;
              }
              goto LABEL_66;
            }
            if (!v87) {
              goto LABEL_89;
            }
            goto LABEL_88;
          }
          LiImagePolygon::operator=((uint64_t)v90, (uint64_t)&v82);
          goto LABEL_89;
        }
        if (((v86 - v85) & 0x1FFFFFFFE0) != 0)
        {
          cropToPolygon(HeliumRenderer, &v87, (LiImagePolygon *)&v82, 1, 0, (HGCrop **)&v81);
          long long v45 = v81;
          if (v87 != v81)
          {
            if (v87)
            {
LABEL_66:
              (*(void (**)(void))(*(void *)v87 + 24))();
              long long v45 = v81;
            }
LABEL_67:
            v87 = v45;
            goto LABEL_89;
          }
          if (!v87) {
            goto LABEL_89;
          }
LABEL_88:
          (*(void (**)(void))(*(void *)v87 + 24))();
          goto LABEL_89;
        }
LABEL_90:
        conformWithToneMap(ActualColorDescription, (uint64_t *)&v87, &v98, (uint64_t *)&v81);
        PCString v47 = v81;
        if (v87 == v81)
        {
          if (v87) {
            (*(void (**)(void))(*(void *)v87 + 24))();
          }
        }
        else
        {
          if (v87)
          {
            (*(void (**)(void))(*(void *)v87 + 24))();
            PCString v47 = v81;
          }
          v87 = v47;
        }
        if (!v93)
        {
          uint64_t v49 = (HgcMaskCompFirstPass *)HGObject::operator new(0x1A0uLL);
          HgcMaskCompFirstPass::HgcMaskCompFirstPass(v49);
        }
        switch(*(_DWORD *)v17)
        {
          case 0:
          case 4:
            long long v48 = (HgcMaskCompAdd *)HGObject::operator new(0x1A0uLL);
            HgcMaskCompAdd::HgcMaskCompAdd(v48);
          case 1:
            long long v51 = (HgcMaskCompSubtract *)HGObject::operator new(0x1A0uLL);
            HgcMaskCompSubtract::HgcMaskCompSubtract(v51);
          case 2:
            long long v52 = (HgcMaskCompReplace *)HGObject::operator new(0x1A0uLL);
            HgcMaskCompReplace::HgcMaskCompReplace(v52);
          case 3:
            double v50 = (HgcMaskCompIntersect *)HGObject::operator new(0x1A0uLL);
            HgcMaskCompIntersect::HgcMaskCompIntersect(v50);
          default:
            (*(void (**)(void, void, HGNode *))(*(unsigned int *)v17 + 0x78))(0, 0, v87);
            (*(void (**)(void, uint64_t, HGNode *))(MEMORY[0] + 120))(0, 1, v93);
            (*(void (**)(void))(MEMORY[0] + 16))(0);
            (*(void (**)(void))(MEMORY[0] + 24))(0);
            __n128 v53 = ((__n128 (*)(void, void, float, float, float, float))*(void *)(MEMORY[0] + 96))(0, 0, *(float *)&v88, *((float *)&v88 + 1), *(float *)&v89, *((float *)&v89 + 1));
            v53.n128_u8[0] = *v39;
            (*(void (**)(void, uint64_t, float, float, float, double))(MEMORY[0] + 96))(0, 1, (float)v53.n128_u32[0], v17[36], (float)0, 0.0);
            if (v93)
            {
              (*(void (**)(void))(*(void *)v93 + 24))();
              v93 = 0;
              (*(void (**)(void))(MEMORY[0] + 16))(0);
            }
            (*(void (**)(void))(MEMORY[0] + 24))(0);
            LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&v82);
            if (v87) {
              (*(void (**)(HGNode *))(*(void *)v87 + 24))(v87);
            }
            break;
        }
        goto LABEL_107;
      }
LABEL_108:
      LiAgent::clearTransform(v3);
      long long v54 = v79;
      if (((v96 - v95) & 0x1FFFFFFFE0) != 0 && v93)
      {
        uint64_t v55 = HGRenderer::GetDOD(HeliumRenderer, v93);
        unint64_t v57 = v56;
        if (HGRectIsNull(v55, v56))
        {
          int v58 = 0;
          int v59 = 0;
          int v60 = -1;
          int v61 = -1;
        }
        else
        {
          if ((int)v55 <= -1073741823) {
            int v59 = -1073741823;
          }
          else {
            int v59 = v55;
          }
          if (SHIDWORD(v55) <= -1073741823) {
            int v58 = -1073741823;
          }
          else {
            int v58 = HIDWORD(v55);
          }
          if ((int)v57 >= 1073741822) {
            int v63 = 1073741822;
          }
          else {
            int v63 = v57;
          }
          unint64_t v64 = HIDWORD(v57);
          if (SHIDWORD(v57) >= 1073741822) {
            LODWORD(v64) = 1073741822;
          }
          int v60 = v63 - v59;
          int v61 = v64 - v58;
        }
        v82.f64[0] = (double)v59;
        v82.f64[1] = (double)v58;
        double v83 = (double)v60;
        double v84 = (double)v61;
        if (LiPolygon::contains(v94, &v82)) {
          uint64_t v96 = v95;
        }
      }
      intersect(HeliumRenderer, (uint64_t)v94, &v97, (uint64_t)v90, &v93);
      if (v97 && v93)
      {
        __n128 v65 = (HMaskElem *)HGObject::operator new(0x1B0uLL);
        HMaskElem::HMaskElem(v65);
      }
      if (((v96 - v95) & 0x1FFFFFFFE0) != 0)
      {
        uint64_t v66 = HGRenderer::GetDOD(HeliumRenderer, v97);
        uint64_t v68 = v67;
        BOOL IsNull = HGRectIsNull(v66, v67);
        if ((int)v66 <= -1073741823) {
          int v70 = -1073741823;
        }
        else {
          int v70 = v66;
        }
        if (SHIDWORD(v66) <= -1073741823) {
          int v71 = -1073741823;
        }
        else {
          int v71 = HIDWORD(v66);
        }
        if ((int)v68 >= 1073741822) {
          int v72 = 1073741822;
        }
        else {
          int v72 = v68;
        }
        if (SHIDWORD(v68) >= 1073741822) {
          int v73 = 1073741822;
        }
        else {
          int v73 = HIDWORD(v68);
        }
        int v74 = v72 - v70;
        int v75 = v73 - v71;
        if (IsNull)
        {
          int v71 = 0;
          int v70 = 0;
          int v74 = -1;
          int v76 = -1;
        }
        else
        {
          int v76 = v75;
        }
        v82.f64[0] = (double)v70 + -1.0;
        v82.f64[1] = (double)v71 + -1.0;
        double v83 = (double)v74 + 2.0;
        double v84 = (double)v76 + 2.0;
        LiImagePolygon::clip(v94, v82.f64, 1);
        long long v54 = v79;
        if (((v96 - v95) & 0x1FFFFFFFE0) != 0)
        {
          LiAgent::outCrop(v3, (const LiImagePolygon *)v94);
        }
        else
        {
          uint64_t v77 = (HGNode *)HGObject::operator new(0x1A0uLL);
          HGNode::HGNode(v77);
          if (v97 == v77)
          {
            if (v77) {
              (*(void (**)(HGNode *))(*(void *)v77 + 24))(v77);
            }
          }
          else
          {
            if (v97) {
              (*(void (**)(HGNode *))(*(void *)v97 + 24))(v97);
            }
            unsigned int v97 = v77;
          }
        }
      }
      *long long v54 = v97;
      unsigned int v97 = 0;
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v90);
      if (v93) {
        (*(void (**)(HGNode *))(*(void *)v93 + 24))(v93);
      }
    }
    else
    {
      uint64_t v62 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v62);
      *a3 = v62;
    }
    LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v94);
    if (v97) {
      (*(void (**)(HGNode *))(*(void *)v97 + 24))(v97);
    }
  }
  else
  {
    *a3 = 0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v98._pcColorDesc._colorSpaceRef._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v99._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B7D1FD38(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 160));
  _Unwind_Resume(a1);
}

BOOL intersect(HGRenderer *this, uint64_t a2, HGNode **a3, uint64_t a4, HGNode **a5)
{
  uint64_t v9 = (*(void *)(a4 + 72) - *(void *)(a4 + 64)) & 0x1FFFFFFFE0;
  if (((*(void *)(a2 + 72) - *(void *)(a2 + 64)) & 0x1FFFFFFFE0) != 0)
  {
    if (v9)
    {
      LiImagePolygon::operator&=((uint64_t **)a2, a4);
      if (((*(void *)(a2 + 72) - *(void *)(a2 + 64)) & 0x1FFFFFFFE0) == 0)
      {
        __n128 v10 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v10);
        long long v11 = *a3;
        if (*a3 == v10)
        {
          if (v10) {
            (*(void (**)(HGNode *))(*(void *)v10 + 24))(v10);
          }
        }
        else
        {
          if (v11) {
            (*(void (**)(HGNode *))(*(void *)v11 + 24))(v11);
          }
          *a3 = v10;
        }
      }
    }
  }
  else if (v9)
  {
    LiImagePolygon::operator=(a2, a4);
  }
  uint64_t DOD = HGRenderer::GetDOD(this, *a3);
  uint64_t v14 = v13;
  double v15 = 3.0;
  double v16 = -2.0;
  double v17 = -2.0;
  double v18 = -2.0;
  double v19 = 3.0;
  double v20 = 3.0;
  if (!HGRectIsNull(DOD, v13))
  {
    if ((int)DOD <= -1073741823) {
      int v21 = -1073741823;
    }
    else {
      int v21 = DOD;
    }
    if (SHIDWORD(DOD) <= -1073741823) {
      int v22 = -1073741823;
    }
    else {
      int v22 = HIDWORD(DOD);
    }
    if ((int)v14 >= 1073741822) {
      int v23 = 1073741822;
    }
    else {
      int v23 = v14;
    }
    if (SHIDWORD(v14) >= 1073741822) {
      int v24 = 1073741822;
    }
    else {
      int v24 = HIDWORD(v14);
    }
    double v17 = (double)(v21 - 2);
    double v18 = (double)(v22 - 2);
    double v19 = (double)(v23 - v21) + 4.0;
    double v20 = (double)(v24 - v22) + 4.0;
  }
  uint64_t v25 = HGRenderer::GetDOD(this, *a5);
  uint64_t v27 = v26;
  double v28 = -2.0;
  double v29 = 3.0;
  if (!HGRectIsNull(v25, v26))
  {
    if ((int)v25 <= -1073741823) {
      int v30 = -1073741823;
    }
    else {
      int v30 = v25;
    }
    if (SHIDWORD(v25) <= -1073741823) {
      int v31 = -1073741823;
    }
    else {
      int v31 = HIDWORD(v25);
    }
    if ((int)v27 >= 1073741822) {
      int v32 = 1073741822;
    }
    else {
      int v32 = v27;
    }
    if (SHIDWORD(v27) >= 1073741822) {
      int v33 = 1073741822;
    }
    else {
      int v33 = HIDWORD(v27);
    }
    double v28 = (double)(v30 - 2);
    double v16 = (double)(v31 - 2);
    double v15 = (double)(v32 - v30) + 4.0;
    double v29 = (double)(v33 - v31) + 4.0;
  }
  v38.f64[0] = v17;
  v38.f64[1] = v18;
  double v39 = v19;
  double v40 = v20;
  BOOL result = LiPolygon::contains((void **)a2, &v38);
  if (result
    || (v35.f64[0] = v28, v35.f64[1] = v16, v36 = v15, v37 = v29, BOOL result = LiPolygon::contains((void **)a2, &v35)))
  {
    *(void *)(a2 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(void *)(a2 + 64);
  }
  return result;
}

void sub_1B7D20504(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7D20A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZMaskComp::filteredEdges(OZMaskComp *this)
{
  return 1;
}

uint64_t OZMaskComp::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = LiImageFilter::estimateRenderMemory(a1);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  while (v6 != v5)
  {
    if (!*v6) {
      throw_PCNullPointerException(1);
    }
    v4 += (*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a2);
    v6 += 2;
  }
  return v4;
}

void OZMaskComp::~OZMaskComp(PCSharedCount *this)
{
  *(void *)(v1 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 120));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 120));

  JUMPOUT(0x1BA9BFBA0);
}

void OZMaskComp::setRenderParams(OZMaskComp *this, const OZRenderParams *a2)
{
  uint64_t v2 = (OZRenderParams *)*((void *)this + 11);
  if (v2)
  {
    OZRenderParams::~OZRenderParams(v2);
    MEMORY[0x1BA9BFBA0]();
  }
  operator new();
}

void sub_1B7D20D80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E0C40DE5FDD4ELL);
  _Unwind_Resume(a1);
}

void virtual thunk to'OZMaskComp::~OZMaskComp(OZMaskComp *this)
{
  *(void *)(v1 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 128) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 120);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZMaskComp::~OZMaskComp((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

void OZMaskComp::~OZMaskComp(PCSharedCount *this, const PCString *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  uint64_t v5 = (OZRenderParams *)this[11].var0;
  if (v5)
  {
    OZRenderParams::~OZRenderParams(v5);
    MEMORY[0x1BA9BFBA0]();
  }
  uint64_t v6 = this[8].var0;
  if (v6)
  {
    this[9].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v6;
    operator delete(v6);
  }
  PCSharedCount v8 = this + 5;
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  char v7 = a2[1].var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)v7;
  *(__CFString **)((char *)this + v7[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

uint64_t std::vector<PCPtr<LiImageSource>>::__push_back_slow_path<PCPtr<LiImageSource> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  double v17 = a1 + 2;
  if (v9) {
    __n128 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  }
  else {
    __n128 v10 = 0;
  }
  long long v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  double v15 = v11;
  double v16 = &v10[16 * v9];
  v11->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<LiImageSource>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B7D21094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiImageSource>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiImageSource>>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiImageSource>>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 24; ; i -= 16)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 24 == a5) {
      break;
    }
    *(void *)(a7 + i - 40) = *(void *)(v12 - 40);
    uint64_t v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

PCSharedCount *PCPtr<LiImageFilter>::PCPtr<LiImageSource>(PCSharedCount *a1, const PCSharedCount *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  if (a2->var0) {
  a1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = var0;
  }
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B7D21278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void HMaskCompAdd::~HMaskCompAdd(HGNode *this)
{
  HgcMaskCompAdd::~HgcMaskCompAdd(this);

  HGObject::operator delete(v1);
}

uint64_t HMaskCompAdd::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
    return *(void *)v4;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  unint64_t DOD = HGRenderer::GetDOD(a2, Input);
  unint64_t v10 = v9;
  unint64_t v34 = 0;
  if (HGRectIsNull(DOD, v9))
  {
    int v11 = -1;
    int v12 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823) {
      int v13 = -1073741823;
    }
    else {
      int v13 = DOD;
    }
    unint64_t v14 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823) {
      LODWORD(v14) = -1073741823;
    }
    if ((int)v10 >= 1073741822) {
      int v15 = 1073741822;
    }
    else {
      int v15 = v10;
    }
    unint64_t v16 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1073741822) {
      LODWORD(v16) = 1073741822;
    }
    unint64_t v34 = __PAIR64__(v14, v13);
    int v11 = v15 - v13;
    int v12 = v16 - v14;
  }
  int v35 = v11;
  int v36 = v12;
  double v17 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v18 = HGRenderer::GetDOD(a2, v17);
  uint64_t v20 = v19;
  unint64_t v31 = 0;
  if (HGRectIsNull(v18, v19))
  {
    unsigned int v21 = 0;
    unsigned int v22 = 0;
    int v23 = -1;
    int v24 = -1;
  }
  else
  {
    if ((int)v18 <= -1073741823) {
      unsigned int v22 = -1073741823;
    }
    else {
      unsigned int v22 = v18;
    }
    if (SHIDWORD(v18) <= -1073741823) {
      unsigned int v21 = -1073741823;
    }
    else {
      unsigned int v21 = HIDWORD(v18);
    }
    if ((int)v20 >= 1073741822) {
      int v25 = 1073741822;
    }
    else {
      int v25 = v20;
    }
    if (SHIDWORD(v20) >= 1073741822) {
      int v26 = 1073741822;
    }
    else {
      int v26 = HIDWORD(v20);
    }
    unint64_t v31 = __PAIR64__(v21, v22);
    int v23 = v25 - v22;
    int v24 = v26 - v21;
  }
  int v32 = v23;
  int v33 = v24;
  (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v37);
  if (v37 <= -0.00001 || v37 >= 0.00001)
  {
    uint64_t v4 = &HGRectInfinite;
    return *(void *)v4;
  }
  if (v38 <= -0.00001 || v38 >= 0.00001)
  {
    operator|<int>((int32x2_t *)&v34, (int32x2_t *)&v31, &v28);
    unsigned int v22 = v28.i32[0];
    unsigned int v21 = v28.u32[1];
    int v23 = v29;
    int v24 = v30;
  }
  return HGRectMake4i(v22, v21, v22 + v23, v21 + v24);
}

uint64_t HMaskCompAdd::GetROI(HMaskCompAdd *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 1) {
    return *(void *)&a4.var0;
  }
  else {
    return 0;
  }
}

void HMaskCompSubtract::~HMaskCompSubtract(HGNode *this)
{
  HgcMaskCompSubtract::~HgcMaskCompSubtract(this);

  HGObject::operator delete(v1);
}

uint64_t HMaskCompSubtract::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  unint64_t DOD = HGRenderer::GetDOD(a2, Input);
  unint64_t v10 = v9;
  unint64_t v33 = 0;
  if (HGRectIsNull(DOD, v9))
  {
    int v11 = -1;
    int v12 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823) {
      int v13 = -1073741823;
    }
    else {
      int v13 = DOD;
    }
    unint64_t v14 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823) {
      LODWORD(v14) = -1073741823;
    }
    if ((int)v10 >= 1073741822) {
      int v15 = 1073741822;
    }
    else {
      int v15 = v10;
    }
    unint64_t v16 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1073741822) {
      LODWORD(v16) = 1073741822;
    }
    unint64_t v33 = __PAIR64__(v14, v13);
    int v11 = v15 - v13;
    int v12 = v16 - v14;
  }
  int v34 = v11;
  int v35 = v12;
  double v17 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v18 = HGRenderer::GetDOD(a2, v17);
  uint64_t v20 = v19;
  unint64_t v30 = 0;
  if (HGRectIsNull(v18, v19))
  {
    unsigned int v21 = 0;
    unsigned int v22 = 0;
    int v23 = -1;
    int v24 = -1;
  }
  else
  {
    if ((int)v18 <= -1073741823) {
      unsigned int v22 = -1073741823;
    }
    else {
      unsigned int v22 = v18;
    }
    if (SHIDWORD(v18) <= -1073741823) {
      unsigned int v21 = -1073741823;
    }
    else {
      unsigned int v21 = HIDWORD(v18);
    }
    if ((int)v20 >= 1073741822) {
      int v25 = 1073741822;
    }
    else {
      int v25 = v20;
    }
    if (SHIDWORD(v20) >= 1073741822) {
      int v26 = 1073741822;
    }
    else {
      int v26 = HIDWORD(v20);
    }
    unint64_t v30 = __PAIR64__(v21, v22);
    int v23 = v25 - v22;
    int v24 = v26 - v21;
  }
  int v31 = v23;
  int v32 = v24;
  (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, v36);
  if (v36[0] <= -0.00001 || v36[0] >= 0.00001)
  {
    operator|<int>((int32x2_t *)&v33, (int32x2_t *)&v30, &v27);
    unsigned int v22 = v27.i32[0];
    unsigned int v21 = v27.u32[1];
    int v23 = v28;
    int v24 = v29;
  }
  return HGRectMake4i(v22, v21, v22 + v23, v21 + v24);
}

void HMaskCompReplace::~HMaskCompReplace(HGNode *this)
{
  HgcMaskCompReplace::~HgcMaskCompReplace(this);

  HGObject::operator delete(v1);
}

uint64_t HMaskCompReplace::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    uint64_t v10 = v9;
    BOOL IsNull = HGRectIsNull(DOD, v9);
    if ((int)DOD <= -1073741823) {
      int v12 = -1073741823;
    }
    else {
      int v12 = DOD;
    }
    if (SHIDWORD(DOD) <= -1073741823) {
      int v13 = -1073741823;
    }
    else {
      int v13 = HIDWORD(DOD);
    }
    if ((int)v10 >= 1073741822) {
      int v14 = 1073741822;
    }
    else {
      int v14 = v10;
    }
    if (SHIDWORD(v10) >= 1073741822) {
      int v15 = 1073741822;
    }
    else {
      int v15 = HIDWORD(v10);
    }
    int v16 = v14 - v12;
    int v17 = v15 - v13;
    if (IsNull) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = v13;
    }
    if (IsNull) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = v12;
    }
    if (IsNull) {
      int v20 = -1;
    }
    else {
      int v20 = v16;
    }
    if (IsNull) {
      int v21 = -1;
    }
    else {
      int v21 = v17;
    }
    (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v23);
    if (v23 <= -0.00001 || v23 >= 0.00001)
    {
      uint64_t v4 = &HGRectInfinite;
      return *(void *)v4;
    }
    if (v24 <= -0.00001 || v24 >= 0.00001) {
      return HGRectMake4i(v19, v18, v20 + v19, v21 + v18);
    }
  }
  uint64_t v4 = &HGRectNull;
  return *(void *)v4;
}

void HMaskCompIntersect::~HMaskCompIntersect(HGNode *this)
{
  HgcMaskCompIntersect::~HgcMaskCompIntersect(this);

  HGObject::operator delete(v1);
}

uint64_t HMaskCompIntersect::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  unint64_t DOD = HGRenderer::GetDOD(a2, Input);
  unint64_t v10 = v9;
  BOOL IsNull = HGRectIsNull(DOD, v9);
  if ((int)DOD <= -1073741823) {
    int v12 = -1073741823;
  }
  else {
    int v12 = DOD;
  }
  unint64_t v13 = HIDWORD(DOD);
  if (SHIDWORD(DOD) <= -1073741823) {
    LODWORD(v13) = -1073741823;
  }
  if ((int)v10 >= 1073741822) {
    int v14 = 1073741822;
  }
  else {
    int v14 = v10;
  }
  unint64_t v15 = HIDWORD(v10);
  if (SHIDWORD(v10) >= 1073741822) {
    LODWORD(v15) = 1073741822;
  }
  int v16 = v14 - v12;
  int v17 = v15 - v13;
  if (IsNull) {
    int v18 = 0;
  }
  else {
    int v18 = v12;
  }
  if (IsNull) {
    signed int v19 = 0;
  }
  else {
    signed int v19 = v13;
  }
  if (IsNull) {
    int v20 = -1;
  }
  else {
    int v20 = v16;
  }
  if (IsNull) {
    int v21 = -1;
  }
  else {
    int v21 = v17;
  }
  unsigned int v22 = HGRenderer::GetInput(a2, this, 1u);
  unint64_t v23 = HGRenderer::GetDOD(a2, v22);
  unint64_t v25 = v24;
  BOOL v26 = HGRectIsNull(v23, v24);
  if ((int)v23 <= -1073741823) {
    int v27 = -1073741823;
  }
  else {
    int v27 = v23;
  }
  unint64_t v28 = HIDWORD(v23);
  if (SHIDWORD(v23) <= -1073741823) {
    LODWORD(v28) = -1073741823;
  }
  if ((int)v25 >= 1073741822) {
    int v29 = 1073741822;
  }
  else {
    int v29 = v25;
  }
  unint64_t v30 = HIDWORD(v25);
  if (SHIDWORD(v25) >= 1073741822) {
    LODWORD(v30) = 1073741822;
  }
  int v31 = v29 - v27;
  int v32 = v30 - v28;
  if (v26) {
    signed int v33 = 0;
  }
  else {
    signed int v33 = v28;
  }
  if (v26) {
    signed int v34 = 0;
  }
  else {
    signed int v34 = v27;
  }
  if (v26) {
    int v35 = -1;
  }
  else {
    int v35 = v31;
  }
  if (v26) {
    int v36 = -1;
  }
  else {
    int v36 = v32;
  }
  (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v39);
  if (v39 > -0.00001 && v39 < 0.00001)
  {
    if (v40 > -0.00001 && v40 < 0.00001) {
      return 0;
    }
    int v37 = v35 + v34;
    if (v18 > v34) {
      signed int v34 = v18;
    }
    if (v20 + v18 < v37) {
      int v37 = v20 + v18;
    }
    int v38 = v36 + v33;
    if (v19 > v33) {
      signed int v33 = v19;
    }
    if (v21 + v19 < v38) {
      int v38 = v21 + v19;
    }
    int v35 = v37 - v34;
    int v36 = v38 - v33;
  }
  return HGRectMake4i(v34, v33, v34 + v35, v33 + v36);
}

void HMaskCompFirstPass::~HMaskCompFirstPass(HGNode *this)
{
  HgcMaskCompFirstPass::~HgcMaskCompFirstPass(this);

  HGObject::operator delete(v1);
}

double HMaskCompFirstPass::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    uint64_t v11 = v10;
    BOOL IsNull = HGRectIsNull(DOD, v10);
    if ((int)DOD <= -1073741823) {
      int v13 = -1073741823;
    }
    else {
      int v13 = DOD;
    }
    if (SHIDWORD(DOD) <= -1073741823) {
      int v14 = -1073741823;
    }
    else {
      int v14 = HIDWORD(DOD);
    }
    if ((int)v11 >= 1073741822) {
      int v15 = 1073741822;
    }
    else {
      int v15 = v11;
    }
    if (SHIDWORD(v11) >= 1073741822) {
      int v16 = 1073741822;
    }
    else {
      int v16 = HIDWORD(v11);
    }
    int v17 = v15 - v13;
    int v18 = v16 - v14;
    if (IsNull) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = v14;
    }
    if (IsNull) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = v13;
    }
    if (IsNull) {
      int v21 = -1;
    }
    else {
      int v21 = v17;
    }
    if (IsNull) {
      int v22 = -1;
    }
    else {
      int v22 = v18;
    }
    (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v25);
    BOOL v23 = v25 > -0.00001;
    if (v25 >= 0.00001) {
      BOOL v23 = 0;
    }
    switch((int)(v27 + 0.5))
    {
      case 0:
      case 2:
      case 3:
        if (!v23) {
          goto LABEL_37;
        }
        if (v26 > -0.00001 && v26 < 0.00001) {
          break;
        }
        goto LABEL_38;
      case 1:
        if (!v23) {
          goto LABEL_38;
        }
LABEL_37:
        uint64_t v4 = &HGRectInfinite;
        goto LABEL_3;
      default:
        unsigned int v19 = 0;
        unsigned int v20 = 0;
        int v22 = -1;
        int v21 = -1;
LABEL_38:
        *(void *)&long long v5 = HGRectMake4i(v20, v19, v20 + v21, v19 + v22);
        return *(double *)&v5;
    }
  }
  uint64_t v4 = &HGRectNull;
LABEL_3:
  long long v5 = *v4;
  return *(double *)&v5;
}

uint64_t HMaskCompFirstPass::GetROI(HMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 0) {
    return *(void *)&a4.var0;
  }
  else {
    return 0;
  }
}

void HMaskElem::HMaskElem(HMaskElem *this)
{
}

void sub_1B7D21DB8(_Unwind_Exception *a1)
{
  HgcMaskElem::~HgcMaskElem(v1);
  _Unwind_Resume(a1);
}

void HMaskElem::~HMaskElem(HGNode *this)
{
  HgcMaskElem::~HgcMaskElem(this);

  HGObject::operator delete(v1);
}

uint64_t HMaskElem::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  unint64_t DOD = HGRenderer::GetDOD(a2, Input);
  unint64_t v10 = v9;
  BOOL IsNull = HGRectIsNull(DOD, v9);
  if ((int)DOD <= -1073741823) {
    int v12 = -1073741823;
  }
  else {
    int v12 = DOD;
  }
  unint64_t v13 = HIDWORD(DOD);
  if (SHIDWORD(DOD) <= -1073741823) {
    LODWORD(v13) = -1073741823;
  }
  if ((int)v10 >= 1073741822) {
    int v14 = 1073741822;
  }
  else {
    int v14 = v10;
  }
  unint64_t v15 = HIDWORD(v10);
  if (SHIDWORD(v10) >= 1073741822) {
    LODWORD(v15) = 1073741822;
  }
  int v16 = v14 - v12;
  int v17 = v15 - v13;
  if (IsNull) {
    signed int v18 = 0;
  }
  else {
    signed int v18 = v12;
  }
  if (IsNull) {
    int v19 = 0;
  }
  else {
    int v19 = v13;
  }
  if (IsNull) {
    int v20 = -1;
  }
  else {
    int v20 = v16;
  }
  if (IsNull) {
    int v21 = -1;
  }
  else {
    int v21 = v17;
  }
  int v22 = HGRenderer::GetInput(a2, this, 1u);
  unint64_t v23 = HGRenderer::GetDOD(a2, v22);
  unint64_t v25 = v24;
  BOOL v26 = HGRectIsNull(v23, v24);
  if ((int)v23 <= -1073741823) {
    int v27 = -1073741823;
  }
  else {
    int v27 = v23;
  }
  unint64_t v28 = HIDWORD(v23);
  if (SHIDWORD(v23) <= -1073741823) {
    LODWORD(v28) = -1073741823;
  }
  if ((int)v25 >= 1073741822) {
    int v29 = 1073741822;
  }
  else {
    int v29 = v25;
  }
  unint64_t v30 = HIDWORD(v25);
  if (SHIDWORD(v25) >= 1073741822) {
    LODWORD(v30) = 1073741822;
  }
  int v31 = v29 - v27;
  int v32 = v30 - v28;
  if (v26)
  {
    LODWORD(v28) = 0;
    int v27 = 0;
    int v31 = -1;
    int v33 = -1;
  }
  else
  {
    int v33 = v32;
  }
  if (*((unsigned char *)this + 416))
  {
    unsigned int v34 = v20 + v18;
    unsigned int v35 = v21 + v19;
    unsigned int v36 = v18;
    unsigned int v37 = v19;
  }
  else
  {
    if (v18 <= v27) {
      unsigned int v36 = v27;
    }
    else {
      unsigned int v36 = v18;
    }
    signed int v38 = v31 + v27;
    if (v20 + v18 >= v38) {
      unsigned int v34 = v38;
    }
    else {
      unsigned int v34 = v20 + v18;
    }
    if (v19 <= (int)v28) {
      unsigned int v37 = v28;
    }
    else {
      unsigned int v37 = v19;
    }
    signed int v39 = v33 + v28;
    if (v21 + v19 >= v39) {
      unsigned int v35 = v39;
    }
    else {
      unsigned int v35 = v21 + v19;
    }
  }
  return HGRectMake4i(v36, v37, v34, v35);
}

void AppendDiffuseLayerToLayeredMaterial(uint64_t a1)
{
}

void sub_1B7D22934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCSharedCount::~PCSharedCount(v34);
  _Unwind_Resume(a1);
}

void AppendFlatLayerToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  CMTimeEpoch v3 = *(void *)(v2 + 16);
  *(_OWORD *)&v4.int64_t value = *(_OWORD *)v2;
  v4.CMTimeEpoch epoch = v3;
  operator new();
}

void sub_1B7D23510(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10A1C4023936FDFLL);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t FlatMaterialLayer::Over::Over(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = &unk_1F1199AC8;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  uint64_t v2 = off_1F1122FA8;
  CMTimeEpoch v3 = off_1F1122FB0;
  *(void *)uint64_t result = off_1F1122FB0;
  CMTime v4 = off_1F1122FC0;
  *(void *)((char *)*(v3 - 3) + result) = off_1F1122FB8;
  *(void *)uint64_t result = v2;
  *(void *)(result + *(v2 - 3)) = v4;
  *(void *)uint64_t result = &unk_1F1122F40;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = &unk_1F1122F88;
  return result;
}

uint64_t FlatMaterialLayer::Multiply::Multiply(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = &unk_1F1199AC8;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  uint64_t v2 = off_1F1123140;
  CMTimeEpoch v3 = off_1F1123148;
  *(void *)uint64_t result = off_1F1123148;
  CMTime v4 = off_1F1123158;
  *(void *)((char *)*(v3 - 3) + result) = off_1F1123150;
  *(void *)uint64_t result = v2;
  *(void *)(result + *(v2 - 3)) = v4;
  *(void *)uint64_t result = &unk_1F11230D8;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = &unk_1F1123120;
  return result;
}

uint64_t FlatMaterialLayer::Add::Add(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = &unk_1F1199AC8;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 1;
  uint64_t v2 = off_1F11232D8;
  CMTimeEpoch v3 = off_1F11232E0;
  *(void *)uint64_t result = off_1F11232E0;
  CMTime v4 = off_1F11232F0;
  *(void *)((char *)*(v3 - 3) + result) = off_1F11232E8;
  *(void *)uint64_t result = v2;
  *(void *)(result + *(v2 - 3)) = v4;
  *(void *)uint64_t result = &unk_1F1123270;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = &unk_1F11232B8;
  return result;
}

uint64_t OZFxPixelTransformsAPIData::pixelTransform@<X0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  if (*(void *)this)
  {
    CMTime v4 = *(uint64_t **)(*(void *)this + 160);
    if (v4 != &v10)
    {
      uint64_t v5 = 0;
      PCSharedCount v6 = &v10;
      do
      {
        for (uint64_t i = 0; i != 4; ++i)
          v6[i] = v4[i];
        ++v5;
        v6 += 4;
        v4 += 4;
      }
      while (v5 != 4);
    }
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)this + 136, (long long *)&v10, (uint64_t)v9);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (long long *)((char *)this + 8), a2);
}

__n128 OZFxPixelTransformsAPIData::inversePixelTransform@<Q0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  CMTime v4 = *(LiAgent **)this;
  if (v4)
  {
    LiAgent::getInversePixelTransform(v4, 0.0, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        PCSharedCount v6 = (_OWORD *)(a2 + i);
        long long v7 = *(_OWORD *)&v15[i + 16];
        _OWORD *v6 = *(_OWORD *)&v15[i];
        v6[1] = v7;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 1, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v16, (long long *)a2, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t j = 0; j != 128; j += 32)
      {
        uint64_t v9 = (_OWORD *)(a2 + j);
        long long v10 = *(_OWORD *)&v15[j + 16];
        _OWORD *v9 = *(_OWORD *)&v15[j];
        v9[1] = v10;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 17, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a2, (long long *)&v16, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t k = 0; k != 128; k += 32)
      {
        uint64_t v13 = a2 + k;
        __n128 result = *(__n128 *)&v15[k];
        long long v14 = *(_OWORD *)&v15[k + 16];
        *(__n128 *)uint64_t v13 = result;
        *(_OWORD *)(v13 + 16) = v14;
      }
    }
  }
  return result;
}

uint64_t OZFxPixelTransformsAPIData::destinationPixelTransform@<X0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  CMTime v4 = *(double ***)this;
  if (v4)
  {
    LiAgent::getClientPixelTransform(v4, (uint64_t)v9);
    for (uint64_t i = 0; i != 128; i += 32)
    {
      PCSharedCount v6 = (_OWORD *)((char *)&v10 + i);
      long long v7 = *(_OWORD *)&v9[i + 16];
      _OWORD *v6 = *(_OWORD *)&v9[i];
      v6[1] = v7;
    }
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)this + 136, (long long *)&v10, (uint64_t)v9);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (long long *)((char *)this + 8), a2);
}

__n128 OZFxPixelTransformsAPIData::destinationInversePixelTransform@<Q0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  CMTime v4 = *(LiAgent **)this;
  if (v4)
  {
    LiAgent::getInverseClientPixelTransform(v4, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        PCSharedCount v6 = (_OWORD *)(a2 + i);
        long long v7 = *(_OWORD *)&v15[i + 16];
        _OWORD *v6 = *(_OWORD *)&v15[i];
        v6[1] = v7;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 1, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v16, (long long *)a2, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t j = 0; j != 128; j += 32)
      {
        uint64_t v9 = (_OWORD *)(a2 + j);
        long long v10 = *(_OWORD *)&v15[j + 16];
        _OWORD *v9 = *(_OWORD *)&v15[j];
        v9[1] = v10;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 17, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a2, (long long *)&v16, (uint64_t)v15);
    if (v15 != (unsigned char *)a2)
    {
      for (uint64_t k = 0; k != 128; k += 32)
      {
        uint64_t v13 = a2 + k;
        __n128 result = *(__n128 *)&v15[k];
        long long v14 = *(_OWORD *)&v15[k + 16];
        *(__n128 *)uint64_t v13 = result;
        *(_OWORD *)(v13 + 16) = v14;
      }
    }
  }
  return result;
}

void *getPixelTransformsAPIData(void)
{
  {
    pthread_key_create((pthread_key_t *)&getPixelTransformsAPIData(void)::transformsData, (void (__cdecl *)(void *))PCThreadSpecific<OZFxPixelTransformsAPIData>::destroy);
  }
  uint64_t v0 = pthread_getspecific(getPixelTransformsAPIData(void)::transformsData);
  if (!v0) {
    operator new();
  }
  return v0;
}

void sub_1B7D23FF4(_Unwind_Exception *a1)
{
}

uint64_t PCThreadSpecific<OZFxPixelTransformsAPIData>::destroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void OZFxFilter::OZFxFilter(OZFxFilter *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5, char a6)
{
  OZEffect::OZEffect(this, a2, a3, a4);
  *(void *)uint64_t v9 = &unk_1F116C680;
  *(void *)(v9 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116C9F0;
  *(void *)(v9 + 48) = &unk_1F116CA50;
  *(void *)(v9 + 80) = &unk_1F116CCA8;
  *(void *)(v9 + 368) = &unk_1F116CD00;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v9 + 368), a3, (OZChannelFolder *)(v9 + 88), a5, a6);
}

void sub_1B7D24388(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZEffect::~OZEffect(v1);
  _Unwind_Resume(a1);
}

void OZFxFilter::OZFxFilter(OZFxFilter *this, const OZFxFilter *a2, char a3)
{
  OZEffect::OZEffect(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F116C680;
  *(void *)(v4 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116C9F0;
  *(void *)(v4 + 48) = &unk_1F116CA50;
  *(void *)(v4 + 80) = &unk_1F116CCA8;
  *(void *)(v4 + 368) = &unk_1F116CD00;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v4 + 368), (const OZFxFilter *)((char *)a2 + 368), (OZChannelFolder *)(v4 + 88));
}

void sub_1B7D2454C(_Unwind_Exception *a1)
{
  PCMutex::~PCMutex(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZEffect::~OZEffect(v1);
  _Unwind_Resume(a1);
}

void OZFxFilter::~OZFxFilter(OZFxFilter *this)
{
  *(void *)this = &unk_1F116C680;
  *((void *)this + 4) = &unk_1F116C9F0;
  *((void *)this + 6) = &unk_1F116CA50;
  *((void *)this + 10) = &unk_1F116CCA8;
  uint64_t v2 = (OZFxFilter *)((char *)this + 368);
  *((void *)this + 46) = &unk_1F116CD00;
  OZFxPlugSharedBase::resetFxLock((OZFxPlugSharedLock **)this + 46);
  [*((id *)this + 47) unregisterAPIForProtocol:&unk_1F121B3A8];
  PCMutex::~PCMutex((PCMutex *)this + 12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)this + 824);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);

  OZEffect::~OZEffect((OZChannelBase *)this);
}

{
  uint64_t vars8;

  OZFxFilter::~OZFxFilter(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFxFilter::~OZFxFilter(OZFxFilter *this)
{
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 48));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 80));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 368));
}

{
  uint64_t vars8;

  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 32));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 80));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 368));

  JUMPOUT(0x1BA9BFBA0);
}

void OZFxFilter::getBoundsWithInput(id *a1, long long *a2, uint64_t a3)
{
  unint64_t v106 = 0;
  unint64_t var0_low = 0;
  double v104 = 0.0;
  double v105 = 0.0;
  double v103 = 0.0;
  CMTime v102 = *(CMTime *)a2;
  id v6 = a1[50];
  uint64_t v7 = [v6 figTimeToFxTime:&v102 withConversionData:0];
  [v6 _getFloatValue:&v103 fromParm:10001 atTime:v7];
  long long v100 = *a2;
  uint64_t v101 = *((void *)a2 + 2);
  if (!(*((unsigned int (**)(id *, long long *, void, uint64_t, uint64_t))*a1 + 35))(a1, &v100, 0, 1, 1)|| !v6|| !a1[49]|| v103 == 0.0|| *(double *)(a3 + 32) <= 0.0|| *(double *)(a3 + 40) <= 0.0)
  {
    long long v11 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a3 + 80) = v11;
    return;
  }
  uint64_t v8 = a1 + 46;
  id v9 = a1[3];
  if (v9) {
    int v10 = (*(uint64_t (**)(id))(*(void *)v9 + 144))(v9);
  }
  else {
    int v10 = 0;
  }
  unsigned int SceneBitDepth = OZFxFilter::getSceneBitDepth((OZFxFilter *)a1);
  OZEffect::getResolution((OZEffect *)a1, &v105, &v104);
  double v13 = v104;
  double v12 = v105;
  double v15 = *(double *)(a3 + 32);
  double v14 = *(double *)(a3 + 40);
  CMTime v99 = v102;
  int v16 = 0;
  if (((*((uint64_t (**)(id *, CMTime *))a1[46] + 29))(a1 + 46, &v99) & 1) == 0 && (v10 & 1) == 0)
  {
    double v17 = v14 * v13;
    int v16 = v15 * v12 > 4096.0;
    if (v15 * v12 > 4096.0)
    {
      float v18 = *(double *)(a3 + 16);
      *(double *)(a3 + 16) = (float)((float)((int)(v15 * v12 + -4096.0) / 2) + v18);
      *(double *)(a3 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 4096.0 / v105;
    }
    if (v17 > 4096.0)
    {
      int v20 = (int)(v17 + -4096.0);
      float v19 = *(double *)(a3 + 24);
      *(double *)(a3 + 24) = (float)((float)(v20 / 2) + v19);
      *(double *)(a3 + 40) = 4096.0 / v104;
      int v16 = 1;
    }
  }
  long long v21 = (const void *)(*((uint64_t (**)(id *))*a1 + 32))(a1);
  if (v21)
  {
    uint64_t v22 = v21;
    OZExportSettings::OZExportSettings((OZExportSettings *)v98);
    long long v24 = (double *)(*(uint64_t (**)(const void *))(*(void *)v22 + 272))(v22);
    OZScene::getSceneSettings((OZScene *)v24, (OZExportSettings *)v98);
  }
  else
  {
    OZExportSettings::OZExportSettings((OZExportSettings *)v98);
    long long v23 = 0;
    long long v24 = 0;
  }
  float64x2_t v65 = *(float64x2_t *)(a3 + 32);
  float64x2_t v67 = *(float64x2_t *)(a3 + 16);
  CMTime v97 = v102;
  unsigned int v25 = OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a1 + 46, &v97);
  if (v25)
  {
    double v26 = v24[48];
  }
  else if (v23)
  {
    double v26 = (*(double (**)(void *))(*(void *)v23 + 1328))(v23);
  }
  else
  {
    double v26 = 1.0;
  }
  int32x2_t v27 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v67, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  int32x2_t v28 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v67, v65)))), v27);
  unint64_t v68 = v28.i32[0];
  unint64_t v66 = v28.i32[1];
  int v29 = v27.i32[1];
  double v30 = (double)v27.i32[0];
  if (v98[44]) {
    uint64_t v31 = 2;
  }
  else {
    uint64_t v31 = 1;
  }
  uint64_t v33 = *((void *)a2 + 3);
  uint64_t v32 = *((void *)a2 + 4);
  v34.i64[0] = v28.i32[0];
  v34.i64[1] = v28.i32[1];
  double v94 = v30;
  double v95 = (double)v29;
  float64x2_t v96 = vcvtq_f64_s64(v34);
  double v35 = *(double *)(a3 + 16);
  double v36 = *(double *)(a3 + 24);
  double v37 = *(double *)(a3 + 32);
  double v38 = *(double *)(a3 + 40);
  if (v25)
  {
    LODWORD(v81.var0) = 0;
    int v93 = 0;
    OZFxFilter::getSceneDimensions((OZFxFilter *)a1, (int *)&v81, &v93);
    unint64_t v106 = v93;
    unint64_t var0_low = SLODWORD(v81.var0);
    if ((OZFxFilter::isText((OZFxFilter *)a1) & 1) != 0
      || (signed int v39 = (const OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 32))(a1),
          double v40 = 0.0,
          OZFxPlug_IsCloneTextSceneNode(v39)))
    {
      double v40 = *(double *)(a3 + 40) * -0.5;
    }
    int v41 = 0;
    goto LABEL_33;
  }
  OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)(a1 + 46));
  CMTime v92 = v102;
  if ((*(unsigned int (**)(id *, CMTime *))(*v8 + 136))(a1 + 46, &v92))
  {
    unint64_t v106 = v66;
    unint64_t var0_low = v68;
    char v43 = objc_opt_respondsToSelector();
    if (objc_opt_respondsToSelector())
    {
      if ((OZFxFilter::isText((OZFxFilter *)a1) & 1) != 0
        || (BOOL v44 = (const OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 32))(a1),
            OZFxPlug_IsCloneTextSceneNode(v44)))
      {
        double v40 = 0.0;
        if ((*(unsigned int (**)(id))(*(void *)a1[3] + 144))(a1[3]))
        {
          int v93 = 0;
          int v91 = 0;
          OZFxFilter::getSceneDimensions((OZFxFilter *)a1, &v93, &v91);
          unint64_t v45 = v93;
          unint64_t v64 = v91;
          unint64_t v106 = v91;
          unint64_t var0_low = v93;
          uint64_t v90 = 0x3FF0000000000000;
          uint64_t v87 = 0x3FF0000000000000;
          uint64_t v84 = 0x3FF0000000000000;
          v81.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)0x3FF0000000000000;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          (*(void (**)(void *, PCString *, long long *))(*(void *)v23 + 1256))(v23, &v81, a2);
          double v37 = (double)v45;
          double v38 = (double)v64;
          double v35 = (double)v45 * -0.5 - *(double *)&v83;
          double v36 = (double)v64 * -0.5 - *((double *)&v85 + 1);
        }
        int v41 = 1;
LABEL_33:
        objc_msgSend(a1[58], "beginLightAccess:", a2, v64);
        id v42 = a1[49];
        if (v41)
        {
          v77[0] = v68;
          v77[1] = v66;
          v77[2] = SceneBitDepth;
          v77[3] = 4;
          memset(&v77[4], 0, 24);
          char v78 = 1;
          *(_DWORD *)v79 = v108[0];
          *(_DWORD *)&v79[3] = *(_DWORD *)((char *)v108 + 3);
          double v80 = v26;
          v76[0] = v7;
          v76[1] = v31;
          v76[2] = 0;
          v76[3] = v33;
          v76[4] = v32;
          v76[5] = SceneBitDepth;
          objc_msgSend(v42, "getOutputBounds:withInputBounds:withInputInfo:withRenderInfo:", &v94, v77, v76, v35, v36, v37, v38);
          unint64_t v106 = (unint64_t)v96.f64[1];
          unint64_t var0_low = (unint64_t)v96.f64[0];
        }
        else
        {
          v72[0] = v68;
          v72[1] = v66;
          v72[2] = SceneBitDepth;
          v72[3] = 4;
          memset(&v72[4], 0, 24);
          char v73 = 1;
          *(_DWORD *)int v74 = v108[0];
          *(_DWORD *)&v74[3] = *(_DWORD *)((char *)v108 + 3);
          double v75 = v26;
          v71[0] = v7;
          v71[1] = v31;
          v71[2] = 0;
          v71[3] = v33;
          v71[4] = v32;
          v71[5] = SceneBitDepth;
          [v42 getOutputWidth:&var0_low height:&v106 withInput:v72 withInfo:v71];
        }
        [a1[58] endLightAccess];
        double v47 = v104;
        double v46 = v105;
        unint64_t v49 = v106;
        unint64_t v48 = var0_low;
        CMTime v70 = v102;
        if (((*(unsigned int (**)(id *, CMTime *))(*v8 + 232))(a1 + 46, &v70) | v10))
        {
          double v50 = (double)var0_low;
        }
        else
        {
          double v51 = v46 * (double)v48;
          double v52 = v47 * (double)v49;
          BOOL v53 = v51 > 4096.0;
          if (v52 > 4096.0) {
            BOOL v53 = 1;
          }
          LOBYTE(v16) = v16 | v53;
          if (v51 <= 4096.0) {
            double v50 = (double)var0_low;
          }
          else {
            double v50 = 4096.0 / v105;
          }
          if (v52 > 4096.0)
          {
            double v54 = 4096.0 / v104;
LABEL_53:
            if (v50 <= 0.0 || v54 <= 0.0)
            {
              __asm { FMOV            V0.2D, #-1.0 }
              *(_OWORD *)(a3 + 80) = _Q0;
              if ((v16 & 1) == 0) {
                goto LABEL_66;
              }
            }
            else
            {
              if (v41)
              {
                double v55 = v94;
                double v56 = v95;
              }
              else
              {
                double v55 = *(double *)(a3 + 16) - (double)((uint64_t)(var0_low - v68) / 2);
                double v56 = v40 + *(double *)(a3 + 24) - (double)((uint64_t)(v106 - v66) / 2);
              }
              *(double *)(a3 + 64) = v55;
              *(double *)(a3 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v56;
              *(double *)(a3 + 80) = v50;
              *(double *)(a3 + 88) = v54;
              if ((v16 & 1) == 0) {
                goto LABEL_66;
              }
            }
            goto LABEL_65;
          }
        }
        double v54 = (double)v106;
        goto LABEL_53;
      }
      int v41 = 1;
LABEL_68:
      double v40 = 0.0;
      goto LABEL_33;
    }
    if (v43)
    {
      int v41 = 0;
      goto LABEL_68;
    }
  }
  long long v62 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a3 + 80) = v62;
  if (v16)
  {
LABEL_65:
    Name = (OZChannelBase *)OZObjectManipulator::getName((OZObjectManipulator *)(a1 + 6));
    PCURL::PCURL((PCURL *)&v81, @"Filter is too big message");
    OZChannelBase::setRangeName(Name, &v81);
    PCString::~PCString(&v81);
  }
LABEL_66:
  OZExportSettings::~OZExportSettings((OZExportSettings *)v98);
}

void sub_1B7D2519C(_Unwind_Exception *a1)
{
}

uint64_t OZFxFilter::getSceneBitDepth(OZFxFilter *this)
{
  uint64_t v1 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (OZSceneSettings *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 272))(v1);
  if (!v2) {
    return 0;
  }

  return OZSceneSettings::getBitDepth(v2);
}

_DWORD *OZFxFilter::getSceneDimensions(OZFxFilter *this, int *a2, int *a3)
{
  __n128 result = (_DWORD *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  if (result && (__n128 result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 272))(result)) != 0)
  {
    *a2 = result[86];
    int v6 = result[87];
  }
  else
  {
    int v6 = 0;
    *a2 = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t OZFxFilter::isText(OZFxFilter *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 672))(v2)+ 8)+ 8), (int32x4_t)xmmword_1B7E77B70)))))
  {
    uint64_t v3 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
    char v4 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 672))(v3) + 8)+ 24), (int32x4_t)xmmword_1B7E78260)))) ^ 1;
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

__n128 OZFxFilter::getBounds(PCMutex *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)&a1->_Mutex.__opaque[8];
  if (v9)
  {
    if (!a2)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", 0, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
      pcAbortImpl();
    }
    long long v20 = xmmword_1B7E74760;
    double v12 = v21;
    v21[0] = 0;
    v21[1] = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    long long v22 = _Q1;
    long long v23 = xmmword_1B7E74760;
    v24[0] = 0;
    v24[1] = 0;
    long long v25 = _Q1;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 80))(v9, v21, a3);
    if (!OZFxFilter::inTemporalOperation(a1))
    {
      double v12 = v24;
      (*((void (**)(PCMutex *, uint64_t, long long *))a1->_vptr$PCMutex + 102))(a1, a3, &v20);
    }
    __n128 result = *(__n128 *)v12;
    long long v19 = *((_OWORD *)v12 + 1);
    *a2 = *(_OWORD *)v12;
    a2[1] = v19;
  }
  return result;
}

BOOL OZFxFilter::inTemporalOperation(PCMutex *this)
{
  uint64_t v2 = this + 12;
  v6[1] = this + 12;
  PCMutex::lock(this + 12);
  char v7 = 1;
  v6[0] = pthread_self();
  uint64_t v3 = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,BOOL>>>::find<_opaque_pthread_t *>(&this[11]._Mutex.__opaque[16], v6);
  if (v3) {
    BOOL v4 = *((unsigned char *)v3 + 24) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  PCMutex::unlock(v2);
  return v4;
}

void sub_1B7D255D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  _Unwind_Resume(a1);
}

void *OZFxFilter::shouldDrawOSCBounds(OZFxFilter *this)
{
  __n128 result = (void *)OZFxPlugSharedBase::getStaticProperty((OZFxFilter *)((char *)this + 368), @"SuppressBoundsDrawing");
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

uint64_t OZFxFilter::process(OZFxFilter *this, OZRenderParams *a2)
{
  return 0;
}

void OZFxFilter::updateChannelsForMisbehavingPlugin(id *this)
{
  [this[50] softDisableAllChannels];
  uint64_t v2 = (*((uint64_t (**)(id *))*this + 37))(this);
  if (v2)
  {
    uint64_t v3 = *(OZDocument **)(v2 + 1584);
    OZDocument::postNotification(v3, 557056);
  }
}

void non-virtual thunk to'OZFxFilter::updateChannelsForMisbehavingPlugin(id *this)
{
}

OZChannelBase *OZFxFilter::getChannelFromRefAndVersion(OZFxFilter *this, OZChannelRef *a2, double a3)
{
  uint64_t v3 = a2;
  __n128 result = OZObjectManipulator::getChannelFromRefAndVersion((OZFxFilter *)((char *)this + 48), a2, a3);
  if (v3 && !result)
  {
    if (*((char *)v3 + 23) < 0)
    {
      uint64_t v3 = *(OZChannelRef **)v3;
      if (!v3) {
        return 0;
      }
    }
    __n128 result = (OZChannelBase *)objc_msgSend((id)objc_msgSend(NSString, "stringWithCString:encoding:", v3, 1), "lastPathComponent");
    if (!result) {
      return result;
    }
    if ((int)[(OZChannelBase *)result intValue] >= 10001
      && (int v6 = (void *)*((void *)this + 25)) != 0
      && (uint64_t v7 = v6[1], (int)((unint64_t)(v7 - *v6) >> 3) >= 1))
    {
      return *(OZChannelBase **)(v7 - 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

OZChannelBase *non-virtual thunk to'OZFxFilter::getChannelFromRefAndVersion(OZFxFilter *this, OZChannelRef *a2, double a3)
{
  return OZFxFilter::getChannelFromRefAndVersion((OZFxFilter *)((char *)this - 48), a2, a3);
}

uint64_t OZFxFilter::setupObservers(OZFxFilter *this, OZScene *a2)
{
  uint64_t v3 = (char *)this + 368;
  if (objc_opt_respondsToSelector())
  {
    char v4 = (*(uint64_t (**)(char *))(*(void *)v3 + 256))(v3);
    if (a2)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *((void *)a2 + 198);
        if (v5)
        {
          OZDocument::addCPPObserver(v5, (uint64_t)v3, 1001);
          (*(void (**)(char *, uint64_t))(*(void *)v3 + 264))(v3, 1);
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(char *))(*(void *)v3 + 272))(v3);
  if ((result & 1) == 0)
  {
    uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)v3 + 280);
    return v7(v3, 1);
  }
  return result;
}

uint64_t OZFxFilter::renumberID(id *this, unsigned int *a2)
{
  uint64_t result = [this[50] channelMap];
  if (result)
  {
    uint64_t v5 = *(void *)(result + 8);
    result += 8;
    uint64_t v4 = v5;
    if (!v5) {
      goto LABEL_13;
    }
    unsigned int v6 = *a2;
    uint64_t v7 = result;
    do
    {
      unsigned int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        int v10 = (uint64_t *)v4;
      }
      else {
        int v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 == result || v6 < *(_DWORD *)(v7 + 32)) {
LABEL_13:
    }
      uint64_t v7 = result;
    *a2 = *(_DWORD *)(*(void *)(v7 + 40) + 24);
  }
  return result;
}

uint64_t OZFxFilter::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 88), a2, a3);
  OZFxFilter::renumberID((id *)a1, (unsigned int *)(a1 + 816));
  uint64_t v4 = *(void **)(a1 + 400);

  return [v4 updateChannelMap];
}

uint64_t non-virtual thunk to'OZFxFilter::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  uint64_t v4 = (id *)(a1 - 48);
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 40), a2, a3);
  OZFxFilter::renumberID(v4, (unsigned int *)(a1 + 768));
  uint64_t v5 = *(void **)(a1 + 352);

  return [v5 updateChannelMap];
}

uint64_t OZFxFilter::didChangeChannelState(OZFxFilter *this, OZChannelBase *a2)
{
  uint64_t v3 = (char *)this + 368;
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 296))(this);

  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

uint64_t non-virtual thunk to'OZFxFilter::didChangeChannelState(OZFxFilter *this, OZChannelBase *a2)
{
  uint64_t v3 = (char *)this + 320;
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(void))(*((void *)this - 6) + 296))();

  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

BOOL OZFxFilter::shouldRenumberChannel(OZFxFilter *this, OZChannelBase *a2)
{
  unsigned int v2 = a2->var3 - 10001;
  return (v2 >= 5 || ((0x17u >> v2) & 1) == 0)
      && OZObjectManipulator::shouldRenumberChannel((OZFxFilter *)((char *)this + 48), a2);
}

BOOL non-virtual thunk to'OZFxFilter::shouldRenumberChannel(OZFxFilter *this, OZChannelBase *a2)
{
  unsigned int v2 = a2->var3 - 10001;
  return (v2 >= 5 || ((0x17u >> v2) & 1) == 0) && OZObjectManipulator::shouldRenumberChannel(this, a2);
}

void *OZFxFilter::completeConstruction(id *this)
{
  uint64_t v1 = (OZFxPlugSharedBase *)(this + 46);
  [this[47] registerAPIObject:this[50] forProtocol:&unk_1F121B3A8 version:1];
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)v1);
  OZFxPlugSharedBase::updateInputPointsChannel(v1);

  return OZFxPlugSharedBase::updateAbsolutePointsChannel(v1);
}

void *non-virtual thunk to'OZFxFilter::completeConstruction(id *this)
{
  return OZFxFilter::completeConstruction(this - 46);
}

uint64_t OZFxFilter::didAddToNode(const PCString *this, OZSceneNode *a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
  ((void (*)(const PCString *, uint64_t))this->var0[14].length)(this, v6);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[50].var0;
  if (var0)
  {
    uint64_t v8 = [(__CFString *)this[50].var0 contextManager];
    if (v8)
    {
      BOOL v9 = (OZFxPlugRenderContextManager *)v8;
      (*(void (**)(FxColorDescription *__return_ptr, OZSceneNode *))(*(void *)a2 + 288))(&v62, a2);
      OZFxPlugRenderContextManager::setWorkingColorDescription(v9, &v62);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v62._pcColorDesc._colorSpaceRef._obj);
      float v10 = (*(float (**)(OZSceneNode *))(*(void *)a2 + 296))(a2);
      OZFxPlugRenderContextManager::setBlendingGamma(v9, v10);
    }
    [(__CFString *)var0 setObjectID];
  }
  long long v11 = (OZChannelBase *)&this[46];
  OZFxPlugSharedBase::doPostConstructionActions((id *)&this[46].var0);
  if (a3) {
    OZFxPlugSharedBase::finishPluginSetup((OZFxPlugSharedBase *)&this[46]);
  }
  OZFxPlugSharedBase::getPluginUUID(this + 46, (PCString *)&v62);
  double v12 = PCString::ns_str((PCString *)&v62);
  PCString::~PCString((PCString *)&v62);
  if ([(__CFString *)v12 compare:@"41122549-B8A6-470E-94DA-211294D20B62"])
  {
    if ([(__CFString *)v12 compare:@"7E9178C5-7B0F-4B86-884D-FE79F568B6CE"]) {
      goto LABEL_120;
    }
    uint64_t v13 = [(__CFString *)this[50].var0 channelMap];
    if (!v13) {
      goto LABEL_120;
    }
    double v15 = (void *)(v13 + 8);
    uint64_t v14 = *(void *)(v13 + 8);
    if (!v14) {
      goto LABEL_21;
    }
    uint64_t v16 = v13 + 8;
    do
    {
      unsigned int v17 = *(_DWORD *)(v14 + 32);
      BOOL v18 = v17 >= 0x22;
      if (v17 >= 0x22) {
        long long v19 = (uint64_t *)v14;
      }
      else {
        long long v19 = (uint64_t *)(v14 + 8);
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      uint64_t v14 = *v19;
    }
    while (*v19);
    if ((void *)v16 == v15 || *(_DWORD *)(v16 + 32) >= 0x23u) {
LABEL_21:
    }
      uint64_t v16 = v13 + 8;
    OZChannelBase::setFlag(*(OZChannelBase **)(v16 + 40), 0x1000000000, 0);
    uint64_t v20 = *v15;
    if (*v15)
    {
      long long v21 = v15;
      do
      {
        unsigned int v22 = *(_DWORD *)(v20 + 32);
        BOOL v23 = v22 >= 5;
        if (v22 >= 5) {
          long long v24 = (uint64_t *)v20;
        }
        else {
          long long v24 = (uint64_t *)(v20 + 8);
        }
        if (v23) {
          long long v21 = (void *)v20;
        }
        uint64_t v20 = *v24;
      }
      while (*v24);
      if (v21 != v15 && *((_DWORD *)v21 + 8) < 6u) {
        goto LABEL_119;
      }
    }
    goto LABEL_118;
  }
  uint64_t v25 = [(__CFString *)this[50].var0 channelMap];
  if (!v25) {
    goto LABEL_120;
  }
  double v15 = (void *)(v25 + 8);
  uint64_t v26 = *(void *)(v25 + 8);
  if (!v26) {
    goto LABEL_46;
  }
  uint64_t v27 = v25 + 8;
  do
  {
    unsigned int v28 = *(_DWORD *)(v26 + 32);
    BOOL v29 = v28 >= 0x13;
    if (v28 >= 0x13) {
      double v30 = (uint64_t *)v26;
    }
    else {
      double v30 = (uint64_t *)(v26 + 8);
    }
    if (v29) {
      uint64_t v27 = v26;
    }
    uint64_t v26 = *v30;
  }
  while (*v30);
  if ((void *)v27 == v15 || *(_DWORD *)(v27 + 32) >= 0x14u) {
LABEL_46:
  }
    uint64_t v27 = v25 + 8;
  OZChannelBase::setFlag(*(OZChannelBase **)(v27 + 40), 0x1000000000, 0);
  uint64_t v31 = *v15;
  if (!*v15) {
    goto LABEL_58;
  }
  uint64_t v32 = v15;
  do
  {
    unsigned int v33 = *(_DWORD *)(v31 + 32);
    BOOL v34 = v33 >= 0x24;
    if (v33 >= 0x24) {
      double v35 = (uint64_t *)v31;
    }
    else {
      double v35 = (uint64_t *)(v31 + 8);
    }
    if (v34) {
      uint64_t v32 = (void *)v31;
    }
    uint64_t v31 = *v35;
  }
  while (*v35);
  if (v32 == v15 || *((_DWORD *)v32 + 8) >= 0x25u) {
LABEL_58:
  }
    uint64_t v32 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v32[5], 0x1000000000, 0);
  uint64_t v36 = *v15;
  if (!*v15) {
    goto LABEL_70;
  }
  double v37 = v15;
  do
  {
    unsigned int v38 = *(_DWORD *)(v36 + 32);
    BOOL v39 = v38 >= 0x22;
    if (v38 >= 0x22) {
      double v40 = (uint64_t *)v36;
    }
    else {
      double v40 = (uint64_t *)(v36 + 8);
    }
    if (v39) {
      double v37 = (void *)v36;
    }
    uint64_t v36 = *v40;
  }
  while (*v40);
  if (v37 == v15 || *((_DWORD *)v37 + 8) >= 0x23u) {
LABEL_70:
  }
    double v37 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v37[5], 0x1000000000, 0);
  uint64_t v41 = *v15;
  if (!*v15) {
    goto LABEL_82;
  }
  id v42 = v15;
  do
  {
    unsigned int v43 = *(_DWORD *)(v41 + 32);
    BOOL v44 = v43 >= 5;
    if (v43 >= 5) {
      unint64_t v45 = (uint64_t *)v41;
    }
    else {
      unint64_t v45 = (uint64_t *)(v41 + 8);
    }
    if (v44) {
      id v42 = (void *)v41;
    }
    uint64_t v41 = *v45;
  }
  while (*v45);
  if (v42 == v15 || *((_DWORD *)v42 + 8) >= 6u) {
LABEL_82:
  }
    id v42 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v42[5], 0x1000000000, 0);
  uint64_t v46 = *v15;
  if (!*v15) {
    goto LABEL_94;
  }
  double v47 = v15;
  do
  {
    unsigned int v48 = *(_DWORD *)(v46 + 32);
    BOOL v49 = v48 >= 6;
    if (v48 >= 6) {
      double v50 = (uint64_t *)v46;
    }
    else {
      double v50 = (uint64_t *)(v46 + 8);
    }
    if (v49) {
      double v47 = (void *)v46;
    }
    uint64_t v46 = *v50;
  }
  while (*v50);
  if (v47 == v15 || *((_DWORD *)v47 + 8) >= 7u) {
LABEL_94:
  }
    double v47 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v47[5], 0x1000000000, 0);
  uint64_t v51 = *v15;
  if (!*v15) {
    goto LABEL_106;
  }
  double v52 = v15;
  do
  {
    unsigned int v53 = *(_DWORD *)(v51 + 32);
    BOOL v54 = v53 >= 0x25;
    if (v53 >= 0x25) {
      double v55 = (uint64_t *)v51;
    }
    else {
      double v55 = (uint64_t *)(v51 + 8);
    }
    if (v54) {
      double v52 = (void *)v51;
    }
    uint64_t v51 = *v55;
  }
  while (*v55);
  if (v52 == v15 || *((_DWORD *)v52 + 8) >= 0x26u) {
LABEL_106:
  }
    double v52 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v52[5], 0x1000000000, 0);
  uint64_t v56 = *v15;
  if (!*v15) {
    goto LABEL_118;
  }
  long long v21 = v15;
  do
  {
    unsigned int v57 = *(_DWORD *)(v56 + 32);
    BOOL v58 = v57 >= 0x2D;
    if (v57 >= 0x2D) {
      int v59 = (uint64_t *)v56;
    }
    else {
      int v59 = (uint64_t *)(v56 + 8);
    }
    if (v58) {
      long long v21 = (void *)v56;
    }
    uint64_t v56 = *v59;
  }
  while (*v59);
  if (v21 == v15 || *((_DWORD *)v21 + 8) >= 0x2Eu) {
LABEL_118:
  }
    long long v21 = v15;
LABEL_119:
  OZChannelBase::setFlag((OZChannelBase *)v21[5], 0x1000000000, 0);
LABEL_120:
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.motionapp");
  if (result) {
    return OZChannelBase::setRangeName(v11, v61);
  }
  return result;
}

void sub_1B7D26008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
}

uint64_t OZFxFilter::willRemove(OZFxFilter *this)
{
  unsigned int v2 = (char *)this + 368;
  if ((*(unsigned int (**)(char *))(*((void *)this + 46) + 256))((char *)this + 368))
  {
    uint64_t v3 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 296))(this);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 1584);
      if (v4)
      {
        OZDocument::removeCPPObserver(v4);
        (*(void (**)(char *, void))(*(void *)v2 + 264))(v2, 0);
      }
    }
  }
  uint64_t v5 = *(uint64_t (**)(char *, void))(*(void *)v2 + 280);

  return v5(v2, 0);
}

void *OZFxFilter::didAddSceneNodeToScene(OZFxFilter *this, OZScene *a2)
{
  (*(void (**)(OZFxFilter *, OZScene *))(*(void *)this + 472))(this, a2);
  uint64_t result = (void *)*((void *)this + 50);
  if (result)
  {
    return (void *)[result setObjectID];
  }
  return result;
}

uint64_t OZFxFilter::willRemoveSceneNodeFromScene(OZFxFilter *this, OZScene *a2)
{
  uint64_t v3 = (char *)this + 368;
  if ((*(unsigned int (**)(char *))(*((void *)this + 46) + 256))((char *)this + 368))
  {
    uint64_t v4 = *((void *)a2 + 198);
    if (v4)
    {
      OZDocument::removeCPPObserver(v4);
      (*(void (**)(char *, void))(*(void *)v3 + 264))(v3, 0);
    }
  }
  uint64_t v5 = *(uint64_t (**)(char *, void))(*(void *)v3 + 280);

  return v5(v3, 0);
}

void OZFxFilter::calcStaticHash(const PCString *a1, void *a2, uint64_t **a3)
{
  OZEffect::calcStaticHash((uint64_t)a1, a2, a3);
  if (!v5) {
    __cxa_bad_cast();
  }
  if (a1[49].var0)
  {
    uint64_t v6 = v5;
    OZFxPlugSharedBase::getPluginUUID(a1 + 46, &v7);
    (*(void (**)(void *, PCString *))(*(void *)v6 + 104))(v6, &v7);
    PCString::~PCString(&v7);
  }
}

void sub_1B7D26350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void non-virtual thunk to'OZFxFilter::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
}

double OZFxFilter::calcHashForState(const PCString *a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a1[49].var0;
  if (var0)
  {
    if ([(__CFString *)var0 variesOverTime])
    {
      CMTimeEpoch epoch = a3->epoch;
      long long v11 = *(_OWORD *)&a3->value;
      (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
      (*(void (**)(void *, long long *))(*(void *)lpsrc + 112))(lpsrc, &v11);
      (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
    }
    OZFxPlugSharedBase::getPluginUUID(a1 + 46, &v10);
    (*(void (**)(void *, PCString *))(*(void *)lpsrc + 104))(lpsrc, &v10);
    PCString::~PCString(&v10);
  }
  return OZEffect::calcHashForState((uint64_t)a1, lpsrc, a3, a4);
}

void sub_1B7D264A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

double non-virtual thunk to'OZFxFilter::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZFxFilter::calcHashForState((const PCString *)(a1 - 48), a2, a3, a4);
}

uint64_t OZFxFilter::markFactoriesForSerialization(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  uint64_t v4 = (OZFxFilter *)((char *)this + 88);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 88), 8)) {
    OZFactory::setNeedsSaving(*((OZFactory **)this + 5), (const OZFactory *)1);
  }
  OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization((id *)this + 46);

  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t non-virtual thunk to'OZFxFilter::markFactoriesForSerialization(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  return OZFxFilter::markFactoriesForSerialization((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::writeHeader(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFxFilterScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 120);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 28));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(*((OZFactory **)this + 5), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }
  OZFxPlugSharedBase::getPluginUUID((const PCString *)this + 46, &v10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 7, &v10);
  PCString::~PCString(&v10);
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 46) + 192))((char *)this + 368);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 8, v6);
  if ((*(unsigned int (**)(OZFxFilter *))(*(void *)this + 584))(this))
  {
    if (*((void *)this + 16)) {
      PCString v7 = (char *)*((void *)this + 16);
    }
    else {
      PCString v7 = (char *)this + 120;
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 118, v7);
  }
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 46) + 208))((char *)this + 368);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 9, v8);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7D267EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZFxFilter::writeHeader(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  return OZFxFilter::writeHeader((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::writeBody(id *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFxFilterScope);
  if ((*((unsigned int (**)(char *))this[46] + 26))((char *)this + 368))
  {
    uint64_t v8 = (OZChannelFolder *)[this[50] baseChannel];
    if (v8) {
      OZFxPlugSharedBase::writeDynamicParams((OZFxPlugSharedBase *)(this + 46), a2, v8);
    }
  }
  OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)(this + 11), a2, 0, 1, a5);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZFxFilter::writeBody(id *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZFxFilter::writeBody(this - 10, a2, 0, 0, a5);
}

uint64_t OZFxFilter::parseBegin(OZFxFilter *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = (OZFxFilter *)((char *)this + 368);
  *((_DWORD *)this + 20OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_DWORD *)a2 + 26);
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)this + 368);
  OZFxPlugSharedBase::updateInputPointsChannel(v4);
  OZFxPlugSharedBase::updateAbsolutePointsChannel(v4);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZFxFilterScope);
  if ((*(unsigned int (**)(OZFxPlugSharedBase *))(*((void *)this + 46) + 208))(v4)) {
    OZFxPlugSharedBase::pushDynamicParamScope(v4, a2);
  }
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 88), a2);
  return 1;
}

uint64_t non-virtual thunk to'OZFxFilter::parseBegin(OZFxFilter *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZFxFilter::parseEnd(OZFxFilter *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 88), a2);
  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    if ((*(unsigned int (**)(void))(*((void *)this + 46) + 208))())
    {
      uint64_t v4 = (uint64_t *)*((void *)this + 25);
      if (v4)
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        if (v5 != *v4)
        {
          while (1)
          {
            uint64_t v8 = *(_DWORD **)(v5 - 8);
            v5 -= 8;
            PCString v7 = v8;
            if (v8)
            {
              {
                unsigned int v9 = v7[6];
                if (v9 >> 4 >= 0x271) {
                  break;
                }
              }
            }
            if (v5 == v6) {
              goto LABEL_11;
            }
          }
          *((_DWORD *)this + 204) = v9;
        }
      }
    }
LABEL_11:
    if (*((_DWORD *)this + 204) != 10001)
    {
      uint64_t v10 = [*((id *)this + 50) channelMap];
      if (v10)
      {
        long long v11 = (uint64_t **)v10;
        double v12 = (unsigned int *)((char *)this + 816);
        uint64_t v13 = *(void *)(v10 + 8);
        if (!v13) {
          goto LABEL_24;
        }
        unsigned int v14 = *v12;
        uint64_t v15 = v10 + 8;
        do
        {
          unsigned int v16 = *(_DWORD *)(v13 + 32);
          BOOL v17 = v16 >= v14;
          if (v16 >= v14) {
            BOOL v18 = (uint64_t *)v13;
          }
          else {
            BOOL v18 = (uint64_t *)(v13 + 8);
          }
          if (v17) {
            uint64_t v15 = v13;
          }
          uint64_t v13 = *v18;
        }
        while (*v18);
        if (v15 == v10 + 8 || v14 < *(_DWORD *)(v15 + 32)) {
LABEL_24:
        }
          uint64_t v15 = v10 + 8;
        long long v19 = *(OZChannelBase **)(v15 + 40);
        OZChannelBase::setID(v19, 0x2711u);
        v44[0] = 10001;
        v45.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)v44;
        std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, v44, (uint64_t)&std::piecewise_construct, &v45)[5] = (uint64_t *)v19;
        std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>((uint64_t)v11, (unsigned int *)this + 204);
        *double v12 = 10001;
      }
    }
  }
  if ((*(unsigned int (**)(char *))(*((void *)this + 46) + 208))((char *)this + 368))
  {
    uint64_t v20 = (void *)*((void *)this + 50);
    uint64_t v21 = [v20 channelMap];
    if (v21)
    {
      BOOL v23 = (void *)(v21 + 8);
      uint64_t v22 = *(void *)(v21 + 8);
      if (v22)
      {
        uint64_t v24 = v21 + 8;
        uint64_t v25 = *(void *)(v21 + 8);
        do
        {
          unsigned int v26 = *(_DWORD *)(v25 + 32);
          BOOL v27 = v26 >= 0x2711;
          if (v26 >= 0x2711) {
            unsigned int v28 = (uint64_t *)v25;
          }
          else {
            unsigned int v28 = (uint64_t *)(v25 + 8);
          }
          if (v27) {
            uint64_t v24 = v25;
          }
          uint64_t v25 = *v28;
        }
        while (*v28);
        if ((void *)v24 != v23 && *(_DWORD *)(v24 + 32) <= 0x2711u)
        {
          [v20 addMixSlider:10001 withChannel:*(void *)(v24 + 40)];
          uint64_t v22 = *v23;
        }
        if (v22)
        {
          BOOL v29 = v23;
          uint64_t v30 = v22;
          do
          {
            unsigned int v31 = *(_DWORD *)(v30 + 32);
            BOOL v32 = v31 >= 0x2712;
            if (v31 >= 0x2712) {
              unsigned int v33 = (uint64_t *)v30;
            }
            else {
              unsigned int v33 = (uint64_t *)(v30 + 8);
            }
            if (v32) {
              BOOL v29 = (void *)v30;
            }
            uint64_t v30 = *v33;
          }
          while (*v33);
          if (v29 != v23 && *((_DWORD *)v29 + 8) <= 0x2712u)
          {
            [v20 addFlipCheckbox:10002 withChannel:v29[5]];
            uint64_t v22 = *v23;
          }
          if (v22)
          {
            BOOL v34 = v23;
            do
            {
              unsigned int v35 = *(_DWORD *)(v22 + 32);
              BOOL v36 = v35 >= 0x2713;
              if (v35 >= 0x2713) {
                double v37 = (uint64_t *)v22;
              }
              else {
                double v37 = (uint64_t *)(v22 + 8);
              }
              if (v36) {
                BOOL v34 = (void *)v22;
              }
              uint64_t v22 = *v37;
            }
            while (*v37);
            if (v34 != v23 && *((_DWORD *)v34 + 8) >> 2 <= 0x9C4u) {
              [v20 addInputPointsCheckbox:10003 withChannel:v34[5]];
            }
          }
        }
      }
    }
  }
  unsigned int v38 = (void *)*((void *)this + 50);
  if (((*(uint64_t (**)(char *))(*((void *)this + 46) + 288))((char *)this + 368) & 1) != 0
    || [v38 hasPointParameters])
  {
    [v38 movePublishOSCChannelToEnd];
  }
  CFStringRef v39 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
  if (!v39
    || CFStringCompare(v39, @"com.apple.FinalCutApp", 1uLL)
    || (OZFxPlugSharedBase::isHMTCompatible((PCString *)this + 46) & 1) != 0)
  {
    uint64_t v40 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 296))(this);
    if (!v40) {
      return 1;
    }
    uint64_t v41 = *(const __CFURL ***)(v40 + 1584);
    if (!v41) {
      return 1;
    }
    OZDocument::getFilename(v41, (PCURL *)&v45);
    PCURL::PCURL((PCURL *)v44, &v45, 0);
    if (!OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)v44, v42)
      || (OZFxPlugSharedBase::isHMTCompatible((PCString *)this + 46) & 1) != 0)
    {
      PCURL::~PCURL((PCURL *)v44);
      PCString::~PCString(&v45);
      return 1;
    }
    (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
    PCURL::~PCURL((PCURL *)v44);
    PCString::~PCString(&v45);
  }
  else
  {
    (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
  }
  return 0;
}

void sub_1B7D26E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, PCString a12)
{
}

uint64_t non-virtual thunk to'OZFxFilter::parseEnd(OZFxFilter *this, PCSerializerReadStream *a2)
{
  return OZFxFilter::parseEnd((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::updateParameterID(uint64_t this, OZChannelBase *a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v8 = a4;
  if (a2)
  {
    uint64_t v6 = this;
    OZChannelBase::setID(a2, a4);
    PCString v7 = (uint64_t **)[*(id *)(v6 + 400) channelMap];
    unsigned int v9 = &v8;
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, &v8, (uint64_t)&std::piecewise_construct, &v9)[5] = (uint64_t *)a2;
    this = std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>((uint64_t)v7, a3);
    *a3 = v8;
  }
  return this;
}

uint64_t OZFxFilter::parseElement(OZFxFilter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v6 = (OZFxFilter *)((char *)this + 368);
  if ((*(unsigned int (**)(char *))(*((void *)this + 46) + 208))((char *)this + 368)) {
    OZFxPlugSharedBase::parseDynamicParamElement(v6, a2, a3);
  }
  unsigned int v14 = 0;
  if (*((_DWORD *)a3 + 2) == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v14);
    if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 88), v14))
    {
      PCURL::PCURL((PCURL *)&v13, @"Channel Mix");
      PCSharedCount::PCSharedCount(&v12);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v12);
      PCString v7 = PCString::ns_str((PCString *)&v12);
      int v8 = [(__CFString *)v7 isEqualToString:PCString::ns_str(&v13)];
      if (v14 >> 4 > 0x270) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      if (v9 == 1)
      {
        uint64_t Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 88), *((_DWORD *)this + 204));
        OZFxFilter::updateParameterID((uint64_t)this, Descendant, (unsigned int *)this + 204, v14);
      }
      PCString::~PCString((PCString *)&v12);
      PCString::~PCString(&v13);
    }
  }
  OZChannelObjectRoot::parseElement((PCSerializer **)this + 11, a2, a3);
  return 1;
}

void sub_1B7D2704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
}

uint64_t non-virtual thunk to'OZFxFilter::parseElement(OZFxFilter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZFxFilter::setInternalName(OZFxFilter *this, const PCString *a2)
{
}

BOOL OZFxFilter::needsToRender(OZFxFilter *this, CMTime *a2)
{
  uint64_t v3 = (void *)*((void *)this + 50);
  double v6 = 0.0;
  objc_msgSend(v3, "_getFloatValue:fromParm:atTime:", &v6, 10001, objc_msgSend(v3, "figTimeToFxTime:withConversionData:", a2, 0));
  if (v3) {
    BOOL v4 = *((void *)this + 49) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4 && v6 > 0.0;
}

uint64_t OZFxFilter::rescaleInput(id *a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CMTime v14 = *a3;
  if (OZFxPlugSharedBase::isPixelIndependent(a1 + 46, &v14)) {
    return 0;
  }
  int v12 = 13;
  int v13 = 5;
  OZFxFilter::getDocumentVersionAndRevision((OZFxFilter *)a1, &v13, &v12);
  uint64_t v10 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
  BOOL v11 = OZFxPlug_InputWillBeScaledBasedOnChannel(v10, v13, v12);
  return OZFxPlug_setPixelTransformToRestrictInputSizeForFilter(a2, a6, v11, 0);
}

void *OZFxFilter::getDocumentVersionAndRevision(OZFxFilter *this, int *a2, int *a3)
{
  *a2 = 5;
  *a3 = 13;
  uint64_t result = (void *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  if (result)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 272))(result);
    if (result)
    {
      uint64_t v6 = result[198];
      if (v6)
      {
        *a2 = *(_DWORD *)(v6 + 260);
        *a3 = *(_DWORD *)(v6 + 264);
      }
    }
  }
  return result;
}

uint64_t OZFxFilter::rescaleInput(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3 = *(void *)(a2 + 160);
  float64x2_t v4 = *(float64x2_t *)(v3 + 48);
  float64x2_t v6 = *(float64x2_t *)v3;
  float64x2_t v5 = *(float64x2_t *)(v3 + 16);
  float64x2_t v15 = *(float64x2_t *)(v3 + 32);
  float64x2_t v16 = v4;
  float64x2_t v13 = v6;
  float64x2_t v14 = v5;
  long long v7 = *(_OWORD *)(v3 + 112);
  long long v9 = *(_OWORD *)(v3 + 64);
  long long v8 = *(_OWORD *)(v3 + 80);
  long long v19 = *(_OWORD *)(v3 + 96);
  long long v20 = v7;
  long long v17 = v9;
  long long v18 = v8;
  double v11 = *a3;
  double v10 = a3[1];
  if (*a3 != 1.0)
  {
    float64x2_t v13 = vmulq_n_f64(v13, v11);
    float64x2_t v14 = vmulq_n_f64(v14, v11);
  }
  if (v10 != 1.0)
  {
    float64x2_t v15 = vmulq_n_f64(v15, v10);
    float64x2_t v16 = vmulq_n_f64(v16, v10);
  }
  return LiAgent::setPixelTransform(a2, (uint64_t)&v13);
}

BOOL OZFxFilter::getSceneDimensionsBounds(OZFxFilter *a1, LiAgent *this, uint64_t a3, OZRenderParams *a4)
{
  LiAgent::getDOD((uint64_t)this, (uint64_t)v17);
  *(_OWORD *)a3 = *(_OWORD *)v17;
  LiAgent::getInversePixelTransform(this, 0.0, (uint64_t)v17);
  *(void *)float64x2_t v16 = 0;
  OZFxFilter::getSceneDimensions(a1, &v16[1], v16);
  int v9 = v16[0];
  int v8 = v16[1];
  *(void *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = v8;
  *(_DWORD *)(a3 + 60) = v9;
  OZRenderParams::getResolution(a4, &v18);
  __n128 v10 = v18;
  int v11 = (int)(v18.n128_f64[0] * (double)*(int *)(a3 + 48));
  int v12 = (int)(v18.n128_f64[1] * (double)*(int *)(a3 + 52));
  *(_DWORD *)(a3 + 48) = v11;
  *(_DWORD *)(a3 + 5OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v12;
  int v13 = (int)(v10.n128_f64[0] * (double)*(int *)(a3 + 56));
  int v14 = (int)(v10.n128_f64[1] * (double)*(int *)(a3 + 60));
  *(_DWORD *)(a3 + 56) = v13;
  *(_DWORD *)(a3 + 60) = v14;
  *(double *)(a3 + 64) = (double)v11;
  *(double *)(a3 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = (double)v12;
  a3 += 64;
  *(double *)(a3 + 16) = (double)v13;
  *(double *)(a3 + 24) = (double)v14;
  return PCMatrix44Tmpl<double>::transformRect<double>(v17, (double *)a3, a3);
}

BOOL OZFxFilter::getOutputPixelBoundsFromImageBounds(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  float64x2_t v6 = (float64x2_t *)(a4 + 16);
  double v7 = *(double *)(a4 + 16);
  double v9 = *(double *)(a4 + 24);
  double v8 = *(double *)(a4 + 32);
  double v10 = *(double *)(a4 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 816))(a1, a3, a4);
  if (v7 != v6->f64[0] || v9 != *(double *)(a4 + 24) || v8 != *(double *)(a4 + 32) || v10 != *(double *)(a4 + 40))
  {
    float64x2_t v11 = v6[1];
    float64x2_t v18 = *v6;
    float64x2_t v19 = v11;
    BOOL result = PCMatrix44Tmpl<double>::transformRect<double>(a2, v18.f64, (uint64_t)&v18);
    if (!result) {
      return result;
    }
    int32x2_t v13 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v18, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v14 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v18, v19)))), v13);
    *(int32x2_t *)a4 = v13;
    *(int32x2_t *)(a4 + 8) = v14;
  }
  float64x2_t v15 = *(float64x2_t *)(a4 + 80);
  float64x2_t v18 = *(float64x2_t *)(a4 + 64);
  float64x2_t v19 = v15;
  BOOL result = PCMatrix44Tmpl<double>::transformRect<double>(a2, v18.f64, (uint64_t)&v18);
  if (result)
  {
    int32x2_t v16 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v18, (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0000000uLL)), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v17 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(vaddq_f64(v18, v19), (float64x2_t)vdupq_n_s64(0xBEB0C6F7A0000000))))), v16);
    *(int32x2_t *)(a4 + 48) = v16;
    *(int32x2_t *)(a4 + 56) = v17;
  }
  return result;
}

double OZFxFilter::getAgentROI@<D0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  if (LiAgent::haveROI((LiAgent *)a1))
  {
    *(void *)&double result = LiAgent::getROI(a1, a2).n128_u64[0];
  }
  else
  {
    double result = 0.0;
    *a2 = (__n128)xmmword_1B7E74760;
  }
  return result;
}

float64x2_t OZFxFilter::getAgentImageSpaceBounds@<Q0>(OZFxFilter *this@<X0>, __n128 *a2@<X1>, const OZRenderParams *a3@<X2>, uint64_t a4@<X8>)
{
  OZFxFilter::getAgentROI(a2, &v26);
  LiAgent::getDOD((uint64_t)a2, (uint64_t)v24);
  int v10 = v26.n128_i32[2];
  int v9 = v26.n128_i32[3];
  if (v26.n128_i32[3] >= 1 && (signed __int32)v26.n128_u32[2] >= 1 || v25 == 0)
  {
    if (v25)
    {
      v13.i64[0] = v26.n128_i32[0];
      v13.i64[1] = v26.n128_i32[1];
      *(float64x2_t *)a4 = vcvtq_f64_s64(v13);
      result.f64[0] = (double)v10;
      *(double *)(a4 + 16) = (double)v10;
      *(double *)(a4 + 24) = (double)v9;
    }
    else
    {
      v23.i64[0] = v24[0];
      v23.i64[1] = v24[1];
      float64x2_t result = vcvtq_f64_s64(v23);
      v23.i64[0] = v24[2];
      v23.i64[1] = v24[3];
      *(float64x2_t *)a4 = result;
      *(float64x2_t *)(a4 + 16) = vcvtq_f64_s64(v23);
    }
  }
  else
  {
    int32x2_t v14 = (const void *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 248))(this);
    if (!v14) {
      goto LABEL_15;
    }
    if (!v15) {
      goto LABEL_15;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 16) = _Q0;
    (*(void (**)(void *, uint64_t, const OZRenderParams *))(*(void *)v15 + 1488))(v15, a4, a3);
    if (*(double *)(a4 + 16) < 0.0 || (result.f64[0] = *(float64_t *)(a4 + 24), result.f64[0] < 0.0))
    {
LABEL_15:
      uint64_t v20 = (*(uint64_t (**)(OZFxFilter *))(*(void *)this + 296))(this);
      if (!v20
        || (*(void *)a4 = 0,
            *(void *)(a4 + 8) = 0,
            int v21 = *(_DWORD *)(v20 + 344),
            int v22 = *(_DWORD *)(v20 + 348),
            *(double *)(a4 + 16) = (double)v21,
            *(double *)(a4 + 24) = (double)v22,
            v21 < 0)
        || v22 < 0)
      {
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(float64x2_t *)(a4 + 16) = result;
      }
      else
      {
        result.f64[0] = 0.0 - ((double)v22 * 0.5 + 0.0);
        *(double *)a4 = 0.0 - ((double)v21 * 0.5 + 0.0);
        *(float64_t *)(a4 + 8) = result.f64[0];
      }
    }
  }
  return result;
}

int32x2_t OZFxFilter::getBoundingRectangles@<D0>(id *this@<X0>, LiAgent *a2@<X1>, const OZRenderParams *a3@<X2>, CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = xmmword_1B7E74760;
  *(void *)(a5 + 16) = 0;
  int v10 = (float64x2_t *)(a5 + 16);
  *(void *)(a5 + 24) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a5 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = _Q1;
  *(_OWORD *)(a5 + 48) = xmmword_1B7E74760;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(_OWORD *)(a5 + 80) = _Q1;
  int32x2_t v16 = this + 46;
  CMTime v26 = *a4;
  if (OZFxPlugSharedBase::isPixelIndependent(this + 46, &v26) && !*((unsigned char *)this + 584))
  {
    OZFxFilter::getAgentImageSpaceBounds((OZFxFilter *)this, (__n128 *)a2, a3, (uint64_t)&v24);
    int32x2_t result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v24, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v19 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v24, v25)))), result);
    *(int32x2_t *)a5 = result;
    *(int32x2_t *)(a5 + 8) = v19;
    v20.i64[0] = result.i32[0];
    v20.i64[1] = result.i32[1];
    float64x2_t v21 = vcvtq_f64_s64(v20);
    v20.i64[0] = v19.i32[0];
    v20.i64[1] = v19.i32[1];
    float64x2_t v22 = vcvtq_f64_s64(v20);
    *(float64x2_t *)(a5 + 16) = v21;
    *(float64x2_t *)(a5 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
    *(int32x2_t *)(a5 + 48) = result;
    *(int32x2_t *)(a5 + 56) = v19;
    *(float64x2_t *)(a5 + 64) = v21;
    *(float64x2_t *)(a5 + 80) = v22;
  }
  else
  {
    LiAgent::getBoundary(a2, (uint64_t)&v24);
    float64x2_t v17 = v25;
    float64x2_t *v10 = v24;
    v10[1] = v17;
    CMTime v23 = *a4;
    if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v16, &v23))
    {
      OZFxFilter::getSceneDimensionsBounds((OZFxFilter *)this, a2, a5, a3);
    }
    else
    {
      OZFxFilter::getInputPixelBoundsFromImageBounds((uint64_t)this, (uint64_t)a2, v10, a5);
      if (*(double *)(a5 + 32) < 1.0) {
        *(void *)(a5 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0x3FF0000000000000;
      }
      if (*(double *)(a5 + 40) < 1.0) {
        *(void *)(a5 + 40) = 0x3FF0000000000000;
      }
      OZFxFilter::getOutputPixelBoundsFromImageBounds((uint64_t)this, *((double **)a2 + 20), (uint64_t)a3, a5);
    }
  }
  return result;
}

void sub_1B7D279A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14)
{
  __cxa_begin_catch(a1);
  uint64_t v16 = **(void **)(v14 + 48);
  if (v16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v16 + 280))(&a13);
    long long v17 = a14;
    *float64x2_t v15 = a13;
    v15[1] = v17;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B7D27884);
}

void sub_1B7D279F0(_Unwind_Exception *a1)
{
}

uint64_t OZFxFilter::getInputPixelBoundsFromImageBounds(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4)
{
  int32x2_t v6 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(*a3, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  int32x2_t v7 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(*a3, a3[1])))), v6);
  *(int32x2_t *)a4 = v6;
  *(int32x2_t *)(a4 + 8) = v7;
  v8.i64[0] = v6.i32[0];
  v8.i64[1] = v6.i32[1];
  float64x2_t v9 = vcvtq_f64_s64(v8);
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  float64x2_t v16 = v9;
  float64x2_t v17 = vcvtq_f64_s64(v8);
  uint64_t result = PCMatrix44Tmpl<double>::transformRect<double>(*(double **)(a2 + 160), v16.f64, (uint64_t)&v16);
  if (result)
  {
    int32x2_t v11 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v16, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v12 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v16, v17)))), v11);
    *(int32x2_t *)a4 = v11;
    *(int32x2_t *)(a4 + 8) = v12;
  }
  else
  {
    uint64_t result = LiAgent::getDOD(a2, (uint64_t)v15);
    if (v15[16])
    {
      int32x4_t v13 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a4 + 16)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a4 + 32)));
    }
    else
    {
      uint64_t result = LiAgent::getDOD(a2, (uint64_t)&v14);
      int32x4_t v13 = v14;
    }
    *(int32x4_t *)a4 = v13;
  }
  return result;
}

void sub_1B7D27B20(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    int v4 = __cxa_begin_catch(exception_object);
    OZFxFilter::fromDODXFormToSource(v4, v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x1B7D27B0CLL);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t OZFxFilter::fromDODXFormToSource(int a1, LiAgent *this, uint64_t a3)
{
  LiAgent::getDOD((uint64_t)this, (uint64_t)v12);
  *(_OWORD *)a3 = *(_OWORD *)v12;
  v5.i64[0] = (int)*(void *)a3;
  v5.i64[1] = (int)HIDWORD(*(void *)a3);
  *(float64x2_t *)(a3 + 16) = vcvtq_f64_s64(v5);
  uint64_t v6 = *(void *)(a3 + 8);
  v5.i64[0] = (int)v6;
  v5.i64[1] = SHIDWORD(v6);
  *(float64x2_t *)(a3 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = vcvtq_f64_s64(v5);
  LiAgent::getInversePixelTransform(this, 0.0, (uint64_t)v12);
  if (!PCMatrix44Tmpl<double>::transformRect<double>(v12, (double *)(a3 + 16), a3 + 16))
  {
    uint64_t v8 = *(void *)(a3 + 8);
    v9.i64[0] = (int)*(void *)a3;
    v9.i64[1] = (int)HIDWORD(*(void *)a3);
    float64x2_t v10 = vcvtq_f64_s64(v9);
    v9.i64[0] = (int)v8;
    v9.i64[1] = SHIDWORD(v8);
    int32x2_t v11 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v10, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t result = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v10, vcvtq_f64_s64(v9))))), v11);
    *(int32x2_t *)a3 = v11;
    *(int32x2_t *)(a3 + 8) = result;
  }
  return result;
}

void OZFxFilter::prepareHandlersForRendering(uint64_t a1, const LiAgent *a2, const PCSharedCount *a3, OZRenderParams *a4, uint64_t a5, uint64_t a6)
{
}

double OZFxFilter::getRenderScale@<D0>(OZFxFilter *this@<X0>, const LiAgent *a2@<X1>, const OZRenderParams *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  if (!OZFxFilter::isAnyKindOfText(this)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this)+ 8)+ 8), (int32x4_t)xmmword_1B837FBE0)))) & 1) != 0&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this)+ 8)+ 8), (int32x4_t)xmmword_1B8384170)))) & 1) != 0&& !OZFxFilter::isGroup(this))
  {
    OZRenderParams::getResolution(a3, &v9);
  }
  else
  {
    __n128 v9 = 0uLL;
    uint64_t v10 = 0;
    if (!OZFxPlug_GetScale((uint64_t)a2, (uint64_t)&v9)) {
      return result;
    }
  }
  double result = v9.n128_f64[0];
  *a4 = v9;
  return result;
}

BOOL OZFxFilter::isAnyKindOfText(OZFxFilter *this)
{
  if (OZFxFilter::isText(this)) {
    return 1;
  }
  uint64_t v3 = (const OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);

  return OZFxPlug_IsCloneTextSceneNode(v3);
}

const void *OZFxFilter::isGroup(OZFxFilter *this)
{
  double result = (const void *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  if (result) {
  return result;
  }
}

uint64_t OZFxFilter::initialRescaleInput(OZFxFilter *this, LiAgent *a2)
{
  int v4 = (OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 248))(this);
  if (!OZFxPlug_IsEmitter(v4)) {
    return 1;
  }
  int64x2_t v5 = (OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 248))(this);
  if (OZFxPlug_EmitterThatNeedsResampling(v5)) {
    return 1;
  }
  double v12 = 0.0;
  double v13 = 0.0;
  uint64_t v14 = 0;
  BOOL Scale = OZFxPlug_GetScale((uint64_t)a2, (uint64_t)&v12);
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  BOOL v7 = Scale;
  uint64_t result = 0;
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7)
  {
    double v9 = 1.0 / v12;
    if (v12 <= 2.22044605e-16) {
      double v9 = 4.50359963e15;
    }
    if (v13 <= 2.22044605e-16) {
      double v10 = 4.50359963e15;
    }
    else {
      double v10 = 1.0 / v13;
    }
    v11[0] = v9;
    v11[1] = v10;
    OZFxFilter::rescaleInput(0, (uint64_t)a2, v11);
    return 1;
  }
  return result;
}

uint64_t OZFxFilter::shouldAgentUseSourcePixelSpace(OZFxFilter *this, const LiAgent *a2)
{
  uint64_t v3 = (void *)OZFxPlugSharedBase::pluginProperties((OZFxFilter *)((char *)this + 368));
  if (!v3) {
    return *((int *)a2 + 9) < 4 && *((_DWORD *)a2 + 10) != 2;
  }
  int v4 = (void *)[v3 objectForKey:@"UseSourcePixelSpace"];
  if (!v4) {
    return *((int *)a2 + 9) < 4 && *((_DWORD *)a2 + 10) != 2;
  }

  return [v4 BOOLValue];
}

uint64_t OZFxFilter::adjustAgent(OZFxFilter *this, LiAgent *a2, long long *a3)
{
  int v14 = 0;
  long long v5 = a3[1];
  long long v11 = *a3;
  long long v12 = v5;
  long long v13 = a3[2];
  uint64_t v6 = (OZFxFilter *)((char *)this + 368);
  uint64_t v7 = 0;
  if ((*(unsigned int (**)(char *))(*((void *)this + 46) + 320))((char *)this + 368))
  {
    OZFxPlugSharedBase::restartPluginXPCIfNecessary(v6);
    uint64_t v8 = (void *)*((void *)this + 49);
    v10[0] = v11;
    v10[1] = v12;
    v10[2] = v13;
    [v8 getEdgeMode:&v14 withInfo:v10];
    if (v14 == 1)
    {
      *((_DWORD *)a2 + 8) = 3;
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  if (OZFxFilter::shouldAgentUseSourcePixelSpace(this, a2))
  {
    uint64_t v7 = 1;
    LiRenderingTechnology::setEnableMetalRendering((uint64_t)a2, 1);
  }
  return v7;
}

uint64_t OZFxFilter::doCenter(OZFxFilter *this, const LiAgent *a2, CMTime *a3)
{
  int v7 = 13;
  int v8 = 5;
  OZFxFilter::getDocumentVersionAndRevision(this, &v8, &v7);
  long long v5 = (const OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(void *)this + 256))(this);
  LODWORD(result) = OZFxPlug_IsSpecialLayer(v5, v8, v7);
  if (*((int *)a2 + 9) < 3) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t OZFxFilter::render(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  uint64_t v14 = a1 + 368;
  long long v31 = *(_OWORD *)a5;
  uint64_t v32 = *(void *)(a5 + 16);
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)(a1 + 368) + 232))(a1 + 368, &v31)) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = a3 == 0;
  }
  if (!v22)
  {
    PCPrint("File %s, line %d should not have been reached:\n\t", v15, v16, v17, v18, v19, v20, v21, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
    pcAbortImpl();
  }
  CMTime v23 = *(void **)(a1 + 392);
  uint64_t v24 = *(void *)(a5 + 272);
  long long v25 = a9[1];
  v30[0] = *a9;
  v30[1] = v25;
  _OWORD v30[2] = a9[2];
  uint64_t v26 = OZFxPlug_CallRender(a1, v23, v24, a8, a7, v30, a5);
  long long v28 = *(_OWORD *)a5;
  uint64_t v29 = *(void *)(a5 + 16);
  (*(void (**)(uint64_t, long long *))(*(void *)(a1 + 368) + 472))(v14, &v28);
  return v26;
}

uint64_t OZFxFilter::heliumMix@<X0>(OZFxFilter *this@<X0>, const LiAgent *a2@<X1>, float a3@<S0>, FxImage *a4@<X3>, FxImage *a5@<X4>, CMTime *a6@<X5>, int a7@<W2>, HGLegacyBlend **a8@<X8>)
{
  if (!a4)
  {
    uint64_t v31 = 0;
    if (a5) {
      goto LABEL_3;
    }
LABEL_7:
    *a8 = 0;
    goto LABEL_8;
  }
  [(FxImage *)a4 heliumRef];
  if (!a5) {
    goto LABEL_7;
  }
LABEL_3:
  [(FxImage *)a5 heliumRef];
  if (!a7 || !*a8)
  {
LABEL_8:
    uint64_t v15 = [(FxImage *)a5 width];
    uint64_t v16 = [(FxImage *)a5 height];
    uint64_t ActualColorSpace = LiAgent::getActualColorSpace(a2);
    OZFxPlug_GenerateFailedRenderNode((uint64_t)this, v15, v16, ActualColorSpace, (uint64_t)a8, v18, v19, v20);
  }
  if (a3 < 1.0)
  {
    uint64_t v21 = (id *)((char *)this + 368);
    long long v29 = *(_OWORD *)&a6->value;
    CMTimeEpoch epoch = a6->epoch;
    if (((*(uint64_t (**)(char *, long long *))(*((void *)this + 46) + 112))((char *)this + 368, &v29) & 1) == 0)
    {
      BOOL v22 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
      HGLegacyBlend::HGLegacyBlend(v22);
      (*(void (**)(HGLegacyBlend *, uint64_t, HGLegacyBlend *))(*(void *)v22 + 120))(v22, 1, *a8);
      uint64_t v23 = v31;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
      }
      CMTime v28 = *a6;
      if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v21, &v28))
      {
        LiAgent::getObjectToFilmTransform(a2, (uint64_t)v27);
        LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)v27, &v31, &v26);
        if (v23 == v26)
        {
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
          }
        }
        else
        {
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
          }
          uint64_t v23 = v26;
        }
      }
      (*(void (**)(HGLegacyBlend *, void, uint64_t))(*(void *)v22 + 120))(v22, 0, v23);
      (*(void (**)(HGLegacyBlend *, void, float, double, double, double))(*(void *)v22 + 96))(v22, 0, 8.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGLegacyBlend *, uint64_t, float, double, double, double))(*(void *)v22 + 96))(v22, 1, a3, 0.0, 0.0, 0.0);
      uint64_t v24 = *a8;
      if (*a8 != v22)
      {
        if (v24) {
          (*(void (**)(HGLegacyBlend *))(*(void *)v24 + 24))(v24);
        }
        *a8 = v22;
        (*(void (**)(HGLegacyBlend *))(*(void *)v22 + 16))(v22);
      }
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
      }
      (*(void (**)(HGLegacyBlend *))(*(void *)v22 + 24))(v22);
    }
  }
  uint64_t result = v31;
  if (v31) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
  }
  return result;
}

void sub_1B7D286D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (*v10) {
    (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
  }
  uint64_t v15 = *(void *)(v13 - 88);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::mix@<X0>(uint64_t a1@<X0>, const LiAgent *a2@<X1>, CMTime *a3@<X3>, void *a4@<X4>, int a5@<W7>, HGLegacyBlend **a6@<X8>, FxImage *a7, FxImage *a8)
{
  double v26 = 0.0;
  uint64_t v13 = a1 + 368;
  [*(id *)(a1 + 400) _getFloatValue:&v26 fromParm:10001 atTime:*a4];
  long long v24 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)(a1 + 368) + 232))(v13, &v24))
  {
    PCPrint("File %s, line %d should not have been reached:\n\t", v14, v15, v16, v17, v18, v19, v20, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
    pcAbortImpl();
  }
  float v21 = v26;
  CMTime v23 = *a3;
  return OZFxFilter::heliumMix((OZFxFilter *)a1, a2, v21, a7, a8, &v23, a5, a6);
}

uint64_t OZFxFilter::getHelium@<X0>(id *a1@<X0>, uint64_t a2@<X1>, LiImageSource **a3@<X2>, CMTime *a4@<X3>, int *a5@<X4>, HGNode **a6@<X8>)
{
  v191[0] = 0;
  uint64_t v12 = a1 + 46;
  char v13 = (*((uint64_t (**)(id *))a1[46] + 11))(a1 + 46);
  v189 = (PCMutex *)(a1 + 92);
  char v190 = 0;
  if ((v13 & 1) == 0)
  {
    PCMutex::lock((PCMutex *)(a1 + 92));
    char v190 = 1;
  }
  OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(v188, v12, a5, 1);
  id v14 = a1[50];
  [v14 setIsRendering:1];
  if (OZFxFilter::initialRescaleInput((OZFxFilter *)a1, (LiAgent *)a2))
  {
    uint64_t v187 = 0;
    uint64_t v187 = [a1[50] figTimeToFxTime:a4 withConversionData:0];
    uint64_t v15 = (*((uint64_t (**)(id *))*a1 + 31))(a1);
    CMTime v97 = v14;
    OZFxFilter::getRenderScale((OZFxFilter *)a1, (const LiAgent *)a2, (const OZRenderParams *)a5, (__n128 *)&v174);
    uint64_t HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    if ((*(unsigned int (**)(uint64_t))(*(void *)HeliumRenderer + 304))(HeliumRenderer)) {
      int v17 = 32;
    }
    else {
      int v17 = 16;
    }
    OZFxPlugSharedBase::CalculateRenderInfo((int)v12, v15, &v187, &v174, v17, a5[123], &v184);
    uint64_t v183 = 0x3FF0000000000000;
    uint64_t v180 = 0x3FF0000000000000;
    uint64_t v177 = 0x3FF0000000000000;
    uint64_t v174 = 0x3FF0000000000000;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    uint64_t v173 = 0x3FF0000000000000;
    uint64_t v170 = 0x3FF0000000000000;
    uint64_t v167 = 0x3FF0000000000000;
    uint64_t v164 = 0x3FF0000000000000;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    if (*(_DWORD *)(a2 + 40) == 2)
    {
      uint64_t v18 = **(void **)(a2 + 48);
      if (v18)
      {
        (*(void (**)(float64x2_t *__return_ptr))(*(void *)v18 + 176))(&v158);
        PCMatrix44Tmpl<double>::rightMult((uint64_t)&v174, v158.f64);
      }
    }
    else
    {
      (*((void (**)(id *, uint64_t *))*v12 + 43))(v12, &v174);
    }
    OZFxFilter::adjustAgent((OZFxFilter *)a1, (LiAgent *)a2, &v184);
    CMTime v157 = *a4;
    if (OZFxPlugSharedBase::isPixelIndependent(v12, &v157) && (LiAgent::haveROI((LiAgent *)a2) & 1) == 0) {
      *(void *)&double v20 = LiAgent::passROI((LiAgent *)a2).n128_u64[0];
    }
    CMTimeValue v156 = 0;
    ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)&v158, (EAGLContext *)objc_msgSend(MEMORY[0x1E4F38D58], "currentContext", v20));
    LiAgent::getHelium((LiAgent *)a2, *a3, &v143.value);
    CMTimeValue value = v143.value;
    if (v156 == v143.value)
    {
      if (v156) {
        (*(void (**)(void))(*(void *)v156 + 24))();
      }
    }
    else
    {
      if (v156)
      {
        (*(void (**)(void))(*(void *)v156 + 24))();
        CMTimeValue value = v143.value;
      }
      CMTimeValue v156 = value;
    }
    ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)&v158);
    LiAgent::getDOD(a2, (uint64_t)&v158);
    if (LOBYTE(v159.f64[0]) || *(uint64_t *)((char *)v158.f64 + 4) > 0 && SHIDWORD(v158.f64[1]) > 0)
    {
      CMTime v151 = *a4;
      v22.n128_u64[0] = (unint64_t)OZFxFilter::getBoundingRectangles(a1, (LiAgent *)a2, (const OZRenderParams *)a5, &v151, (uint64_t)v152);
      if (DWORD2(v153) && HIDWORD(v153))
      {
        long long v149 = *(_OWORD *)&a4->value;
        CMTimeEpoch epoch = a4->epoch;
        if ((*((unsigned int (**)(id *, long long *))*v12 + 15))(v12, &v149))
        {
          CMTime v148 = *a4;
          v25.i64[0] = SLODWORD(v152[0].f64[0]);
          v25.i64[1] = SHIDWORD(v152[0].f64[0]);
          float64x2_t v26 = vcvtq_f64_s64(v25);
          v25.i64[0] = SLODWORD(v152[0].f64[1]);
          v25.i64[1] = SHIDWORD(v152[0].f64[1]);
          float64x2_t v158 = v26;
          float64x2_t v159 = vcvtq_f64_s64(v25);
          if (OZFxFilter::rescaleInput(a1, a2, &v148, v23, v24, (uint64_t)&v158))
          {
            LiAgent::getHelium((LiAgent *)a2, *a3, (uint64_t *)&v158);
            uint64_t v27 = *(void *)&v158.f64[0];
            if (v156 == *(void *)&v158.f64[0])
            {
              if (v156) {
                (*(void (**)(void))(*(void *)v156 + 24))();
              }
            }
            else
            {
              if (v156)
              {
                (*(void (**)(void))(*(void *)v156 + 24))();
                uint64_t v27 = *(void *)&v158.f64[0];
              }
              CMTimeValue v156 = v27;
            }
            CMTime v147 = *a4;
            OZFxFilter::getBoundingRectangles(a1, (LiAgent *)a2, (const OZRenderParams *)a5, &v147, (uint64_t)&v158);
            v152[2] = v160;
            long long v153 = v161;
            long long v154 = v162;
            long long v155 = v163;
            v152[0] = v158;
            v152[1] = v159;
          }
        }
        if (*(unsigned char *)(a2 + 44)) {
          OZFxPlug_GetScale((const LiAgent *)a2, (double *)&v185 + 1, (double *)&v186);
        }
        float64x2_t v96 = a6;
        LiAgent::getRenderDevice((LiRenderParameters **)a2);
        uint64_t v146 = 0;
        memset(v145, 0, sizeof(v145));
        long long v29 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
        int v30 = LODWORD(v152[0].f64[1]);
        int v31 = HIDWORD(v152[0].f64[1]);
        uint64_t v32 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 304))(v32)) {
          int v33 = 32;
        }
        else {
          int v33 = 16;
        }
        CMTime v144 = *a4;
        OZFxPlug_CalculateImageInfo(v12, v29, v30, v31, v33, 1, (uint64_t)v145, &v144);
        if (OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v34))
        {
          int v36 = -(LODWORD(v152[0].f64[0]) + SLODWORD(v152[0].f64[1]) / 2);
          if (v152[0].f64[1] >= 0.0) {
            int v37 = HIDWORD(v152[0].f64[1]);
          }
          else {
            int v37 = HIDWORD(v152[0].f64[1]) + 1;
          }
          int v38 = -(HIDWORD(v152[0].f64[0]) + (v37 >> 1));
          v35.f64[0] = (double)v36;
          float64x2_t v35 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v164, v35, (double)v38, 0.0);
        }
        else
        {
          int v36 = 0;
          int v38 = 0;
        }
        (*((void (**)(id *, uint64_t, LiImageSource **, int *, uint64_t *, uint64_t *, float64x2_t))*a1 + 106))(a1, a2, a3, a5, &v174, &v164, v35);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v164, *(long long **)(a2 + 160), (uint64_t)&v143);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v143, (long long *)&v174, (uint64_t)&v158);
        CFStringRef v39 = FxMatrixFromPCMatrix((uint64_t)&v158);
        OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)v12);
        __int16 v142 = 0;
        id v40 = a1[49];
        v141[0] = v184;
        v141[1] = v185;
        v141[2] = v186;
        OZFxPlug_CallFrameSetup((uint64_t)a1, v40, v141, (uint64_t)v145, (unsigned char *)&v142 + 1, &v142);
        CMTime v143 = *a4;
        v116[0] = HIBYTE(v142);
        v106[0] = v142;
        OZFxPlugSharedBase::getBestRenderingBehavior((OZFxPlugSharedBase *)v12, (LiRenderParameters **)a2, v116, v106, &v143);
        HIBYTE(v14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v116[0];
        LOBYTE(v14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v106[0];
        CMTime v140 = *a4;
        if (OZFxPlugSharedBase::isPixelIndependent(v12, &v140))
        {
          if (!*a3) {
            throw_PCNullPointerException(1);
          }
          uint64_t v41 = (*(uint64_t (**)(LiImageSource *))(*(void *)*a3 + 32))(*a3);
          (*((void (**)(id *, uint64_t))*v12 + 28))(v12, v41);
        }
        else
        {
          LOBYTE(v143.value) = 0;
          if ((*((unsigned int (**)(id *))*v12 + 41))(v12))
          {
            id v42 = a1[49];
            v139[0] = v184;
            v139[1] = v185;
            v139[2] = v186;
            [v42 filteredEdges:&v143 withInfo:v139];
          }
          (*((void (**)(id *, void))*v12 + 28))(v12, LOBYTE(v143.value));
        }
        OZFxPlugSharedBase::getPluginColorDescription(v12, (const LiAgent *)a2, &space);
        ActualColorDescription = (const FxColorDescription *)LiAgent::getActualColorDescription((LiAgent *)a2);
        v137._pcColorDesc._colorSpaceRef._obuint64_t j = space._pcColorDesc._colorSpaceRef._obj;
        if (space._pcColorDesc._colorSpaceRef._obj) {
          PCCFRefTraits<CGColorSpace *>::retain(space._pcColorDesc._colorSpaceRef._obj);
        }
        *(void *)&v137._pcColorDesc._dynamicRange = *(void *)&space._pcColorDesc._dynamicRange;
        v137._pcColorDesc._toneMapMethod._gain = space._pcColorDesc._toneMapMethod._gain;
        v137._isPremultiplied = space._isPremultiplied;
        OZFxPlug_ConformToProcessingDescription(&v137, &v156, ActualColorDescription, &v143.value);
        CMTimeValue v44 = v143.value;
        if (v156 == v143.value)
        {
          if (v156) {
            (*(void (**)(void))(*(void *)v156 + 24))();
          }
        }
        else
        {
          if (v156)
          {
            (*(void (**)(void))(*(void *)v156 + 24))();
            CMTimeValue v44 = v143.value;
          }
          CMTimeValue v156 = v44;
          v143.CMTimeValue value = 0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&v137._pcColorDesc._colorSpaceRef._obj);
        uint64_t v45 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 304))(v45)) {
          int v46 = 32;
        }
        else {
          int v46 = 16;
        }
        int v136 = v46;
        v135 = 0;
        v134 = 0;
        uint64_t v133 = 0;
        uint64_t v47 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 304))(v47);
        int v49 = HIBYTE(v142);
        char v51 = OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v50);
        double v52 = (double)v36;
        double v53 = (double)v38;
        if (v48) {
          int v54 = 32;
        }
        else {
          int v54 = 16;
        }
        *(double *)&v143.CMTimeValue value = (double)v36;
        *(double *)&v143.timescale = (double)v38;
        HIBYTE(v95) = v51;
        LOBYTE(v95) = v49 != 0;
        double v55 = OZFxFilter::createInputFxImage((uint64_t)a1, (const LiAgent *)a2, &v134, (unsigned int *)&v136, (uint64_t)v145, (uint64_t)&v184, &v156, &v133, v152, v54, v95, &v143.value, (uint64_t)a5);
        [(FxImage *)v55 setPixelTransform:v39];
        if (v55)
        {
          uint64_t v56 = OZFxFilter::createOutputFxImage(a1, &v184, (uint64_t)v129, (LiRenderParameters **)a2, (uint64_t)v152, v136, HIBYTE(v142), (CMTime *)a5);
          [(FxImage *)v56 setPixelTransform:v39];
          ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)v128);
          long long v126 = *(_OWORD *)&a4->value;
          CMTimeEpoch v127 = a4->epoch;
          char v57 = (*((uint64_t (**)(id *, long long *))*v12 + 29))(v12, &v126);
          float64x2_t v65 = v97;
          if (HIBYTE(v142)) {
            char v66 = v57;
          }
          else {
            char v66 = 1;
          }
          if ((v66 & 1) == 0)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", v58, v59, v60, v61, v62, v63, v64, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
            pcAbortImpl();
          }
          int v67 = OZFxFilter::render((uint64_t)a1, v58, HIBYTE(v142) != 0, v60, (uint64_t)a5, v62, (uint64_t)v55, (uint64_t)v56, &v184);
          FxMatrixToPCMatrix((FxMatrix44 *)[(FxImage *)v56 pixelTransform], (uint64_t)&v143);
          unint64_t v68 = 0;
          BOOL v69 = 0;
          while (2)
          {
            for (uint64_t i = 0; i != 3; ++i)
            {
              if (vabdd_f64(*((double *)&v143.value + 4 * dword_1B83841B0[v68] + dword_1B83841B0[i]), v158.f64[4 * dword_1B83841B0[v68] + dword_1B83841B0[i]]) >= 0.0000001)
              {
                if (!v69)
                {
                  uint64_t v125 = 0x3FF0000000000000;
                  uint64_t v122 = 0x3FF0000000000000;
                  uint64_t v119 = 0x3FF0000000000000;
                  *(double *)long long v116 = 1.0;
                  long long v117 = 0u;
                  long long v118 = 0u;
                  long long v120 = 0u;
                  long long v121 = 0u;
                  long long v123 = 0u;
                  long long v124 = 0u;
                  uint64_t v115 = 0x3FF0000000000000;
                  uint64_t v112 = 0x3FF0000000000000;
                  uint64_t v109 = 0x3FF0000000000000;
                  *(void *)unint64_t v106 = 0x3FF0000000000000;
                  long long v107 = 0u;
                  long long v108 = 0u;
                  long long v110 = 0u;
                  long long v111 = 0u;
                  long long v113 = 0u;
                  long long v114 = 0u;
                  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v116, (double *)&v174, 0.0)
                    && PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v106, (double *)&v164, 0.0))
                  {
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v106, (long long *)&v143.value, (uint64_t)v104);
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v104, (long long *)v116, (uint64_t)v105);
                    LiAgent::setPixelTransform(a2, (uint64_t)v105);
                  }
                }
                goto LABEL_85;
              }
            }
            BOOL v69 = v68++ > 1;
            if (v68 != 3) {
              continue;
            }
            break;
          }
LABEL_85:
          long long v102 = *(_OWORD *)&a4->value;
          CMTimeEpoch v103 = a4->epoch;
          char v71 = (*((uint64_t (**)(id *, long long *))*v12 + 29))(v12, &v102);
          if (HIBYTE(v142)) {
            char v79 = v71;
          }
          else {
            char v79 = 1;
          }
          if ((v79 & 1) == 0)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", v72, v73, v74, v75, v76, v77, v78, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
            pcAbortImpl();
          }
          CMTime v101 = *a4;
          OZFxFilter::mix((uint64_t)a1, (const LiAgent *)a2, &v101, &v187, v67, (HGLegacyBlend **)v116, v55, v56);
          uint64_t v81 = *(void *)v116;
          if (v191[0] == *(void *)v116)
          {
            if (v191[0]) {
              (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
            }
          }
          else
          {
            if (v191[0])
            {
              (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
              uint64_t v81 = *(void *)v116;
            }
            v191[0] = v81;
          }
          if (OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v80))
          {
            int v86 = a5[123];
            *(double *)long long v116 = -v52;
            *(double *)&long long v117 = -v53;
            OZFxFilter::offsetNode(v191, (uint64_t *)v116, v86, v106);
            uint64_t v87 = *(void *)v106;
            if (v191[0] == *(void *)v106)
            {
              if (v191[0]) {
                (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
              }
            }
            else
            {
              if (v191[0])
              {
                (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
                uint64_t v87 = *(void *)v106;
              }
              v191[0] = v87;
            }
          }
          long long v88 = LiAgent::getActualColorDescription((LiAgent *)a2);
          long long v89 = *v88;
          v98[0] = v89;
          if (v89) {
            PCCFRefTraits<CGColorSpace *>::retain(v89);
          }
          uint64_t v90 = v88[1];
          int v99 = *((_DWORD *)v88 + 4);
          v98[1] = v90;
          char v100 = *((unsigned char *)v88 + 24);
          OZFxPlug_ConformFromProcessingDescription(v116, v191, &space, v98);
          uint64_t v91 = *(void *)v116;
          if (v191[0] == *(void *)v116)
          {
            if (v191[0]) {
              (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
            }
          }
          else
          {
            if (v191[0])
            {
              (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
              uint64_t v91 = *(void *)v116;
            }
            v191[0] = v91;
            *(double *)long long v116 = 0.0;
          }
          PCCFRef<CGColorSpace *>::~PCCFRef(v98);
          [v97 clearImageList];
          [a1[51] clearImageList];
          if ([(FxImage *)v55 imageType] == 1 && ([(FxImage *)v55 _ownsData] & 1) == 0)
          {
            uint64_t v92 = [(FxImage *)v55 dataPtr];
            if (v92) {
              MEMORY[0x1BA9BFBA0](v92, 0x1000C4077774924);
            }
          }
          if ([(FxImage *)v56 imageType] == 1 && ([(FxImage *)v56 _ownsData] & 1) == 0)
          {
            uint64_t v93 = [(FxImage *)v56 dataPtr];
            if (v93) {
              MEMORY[0x1BA9BFB70](v93, 0x1000C8077774924);
            }
          }

          ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)v128);
        }
        else
        {
          [a1[49] frameCleanup];
          uint64_t v82 = v156;
          if (v191[0] != v156)
          {
            if (v191[0])
            {
              (*(void (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
              uint64_t v82 = v156;
            }
            v191[0] = v82;
            if (v82) {
              (*(void (**)(uint64_t))(*(void *)v82 + 16))(v82);
            }
          }
          [v97 setIsRendering:0];
          long long v83 = LiAgent::getActualColorDescription((LiAgent *)a2);
          uint64_t v84 = *v83;
          v130[0] = v84;
          if (v84) {
            PCCFRefTraits<CGColorSpace *>::retain(v84);
          }
          long long v85 = v83[1];
          int v131 = *((_DWORD *)v83 + 4);
          v130[1] = v85;
          char v132 = *((unsigned char *)v83 + 24);
          OZFxPlug_ConformFromProcessingDescription(v96, v191, &space, v130);
          PCCFRef<CGColorSpace *>::~PCCFRef(v130);
          float64x2_t v65 = v97;
        }
        if (v133) {
          (*(void (**)(uint64_t))(*(void *)v133 + 24))(v133);
        }
        if (v135) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v135);
        }
        if (v55)
        {
          [a1[49] frameCleanup];
          [v65 setIsRendering:0];
          *float64x2_t v96 = (HGNode *)v191[0];
          v191[0] = 0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
      }
      else
      {
        *a6 = (HGNode *)v156;
        CMTimeValue v156 = 0;
      }
    }
    else
    {
      [v14 setIsRendering:0];
      CMTime v28 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v28);
      *a6 = v28;
    }
    if (v156) {
      (*(void (**)(CMTimeValue, __n128))(*(void *)v156 + 24))(v156, v22);
    }
  }
  else
  {
    [v14 setIsRendering:0];
    uint64_t v19 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v19);
    *a6 = v19;
  }
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)v188);
  if (v189 && v190) {
    PCMutex::unlock(v189);
  }
  uint64_t result = v191[0];
  if (v191[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v191[0] + 24))(v191[0]);
  }
  return result;
}

void sub_1B7D29AC0(void *a1)
{
  ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)&STACK[0x2B8]);
  if (STACK[0x330]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x330] + 24))(STACK[0x330]);
  }
  if (STACK[0x340]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x340]);
  }
  __cxa_begin_catch(a1);
  [*(id *)(v1 + 392) frameCleanup];
  __cxa_rethrow();
}

void sub_1B7D29DAC()
{
}

void sub_1B7D29DBC(_Unwind_Exception *a1)
{
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)(v1 - 144));
  PCLockSentry<PCMutex>::~PCLockSentry(v1 - 136);
  uint64_t v3 = *(void *)(v1 - 120);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1B7D29DC4()
{
}

FxImage *OZFxFilter::createInputFxImage(uint64_t a1, const LiAgent *a2, _anonymous_namespace_ **a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, float64x2_t *a9, int a10, __int16 a11, uint64_t *a12, uint64_t a13)
{
  *a4 = a10;
  long long v29 = *(_OWORD *)a13;
  uint64_t v30 = *(void *)(a13 + 16);
  uint64_t v16 = a1 + 368;
  int PluginColorSpace = OZFxPlugSharedBase::getPluginColorSpace((id *)(a1 + 368), a2);
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)(a1 + 368) + 232))(v16, &v29))
  {
    HeliumInputFxImage = (FxImage *)OZFxFilter::createHeliumInputFxImage(a1, (uint64_t)a2, a5, a7, v18, a8, (uint64_t)a9, a10, SHIBYTE(a11), a12, a13);
    double v20 = (void *)a6;
    if (!HeliumInputFxImage) {
      return HeliumInputFxImage;
    }
  }
  else
  {
    double v20 = (void *)a6;
    HeliumInputFxImage = (FxImage *)OZFxFilter::createRawInputFxImage(0, (LiRenderParameters **)a2, a3, a4, a5, a6, a7, PluginColorSpace, a8, a9, a11, a12, a13);
    if (!HeliumInputFxImage) {
      return HeliumInputFxImage;
    }
  }
  if (objc_opt_respondsToSelector()) {
    [HeliumInputFxImage setIsInputImage:1];
  }
  OZFxFilter::setInputImageDOD((void *)a1, v21, v22, (unsigned int *)a9, HeliumInputFxImage, (long long *)a13);
  OZFxFilter::finalizeImage((id *)a1, a2, HeliumInputFxImage, v20, (const OZRenderParams *)a13);
  return HeliumInputFxImage;
}

FxImage *OZFxFilter::createOutputFxImage(id *a1, void *a2, uint64_t a3, LiRenderParameters **this, uint64_t a5, int a6, int a7, CMTime *a8)
{
  LiAgent::getRenderDevice(this);
  uint64_t v15 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
  int v16 = *(_DWORD *)(a5 + 56);
  int v17 = *(_DWORD *)(a5 + 60);
  CMTime v34 = *a8;
  OZFxPlug_CalculateImageInfo(a1 + 46, v15, v16, v17, a6, a7, (uint64_t)v35, &v34);
  long long v18 = v35[3];
  *(_OWORD *)(a3 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v35[2];
  *(_OWORD *)(a3 + 48) = v18;
  *(void *)(a3 + 64) = v36;
  long long v19 = v35[1];
  *(_OWORD *)a3 = v35[0];
  *(_OWORD *)(a3 + 16) = v19;
  if (*(double *)(a3 + 64) == 0.0) {
    *(void *)(a3 + 64) = 0x3FF0000000000000;
  }
  long long v32 = *(_OWORD *)&a8->value;
  CMTimeEpoch epoch = a8->epoch;
  if ((*((unsigned int (**)(id *, long long *))a1[46] + 29))(a1 + 46, &v32))
  {
    double v20 = [FxHeliumImage alloc];
    long long v21 = *(_OWORD *)(a3 + 48);
    _OWORD v30[2] = *(_OWORD *)(a3 + 32);
    _OWORD v30[3] = v21;
    uint64_t v31 = *(void *)(a3 + 64);
    long long v22 = *(_OWORD *)(a3 + 16);
    v30[0] = *(_OWORD *)a3;
    v30[1] = v22;
    uint64_t v23 = [(FxHeliumImage *)v20 initWithInfo:v30];
  }
  else
  {
    uint64_t v23 = 0;
  }
  -[FxImage setBounds:](v23, "setBounds:", *(double *)(a5 + 64) * *(double *)(a3 + 64), *(double *)(a5 + 72), *(double *)(a3 + 64) * *(double *)(a5 + 80), *(double *)(a5 + 88));
  int v24 = *(_DWORD *)(a5 + 56);
  int v25 = *(_DWORD *)(a5 + 60);
  if (v24 >= 0) {
    int v26 = *(_DWORD *)(a5 + 56);
  }
  else {
    int v26 = v24 + 1;
  }
  if (v25 >= 0) {
    int v27 = *(_DWORD *)(a5 + 60);
  }
  else {
    int v27 = v25 + 1;
  }
  -[FxImage setDod:](v23, "setDod:", -(v26 >> 1) | ((unint64_t)-(v27 >> 1) << 32), (v24 - (v26 >> 1)) | ((unint64_t)(v25 - (v27 >> 1)) << 32));
  OZFxFilter::finalizeImage(a1, (const LiAgent *)this, v23, a2, (const OZRenderParams *)a8);
  return v23;
}

uint64_t OZFxFilter::createNewLithiumNode@<X0>(OZFxFilter *this@<X0>, const OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  a3->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(a3 + 1);
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t result = (*(uint64_t (**)(OZFxFilter *, long long *, void, uint64_t, uint64_t))(*(void *)this + 280))(this, &v7, 0, 1, 1);
  if (result)
  {
    CMTime v6 = *(CMTime *)a2;
    uint64_t result = OZFxFilter::needsToRender(this, &v6);
    if (result) {
      operator new();
    }
  }
  return result;
}

void sub_1B7D2A2C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10E1C40E36231BCLL);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

FxImage *OZFxFilter::finalizeImage(id *this, const LiAgent *a2, FxImage *a3, void *a4, const OZRenderParams *a5)
{
  double v10 = (OZChannelBase *)(this + 46);
  unint64_t PluginNCLC = OZFxPlugSharedBase::getPluginNCLC(this + 46, a2);
  int v22 = v11;
  [(FxImage *)a3 setNCLCValue:FxConvertPCNCLCCodeToFxNCLCValue(&PluginNCLC)];
  [(FxImage *)a3 setColorSpace:OZFxPlugSharedBase::getPluginColorSpace((id *)&v10->var0, a2)];
  OZFxPlugSharedBase::getPluginColorDescription((id *)&v10->var0, a2, &v20);
  [(FxImage *)a3 setDynamicRangeType:OZFxPlug_ConvertDynamicRangeType(&v20)];
  OZFxPlugSharedBase::SetImageColorPrimaries((OZFxPlugSharedBase *)v10, a3, a2);
  OZFxFilter::getRenderScale((OZFxFilter *)this, a2, a5, &v19);
  [(FxImage *)a3 setScaleX:v19.n128_f64[0]];
  [(FxImage *)a3 setScaleY:v19.n128_f64[1]];
  id v12 = this[3];
  if (v12)
  {
    if (v13)
    {
      id v14 = v13;
      id v15 = this[50];
      long long v25 = 0uLL;
      uint64_t v26 = 0;
      if (v15) {
        [v15 fxTimeToFigTime:*a4 withConversionData:0];
      }
      long long v23 = v25;
      uint64_t v24 = v26;
      (*(uint64_t (**)(void *, long long *, const OZRenderParams *))(*(void *)v14 + 2320))(v14, &v23, a5);
    }
  }
  -[FxImage setFieldOrder:](a3, "setFieldOrder:");
  [(FxImage *)a3 setField:(int)OZChannelBase::isObjectRef(v10)];
  [(FxImage *)a3 setPixelTransform:FxMatrixFromPCMatrix(*((void *)a2 + 20))];
  int v16 = *((_DWORD *)a5 + 175);
  if (v16 == 2) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = v16 == 1;
  }
  [(FxImage *)a3 setEyeType:v17];
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20._pcColorDesc._colorSpaceRef._obj);
  return a3;
}

void sub_1B7D2A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::setInputImageDOD(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5, long long *a6)
{
  unint64_t v9 = HGRectMake4i(*a4, a4[1], a4[2] + *a4, a4[3] + a4[1]);
  unint64_t v11 = v10;
  if (HGRectIsInfinite(v9, v10))
  {
    id v12 = (const void *)(*(uint64_t (**)(void *))(*a1 + 248))(a1);
    if (v12)
    {
      if (v13)
      {
        double v27 = 0.0;
        double v28 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v29 = _Q0;
        (*(void (**)(void *, double *, long long *))(*(void *)v13 + 1488))(v13, &v27, a6);
        unint64_t v9 = HGRectMake4i(vcvtmd_s64_f64(v27), vcvtmd_s64_f64(v28), vcvtpd_s64_f64(v27 + *(double *)&v29), vcvtpd_s64_f64(v28 + *((double *)&v29 + 1)));
        unint64_t v11 = v19;
      }
    }
  }
  long long v25 = *a6;
  uint64_t v26 = *((void *)a6 + 2);
  char v20 = (*(uint64_t (**)(void *, long long *))(a1[46] + 232))(a1 + 46, &v25);
  if (v20) {
    unsigned int v21 = v9;
  }
  else {
    unsigned int v21 = 0;
  }
  if (v20) {
    unint64_t v22 = v9 & 0xFFFFFFFF00000000;
  }
  else {
    unint64_t v22 = 0;
  }
  if (v20) {
    unint64_t v23 = v11;
  }
  else {
    unint64_t v23 = (v11 - (v9 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v11 - v9);
  }
  return objc_msgSend(a5, "setDod:", v22 | v21, v23);
}

void OZFxFilter::renderNode(int a1, LiRenderParameters **this, uint64_t *a3, int a4, unsigned int *a5, unsigned int a6, int a7, uint64_t a8, _anonymous_namespace_ **a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(this);
  long long v18 = (LiRenderParameters *)((char *)this[6] + 80);
  if (!a7)
  {
    *a10 = 1;
    *a11 = 32;
    *(void *)(a8 + 40) = 3;
    PGHelium::renderNodeToBitmap((uint64_t)HeliumRenderer, a3, a5, 16);
  }
  *a10 = 2;
  PGHelium::renderNodeToTexture(HeliumRenderer, a3, a5, a6, v18, 1, &v22);
  char v20 = v22;
  unint64_t v19 = v23;
  uint64_t v24 = v22;
  long long v25 = v23;
  if (v22)
  {
    PCImage::setIsPremultiplied((uint64_t)v22, 1);
    if ((a7 & 1) == 0)
    {
      PCDynamicCast<PCBitmap,PCImage>((uint64_t)&v24, &v22);
      PCBitmap::swizzleTo(v22, 0);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      char v20 = v24;
      unint64_t v19 = v25;
    }
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v21 = (std::__shared_weak_count *)a9[1];
    *a9 = v20;
    a9[1] = (_anonymous_namespace_ *)v19;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1B7D2A824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

FxHeliumImage *OZFxFilter::createHeliumInputFxImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8, char a9, uint64_t *a10, uint64_t a11)
{
  double v15 = *(double *)(a3 + 64);
  int32x2_t v16 = vmax_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x100000001);
  *(void *)&long long v17 = v16.u32[0];
  *((void *)&v17 + OZLinkBehavior::clearAll(this, 1) = v16.u32[1];
  long long v26 = v17;
  long long v29 = v17;
  uint64_t v30 = a8;
  long long v31 = xmmword_1B8384190;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  char v34 = 1;
  double v35 = v15;
  long long v18 = [[FxHeliumImage alloc] initWithInfo:&v29];
  [(FxImage *)v18 setPixelTransform:FxMatrixFromPCMatrix(*(void *)(a2 + 160))];
  uint64_t v19 = *a4;
  uint64_t v28 = v19;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    if (a9)
    {
      OZFxFilter::offsetNode(&v28, a10, *(_DWORD *)(a11 + 492), &v27);
      uint64_t v20 = v27;
      if (v28 == v27)
      {
        if (v28) {
          (*(void (**)(void))(*(void *)v28 + 24))();
        }
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(void *)v28 + 24))();
          uint64_t v20 = v27;
        }
        uint64_t v28 = v20;
      }
    }
    double v21 = *(double *)(a7 + 32);
    double v22 = *(double *)(a7 + 40);
    if (v21 < 1.0) {
      double v21 = 1.0;
    }
    if (v22 < 1.0) {
      double v22 = 1.0;
    }
    -[FxImage setBounds:](v18, "setBounds:", v15 * *(double *)(a7 + 16), *(double *)(a7 + 24), v15 * v21, v22, v26);
    uint64_t v23 = *a6;
    uint64_t v24 = v28;
    if (*a6 != v28)
    {
      if (v23)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 24))(*a6);
        uint64_t v24 = v28;
      }
      *a6 = v24;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      }
    }
    [(FxHeliumImage *)v18 setHeliumRef:&v28];
  }
  else
  {

    long long v18 = 0;
  }
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  return v18;
}

void sub_1B7D2AAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxFilter::offsetNode@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X3>, int a3@<W4>, void *a4@<X8>)
{
  if (*a1)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    v9[1] = 0;
    PCString v9[2] = 0;
    v9[0] = 0x3FF0000000000000;
    v9[3] = v4;
    long long v10 = xmmword_1B7E733E0;
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0x3FF0000000000000;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0x3FF0000000000000;
    if (a3) {
      float v6 = 0.70711;
    }
    else {
      float v6 = 1.0;
    }
    v8[0] = 1.0;
    v8[1] = v6;
    return LiHelium::createTransformNode((uint64_t)v9, a1, 1, v8, a4);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

FxBitmap *OZFxFilter::createRawInputFxImage(int a1, LiRenderParameters **this, _anonymous_namespace_ **a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t *a9, float64x2_t *a10, __int16 a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v19 = *a7;
  uint64_t v30 = v19;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
  }
  float64x2_t v29 = *a10;
  if (HIBYTE(a11))
  {
    OZFxFilter::offsetNode(&v30, a12, *(_DWORD *)(a13 + 492), &v28);
    uint64_t v19 = v28;
    if (v30 == v28)
    {
      if (v30)
      {
        (*(void (**)(void))(*(void *)v30 + 24))();
        uint64_t v19 = v30;
      }
      else
      {
        uint64_t v19 = 0;
      }
    }
    else
    {
      if (v30)
      {
        (*(void (**)(void))(*(void *)v30 + 24))();
        uint64_t v19 = v28;
      }
      uint64_t v30 = v19;
    }
    LODWORD(v29.f64[0]) = SLODWORD(v29.f64[1]) / -2;
    HIDWORD(v29.f64[0]) = SHIDWORD(v29.f64[1]) / -2;
  }
  uint64_t v20 = *a9;
  if (*a9 != v19)
  {
    if (v20)
    {
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
      uint64_t v19 = v30;
    }
    *a9 = v19;
    if (v19) {
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
    }
  }
  LODWORD(v28) = 0;
  OZFxFilter::renderNode(v20, this, &v30, a8, (unsigned int *)&v29, 0xDu, a11, a6, a3, &v28, a4);
  double v21 = *(double *)(a5 + 64);
  double v22 = *a3;
  int32x4_t v23 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(a10[1]), (int32x4_t)vcvtq_s64_f64(a10[2]));
  float64x2_t v26 = *a10;
  int32x4_t v27 = v23;
  uint64_t v24 = OZFxPlugImageConverter::convertImageWithROI((unsigned int *)v22, v28, v21, (uint64_t)&v27, (int *)&v26, *a4, 0);
  -[FxImage setBounds:](v24, "setBounds:", v21 * a10[1].f64[0], a10[1].f64[1], v21 * a10[2].f64[0], a10[2].f64[1]);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  return v24;
}

void sub_1B7D2AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  _Unwind_Resume(exception_object);
}

void OZFxFilter::makeRenderTemporalSource(id *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  if ([this[50] isRendering])
  {
    OZImageNode::makeRenderTemporalSource((OZImageNode *)this, a5);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v10, a2);
    (*((void (**)(id *, unsigned char *, const OZRenderGraphState *, uint64_t))*this + 21))(this, v10, a3, a4);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  }
}

void sub_1B7D2AFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZFxFilter::makeRenderImageSource(OZFxFilter *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *((void *)a2 + 2);
  if ((*(unsigned int (**)(void))(*((void *)this + 46) + 232))()) {
    operator new();
  }
  operator new();
}

void sub_1B7D2B138(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C404DF0D0E3);
  _Unwind_Resume(a1);
}

void OZFxFilter::getBlendOptions(id *this@<X0>, const OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  a3->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  float v6 = (uint64_t *)&a3[1];
  PCSharedCount::PCSharedCount(a3 + 1);
  if ((*((unsigned int (**)(char *))this[46] + 39))((char *)this + 368))
  {
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v7 = [this[50] figTimeToFxTime:&v12 withConversionData:0];
    double v11 = 0.0;
    id v8 = this[49];
    [this[50] _getFloatValue:&v11 fromParm:*((unsigned int *)this + 204) atTime:v7];
    if (v11 > 0.0)
    {
      OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)(this + 46));
      OZFxPlug_GetBlendOptions(v8, v7, &v9);
      a3->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v9.var0;
      PCSharedCount::PCSharedCount(&v14, &v10);
      PCSharedCount::operator=(v6, (uint64_t *)&v14);
      PCSharedCount::~PCSharedCount(&v14);
      PCSharedCount::~PCSharedCount(&v10);
    }
  }
}

void sub_1B7D2B2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  PCSharedCount::~PCSharedCount(&a16);
  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::isConnectionValid(OZFxFilter *this)
{
  return OZFxPlugSharedBase::isConnectionValid((OZFxFilter *)((char *)this + 368));
}

BOOL OZFxFilter::isPluginMissing(PCString *this, PCString *a2)
{
  return OZFxPlugSharedBase::isPluginMissing(this + 46, a2);
}

void *OZFxFilter::isPixelIndependent(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::isPixelIndependent(this + 46, &v3);
}

void *OZFxFilter::isPositionIndependent(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::isPositionIndependent(this + 46, &v3);
}

uint64_t OZFxFilter::isTimeIndependent(OZFxFilter *this)
{
  return OZFxPlugSharedBase::isTimeIndependent((OZFxFilter *)((char *)this + 368));
}

void *OZFxFilter::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::doesSupportLargeRenderScale(this + 46, &v3);
}

uint64_t OZFxFilter::openMedia(OZFxFilter *this)
{
  return OZFxPlugSharedBase::openMedia((OZFxFilter *)((char *)this + 368));
}

uint64_t OZFxFilter::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OZFxPlugSharedBase::scheduleTokens(a1 + 368, a2, a3, a4, a5);
}

uint64_t OZFxFilter::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::hintTokensWillImage(a1 + 368, a2, a3, a4);
}

uint64_t OZFxFilter::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::getTokensImage(a1 + 368, a2, a3, a4);
}

uint64_t OZFxFilter::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return OZFxPlugSharedBase::prerollBegin(a1 + 368, a2, a3, a4, a5);
}

uint64_t OZFxFilter::prerollEnd(OZFxFilter *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return OZFxPlugSharedBase::prerollEnd((OZFxFilter *)((char *)this + 368), a2, a3);
}

uint64_t OZFxFilter::setRate(OZFxFilter *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return OZFxPlugSharedBase::setRate((OZFxFilter *)((char *)this + 368), a2, a3, a4);
}

void OZFxFilter::pruneTokensAtTime(OZFxFilter *this, const CMTime *a2, const char *a3)
{
}

void OZFxFilter::pruneTokensExceptAtTime(OZFxFilter *this, const CMTime *a2, const char *a3)
{
}

void OZFxFilter::pruneAllTokens(OZFxFilter *this, const char *a2)
{
}

void *OZFxFilter::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this + 46, &v3);
}

uint64_t non-virtual thunk to'OZFxFilter::getSceneNode(OZFxFilter *this)
{
  return OZEffect::getSceneNode((OZFxFilter *)((char *)this - 48));
}

{
  return OZEffect::getSceneNode((OZFxFilter *)((char *)this - 368));
}

uint64_t non-virtual thunk to'OZFxFilter::getSceneNodeConst(OZFxFilter *this)
{
  return OZEffect::getSceneNodeConst((OZFxFilter *)((char *)this - 368));
}

void *non-virtual thunk to'OZFxFilter::isPixelIndependent(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::isPixelIndependent(this, &v3);
}

void *non-virtual thunk to'OZFxFilter::isPositionIndependent(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::isPositionIndependent(this, &v3);
}

void *non-virtual thunk to'OZFxFilter::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this, &v3);
}

void *non-virtual thunk to'OZFxFilter::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::doesSupportLargeRenderScale(this, &v3);
}

uint64_t OZFxPlugSharedBase::getPluginVersionAtCreation(OZFxPlugSharedBase *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t OZFxPlugSharedBase::setUsesDynamicParams(uint64_t this, char a2)
{
  *(unsigned char *)(this + 187) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::getUsesDynamicParams(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 187);
}

uint64_t OZFxPlugSharedBase::filteredEdges(OZFxPlugSharedBase *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 186);
  return v1 & 1;
}

uint64_t OZFxPlugSharedBase::setFilteredEdges(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t OZFxPlugSharedBase::isObserving(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t OZFxPlugSharedBase::setObserving(uint64_t this, char a2)
{
  *(unsigned char *)(this + 184) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::blendModeSet(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 185);
}

uint64_t OZFxPlugSharedBase::setBlendModeSet(uint64_t this, char a2)
{
  *(unsigned char *)(this + 185) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::hasOSC(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 188);
}

uint64_t OZFxPlugSharedBase::OSCIsPoint(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 189);
}

uint64_t OZFxPlugSharedBase::implementsBlendOptions(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 196);
}

uint64_t OZFxPlugSharedBase::implementsGetEdgeMode(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 197);
}

uint64_t OZFxPlugSharedBase::implementsFilteredEdges(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 198);
}

uint64_t std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,BOOL>>>::find<_opaque_pthread_t *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  id v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void OZGradientGenerator::OZGradientGenerator(OZGradientGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCString::PCString(&v7, (const char *)kGradientFxPlugUUID);
  OZFxGenerator::OZFxGenerator(this, a2, &v7, a4, 0, 0);
}

void sub_1B7D2B858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZGradientGenerator::OZGradientGenerator(OZFxGenerator *a1, const OZFxGenerator *a2, uint64_t a3)
{
}

void non-virtual thunk to'OZGradientGenerator::~OZGradientGenerator(OZGradientGenerator *this)
{
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 48));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 6528));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 19384));
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 19384));

  JUMPOUT(0x1BA9BFBA0);
}

void OZGradientGenerator::~OZGradientGenerator(OZGradientGenerator *this)
{
  OZFxGenerator::~OZFxGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZFxGenerator::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return OZFxPlugSharedBase::prerollBegin(a1 + 19384, a2, a3, a4, a5);
}

uint64_t OZFxGenerator::prerollEnd(OZFxGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return OZFxPlugSharedBase::prerollEnd((OZFxGenerator *)((char *)this + 19384), a2, a3);
}

uint64_t OZFxGenerator::setRate(OZFxGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return OZFxPlugSharedBase::setRate((OZFxGenerator *)((char *)this + 19384), a2, a3, a4);
}

uint64_t OZFxGenerator::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OZFxPlugSharedBase::scheduleTokens(a1 + 19384, a2, a3, a4, a5);
}

uint64_t OZFxGenerator::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::hintTokensWillImage(a1 + 19384, a2, a3, a4);
}

uint64_t OZFxGenerator::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::getTokensImage(a1 + 19384, a2, a3, a4);
}

void *OZFxGenerator::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this + 2423, &v3);
}

BOOL OZFxGenerator::isPluginMissing(PCString *this, PCString *a2)
{
  return OZFxPlugSharedBase::isPluginMissing(this + 2423, a2);
}

uint64_t non-virtual thunk to'OZFxGenerator::getSceneNode(OZFxGenerator *this)
{
  return (uint64_t)this - 19384;
}

uint64_t non-virtual thunk to'OZFxGenerator::getObjectID(OZFxGenerator *this)
{
  return *((unsigned int *)this - 4826);
}

void OZAddGamutClip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B7D2C4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (*v10) {
    (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
  }
  _Unwind_Resume(exception_object);
}

void PCUUIDFromNSUUID(NSUUID *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CMTime v3 = [(NSString *)[(NSUUID *)a1 UUIDString] componentsSeparatedByString:@"-"];
    __p = 0;
    long long v25 = 0;
    float64x2_t v26 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v4 = [(NSArray *)v3 countByEnumeratingWithState:&v20 objects:v27 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v21 != v5) {
            objc_enumerationMutation(v3);
          }
          int v7 = [*(id *)(*((void *)&v20 + 1) + 8 * i) integerValue];
          int v8 = v7;
          PCSharedCount v9 = v25;
          if (v25 >= v26)
          {
            double v11 = (char *)__p;
            uint64_t v12 = (v25 - (unsigned char *)__p) >> 2;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 62) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v14 = v26 - (unsigned char *)__p;
            if ((v26 - (unsigned char *)__p) >> 1 > v13) {
              unint64_t v13 = v14 >> 1;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15)
            {
              long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v26, v15);
              double v11 = (char *)__p;
              PCSharedCount v9 = v25;
            }
            else
            {
              long long v16 = 0;
            }
            long long v17 = &v16[4 * v12];
            *(_DWORD *)long long v17 = v8;
            unint64_t v10 = v17 + 4;
            while (v9 != v11)
            {
              int v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - OZLinkBehavior::clearAll(this, 1) = v18;
              v17 -= 4;
            }
            __p = v17;
            long long v25 = v10;
            float64x2_t v26 = &v16[4 * v15];
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_DWORD *)long long v25 = v7;
            unint64_t v10 = v9 + 4;
          }
          long long v25 = v10;
        }
        uint64_t v4 = [(NSArray *)v3 countByEnumeratingWithState:&v20 objects:v27 count:16];
      }
      while (v4);
    }
    uint64_t v19 = (char *)__p;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    long long v25 = v19;
    operator delete(v19);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

void sub_1B7D2C790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MakeRenderCamera(OZScene *a1, const CMTime *a2)
{
  CMTime v3 = a1;
  int v2 = 0;
  PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>();
}

void sub_1B7D2C87C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t OZXEnableObject(void *a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  CMTime v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  uint64_t Object = (uint64_t *)OZScene::getObject(v3, a2);
  if (!Object) {
    return 11;
  }
  uint64_t v6 = *Object;
  if (a3) {
    int v7 = (void (**)(void))(v6 + 32);
  }
  else {
    int v7 = (void (**)(void))(v6 + 40);
  }
  (*v7)();
  return 0;
}

uint64_t OZXHitCheck(void *a1, CGPoint a2, const CMTime *a3, unsigned int *a4)
{
  *a4 = 0;
  if (a1)
  {
    if (*(void *)a1)
    {
      uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
      if (v4)
      {
        CMTime v7 = *a3;
        OZRenderState::OZRenderState(&v6);
        v6.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v7;
        v6.var20 = 0;
        v6.var25 = 0;
        v6.var8 = 0;
        MakeRenderCamera(v4, &v7);
      }
    }
  }
  return 7;
}

void sub_1B7D2CD70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,PCSharedCount a52)
{
}

uint64_t OZXSetMatteInputMode(void *a1, NSNumber *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  if (a2) {
    *(_DWORD *)(v2 + 144) = [(NSNumber *)a2 integerValue];
  }
  else {
    *(_DWORD *)(v2 + 144) = 0;
  }
  return 11;
}

void sub_1B7D2CE4C(void *a1)
{
}

uint64_t OZXForceSetPlaneAnchorUUID(void *a1, NSString *a2, NSUUID *a3)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  OZScene::begin_t<OZARPlaneAnchorElement,false,true>(*(uint64_t **)(*(void *)a1 + 24), (uint64_t)v18);
  uint64_t v6 = *(void *)(v3 + 1208);
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v12 = v3 + 1200;
  uint64_t v13 = v6;
  uint64_t v14 = v3 + 1200;
  char v15 = 0;
  while (v18[0] != v12)
  {
    if (v18[0] == v18[2] || (CMTime v7 = *(const void **)(v18[0] + 16)) == 0) {
      int v8 = 0;
    }
    else {
    Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v8 + 16));
    }
    if ([(__CFString *)PCString::ns_str(Name) isEqualToString:a2])
    {
      PCUUIDFromNSUUID(a3, (uint64_t)&v11);
      *(_OWORD *)(v8 + 24408) = v11;
      break;
    }
    OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(v18);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  return 11;
}

void sub_1B7D2CFC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7D2CFA0);
}

uint64_t *OZScene::begin_t<OZARPlaneAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7D2D0A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXClearARAnchors(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(a2);
        }
        PCUUIDFromNSUUID((NSUUID *)[*(id *)(*((void *)&v15 + 1) + 8 * i) identifier], (uint64_t)&v14);
        OZScene::begin_t<OZARAnchorElement,false,true>(v2, (uint64_t)v12);
        memset(v10, 0, sizeof(v10));
        int v11 = 1065353216;
        int32x4_t v9 = v14;
        while ((uint64_t *)v12[0] != v2 + 150)
        {
          if (v12[0] == v12[2])
          {
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v6 = *(char **)(v12[0] + 16);
            if (v6) {
          }
            }
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v6 + 24408), v9)))) & 1) == 0)
          {
            *((void *)v6 + 305OZLinkBehavior::clearAll(this, 1) = 0;
            *((void *)v6 + 305OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
            (*(void (**)(void))(*(void *)(*((void *)v6 + 120) + 16) + 40))();
          }
          OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++(v12);
        }
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
      }
      uint64_t v3 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
  return 11;
}

void sub_1B7D2D3AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B7D2D364);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *OZScene::begin_t<OZARAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7D2D4A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXApplyARFrame(uint64_t *a1, ARFrame *a2, double a3, double a4, const OZARFrameInfo *a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 7;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 7;
  }
  uint64_t v6 = *(OZScene **)(v5 + 24);
  if (!v6) {
    return 7;
  }
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders(*(void *)(v5 + 24), 1);
  int v11 = [(ARFrame *)a2 camera];
  uint64_t v12 = v11;
  if (v11)
  {
    int v13 = *((_DWORD *)a5 + 30) - 1;
    if (v13 > 2) {
      double v14 = 282.743339;
    }
    else {
      double v14 = dbl_1B8384208[v13];
    }
    [(ARCamera *)v11 intrinsics];
    uint64_t v16 = 0;
    float v17 = v14 / 180.0;
    double v18 = v17;
    v68[0] = v19;
    v68[1] = v20;
    v68[2] = v21;
    long long v22 = v66;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
        *(double *)&v22[8 * i] = *(float *)((unint64_t)&v68[i] & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3)));
      ++v16;
      v22 += 24;
    }
    while (v16 != 3);
    int v24 = *((_DWORD *)v6 + 86);
    int v25 = *((_DWORD *)v6 + 87);
    [(ARCamera *)v12 imageResolution];
    uint64_t v65 = 0x3FF0000000000000;
    uint64_t v62 = 0x3FF0000000000000;
    uint64_t v59 = 0x3FF0000000000000;
    uint64_t v56 = 0x3FF0000000000000;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    PCMatrix44Tmpl<double>::setPerspectiveForRotatedViewportWithIntrinsics((uint64_t)&v56, (uint64_t)v66, v18, (double)v24, (double)v25, v26, v27, a3, a4);
    uint64_t v55 = 0x3FF0000000000000;
    uint64_t v52 = 0x3FF0000000000000;
    uint64_t v49 = 0x3FF0000000000000;
    uint64_t v46 = 0x3FF0000000000000;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    PCMatrix44Tmpl<double>::leftRotate((double *)&v46, 2, v18);
    [(ARCamera *)v12 transform];
    uint64_t v28 = 0;
    v67[0] = v29;
    v67[1] = v30;
    long long v31 = (double *)v68;
    v67[2] = v32;
    v67[3] = v33;
    while (1)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v31[j] = *(float *)((unint64_t)&v67[j] & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
      ++v28;
      v31 += 4;
      if (v28 == 4)
      {
        PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)v68);
        *(double *)v35.i64 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v56);
        v45.columns[0] = v35;
        v45.columns[1] = v36;
        v45.columns[2] = v37;
        v45.columns[3] = v38;
        *(double *)v39.i64 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v46);
        v44.columns[0] = v39;
        v44.columns[1] = v40;
        v44.columns[2] = v41;
        v44.columns[3] = v42;
        double v43 = 1.0;
        setUpCamera(v6, &v45, &v44, (const simd_float4x4 *)((char *)a5 + 32), a3, a4, &v43);
      }
    }
  }
  return 1;
}

void PCMatrix44Tmpl<double>::setPerspectiveForRotatedViewportWithIntrinsics(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  long long v14 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  _OWORD v16[2] = *(_OWORD *)(a2 + 32);
  void v16[3] = v15;
  uint64_t v17 = *(void *)(a2 + 64);
  PCMatrix33Tmpl<double>::adjustIntrinsicsForOrientationAndViewport((double *)v16, a3, a4, a5, a6, a7);
  PCMatrix44Tmpl<double>::setPerspectiveForViewportWithIntrinsics(a1, (double *)v16, a4, a5, a8, a9);
}

void setUpCamera(OZScene *a1, const simd_float4x4 *a2, const simd_float4x4 *a3, const simd_float4x4 *a4, double a5, double a6, double *a7)
{
  int v11 = (CMTime *)MEMORY[0x1E4F1FA48];
  unsigned int ActiveCamera = OZScene::getActiveCamera(a1, MEMORY[0x1E4F1FA48]);
  Node = OZScene::getNode(a1, ActiveCamera);
  if (!Node
  {
    long long v15 = (OZChannelBase *)PCString::PCString(v19, "Motion Camera");
    OZChannelBase::getNextUniqueID(v15);
    v20[0] = xmmword_1B837FEA0;
    uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v20);
    PCString::~PCString(v19);
    (*(void (**)(OZSceneNode *, char *, void))(*(void *)SceneNode + 1136))(SceneNode, (char *)a1 + 1352, 0);
    OZScene::addRootNode(a1, SceneNode);
  }
  (*(void (**)(void *, CMTime *, void, double))(*((void *)SceneNode + 819) + 712))((void *)SceneNode + 819, v11, 0, 0.0);
  (*(void (**)(double))(*((void *)SceneNode + 870) + 712))(a5);
  (*(void (**)(double))(*((void *)SceneNode + 889) + 712))(a6);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 169) + 96))((void *)SceneNode + 169, 0, 1);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 188) + 96))((void *)SceneNode + 188, 0, 1);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 244) + 96))((void *)SceneNode + 244, 0, 1);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 280) + 96))((void *)SceneNode + 280, 0, 1);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 299) + 96))((void *)SceneNode + 299, 0, 1);
  (*(void (**)(void *, void, uint64_t))(*((void *)SceneNode + 318) + 96))((void *)SceneNode + 318, 0, 1);
  long double v16 = atan(1.0 / a2->columns[0].f32[0]);
  v17.n128_f64[0] = (v16 + v16) * 180.0 / 3.14159265;
  (*(void (**)(__n128))(*((void *)SceneNode + 851) + 712))(v17);
  CMTime v18 = *v11;
  OZCamera::cameraAtTime(SceneNode, &v18);
}

void sub_1B7D2F31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
  PCSharedCount::~PCSharedCount(v19 + 1);
  _Unwind_Resume(a1);
}

uint64_t *SetUpEnvironmentMeshNode(uint64_t *result, SCNNode *a2, float a3)
{
  if (a2)
  {
    uint64_t v5 = result;
    OZScene::begin_t<OZEnvironmentMeshSceneElement,false,true>(result, (uint64_t)v9);
    memset(v7, 0, sizeof(v7));
    int v8 = 1065353216;
    while ((uint64_t *)v9[0] != v5 + 150)
    {
      if (v9[0] == v9[2])
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = *(void **)(v9[0] + 16);
        if (v6) {
      }
        }
      OZEnvironmentMeshSceneElement::setMeshNode((OZEnvironmentMeshSceneElement *)v6, a2, a3);
      OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(v9);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
    return (uint64_t *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v10);
  }
  return result;
}

void sub_1B7D2F468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZXApplyARFrameInfo(uint64_t *a1, const simd_float4x4 *a2, const simd_float4x4 *a3, double a4, double a5, const OZARFrameInfo *a6)
{
  v14[98] = *(double *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      CMTime v7 = *(OZScene **)(v6 + 24);
      if (v7)
      {
        OZScene::setApplyMotionEffectScaleTo3DObjectRenders(*(void *)(v6 + 24), 1);
        v14[0] = 1.0;
        setUpCamera(v7, a2, a3, (const simd_float4x4 *)((char *)a6 + 32), a4, a5, v14);
      }
    }
  }
  return 7;
}

void sub_1B7D2FB00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&STACK[0x220]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x248], (void *)STACK[0x250]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B7D2FAB8);
  }
  _Unwind_Resume(a1);
}

uint64_t OZXSetSceneSettings(OZScene *a1, NSDictionary *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = 11;
  unsigned int v32 = 11;
  if (a1)
  {
    uint64_t v5 = *(OZNotificationManager **)(*((void *)a1 + 198) + 168);
    if (v5) {
      OZNotificationManager::processNotifications(v5);
    }
    uint64_t v6 = *((void *)a1 + 108);
    if (v6)
    {
      int v24 = (OZDocument **)a1;
      CMTime v7 = *(OZChannelBase ***)v6;
      if (*(void *)v6 != *(void *)(v6 + 8))
      {
        uint64_t v25 = v6;
        do
        {
          int v8 = *v7;
          if (*v7) {
          else
          }
            int32x4_t v9 = 0;
          double v26 = v7;
          BOOL v10 = OZChannelBase::testFlag(v8, 2);
          if (v9) {
            char v11 = v10;
          }
          else {
            char v11 = 1;
          }
          if ((v11 & 1) == 0)
          {
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            NSUInteger v12 = [(NSDictionary *)a2 countByEnumeratingWithState:&v28 objects:v33 count:16];
            if (v12)
            {
              uint64_t v13 = *(void *)v29;
              do
              {
                uint64_t v14 = 0;
                do
                {
                  if (*(void *)v29 != v13) {
                    objc_enumerationMutation(a2);
                  }
                  CFStringRef v15 = *(const __CFString **)(*((void *)&v28 + 1) + 8 * v14);
                  v27.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
                  PCString::set(&v27, v15);
                  if (!PCString::compare(&v9->var4, &v27))
                  {
                    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v24 + 90), v9);
                    __n128 v17 = TargetChannelForProxy;
                    if (TargetChannelForProxy)
                    {
                      if (TargetChannelForProxy != v8)
                      {
                        OZXSetValueForChannel(TargetChannelForProxy, (uint64_t)v15, a2, &v32);
                        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v17);
                        if (ObjectManipulator)
                        {
                          if (v19)
                          {
                            long long v20 = v19;
                            if (*((OZChannelBase **)v19 + 136) == v17)
                            {
                              uint64_t CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)v19);
                              if (CurrentSnapshot) {
                                OZRigWidget::setActiveSnapshot(v20, *(_DWORD *)(CurrentSnapshot + 32), 1);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  PCString::~PCString(&v27);
                  ++v14;
                }
                while (v12 != v14);
                NSUInteger v22 = [(NSDictionary *)a2 countByEnumeratingWithState:&v28 objects:v33 count:16];
                NSUInteger v12 = v22;
              }
              while (v22);
            }
          }
          CMTime v7 = v26 + 1;
        }
        while (v26 + 1 != *(OZChannelBase ***)(v25 + 8));
      }
      OZDocument::postNotification(v24[198], 12);
      long long v23 = (OZNotificationManager *)*((void *)v24[198] + 21);
      if (v23) {
        OZNotificationManager::processNotifications(v23);
      }
      OZScene::dirty((OZScene *)v24);
    }
    return v32;
  }
  return result;
}

void sub_1B7D2FE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B7D2FE38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZXSetEnvironmentMap(void *a1, CGImage *a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v2 = *(OZScene **)(*(void *)a1 + 24);
  if (!v2) {
    return 7;
  }
  OZScene::setCustomEnvironmentMap(v2, a2);
  return 11;
}

void sub_1B7D2FF10(void *a1)
{
}

uint64_t OZXResetScene(void *a1)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    return 7;
  }
  OZScene::begin_t<OZ3DEngineSceneElement,false,true>(*(uint64_t **)(*(void *)a1 + 24), (uint64_t)v15);
  uint64_t v2 = *(void *)(v1 + 1208);
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  uint64_t v9 = v1 + 1200;
  uint64_t v10 = v2;
  uint64_t v11 = v1 + 1200;
  char v12 = 0;
  for (uint64_t i = v15[0]; v15[0] != v9; uint64_t i = v15[0])
  {
    if (i != v15[2])
    {
      uint64_t v4 = *(const void **)(i + 16);
      if (v4)
      {
        if (v5) {
          OZ3DEngineSceneElement::resetLastActiveState(v5);
        }
      }
    }
    OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t)v15, (uint64_t)v7);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  return 11;
}

void sub_1B7D30068(void *a1)
{
}

uint64_t *OZScene::begin_t<OZARFaceAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7D30144(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    uint64_t v13 = v4;
    int v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    uint64_t v13 = v4;
    int v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  CMTime v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      int v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        char v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

char *std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>(uint64_t **a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v5 = std::__tree<PCUUID>::__find_equal<PCUUID>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    CMTime v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<PCUUID>::__find_equal<PCUUID>(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    unsigned int v8 = a3[2];
    unsigned int v9 = a3[3];
    while (1)
    {
      uint64_t v10 = v4;
      unsigned int v11 = *((_DWORD *)v4 + 7);
      if (v6 != v11) {
        break;
      }
      unsigned int v12 = *((_DWORD *)v10 + 8);
      if (v7 == v12)
      {
        unsigned int v13 = *((_DWORD *)v10 + 9);
        BOOL v14 = v8 >= v13;
        if (v8 == v13) {
          BOOL v14 = v9 >= *((_DWORD *)v10 + 10);
        }
        if (!v14) {
          goto LABEL_18;
        }
        unsigned int v15 = *((_DWORD *)v10 + 9);
        BOOL v16 = v15 >= v8;
        if (v15 != v8) {
          goto LABEL_14;
        }
        if (*((_DWORD *)v10 + 10) >= v9) {
          goto LABEL_23;
        }
LABEL_15:
        uint64_t result = v10 + 1;
        uint64_t v4 = (uint64_t *)v10[1];
        if (!v4) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v7 >= v12)
        {
          if (v12 >= v7) {
            goto LABEL_23;
          }
          goto LABEL_15;
        }
LABEL_18:
        uint64_t v4 = (uint64_t *)*v10;
        uint64_t result = v10;
        if (!*v10) {
          goto LABEL_23;
        }
      }
    }
    if (v6 >= v11)
    {
      BOOL v16 = v11 >= v6;
LABEL_14:
      if (v16) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  uint64_t v10 = result;
LABEL_23:
  *a2 = v10;
  return result;
}

_DWORD *std::__tree<PCUUID>::find<PCUUID>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 8);
  uint64_t result = std::__tree<PCUUID>::__lower_bound<PCUUID>(a1, a2, *(_DWORD **)(a1 + 8), (_DWORD *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = result[7];
  BOOL v6 = *a2 >= v5;
  if (*a2 == v5)
  {
    unsigned int v7 = a2[1];
    unsigned int v8 = result[8];
    BOOL v6 = v7 >= v8;
    if (v7 == v8)
    {
      unsigned int v9 = a2[2];
      unsigned int v10 = result[9];
      BOOL v6 = v9 >= v10;
      if (v9 == v10) {
        BOOL v6 = a2[3] >= result[10];
      }
    }
  }
  if (!v6) {
    return v3;
  }
  return result;
}

_DWORD *std::__tree<PCUUID>::__lower_bound<PCUUID>(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    unsigned int v7 = a2[2];
    do
    {
      unsigned int v8 = a3[7];
      BOOL v9 = v8 >= v5;
      if (v8 == v5)
      {
        unsigned int v10 = a3[8];
        BOOL v9 = v10 >= v6;
        if (v10 == v6)
        {
          unsigned int v11 = a3[9];
          BOOL v9 = v11 >= v7;
          if (v11 == v7) {
            BOOL v9 = a3[10] >= a2[3];
          }
        }
      }
      int v12 = !v9;
      BOOL v13 = v12 == 0;
      if (v12) {
        BOOL v14 = a3 + 2;
      }
      else {
        BOOL v14 = a3;
      }
      if (v13) {
        uint64_t result = a3;
      }
      a3 = (_DWORD *)*v14;
    }
    while (*v14);
  }
  return result;
}

uint64_t *OZScene::begin_t<OZEnvironmentMeshSceneElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7D307E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZARPersonAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7D308A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

double PCMatrix33Tmpl<double>::adjustIntrinsicsForOrientationAndViewport(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v7 = a5;
  double i = a2;
  double v12 = a6 - (a1[5] + 0.5);
  a1[2] = a1[2] + 0.5;
  a1[5] = v12;
  PCMatrix33Tmpl<double>::adjustIntrinsicsByRotating(a1, a2, a5, a6);
  if (i < 0.0 || i >= 6.28318531)
  {
    for (double i = fmod(i, 6.28318531); i < 0.0; double i = i + 6.28318531)
      ;
  }
  if (fabs(i + -1.57079633) >= 0.785398163 && fabs(i + -4.71238898) >= 0.785398163)
  {
    double v13 = v7;
    double v7 = a6;
  }
  else
  {
    double v13 = a6;
  }

  return PCMatrix33Tmpl<double>::adjustIntrinsicsForViewport(a1, a3, a4, v13, v7);
}

double PCMatrix44Tmpl<double>::setPerspectiveForViewportWithIntrinsics(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = 1.0 - (a2[2] + a2[2]) / a3;
  double v7 = 1.0 - (a2[5] + a2[5]) / a4;
  double v8 = (a2[4] + a2[4]) / a4;
  *(double *)a1 = (*a2 + *a2) / a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  double result = 0.0;
  *(double *)(a1 + 16) = v6;
  *(double *)(a1 + 40) = v8;
  *(double *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(double *)(a1 + 80) = a6 / (a5 - a6);
  *(double *)(a1 + 88) = a5 * a6 / (a5 - a6);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E7C890;
  return result;
}

void PCMatrix33Tmpl<double>::adjustIntrinsicsByRotating(double *a1, double i, double a3, double a4)
{
  if (i < 0.0 || i >= 6.28318531)
  {
    for (double i = fmod(i, 6.28318531); i < 0.0; double i = i + 6.28318531)
      ;
  }
  if (fabs(i) >= 0.785398163)
  {
    double v7 = a1[2];
    double v8 = *a1;
    uint64_t v10 = *((void *)a1 + 4);
    double v9 = a1[5];
    if (fabs(i + -1.57079633) >= 0.785398163)
    {
      if (fabs(i + -3.14159265) >= 0.785398163)
      {
        if (fabs(i + -4.71238898) >= 0.785398163) {
          return;
        }
        *(void *)a1 = v10;
        a1[4] = v8;
        double v9 = a4 - v9;
      }
      else
      {
        double v11 = a3 - v7;
        double v7 = a4 - v9;
        double v9 = v11;
      }
    }
    else
    {
      *(void *)a1 = v10;
      a1[4] = v8;
      double v7 = a3 - v7;
    }
    a1[2] = v9;
    a1[5] = v7;
  }
}

double PCMatrix33Tmpl<double>::adjustIntrinsicsForViewport(double *a1, double result, double a3, double a4, double a5)
{
  if (vabdd_f64(a4, result) >= 0.0000001 || vabdd_f64(a5, a3) >= 0.0000001)
  {
    double v5 = a1[2];
    double v6 = a1[4];
    double v7 = a1[5];
    BOOL v8 = result / a3 < a4 / a5;
    double v9 = result / a4;
    double v10 = result / a4 * v5;
    double v11 = result / a4 * v7 + (result / a4 * a5 - a3) * -0.5;
    double v12 = a3 / a5;
    double v13 = v12 * v5 + (v12 * a4 - result) * -0.5;
    if (v8)
    {
      double v14 = v12 * v7;
    }
    else
    {
      double v12 = v9;
      double v14 = v11;
    }
    if (!v8) {
      double v13 = v10;
    }
    *a1 = *a1 * v12;
    a1[2] = v13;
    double result = v6 * v12;
    a1[4] = v6 * v12;
    a1[5] = v14;
  }
  return result;
}

void sub_1B7D30D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, OZLocking *a13)
{
}

void sub_1B7D30F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, OZLocking *a13)
{
}

uint64_t sub_1B7D31024()
{
  return 0;
}

void sub_1B7D311B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D312B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot::OZChannelMaterialRoot(OZChannelMaterialRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelMaterialRoot_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F116DE88;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116E220;
  *((void *)this + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 20OZLinkBehavior::clearAll(this, 1) = 0;
}

uint64_t OZChannelMaterialRoot_Factory::getInstance(OZChannelMaterialRoot_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelMaterialRoot_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelMaterialRoot_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialRoot_Factory::_instance;
}

void OZChannelMaterialRoot::OZChannelMaterialRoot(OZChannelMaterialRoot *this, const OZChannelMaterialRoot *a2, OZChannelFolder *a3)
{
  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F116DE88;
  *(void *)(v4 + 16) = &unk_1F116E220;
  *(void *)(v4 + 256) = 0;
  *(unsigned char *)(v4 + 20OZLinkBehavior::clearAll(this, 1) = *((unsigned char *)a2 + 201);
}

void non-virtual thunk to'OZChannelMaterialRoot::~OZChannelMaterialRoot(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelMaterialRoot::~OZChannelMaterialRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelMaterialRoot::clone(OZChannelMaterialRoot *this)
{
}

void sub_1B7D316D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelMaterialRoot::compare(OZChannelMaterialRoot *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result) {
    return (const OZChannelBase *)((__CFString *)*((void *)this + 32) == result[2].var4.var0
  }
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

void OZChannelMaterialRoot::willModifyChannel(OZChannelMaterialRoot *this, OZChannelBase *a2, int a3)
{
  uint64_t v4 = *((void *)this + 32);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 304))(v4) & 1) == 0)
  {
    OZChannelObjectRoot::willModifyChannel(this, a2, a3);
  }
}

OZMaterialBase *OZChannelMaterialRoot::channelValueWillBeSet(OZMaterialBase **this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZChannelObjectRootBase::channelValueWillBeSet((OZChannelObjectRootBase *)this, a2, a3, a4);
  double result = this[32];
  if (result)
  {
    (*(void (**)(OZMaterialBase *, OZChannel *, const CMTime *, double))(*(void *)result + 240))(result, a2, a3, a4);
    double result = this[32];
    if ((OZChannel *)((char *)result + 720) != a2 && (OZChannel *)((char *)result + 1128) != a2)
    {
      double result = (OZMaterialBase *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)result + 216))(result);
      if (result != (OZMaterialBase *)a2)
      {
        double v10 = this[32];
        return (OZMaterialBase *)OZMaterialBase::setIsEdited(v10, 1u, 0);
      }
    }
  }
  return result;
}

uint64_t OZChannelMaterialRoot::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelObjectRoot::parseEnd(this, a2);
  OZChannelBase::resetFlag((OZChannelBase *)this, 32, 0);
  return v3;
}

uint64_t non-virtual thunk to'OZChannelMaterialRoot::parseEnd(OZChannelMaterialRoot *this, PCSerializerReadStream *a2)
{
  char v2 = (OZChannelBase *)((char *)this - 16);
  uint64_t v3 = OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  OZChannelBase::resetFlag(v2, 32, 0);
  return v3;
}

BOOL OZChannelMaterialRoot::isObjectSelected(OZChannelBase *this)
{
  uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 120))(v5);
    double v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 640))(v6);
    return OZChannelBase::testFlag(v7, 1);
  }
  else
  {
    return OZChannelObjectRoot::isObjectSelected(this);
  }
}

void std::__call_once_param<std::tuple<OZChannelMaterialRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D31B1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot_Factory::OZChannelMaterialRoot_Factory(OZChannelMaterialRoot_Factory *this)
{
  long long v3 = xmmword_1B83817E0;
  long long v4 = xmmword_1B8384240;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F116E290;
  *((void *)this + 16) = &unk_1F116E360;
}

void sub_1B7D31BEC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot_Factory::create(OZChannelMaterialRoot_Factory *this, const PCString *a2)
{
}

void sub_1B7D31CA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot_Factory::createCopy(OZChannelMaterialRoot_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D31DA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot_Factory::createChannelCopy(OZChannelMaterialRoot_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D31EAC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

FxBitmap *OZFxPlugImageConverter::convertImageWithROI(unsigned int *a1, int a2, double a3, uint64_t a4, int *a5, unsigned int a6, int a7)
{
  if (!a1) {
    return 0;
  }
  unint64_t v12 = a5[3];
  int v47 = a5[2];
  uint64_t v50 = a6;
  uint64_t v51 = a1[10];
  char v49 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 48))(a1);
  unsigned int v15 = (HGGLBlendingInfo **)v14;
  if (a2 == 1)
  {
    if (!v13)
    {
      (*(void (**)(PGTexture *))(*(void *)v14 + 16))(v14);
      (*((void (**)(HGGLBlendingInfo **))*v15 + 3))(v15);
      operator new[]();
    }
    unsigned int BytesPerRow = PCBitmap::getBytesPerRow(v13);
    unsigned int v17 = a1[9];
    if ((a7 & 1) != 0 || v17 != a6)
    {
      v64[0] = v47;
      v64[1] = v12;
      v64[2] = v50;
      v64[3] = v51;
      long long v65 = xmmword_1B7E7A9D0;
      uint64_t v66 = 2;
      char v67 = v49;
      double v68 = a3;
      long long v31 = [[FxBitmap alloc] initWithInfo:v64];
      NSUInteger v22 = v31;
      if (v17 != a6)
      {
        LODWORD(v58.super.super.isa) = 50462976;
        OZFxPlugImageConverter::convertBitmapDepthWithChannelMap((OZFxPlugImageConverter *)v13, (PCBitmap *)v31, &v58, v32);
      }
      if (a7)
      {
        int v33 = [(FxBitmap *)v31 rowBytes];
        uint64_t v34 = [(FxBitmap *)v22 dataPtr];
        uint64_t v35 = (*(uint64_t (**)(void))(**((void **)v13 + 8) + 16))(*((void *)v13 + 8));
        if (v12)
        {
          unsigned int v36 = 0;
          LODWORD(v37) = 0;
          do
          {
            uint64_t v38 = v34 + (v37 * v33);
            if (a6 == 8)
            {
              if (v47)
              {
                double v43 = (unsigned char *)(v35 + 1 + v36);
                unsigned int v44 = 1;
                do
                {
                  *(unsigned char *)uint64_t v38 = v43[2];
                  *(unsigned char *)(v38 + OZLinkBehavior::clearAll(this, 1) = *(v43 - 1);
                  *(unsigned char *)(v38 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *v43;
                  unint64_t v45 = v44;
                  *(unsigned char *)(v38 + 3) = v43[1];
                  ++v44;
                  v43 += 4;
                  v38 += 4;
                }
                while (v45 < v47);
              }
            }
            else if (a6 == 32 && v47)
            {
              simd_float4 v39 = (int *)(v35 + 8 + v36);
              unsigned int v40 = 1;
              do
              {
                *(_DWORD *)uint64_t v38 = v39[1];
                *(_DWORD *)(v38 + 4) = *(v39 - 2);
                *(_DWORD *)(v38 + 8) = *(v39 - 1);
                unint64_t v41 = v40;
                int v42 = *v39;
                v39 += 4;
                *(_DWORD *)(v38 + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v42;
                ++v40;
                v38 += 16;
              }
              while (v41 < v47);
            }
            unint64_t v37 = (v37 + 1);
            v36 += BytesPerRow;
          }
          while (v37 < v12);
        }
      }
    }
    else
    {
      size_t v18 = (*(uint64_t (**)(PCBitmap *))(*(void *)v13 + 40))(v13);
      long long v19 = malloc_type_malloc(v18, 0xCD794585uLL);
      long long v20 = (const void *)(*(uint64_t (**)(void))(**((void **)v13 + 8) + 16))(*((void *)v13 + 8));
      size_t v21 = (*(uint64_t (**)(PCBitmap *))(*(void *)v13 + 40))(v13);
      memcpy(v19, v20, v21);
      v59[0] = v47;
      v59[1] = v12;
      v59[2] = v50;
      v59[3] = v51;
      long long v60 = xmmword_1B7E7A9D0;
      uint64_t v61 = 2;
      char v62 = v49;
      double v63 = a3;
      NSUInteger v22 = [[FxBitmap alloc] initWithInfo:v59 rowBytes:BytesPerRow andData:v19];
      [(FxBitmap *)v22 _setOwned:1];
    }
    double v29 = (double)*a5;
    double v30 = (double)a5[1];
    double v28 = (double)a5[2];
    double v27 = (double)a5[3];
  }
  else
  {
    if (v14)
    {
      unint64_t v23 = v12;
      v58.super.super.isa = 0;
      double v56 = 0.0;
      v57.super.super.isa = 0;
      double v55 = 0.0;
      PGTexture::getTexCoords(v14, (double *)&v58, (double *)&v57, &v56, &v55);
      int v24 = [FxTexture alloc];
      v52[0] = v47;
      v52[1] = v23;
      v52[2] = v50;
      v52[3] = v51;
      v52[5] = 0;
      v52[6] = 0;
      v52[4] = 2;
      char v53 = v49;
      double v54 = a3;
      Name = ProGL::TextureHandle::getName(v15 + 8);
      NSUInteger v22 = [(FxTexture *)v24 initWithInfo:v52 textureId:Name andTarget:ProGL::TextureHandle::getTarget(v15 + 8)];
      double v26 = *(double *)&v57.super.super.isa - *(double *)&v58.super.super.isa;
      double v27 = v55 - v56;
    }
    else
    {
      NSUInteger v22 = 0;
      double v26 = 0.0;
      double v27 = 0.0;
    }
    double v28 = v26 * a3;
    double v29 = 0.0;
    double v30 = 0.0;
  }
  -[FxImage setBounds:](v22, "setBounds:", v29, v30, v28, v27);
  return v22;
}

void sub_1B7D32764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void OZFxPlugImageConverter::convertBitmapDepthWithChannelMap(OZFxPlugImageConverter *this, PCBitmap *a2, FxBitmap *a3, const unsigned __int8 *a4)
{
  if (a2) {
    [(PCBitmap *)a2 imageInfo];
  }
  operator new[]();
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  void *v6 = &unk_1F116E3B8;
  void v6[2] = &unk_1F116E6C0;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *long long v4 = &unk_1F116E3B8;
  v4[2] = &unk_1F116E6C0;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(void *)this = &unk_1F116E3B8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116E6C0;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *long long v3 = &unk_1F116E3B8;
  v3[2] = &unk_1F116E6C0;
}

void OZMaterialLayerSequenceFolder::clone(OZMaterialLayerSequenceFolder *this)
{
}

void sub_1B7D33444(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

unsigned char *OZMaterialLayerSequenceFolder::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
}

unsigned char *non-virtual thunk to'OZMaterialLayerSequenceFolder::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);
}

uint64_t OZMaterialLayerSequenceFolder::writeHeader(OZMaterialLayerSequenceFolder *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialLayerSequenceScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 32);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 160))(a2, 112, *((void *)this + 7));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(*((OZFactory **)this + 1), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZMaterialLayerSequenceFolder::writeHeader(OZMaterialLayerSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZMaterialLayerSequenceFolder::writeHeader((OZMaterialLayerSequenceFolder *)((char *)this - 16), a2);
}

void OZLightingStyle::getLights(OZLightingStyle *this@<X0>, void **a2@<X8>)
{
  uint64_t v81 = 0;
  unint64_t v82 = 0;
  v83[0] = 0;
  switch((int)this)
  {
    case 0:
      goto LABEL_93;
    case 1:
      long long v3 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v3);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384610;
      v79[0] = xmmword_1B8384620;
      v79[1] = xmmword_1B8384630;
      *(void *)&v79[2] = 0x3FB0FA8320000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Center - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v4 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v5 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v5 = v4 + 136;
      }
      unint64_t v82 = v5;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384640;
      v79[0] = xmmword_1B8384650;
      v79[1] = xmmword_1B8384660;
      *(void *)&v79[2] = 0xBF81DF46A0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v43 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v44 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v44 = v43 + 136;
      }
      unint64_t v82 = v44;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384670;
      v79[0] = xmmword_1B8384680;
      v79[1] = xmmword_1B8384690;
      *(void *)&v79[2] = 0xBF93A8CDC0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v53 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v54 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v54 = v53 + 136;
      }
      unint64_t v82 = v54;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83846A0;
      v79[0] = xmmword_1B83846B0;
      v79[1] = xmmword_1B83846C0;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      goto LABEL_92;
    case 2:
      LODWORD(v76.var0) = 0;
      unsigned int v15 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v15);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384570;
      v79[0] = xmmword_1B8384580;
      v79[1] = xmmword_1B8384590;
      *(void *)&v79[2] = 0x3FA2C40A20000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Key Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v16 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v17 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v17 = v16 + 136;
      }
      unint64_t v82 = v17;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83845A0;
      v79[0] = xmmword_1B8384480;
      v79[1] = xmmword_1B83845B0;
      *(void *)&v79[2] = 0x3FB5E4B6A0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Fill Left - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v39 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v40 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v40 = v39 + 136;
      }
      unint64_t v82 = v40;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83845C0;
      v79[0] = xmmword_1B83845D0;
      v79[1] = xmmword_1B83845E0;
      *(void *)&v79[2] = 0x3FB41B2F80000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Fill Right - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v49 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v50 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v50 = v49 + 136;
      }
      unint64_t v82 = v50;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83845F0;
      v79[0] = xmmword_1B83844E0;
      v79[1] = xmmword_1B8384600;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Kick");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 3:
      LODWORD(v76.var0) = 0;
      size_t v18 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v18);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384440;
      v79[0] = xmmword_1B8384500;
      v79[1] = xmmword_1B8384460;
      *(void *)&v79[2] = 0x3FA6571860000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v19 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v20 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v20 = v19 + 136;
      }
      unint64_t v82 = v20;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384510;
      v79[0] = xmmword_1B8384520;
      v79[1] = xmmword_1B8384530;
      *(void *)&v79[2] = 0x3FB57254E0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Left - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v41 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v42 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v42 = v41 + 136;
      }
      unint64_t v82 = v42;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384540;
      v79[0] = xmmword_1B8384550;
      v79[1] = xmmword_1B8384560;
      *(void *)&v79[2] = 0x3FB90562E0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v51 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v52 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v52 = v51 + 136;
      }
      unint64_t v82 = v52;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83844D0;
      v79[0] = xmmword_1B83844E0;
      v79[1] = xmmword_1B83844F0;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 4:
      LODWORD(v76.var0) = 0;
      double v9 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v9);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384440;
      v79[0] = xmmword_1B8384450;
      v79[1] = xmmword_1B8384460;
      *(void *)&v79[2] = 0x3FA6571860000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v10 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v11 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v11 = v10 + 136;
      }
      unint64_t v82 = v11;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384470;
      v79[0] = xmmword_1B8384480;
      v79[1] = xmmword_1B8384490;
      *(void *)&v79[2] = 0x3FB90562E0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v37 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v38 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v38 = v37 + 136;
      }
      unint64_t v82 = v38;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83844A0;
      v79[0] = xmmword_1B83844B0;
      v79[1] = xmmword_1B83844C0;
      *(void *)&v79[2] = 0x3FB57254E0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Right - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v47 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v48 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v48 = v47 + 136;
      }
      unint64_t v82 = v48;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83844D0;
      v79[0] = xmmword_1B83844E0;
      v79[1] = xmmword_1B83844F0;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 5:
      LODWORD(v76.var0) = 0;
      int v24 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v24);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384400;
      v79[0] = xmmword_1B8384410;
      v79[1] = xmmword_1B8384320;
      *(void *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v25 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v26 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v26 = v25 + 136;
      }
      unint64_t v82 = v26;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384420;
      v79[0] = xmmword_1B8384430;
      v79[1] = 0xBFF8DA7E40000000;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 6:
      LODWORD(v76.var0) = 0;
      double v27 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v27);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83843B0;
      v79[0] = xmmword_1B83843C0;
      *(void *)&v79[2] = 0;
      v79[1] = 0x4004F1A6E0000000uLL;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Bottom");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v28 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v29 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v29 = v28 + 136;
      }
      unint64_t v82 = v29;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83843B0;
      v79[0] = xmmword_1B83843D0;
      v79[1] = xmmword_1B83843E0;
      *(void *)&v79[2] = 0xC005CF4420000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v45 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v46 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v46 = v45 + 136;
      }
      unint64_t v82 = v46;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83843B0;
      v79[0] = xmmword_1B83843D0;
      v79[1] = xmmword_1B83843F0;
      *(void *)&v79[2] = 0xC00BE22520000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v55 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v56 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v56 = v55 + 136;
      }
      unint64_t v82 = v56;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B83843B0;
      v79[0] = xmmword_1B83843D0;
      v79[1] = 0x400C5F4020000000uLL;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 7:
      LODWORD(v76.var0) = 0;
      size_t v21 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v21);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384300;
      v79[0] = xmmword_1B8384310;
      v79[1] = xmmword_1B8384320;
      *(void *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v22 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v23 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v23 = v22 + 136;
      }
      unint64_t v82 = v23;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384390;
      v79[0] = xmmword_1B83843A0;
      v79[1] = 0x3FF8DA7E40000000uLL;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Bottom");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 8:
      LODWORD(v76.var0) = 0;
      int v33 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v33);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384300;
      v79[0] = xmmword_1B8384310;
      v79[1] = xmmword_1B8384320;
      *(void *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v34 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v35 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v35 = v34 + 136;
      }
      unint64_t v82 = v35;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384360;
      v79[0] = xmmword_1B8384370;
      v79[1] = xmmword_1B8384380;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Diagonal Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 9:
      LODWORD(v76.var0) = 0;
      unint64_t v12 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v12);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384300;
      v79[0] = xmmword_1B8384310;
      v79[1] = xmmword_1B8384320;
      *(void *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v13 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v14 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v14 = v13 + 136;
      }
      unint64_t v82 = v14;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = xmmword_1B8384330;
      v79[0] = xmmword_1B8384340;
      v79[1] = xmmword_1B8384350;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Diagonal Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 10:
      double v30 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v30);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      *(void *)&v79[0] = 0;
      long long v78 = 0x4010000000000000uLL;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B83842C0;
      *((void *)&v79[1] + OZLinkBehavior::clearAll(this, 1) = 0;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v31 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v32 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v32 = v31 + 136;
      }
      unint64_t v82 = v32;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = 0x4010000000000000uLL;
      *(void *)&v79[0] = 0;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B83842D0;
      *(_OWORD *)((char *)&v79[1] + 8) = xmmword_1B83842F0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 < v83[0]) {
        goto LABEL_90;
      }
      goto LABEL_76;
    case 11:
      uint64_t v6 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v6);
      memset(v79, 0, 41);
      long long v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      *(void *)&v79[0] = 0;
      long long v78 = 0x4010000000000000uLL;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B83842C0;
      *((void *)&v79[1] + OZLinkBehavior::clearAll(this, 1) = 0;
      *(void *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v7 = v82;
      if (v82 >= v83[0])
      {
        uint64_t v8 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v8 = v7 + 136;
      }
      unint64_t v82 = v8;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      long long v78 = 0x4010000000000000uLL;
      *(void *)&v79[0] = 0;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B83842D0;
      *(_OWORD *)((char *)&v79[1] + 8) = xmmword_1B83842E0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      unint64_t v36 = v82;
      if (v82 >= v83[0])
      {
LABEL_76:
        uint64_t v57 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
LABEL_90:
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        uint64_t v57 = v36 + 136;
      }
      unint64_t v82 = v57;
LABEL_92:
      PCString::~PCString(&v80);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v77.var1._obj);
LABEL_93:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v58 = v81;
      if (v82 != v81)
      {
        unint64_t v59 = 0;
        long long v60 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          PCURL::PCURL((PCURL *)&v76, @"Light Name");
          uint64_t v61 = OZLight::create((OZLight *)&v76, 0);
          PCString::~PCString(&v76);
          (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v61 + 16) + 120))(v61 + 16, v58 + 136 * v59 + 128, 0);
          (*(void (**)(uint64_t, const CMTime *, void, double))(*(void *)(v61 + 6624) + 712))(v61 + 6624, v60, 0, (double)*(int *)(v58 + 136 * v59));
          (*(void (**)(uint64_t, const CMTime *, unint64_t, void))(*(void *)(v61 + 6880) + 840))(v61 + 6880, v60, v58 + 136 * v59 + 8, 0);
          (*(void (**)(uint64_t, const CMTime *, void, double))(*(void *)(v61 + 7888) + 712))(v61 + 7888, v60, 0, *(double *)(v58 + 136 * v59 + 64));
          OZTransformNode::setTranslation((OZTransformNode *)v61, *(double *)(v58 + 136 * v59 + 72), *(double *)(v58 + 136 * v59 + 80), *(double *)(v58 + 136 * v59 + 88), v60);
          OZTransformNode::setRotation((OZTransformNode *)v61, *(double *)(v58 + 136 * v59 + 96), *(double *)(v58 + 136 * v59 + 104), *(double *)(v58 + 136 * v59 + 112), v60);
          OZFolderLightShadow::hasShadows((OZFolderLightShadow *)(v61 + 8776), v60, *(unsigned __int8 *)(v58 + 136 * v59 + 120));
          double v63 = (uint64_t *)a2[1];
          unint64_t v62 = (unint64_t)a2[2];
          if ((unint64_t)v63 >= v62)
          {
            uint64_t v65 = ((char *)v63 - (unsigned char *)*a2) >> 3;
            if ((unint64_t)(v65 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v66 = v62 - (void)*a2;
            uint64_t v67 = v66 >> 2;
            if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
              uint64_t v67 = v65 + 1;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v67;
            }
            if (v68) {
              uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v68);
            }
            else {
              uint64_t v69 = 0;
            }
            CMTime v70 = (uint64_t *)&v69[8 * v65];
            uint64_t *v70 = v61;
            long long v64 = v70 + 1;
            uint64_t v72 = (char *)*a2;
            char v71 = (char *)a2[1];
            if (v71 != *a2)
            {
              do
              {
                uint64_t v73 = *((void *)v71 - 1);
                v71 -= 8;
                *--CMTime v70 = v73;
              }
              while (v71 != v72);
              char v71 = (char *)*a2;
            }
            *a2 = v70;
            a2[1] = v64;
            a2[2] = &v69[8 * v68];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *double v63 = v61;
            long long v64 = v63 + 1;
          }
          a2[1] = v64;
          ++v59;
          uint64_t v58 = v81;
        }
        while (v59 < 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v82 - v81) >> 3));
      }
      v76.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&v81;
      std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      return;
    default:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v76, "not implemented yet");
      PCString::PCString(&v75, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZLightingStyle.cpp");
      PCException::PCException(exception, &v76, &v75, 444);
      *(void *)exception = &unk_1F10B1208;
  }
}

void sub_1B7D35404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  if (v15) {
    __cxa_free_exception(v14);
  }
  a14.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 - 112);
  std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

CGColorSpace **LightingStyleLight::setColor(LightingStyleLight *this, float a2, float a3, float a4)
{
  uint64_t v8 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
  PCColor::PCColor(&v14, a2, a3, a4, v8);
  long long v9 = *(_OWORD *)&v14.var0.var1[1];
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v14.var0.var0;
  *(_OWORD *)((char *)this + 24) = v9;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v14.var0.var1[3];
  unint64_t v10 = (CGColorSpace *)*((void *)this + 7);
  obuint64_t j = v14.var1._obj;
  if (v10) {
    BOOL v12 = v10 == v14.var1._obj;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    PCCFRefTraits<CGColorSpace *>::release(v10);
    obuint64_t j = v14.var1._obj;
  }
  *((void *)this + 7) = obj;
  v14.var1._obuint64_t j = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
}

void sub_1B7D35794(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void OZLightingStyle::getLightSet(OZLightingStyle *this@<X0>, const FxColorDescription *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = &unk_1F10AD5F8;
  *(unsigned char *)(a3 + 24) = 0;
  OZLightingStyle::getLights(this, (void **)&v15);
  uint64_t v6 = v15;
  unint64_t v7 = v16;
  if ((int)((unint64_t)((char *)v16 - v15) >> 3) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = ((char *)v16 - v15) & 0x7FFFFFFF8;
    do
    {
      OZLight::setLightWorkingColorDescription(*(CGColorSpace ***)&v15[v8], a2);
      OZRenderState::OZRenderState(&v14);
      OZLight::buildLiLight(*(OZLight **)&v15[v8], &v14, (uint64_t)v12);
      char v13 = 1;
      LiLightSet::add(a3, (const LiLight *)v12);
      LiLight::~LiLight(v12);
      v8 += 8;
    }
    while (v9 != v8);
    uint64_t v6 = v15;
    unint64_t v7 = v16;
  }
  if (v7 != (unsigned char *)v6)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v6[v10];
      if (v11)
      {
        (*(void (**)(void))(*(void *)v11 + 8))(v6[v10]);
        uint64_t v6 = v15;
        unint64_t v7 = v16;
      }
      ++v10;
    }
    while (v10 < (v7 - (unsigned char *)v6) >> 3);
  }
  if (v6)
  {
    uint64_t v16 = v6;
    operator delete(v6);
  }
}

void sub_1B7D358E0(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v2 = *a1;
  if (*v2)
  {
    std::vector<LightingStyleLight>::__base_destruct_at_end[abi:ne180100]((CGColorSpace **)v2, (CGColorSpace *)*v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

CGColorSpace **std::vector<LightingStyleLight>::__base_destruct_at_end[abi:ne180100](CGColorSpace **result, CGColorSpace *a2)
{
  long long v3 = result;
  for (double i = result[1]; i != a2; double i = (CGColorSpace *)((char *)i - 136))
  {
    PCString::~PCString((PCString *)i - 1);
    double result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)i - 10);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  OZRenderState v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (CGColorSpace *)std::__allocate_at_least[abi:ne180100]<std::allocator<LightingStyleLight>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = (uint64_t)v7 + 136 * v3;
  char v13 = (char *)v7 + 136 * v6;
  std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 136;
  std::vector<LightingStyleLight>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<LightingStyleLight>::~__split_buffer(&v10);
  return v8;
}

void sub_1B7D35AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LightingStyleLight>::~__split_buffer((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 8);
  long long v6 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  unint64_t v7 = *(CGColorSpace **)(a3 + 56);
  *(void *)(a2 + 56) = v7;
  if (v7) {
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  }
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 11OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(void *)(a3 + 112);
  *(unsigned char *)(a2 + 120) = *(unsigned char *)(a3 + 120);
  PCString::PCString((PCString *)(a2 + 128), (const PCString *)(a3 + 128));
}

void sub_1B7D35B78(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LightingStyleLight>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LightingStyleLight>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + OZLinkBehavior::clearAll(this, 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136;
      std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B7D35D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>::operator()[abi:ne180100]((CGColorSpace **)a1);
  }
  return a1;
}

CGColorSpace **std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>::operator()[abi:ne180100](CGColorSpace **result)
{
  uint64_t v1 = *((void *)result[2] + 1);
  uint64_t v2 = *((void *)result[1] + 1);
  while (v1 != v2)
  {
    PCString::~PCString((PCString *)(v1 + 128));
    uint64_t result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 56));
    v1 += 136;
  }
  return result;
}

CGColorSpace **std::__split_buffer<LightingStyleLight>::~__split_buffer(CGColorSpace **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

CGColorSpace **std::__split_buffer<LightingStyleLight>::__destruct_at_end[abi:ne180100](CGColorSpace **result, CGColorSpace *a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = (CGColorSpace *)((char *)v2 - 136);
      PCString::~PCString((PCString *)v2 - 1);
      uint64_t result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v2 - 10);
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1B7D35F58(_Unwind_Exception *a1)
{
}

void sub_1B7D36E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, OZLocking *a18)
{
}

void sub_1B7D370D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  id v4 = va_arg(va1, id);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va1);
  ProCore_Impl::PCNSRefImpl::release(v2);
  _Unwind_Resume(a1);
}

void sub_1B7D3733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t folderIsParameterType(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    return ((*(uint64_t (**)(unint64_t))(*(void *)result + 120))(result) & 1) != 0
  }
  return result;
}

void sub_1B7D37924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, OZLocking *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B7D37C70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7D37DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7D382F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7D384C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D386A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D38868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D38938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D38AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D38BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D38E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D390B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D39364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D39580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D39C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D39EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D3A130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  MEMORY[0x1BA9BFBA0](v12, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D3A390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D3A5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B7D3A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, OZLocking *a13)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v13);
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&a9);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a13);
  _Unwind_Resume(a1);
}

void sub_1B7D3AA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  PCCFRef<CGColorSpace *>::~PCCFRef(v7);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef(v5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1B7D3B184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1B7D3B3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

void sub_1B7D3B5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C4011F1C4E7);
  _Unwind_Resume(a1);
}

void sub_1B7D3B88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void sub_1B7D3BB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  MEMORY[0x1BA9BFBA0](v12, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void sub_1B7D3BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void sub_1B7D3C38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, OZLocking *a19)
{
}

uint64_t interpolateCustomParameter(NSData *a1, NSData *a2, float a3, void *a4)
{
  if (!a4) {
    return 0;
  }
  [a4 getBytes:&v7 length:16];
  if (v8 {
    && (uint64_t Object = (const void *)OZScene::getObject(v8, HIDWORD(v7))) != 0
  }
  {
    return TXParagraphStyleFolder_Factory::createInstance(v5, (OZFactoryBase *)v7);
  }
  else
  {
    return 0;
  }
}

uint64_t compareCustomParameter(NSData *a1, NSData *a2, void *a3)
{
  if (!a3) {
    return 0;
  }
  [a3 getBytes:v6 length:16];
  if (v7 {
    && (uint64_t Object = (const void *)OZScene::getObject(v7, v6[1])) != 0
  }
  {
    return OZChannelBase::isObjectRef(v4);
  }
  else
  {
    return 0;
  }
}

void sub_1B7D3C74C()
{
}

void sub_1B7D3C768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B7D3C948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  MEMORY[0x1BA9BFBA0](v12, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void sub_1B7D3CB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void sub_1B7D3CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void sub_1B7D3CF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C4072D3B705);
  _Unwind_Resume(a1);
}

void sub_1B7D3D164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void sub_1B7D3D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t sub_1B7D3D3EC()
{
  return 0;
}

void sub_1B7D3D5B0(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D3D6A8(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D3D7A8(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D3D960(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7D3DB50(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D3DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, OZLocking *);
  uint64_t v11 = va_arg(va1, void);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  ProCore_Impl::PCNSRefImpl::release((id *)(v7 - 88));
  _Unwind_Resume(a1);
}

void sub_1B7D3DFD4(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D3E4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a51);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v51 - 176));
  ProCore_Impl::PCNSRefImpl::release((id *)(v51 - 104));
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<LiAgent,LiAgent&>()
{
}

void sub_1B7D3E5D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F0C40F73640D2);
  _Unwind_Resume(a1);
}

void sub_1B7D3F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,CGColorSpace *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,OZLocking *a61,uint64_t a62,char a63)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 24))(a29);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a51);
  if (a58) {
    (*(void (**)(uint64_t))(*(void *)a58 + 24))(a58);
  }
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a61);
  LiAgent::~LiAgent((LiAgent *)&a63);
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&STACK[0x380]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x398]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x3C0]);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v63 - 208));
  ProCore_Impl::PCNSRefImpl::release((id *)(v63 - 144));
  LiEdgeTextureCacheSentinel::~LiEdgeTextureCacheSentinel((LiEdgeTextureCacheSentinel *)(v63 - 129));
  _Unwind_Resume(a1);
}

void sub_1B7D3F3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3F614(void *a1)
{
  objc_begin_catch(a1);
  [v1 error];
  NSLog(&cfstr_UnableToUnarch_3.isa);
  objc_end_catch();
  JUMPOUT(0x1B7D3F5C0);
}

void sub_1B7D3F654()
{
}

void sub_1B7D3F66C(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 88));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D3F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  ProCore_Impl::PCNSRefImpl::release((id *)(v23 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D3F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D3FA90(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7D3FE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,CGColorSpace *a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v27);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a27);
  ProCore_Impl::PCNSRefImpl::release((id *)(v28 - 104));
  _Unwind_Resume(a1);
}

void sub_1B7D40044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D402AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D40390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D40434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D405F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v12 - 32));
  _Unwind_Resume(a1);
}

void sub_1B7D40620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1B7D40618);
}

void sub_1B7D40830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1B7D40A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1B7D40C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1B7D40EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7D4118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7D415E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v9 - 104));
  ProCore_Impl::PCNSRefImpl::release((id *)(v9 - 88));
  _Unwind_Resume(a1);
}

void sub_1B7D417E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D41ABC()
{
}

void sub_1B7D41AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  JUMPOUT(0x1B7D41AF0);
}

void sub_1B7D41AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, OZLocking *);
  uint64_t v7 = va_arg(va1, void);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B7D41D58()
{
}

void sub_1B7D41D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  JUMPOUT(0x1B7D41D90);
}

void sub_1B7D41D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7D42110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1B7D42360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1B7D42654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D42828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D42A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D42BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D42D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D42E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D42F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D4322C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D433A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D438E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7D43BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D43D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v50 - 56));
  PCSharedCount::~PCSharedCount(v49);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&a11);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a48);
  std::__list_imp<unsigned int>::clear(&a28);
  PCSharedCount::~PCSharedCount(v48);
  _Unwind_Resume(a1);
}

void sub_1B7D441B4(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 168));
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1B7D44328(void *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xC400A2AC0F1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B7D4431CLL);
}

void sub_1B7D4487C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, uint64_t a14, OZLocking *a15)
{
}

void sub_1B7D44B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D44E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13)
{
}

void sub_1B7D451C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13)
{
}

void sub_1B7D452AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D45754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZChannelColorCorrection::OZChannelColorCorrection(OZChannelColorCorrection *this, const PCString *a2, void *a3, OZChannelFolder *a4, unsigned int a5, int a6, char a7)
{
}

void sub_1B7D457EC(_Unwind_Exception *a1)
{
  OZChannelBlindData::~OZChannelBlindData(v1);
  _Unwind_Resume(a1);
}

void LiEdgeTextureCacheSentinel::~LiEdgeTextureCacheSentinel(LiEdgeTextureCacheSentinel *this)
{
}

uint64_t std::deque<BOOL>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void OZFxPlugRenderContextManager::OZFxPlugRenderContextManager(OZFxPlugRenderContextManager *this)
{
  this->_vptr$OZFxPlugRenderContextManager = (void **)&unk_1F1170200;
  PCColorDescription::PCColorDescription(&this->_workingColorDescription._pcColorDesc);
  this->_workingColorDescription._isPremultiplied = 1;
  this->_blendingGamma = PCRenderModel::getDefaultBlendingGamma(v2);
  this->_contexts.__tree_.__pair3_.__value_ = 0;
  this->_contexts.__tree_.__pair1_.__value_.__left_ = 0;
  this->_contexts.__tree_.__begin_node_ = &this->_contexts.__tree_.__pair1_;
  this->_contextLock._lock._os_unfair_lock_opaque = 0;
}

void sub_1B7D45948(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void std::deque<OZChannelFolder *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZChannelFolder *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZChannelFolder *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + OZLinkBehavior::clearAll(this, 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7D45CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<BOOL>::push_back(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 9) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<BOOL>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(unsigned char *)(*(void *)(v5 + ((v8 >> 9) & 0x7FFFFFFFFFFFF8)) + (v8 & 0xFFF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<BOOL>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + OZLinkBehavior::clearAll(this, 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7D46050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement::OZARPlaneAnchorElement(OZARPlaneAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F116E730;
  PCString v5[2] = &unk_1F116F068;
  v5[6] = &unk_1F116F2C0;
  v5[816] = &unk_1F116F318;
  PCString::PCString(&v7, "Plane Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24424), &v7, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "None;Wall;Floor;Ceiling;Table;Seat;Window;Door");
  PCString::PCString(&v6, "Plane Classification");
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 24424), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Any;Horizontal;Vertical");
  PCString::PCString(&v6, "Plane Alignment");
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 24424), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Plane Width");
  OZChannelDouble::OZChannelDouble((OZARPlaneAnchorElement *)((char *)this + 25064), 100, &v7, (OZChannelFolder *)((char *)this + 24424), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Plane Height");
  OZChannelDouble::OZChannelDouble((OZARPlaneAnchorElement *)((char *)this + 25216), 100, &v7, (OZChannelFolder *)((char *)this + 24424), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B7D462E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelFolder::~OZChannelFolder(v13);
  OZARAnchorElement::~OZARAnchorElement(v12);
  _Unwind_Resume(a1);
}

void sub_1B7D4638C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7D4639C()
{
}

void OZARPlaneAnchorElement::OZARPlaneAnchorElement(OZARPlaneAnchorElement *this, const OZARPlaneAnchorElement *a2, uint64_t a3)
{
  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F116E730;
  *(void *)(v5 + 16) = &unk_1F116F068;
  *(void *)(v5 + 48) = &unk_1F116F2C0;
  *(void *)(v5 + 6528) = &unk_1F116F318;
  PCString v6 = (OZChannelFolder *)(v5 + 24424);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24424), (const OZChannelFolder *)((char *)a2 + 24424), (OZChannelFolder *)(v5 + 448));
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552), (const OZARPlaneAnchorElement *)((char *)a2 + 24552), v6);
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808), (const OZARPlaneAnchorElement *)((char *)a2 + 24808), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 25064), (const OZChannelBase *)((char *)a2 + 25064), v6);
  *((void *)this + 3133) = &unk_1F1100CF0;
  *((void *)this + 3135) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 25216), (const OZChannelBase *)((char *)a2 + 25216), v6);
  *((void *)this + 315OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 3154) = &unk_1F1101050;
}

void sub_1B7D46558(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZARAnchorElement::~OZARAnchorElement(v1);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement::~OZARPlaneAnchorElement(OZARPlaneAnchorElement *this)
{
  *(void *)this = &unk_1F116E730;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F116F068;
  *((void *)this + 6) = &unk_1F116F2C0;
  *((void *)this + 816) = &unk_1F116F318;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25216));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25064));
  OZChannelEnum::~OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808));
  OZChannelEnum::~OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24424));

  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  uint64_t vars8;

  OZARPlaneAnchorElement::~OZARPlaneAnchorElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZARPlaneAnchorElement::~OZARPlaneAnchorElement(OZARPlaneAnchorElement *this)
{
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 48));
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

void OZARPlaneAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void non-virtual thunk to'OZARPlaneAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

uint64_t OZARPlaneAnchorElement::setPlaneSize(uint64_t a1, const CMTime *a2, double *a3)
{
  OZChannel::setValue((OZChannel *)(a1 + 25064), a2, *a3, 0);
  double v6 = a3[1];

  return OZChannel::setValue((OZChannel *)(a1 + 25216), a2, v6, 0);
}

void sub_1B7D46968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D46A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D46B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D46C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, char a14)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v14 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D46F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, char a14)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v14 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D46F6C()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B7D46F58);
}

void sub_1B7D47108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v17 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D47168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  JUMPOUT(0x1B7D47154);
}

void sub_1B7D47460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D474F4()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B7D474D4);
}

void sub_1B7D4770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, id a15)
{
  ProCore_Impl::PCNSRefImpl::release(&a15);
  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D47790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  JUMPOUT(0x1B7D47770);
}

void sub_1B7D47980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  id v11 = va_arg(va1, id);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B7D47A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  JUMPOUT(0x1B7D479E8);
}

void sub_1B7D47B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v11 - 48));
  _Unwind_Resume(a1);
}

void sub_1B7D47B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  JUMPOUT(0x1B7D47B5CLL);
}

void sub_1B7D47DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7D47E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x1B7D47E0CLL);
}

void sub_1B7D48144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,id a26)
{
}

void sub_1B7D481D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  JUMPOUT(0x1B7D481B8);
}

void sub_1B7D484A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, OZLocking *a19, uint64_t a20,PCString a21)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a19);
  ProCore_Impl::PCNSRefImpl::release((id *)(v21 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v21 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D48548()
{
  if (*(void *)(v0 - 56)) {
    JUMPOUT(0x1B7D48554);
  }
  JUMPOUT(0x1B7D48524);
}

void sub_1B7D48818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4888C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  JUMPOUT(0x1B7D48878);
}

void sub_1B7D48B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,OZLocking *a23,uint64_t a24,PCString a25)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a23);
  ProCore_Impl::PCNSRefImpl::release((id *)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D48EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D48F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  JUMPOUT(0x1B7D48F20);
}

void sub_1B7D4908C(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1B7D4923C(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1B7D49440(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D49690(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B7D49984(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B7D499B4()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 120);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B7D499ACLL);
}

void sub_1B7D49AF4(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1B7D49CBC(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D49F04(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D4A288(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 128));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B7D4A318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  JUMPOUT(0x1B7D4A2F8);
}

void sub_1B7D4A488(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B7D4A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  id v8 = va_arg(va1, id);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B7D4A700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1B7D4A6E0);
}

void sub_1B7D4A99C(_Unwind_Exception *a1)
{
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 64));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7D4ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 80));
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7D4B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4B564(_Unwind_Exception *a1)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1B7D4B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlug_setPixelTransformToRestrictInputSizeForFilter(uint64_t a1, uint64_t a2, int a3, double *a4)
{
  if (a4) {
    *a4 = 1.0;
  }
  uint64_t result = 0;
  double v7 = *(double *)(a2 + 16);
  if (v7 != 0.0)
  {
    double v8 = *(double *)(a2 + 24);
    if (v8 != 0.0)
    {
      if (a3)
      {
        float64x2_t v25 = 0uLL;
        v26.f64[0] = 0.0;
        BOOL Scale = OZFxPlug_GetScale(a1, (uint64_t)&v25);
        double v10 = v25.f64[0];
        if (!Scale) {
          double v10 = 1.0;
        }
        double v7 = v7 * v10;
        if (Scale) {
          double v11 = v25.f64[1];
        }
        else {
          double v11 = 1.0;
        }
        double v8 = v8 * v11;
      }
      double v12 = v7 + -4000.0;
      if (v7 <= 4000.0) {
        double v12 = 0.0;
      }
      double v13 = v8 + -4000.0;
      if (v8 <= 4000.0) {
        double v13 = 0.0;
      }
      if (v12 >= v13) {
        double v14 = v12;
      }
      else {
        double v14 = v13;
      }
      if (v14 <= 0.0)
      {
        return 0;
      }
      else
      {
        if (v12 >= v13) {
          double v15 = v7;
        }
        else {
          double v15 = v8;
        }
        uint64_t v16 = *(void *)(a1 + 160);
        float64x2_t v17 = *(float64x2_t *)(v16 + 48);
        float64x2_t v19 = *(float64x2_t *)v16;
        float64x2_t v18 = *(float64x2_t *)(v16 + 16);
        double v20 = 1.0 / (v15 / 4000.0);
        float64x2_t v27 = *(float64x2_t *)(v16 + 32);
        float64x2_t v28 = v17;
        float64x2_t v25 = v19;
        float64x2_t v26 = v18;
        long long v21 = *(_OWORD *)(v16 + 112);
        float64x2_t v23 = *(float64x2_t *)(v16 + 64);
        float64x2_t v22 = *(float64x2_t *)(v16 + 80);
        long long v31 = *(_OWORD *)(v16 + 96);
        long long v32 = v21;
        float64x2_t v29 = v23;
        float64x2_t v30 = v22;
        if (v20 != 1.0)
        {
          float64x2_t v25 = vmulq_n_f64(v25, v20);
          float64x2_t v26 = vmulq_n_f64(v26, v20);
          float64x2_t v27 = vmulq_n_f64(v27, v20);
          float64x2_t v28 = vmulq_n_f64(v28, v20);
          float64x2_t v29 = vmulq_n_f64(v29, v20);
          float64x2_t v30 = vmulq_n_f64(v30, v20);
        }
        double v24 = 1.0 / (v15 / 4000.0);
        LiAgent::setPixelTransform(a1, (uint64_t)&v25);
        if (a4) {
          *a4 = v24;
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL OZFxPlug_GetScale(uint64_t a1, uint64_t a2)
{
  float64x2_t v18 = 0uLL;
  double v19 = 0.0;
  if (LiAgent::haveROI((LiAgent *)a1))
  {
    LiAgent::getROI((__n128 *)a1, v17);
    int32x2_t v4 = vsra_n_s32((int32x2_t)v17[0].n128_u64[0], (int32x2_t)vsra_n_u32(*(uint32x2_t *)&v17[0].n128_i8[8], *(uint32x2_t *)&v17[0].n128_i8[8], 0x1FuLL), 1uLL);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    float64x2_t v18 = vcvtq_f64_s64(v5);
    double v19 = 0.0;
  }
  LiAgent::getInversePixelTransform((LiAgent *)a1, 0.0, (uint64_t)v17);
  float64x2_t v15 = 0u;
  long long v16 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(v17[0].n128_f64, v18.f64, v15.f64);
  BOOL v6 = *((double *)&v16 + 1) >= 0.0000001 || *((double *)&v16 + 1) <= -0.0000001;
  if (v6)
  {
    float64x2_t v18 = vmulq_n_f64(v15, 1.0 / *((double *)&v16 + 1));
    double v19 = 1.0 / *((double *)&v16 + 1) * *(double *)&v16;
    __asm { FMOV            V0.2D, #1.0 }
    long long v13 = _Q0;
    uint64_t v14 = 0;
    getScale(*(float64x2_t **)(a1 + 160), v18.f64, (double *)&v13, a2, 0);
  }
  return v6;
}

uint64_t OZFxPlug_setPixelTransformToRestrictInputSizeForTemporalAPI(uint64_t a1, uint64_t a2, int a3, double *a4)
{
  if (a4) {
    *a4 = 1.0;
  }
  uint64_t result = 0;
  double v7 = *(double *)(a2 + 16);
  if (v7 != 0.0)
  {
    double v8 = *(double *)(a2 + 24);
    if (v8 != 0.0)
    {
      if (a3)
      {
        float64x2_t v25 = 0uLL;
        v26.f64[0] = 0.0;
        BOOL Scale = OZFxPlug_GetScale(a1, (uint64_t)&v25);
        double v10 = v25.f64[0];
        if (!Scale) {
          double v10 = 1.0;
        }
        double v7 = v7 * v10;
        if (Scale) {
          double v11 = v25.f64[1];
        }
        else {
          double v11 = 1.0;
        }
        double v8 = v8 * v11;
      }
      double v12 = v7 + -9000.0;
      if (v7 <= 9000.0) {
        double v12 = 0.0;
      }
      double v13 = v8 + -9000.0;
      if (v8 <= 9000.0) {
        double v13 = 0.0;
      }
      if (v12 >= v13) {
        double v14 = v12;
      }
      else {
        double v14 = v13;
      }
      if (v14 <= 0.0)
      {
        return 0;
      }
      else
      {
        if (v12 >= v13) {
          double v15 = v7;
        }
        else {
          double v15 = v8;
        }
        uint64_t v16 = *(void *)(a1 + 160);
        float64x2_t v17 = *(float64x2_t *)(v16 + 48);
        float64x2_t v19 = *(float64x2_t *)v16;
        float64x2_t v18 = *(float64x2_t *)(v16 + 16);
        double v20 = 1.0 / (v15 / 9000.0);
        float64x2_t v27 = *(float64x2_t *)(v16 + 32);
        float64x2_t v28 = v17;
        float64x2_t v25 = v19;
        float64x2_t v26 = v18;
        long long v21 = *(_OWORD *)(v16 + 112);
        float64x2_t v23 = *(float64x2_t *)(v16 + 64);
        float64x2_t v22 = *(float64x2_t *)(v16 + 80);
        long long v31 = *(_OWORD *)(v16 + 96);
        long long v32 = v21;
        float64x2_t v29 = v23;
        float64x2_t v30 = v22;
        if (v20 != 1.0)
        {
          float64x2_t v25 = vmulq_n_f64(v25, v20);
          float64x2_t v26 = vmulq_n_f64(v26, v20);
          float64x2_t v27 = vmulq_n_f64(v27, v20);
          float64x2_t v28 = vmulq_n_f64(v28, v20);
          float64x2_t v29 = vmulq_n_f64(v29, v20);
          float64x2_t v30 = vmulq_n_f64(v30, v20);
        }
        double v24 = 1.0 / (v15 / 9000.0);
        LiAgent::setPixelTransform(a1, (uint64_t)&v25);
        if (a4) {
          *a4 = v24;
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL OZFxPlug_IsSpecialLayer(const OZSceneNode *a1, int a2, int a3)
{
  uint64_t v3 = *((void *)a1 + 1);
  int v5 = *(_DWORD *)(v3 + 8);
  int v4 = *(_DWORD *)(v3 + 12);
  int v7 = *(_DWORD *)(v3 + 16);
  int v6 = *(_DWORD *)(v3 + 20);
  if (a2 > 5 || a3 > 11)
  {
    if (OZFxPlug_IsTextLayer(a1)) {
      return 1;
    }
    BOOL v14 = v5 == -294958824 && v4 == 947524055;
    BOOL v15 = v14 && v7 == -1608450045;
    if (v15 && v6 == -1820994886) {
      return 1;
    }
    BOOL v17 = v5 == 1155139328 && v4 == -156560938;
    BOOL v18 = v17 && v7 == -1943797757;
    if (v18 && v6 == -1821964494) {
      return 1;
    }
    if (v5 != -351952328 || v4 != -1278930473 || v7 != -1492189181) {
      goto LABEL_53;
    }
  }
  else
  {
    BOOL v10 = v5 == -1161836681 && v4 == 2135364055 && v7 == -1431896061 && v6 == -1820115094;
    if (v10
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v3 + 24), (int32x4_t)xmmword_1B7E78260)))) & 1) == 0)
    {
      return 1;
    }
    BOOL v11 = v5 == -294958824 && v4 == 947524055;
    BOOL v12 = v11 && v7 == -1608450045;
    if (v12 && v6 == -1820994886) {
      return 1;
    }
    if (v5 != -351952328 || v4 != -1278930473 || v7 != -1492189181) {
      goto LABEL_53;
    }
  }
  if (v6 == -1821967528) {
    return 1;
  }
LABEL_53:
  if (v5 == 1136778330 && v4 == 308023769 && v7 == -1579941878 && v6 == -1783627174) {
    return 1;
  }
  return v5 == 1898209956 && v4 == 842600919 && v7 == -1887174653 && v6 == -1819691262;
}

BOOL OZFxPlug_IsTextLayer(const OZSceneNode *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v1 + 8), (int32x4_t)xmmword_1B7E77B70)))) & 1) == 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v1 + 24), (int32x4_t)xmmword_1B7E78260)))) & 1) == 0|| OZFxPlug_IsCloneTextSceneNode(a1);
}

BOOL OZFxPlug_IsEmitter(OZSceneNode *a1)
{
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)a1 + 1) + 8), (int32x4_t)xmmword_1B8384170)))) & 1) == 0;
}

uint64_t OZFxPlug_EmitterThatNeedsResampling(OZSceneNode *a1)
{
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)a1 + 1) + 8), (int32x4_t)xmmword_1B8384170)))))return 0; {
  uint64_t v3 = *(void *)a1;
  }
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(v3 + 272))(a1);
    if (result)
    {
      int v5 = (OZScene *)result;
      OZExportSettings::OZExportSettings((OZExportSettings *)v7);
      __n128 SceneSettings = OZScene::getSceneSettings(v5, (OZExportSettings *)v7);
      if (v7[44] && ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v4 + 248))(v4, SceneSettings) & 1) == 0)
      {
        OZExportSettings::~OZExportSettings((OZExportSettings *)v7);
        return 1;
      }
      OZExportSettings::~OZExportSettings((OZExportSettings *)v7);
      return 0;
    }
  }
  return result;
}

void sub_1B7D4BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL OZFxPlug_IsCloneTextSceneNode(const OZSceneNode *a1)
{
  BOOL result = 0;
  if (a1)
  {
    if (v1)
    {
      SourceNode = OZCloneGenerator::getSourceNode(v1);
      if (SourceNode)
      {
        if (v3)
        {
          uint64_t v4 = v3;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(void *))(*(void *)v3 + 672))(v3) + 8)+ 8), (int32x4_t)xmmword_1B7E77B70)))) & 1) == 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(void *))(*(void *)v4 + 672))(v4) + 8)+ 24), (int32x4_t)xmmword_1B7E78260)))) & 1) == 0)
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL OZFxPlug_InputWillBeScaledBasedOnChannel(OZSceneNode *a1, int a2, int a3)
{
  BOOL result = OZFxPlug_IsSpecialLayer(a1, a2, a3);
  if (result) {
    return !OZFxPlug_IsTextLayer(a1);
  }
  return result;
}

uint64_t OZFxPlug_DepthFromFxDepth(uint64_t a1)
{
  if (!a1) {
    return 8;
  }
  if (a1 == 3) {
    return 32;
  }
  if (a1 != 2)
  {
    NSLog(&cfstr_FxplugRequeste.isa, a1);
    if (a1 == 32)
    {
      NSLog(&cfstr_Requested32Did.isa);
      return 32;
    }
    if (a1 != 16)
    {
      if (a1 == 8)
      {
        NSLog(&cfstr_Requested8DidY.isa);
        return 8;
      }
      return 32;
    }
    NSLog(&cfstr_Requested16Did.isa);
  }
  return 16;
}

uint64_t OZFxPlug_FxDepthFromDepth(int a1)
{
  if (a1 == 32) {
    return 3;
  }
  else {
    return 2 * (a1 == 16);
  }
}

uint64_t OZFxPlug_ChannelOrderFromFxDepth(uint64_t a1)
{
  if (a1 == 2) {
    unsigned int v1 = 13;
  }
  else {
    unsigned int v1 = 3;
  }
  if (a1 == 3) {
    return 16;
  }
  else {
    return v1;
  }
}

uint64_t OZFxPlug_CallFrameSetup(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  if (a4)
  {
    long long v8 = a3[1];
    v16[0] = *a3;
    v16[1] = v8;
    _OWORD v16[2] = a3[2];
    long long v9 = *(_OWORD *)(a4 + 48);
    void v14[2] = *(_OWORD *)(a4 + 32);
    void v14[3] = v9;
    uint64_t v15 = *(void *)(a4 + 64);
    long long v10 = *(_OWORD *)(a4 + 16);
    v14[0] = *(_OWORD *)a4;
    v14[1] = v10;
    uint64_t result = [a2 frameSetup:v16 inputInfo:v14 hardware:a5 software:a6];
    if (result) {
      return result;
    }
  }
  else
  {
    long long v12 = a3[1];
    v13[0] = *a3;
    v13[1] = v12;
    _OWORD v13[2] = a3[2];
    uint64_t result = [a2 frameSetup:v13 hardware:a5 software:a6];
    if (result) {
      return result;
    }
  }
  *a5 = 0;
  *a6 = 0;
  return result;
}

uint64_t OZFxPlug_CallRender(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  PGSetCurrentContextSentry::PGSetCurrentContextSentry((PGSetCurrentContextSentry *)&v21.var4);
  PCTimer::PCTimer((PCTimer *)&v21);
  int LogFxPlugRenderTimeEnabled = LiRenderingTechnology::getLogFxPlugRenderTimeEnabled((LiRenderingTechnology *)(a7 + 1316));
  if (LogFxPlugRenderTimeEnabled) {
    PCTimer::start((PCTimer *)&v21);
  }
  long long v13 = a6[1];
  if (a5)
  {
    v20[0] = *a6;
    v20[1] = v13;
    v20[2] = a6[2];
    uint64_t v14 = [a2 renderOutput:a4 withInput:a5 withInfo:v20];
  }
  else
  {
    v19[0] = *a6;
    v19[1] = v13;
    PCString v19[2] = a6[2];
    uint64_t v14 = [a2 renderOutput:a4 withInfo:v19];
  }
  uint64_t v16 = v14;
  if (LogFxPlugRenderTimeEnabled)
  {
    PCTimer::stop((PCTimer *)&v21);
    double Seconds = PCTimer::getSeconds((PCTimer *)&v21);
    printf("FxPlug Graph Building Time (ms) : %g\n", Seconds * 1000.0);
  }
  OZChannelBase::setRangeName(&v21, v15);
  PGSetCurrentContextSentry::~PGSetCurrentContextSentry((PGSetCurrentContextSentry *)&v21.var4);
  return v16;
}

void sub_1B7D4C278(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, OZChannelBase *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a23, a2);
  PGSetCurrentContextSentry::~PGSetCurrentContextSentry((PGSetCurrentContextSentry *)(v23 - 80));
  _Unwind_Resume(a1);
}

void OZFxPlug_CalculateImageInfo(id *a1@<X0>, OZSceneNode *lpsrc@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>, CMTime *a8)
{
  *(void *)a7 = (float)a3;
  *(void *)(a7 + 8) = (float)a4;
  *(void *)(a7 + 16) = a5;
  *(void *)(a7 + 24) = 4;
  if (a6) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v12 = 2;
  if (a6) {
    uint64_t v12 = 0;
  }
  *(void *)(a7 + 40) = 0;
  *(void *)(a7 + 48) = v12;
  *(void *)(a7 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v11;
  *(unsigned char *)(a7 + 56) = 1;
  *(void *)(a7 + 64) = 0x3FF0000000000000;
  if (lpsrc) {
  else
  }
    long long v13 = 0;
  CMTime v15 = *a8;
  if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a1, &v15))
  {
    double v14 = *(double *)((*(uint64_t (**)(OZSceneNode *))(*(void *)lpsrc + 272))(lpsrc) + 384);
  }
  else
  {
    if (!v13) {
      return;
    }
    double v14 = (*(double (**)(void *))(*(void *)v13 + 1328))(v13);
  }
  *(double *)(a7 + 64) = v14;
  if (v14 == 0.0) {
    *(void *)(a7 + 64) = 0x3FF0000000000000;
  }
}

double OZFxPlug_GetScale(const LiAgent *a1, double *a2, double *a3)
{
  double v7 = 0.0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  OZFxPlug_GetScale((uint64_t)a1, (uint64_t)&v7);
  double result = v7;
  uint64_t v6 = v8;
  *a2 = v7;
  *(void *)a3 = v6;
  return result;
}

double OZFxPlug_ClampRectToMaxTextureSize@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  double v3 = a2[1].f64[0];
  if (v3 > 4096.0)
  {
    *(double *)&unint64_t v4 = ceil((v3 + -4096.0) * 0.5);
    *a2 = vaddq_f64((float64x2_t)v4, *a2);
    a2[1].f64[0] = v3 - (*(double *)&v4 + *(double *)&v4);
  }
  double result = a2[1].f64[1];
  if (result > 4096.0)
  {
    double v6 = ceil((result + -4096.0) * 0.5);
    double v7 = v6 + a2->f64[1];
    a2->f64[0] = a2->f64[0] + 0.0;
    a2->f64[1] = v7;
    double result = result - (v6 + v6);
    a2[1].f64[1] = result;
  }
  return result;
}

void OZFxPlug_GenerateFailedRenderNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B7D4C554()
{
  uint64_t v5 = 0;
  double v6 = 0;
  uint64_t v4 = 0;
  PGHelium::createBitmapNode((uint64_t)&v5, (unsigned int *)&v4, 1, 0, (HGBitmapLoader **)(v1 - 24));
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(v1 - 24);
  if (*v0 == v3)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    }
  }
  else
  {
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
      uint64_t v3 = *(void *)(v1 - 24);
    }
    *uint64_t v0 = v3;
    *(void *)(v1 - 24) = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B7D4C604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  uint64_t v17 = *(void *)(v15 - 24);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void OZFxPlug_GetBlendOptions(void *a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  char v6 = objc_opt_respondsToSelector();
  a3->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(a3 + 1);
  if (v6)
  {
    if ([a1 getBlendOptionsAtTime:a2])
    {
      PCSharedCount::PCSharedCount(&v7);
      operator new();
    }
  }
}

void sub_1B7D4C860(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40239A8A55);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlug_GetBoundsFromSceneNode@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  if (a1 {
    && (long long v10 = a1,
  }
  {
    uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 1552);
    return v12(v11, a3, a2);
  }
  else
  {
    double v14 = *(uint64_t (**)(void))(*(void *)a1 + 16);
    return v14();
  }
}

int32x2_t OZFxPlug_GetAgentBoundary(LiAgent *a1, int32x2_t *a2)
{
  LiAgent::getBoundary(a1, (uint64_t)v5);
  int32x2_t result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v5[0], (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  int32x2_t v4 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v5[1], v5[0])))), result);
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL OZFxPlug_GetInputNode(uint64_t *a1, uint64_t a2, int32x2_t *a3, long long *a4, int a5, int a6, OZRenderParams *a7, int a8, char a9, LiImageSource *a10, uint64_t a11, void *lpsrc, uint64_t a13)
{
  if (a9) {
    return 0;
  }
  if (a6)
  {
    long long v42 = *a4;
    uint64_t v43 = *((void *)a4 + 2);
    (*(void (**)(LiImageSource **__return_ptr))(*(void *)a10 + 136))(&v44);
  }
  else
  {
    uint64_t v44 = a10;
    if (a10) {
      BOOL v18 = (PCShared_base *)((char *)a10 + *(void *)(*(void *)a10 - 24));
    }
    else {
      BOOL v18 = 0;
    }
    PCSharedCount::PCSharedCount(&v45, v18);
  }
  uint64_t v40 = 0;
  PCSharedCount::PCSharedCount(&v41);
  if (*(_DWORD *)(a2 + 36) != 2)
  {
    LiRenderingTechnology::setEnableMetalRendering(a2, 1);
    *(void *)&v51[40] = 0x3FF0000000000000;
    *(void *)uint64_t v51 = 0x3FF0000000000000;
    *(void *)&v48[40] = 0x3FF0000000000000;
    *(void *)uint64_t v48 = 0x3FF0000000000000;
    memset(&v48[8], 0, 32);
    long long v49 = 0u;
    long long v50 = 0u;
    memset(&v51[8], 0, 32);
    LiAgent::setPixelTransform(a2, (uint64_t)v48);
    if (lpsrc)
    {
      if (v19)
      {
        if (OZImageElement::isTransitionSource(v19))
        {
          OZRenderParams::getResolution(a7, &v52);
          memset(&v48[8], 0, 32);
          *(void *)&v48[40] = v52.n128_u64[1];
          *(void *)uint64_t v48 = v52.n128_u64[0];
          long long v49 = 0u;
          long long v50 = 0u;
          memset(&v51[8], 0, 32);
          *(void *)uint64_t v51 = 0x3FF0000000000000;
          *(void *)&v51[40] = 0x3FF0000000000000;
          PCMatrix44Tmpl<double>::operator*((uint64_t)v48, *(long long **)(a2 + 160), (uint64_t)&v46);
          LiRenderingTechnology::setEnableMetalRendering(a2, 0);
          LiAgent::setImageSpace(a2, 0);
          LiAgent::setPixelTransform(a2, (uint64_t)&v46);
        }
      }
    }
    operator new();
  }
  LiAgent::getHelium((LiAgent *)a2, v44, (uint64_t *)v48);
  uint64_t v20 = *a1;
  uint64_t v21 = *(void *)v48;
  if (*a1 == *(void *)v48)
  {
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
    }
  }
  else
  {
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
      uint64_t v21 = *(void *)v48;
    }
    *a1 = v21;
  }
  float64x2_t v22 = *(CGColorSpace **)a13;
  *(void *)uint64_t v48 = v22;
  if (v22) {
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  }
  *(void *)&v48[8] = *(void *)(a13 + 8);
  *(_DWORD *)&v48[16] = *(_DWORD *)(a13 + 16);
  v48[24] = *(unsigned char *)(a13 + 24);
  ActualColorDescription = (const FxColorDescription *)LiAgent::getActualColorDescription((LiAgent *)a2);
  v39._pcColorDesc._colorSpaceRef._obuint64_t j = *(CGColorSpace **)v48;
  if (*(void *)v48) {
    PCCFRefTraits<CGColorSpace *>::retain(*(CGColorSpaceRef *)v48);
  }
  *(void *)&v39._pcColorDesc._dynamicRange = *(void *)&v48[8];
  v39._pcColorDesc._toneMapMethod._gain = *(float *)&v48[16];
  v39._isPremultiplied = v48[24];
  OZFxPlug_ConformToProcessingDescription(&v39, a1, ActualColorDescription, (uint64_t *)&v46);
  uint64_t v24 = *a1;
  float64_t v25 = v46.f64[0];
  if (*a1 == *(void *)&v46.f64[0])
  {
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
    }
  }
  else
  {
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
      float64_t v25 = v46.f64[0];
    }
    *(float64_t *)a1 = v25;
    v46.f64[0] = 0.0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v39._pcColorDesc._colorSpaceRef._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v48);
  OZFxPlug_GetAgentBoundary((LiAgent *)a2, a3);
  if (*(_DWORD *)(a2 + 36) != 2) {
    *(void *)(a2 + 24) = 0;
  }
  int32x2_t v26 = a3[1];
  v27.i64[0] = a3->i32[0];
  v27.i64[1] = (int)HIDWORD(*(unint64_t *)a3);
  float64x2_t v28 = vcvtq_f64_s64(v27);
  v27.i64[0] = v26.i32[0];
  v27.i64[1] = v26.i32[1];
  float64x2_t v46 = v28;
  float64x2_t v47 = vcvtq_f64_s64(v27);
  float64x2_t v29 = *(long long **)(a2 + 160);
  long long v30 = v29[3];
  long long v32 = *v29;
  long long v31 = v29[1];
  *(_OWORD *)&v48[32] = v29[2];
  long long v49 = v30;
  *(_OWORD *)uint64_t v48 = v32;
  *(_OWORD *)&v48[16] = v31;
  long long v33 = v29[7];
  long long v35 = v29[4];
  long long v34 = v29[5];
  *(_OWORD *)&v51[16] = v29[6];
  *(_OWORD *)&v51[32] = v33;
  long long v50 = v35;
  *(_OWORD *)uint64_t v51 = v34;
  BOOL v13 = PCMatrix44Tmpl<double>::transformRect<double>((double *)v48, v46.f64, (uint64_t)&v46);
  if (v13)
  {
    int32x2_t v36 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v46, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    int32x2_t v37 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v46, v47)))), v36);
    *a3 = v36;
    a3[1] = v37;
  }
  PCSharedCount::~PCSharedCount(&v41);
  PCSharedCount::~PCSharedCount(&v45);
  return v13;
}

void sub_1B7D4CF48(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24))(a21);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v22 - 208));
  PCSharedCount::~PCSharedCount(v21);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B7D4CF14);
  }
  PCSharedCount::~PCSharedCount(&a20);
  _Unwind_Resume(a1);
}

uint64_t OZLiHePixelTransformFixer::OZLiHePixelTransformFixer(uint64_t a1, int a2)
{
  *(void *)(a1 + 24) = &unk_1F1199AC8;
  *(void *)(a1 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1F116F4F8);
  *(void *)a1 = &unk_1F116F410;
  *(void *)(a1 + 24) = &unk_1F116F4D8;
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void sub_1B7D4D128(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFxPlug_ConformToProcessingDescription@<X0>(FxColorDescription *this@<X2>, uint64_t *a2@<X0>, const FxColorDescription *a3@<X1>, uint64_t *a4@<X8>)
{
  ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(this);
  FxColorDescription::FxColorDescription(&v10, a3, ToneMapMethod);
  FxApplyColorConform(a2, &v10, this, a4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v10._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B7D4D1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
}

void OZFxPlug_TextureAndBitmapRetriever(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7D4D204()
{
  return 0;
}

uint64_t pixelFormatFromRendererIntermediateFormat(HGRenderer *a1)
{
  if (!a1) {
    return 17;
  }
  unsigned int v1 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 19) - 22;
  if (v1 > 5) {
    return 17;
  }
  else {
    return dword_1B838475C[v1];
  }
}

uint64_t OZFxPlug_ConvertDynamicRangeType(FxColorDescription *a1)
{
  if (FxColorDescription::isHDR(a1)) {
    return 2;
  }
  else {
    return FxColorDescription::isSDR(a1);
  }
}

void OZLiHePixelTransformFixer::~OZLiHePixelTransformFixer(OZChannelBase *this)
{
  uint64_t v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1F116F4F8);
  *(void *)(v1 + 24) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 32));
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1F116F4F8);
  *(void *)(v1 + 24) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 32));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiHePixelTransformFixer::~OZLiHePixelTransformFixer(OZLiHePixelTransformFixer *this)
{
  uint64_t v1 = OZChannelBase::setRangeName((OZChannelBase *)((char *)this + *(void *)(*(void *)this - 24)), (const PCString *)&off_1F116F4F8);
  *(void *)(v1 + 24) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 40) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 32);

  PCWeakCount::~PCWeakCount(v2);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F116F4F8);
  *((void *)v1 + 3) = &unk_1F1199AC8;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B7D4D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4D908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *get3DAPIData(void)
{
  {
    pthread_key_create((pthread_key_t *)&get3DAPIData(void)::apiData, (void (__cdecl *)(void *))PCThreadSpecific<OZFx3DAPIData>::destroy);
  }
  uint64_t v0 = pthread_getspecific(get3DAPIData(void)::apiData);
  if (!v0) {
    operator new();
  }
  return v0;
}

void sub_1B7D4DB48(_Unwind_Exception *a1)
{
}

void sub_1B7D4E020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCThreadSpecific<OZFx3DAPIData>::destroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

double OZGetSystemFontWeightFromName(const __CFString *a1)
{
  if (CFStringFind(a1, @"UltraLight", 1uLL).location == -1)
  {
    if (CFStringFind(a1, @"Light", 1uLL).location == -1)
    {
      if (CFStringFind(a1, @"Thin", 1uLL).location == -1)
      {
        if (CFStringFind(a1, @"Medium", 1uLL).location == -1)
        {
          if (CFStringFind(a1, @"Semibold", 1uLL).location == -1)
          {
            if (CFStringFind(a1, @"Bold", 1uLL).location == -1)
            {
              if (CFStringFind(a1, @"Heavy", 1uLL).location == -1)
              {
                CFIndex location = CFStringFind(a1, @"Black", 1uLL).location;
                uint64_t v2 = &OZFontWeightBlack;
                if (location == -1) {
                  uint64_t v2 = &OZFontWeightRegular;
                }
              }
              else
              {
                uint64_t v2 = &OZFontWeightHeavy;
              }
            }
            else
            {
              uint64_t v2 = &OZFontWeightBold;
            }
          }
          else
          {
            uint64_t v2 = &OZFontWeightSemibold;
          }
        }
        else
        {
          uint64_t v2 = &OZFontWeightMedium;
        }
      }
      else
      {
        uint64_t v2 = &OZFontWeightThin;
      }
    }
    else
    {
      uint64_t v2 = &OZFontWeightLight;
    }
  }
  else
  {
    uint64_t v2 = &OZFontWeightUltraLight;
  }
  return *(double *)v2;
}

CTFontRef OZCreateFontWithName(const __CFString *a1, CGFloat a2, const CGAffineTransform *a3)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  if (CFStringHasPrefix(a1, @"."))
  {
    if (CFStringHasPrefix(a1, @".SFUI-ExtraCompressed"))
    {
      char v6 = (void *)[MEMORY[0x1E4F42A30] fontWithName:a1 size:4096 traits:a2];
      if (!v6) {
        goto LABEL_11;
      }
LABEL_10:
      uint64_t v17 = [v6 fontDescriptor];
      goto LABEL_19;
    }
    if (CFStringHasPrefix(a1, @".SFUI-Compressed"))
    {
      double v7 = OZGetSystemFontWeightFromName(a1);
      uint64_t v33 = *MEMORY[0x1E4F43848];
      v32[0] = @"NSCTFontUIFontDesignDefault";
      uint64_t v8 = *MEMORY[0x1E4F43940];
      v31[0] = @"NSCTFontUIFontDesignTrait";
      v31[1] = v8;
      uint64_t v9 = [NSNumber numberWithDouble:v7];
      v31[2] = *MEMORY[0x1E4F43950];
      v32[1] = v9;
      v32[2] = &unk_1F11EC570;
      v34[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:3];
      FxColorDescription v10 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v11 = v34;
      uint64_t v12 = &v33;
    }
    else
    {
      if (!CFStringHasPrefix(a1, @".SFUI-Heavy")) {
        goto LABEL_11;
      }
      double v13 = OZGetSystemFontWeightFromName(a1);
      uint64_t v29 = *MEMORY[0x1E4F43848];
      uint64_t v14 = *MEMORY[0x1E4F43940];
      v27[0] = @"NSCTFontUIFontDesignTrait";
      v27[1] = v14;
      v28[0] = @"NSCTFontUIFontDesignDefault";
      v28[1] = [NSNumber numberWithDouble:v13];
      uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:2];
      FxColorDescription v10 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v11 = &v30;
      uint64_t v12 = &v29;
    }
    uint64_t v15 = [v10 dictionaryWithObjects:v11 forKeys:v12 count:1];
    uint64_t v16 = [MEMORY[0x1E4F42A38] fontDescriptorWithFontAttributes:v15];
    char v6 = (void *)[MEMORY[0x1E4F42A30] fontWithDescriptor:v16 size:a2];
    if (v6) {
      goto LABEL_10;
    }
LABEL_11:
    OZGetSystemFontWeightFromName(a1);
    if (CFStringFind(a1, @"SFCompactRounded", 1uLL).location == -1)
    {
      if (CFStringFind(a1, @"SFCompactText", 1uLL).location == -1)
      {
        CFStringFind(a1, @"SFUIDisplay", 1uLL);
        BOOL v18 = @"NSCTFontUIFontDesignDefault";
      }
      else
      {
        BOOL v18 = @"NSCTFontUIFontDesignCompact";
      }
    }
    else
    {
      BOOL v18 = @"NSCTFontUIFontDesignCompactRounded";
    }
    CFIndex location = CFStringFind(a1, @"Italic", 1uLL).location;
    uint64_t v20 = (void *)MEMORY[0x1E4F42A30];
    [MEMORY[0x1E4F42A30] systemFontSize];
    uint64_t v21 = objc_msgSend(v20, "systemFontOfSize:weight:");
    if (!v21)
    {
LABEL_23:
      CTFontRef result = v21;
      if (result) {
        return result;
      }
      return CTFontCreateWithName(a1, a2, a3);
    }
    uint64_t v22 = objc_msgSend((id)objc_msgSend(v21, "fontDescriptor"), "fontDescriptorWithDesign:", v18);
    uint64_t v23 = v22;
    if (location == -1)
    {
LABEL_20:
      if (a3)
      {
        long long v24 = *(_OWORD *)&a3->c;
        v26[0] = *(_OWORD *)&a3->a;
        v26[1] = v24;
        v26[2] = *(_OWORD *)&a3->tx;
        uint64_t v23 = (void *)[v23 fontDescriptorWithMatrix:v26];
      }
      uint64_t v21 = (void *)[MEMORY[0x1E4F42A30] fontWithDescriptor:v23 size:a2];
      goto LABEL_23;
    }
    uint64_t v17 = objc_msgSend(v22, "fontDescriptorWithSymbolicTraits:", objc_msgSend(v22, "symbolicTraits") | 1);
LABEL_19:
    uint64_t v23 = (void *)v17;
    goto LABEL_20;
  }
  return CTFontCreateWithName(a1, a2, a3);
}

BOOL OZIsFontAppleColorEmoji(const __CTFont *a1)
{
  CFStringRef v1 = CTFontCopyPostScriptName(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  if (CFStringCompare(v1, @"AppleColorEmoji", 0)) {
    BOOL v3 = CFEqual(v2, @".AppleColorEmojiUI");
  }
  else {
    BOOL v3 = 1;
  }
  CFRelease(v2);
  return v3;
}

void sub_1B7D4E7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B7D4E9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFComparisonResult KilledPlugin::compareUUIDs(CFUUIDRef uuid, const __CFUUID *a2, const __CFUUID *a3)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], uuid);
  CFStringRef v6 = CFUUIDCreateString(v4, a2);
  CFComparisonResult v7 = CFStringCompare(v5, v6, 1uLL);
  CFRelease(v5);
  CFRelease(v6);
  return v7;
}

void OZFxPlugSharedBase::OZFxPlugSharedBase(OZFxPlugSharedBase *this, const PCString *a2, OZChannelFolder *a3, int a4, char a5)
{
  *(void *)this = &unk_1F116F6A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  PCString::PCString((PCString *)this + 19, a2);
  *((void *)this + 20) = 0;
  *(_DWORD *)((char *)this + 183) = 0;
  *((void *)this + 2OZLinkBehavior::clearAll(this, 1) = 0;
  *((void *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 187) = a5;
  *((_WORD *)this + 94) = 0;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 216) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_DWORD *)this + 48) = a4;
  *((_DWORD *)this + 49) = 0;
  *((_WORD *)this + 100) = 0;
  *((void *)this + 28) = 0;
  *(_DWORD *)((char *)this + 23OZLinkBehavior::clearAll(this, 1) = 0;
  *((void *)this + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 33) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272), 1);
  *((void *)this + 34) = &unk_1F10933F0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 368), 1);
  *((_DWORD *)this + 110) = 5;
  __p[0] = this;
  std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>((OZFxPlugSharedBase **)__p, v10);
  long long v8 = *(_OWORD *)&v10[0].var0;
  v10[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  v10[1].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 45);
  *((_OWORD *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (v10[1].var0) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10[1].var0);
    }
  }
  createPlatformDelegate(this);
}

#error "1B7D4F590: call analysis failed (funcsize=55)"

void sub_1B7D4F634(void *a1, int a2)
{
  if (a2 != 2)
  {
    __cxa_end_catch();
    __cxa_end_catch();
    JUMPOUT(0x1B7D4F244);
  }
  __cxa_rethrow();
}

void sub_1B7D4F658(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCMutex *a12)
{
}

void createPlatformDelegate(OZFxPlugSharedBase *a1)
{
}

void sub_1B7D4F73C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::allocateAndRegisterParameterHandlers(OZFxPlugSharedBase *this, int a2, OZChannelFolder *a3, OZFxPlugParameterHandler *a4, uint64_t a5)
{
  if (a4)
  {
    if (a2)
    {
      FxColorDescription v10 = [OZFxPlugParameterHandler_v4 alloc];
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 45);
      uint64_t v30 = *((void *)this + 44);
      long long v31 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)this + 4) = [(OZFxPlugParameterHandler *)v10 initWithBaseChannel:a3 andCopy:a4 Skip:a5 andPluginLock:&v30];
      uint64_t v12 = v31;
      if (!v31) {
        goto LABEL_16;
      }
LABEL_15:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      goto LABEL_16;
    }
    uint64_t v15 = [OZFxPlugParameterHandler alloc];
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 45);
    uint64_t v28 = *((void *)this + 44);
    uint64_t v29 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 4) = [(OZFxPlugParameterHandler *)v15 initWithBaseChannel:a3 andCopy:a4 Skip:a5 andPluginLock:&v28];
    uint64_t v12 = v29;
    if (v29) {
      goto LABEL_15;
    }
  }
  else if (a2)
  {
    double v13 = [OZFxPlugParameterHandler_v4 alloc];
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 45);
    uint64_t v34 = *((void *)this + 44);
    long long v35 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 4) = [(OZFxPlugParameterHandler *)v13 initWithBaseChannel:a3 andPluginLock:&v34];
    uint64_t v12 = v35;
    if (v35) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v23 = [OZFxPlugParameterHandler alloc];
    long long v24 = (std::__shared_weak_count *)*((void *)this + 45);
    uint64_t v32 = *((void *)this + 44);
    uint64_t v33 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 4) = [(OZFxPlugParameterHandler *)v23 initWithBaseChannel:a3 andPluginLock:&v32];
    uint64_t v12 = v33;
    if (v33) {
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v17 = (__CFString *)CFUUIDCreateString(0, (CFUUIDRef)[*((id *)this + 2) uuid]);
  if (([(__CFString *)v17 isEqualToString:@"52A68C6D-B49C-41AA-B3EA-03945D0C8EB4"] & 1) != 0
    || ([(__CFString *)v17 isEqualToString:@"920273EF-948C-4556-8EB8-8EFEF7A34111"] & 1) != 0
    || [(__CFString *)v17 isEqualToString:@"23723AD7-62C4-4ED0-A8C6-FA5A2D7162E4"])
  {
    [*((id *)this + 4) setColorCorrection:1];
  }
  if (v17) {
    CFRelease(v17);
  }
  BOOL v18 = [OZFxPlugVersioningAPI alloc];
  float64x2_t v19 = (std::__shared_weak_count *)*((void *)this + 45);
  uint64_t v26 = *((void *)this + 44);
  int64x2_t v27 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 7) = [(OZFxPlugVersioningAPI *)v18 initWithPluginLock:&v26];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v20 = [FxPlugAPIHandler alloc];
  uint64_t v21 = -[FxPlugAPIHandler initWithDelegate:](v20, "initWithDelegate:", *((void *)this + 4), v26);
  *((void *)this + 1OZLinkBehavior::clearAll(this, 1) = v21;
  if (!*((void *)this + 4) || !*((void *)this + 7) || !v21)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1BA9BF5D0](exception, "Unable to allocate some handlers in OZFxPlugSharedBase::allocateParameterHandlers()");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:");
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A2D8 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A3D0 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121AAA8 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A608 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A690 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A740 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121B008 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A8D0 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A950 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121A9F8 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121B0C8 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121AB90 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121AC40 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 7) forProtocol:&unk_1F121E208 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 11) forProtocol:&unk_1F1225D98 version:1];
  uint64_t result = [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121B330 version:1];
  if (a2)
  {
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121CE48 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121CEC8 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121D130 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121D3D0 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121D488 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121D2E0 version:1];
    uint64_t result = [*((id *)this + 1) registerAPIObject:*((void *)this + 11) forProtocol:&unk_1F122C358 version:1];
  }
  if (*((void *)this + 30)) {
    return [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F122C5B8 version:1];
  }
  return result;
}

void sub_1B7D4FC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::allocateAndRegisterRemainingHandlers(OZFxPlugSharedBase *this, int a2, OZChannelFolder *a3, OZFxPlugParameterHandler *a4)
{
  CFStringRef v6 = [OZFxPlugTimingAPI alloc];
  CFComparisonResult v7 = (std::__shared_weak_count *)*((void *)this + 45);
  uint64_t v18 = *((void *)this + 44);
  float64x2_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 6) = [(OZFxPlugTimingAPI *)v6 initWithPluginLock:&v18];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *((void *)this + 8) = objc_alloc_init(OZFxPlug3DAPI);
  *((void *)this + 10) = objc_alloc_init(OZFxPixelTransformsHandler);
  long long v8 = [OZFxPlugHostPrivateAPI alloc];
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 45);
  uint64_t v16 = *((void *)this + 44);
  uint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 13) = [(OZFxPlugHostPrivateAPI *)v8 initWithPluginLock:&v16];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  FxColorDescription v10 = [OZFxPlugColorGamutHandler alloc];
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 45);
  uint64_t v14 = *((void *)this + 44);
  uint64_t v15 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 16) = [(OZFxPlugColorGamutHandler *)v10 initWithPluginLock:&v14];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (!*((void *)this + 6)
    || !*((void *)this + 8)
    || !*((void *)this + 10)
    || !*((void *)this + 13)
    || !*((void *)this + 16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1BA9BF5D0](exception, "Unable to allocate some handlers in OZFxPlugSharedBase::allocateHandlers()");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((void *)this + 4), &unk_1F121AEF8, 1, v14);
  [*((id *)this + 1) registerAPIObject:*((void *)this + 4) forProtocol:&unk_1F121AF78 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 11) forProtocol:&unk_1F1225928 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 13) forProtocol:&unk_1F1219D80 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 8) forProtocol:&unk_1F121E380 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 8) forProtocol:&unk_1F121E2C8 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 13) forProtocol:&unk_1F1219DF0 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 6) forProtocol:&unk_1F121DA70 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 10) forProtocol:&unk_1F1219AD0 version:1];
  [*((id *)this + 1) registerAPIObject:*((void *)this + 11) forProtocol:&unk_1F1216B60 version:1];
  uint64_t result = [*((id *)this + 1) registerAPIObject:*((void *)this + 16) forProtocol:&unk_1F12189D0 version:1];
  if (a2)
  {
    [*((id *)this + 1) registerAPIObject:*((void *)this + 6) forProtocol:&unk_1F121DE28 version:1];
    [*((id *)this + 1) registerAPIObject:*((void *)this + 11) forProtocol:&unk_1F122C1D8 version:1];
    return [*((id *)this + 1) registerAPIObject:*((void *)this + 8) forProtocol:&unk_1F121E3F8 version:1];
  }
  return result;
}

void sub_1B7D4FF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t queryStaticProps(NSDictionary *a1, int a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  id v10 = [(NSDictionary *)a1 objectForKey:@"UsesRationalTime"];
  if (v10)
  {
    if (a2) {
      char v11 = [v10 BOOLValue];
    }
    else {
      char v11 = 1;
    }
  }
  else
  {
    char v11 = a2 ^ 1;
  }
  *a3 = v11;
  id v12 = [(NSDictionary *)a1 objectForKey:@"SupportsHeliumRendering"];
  if (v12) {
    *a4 = [v12 BOOLValue];
  }
  id v13 = [(NSDictionary *)a1 objectForKey:@"SupportsHeliumCPURendering"];
  if (v13) {
    uint64_t result = [v13 BOOLValue];
  }
  else {
    uint64_t result = 1;
  }
  *a5 = result;
  return result;
}

unint64_t OZFxPlugSharedBase::pluginProperties(OZFxPlugSharedBase *this)
{
  uint64_t v1 = (atomic_ullong *)((char *)this + 224);
  if (!atomic_load((unint64_t *)this + 28))
  {
    (*(void (**)(void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2));
    id v4 = (id)[*((id *)this + 3) properties];
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(v1, (unint64_t *)&v5, (unint64_t)v4);
    if (!v5)
    {
      CFStringRef v6 = (void *)atomic_load((unint64_t *)this + 28);
      id v7 = v6;
    }
  }
  return atomic_load((unint64_t *)v1);
}

void OZFxPlugSharedBase::OZFxPlugSharedBase(OZFxPlugSharedBase *this, const OZFxPlugSharedBase *a2, OZChannelFolder *a3)
{
  *(void *)this = &unk_1F116F6A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  PCString::PCString((PCString *)this + 19, (const PCString *)a2 + 19);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 10);
    *((void *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)a2 + 22);
    *((_OWORD *)this + 10) = v5;
  }
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 185) = *((unsigned char *)a2 + 185);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)a2 + 186);
  *((unsigned char *)this + 186) = v6 & 1;
  *((unsigned char *)this + 187) = *((unsigned char *)a2 + 187);
  *((_WORD *)this + 94) = *((_WORD *)a2 + 94);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  __int16 v7 = *((_WORD *)a2 + 100);
  *(_WORD *)((char *)this + 233) = *(_WORD *)((char *)a2 + 233);
  *((_WORD *)this + 100) = v7;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 216) = *((unsigned char *)a2 + 216);
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 23OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((unsigned char *)a2 + 232);
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((void *)this + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)a2 + 32);
  *((void *)this + 33) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272), 1);
  *((void *)this + 34) = &unk_1F10933F0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 368), 1);
  *((_DWORD *)this + 110) = *((_DWORD *)a2 + 110);
  char v11 = this;
  std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>(&v11, &v10);
  long long v8 = v10;
  long long v10 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 45);
  *((_OWORD *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  createPlatformDelegate(this);
}

void sub_1B7D5052C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString *a12)
{
}

void sub_1B7D50534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v15);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a13);
  __cxa_begin_catch(a1);
  if (*(void *)(v13 + 240))
  {
    (*(void (**)(void, void))(**(void **)(v13 + 344) + 24))(*(void *)(v13 + 344), *(void *)(v13 + 16));
    *(void *)(v13 + 240) = 0;
  }
  uint64_t v17 = *(void **)(v13 + 24);
  if (v17)
  {

    *(void *)(v13 + 24) = 0;
  }
  uint64_t v18 = *(void **)(v13 + 16);
  if (v18)
  {

    *(void *)(v13 + 16) = 0;
  }
  if (*v14)
  {

    id *v14 = 0;
  }
  if (*(unsigned char *)(v13 + 200))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *(void *)(v13 + 136));
  }
  __cxa_rethrow();
}

void sub_1B7D50628(void *a1, int a2)
{
  if (a2 != 2)
  {
    __cxa_end_catch();
    __cxa_end_catch();
    JUMPOUT(0x1B7D50460);
  }
  __cxa_rethrow();
}

void sub_1B7D5064C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCMutex *a11)
{
}

void OZFxPlugSharedBase::resetFxLock(OZFxPlugSharedLock **this)
{
}

void OZFxPlugSharedBase::~OZFxPlugSharedBase(OZFxPlugSharedBase *this)
{
  *(void *)this = &unk_1F116F6A0;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v7);
  if (*((unsigned char *)this + 200))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 17));
  }
  (*(void (**)(void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2));
  (*(void (**)(void, void))(**((void **)this + 43) + 32))(*((void *)this + 43), *((void *)this + 2));
  (*(void (**)(void, void))(**((void **)this + 43) + 96))(*((void *)this + 43), 0);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 3));

  *((void *)this + 3) = 0;
  CFStringRef v2 = (void *)atomic_load((unint64_t *)this + 28);

  BOOL v3 = (id *)((char *)this + 8);
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A238];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A2D8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A3D0];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121CE48];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121AAA8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A608];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A690];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A740];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121CEC8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121D130];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A8D0];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A950];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121A9F8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121D2E0];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121AB90];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121D3D0];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121AC40];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121D488];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121B330];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121B008];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121B0C8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1225E40];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F122C498];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1225928];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F122C1D8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1225D98];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F122C358];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121AEF8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121E208];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121E168];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121DA70];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121DE28];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121E2C8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121E380];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121E3F8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1219AD0];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1219D80];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F121AF78];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F122C4F8];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F122C558];
  [*((id *)this + 1) unregisterAPIForProtocol:&unk_1F1216B60];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 4));
  uint64_t v4 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  [*v3 unregisterAPIForProtocol:&unk_1F1219DF0];

  *BOOL v3 = 0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v7);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 272));
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  PCString::~PCString((PCString *)this + 19);
}

uint64_t OZFxPlugSharedBase::restartPluginXPCIfNecessary(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2));
}

BOOL OZFxPlugSharedBase::isXPCBasedPlugin(OZFxPlugSharedBase *this)
{
  return *((void *)this + 30) != 0;
}

uint64_t OZFxPlugSharedBase::isConnectionValid(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 43) + 56))();
}

uint64_t OZFxPlugSharedBase::doPostConstructionActions(id *this)
{
  uint64_t v2 = [this[2] uuid];
  if (v2
    && (CFUUIDRef v3 = (CFUUIDRef)v2,
        uint64_t v4 = objc_msgSend((id)objc_msgSend(+[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager"), "plugInsForProtocol:", &unk_1F122C618), "objectEnumerator"), (v5 = objc_msgSend(v4, "nextObject")) != 0))
  {
    uint64_t v6 = (void *)v5;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      long long v8 = (void *)[v6 infoDictionary];
      uint64_t v9 = (void *)[v8 objectForKey:kFxPlugInfoProprerty_SupportedPlugins];
      if (!v9) {
        NSLog(&cfstr_UnableToFindAn.isa, [v6 displayName]);
      }
      long long v10 = (void *)[v9 objectEnumerator];
      uint64_t v11 = [v10 nextObject];
      if (v11) {
        break;
      }
LABEL_10:
      uint64_t v6 = (void *)[v4 nextObject];
      if (!v6) {
        goto LABEL_11;
      }
    }
    CFStringRef v12 = (const __CFString *)v11;
    while (1)
    {
      CFUUIDRef v13 = CFUUIDCreateFromString(v7, v12);
      if (v13 == v3) {
        break;
      }
      CFRelease(v13);
      CFStringRef v12 = (const __CFString *)[v10 nextObject];
      if (!v12) {
        goto LABEL_10;
      }
    }
    CFRelease(v3);
    *((unsigned char *)this + 188) = 1;
  }
  else
  {
LABEL_11:
    *((unsigned char *)this + 188) = 0;
    if (![this[4] hasPointParameters]) {
      goto LABEL_19;
    }
    if (!*((unsigned char *)this + 188)) {
      *((unsigned char *)this + 189) = 1;
    }
  }
  if (((objc_opt_respondsToSelector() & 1) == 0 || [this[3] oscIsPublishable:0])
    && !*((unsigned char *)this + 187))
  {
    [this[4] addPublishOSCCheckbox:10005];
  }
LABEL_19:
  [this[4] setDoneAddingParams:1];
  [this[4] saveParameterFlags];
  uint64_t v14 = (uint64_t (*)(id *))*((void *)*this + 57);

  return v14(this);
}

void OZFxPlugSharedBase::finishPluginSetup(OZFxPlugSharedBase *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v3 = objc_opt_respondsToSelector();
  if (v3)
  {
    id v18 = 0;
    Instance = (OZCoreGlobals *)OZCoreGlobals::getInstance((OZCoreGlobals *)v3);
    char v5 = *((unsigned char *)Instance + 8);
    *(unsigned char *)(OZCoreGlobals::getInstance(Instance) + 8) = 0;
    (*(void (**)(void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2));
    uint64_t v6 = (OZCoreGlobals *)[v2 finishInitialSetup:&v18];
    char v7 = (char)v6;
    *(unsigned char *)(OZCoreGlobals::getInstance(v6) + 8) = v5;
    if ((v7 & 1) == 0)
    {
      long long v8 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.ozone.framework"];
      uint64_t v9 = [v8 localizedStringForKey:@"FxPlug::Error Base" value:0 table:0];
      uint64_t v10 = [NSString stringWithValidatedFormat:v9, @"%@", 0, objc_msgSend(*((id *)this + 2), "displayName") validFormatSpecifiers error];
      uint64_t v11 = NSString;
      if (v18)
      {
        uint64_t v12 = [v18 localizedDescription];
        uint64_t v13 = [v11 stringWithFormat:@"%@\n%@\n%@", v10, v12, objc_msgSend(v18, "localizedFailureReason")];
      }
      else
      {
        uint64_t v13 = [NSString stringWithFormat:@"%@\n%@", v10, objc_msgSend(v8, "localizedStringForKey:value:table:", @"FxPlug::No Error Reason", 0, 0), v15];
      }
      CFStringRef v14 = (const __CFString *)v13;
      v17.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      PCString::set(&v17, (CFStringRef)[v8 localizedStringForKey:@"FxPlug::Error Title" value:0 table:0]);
      v16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      PCString::set(&v16, v14);
      OZChannelBase::setRangeName((OZChannelBase *)&v17, &v16);
      PCString::~PCString(&v16);
      PCString::~PCString(&v17);
    }
  }
}

void sub_1B7D50FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
}

void OZFxPlugSharedBase::getPluginUUID(const PCString *this@<X0>, PCString *a2@<X8>)
{
  CFUUIDRef v4 = (const __CFUUID *)[(__CFString *)this[2].var0 uuid];
  if (v4)
  {
    char v5 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
    a2->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
    PCString::set(a2, v5);
  }
  else
  {
    PCString::PCString(a2, this + 19);
  }
}

void sub_1B7D5107C(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::getPluginGroupUUID(id *this@<X0>, PCString *a2@<X8>)
{
  uint64_t v3 = (void *)[this[2] group];
  if (v3 && (CFUUIDRef v4 = (const __CFUUID *)[v3 uuid]) != 0)
  {
    char v5 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
    a2->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
    PCString::set(a2, v5);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B7D51110(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

BOOL OZFxPlugSharedBase::isPluginKilled(PCString *this)
{
  {
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  else
  {
    uint64_t v12 = (OZFxPlugSharedBase *)this;
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v13)
    {
      OZFxPlugSharedBase::isPluginKilled(void)const::killedPlugins = @"CIEdgeWork";
      qword_1E9EE6560 = (uint64_t)CFUUIDCreateFromString(v1, @"A417EA22-7BF3-44E4-BA42-D091E3355BBB");
      *(void *)algn_1E9EE6568 = @"Swirly";
      qword_1E9EE6570 = (uint64_t)CFUUIDCreateFromString(v1, @"D8FE4FA1-F495-47BC-8C43-1B257BA4842C");
      *(void *)algn_1E9EE6578 = @"OpticalFlow";
      qword_1E9EE6580 = (uint64_t)CFUUIDCreateFromString(v1, @"B7F71E12-4E10-11D9-A0DA-000A95AFC10A");
      *(void *)algn_1E9EE6588 = @"VectorizeColor";
      qword_1E9EE6590 = (uint64_t)CFUUIDCreateFromString(v1, @"8CB75514-C0FE-4418-B38D-93393EF651AF");
      *(void *)algn_1E9EE6598 = @"CIRingLens";
      qword_1E9EE65A0 = (uint64_t)CFUUIDCreateFromString(v1, @"9302994C-DDF4-4C33-AE10-A109894AB84A");
      *(void *)algn_1E9EE65A8 = @"SetMatte";
      qword_1E9EE65B0 = (uint64_t)CFUUIDCreateFromString(v1, @"BFE68F8A-64F1-11D9-BCCC-000A95AF90F2");
      *(void *)algn_1E9EE65B8 = @"Simple3d";
      qword_1E9EE65C0 = (uint64_t)CFUUIDCreateFromString(v1, @"7B3C336C-10B8-42B7-8114-FB87FECE240B");
    }
    this = (PCString *)v12;
  }
  uint64_t v2 = this + 19;
  uint64_t v3 = PCString::ns_str(this + 19);
  CFUUIDRef v4 = CFUUIDCreateFromString(v1, v3);
  if (KilledPlugin::compareUUIDs(v4, (const __CFUUID *)qword_1E9EE6560, v5))
  {
    unint64_t v6 = 0;
    BOOL v7 = 1;
    long long v8 = &OZFxPlugSharedBase::isPluginKilled(void)const::killedPlugins;
    while (([(__CFString *)PCString::ns_str(v2) isEqualToString:*v8] & 1) == 0)
    {
      if (v6 == 6)
      {
        BOOL v7 = 0;
        break;
      }
      BOOL v7 = v6 < 6;
      CFComparisonResult v10 = KilledPlugin::compareUUIDs(v4, (const __CFUUID *)v8[3], v9);
      v8 += 2;
      ++v6;
      if (v10 == kCFCompareEqualTo) {
        break;
      }
    }
  }
  else
  {
    BOOL v7 = 1;
  }
  CFRelease(v4);
  return v7;
}

void sub_1B7D51330(_Unwind_Exception *a1)
{
}

BOOL OZFxPlugSharedBase::isPluginMissing(PCString *this, PCString *a2)
{
  if (this[3].var0 || OZFxPlugSharedBase::isPluginKilled(this))
  {
    if (BYTE2(this[29].var0))
    {
      PCString::set(a2, this + 19);
      return BYTE2(this[29].var0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    PCString::set(a2, this + 19);
    return 1;
  }
}

CFComparisonResult OZFxPlugSharedBase::isHMTCompatible(PCString *this)
{
  int var0_low = LOBYTE(this[27].var0);
  OZFxPlugSharedBase::getPluginGroupUUID((id *)&this->var0, &v7);
  OZFxPlugSharedBase::getPluginUUID(this, &v6);
  CFComparisonResult v4 = OZDocumentBundleFormatUtils::isSupportedFxPlug((OZDocumentBundleFormatUtils *)(var0_low != 0), &v7, &v6, v3);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  return v4;
}

void sub_1B7D51428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZFxPlugSharedBase::getDisplayName(id *this@<X0>, PCString *a2@<X8>)
{
  if (objc_msgSend((id)objc_msgSend(this[2], "displayName"), "length"))
  {
    CFStringRef v4 = (const __CFString *)[this[2] displayName];
    a2->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
    PCString::set(a2, v4);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

BOOL OZFxPlugSharedBase::isPKPlugIn(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 43) + 88))(*((void *)this + 43)) != 0;
}

uint64_t OZFxPlugSharedBase::getDynamicPropertyAtTime(id *this, const __CFString *a2, CMTime *a3)
{
  uint64_t result = [(id)OZFxPlugSharedBase::pluginProperties((OZFxPlugSharedBase *)this) objectForKey:a2];
  if (!result)
  {
    if (*((unsigned char *)this + 199))
    {
      (*(void (**)(id, id))(*(void *)this[43] + 40))(this[43], this[2]);
      long long v10 = *(_OWORD *)&a3->value;
      CMTimeEpoch epoch = a3->epoch;
      uint64_t v7 = [this[4] figTimeToFxTime:&v10 withConversionData:0];
      uint64_t v9 = 0;
      long long v8 = (void *)[this[3] dynamicPropertiesAtTime:v7 withError:&v9];
      uint64_t result = 0;
      if (!v9) {
        return [v8 objectForKey:a2];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZFxPlugSharedBase::variesOverTime(OZFxPlugSharedBase *this)
{
  (*(void (**)(void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2));
  uint64_t v2 = (void *)*((void *)this + 3);

  return [v2 variesOverTime];
}

void *OZFxPlugSharedBase::isPixelIndependent(id *this, CMTime *a2)
{
  if (*((unsigned char *)this + 216))
  {
    CMTime v3 = *a2;
    return (void *)((*((unsigned int (**)(id *, CMTime *))*this + 31))(this, &v3) == 6);
  }
  else
  {
    CMTime v4 = *a2;
    uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"PixelIndependent", &v4);
    if (result) {
      return (void *)[result BOOLValue];
    }
  }
  return result;
}

void *OZFxPlugSharedBase::isPositionIndependent(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"PositionIndependent", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

uint64_t OZFxPlugSharedBase::isTimeIndependent(OZFxPlugSharedBase *this)
{
  CFAllocatorRef v1 = (void *)[(id)OZFxPlugSharedBase::pluginProperties(this) objectForKey:@"MayRemapTime"];
  if (v1) {
    return [v1 BOOLValue] ^ 1;
  }
  else {
    return 1;
  }
}

uint64_t OZFxPlugSharedBase::getStaticProperty(OZFxPlugSharedBase *this, const __CFString *a2)
{
  CMTime v3 = (void *)OZFxPlugSharedBase::pluginProperties(this);

  return [v3 objectForKey:a2];
}

void *OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"TransformsFromLocalToScreenSpace", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

void *OZFxPlugSharedBase::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"SupportsLargeRenderScale", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

void *OZFxPlugSharedBase::supportsInternalMixing(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"SupportsInternalMixing", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

void *OZFxPlugSharedBase::doesHaveInputSizeLimit(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"InputSizeLimit", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

void *OZFxPlugSharedBase::doesSupportStableAnimation(id *this, CMTime *a2)
{
  CMTime v3 = *a2;
  uint64_t result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"SupportsStableAnimation", &v3);
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

uint64_t OZFxPlugSharedBase::changesOutputSize(OZFxPlugSharedBase *this, CMTime *a2)
{
  return 1;
}

uint64_t OZFxPlugSharedBase::requiresPixelCasting(id *this, CMTime *a2)
{
  CMTime v5 = *a2;
  DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"UsesNonmatchingTextureLayout", &v5);
  if (!DynamicPropertyAtTime) {
    return this[30] == 0;
  }

  return [DynamicPropertyAtTime BOOLValue];
}

uint64_t OZFxPlugSharedBase::setPluginVersionAtCreation(uint64_t this, int a2)
{
  *(_DWORD *)(this + 19OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::doesSupportHeliumRendering(OZFxPlugSharedBase *this, CMTime *a2)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t OZFxPlugSharedBase::doesSupportHeliumCPURendering(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 233);
}

uint64_t OZFxPlugSharedBase::getBestRenderingBehavior(OZFxPlugSharedBase *this, LiRenderParameters **a2, BOOL *a3, BOOL *a4, CMTime *a5)
{
  CMTime v10 = *a5;
  uint64_t result = (*(uint64_t (**)(OZFxPlugSharedBase *, CMTime *))(*(void *)this + 232))(this, &v10);
  if ((result & 1) == 0 && *a3 && *a4)
  {
    uint64_t result = LiAgent::getRenderDevice(a2);
    BOOL v9 = *(_DWORD *)(*(void *)result + 8) == 0;
    *a3 = *(_DWORD *)(*(void *)result + 8) != 0;
    *a4 = v9;
  }
  return result;
}

uint64_t OZFxPlugSharedBase::getPixelTransformSupport(id *this, CMTime *a2)
{
  CMTime v8 = *a2;
  DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"PixelTransformSupport", &v8);
  if (DynamicPropertyAtTime) {
    uint64_t v5 = [DynamicPropertyAtTime intValue];
  }
  else {
    uint64_t v5 = 0;
  }
  if (*((unsigned char *)this + 216))
  {
    CMTime v8 = *a2;
    PCString v6 = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"PixelIndependent", &v8);
    if (v6)
    {
      if ([v6 BOOLValue]) {
        return 6;
      }
      else {
        return v5;
      }
    }
  }
  return v5;
}

uint64_t OZFxPlugSharedBase::isOSCPublished(OZFxPlugSharedBase *this)
{
  CFAllocatorRef v1 = (void *)*((void *)this + 4);
  if (((*(uint64_t (**)(OZFxPlugSharedBase *))(*(void *)this + 288))(this) & 1) != 0
    || (uint64_t result = [v1 hasPointParameters], result))
  {
    uint64_t result = [v1 publishOSCChannel];
    if (result)
    {
      CMTime v3 = (OZChannel *)[v1 publishOSCChannel];
      return OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0) == 1;
    }
  }
  return result;
}

void *OZFxPlugSharedBase::isThreadSafe(OZFxPlugSharedBase *this)
{
  uint64_t result = (void *)[(id)OZFxPlugSharedBase::pluginProperties(this) objectForKey:@"IsThreadSafe"];
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

uint64_t OZFxPlugSharedBase::canRenderThreadSafely(OZFxPlugSharedBase *this)
{
  if (*((unsigned char *)this + 216)) {
    return (*(uint64_t (**)(void))(*(void *)this + 152))();
  }
  else {
    return 1;
  }
}

BOOL OZFxPlugSharedBase::usesRationalTime(OZFxPlugSharedBase *this)
{
  return !*((unsigned char *)this + 216) || *((unsigned char *)this + 201) != 0;
}

unint64_t OZFxPlugSharedBase::decodePluginNCLCFromProperty(id *this, const __CFString *a2)
{
  CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t DynamicPropertyAtTime = OZFxPlugSharedBase::getDynamicPropertyAtTime(this, a2, &v6);
  if (DynamicPropertyAtTime)
  {
    CMTime v3 = (void *)DynamicPropertyAtTime;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      int v4 = [v3 unsignedIntegerValue];
      if (FxIsSupportedNCLCValue_Private(v4)) {
        return FxConvertFxNCLCValueToPCNCLCCode(v4);
      }
      NSLog(&cfstr_ColorPropertyW.isa, BYTE2(v4), BYTE1(v4));
    }
    else
    {
      NSLog(&cfstr_UnrecognizedCo.isa);
    }
  }
  return 0x200000002;
}

unint64_t OZFxPlugSharedBase::getFallbackNCLC(id *a1, int a2)
{
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(a1, @"DesiredProcessingColorInfo", &v7);
  if (DynamicPropertyAtTime) {
    LODWORD(DynamicPropertyAtTime) = [DynamicPropertyAtTime intValue];
  }
  if (a2 == 1)
  {
    if (DynamicPropertyAtTime == 2)
    {
      unsigned int v4 = 9;
      goto LABEL_12;
    }
LABEL_8:
    unsigned int v4 = 9;
    goto LABEL_9;
  }
  if (a2) {
    goto LABEL_8;
  }
  if (DynamicPropertyAtTime == 2)
  {
    unsigned int v4 = 1;
LABEL_12:
    uint64_t v5 = 1;
    return PCMakeNCLCCode(v4, v5);
  }
  unsigned int v4 = 1;
LABEL_9:
  uint64_t v5 = 8;
  return PCMakeNCLCCode(v4, v5);
}

unint64_t OZFxPlugSharedBase::getDesiredPluginNCLC(id *a1, int a2)
{
  if (a2 == 1) {
    CFStringRef v4 = @"HDRWorkingSpace";
  }
  else {
    CFStringRef v4 = @"SDRWorkingSpace";
  }
  unint64_t v7 = OZFxPlugSharedBase::decodePluginNCLCFromProperty(a1, v4);
  int v8 = v5;
  if (PCNCLCCodeIsKnownRGB(&v7)) {
    return v7;
  }
  else {
    return OZFxPlugSharedBase::getFallbackNCLC(a1, a2);
  }
}

unint64_t OZFxPlugSharedBase::getPluginNCLC(id *this, const LiAgent *a2)
{
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  if (CGColorSpace != (CGColorSpace *)PCColorSpaceCache::cgRec2020Linear(CGColorSpace)) {
    return PCGetNCLCCodeForColorSpace(CGColorSpace);
  }
  int v6 = (*((uint64_t (**)(id *, const LiAgent *))*this + 22))(this, a2);
  return OZFxPlugSharedBase::getDesiredPluginNCLC(this, v6);
}

CGColorSpaceRef OZFxPlugSharedBase::getPluginColorSpace(id *this, const LiAgent *a2)
{
  unint64_t PluginNCLC = OZFxPlugSharedBase::getPluginNCLC(this, a2);
  int v6 = v3;
  CGColorSpaceRef result = PCGetNCLCColorSpace((unsigned int *)&PluginNCLC);
  if (!result) {
    return (CGColorSpaceRef)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  }
  return result;
}

uint64_t OZFxPlugSharedBase::getDynamicRangeTrackingSupport(id *this, const LiAgent *a2)
{
  uint64_t RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  uint64_t result = FxColorDescription::isDynamicRangeManaged(RequestedColorDescription);
  if (result)
  {
    int v5 = (CMTime *)MEMORY[0x1E4F1FA48];
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    uint64_t result = OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"AutoColorProcessingSupport", &v7);
    if (result)
    {
      CMTime v8 = *v5;
      uint64_t DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, @"AutoColorProcessingSupport", &v8);
      if (DynamicPropertyAtTime
        && (LODWORD(DynamicPropertyAtTime) = [DynamicPropertyAtTime intValue],
            DynamicPropertyAtTime > 3))
      {
        return 0;
      }
      else
      {
        return *((unsigned int *)&xmmword_1B7E74440 + DynamicPropertyAtTime);
      }
    }
  }
  return result;
}

uint64_t OZFxPlugSharedBase::getPluginColorDescription@<X0>(id *this@<X0>, const LiAgent *a2@<X1>, FxColorDescription *a3@<X8>)
{
  int PluginColorSpace = OZFxPlugSharedBase::getPluginColorSpace(this, a2);
  FxMakeLegacyColorDescription(PluginColorSpace, 1, (uint64_t)a3);
  uint64_t result = OZFxPlugSharedBase::getDynamicRangeTrackingSupport(this, a2);
  switch((int)result)
  {
    case 0:
      CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
      BOOL v9 = CGColorSpace == (PCColorSpaceCache *)PCColorSpaceCache::cgRec2020Linear(CGColorSpace);
      FxColorDescription::setDynamicRange(a3, v9);
      uint64_t result = FxColorDescription::setToneMapMethod(a3, (const PCToneMapMethod *)&kPCNoToneMapMethod);
      break;
    case 1:
      PCToneMapMethod v17 = (PCToneMapMethod)3;
      FxColorDescription::setToneMapMethod(a3, &v17);
      uint64_t v12 = 0;
      goto LABEL_7;
    case 2:
      uint64_t RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(RequestedColorDescription);
      FxColorDescription::setToneMapMethod(a3, ToneMapMethod);
      uint64_t v12 = 1;
LABEL_7:
      uint64_t result = FxColorDescription::setDynamicRange(a3, v12);
      break;
    case 3:
      int v13 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      if (FxColorDescription::isSDR(v13))
      {
        PCToneMapMethod v17 = (PCToneMapMethod)3;
        FxColorDescription::setToneMapMethod(a3, &v17);
      }
      else
      {
        CFStringRef v14 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
        uint64_t v15 = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(v14);
        FxColorDescription::setToneMapMethod(a3, v15);
      }
      uint64_t DynamicRange = FxColorDescription::getDynamicRange(v13);
      uint64_t result = FxColorDescription::setDynamicRange(a3, DynamicRange);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B7D52120(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double OZFxPlugSharedBase::getFxPlugPixelAspectRatio(OZFxPlugSharedBase *this)
{
  CFAllocatorRef v1 = (const void *)(*(uint64_t (**)(OZFxPlugSharedBase *))(*(void *)this + 24))(this);
  if (!v1) {
    return 1.0;
  }
  if (!v2) {
    return 1.0;
  }
  int v3 = *(void (**)(void))(*(void *)v2 + 1328);

  v3();
  return result;
}

float64x2_t OZFxPlugSharedBase::adjustImageMatrix(uint64_t a1, float64x2_t *a2)
{
  result.f64[0] = 1.0 / (*(double (**)(uint64_t))(*(void *)a1 + 336))(a1);
  if (result.f64[0] != 1.0)
  {
    float64x2_t v4 = vmulq_n_f64(*a2, result.f64[0]);
    float64x2_t result = vmulq_n_f64(a2[1], result.f64[0]);
    *a2 = v4;
    a2[1] = result;
  }
  return result;
}

void *OZFxPlugSharedBase::setup3DAPI(OZFxPlugSharedBase *this, const LiAgent *a2, const OZRenderParams *a3)
{
  float64x2_t result = (void *)(*(uint64_t (**)(OZFxPlugSharedBase *))(*(void *)this + 24))(this);
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v9 = 0x3FF0000000000000;
  uint64_t v6 = 0x3FF0000000000000;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  if (result)
  {
    int v5 = result;
    if (result)
    {
      (*(void (**)(void *, uint64_t *, const OZRenderParams *))(*(void *)result + 1256))(result, &v6, a3);
      float64x2_t result = (void *)(*(uint64_t (**)(void *))(*(void *)v5 + 272))(v5);
      if (result) {
        PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>();
      }
    }
  }
  return result;
}

void sub_1B7D52938(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 208));
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::makeAgentForGettingState(OZFxPlugSharedBase *this, const OZRenderParams *a2)
{
  uint64_t v3 = (*(uint64_t (**)(OZFxPlugSharedBase *))(*(void *)this + 24))(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
  int v5 = (void *)*((void *)a2 + 160);
  uint64_t v23 = v5;
  if (v5) {
    uint64_t v6 = (PCShared_base *)((char *)v5 + *(void *)(*v5 - 24));
  }
  else {
    uint64_t v6 = 0;
  }
  PCSharedCount::PCSharedCount(&v24, v6);
  uint64_t WorkingColorDescription = OZRenderParams::getWorkingColorDescription(a2);
  float BlendingGamma = OZRenderParams::getBlendingGamma(a2);
  uint64_t RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  LiRenderParameters::LiRenderParameters(&v11, WorkingColorDescription, RenderNodeList, BlendingGamma);
  int v17 = *((_DWORD *)a2 + 85);
  char Do3DIntersectionAntialiasing = OZRenderParams::getDo3DIntersectionAntialiasing(a2);
  char v14 = *((unsigned char *)a2 + 516);
  long long v10 = *(_OWORD *)((char *)a2 + 1332);
  long long v15 = *(_OWORD *)((char *)a2 + 1316);
  v16[0] = v10;
  *(_OWORD *)((char *)v16 + 14) = *(_OWORD *)((char *)a2 + 1346);
  long long v11 = v23;
  int v12 = *(_DWORD *)(v4 + 512);
  char DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  char RasterizeEdges = LiRenderingTechnology::getRasterizeEdges((const OZRenderParams *)((char *)a2 + 1316));
  char v19 = *((unsigned char *)a2 + 512);
  char v22 = *((unsigned char *)a2 + 242);
  char v20 = 0;
  operator new();
}

void sub_1B7D52D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  uint64_t v9 = v8;
  MEMORY[0x1BA9BFBA0](v9, 0x10E0C4071C63EBFLL);
  MEMORY[0x1BA9BFBA0](v7, 0x10F0C40F73640D2);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)va);
  PCSharedCount::~PCSharedCount(v6);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::prepareHandlersForRendering(id *a1, const LiAgent *a2, const PCSharedCount *a3, OZRenderParams *a4, uint64_t a5, uint64_t a6)
{
  OZFxPlugSharedBase::setup3DAPI((OZFxPlugSharedBase *)a1, a2, a4);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a3->var0;
  PCSharedCount::PCSharedCount(&v13, a3 + 1);
  [a1[4] setRenderParams:a4 withLithiumInput:&var0 withLithiumAgent:a2];
  objc_msgSend(a1[10], "setAgent:", a2, var0);
  if (a5) {
    [a1[10] setPreTransform:a5];
  }
  if (a6) {
    [a1[10] setPostTransform:a6];
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B7D52EE4(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::cleanupHandlersAfterRendering(id *this, const CMTime *a2)
{
  [this[10] setAgent:0];
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  [this[10] setPreTransform:&v4];
  return [this[10] setPostTransform:&v4];
}

uint64_t OZFxPlugSharedBase::getColorGamutForPlugIn(id *this, const LiAgent *a2)
{
  uint64_t result = (*((uint64_t (**)(id *))*this + 4))(this);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 272))(result);
    if (result)
    {
      long long v5 = (OZScene *)result;
      uint64_t RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      if (!FxColorDescription::isDynamicRangeManaged(RequestedColorDescription)) {
        goto LABEL_7;
      }
      int DynamicRangeTrackingSupport = OZFxPlugSharedBase::getDynamicRangeTrackingSupport(this, a2);
      if (DynamicRangeTrackingSupport == 3)
      {
        long long v8 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
        return FxColorDescription::isHDR(v8);
      }
      if (DynamicRangeTrackingSupport == 2) {
        return 1;
      }
      if (DynamicRangeTrackingSupport)
      {
        return 0;
      }
      else
      {
LABEL_7:
        return OZScene::getComputedWorkingGamut(v5);
      }
    }
  }
  return result;
}

BOOL OZFxPlugSharedBase::FxColorPrimariesForPlugIn(OZFxPlugSharedBase *this, const LiAgent *a2)
{
  return (*(unsigned int (**)(OZFxPlugSharedBase *, const LiAgent *))(*(void *)this + 176))(this, a2) == 1;
}

uint64_t OZFxPlugSharedBase::SetImageColorPrimaries(OZFxPlugSharedBase *this, FxImage *a2, const LiAgent *a3)
{
  uint64_t v4 = (*(int (**)(OZFxPlugSharedBase *, const LiAgent *))(*(void *)this + 168))(this, a3);

  return [(FxImage *)a2 setFxColorPrimaries:v4];
}

uint64_t OZFxPlugSharedBase::getPluginSessionID(OZFxPlugSharedBase *this)
{
  return *((void *)this + 30);
}

void OZFxPlugSharedBase::writeDynamicParameterChannel(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 20000);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 110, &lpsrc->var4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, lpsrc->var3);
    if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
    {
      uint64_t v13 = OZFactory::fileRefID(lpsrc->var1, v12);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v13);
    }
    if (v6 || v7 || v8 || v9)
    {
      v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      (*(void (**)(void))(**(void **)(*((void *)v10 + 14) + 8) + 264))();
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21001);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, 0.0);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      (*(void (**)(void))(**(void **)(*((void *)v10 + 14) + 8) + 256))();
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21002);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, 0.0);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v15 = *(double *)(*((void *)v10 + 16) + 16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21003);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v15);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v16 = (*(double (**)(OZChannelEnum *))(*(void *)v10 + 808))(v10);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21004);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v16);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v17 = *(double *)(*((void *)v10 + 16) + 32);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21005);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v17);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v18 = *(double *)(*((void *)v10 + 16) + 24);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21006);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v18);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
LABEL_11:
      char v14 = (OZChannel *)v10;
      goto LABEL_12;
    }
    if (v5)
    {
      char v14 = v5;
LABEL_12:
      double DefaultValue = OZChannel::getDefaultValue(v14);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21008);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, DefaultValue);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
LABEL_13:
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      return;
    }
    if (v10)
    {
      int NumberOfStrings = OZChannelEnum::getNumberOfStrings(v10);
      if (NumberOfStrings >= 1)
      {
        int v21 = NumberOfStrings;
        for (unsigned int i = 0; i != v21; ++i)
        {
          String = (const PCString *)OZChannelEnum::getString(v10, i);
          PCString::PCString(&v43, String);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21007);
          (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v43);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          PCString::~PCString(&v43);
        }
      }
      goto LABEL_11;
    }
    if (v38)
    {
      OZChannel::OZChannel(&v42, (const OZChannelBase *)(v38 + 136), 0);
      v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v42.var2 = (void **)&unk_1F1101050;
      OZChannel::OZChannel(&v41, (const OZChannelBase *)(v38 + 288), 0);
      v41.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v41.var2 = (void **)&unk_1F1101050;
      OZChannel::OZChannel(&v40, (const OZChannelBase *)(v38 + 440), 0);
      v40.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v40.var2 = (void **)&unk_1F1101050;
      OZChannel::OZChannel(&v39, (const OZChannelBase *)v38 + 9, 0);
      v39.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v39.var2 = (void **)&unk_1F1101050;
      double v24 = OZChannel::getDefaultValue(&v42);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21009);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v24);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v25 = OZChannel::getDefaultValue(&v41);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21010);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v25);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v26 = OZChannel::getDefaultValue(&v40);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21011);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v26);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v27 = OZChannel::getDefaultValue(&v39);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21012);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v27);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      OZChannel::~OZChannel(&v39);
    }
    else
    {
      if (!v37)
      {
        if (v36)
        {
          OZChannel::OZChannel(&v42, (const OZChannelBase *)(v36 + 136), 0);
          v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
          v42.var2 = (void **)&unk_1F1101050;
          OZChannel::OZChannel(&v41, (const OZChannelBase *)(v36 + 288), 0);
          v41.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
          v41.var2 = (void **)&unk_1F1101050;
          double v31 = OZChannel::getDefaultValue(&v42);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21013);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v31);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          double v32 = OZChannel::getDefaultValue(&v41);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21014);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v32);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
        else
        {
          if (v35 || !v11) {
            goto LABEL_13;
          }
          OZChannel::OZChannel(&v42, (const OZChannelBase *)(v11 + 136), 0);
          v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
          v42.var2 = (void **)&unk_1F1101050;
          OZChannel::OZChannel(&v41, (const OZChannelBase *)(v11 + 288), 0);
          v41.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
          v41.var2 = (void **)&unk_1F1101050;
          double v33 = OZChannel::getDefaultValue(&v42);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21016);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v33);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
          double v34 = OZChannel::getDefaultValue(&v41);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21017);
          (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v34);
          (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        }
        goto LABEL_25;
      }
      OZChannel::OZChannel(&v42, (const OZChannelBase *)(v37 + 136), 0);
      v42.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v42.var2 = (void **)&unk_1F1101050;
      OZChannel::OZChannel(&v41, (const OZChannelBase *)(v37 + 288), 0);
      v41.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v41.var2 = (void **)&unk_1F1101050;
      OZChannel::OZChannel(&v40, (const OZChannelBase *)(v37 + 440), 0);
      v40.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1100CF0;
      v40.var2 = (void **)&unk_1F1101050;
      double v28 = OZChannel::getDefaultValue(&v42);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21009);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v28);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v29 = OZChannel::getDefaultValue(&v41);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21010);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v29);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v30 = OZChannel::getDefaultValue(&v40);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21011);
      (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    OZChannel::~OZChannel(&v40);
LABEL_25:
    OZChannel::~OZChannel(&v41);
    OZChannel::~OZChannel(&v42);
    goto LABEL_13;
  }
}

void sub_1B7D54388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OZChannel *a5, OZChannel *a6, OZChannel *a7, OZChannel *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  OZChannel::~OZChannel((OZChannel *)&a68);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::writeDynamicParameterGroup(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZFactory **a3)
{
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 20000);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)a3 + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)a3 + 6));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v7 = OZFactory::fileRefID(a3[1], v6);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v7);
  }
  OZFxPlugSharedBase::writeFolder(this, a2, (OZChannelFolder *)a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21015);
  (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 48))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  long long v8 = *(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24);

  return v8(a2);
}

void OZFxPlugSharedBase::writeFolder(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelFolder *a3)
{
  char v14 = this;
  uint64_t v3 = (uint64_t *)*((void *)a3 + 14);
  uint64_t v4 = *v3;
  if (*v3 != v3[1])
  {
    long long v5 = (void *)*((void *)this + 4);
    double v15 = (uint64_t *)*((void *)a3 + 14);
    double v16 = v5;
    do
    {
      if (objc_msgSend(v5, "containsParameterWithID:", *(unsigned int *)(*(void *)v4 + 24), v14))
      {
        uint64_t Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(a3, *(_DWORD *)(*(void *)v4 + 24));
        uint64_t v7 = Descendant;
        if (!Descendant) {
          goto LABEL_20;
        }
        uint64_t v3 = v15;
        if (!v19 || v23 || v22 || v21 || v20 || v8 || v9 || v10 || v11 || v12 || v13 || Descendant) {
LABEL_20:
        }
          OZFxPlugSharedBase::writeDynamicParameterChannel((OZFxPlugSharedBase *)Descendant, a2, v7);
        else {
          OZFxPlugSharedBase::writeDynamicParameterGroup(v14, a2, v19);
        }
        long long v5 = v16;
      }
      v4 += 8;
    }
    while (v4 != v3[1]);
  }
}

uint64_t OZFxPlugSharedBase::writeDynamicParams(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelFolder *a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZDynamicChannelsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21000);
  OZFxPlugSharedBase::writeFolder(this, a2, a3);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZFxPlugSharedBase::parseDynamicParamElement(OZFxPlugSharedBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  *(void *)unint64_t v53 = 0;
  PCSharedCount::PCSharedCount(&v52);
  double v51 = 0.0;
  PCSharedCount::PCSharedCount(&v50);
  long long v6 = (void *)*((void *)this + 4);
  uint64_t v7 = (const void *)*((void *)this + 26);
  if (v7) {
  else
  }
    long long v8 = 0;
  int v9 = *((_DWORD *)a3 + 2);
  switch(v9)
  {
    case 21000:
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v50))
      {
        uint64_t v10 = (const void *)*((void *)this + 26);
        if (v10)
        {
          if (v11)
          {
            if (!*((void *)this + 30))
            {
              long long v12 = v11;
              uint64_t v13 = (void *)*((void *)this + 3);
              PCString::PCString(&v49, (const PCString *)&v50);
              v14.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&v49;
              OZChannelButton::setCallbackSelectorAsString(v12, v14, v13);
              PCString::~PCString(&v49);
            }
          }
        }
      }
      break;
    case 21001:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setMin(v8, v51);
      }
      break;
    case 21002:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setMax(v8, v51);
      }
      break;
    case 21003:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setSliderMin(v8, v51);
      }
      break;
    case 21004:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setSliderMax(v8, v51);
      }
      break;
    case 21005:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setCoarseDelta(v8, v51);
      }
      break;
    case 21006:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51)) {
        OZChannel::setFineDelta(v8, v51);
      }
      break;
    case 21007:
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v50))
      {
        double v31 = (const void *)*((void *)this + 26);
        if (v31)
        {
          if (v32) {
            OZChannelEnum::addString(v32, (PCString *)&v50);
          }
        }
      }
      break;
    case 21008:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        OZChannel::setDefaultValue(v8, v51);
        (*((void (**)(OZChannel *, void))v8->var0 + 36))(v8, 0);
      }
      break;
    case 21009:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        double v33 = (const void *)*((void *)this + 26);
        if (v33)
        {
          if (v34)
          {
            OZChannel::setDefaultValue((OZChannel *)(v34 + 136), v51);
            (*(void (**)(char *, void))(*((void *)v34 + 17) + 288))(v34 + 136, 0);
          }
          else if (v30)
          {
            goto LABEL_79;
          }
        }
      }
      break;
    case 21010:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        long long v35 = (const void *)*((void *)this + 26);
        if (v35)
        {
          if (v36)
          {
            OZChannel::setDefaultValue((OZChannel *)(v36 + 288), v51);
            (*(void (**)(char *, void))(*((void *)v36 + 36) + 288))(v36 + 288, 0);
          }
          else if (v27)
          {
            goto LABEL_22;
          }
        }
      }
      break;
    case 21011:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        int32x2_t v37 = (const void *)*((void *)this + 26);
        if (v37)
        {
          if (v38)
          {
            OZChannel::setDefaultValue((OZChannel *)(v38 + 440), v51);
            (*(void (**)(char *, void))(*((void *)v38 + 55) + 288))(v38 + 440, 0);
          }
          else if (v39)
          {
            float64x2_t v47 = v39 + 440;
            OZChannel::setDefaultValue((OZChannel *)(v39 + 440), v51);
            (*(void (**)(char *, void))(*(void *)v47 + 288))(v47, 0);
          }
        }
      }
      break;
    case 21012:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        OZChannel v40 = (const void *)*((void *)this + 26);
        if (v40)
        {
          if (v41)
          {
            OZChannel v42 = v41 + 1008;
            OZChannel::setDefaultValue((OZChannel *)(v41 + 1008), v51);
            (*(void (**)(char *, void))(*(void *)v42 + 288))(v42, 0);
          }
        }
      }
      break;
    case 21013:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        PCString v43 = (const void *)*((void *)this + 26);
        if (v43)
        {
          if (v30) {
            goto LABEL_79;
          }
        }
      }
      break;
    case 21014:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        double v26 = (const void *)*((void *)this + 26);
        if (v26)
        {
          if (v27)
          {
LABEL_22:
            double v28 = v27 + 288;
            OZChannel::setDefaultValue((OZChannel *)(v27 + 288), v51);
            (*(void (**)(char *, void))(*(void *)v28 + 288))(v28, 0);
          }
        }
      }
      break;
    case 21015:
      *((void *)this + 26) = 0;
      [v6 endParameterSubGroup];
      break;
    case 21016:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        double v29 = (const void *)*((void *)this + 26);
        if (v29)
        {
          if (v30) {
            goto LABEL_79;
          }
        }
      }
      break;
    case 21017:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v51))
      {
        uint64_t v44 = (const void *)*((void *)this + 26);
        if (v44)
        {
          if (v30)
          {
LABEL_79:
            float64x2_t v46 = v30 + 136;
            OZChannel::setDefaultValue((OZChannel *)(v30 + 136), v51);
            (*(void (**)(char *, void))(*(void *)v46 + 288))(v46, 0);
          }
        }
      }
      break;
    default:
      if (v9 == 20000)
      {
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v53[1]);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v52);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v53);
        double v15 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v53[0]);
        if (v15)
        {
          if (v16)
          {
            double v17 = v16;
            uint64_t v18 = *v16;
            double v25 = *(uint64_t (**)(const void *, PCSharedCount *, void))(v18 + 168);
            if (!(v19 | v20) || v21 || v22 || v23 || v24)
            {
              uint64_t v45 = v25(v17, &v52, v53[1]);
              *((void *)this + 26) = v45;
              [v6 addExistingChannel:v45];
            }
            else
            {
              objc_msgSend(v6, "addExistingGroup:", v25(v17, &v52, v53[1]));
              *((void *)this + 26) = 0;
            }
          }
        }
      }
      break;
  }
  PCString::~PCString((PCString *)&v50);
  PCString::~PCString((PCString *)&v52);
  return 1;
}

void sub_1B7D55588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, PCString a13)
{
}

unsigned char *OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization(id *this)
{
  uint64_t result = (unsigned char *)(*((uint64_t (**)(id *))*this + 26))(this);
  if (result)
  {
    uint64_t result = (unsigned char *)[this[4] channelMap];
    uint64_t v3 = result + 8;
    uint64_t v4 = *(void **)result;
    if (*(unsigned char **)result != result + 8)
    {
      do
      {
        uint64_t result = OZFactory::setNeedsSaving(*(OZFactory **)(v4[5] + 8), (const OZFactory *)1);
        long long v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            long long v6 = v5;
            long long v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            long long v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
    }
  }
  return result;
}

void OZFxPlugSharedBase::pushDynamicParamScope(OZFxPlugSharedBase *this, PCSerializerReadStream *a2)
{
}

uint64_t OZFxPlugSharedBase::updateFlipChannel(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 32);
  if (v1)
  {
    double v2 = 0.0;
    if (*(_DWORD *)(this + 440) <= 4u)
    {
      if ([*(id *)(this + 32) absolutePointsChannel]) {
        double v2 = 0.0;
      }
      else {
        double v2 = 1.0;
      }
    }
    this = [v1 flipChannel];
    if (this)
    {
      uint64_t v4 = *(uint64_t (**)(__n128))(*(void *)this + 712);
      v3.n128_f64[0] = v2;
      return v4(v3);
    }
  }
  return this;
}

void *OZFxPlugSharedBase::updateInputPointsChannel(OZFxPlugSharedBase *this)
{
  if (*((_DWORD *)this + 110) >= 5u) {
    double v1 = 1.0;
  }
  else {
    double v1 = 0.0;
  }
  uint64_t result = (void *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = (void *)[result inputPointsChannel];
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(__n128))(*(void *)result + 712);
      v3.n128_f64[0] = v1;
      return (void *)v4(v3);
    }
  }
  return result;
}

void *OZFxPlugSharedBase::updateAbsolutePointsChannel(OZFxPlugSharedBase *this)
{
  if (*((_DWORD *)this + 110) >= 5u) {
    double v1 = 0.0;
  }
  else {
    double v1 = 1.0;
  }
  uint64_t result = (void *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = (void *)[result absolutePointsChannel];
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(__n128))(*(void *)result + 712);
      v3.n128_f64[0] = v1;
      return (void *)v4(v3);
    }
  }
  return result;
}

uint64_t OZFxPlugSharedBase::openMedia(OZFxPlugSharedBase *this)
{
  double v1 = (void *)*((void *)this + 4);
  if (v1)
  {
    [*((id *)this + 4) imageParamIDs];
    double v2 = __p;
  }
  else
  {
    double v2 = 0;
    __p = 0;
    uint64_t v18 = 0;
  }
  uint64_t v3 = [v1 channelMap];
  if (v2 == v18)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v4 = (void *)(v3 + 8);
    do
    {
      uint64_t v5 = *v4;
      if (!*v4) {
        goto LABEL_17;
      }
      unsigned int v6 = *v2;
      BOOL v7 = v4;
      do
      {
        unsigned int v8 = *(_DWORD *)(v5 + 32);
        BOOL v9 = v8 >= v6;
        if (v8 >= v6) {
          uint64_t v10 = (uint64_t *)v5;
        }
        else {
          uint64_t v10 = (uint64_t *)(v5 + 8);
        }
        if (v9) {
          BOOL v7 = (void *)v5;
        }
        uint64_t v5 = *v10;
      }
      while (*v10);
      if (v7 == v4 || v6 < *((_DWORD *)v7 + 8)) {
LABEL_17:
      }
        BOOL v7 = v4;
      long long v11 = (const void *)v7[5];
      if (v11
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)Node + 104))(Node);
      }
      else
      {
        uint64_t v14 = 0;
      }
      ++v2;
    }
    while (v2 != v18 && v14 == 0);
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_1B7D55A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v26);
    BOOL v9 = *(void **)(a1 + 32);
    if (v9)
    {
      [v9 imageParamIDs];
      uint64_t v10 = (unsigned int *)__p;
    }
    else
    {
      uint64_t v10 = 0;
      __p = 0;
      double v24 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v11 = [v9 channelMap];
    if (v10 != v24)
    {
      long long v12 = (void *)(v11 + 8);
      do
      {
        memset(v22, 0, sizeof(v22));
        uint64_t v13 = *v12;
        if (!*v12) {
          goto LABEL_19;
        }
        unsigned int v14 = *v10;
        double v15 = v12;
        do
        {
          unsigned int v16 = *(_DWORD *)(v13 + 32);
          BOOL v17 = v16 >= v14;
          if (v16 >= v14) {
            uint64_t v18 = (uint64_t *)v13;
          }
          else {
            uint64_t v18 = (uint64_t *)(v13 + 8);
          }
          if (v17) {
            double v15 = (void *)v13;
          }
          uint64_t v13 = *v18;
        }
        while (*v18);
        if (v15 == v12 || v14 < *((_DWORD *)v15 + 8)) {
LABEL_19:
        }
          double v15 = v12;
        unint64_t v19 = (OZChannelBase *)v15[5];
        if (v19) {
        Node = OZChanSceneNodeRef::getNode(v19);
        }
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t))(*(void *)Node + 136))(Node, a2, v22, a4, a5);
        ++v10;
        double v27 = v22;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v27);
      }
      while (v10 != v24);
    }
    if (__p)
    {
      double v24 = (unsigned int *)__p;
      operator delete(__p);
    }
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v26);
  }
  return 0;
}

void sub_1B7D55C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t OZFxPlugSharedBase::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
  {
    BOOL v7 = *(void **)(a1 + 32);
    if (v7)
    {
      [v7 imageParamIDs];
      unsigned int v8 = (unsigned int *)__p;
    }
    else
    {
      unsigned int v8 = 0;
      __p = 0;
      char v22 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v9 = [v7 channelMap];
    if (v8 != v22)
    {
      uint64_t v10 = (void *)(v9 + 8);
      do
      {
        memset(v20, 0, sizeof(v20));
        uint64_t v11 = *v10;
        if (!*v10) {
          goto LABEL_19;
        }
        unsigned int v12 = *v8;
        uint64_t v13 = v10;
        do
        {
          unsigned int v14 = *(_DWORD *)(v11 + 32);
          BOOL v15 = v14 >= v12;
          if (v14 >= v12) {
            unsigned int v16 = (uint64_t *)v11;
          }
          else {
            unsigned int v16 = (uint64_t *)(v11 + 8);
          }
          if (v15) {
            uint64_t v13 = (void *)v11;
          }
          uint64_t v11 = *v16;
        }
        while (*v16);
        if (v13 == v10 || v12 < *((_DWORD *)v13 + 8)) {
LABEL_19:
        }
          uint64_t v13 = v10;
        BOOL v17 = (OZChannelBase *)v13[5];
        if (v17) {
        Node = OZChanSceneNodeRef::getNode(v17);
        }
        (*(void (**)(void *, uint64_t, void **, uint64_t))(*(void *)Node + 144))(Node, a2, v20, a4);
        ++v8;
        double v24 = v20;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v24);
      }
      while (v8 != v22);
    }
    if (__p)
    {
      char v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1B7D55E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
  {
    BOOL v7 = *(void **)(a1 + 32);
    if (v7)
    {
      [v7 imageParamIDs];
      unsigned int v8 = (unsigned int *)__p;
    }
    else
    {
      unsigned int v8 = 0;
      __p = 0;
      char v22 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v9 = [v7 channelMap];
    if (v8 != v22)
    {
      uint64_t v10 = (void *)(v9 + 8);
      do
      {
        memset(v20, 0, sizeof(v20));
        uint64_t v11 = *v10;
        if (!*v10) {
          goto LABEL_19;
        }
        unsigned int v12 = *v8;
        uint64_t v13 = v10;
        do
        {
          unsigned int v14 = *(_DWORD *)(v11 + 32);
          BOOL v15 = v14 >= v12;
          if (v14 >= v12) {
            unsigned int v16 = (uint64_t *)v11;
          }
          else {
            unsigned int v16 = (uint64_t *)(v11 + 8);
          }
          if (v15) {
            uint64_t v13 = (void *)v11;
          }
          uint64_t v11 = *v16;
        }
        while (*v16);
        if (v13 == v10 || v12 < *((_DWORD *)v13 + 8)) {
LABEL_19:
        }
          uint64_t v13 = v10;
        BOOL v17 = (OZChannelBase *)v13[5];
        if (v17) {
        Node = OZChanSceneNodeRef::getNode(v17);
        }
        (*(void (**)(void *, uint64_t, void **, uint64_t))(*(void *)Node + 152))(Node, a2, v20, a4);
        ++v8;
        double v24 = v20;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v24);
      }
      while (v8 != v22);
    }
    if (__p)
    {
      char v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1B7D56020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9 = *(void **)(a1 + 32);
  if (v9)
  {
    [*(id *)(a1 + 32) imageParamIDs];
    uint64_t v10 = __p;
  }
  else
  {
    uint64_t v10 = 0;
    __p = 0;
    double v26 = 0;
  }
  uint64_t v11 = [v9 channelMap];
  if (v10 == v26)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unsigned int v12 = (void *)(v11 + 8);
    do
    {
      uint64_t v13 = *v12;
      if (!*v12) {
        goto LABEL_17;
      }
      unsigned int v14 = *v10;
      BOOL v15 = v12;
      do
      {
        unsigned int v16 = *(_DWORD *)(v13 + 32);
        BOOL v17 = v16 >= v14;
        if (v16 >= v14) {
          uint64_t v18 = (uint64_t *)v13;
        }
        else {
          uint64_t v18 = (uint64_t *)(v13 + 8);
        }
        if (v17) {
          BOOL v15 = (void *)v13;
        }
        uint64_t v13 = *v18;
      }
      while (*v18);
      if (v15 == v12 || v14 < *((_DWORD *)v15 + 8)) {
LABEL_17:
      }
        BOOL v15 = v12;
      unint64_t v19 = (const void *)v15[5];
      if (v19
      {
        uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, double))(*(void *)Node + 112))(Node, a2, a3, a4, a5);
      }
      else
      {
        uint64_t v22 = 0;
      }
      ++v10;
    }
    while (v10 != v26 && v22 == 0);
  }
  if (__p) {
    operator delete(__p);
  }
  return v22;
}

void sub_1B7D561F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::prerollEnd(OZFxPlugSharedBase *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    [*((id *)this + 4) imageParamIDs];
    unsigned int v6 = __p;
  }
  else
  {
    unsigned int v6 = 0;
    __p = 0;
    uint64_t v22 = 0;
  }
  uint64_t v7 = [v5 channelMap];
  if (v6 == v22)
  {
    uint64_t v18 = 0;
  }
  else
  {
    unsigned int v8 = (void *)(v7 + 8);
    do
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_17;
      }
      unsigned int v10 = *v6;
      uint64_t v11 = v8;
      do
      {
        unsigned int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          unsigned int v14 = (uint64_t *)v9;
        }
        else {
          unsigned int v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = (void *)v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8)) {
LABEL_17:
      }
        uint64_t v11 = v8;
      BOOL v15 = (const void *)v11[5];
      if (v15
      {
        uint64_t v18 = (*(uint64_t (**)(void *, const OZRenderParams *, PMFrameRequest *))(*(void *)Node + 120))(Node, a2, a3);
      }
      else
      {
        uint64_t v18 = 0;
      }
      ++v6;
    }
    while (v6 != v22 && v18 == 0);
  }
  if (__p) {
    operator delete(__p);
  }
  return v18;
}

void sub_1B7D563A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::setRate(OZFxPlugSharedBase *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    [*((id *)this + 4) imageParamIDs];
    unsigned int v8 = __p;
  }
  else
  {
    unsigned int v8 = 0;
    __p = 0;
    double v24 = 0;
  }
  uint64_t v9 = [v7 channelMap];
  if (v8 == v24)
  {
    uint64_t v20 = 0;
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    do
    {
      uint64_t v11 = *v10;
      if (!*v10) {
        goto LABEL_17;
      }
      unsigned int v12 = *v8;
      BOOL v13 = v10;
      do
      {
        unsigned int v14 = *(_DWORD *)(v11 + 32);
        BOOL v15 = v14 >= v12;
        if (v14 >= v12) {
          unsigned int v16 = (uint64_t *)v11;
        }
        else {
          unsigned int v16 = (uint64_t *)(v11 + 8);
        }
        if (v15) {
          BOOL v13 = (void *)v11;
        }
        uint64_t v11 = *v16;
      }
      while (*v16);
      if (v13 == v10 || v12 < *((_DWORD *)v13 + 8)) {
LABEL_17:
      }
        BOOL v13 = v10;
      BOOL v17 = (const void *)v13[5];
      if (v17
      {
        uint64_t v20 = (*(uint64_t (**)(void *, const OZRenderParams *, PMFrameRequest *, double))(*(void *)Node
                                                                                                  + 128))(Node, a2, a3, a4);
      }
      else
      {
        uint64_t v20 = 0;
      }
      ++v8;
    }
    while (v8 != v24 && v20 == 0);
  }
  if (__p) {
    operator delete(__p);
  }
  return v20;
}

void sub_1B7D56560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneTokensAtTime(OZFxPlugSharedBase *this, const CMTime *a2, const char *a3)
{
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    [*((id *)this + 4) imageParamIDs];
    unsigned int v6 = (unsigned int *)__p;
  }
  else
  {
    unsigned int v6 = 0;
    __p = 0;
    int v21 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v7 = [v5 channelMap];
  if (v6 != v21)
  {
    unsigned int v8 = (void *)(v7 + 8);
    do
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_17;
      }
      unsigned int v10 = *v6;
      uint64_t v11 = v8;
      do
      {
        unsigned int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          unsigned int v14 = (uint64_t *)v9;
        }
        else {
          unsigned int v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = (void *)v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8)) {
LABEL_17:
      }
        uint64_t v11 = v8;
      BOOL v15 = (const void *)v11[5];
      if (v15)
      {
        if (v16)
        {
          Node = OZChanSceneNodeRef::getNode(v16);
          if (Node)
          {
            long long v18 = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
            (*(void (**)(void *, long long *, const char *))(*(void *)Node + 160))(Node, &v18, a3);
          }
        }
      }
      ++v6;
    }
    while (v6 != v21);
  }
  if (__p)
  {
    int v21 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B7D566F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneTokensExceptAtTime(OZFxPlugSharedBase *this, const CMTime *a2, const char *a3)
{
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    [*((id *)this + 4) imageParamIDs];
    unsigned int v6 = (unsigned int *)__p;
  }
  else
  {
    unsigned int v6 = 0;
    __p = 0;
    int v21 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v7 = [v5 channelMap];
  if (v6 != v21)
  {
    unsigned int v8 = (void *)(v7 + 8);
    do
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_17;
      }
      unsigned int v10 = *v6;
      uint64_t v11 = v8;
      do
      {
        unsigned int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          unsigned int v14 = (uint64_t *)v9;
        }
        else {
          unsigned int v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = (void *)v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8)) {
LABEL_17:
      }
        uint64_t v11 = v8;
      BOOL v15 = (const void *)v11[5];
      if (v15)
      {
        if (v16)
        {
          Node = OZChanSceneNodeRef::getNode(v16);
          if (Node)
          {
            long long v18 = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
            (*(void (**)(void *, long long *, const char *))(*(void *)Node + 168))(Node, &v18, a3);
          }
        }
      }
      ++v6;
    }
    while (v6 != v21);
  }
  if (__p)
  {
    int v21 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B7D56890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneAllTokens(OZFxPlugSharedBase *this, const char *a2)
{
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    [*((id *)this + 4) imageParamIDs];
    uint64_t v4 = __p;
  }
  else
  {
    uint64_t v4 = 0;
    __p = 0;
    BOOL v17 = 0;
  }
  uint64_t v5 = [v3 channelMap];
  if (v4 != v17)
  {
    unsigned int v6 = (void *)(v5 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_17;
      }
      unsigned int v8 = *v4;
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 >= v8;
        if (v10 >= v8) {
          unsigned int v12 = (uint64_t *)v7;
        }
        else {
          unsigned int v12 = (uint64_t *)(v7 + 8);
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_17:
      }
        uint64_t v9 = v6;
      BOOL v13 = (const void *)v9[5];
      if (v13)
      {
        if (v14)
        {
          Node = OZChanSceneNodeRef::getNode(v14);
          if (Node) {
            (*(void (**)(void *, const char *))(*(void *)Node + 176))(Node, a2);
          }
        }
      }
      ++v4;
    }
    while (v4 != v17);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_1B7D56A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::didChangeChannelState(uint64_t this, OZScene *a2, OZChannelBase *a3)
{
  uint64_t v3 = *((void *)a2 + 198);
  unsigned int v4 = *(_DWORD *)(v3 + 260);
  if (v4 < 5) {
    return [*(id *)(this + 32) restoreParameterFlagsForChannel:a3];
  }
  unsigned int v5 = *(_DWORD *)(v3 + 264);
  if (v4 == 5 && v5 <= 4) {
    return [*(id *)(this + 32) restoreParameterFlagsForChannel:a3];
  }
  return this;
}

uint64_t OZFxPlugSharedBase::CalculateRenderInfo(int a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5, int a6, void *a7)
{
  uint64_t v11 = *a3;
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  if (a2)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
    if (v14)
    {
      BOOL v15 = (OZScene *)v14;
      OZExportSettings::OZExportSettings((OZExportSettings *)v18);
      OZScene::getSceneSettings(v15, (OZExportSettings *)v18);
      if (v18[44]) {
        uint64_t v7 = 2;
      }
      else {
        uint64_t v7 = 1;
      }
      OZExportSettings::~OZExportSettings((OZExportSettings *)v18);
    }
  }
  uint64_t result = OZFxPlug_FxDepthFromDepth(a5);
  uint64_t v17 = a6 == 1;
  *a7 = v11;
  if (a6 == 2) {
    uint64_t v17 = 2;
  }
  a7[1] = v7;
  a7[2] = v17;
  a7[3] = v12;
  a7[4] = v13;
  a7[5] = result;
  return result;
}

void sub_1B7D56B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *OZFxPlugSharedBase::footageFromSceneNode(void *this, OZSceneNode *a2)
{
  if (this)
  {
    double v2 = this;
    if (!this)
    {
      if (this)
      {
        return OZImageElement::getFootage((OZImageElement *)this);
      }
    }
  }
  return this;
}

void OZFxPlugSharedBase::setupRenderParamsForRetrievingImage(OZFxPlugSharedBase *this, OZRenderParams *a2, void *lpsrc, OZSceneNode *a4, const CMTime *a5, GLRenderer *a6)
{
  if (lpsrc)
  {
  }
  __asm { FMOV            V0.2D, #-1.0 }
  uint64_t v12 = (OZFootage *)OZFxPlugSharedBase::footageFromSceneNode(lpsrc, a2);
  if (v12)
  {
    CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZFootage::getFieldDominance(v12, &v13);
  }
  operator new();
}

void sub_1B7D56ECC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C400F4F2387);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::cleanupRenderParams(OZFxPlugSharedBase *this, OZRenderParams *a2)
{
  uint64_t result = OZRenderParams::deleteControl(this);
  *((void *)this + 35) = 0;
  return result;
}

Float64 FigTimeToFrames(long long *a1, uint64_t a2, uint64_t a3)
{
  Float64 result = 0.0;
  if (!a3)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(a2 + 336), &v7);
    operator/(a1, (uint64_t)&v7, (uint64_t)&time);
    return CMTimeGetSeconds(&time);
  }
  return result;
}

CMTime *FramesToFigTime@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, Float64 a4@<D0>)
{
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
  *(void *)(a3 + 16) = *(void *)(v6 + 16);
  if (!a2)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)&result[14], (__n128 *)&v7);
    Float64 result = operator*(&v7, &v8, a4);
    *(CMTime *)a3 = v8;
  }
  return result;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      CMTime v7 = (unsigned __int8 *)a3;
    }
    else {
      CMTime v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>@<X0>(OZFxPlugSharedBase **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x88uLL);
  uint64_t result = std::__shared_ptr_emplace<OZFxPlugSharedLock>::__shared_ptr_emplace[abi:ne180100]<OZFxPlugSharedBase *,std::allocator<OZFxPlugSharedLock>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B7D57128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<OZFxPlugSharedLock>::__shared_ptr_emplace[abi:ne180100]<OZFxPlugSharedBase *,std::allocator<OZFxPlugSharedLock>,0>(uint64_t a1, OZFxPlugSharedBase **a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F116F8A8;
  OZFxPlugSharedLock::OZFxPlugSharedLock((OZFxPlugSharedLock *)(a1 + 24), *a2);
  return a1;
}

void sub_1B7D57188(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F116F8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F116F8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::__on_zero_shared(uint64_t a1)
{
}

void OZChannelFontBase::OZChannelFontBase(OZChannelFontBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, 0);
  void *v7 = &unk_1F116F8F8;
  _OWORD v7[2] = &unk_1F116FC68;
  PCSharedCount::PCSharedCount(&v9);
  PCURL::PCURL((PCURL *)&v8, @"Text Format Family");
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 136), (const PCString *)&v9, &v8, (OZChannelFolder *)this, 1u, 8u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString((PCString *)&v9);
  PCSharedCount::PCSharedCount(&v9);
  PCURL::PCURL((PCURL *)&v8, @"Text Format Typeface");
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 392), (const PCString *)&v9, &v8, (OZChannelFolder *)this, 2u, 8u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString((PCString *)&v9);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 81);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 82);
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)this, @"OZChanLabelController");
}

void sub_1B7D57388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  BOOL v15 = v12;
  PCString::~PCString(v15);
  PCString::~PCString(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelEnum::~OZChannelEnum(v11);
  OZCompoundChannel::~OZCompoundChannel(v10);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::OZChannelFontBase(OZChannelFontBase *this, const OZChannelFontBase *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *char v5 = &unk_1F116F8F8;
  float64x2_t v5[2] = &unk_1F116FC68;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelFontBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 392), (const OZChannelFontBase *)((char *)a2 + 392), (OZChannelFolder *)this);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 81);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 82);
  PCString::set((PCString *)this + 81, (const PCString *)a2 + 81);
  PCString::set((PCString *)this + 82, (const PCString *)a2 + 82);
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
}

void sub_1B7D574F8(_Unwind_Exception *a1)
{
  PCString::~PCString(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::init(PCString *this, OZFontManagerBase *a2, const PCString *a3)
{
  LODWORD(this[83].var0) = 0;
}

__CFString *OZChannelFontBase::getObjCWrapperName(OZChannelFontBase *this)
{
  return @"CHChannelFont";
}

void OZChannelFontBase::clone(OZChannelFontBase *this)
{
}

void sub_1B7D575E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::copy(OZChannelFontBase *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  }
  OZChannelEnum::copy((PCString *)this + 49, (const OZChannelBase *)((char *)v4 + 392), a3);
  PCString::set((PCString *)this + 81, (const PCString *)&v4[5].var11);
  PCString::set((PCString *)this + 82, (const PCString *)&v4[5].var12);
  *((_DWORD *)this + 166) = v4[5].var13;
}

void OZChannelFontBase::assign(OZChannelFontBase *this, const OZChannelBase *a2)
{
  double v2 = a2;
  OZChannelFolder::assign((OZChannelFolder *)this, a2);
  if (v2) {
  PCString::set((PCString *)this + 81, (const PCString *)&v2[5].var11);
  }
  PCString::set((PCString *)this + 82, (const PCString *)&v2[5].var12);
  *((_DWORD *)this + 166) = v2[5].var13;
}

uint64_t OZChannelFontBase::writeHeader(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFontBaseScope);

  return OZChannelBase::writeHeader(this, (OZFactory *)a2, a3);
}

uint64_t non-virtual thunk to'OZChannelFontBase::writeHeader(OZChannelFontBase *this, PCSerializerWriteStream *a2, int a3)
{
  char v5 = (OZChannelBase *)((char *)this - 16);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFontBaseScope);

  return OZChannelBase::writeHeader(v5, (OZFactory *)a2, a3);
}

uint64_t OZChannelFontBase::writeBody(const PCString *this, PCSerializerWriteStream *a2)
{
  PCString::PCString(&v6, this + 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 114);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v6);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    PCString::PCString(&v5, this + 82);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 115);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v5);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7D579A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelFontBase::writeBody(const PCString *this, PCSerializerWriteStream *a2)
{
  return OZChannelFontBase::writeBody(this - 2, a2);
}

uint64_t OZChannelFontBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelFontBase::parseBegin(OZChannelFontBase *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelFontBase::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == 115)
  {
    (*(void (**)(PCStreamElement *, PCString *))(*(void *)a3 + 16))(a3, this + 82);
  }
  else if (v5 == 114)
  {
    PCSharedCount::PCSharedCount(&v8);
    (*(void (**)(PCStreamElement *, PCSharedCount *))(*(void *)a3 + 16))(a3, &v8);
    OZChannelFontBase::validateAndSetFontName(this, (PCString *)&v8);
    ((void (*)(PCString *))this->var0[26].length)(this);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
    PCString::~PCString((PCString *)&v8);
  }
  return 1;
}

void sub_1B7D57B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZChannelFontBase::validateAndSetFontName(PCString *this, PCString *a2)
{
  OZChannelFontBase::checkAndConvertToSystemFont((OZChannelFontBase *)this, a2, 48.0, &v3);
  PCString::set(this + 81, &v3);
  PCString::~PCString(&v3);
}

void sub_1B7D57BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZChannelFontBase::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZChannelFontBase::getDefaultSystemFont(OZChannelFontBase *this@<X0>, PCString *a2@<X8>)
{
  OZFontManager::getInstance(this);

  OZFontManagerBase::getDefaultSystemFont(a2);
}

uint64_t OZChannelFontBase::getSystemFonts(OZChannelFontBase *this)
{
  return 0;
}

uint64_t OZChannelFontBase::getFontFace(OZChannelFontBase *this, const PCString *a2)
{
  double v2 = *(uint64_t (**)(void))(*(void *)OZFontManager::getInstance(this) + 56);

  return v2();
}

void OZChannelFontBase::getDefaultSystemFontFace(OZChannelFontBase *this@<X0>, void *a2@<X8>)
{
  Instance = (OZFontManagerBase *)OZFontManager::getInstance(this);

  OZFontManagerBase::getDefaultSystemFontFace(Instance, a2);
}

void OZChannelFontBase::setFontChannelWithName(OZChannelFontBase *this, const PCString *a2)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 840))(&v12);
  uint64_t v3 = v12;
  if (!(void)v12)
  {
    (*(void (**)(long long *__return_ptr, OZChannelFontBase *))(*(void *)this + 848))(&v11, this);
    long long v4 = v11;
    long long v11 = 0uLL;
    int v5 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    long long v12 = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    uint64_t v3 = v12;
  }
  PCString v6 = *(PCString **)(v3 + 24);
  CMTime v7 = (OZFontCollection *)(*(uint64_t (**)(OZChannelFontBase *))(*(void *)this + 832))(this);
  int FontFamilyIndex = OZFontCollection::getFontFamilyIndex(v7, v6);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), (double)FontFamilyIndex);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  int TypefaceIndex = OZFontFamily::getTypefaceIndex((OZFontFamily *)v6, (const PCString *)(v12 + 8));
  uint64_t v10 = (OZChannel *)((char *)this + 392);
  OZChannel::setDefaultValue(v10, (double)TypefaceIndex);
  OZChannelBase::reset((OZChannelBase *)v10, 0);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_1B7D57E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL OZChannelFontBase::isMissing(OZChannelFontBase *this)
{
  return *((_DWORD *)this + 166) == 3;
}

void OZChannelFontBase::getValidatedFontName(OZChannelBase *this@<X0>, PCString *a2@<X8>)
{
  int var13 = (int)this[5].var13;
  if (var13 != 3)
  {
    if (var13 == 2)
    {
      uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
      if (ObjectManipulator
        && (PCString v6 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)) != 0
        && (BOOL v7 = OZScene::testFlag(v6, 256)))
      {
        OZFontManager::getInstance((OZFontManager *)v7);
        OZFontManagerBase::getDefaultSystemFont(a2);
      }
      else
      {
        PCString::PCString(a2, (const PCString *)&this[5].var11);
      }
      return;
    }
    uint64_t v8 = OZChannelBase::getObjectManipulator(this);
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 264))(v8);
      if (v9) {
        OZScene::setFlag(v9, 256);
      }
    }
  }
  uint64_t v10 = (void (*)(OZChannelBase *))*((void *)this->var0 + 103);

  v10(this);
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelFontBase::OZChannelFontBase(this, a2, a3, a4, a5, a6);
  *(void *)BOOL v7 = &unk_1F116FCD8;
  *((void *)v7 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1170048;
  OZFontManager::getInstance(v7);
  OZFontManagerBase::getDefaultSystemFont(&v8);
  PCString::set((PCString *)this + 81, &v8);
  PCString::set((PCString *)this + 82, &v8);
  *((_DWORD *)this + 166) = 0;
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)this, @"OZFontController");
  PCString::~PCString(&v8);
}

void sub_1B7D58034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFontBase::~OZChannelFontBase(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelFont_Factory::getInstance(OZChannelFont_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelFont_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelFont_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelFont_Factory::_instance;
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChannelFont_Factory::getInstance(this);

  OZChannelFont::OZChannelFont(this, Instance, a2, a3, a4, a5);
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, const OZChannelFont *a2, OZChannelFolder *a3)
{
  OZChannelFontBase::OZChannelFontBase(this, a2, a3);
  v3->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F116FCD8;
  v3->var2 = (void **)&unk_1F1170048;
  OZChannelBase::setParameterCtlrClassName(v3, @"OZFontController");
}

void sub_1B7D581A0(_Unwind_Exception *a1)
{
  OZChannelFontBase::~OZChannelFontBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFont::clone(OZChannelFont *this)
{
}

void sub_1B7D58200(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7D58270(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelFont_Factory::OZChannelFont_Factory(OZChannelFont_Factory *this)
{
  long long v3 = xmmword_1B7E78CE0;
  long long v4 = xmmword_1B7E78CC0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11700B8;
  *((void *)this + 16) = &unk_1F1170188;
}

void sub_1B7D58340(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelFont_Factory::create(OZChannelFont_Factory *this, const PCString *a2)
{
}

void sub_1B7D583BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void OZChannelFont_Factory::createCopy(OZChannelFont_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7D58474(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void OZChannelFont_Factory::createChannelCopy(OZChannelFont_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7D5852C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContext::OZFxPlugRenderContext(uint64_t a1)
{
  *(void *)a1 = &unk_1F11701E0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_DWORD *)(a1 + 5OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  operator new();
}

void sub_1B7D5866C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10E0C409D1DB814);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::~OZFxPlugRenderContextManager(OZFxPlugRenderContextManager *this)
{
  uint64_t v1 = this;
  this->_vptr$OZFxPlugRenderContextManager = (void **)&unk_1F1170200;
  p_contexts = (uint64_t **)&this->_contexts;
  while (v1->_contexts.__tree_.__pair3_.__value_)
  {
    long long v3 = *p_contexts;
    for (unsigned int i = *p_contexts + 5;
          ;
          this = (OZFxPlugRenderContextManager *)std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](i, 1))
    {
      uint64_t v5 = v3[10];
      if (!v5) {
        break;
      }
      OZFxPlugRenderContextManager::fullyReleaseContext((uint64_t)this, *(void *)(*(void *)(v3[6] + (((unint64_t)(v5 + v3[9] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + v3[9] - 1) & 0x1FF)));
      --v3[10];
    }
    begin_node = (uint64_t *)v1->_contexts.__tree_.__begin_node_;
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(p_contexts, begin_node);
    std::deque<unsigned long>::~deque[abi:ne180100](begin_node + 5);
    operator delete(begin_node);
  }
  PCSpinLock::~PCSpinLock(&v1->_contextLock);
  std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy((uint64_t)p_contexts, (void *)v1->_contexts.__tree_.__pair1_.__value_.__left_);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v1->_workingColorDescription._pcColorDesc._colorSpaceRef._obj);
}

{
  uint64_t vars8;

  OZFxPlugRenderContextManager::~OZFxPlugRenderContextManager(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZFxPlugRenderContextManager::fullyReleaseContext(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    long long v3 = *(LiAgent **)(a2 + 32);
    if (v3)
    {
      LiAgent::~LiAgent(v3);
      MEMORY[0x1BA9BFBA0]();
    }
    *(void *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  }
  *(void *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a2 + 40) = 0;
  }
  *(void *)(a2 + 40) = 0;
  PCSharedCount::PCSharedCount(&v7);
  *(void *)(a2 + 16) = 0;
  PCSharedCount::PCSharedCount(&v8, &v7);
  PCSharedCount::operator=((uint64_t *)(a2 + 24), (uint64_t *)&v8);
  PCSharedCount::~PCSharedCount(&v8);
  PCSharedCount::~PCSharedCount(&v7);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 296);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void sub_1B7D588D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setWorkingColorDescription(OZFxPlugRenderContextManager *this, const FxColorDescription *a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  PCCFRef<CGColorSpace *>::operator=(&this->_workingColorDescription._pcColorDesc._colorSpaceRef._obj, &a2->_pcColorDesc._colorSpaceRef._obj);
  uint64_t v5 = *(void *)&a2->_pcColorDesc._dynamicRange;
  this->_workingColorDescription._pcColorDesc._toneMapMethod._gain = a2->_pcColorDesc._toneMapMethod._gain;
  *(void *)&this->_workingColorDescription._pcColorDesc._dynamicRange = v5;
  this->_workingColorDescription._isPremultiplied = a2->_isPremultiplied;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B7D589A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setBlendingGamma(OZFxPlugRenderContextManager *this, float a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  this->_blendingGamma = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void OZFxPlugRenderContextManager::setThreadInfo(uint64_t a1, const PCSharedCount *a2, LiRenderParameters **a3, uint64_t a4)
{
  locuint64_t k = (os_unfair_lock_s *)(a1 + 72);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  pthread_t v8 = pthread_self();
  long long v11 = *(void **)(a1 + 56);
  uint64_t v10 = (void *)(a1 + 56);
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_17;
  }
  long long v12 = v10;
  do
  {
    unint64_t v13 = v9[4];
    BOOL v14 = v13 >= (unint64_t)v8;
    if (v13 >= (unint64_t)v8) {
      BOOL v15 = v9;
    }
    else {
      BOOL v15 = v9 + 1;
    }
    if (v14) {
      long long v12 = v9;
    }
    uint64_t v9 = (void *)*v15;
  }
  while (*v15);
  if (v12 == v10 || (unint64_t)v8 < v12[4] || (uint64_t v16 = v12[10]) == 0) {
LABEL_17:
  }
    operator new();
  uint64_t v17 = *(void *)(*(void *)(v12[6] + (((unint64_t)(v16 + v12[9] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((v16 + v12[9] - 1) & 0x1FF));
  ++*(_DWORD *)(v17 + 8);
  uint64_t v18 = *(void *)(v17 + 64);
  if (a4)
  {
    if (v18)
    {
      OZRenderParams::~OZRenderParams(*(OZRenderParams **)(v17 + 64));
      MEMORY[0x1BA9BFBA0]();
    }
    *(void *)(v17 + 64) = 0;
    operator new();
  }
  if (v18 && !*(void *)HGRenderJob::GetRenderNodeList(*(HGRenderJob **)(v17 + 64)))
  {
    RenderDevice = (uint64_t *)LiAgent::getRenderDevice(a3);
    OZRenderParams::setRenderDevice(v18, RenderDevice);
  }
  *(PCSharedCount *)(v17 + 16) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount(&v23, a2 + 1);
  PCSharedCount::operator=((uint64_t *)(v17 + 24), (uint64_t *)&v23);
  PCSharedCount::~PCSharedCount(&v23);
  uint64_t v19 = v17;
  uint64_t v20 = *(LiAgent **)(v17 + 32);
  if (v20 && *(unsigned char *)(v17 + 48))
  {
    LiAgent::~LiAgent(v20);
    MEMORY[0x1BA9BFBA0]();
    uint64_t v19 = v17;
    *(void *)(v17 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  }
  *(void *)(v19 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a3;
  *(unsigned char *)(v19 + 48) = 0;
  *(unsigned char *)(v19 + 56) = 0;
  *(_DWORD *)(v19 + 5OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  if (lock) {
    PCSpinLock::unlock(lock);
  }
}

void sub_1B7D58C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_s *a12, uint64_t a13, PCSharedCount a14)
{
}

uint64_t OZFxPlugRenderContextManager::getCurrentTemporalContext(OZFxPlugRenderContextManager *this)
{
  pthread_t v2 = pthread_self();
  pthread_t v15 = v2;
  left = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *)this->_contexts.__tree_.__pair1_.__value_.__left_;
  if (!left) {
    goto LABEL_14;
  }
  p_pair1 = &this->_contexts.__tree_.__pair1_;
  do
  {
    unint64_t v5 = (unint64_t)left[4].__value_.__left_;
    BOOL v6 = v5 >= (unint64_t)v2;
    if (v5 >= (unint64_t)v2) {
      PCSharedCount v7 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> **)left;
    }
    else {
      PCSharedCount v7 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> **)&left[1];
    }
    if (v6) {
      p_pair1 = left;
    }
    left = *v7;
  }
  while (*v7);
  if (p_pair1 == &this->_contexts.__tree_.__pair1_
    || v2 < p_pair1[4].__value_.__left_
    || (pthread_t v8 = p_pair1[10].__value_.__left_) == 0)
  {
LABEL_14:
    ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v14);
    if (!(void)v14)
    {
      LiHelium::getDefaultGPU(ThreadLocalDevice, &v13);
      long long v11 = v13;
      long long v13 = 0uLL;
      long long v12 = (std::__shared_weak_count *)*((void *)&v14 + 1);
      long long v14 = v11;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (*((void *)&v13 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
        }
      }
    }
    *(void *)&long long v13 = &v15;
    std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)&this->_contexts, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, (void **)&v13);
    operator new();
  }
  return *(void *)(*(void *)((char *)p_pair1[6].__value_.__left_
                               + ((((unint64_t)v8 + (unint64_t)p_pair1[9].__value_.__left_ - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (((unint64_t)v8 + (unint64_t)p_pair1[9].__value_.__left_ - 1) & 0x1FF));
}

void sub_1B7D58EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *getThreadLocalDevice@<X0>(void *a1@<X8>)
{
  getThreadLocalDeviceInstance();
  uint64_t result = PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(getThreadLocalDeviceInstance(void)::instance);
  uint64_t v3 = result[1];
  *a1 = *result;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void OZFxPlugRenderContextManager::createTemporalContext()
{
}

void sub_1B7D592C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContextManager::getAgent(OZFxPlugRenderContextManager *this, OZFxPlugSharedBase *a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  pthread_t v15 = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  uint64_t CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  int v5 = *(_DWORD *)(CurrentTemporalContext + 332);
  *(_DWORD *)(CurrentTemporalContext + 33OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v5 + 1;
  if (!v5) {
    operator new();
  }
  if (!*(void *)(CurrentTemporalContext + 32)) {
    OZFxPlugRenderContextManager::createTemporalContext();
  }
  if (*(unsigned char *)(CurrentTemporalContext + 48))
  {
    if (!*(void *)(CurrentTemporalContext + 288))
    {
      RenderDevice = (uint64_t *)LiRenderParameters::getRenderDevice((LiRenderParameters *)(CurrentTemporalContext + 72));
      PCSharedCount v7 = (std::__shared_weak_count *)RenderDevice[1];
      uint64_t v13 = *RenderDevice;
      long long v14 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PGHelium::acquireRenderer(&v13, &v12);
      long long v8 = v12;
      long long v12 = 0uLL;
      uint64_t v9 = *(std::__shared_weak_count **)(CurrentTemporalContext + 296);
      *(_OWORD *)(CurrentTemporalContext + 288) = v8;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        if (*((void *)&v12 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
        }
      }
      LiRenderParameters::setHeliumRenderer(CurrentTemporalContext + 72, *(HGRenderer **)(CurrentTemporalContext + 288));
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    ++*(_DWORD *)(CurrentTemporalContext + 52);
  }
  uint64_t v10 = *(void *)(CurrentTemporalContext + 32);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return v10;
}

void sub_1B7D594B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::returnAgent(OZFxPlugRenderContextManager *this)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  uint64_t CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  uint64_t v4 = CurrentTemporalContext;
  if (*(unsigned char *)(CurrentTemporalContext + 48))
  {
    int v5 = *(_DWORD *)(CurrentTemporalContext + 52) - 1;
    *(_DWORD *)(CurrentTemporalContext + 5OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v5;
    if (!v5)
    {
      LiRenderParameters::setHeliumRenderer(CurrentTemporalContext + 72, 0);
      BOOL v6 = *(std::__shared_weak_count **)(v4 + 296);
      *(void *)(v4 + 288) = 0;
      *(void *)(v4 + 296) = 0;
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  int v7 = *(_DWORD *)(v4 + 332) - 1;
  *(_DWORD *)(v4 + 33OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v7;
  if (!v7) {
    std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100]((PGPerThreadSetCurrentContextSentry **)(v4 + 336), 0);
  }
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B7D595AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

PGPerThreadSetCurrentContextSentry *std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100](PGPerThreadSetCurrentContextSentry **a1, PGPerThreadSetCurrentContextSentry *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t OZFxPlugRenderContextManager::getRenderParams(OZFxPlugRenderContextManager *this, OZFxPlugSharedBase *a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  uint64_t CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  if (!*(void *)(CurrentTemporalContext + 32)) {
    OZFxPlugRenderContextManager::createTemporalContext();
  }
  uint64_t v5 = *(void *)(CurrentTemporalContext + 64);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return v5;
}

void sub_1B7D59688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setHandlingOSCEvent(OZFxPlugRenderContextManager *this, char a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  *(unsigned char *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(this) + 56) = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B7D596F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContextManager::getImageList(OZFxPlugRenderContextManager *this)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  uint64_t CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return CurrentTemporalContext + 304;
}

void sub_1B7D59760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setIsRendering(OZFxPlugRenderContextManager *this, char a2)
{
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  *(unsigned char *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(this) + 328) = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B7D597D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

BOOL OZFxPlugRenderContextManager::isRendering(OZFxPlugRenderContextManager *this)
{
  uint64_t v1 = this;
  p_contextLocuint64_t k = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  LODWORD(vOZLinkBehavior::clearAll(this, 1) = *(unsigned __int8 *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(v1) + 328);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return v1 != 0;
}

void sub_1B7D5983C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::pushContext(uint64_t a1, uint64_t a2)
{
  v9[1] = a1 + 72;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  v9[0] = (unint64_t)pthread_self();
  *(void *)&long long v8 = v9;
  std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)(a1 + 48), v9, (uint64_t)&std::piecewise_construct, (void **)&v8);
  ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v8);
  if (!(void)v8)
  {
    if (a2 == 1) {
      LiHelium::getDefaultGPU(ThreadLocalDevice, &v7);
    }
    else {
      HGComputeDeviceManager::GetCPUComputeDevice(ThreadLocalDevice, &v7);
    }
    long long v5 = v7;
    long long v7 = 0uLL;
    BOOL v6 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    long long v8 = v5;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
    }
  }
  operator new();
}

void sub_1B7D599E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::pushContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = a1 + 72;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  v10[0] = (unint64_t)pthread_self();
  *(void *)&long long v9 = v10;
  std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)(a1 + 48), v10, (uint64_t)&std::piecewise_construct, (void **)&v9);
  ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v9);
  if (!(void)v9)
  {
    if (a3 == 1) {
      LiHelium::getDefaultGPU(ThreadLocalDevice, &v8);
    }
    else {
      HGComputeDeviceManager::GetCPUComputeDevice(ThreadLocalDevice, &v8);
    }
    long long v6 = v8;
    long long v8 = 0uLL;
    long long v7 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    long long v9 = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
  operator new();
}

void sub_1B7D59BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::popContext(OZFxPlugRenderContextManager *this)
{
  p_contextLocuint64_t k = &this->_contextLock;
  v6[1] = (unint64_t)&this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  v6[0] = (unint64_t)pthread_self();
  long long v7 = v6;
  uint64_t v3 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)&this->_contexts, v6, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v4 = (uint64_t)v3[10] - 1;
  uint64_t v5 = *(void *)(*(uint64_t *)((char *)v3[6] + ((((unint64_t)v3[9] + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * (((unint64_t)v3[9] + v4) & 0x1FF));
  v3[10] = (uint64_t *)v4;
  std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v3 + 5, 1);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B7D59D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(id **a1, id *a2, OZFxPlugRenderContextSentinel *this, uint64_t a4)
{
  uint64_t RenderNodeList = (uint64_t *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this);
  getThreadLocalDeviceInstance();
  PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::operator=(getThreadLocalDeviceInstance(void)::instance, RenderNodeList);
  *a1 = a2;
  uint64_t v9 = (*((uint64_t (**)(id *))*a2 + 3))(a2);
  uint64_t v10 = [a2[4] contextManager];
  if (v10)
  {
    long long v11 = (OZFxPlugRenderContextManager *)v10;
    if (v9)
    {
      uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription(this);
      OZFxPlugRenderContextManager::setWorkingColorDescription(v11, WorkingColorDescription);
      float BlendingGamma = OZRenderParams::getBlendingGamma(this);
      OZFxPlugRenderContextManager::setBlendingGamma(v11, BlendingGamma);
    }
    OZFxPlugRenderContextManager::pushContext((uint64_t)v11, a4);
  }
}

void OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel(OZFxPlugRenderContextSentinel *this)
{
  uint64_t v1 = (OZFxPlugRenderContextManager *)[*(id *)(*(void *)this + 32) contextManager];
  if (v1) {
    OZFxPlugRenderContextManager::popContext(v1);
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  getThreadLocalDeviceInstance();
  PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::operator=(getThreadLocalDeviceInstance(void)::instance, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void OZFxRenderContextAgentSentry::OZFxRenderContextAgentSentry(OZFxRenderContextAgentSentry *this, OZFxPlugRenderContextManager *a2)
{
  *(void *)this = a2;
  *((void *)this + OZLinkBehavior::clearAll(this, 1) = 0;
}

uint64_t OZFxRenderContextAgentSentry::getAgent(OZFxPlugRenderContextManager **this, OZFxPlugSharedBase *a2)
{
  uint64_t v2 = *this;
  this[1] = (OZFxPlugRenderContextManager *)((char *)this[1] + 1);
  return OZFxPlugRenderContextManager::getAgent(v2, a2);
}

void OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry(OZFxPlugRenderContextManager **this)
{
  if ((uint64_t)this[1] >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      OZFxPlugRenderContextManager::returnAgent(*this);
      ++v2;
    }
    while (v2 < (uint64_t)this[1]);
  }
}

void OZFxPlugRenderContext::~OZFxPlugRenderContext(OZFxPlugRenderContext *this)
{
  OZFxPlugRenderContext::~OZFxPlugRenderContext(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZRenderParams *v2;
  LiAgent *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int v7;
  uint64_t v8;
  void **v9;

  *(void *)this = &unk_1F11701E0;
  uint64_t v2 = (OZRenderParams *)*((void *)this + 8);
  if (v2)
  {
    OZRenderParams::~OZRenderParams(v2);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 8) = 0;
  if (*((unsigned char *)this + 48))
  {
    uint64_t v3 = (LiAgent *)*((void *)this + 4);
    if (v3)
    {
      LiAgent::~LiAgent(v3);
      MEMORY[0x1BA9BFBA0]();
    }
    *((void *)this + 4) = 0;
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 5) = 0;
  }
  std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100]((PGPerThreadSetCurrentContextSentry **)this + 42, 0);
  uint64_t v9 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 29);
  *((void *)this + 13) = &unk_1F10AD6B0;
  if (*((int *)this + 28) < 0) {
    long long v7 = 1;
  }
  else {
    long long v7 = *((_DWORD *)this + 28);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 104, 0, v7);
  long long v8 = *((void *)this + 15);
  if (v8) {
    MEMORY[0x1BA9BFB70](v8, 0x1000C8077774924);
  }
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 28) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 12);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
}

void getThreadLocalDeviceInstance(void)
{
  {
    PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::PCThreadLocalValue(getThreadLocalDeviceInstance(void)::instance);
    __cxa_atexit((void (*)(void *))PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::~PCThreadLocalValue, getThreadLocalDeviceInstance(void)::instance, &dword_1B73F3000);
  }
}

void sub_1B7D59FB4(_Unwind_Exception *a1)
{
}

uint64_t PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::~PCThreadLocalValue(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

pthread_key_t *PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::PCThreadLocalValue(pthread_key_t *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  pthread_key_create(a1, (void (__cdecl *)(void *))PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::destroy);
  return a1;
}

void sub_1B7D5A038(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void *PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(pthread_key_t *a1)
{
  uint64_t v1 = pthread_getspecific(*a1);
  if (!v1) {
    operator new();
  }
  return v1;
}

pthread_key_t *PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::operator=(pthread_key_t *a1, uint64_t *a2)
{
  ValuePtr = PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(a1);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = (std::__shared_weak_count *)ValuePtr[1];
  void *ValuePtr = v6;
  ValuePtr[1] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(a1, a2[1]);
    std::deque<unsigned long>::~deque[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  long long v7 = a1 + 1;
  uint64_t v6 = a1[1];
  long long v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        long long v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        long long v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    long long v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((void *)v12 + 4) = **a4;
    *(_OWORD *)(v12 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 5);
    }
    operator delete(v2);
  }
}

void std::deque<OZFxPlugRenderContext *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZFxPlugRenderContext *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZFxPlugRenderContext *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      int32x2_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        OZChannel v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)OZChannel v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      int32x2_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      PCString v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + OZLinkBehavior::clearAll(this, 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + OZLinkBehavior::clearAll(this, 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + OZLinkBehavior::clearAll(this, 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7D5A66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZFxPlugSharedLock::OZFxPlugSharedLock(OZFxPlugSharedLock *this, OZFxPlugSharedBase *a2)
{
  *(void *)this = a2;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)((char *)this + 8));
}

void OZFxPlugSharedLock::~OZFxPlugSharedLock(OZFxPlugSharedLock *this)
{
  unint64_t v2 = (std::mutex *)((char *)this + 8);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8));
  *(void *)this = 0;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::~PCSharedMutex(v2);
}

void OZFxPlugSharedLock::reset(OZFxPlugSharedLock *this)
{
  unint64_t v2 = (std::mutex *)((char *)this + 8);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8));
  *(void *)this = 0;
  PCSharedMutex::unlock(v2);
}

void OZLiFilter::~OZLiFilter(PCSharedCount *this, const PCString *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  uint64_t v5 = a2[1].var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)v5;
  *(__CFString **)((char *)this + v5[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);

  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

void OZLiHeFilter::OZLiHeFilter(OZLiHeFilter *this, OZEffect *a2, const OZRenderParams *a3, char a4)
{
  *((void *)this + 186) = &unk_1F1199AC8;
  *((void *)this + 187) = 0;
  *((unsigned char *)this + 1504) = 1;
  OZLiFilter::OZLiFilter(this, (OZEffect *)&off_1F1170350, a2, a3, a4);
  unint64_t v8 = (void (**)(OZLiHeFilter *, uint64_t))&unk_1F1170248;
  *(void *)this = &unk_1F1170248;
  *((void *)this + 186) = &unk_1F1170330;
  *((void *)this + 185) = 0;
  if (!a2)
  {
    if ((a4 & 1) == 0) {
      return;
    }
    goto LABEL_7;
  }
  if (a4)
  {
LABEL_7:
    v8[11](this, 2);
    return;
  }
  if (v9)
  {
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *((void *)a3 + 2);
    if ((*(unsigned int (**)(void *, long long *))(*(void *)v9 + 808))(v9, &v10))
    {
      unint64_t v8 = *(void (***)(OZLiHeFilter *, uint64_t))this;
      goto LABEL_7;
    }
  }
}

void sub_1B7D5ABD8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 1480);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  OZLiFilter::~OZLiFilter((PCSharedCount *)v1, (const PCString *)&off_1F1170350);
  *(void *)(v1 + 1488) = v2;
  *(unsigned char *)(v1 + 1504) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1496));
  _Unwind_Resume(a1);
}

void OZLiHeFilter::clone(OZLiHeFilter *this)
{
}

void sub_1B7D5ACF8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4014CFE41ALL);
  _Unwind_Resume(a1);
}

void OZLiHeFilter::getHelium(OZLiHeFilter *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 185);
  if (v5)
  {
    *a3 = v5;
    uint64_t v6 = *(void (**)(void))(*(void *)v5 + 16);
    v6();
  }
  else
  {
    uint64_t v8 = *((void *)this + 5);
    uint64_t v13 = *((void *)this + 2);
    PCSharedCount::PCSharedCount(&v14, (const PCSharedCount *)this + 3);
    long long v11 = *(_OWORD *)((char *)this + 56);
    uint64_t v12 = *((void *)this + 9);
    (*(void (**)(uint64_t, LiAgent *, uint64_t *, long long *, char *))(*(void *)v8 + 224))(v8, a2, &v13, &v11, (char *)this + 56);
    PCSharedCount::~PCSharedCount(&v14);
    if (*((unsigned char *)this + 12))
    {
      uint64_t v9 = *((void *)this + 185);
      uint64_t v10 = *a3;
      if (v9 != *a3)
      {
        if (v9)
        {
          (*(void (**)(void))(*(void *)v9 + 24))(*((void *)this + 185));
          uint64_t v10 = *a3;
        }
        *((void *)this + 185) = v10;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        }
      }
    }
  }
}

void sub_1B7D5AEA8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZLiHeFilter::pixelTransformSupport(OZLiHeFilter *this, const LiRenderParameters *a2)
{
  int v3 = OZLiFilter::pixelTransformSupport(this, a2);
  uint64_t v4 = *((void *)this + 5);
  long long v13 = *(_OWORD *)((char *)this + 56);
  uint64_t v14 = *((void *)this + 9);
  char v5 = (*(uint64_t (**)(void))(*(void *)v4 + 656))();
  uint64_t v6 = *((void *)this + 5);
  long long v11 = *(_OWORD *)((char *)this + 56);
  uint64_t v12 = *((void *)this + 9);
  char v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v6 + 664))(v6, &v11, v7);
  if (v5) {
    return 6;
  }
  if (v3 < 3) {
    char v10 = v8;
  }
  else {
    char v10 = 0;
  }
  if (v10) {
    return 3;
  }
  if (v3) {
    return v3;
  }
  return 2;
}

void OZLiHeFilter::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double fixed = LiImageSource::fixPixelTransform(a1, a2, a3, a4);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 56))(a1, a4, fixed);
  if (v9 > 4) {
    return;
  }
  int v10 = v9;
  long long v11 = *(uint64_t **)(a1 + 40);
  uint64_t v12 = *v11;
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t *))(v12 + 248))(v11);
  uint64_t v15 = v14;
  if (v14)
  {
    if (!v13) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!v13) {
      goto LABEL_8;
    }
  }
  long long v54 = *(_OWORD *)(a1 + 56);
  uint64_t v55 = *(void *)(a1 + 72);
  char v17 = (*(uint64_t (**)(uint64_t, long long *))(*((void *)v13 + 46) + 128))((uint64_t)v13 + 368, &v54);
  if (v10 >= 3 && (v17 & 1) != 0) {
    return;
  }
LABEL_8:
  float64x2_t v52 = 0uLL;
  uint64_t v53 = 0;
  if (v16)
  {
    (*(void (**)(void *, float64x2_t *, uint64_t, void))(*(void *)v16 + 1320))(v16, &v52, a1 + 56, 0);
    double v18 = v52.f64[1];
    double v19 = v52.f64[0];
    v52.f64[0] = fabs(v52.f64[0]);
    v52.f64[1] = fabs(v52.f64[1]);
    if (!v13) {
      goto LABEL_19;
    }
LABEL_12:
    CMTime v51 = *(CMTime *)(a1 + 56);
    if ((OZFxPlugSharedBase::doesSupportLargeRenderScale((id *)v13 + 46, &v51) & 1) == 0)
    {
      __asm { FMOV            V1.2D, #1.0 }
      float64x2_t v26 = vminnmq_f64(v52, _Q1);
      float64x2_t v52 = v26;
      if (v26.f64[0] >= -1.0) {
        double v19 = v26.f64[0];
      }
      else {
        double v19 = -1.0;
      }
      if (v26.f64[1] >= -1.0) {
        double v18 = v26.f64[1];
      }
      else {
        double v18 = -1.0;
      }
    }
    goto LABEL_19;
  }
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v52 = _Q0;
  uint64_t v53 = 0x3FF0000000000000;
  double v18 = 1.0;
  double v19 = 1.0;
  if (v13) {
    goto LABEL_12;
  }
LABEL_19:
  if (v15)
  {
    unint64_t v27 = v15[1];
    long long v50 = xmmword_1B8384170;
    if ((OZFactory::isKindOfClass(v27, (int32x4_t *)&v50) & 1) != 0
      || (unint64_t v28 = v15[1], v49 = xmmword_1B8384180, OZFactory::isKindOfClass(v28, (int32x4_t *)&v49)))
    {
      uint64_t v29 = (*(uint64_t (**)(void *))(*v15 + 272))(v15);
      if (v29)
      {
        long long v30 = (OZScene *)v29;
        OZExportSettings::OZExportSettings((OZExportSettings *)&v39);
        OZScene::getSceneSettings(v30, (OZExportSettings *)&v39);
        if (BYTE4(v42))
        {
          __asm { FMOV            V0.2D, #1.0 }
          float64x2_t v52 = _Q0;
          uint64_t v53 = 0;
        }
        OZExportSettings::~OZExportSettings((OZExportSettings *)&v39);
      }
    }
  }
  v34.f64[1] = 0.0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  double v32 = *(double *)(a1 + 88);
  double v33 = v52.f64[0] * *(double *)(a1 + 80);
  uint64_t v48 = 0x3FF0000000000000;
  uint64_t v45 = 0x3FF0000000000000;
  float64_t v42 = 1.0;
  uint64_t v39 = 0x3FF0000000000000;
  v34.f64[0] = v52.f64[1] * v32;
  if (v33 != 1.0)
  {
    uint64_t v39 = *(void *)&v33;
    *(double *)&long long v40 = v33 * 0.0;
    *((double *)&v40 + OZLinkBehavior::clearAll(this, 1) = v33 * 0.0;
    *(double *)&long long v41 = v33 * 0.0;
  }
  if (v34.f64[0] != 1.0)
  {
    *((double *)&v41 + OZLinkBehavior::clearAll(this, 1) = v34.f64[0] * 0.0;
    float64_t v42 = v52.f64[1] * v32;
    *(double *)&long long v43 = v34.f64[0] * 0.0;
    *((double *)&v43 + OZLinkBehavior::clearAll(this, 1) = v34.f64[0] * 0.0;
  }
  if (v10 >= 3)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      double v35 = *(double *)(a3 + 120);
      if (v35 <= -0.0000001 || v35 >= 0.0000001)
      {
        v34.f64[0] = v19 * *(double *)(a3 + 24) / v35;
        PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v39, v34, v18 * *(double *)(a3 + 56) / v35, 0.0);
      }
    }
  }
  if (&v39 != (uint64_t *)a3)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      int32x2_t v37 = (_OWORD *)(a3 + i);
      long long v38 = *(long long *)((char *)&v40 + i + 8);
      _OWORD *v37 = *(_OWORD *)((char *)&v39 + i);
      v37[1] = v38;
    }
  }
}

void sub_1B7D5B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZLiHeFilter::estimateRenderMemory()
{
  return 0;
}

void OZLiHeFilter::~OZLiHeFilter(PCSharedCount *this)
{
  *(void *)(v1 + 1488) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1504) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1496));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 1488) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1504) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1496));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZLiHeFilter::~OZLiHeFilter(OZLiHeFilter *this)
{
  *(void *)(v1 + 1488) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1504) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 1496);

  PCWeakCount::~PCWeakCount(v2);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1[186].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[188].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[187].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLiHeFilter::~OZLiHeFilter(PCSharedCount *this, const PCString *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[9].var0;
  char v5 = this[185].var0;
  if (v5) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = a2[1].var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)v6;
  *(__CFString **)((char *)this + v6[-1].info) = a2[8].var0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  uint64_t v7 = a2[2].var0;
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)v7;
  *(__CFString **)((char *)this + v7[-1].info) = a2[7].var0;
  PCSharedCount::~PCSharedCount(this + 3);

  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 3);
}

void OZFxGenerator::OZFxGenerator(OZFxGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4, int a5, char a6)
{
  OZImageGenerator::OZImageGenerator(this, a2, a3, a4);
  *(void *)uint64_t v9 = &unk_1F1170748;
  *(void *)(v9 + 16) = &unk_1F11710A0;
  *(void *)(v9 + 48) = &unk_1F11712F8;
  *(void *)(v9 + 6528) = &unk_1F1171350;
  *(void *)(v9 + 19384) = &unk_1F1171428;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v9 + 19384), a3, (OZChannelFolder *)(v9 + 18776), a5, a6);
}

void sub_1B7D5B950(_Unwind_Exception *a1)
{
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZImageGenerator::~OZImageGenerator(v1);
  _Unwind_Resume(a1);
}

void OZFxGenerator::OZFxGenerator(OZFxGenerator *this, const OZFxGenerator *a2, uint64_t a3)
{
  OZImageGenerator::OZImageGenerator(this, a2, a3);
  *char v5 = &unk_1F1170748;
  float64x2_t v5[2] = &unk_1F11710A0;
  v5[6] = &unk_1F11712F8;
  v5[816] = &unk_1F1171350;
  *((void *)this + 2423) = &unk_1F1171428;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v5 + 2423), (const OZFxGenerator *)((char *)a2 + 19384), (OZChannelFolder *)((char *)this + 18776));
}

void sub_1B7D5BAA4(_Unwind_Exception *a1)
{
  OZImageGenerator::~OZImageGenerator(v1);
  _Unwind_Resume(a1);
}

void OZFxGenerator::~OZFxGenerator(OZFxGenerator *this)
{
  *(void *)this = &unk_1F1170748;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11710A0;
  *((void *)this + 6) = &unk_1F11712F8;
  *((void *)this + 816) = &unk_1F1171350;
  uint64_t v2 = (OZFxGenerator *)((char *)this + 19384);
  *((void *)this + 2423) = &unk_1F1171428;
  OZFxPlugSharedBase::resetFxLock((OZFxPlugSharedLock **)this + 2423);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);

  OZImageGenerator::~OZImageGenerator(this);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFxGenerator::~OZFxGenerator(OZFxGenerator *this)
{
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 48));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 6528));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 19384));
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 19384));

  JUMPOUT(0x1BA9BFBA0);
}

void OZFxGenerator::operator=(PCString *a1, const void *a2)
{
  OZImageGenerator::operator=((uint64_t)a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  PCString::PCString(&v5, v4 + 2442);
  OZChannelDoubleOverRange::setRangeName(a1 + 2423, &v5);
  PCString::~PCString(&v5);
}

void sub_1B7D5BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZFxGenerator::updateChannelsForMisbehavingPlugin(id *this)
{
  [this[2427] softDisableAllChannels];
  uint64_t v2 = (*((uint64_t (**)(id *))*this + 81))(this);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 272))(v2);
    if (v3)
    {
      uint64_t v4 = *(OZDocument **)(v3 + 1584);
      OZDocument::postNotification(v4, 0x8000);
    }
  }
}

void non-virtual thunk to'OZFxGenerator::updateChannelsForMisbehavingPlugin(id *this)
{
}

uint64_t OZFxGenerator::isEnabled(OZFxGenerator *this, int a2, int a3)
{
  int isEnabled = OZObjectManipulator::isEnabled((OZFxGenerator *)((char *)this + 16), a2, a3);
  return isEnabled & OZFxPlugSharedBase::isConnectionValid((OZFxGenerator *)((char *)this + 19384));
}

uint64_t non-virtual thunk to'OZFxGenerator::isEnabled(OZFxGenerator *this, int a2, int a3)
{
  int isEnabled = OZObjectManipulator::isEnabled(this, a2, a3);
  return isEnabled & OZFxPlugSharedBase::isConnectionValid((OZFxGenerator *)((char *)this + 19368));
}

void OZFxGenerator::didAddToScene(OZFxGenerator *this, CMTimeEpoch *a2)
{
  uint64_t v2 = (OZScene *)a2;
  OZImageGenerator::didAddToScene(this, a2);
  uint64_t v4 = (void *)*((void *)this + 2427);
  uint64_t v5 = [v4 contextManager];
  if (v5)
  {
    uint64_t v6 = (OZFxPlugRenderContextManager *)v5;
    (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(void *)v2 + 136))(&v14, v2);
    OZFxPlugRenderContextManager::setWorkingColorDescription(v6, &v14);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v14._pcColorDesc._colorSpaceRef._obj);
    float v7 = (*(float (**)(OZScene *))(*(void *)v2 + 144))(v2);
    OZFxPlugRenderContextManager::setBlendingGamma(v6, v7);
  }
  char v8 = (OZFxGenerator *)((char *)this + 19384);
  [v4 setObjectID];
  OZFxPlugSharedBase::doPostConstructionActions((id *)this + 2423);
  if (objc_opt_respondsToSelector())
  {
    if (v2) {
      uint64_t v2 = (OZScene *)*((void *)v2 + 198);
    }
    if (((*(uint64_t (**)(char *))(*(void *)v8 + 256))((char *)this + 19384) & 1) == 0 && v2)
    {
      OZDocument::addCPPObserver((uint64_t)v2, (uint64_t)this + 19384, 0);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 264))((char *)this + 19384, 1);
    }
  }
  uint64_t v9 = (void *)*((void *)this + 2426);
  if (((*(uint64_t (**)(char *))(*((void *)this + 2423) + 272))((char *)this + 19384) & 1) == 0)
  {
    int v10 = (objc_class *)objc_opt_class();
    if (v10 == NSClassFromString(&cfstr_Paelensflarege.isa)) {
      (*(void (**)(OZFxGenerator *, uint64_t, void))(*(void *)this + 1736))(this, 8, MEMORY[0x1E4F1FA48]);
    }
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 280))((char *)this + 19384, 1);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19056), MEMORY[0x1E4F1FA48], 0.0);
  double v12 = v11;
  if (objc_opt_respondsToSelector())
  {
    long long v13 = (char *)this + 19828;
    if (*v13)
    {
      objc_msgSend(v9, "performSelector:withObject:", sel_initPAEGradientWithHeight_, objc_msgSend(NSNumber, "numberWithDouble:", v12));
      *long long v13 = 0;
    }
  }
  OZFxPlugSharedBase::finishPluginSetup(v8);
}

void sub_1B7D5C1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
}

uint64_t OZFxGenerator::didFinishLoadingIntoScene(OZElement *this)
{
  OZElement::didFinishLoadingIntoScene(this);
  uint64_t v2 = (OZFxPlugSharedBase *)((char *)this + 19384);
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)v2);
  OZFxPlugSharedBase::updateAbsolutePointsChannel(v2);
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.motionapp");
  if (result)
  {
    return OZChannelBase::setRangeName((OZChannelBase *)v2, v4);
  }
  return result;
}

uint64_t non-virtual thunk to'OZFxGenerator::didFinishLoadingIntoScene(OZFxGenerator *this)
{
  return OZFxGenerator::didFinishLoadingIntoScene((OZElement *)((char *)this - 16));
}

uint64_t OZFxGenerator::didChangeChannelState(OZFxGenerator *this, OZChannelBase *a2)
{
  uint64_t v3 = (char *)this + 19384;
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(OZFxGenerator *))(*(void *)this + 272))(this);

  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

uint64_t non-virtual thunk to'OZFxGenerator::didChangeChannelState(OZFxGenerator *this, OZChannelBase *a2)
{
  uint64_t v3 = (char *)this + 19368;
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(void))(*((void *)this - 2) + 272))();

  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

BOOL OZFxGenerator::shouldRenumberChannel(OZFxGenerator *this, OZChannelBase *a2)
{
  unsigned int var3 = a2->var3;
  return var3 != 10002
      && var3 != 10005
      && OZObjectManipulator::shouldRenumberChannel((OZFxGenerator *)((char *)this + 16), a2);
}

BOOL non-virtual thunk to'OZFxGenerator::shouldRenumberChannel(OZFxGenerator *this, OZChannelBase *a2)
{
  unsigned int var3 = a2->var3;
  return var3 != 10002 && var3 != 10005 && OZObjectManipulator::shouldRenumberChannel(this, a2);
}

uint64_t OZFxGenerator::willRemoveFromScene(OZFxGenerator *this, OZScene *a2)
{
  OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this + 2423) + 256))((char *)this + 19384);
  if (a2)
  {
    if (result)
    {
      uint64_t result = *((void *)a2 + 198);
      if (result)
      {
        OZDocument::removeCPPObserver(result);
        uint64_t v5 = *(uint64_t (**)(char *, void))(*((void *)this + 2423) + 264);
        return v5((char *)this + 19384, 0);
      }
    }
  }
  return result;
}

BOOL OZFxGenerator::canChanRefBeSetTo(OZFxGenerator *this, const OZChanObjectManipRef *a2, const OZObjectManipulator *lpsrc)
{
  if (!lpsrc) {
    return 1;
  }
  return !v3 || !OZImageElement::isEffectSource(v3);
}

uint64_t OZFxGenerator::calcHashForState(void *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  char v8 = (void *)a1[2426];
  if (a1[2427]) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && a1[2430] && [v8 variesOverTime])
  {
    uint64_t v12 = *((void *)a3 + 2);
    long long v11 = *a3;
    (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
    (*(void (**)(uint64_t, long long *))(*(void *)a2 + 112))(a2, &v11);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, uint64_t))(*a1 + 536))(a1, a2, a3, a4, 1);
}

uint64_t non-virtual thunk to'OZFxGenerator::calcHashForState(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  return OZFxGenerator::calcHashForState((void *)(a1 - 16), a2, a3, a4);
}

uint64_t OZFxGenerator::variesOverTime(OZFxGenerator *this)
{
  uint64_t v2 = (void *)*((void *)this + 2426);
  if (v2) {
    return [v2 variesOverTime];
  }
  else {
    return OZImageGenerator::variesOverTime(this);
  }
}

uint64_t non-virtual thunk to'OZFxGenerator::variesOverTime(id *this)
{
  if (this[3]) {
    return [this[3] variesOverTime];
  }
  else {
    return OZImageGenerator::variesOverTime((OZImageGenerator *)(this - 2423));
  }
}

uint64_t OZFxGenerator::getInternalName(OZFxGenerator *this)
{
  if (*((void *)this + 2352)) {
    return *((void *)this + 2352);
  }
  else {
    return (uint64_t)this + 18808;
  }
}

void OZFxGenerator::setInternalName(OZFxGenerator *this, const PCString *a2)
{
}

uint64_t OZFxGenerator::pixelTransformSupport(id *this, const LiRenderParameters *a2, CMTime *a3)
{
  CMTime v4 = *a3;
  return OZFxPlugSharedBase::getPixelTransformSupport(this + 2423, &v4);
}

uint64_t OZFxGenerator::_needsToRender(uint64_t a1, HGNode **a2)
{
  if (*(void *)(a1 + 19408) && *(void *)(a1 + 19416)) {
    return 1;
  }
  CMTime v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  uint64_t v5 = *a2;
  if (*a2 == v4)
  {
    if (v4) {
      (*(void (**)(HGNode *))(*(void *)v4 + 24))(v4);
    }
    return 0;
  }
  else
  {
    if (v5) {
      (*(void (**)(HGNode *))(*(void *)v5 + 24))(v5);
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

void sub_1B7D5C750(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

PCMutex *OZFxGenerator::getHelium@<X0>(OZFxGenerator *this@<X0>, LiAgent *a2@<X1>, CMTime *a3@<X2>, OZRenderParams *a4@<X3>, void *a5@<X8>)
{
  int v10 = (id *)((char *)this + 19384);
  long long v11 = (PCMutex *)((char *)this + 19752);
  char v12 = (*(uint64_t (**)(char *))(*((void *)this + 2423) + 88))((char *)this + 19384);
  CMTime v157 = v11;
  char v158 = 0;
  if ((v12 & 1) == 0)
  {
    PCMutex::lock(v11);
    char v158 = 1;
  }
  OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(v156, v10, a4, 1);
  float64x2_t v154 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(float64x2_t *)__int16 v95 = _Q0;
  float64x2_t v155 = _Q0;
  CMTime v153 = *a3;
  unsigned int v18 = OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v10, &v153);
  uint64_t v19 = *(void *)this;
  if (v18)
  {
    uint64_t v20 = *(void *)((*(uint64_t (**)(OZFxGenerator *))(v19 + 272))(this) + 344);
    v21.i64[0] = (int)v20;
    v21.i64[1] = SHIDWORD(v20);
    float64x2_t v22 = vcvtq_f64_s64(v21);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v154 = vsubq_f64(v154, vaddq_f64(vmulq_f64(v22, _Q2), v154));
    float64x2_t v155 = v22;
  }
  else
  {
    (*(void (**)(OZFxGenerator *, float64x2_t *, OZRenderParams *))(v19 + 1480))(this, &v154, a4);
  }
  float64x2_t v152 = 0uLL;
  __n128 Resolution = OZRenderParams::getResolution(a4, (__n128 *)&v100);
  float64x2_t v152 = v100;
  if (v18)
  {
    uint64_t v25 = *((void *)a2 + 20);
    double v26 = *(double *)(v25 + 120) + *(double *)(v25 + 96) * 0.0 + *(double *)(v25 + 104) * 0.0;
    double v27 = (*(double *)(v25 + 24) + *(double *)v25 * 0.0 + *(double *)(v25 + 8) * 0.0) / v26;
    double v28 = (*(double *)(v25 + 56) + *(double *)(v25 + 32) * 0.0 + *(double *)(v25 + 40) * 0.0) / v26;
    float64_t v29 = v100.f64[1] * v155.f64[1] * 0.5;
    Resolution.n128_f64[0] = v100.f64[0] * v155.f64[0] * 0.5 - v27;
    float64x2_t v30 = *(float64x2_t *)v25;
    long long v31 = *(_OWORD *)(v25 + 16);
    long long v32 = *(_OWORD *)(v25 + 48);
    long long v102 = *(_OWORD *)(v25 + 32);
    long long v103 = v32;
    float64x2_t v100 = v30;
    long long v101 = v31;
    long long v33 = *(_OWORD *)(v25 + 64);
    long long v34 = *(_OWORD *)(v25 + 80);
    long long v35 = *(_OWORD *)(v25 + 112);
    long long v106 = *(_OWORD *)(v25 + 96);
    long long v107 = v35;
    long long v104 = v33;
    long long v105 = v34;
    PCMatrix44Tmpl<double>::leftTranslate(&v100, (float64x2_t)Resolution, v29 - v28, 0.0);
    LiAgent::setPixelTransform((uint64_t)a2, (uint64_t)&v100);
  }
  CMTime v151 = 0;
  if ((OZFxGenerator::_needsToRender((uint64_t)this, &v151) & 1) == 0)
  {
    *a5 = v151;
    goto LABEL_70;
  }
  uint64_t v36 = (void *)*((void *)this + 2427);
  [v36 setIsRendering:1];
  double v37 = (*(double (**)(OZFxGenerator *))(*(void *)this + 1328))(this);
  v150[0] = v37 * v154.f64[0];
  v150[1] = v154.f64[1];
  v150[2] = v37 * v155.f64[0];
  v150[3] = v155.f64[1];
  if (v37 * v155.f64[0] <= 0.0 || v155.f64[1] <= 0.0)
  {
    [v36 setIsRendering:0];
    *a5 = 0;
    goto LABEL_68;
  }
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v148);
  LiImagePolygon::set((uint64_t)v148, v154.f64, 0);
  LiAgent::projectAndClipPolygon(a2, v148, 2.0);
  if ((((char *)v148[9] - (char *)v148[8]) & 0x1FFFFFFFE0) != 0)
  {
    float64x2_t v146 = 0uLL;
    long long v147 = *(_OWORD *)v95;
    bounds<LiPolygon::PosFacet,double>((uint64_t)&v149, (uint64_t)&v146);
    long long v144 = *(_OWORD *)a4;
    uint64_t v145 = *((void *)a4 + 2);
    int v38 = (*((uint64_t (**)(id *, long long *))*v10 + 31))(v10, &v144);
    if (v38 == 6) {
      LiAgent::outCrop(a2, (const LiImagePolygon *)v148);
    }
    float64x2_t v39 = v146;
    long long v40 = v147;
    uint64_t HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    pixelFormatFromRendererIntermediateFormat(HeliumRenderer);
    uint64_t v42 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 304))(v42);
    if (v43) {
      int v44 = 32;
    }
    else {
      int v44 = 16;
    }
    uint64_t v143 = 0;
    uint64_t v93 = v36;
    uint64_t v143 = [*((id *)this + 2427) figTimeToFxTime:a3 withConversionData:0];
    uint64_t v45 = (*(uint64_t (**)(OZFxGenerator *))(*(void *)this + 648))(this);
    OZFxPlugSharedBase::CalculateRenderInfo((int)v10, v45, &v143, (uint64_t *)&v152, v44, *((_DWORD *)a4 + 123), &v140);
    int v96 = v44;
    uint64_t v139 = 0x3FF0000000000000;
    uint64_t v136 = 0x3FF0000000000000;
    uint64_t v133 = 0x3FF0000000000000;
    uint64_t v130 = 0x3FF0000000000000;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    (*((void (**)(id *, uint64_t *))*v10 + 43))(v10, &v130);
    uint64_t v128 = 0;
    PCSharedCount::PCSharedCount(&v129);
    (*((void (**)(id *, LiAgent *, uint64_t *, OZRenderParams *, uint64_t *, void))*v10 + 58))(v10, a2, &v128, a4, &v130, 0);
    PCMatrix44Tmpl<double>::operator*(*((void *)a2 + 20), (long long *)&v130, (uint64_t)v127);
    long long v46 = FxMatrixFromPCMatrix((uint64_t)v127);
    OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)v10);
    *(_WORD *)long long v126 = 0;
    long long v47 = (void *)*((void *)this + 2426);
    v125[0] = v140;
    v125[1] = v141;
    v125[2] = v142;
    double v94 = v47;
    OZFxPlug_CallFrameSetup((uint64_t)this, v47, v125, 0, &v126[1], v126);
    __int16 v124 = *(_WORD *)v126;
    CMTime v123 = *a3;
    OZFxPlugSharedBase::getBestRenderingBehavior((OZFxPlugSharedBase *)v10, (LiRenderParameters **)a2, (BOOL *)&v124 + 1, (BOOL *)&v124, &v123);
    *(_WORD *)long long v126 = v124;
    if (HIBYTE(v124)) {
      char v48 = 1;
    }
    else {
      char v48 = v43;
    }
    if ((v48 & 1) == 0)
    {
      *((void *)&v142 + OZLinkBehavior::clearAll(this, 1) = 3;
      int v96 = 32;
    }
    int v91 = v38;
    unsigned __int8 v122 = 0;
    if ((*((unsigned int (**)(id *))*v10 + 41))(v10))
    {
      v121[0] = v140;
      v121[1] = v141;
      v121[2] = v142;
      [v94 filteredEdges:&v122 withInfo:v121];
    }
    (*((void (**)(id *, void))*v10 + 28))(v10, v122);
    uint64_t v92 = v46;
    float64x2_t v49 = v155;
    float64x2_t v50 = v152;
    LiAgent::getRenderDevice((LiRenderParameters **)a2);
    uint64_t v120 = 0;
    memset(v119, 0, sizeof(v119));
    CMTime v51 = (OZSceneNode *)(*(uint64_t (**)(OZFxGenerator *))(*(void *)this + 648))(this);
    int v52 = vcvtpd_s64_f64(v49.f64[0] * v50.f64[0]);
    int v53 = vcvtpd_s64_f64(v49.f64[1] * v50.f64[1]);
    CMTime v118 = *a3;
    OZFxPlug_CalculateImageInfo(v10, v51, v52, v53, v96, v126[1], (uint64_t)v119, &v118);
    long long v116 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    if (((*((uint64_t (**)(id *, long long *))*v10 + 29))(v10, &v116) & 1) == 0)
    {
      OZFxPlug_ClampRectToMaxTextureSize(&v146, &v100);
      float64x2_t v146 = v100;
      long long v147 = v101;
    }
    long long v114 = *(_OWORD *)&a3->value;
    CMTimeEpoch v115 = a3->epoch;
    long long v54 = OZFxGenerator::createOutputFxImage((uint64_t)this, a2, v52, v53, v96, v126[1], (uint64_t)&v146, v150, v152.f64[0], v152.f64[1], &v114, (uint64_t)a4, (uint64_t)v119);
    [(FxImage *)v54 setPixelTransform:v92];
    long long v112 = *(_OWORD *)&a3->value;
    CMTimeEpoch v113 = a3->epoch;
    char v55 = (*((uint64_t (**)(id *, long long *))*v10 + 29))(v10, &v112);
    if (v126[1]) {
      char v63 = v55;
    }
    else {
      char v63 = 1;
    }
    if ((v63 & 1) == 0)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", v56, v57, v58, v59, v60, v61, v62, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZFxGenerator.mm");
      pcAbortImpl();
    }
    uint64_t v64 = *((void *)a4 + 34);
    v111[0] = v140;
    v111[1] = v141;
    v111[2] = v142;
    int v65 = OZFxPlug_CallRender((uint64_t)this, v94, v64, (uint64_t)v54, 0, v111, (uint64_t)a4);
    (*((void (**)(id *, CMTime *))*v10 + 59))(v10, a3);
    [*((id *)this + 2433) setAgent:0];
    OZFxPlugSharedBase::getPluginColorDescription(v10, a2, &v110);
    long long v108 = *(_OWORD *)&a3->value;
    CMTimeEpoch v109 = a3->epoch;
    if (!(*((unsigned int (**)(id *, long long *))*v10 + 29))(v10, &v108))
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", v66, v67, v68, v69, v70, v71, v72, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZFxGenerator.mm");
      pcAbortImpl();
    }
    if (!v65)
    {
      uint64_t v75 = [(FxImage *)v54 width];
      uint64_t v76 = [(FxImage *)v54 height];
      uint64_t CGColorSpace = FxColorDescription::getCGColorSpace(&v110);
      OZFxPlug_GenerateFailedRenderNode((uint64_t)this, v75, v76, CGColorSpace, (uint64_t)&v151, v78, v79, v80);
    }
    if (v91 != 6)
    {
      if (v54)
      {
        [(FxImage *)v54 heliumRef];
        if (*(void *)&v100.f64[0])
        {
          uint64_t v81 = HGRectMake4i(vcvtmd_s64_f64(v39.f64[0] + 0.000000999999997 + 0.0000001), vcvtmd_s64_f64(v39.f64[1] + 0.000000999999997 + 0.0000001), vcvtpd_s64_f64(v39.f64[0] + *(double *)&v40 + -0.000000999999997), vcvtpd_s64_f64(v39.f64[1] + *((double *)&v40 + 1) + -0.000000999999997));
          uint64_t v83 = v82;
          uint64_t v84 = (HGCrop *)HGObject::operator new(0x1A0uLL);
          HGCrop::HGCrop(v84);
          (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v84 + 96))(v84, 0, (float)(int)v81, (float)SHIDWORD(v81), (float)(int)v83, (float)SHIDWORD(v83));
          (*(void (**)(HGCrop *, void, unint64_t))(*(void *)v84 + 120))(v84, 0, *(void *)&v100.f64[0]);
          if (v151 != (HGNode *)v84)
          {
            if (v151) {
              (*(void (**)(void))(*(void *)v151 + 24))();
            }
            CMTime v151 = (HGNode *)v84;
            (*(void (**)(HGCrop *))(*(void *)v84 + 16))(v84);
          }
          (*(void (**)(HGCrop *))(*(void *)v84 + 24))(v84);
          if (*(void *)&v100.f64[0]) {
            (*(void (**)(unint64_t))(**(void **)&v100.f64[0] + 24))(*(void *)&v100.f64[0]);
          }
        }
      }
      goto LABEL_54;
    }
    if (v54)
    {
      [(FxImage *)v54 heliumRef];
      uint64_t v73 = *(HGNode **)&v100.f64[0];
      uint64_t v74 = v151;
      if (v151 == *(HGNode **)&v100.f64[0])
      {
        if (*(void *)&v100.f64[0]) {
          (*(void (**)(void))(**(void **)&v100.f64[0] + 24))();
        }
        goto LABEL_54;
      }
      if (!v151) {
        goto LABEL_53;
      }
    }
    else
    {
      v100.f64[0] = 0.0;
      uint64_t v74 = v151;
      if (!v151)
      {
LABEL_54:
        uint64_t RequestedColorDescription = LiAgent::getRequestedColorDescription(a2);
        int v86 = *(CGColorSpace **)RequestedColorDescription;
        v97[0] = v86;
        if (v86) {
          PCCFRefTraits<CGColorSpace *>::retain(v86);
        }
        uint64_t v87 = *(CGColorSpace **)(RequestedColorDescription + 8);
        int v98 = *(_DWORD *)(RequestedColorDescription + 16);
        v97[1] = v87;
        char v99 = *(unsigned char *)(RequestedColorDescription + 24);
        OZFxPlug_ConformFromProcessingDescription(&v100, &v151, &v110, v97);
        long long v88 = *(HGNode **)&v100.f64[0];
        if (v151 == *(HGNode **)&v100.f64[0])
        {
          if (v151) {
            (*(void (**)(void))(*(void *)v151 + 24))();
          }
        }
        else
        {
          if (v151)
          {
            (*(void (**)(void))(*(void *)v151 + 24))();
            long long v88 = *(HGNode **)&v100.f64[0];
          }
          CMTime v151 = v88;
          v100.f64[0] = 0.0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(v97);
        [v93 clearImageList];
        if ([(FxImage *)v54 imageType] == 1 && ([(FxImage *)v54 _ownsData] & 1) == 0)
        {
          uint64_t v89 = [(FxImage *)v54 dataPtr];
          if (v89) {
            MEMORY[0x1BA9BFBA0](v89, 0x1000C4077774924);
          }
        }

        [v94 frameCleanup];
        [v93 setIsRendering:0];
        *a5 = v151;
        CMTime v151 = 0;
        PCCFRef<CGColorSpace *>::~PCCFRef(&v110._pcColorDesc._colorSpaceRef._obj);
        PCSharedCount::~PCSharedCount(&v129);
        goto LABEL_67;
      }
    }
    (*(void (**)(HGNode *))(*(void *)v74 + 24))(v74);
    uint64_t v73 = *(HGNode **)&v100.f64[0];
LABEL_53:
    CMTime v151 = v73;
    goto LABEL_54;
  }
  [v36 setIsRendering:0];
  *a5 = 0;
LABEL_67:
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v148);
LABEL_68:
  if (v151) {
    (*(void (**)(HGNode *))(*(void *)v151 + 24))(v151);
  }
LABEL_70:
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)v156);
  uint64_t result = v157;
  if (v157)
  {
    if (v158) {
      return (PCMutex *)PCMutex::unlock(v157);
    }
  }
  return result;
}

void sub_1B7D5D680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CGColorSpace *a45)
{
  HGObject::operator delete(v45);
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 24))(a23);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a45);
  PCSharedCount::~PCSharedCount(a15);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&STACK[0x468]);
  if (STACK[0x4F8]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x4F8] + 24))(STACK[0x4F8]);
  }
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)(v46 - 184));
  PCLockSentry<PCMutex>::~PCLockSentry(v46 - 176);
  _Unwind_Resume(a1);
}

FxImage *OZFxGenerator::createOutputFxImage(uint64_t a1, LiAgent *this, int a3, int a4, int a5, int a6, uint64_t a7, double *a8, double a9, double a10, long long *a11, uint64_t a12, uint64_t a13)
{
  LiAgent::getRenderDevice((LiRenderParameters **)this);
  int64x2_t v21 = (OZSceneNode *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 648))(a1);
  *(_OWORD *)&v57.CMTimeValue value = *a11;
  v57.CMTimeEpoch epoch = *((void *)a11 + 2);
  OZFxPlug_CalculateImageInfo((id *)(a1 + 19384), v21, a3, a4, a5, a6, (uint64_t)&v58, &v57);
  long long v22 = v60;
  *(_OWORD *)(a13 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v59;
  *(_OWORD *)(a13 + 48) = v22;
  *(void *)(a13 + 64) = v61;
  long long v23 = *(_OWORD *)&v58._pcColorDesc._toneMapMethod._gain;
  *(_OWORD *)a13 = *(_OWORD *)&v58._pcColorDesc._colorSpaceRef._obj;
  *(_OWORD *)(a13 + 16) = v23;
  long long v55 = *a11;
  uint64_t v56 = *((void *)a11 + 2);
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)(a1 + 19384) + 232))(a1 + 19384, &v55))
  {
    uint64_t v24 = [FxHeliumImage alloc];
    long long v25 = *(_OWORD *)(a13 + 48);
    unsigned int v53[2] = *(_OWORD *)(a13 + 32);
    v53[3] = v25;
    uint64_t v54 = *(void *)(a13 + 64);
    long long v26 = *(_OWORD *)(a13 + 16);
    v53[0] = *(_OWORD *)a13;
    v53[1] = v26;
    double v27 = v53;
  }
  else
  {
    if (a6)
    {
      double v28 = [FxTexture alloc];
      long long v29 = *(_OWORD *)(a13 + 48);
      v51[2] = *(_OWORD *)(a13 + 32);
      v51[3] = v29;
      uint64_t v52 = *(void *)(a13 + 64);
      long long v30 = *(_OWORD *)(a13 + 16);
      v51[0] = *(_OWORD *)a13;
      v51[1] = v30;
      long long v31 = [(FxTexture *)v28 initWithInfo:v51 textureId:1 andTarget:3553];
      goto LABEL_7;
    }
    uint64_t v24 = [FxBitmap alloc];
    long long v32 = *(_OWORD *)(a13 + 48);
    void v49[2] = *(_OWORD *)(a13 + 32);
    PCString v49[3] = v32;
    uint64_t v50 = *(void *)(a13 + 64);
    long long v33 = *(_OWORD *)(a13 + 16);
    v49[0] = *(_OWORD *)a13;
    v49[1] = v33;
    double v27 = v49;
  }
  long long v31 = [(FxHeliumImage *)v24 initWithInfo:v27];
LABEL_7:
  p_super = &v31->super;
  -[FxImage setBounds:](v31, "setBounds:", *a8, a8[1], a8[2], a8[3]);
  int v35 = vcvtpd_s64_f64(*(double *)(a7 + 16));
  int v36 = vcvtpd_s64_f64(*(double *)(a7 + 24));
  if (v35 >= 0) {
    int v37 = v35;
  }
  else {
    int v37 = v35 + 1;
  }
  if (v36 >= 0) {
    int v38 = v36;
  }
  else {
    int v38 = v36 + 1;
  }
  -[FxImage setDod:](p_super, "setDod:", -(v37 >> 1) | ((unint64_t)-(v38 >> 1) << 32), (v35 - (v37 >> 1)) | ((unint64_t)(v36 - (v38 >> 1)) << 32));
  [(FxImage *)p_super setScaleX:a9];
  [(FxImage *)p_super setScaleY:a10];
  uint64_t v48 = 0;
  if (*(unsigned char *)(a12 + 488)) {
    uint64_t v48 = *(unsigned int *)(a12 + 492);
  }
  -[FxImage setFieldOrder:](p_super, "setFieldOrder:");
  long long v46 = *a11;
  uint64_t v47 = *((void *)a11 + 2);
  uint64_t v45 = [*(id *)(a1 + 19416) figTimeToFxTime:&v46 withConversionData:0];
  [(FxImage *)p_super setField:(int)OZChannelBase::isObjectRef((OZChannelBase *)(a1 + 19384))];
  unint64_t PluginNCLC = OZFxPlugSharedBase::getPluginNCLC((id *)(a1 + 19384), this);
  int v44 = v39;
  [(FxImage *)p_super setNCLCValue:FxConvertPCNCLCCodeToFxNCLCValue(&PluginNCLC)];
  [(FxImage *)p_super setColorSpace:OZFxPlugSharedBase::getPluginColorSpace((id *)(a1 + 19384), this)];
  OZFxPlugSharedBase::getPluginColorDescription((id *)(a1 + 19384), this, &v58);
  [(FxImage *)p_super setDynamicRangeType:OZFxPlug_ConvertDynamicRangeType(&v58)];
  OZFxPlugSharedBase::SetImageColorPrimaries((OZFxPlugSharedBase *)(a1 + 19384), p_super, this);
  [(FxImage *)p_super setPixelTransform:FxMatrixFromPCMatrix(*((void *)this + 20))];
  PCCFRef<CGColorSpace *>::~PCCFRef(&v58._pcColorDesc._colorSpaceRef._obj);
  return p_super;
}

void sub_1B7D5DC70(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 184));
  _Unwind_Resume(a1);
}

void OZFxGenerator::makeRenderImageSource(OZFxGenerator *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(OZFxGenerator *, void *, OZRenderParams *))(*(void *)this + 1520))(this, v14, a2);
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *((void *)a2 + 2);
  if ((*(uint64_t (**)(char *, long long *))(*((void *)this + 2423) + 232))((char *)this + 19384, &v12)) {
LABEL_8:
  }
    operator new();
  if (*(double *)&v15 <= 4096.0)
  {
    if (*((double *)&v15 + 1) <= 4096.0) {
      goto LABEL_8;
    }
  }
  else
  {
    *(void *)&long long v15 = 0x40B0000000000000;
    if (*((double *)&v15 + 1) <= 4096.0) {
      goto LABEL_7;
    }
  }
  *((void *)&v15 + OZLinkBehavior::clearAll(this, 1) = 0x40B0000000000000;
LABEL_7:
  PCBitDepth::getFromBitsPerChannel((PCBitDepth *)*((unsigned int *)a2 + 83), 0);
  Name = (OZChannelBase *)OZObjectManipulator::getName((OZFxGenerator *)((char *)this + 16));
  PCURL::PCURL((PCURL *)&v11, @"Generator is too big message");
  OZChannelBase::setRangeName(Name, &v11);
  PCString::~PCString(&v11);
  goto LABEL_8;
}

void sub_1B7D5DE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void non-virtual thunk to'OZFxGenerator::makeRenderImageSource(OZFxGenerator *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

uint64_t OZFxGenerator::getRootChannelFolder(id *this)
{
  return [this[2427] baseChannel];
}

uint64_t OZFxGenerator::parseEnd(OZFxGenerator *this, PCSerializerReadStream *a2)
{
  CMTime v4 = (PCString *)((char *)this + 19384);
  *((_DWORD *)this + 4956) = *((_DWORD *)a2 + 26);
  if ((*(unsigned int (**)(char *))(*((void *)this + 2423) + 208))((char *)this + 19384))
  {
    uint64_t v5 = (void *)*((void *)this + 2427);
    uint64_t v6 = [v5 channelMap];
    uint64_t v9 = *(void *)(v6 + 8);
    uint64_t v7 = v6 + 8;
    uint64_t v8 = v9;
    if (v9)
    {
      uint64_t v10 = v7;
      do
      {
        unsigned int v11 = *(_DWORD *)(v8 + 32);
        BOOL v12 = v11 >= 0x2712;
        if (v11 >= 0x2712) {
          uint64_t v13 = (uint64_t *)v8;
        }
        else {
          uint64_t v13 = (uint64_t *)(v8 + 8);
        }
        if (v12) {
          uint64_t v10 = v8;
        }
        uint64_t v8 = *v13;
      }
      while (*v13);
      if (v10 != v7 && *(_DWORD *)(v10 + 32) <= 0x2712u) {
        [v5 addFlipCheckbox:10002 withChannel:*(void *)(v10 + 40)];
      }
    }
  }
  FxColorDescription v14 = (void *)*((void *)this + 2427);
  if (((*(uint64_t (**)(PCString *))(*((void *)this + 2423) + 288))(v4) & 1) != 0
    || [v14 hasPointParameters])
  {
    [v14 movePublishOSCChannelToEnd];
  }
  CFStringRef v15 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
  if (!v15
    || CFStringCompare(v15, @"com.apple.FinalCutApp", 1uLL)
    || (OZFxPlugSharedBase::isHMTCompatible(v4) & 1) != 0)
  {
    uint64_t v16 = (*(uint64_t (**)(OZFxGenerator *))(*(void *)this + 272))(this);
    if (!v16) {
      return OZElement::parseEnd((OZElement *)this, a2);
    }
    char v17 = *(const __CFURL ***)(v16 + 1584);
    if (!v17) {
      return OZElement::parseEnd((OZElement *)this, a2);
    }
    OZDocument::getFilename(v17, (PCURL *)&v21);
    PCURL::PCURL((PCURL *)&v20, &v21, 0);
    if (!OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v20, v18)
      || (OZFxPlugSharedBase::isHMTCompatible(v4) & 1) != 0)
    {
      PCURL::~PCURL((PCURL *)&v20);
      PCString::~PCString(&v21);
      return OZElement::parseEnd((OZElement *)this, a2);
    }
    (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
    PCURL::~PCURL((PCURL *)&v20);
    PCString::~PCString(&v21);
  }
  else
  {
    (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
  }
  return 0;
}

void sub_1B7D5E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZFxGenerator::parseEnd(OZFxGenerator *this, PCSerializerReadStream *a2)
{
  return OZFxGenerator::parseEnd((OZFxGenerator *)((char *)this - 48), a2);
}

void *OZFxGenerator::print(uint64_t a1, void *a2, int a3)
{
  LiImageSource::printIndent(a2, a3);
  uint64_t v5 = (void *)[*(id *)(a1 + 19416) channelMap];
  uint64_t v6 = v5 + 1;
  uint64_t v7 = (void *)*v5;
  if ((void *)*v5 != v5 + 1)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = (const void *)v7[5];
      if (v9)
      {
        if (v10)
        {
          Node = (char *)OZChanSceneNodeRef::getNode(v10);
          if (v8 >= 1) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
          }
          BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"image parameter: ", 17);
          Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(Node + 16));
          CStr = PCString::createCStr(Name);
          if (CStr)
          {
            CFStringRef v15 = CStr;
            size_t v16 = strlen(CStr);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v15, v16);
            free(v15);
          }
          ++v8;
        }
      }
      char v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          char v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v7[2];
          BOOL v19 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v19);
      }
      uint64_t v7 = v18;
    }
    while (v18 != v6);
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

uint64_t OZARGetBodyJointTransformFromSkeleton@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  if (a2)
  {
    long long v5 = *MEMORY[0x1E4F149A0];
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 16);
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 32);
    long long v8 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 48);
    switch(result)
    {
      case 1:
        uint64_t v9 = (__CFString **)MEMORY[0x1E4F14E60];
        goto LABEL_11;
      case 2:
        uint64_t v9 = (__CFString **)MEMORY[0x1E4F14E68];
        goto LABEL_11;
      case 3:
        uint64_t v10 = @"left_forearm_joint";
        goto LABEL_12;
      case 4:
        uint64_t v9 = (__CFString **)MEMORY[0x1E4F14E70];
        goto LABEL_11;
      case 5:
        uint64_t v9 = (__CFString **)MEMORY[0x1E4F14E78];
        goto LABEL_11;
      case 6:
        uint64_t v10 = @"right_forearm_joint";
        goto LABEL_12;
      case 7:
        uint64_t v9 = (__CFString **)MEMORY[0x1E4F14E80];
LABEL_11:
        uint64_t v10 = *v9;
        goto LABEL_12;
      case 8:
        uint64_t v10 = @"left_foot_joint";
        goto LABEL_12;
      case 9:
        uint64_t v10 = @"right_foot_joint";
        goto LABEL_12;
      case 11:
        uint64_t v10 = @"left_leg_joint";
        goto LABEL_12;
      case 12:
        uint64_t v10 = @"left_upLeg_joint";
        goto LABEL_12;
      case 13:
        uint64_t v10 = @"right_leg_joint";
        goto LABEL_12;
      case 14:
        uint64_t v10 = @"right_upLeg_joint";
LABEL_12:
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v10, *(double *)&v5, *(double *)&v6, *(double *)&v7, *(double *)&v8), "PCSIMDFloat4x4Value");
        break;
      default:
        break;
    }
    uint64_t result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"bodyAnchorTransform", v5, v6, v8, v7), "PCSIMDFloat4x4Value");
    uint64_t v15 = 0;
    v22[0] = v18;
    v22[1] = v19;
    _OWORD v22[2] = v21;
    v22[3] = v20;
    do
    {
      v22[v15 + 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(v22[v15])), v12, *(float32x2_t *)&v22[v15], 1), v13, (float32x4_t)v22[v15], 2), v14, (float32x4_t)v22[v15], 3);
      ++v15;
    }
    while (v15 != 4);
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        *(double *)(v3 + 8 * j) = *(float *)((unint64_t)&v22[j + 4] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
      v3 += 32;
    }
  }
  else
  {
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  return result;
}

void *OZARMakePlaneInfoFromPlaneAnchor(ARPlaneAnchor *a1)
{
  uint64_t v2 = objc_opt_new();
  objc_msgSend(v2, "setAlignment:", objc_msgSend(NSNumber, "numberWithInteger:", -[ARPlaneAnchor alignment](a1, "alignment")));
  objc_msgSend(v2, "setClassification:", objc_msgSend(NSNumber, "numberWithInteger:", -[ARPlaneAnchor classification](a1, "classification")));
  uint64_t v3 = (void *)MEMORY[0x1E4F29238];
  [(ARPlaneAnchor *)a1 extent];
  objc_msgSend(v2, "setExtent:", objc_msgSend(v3, "PCValueWithSIMDFloat3:"));
  CMTime v4 = (void *)MEMORY[0x1E4F29238];
  [(ARPlaneAnchor *)a1 center];
  objc_msgSend(v2, "setCenter:", objc_msgSend(v4, "PCValueWithSIMDFloat3:"));
  long long v5 = (void *)MEMORY[0x1E4F29238];
  [(ARPlaneAnchor *)a1 transform];
  objc_msgSend(v2, "setTransform:", objc_msgSend(v5, "PCValueWithSIMDFloat4x4:"));
  objc_msgSend(v2, "setIdentifier:", -[ARPlaneAnchor identifier](a1, "identifier"));
  return v2;
}

void *OZARMakePlaneListFromARFrame(ARFrame *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = [(ARFrame *)a1 anchors];
  uint64_t v4 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(ARPlaneAnchor **)(*((void *)&v11 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v9 = OZARMakePlaneInfoFromPlaneAnchor(v8);
          [v2 addObject:v9];
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  return v2;
}

void *OZARMakePlaneListFromPlanesDict(NSDictionary *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v3 = [(NSDictionary *)a1 allValues];
  uint64_t v4 = [(NSArray *)v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(void **)(*((void *)&v19 + 1) + 8 * v7);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v16;
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v16 != v11) {
                objc_enumerationMutation(v8);
              }
              long long v13 = OZARMakePlaneInfoFromPlaneAnchor(*(ARPlaneAnchor **)(*((void *)&v15 + 1) + 8 * v12));
              [v2 addObject:v13];

              ++v12;
            }
            while (v10 != v12);
            uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }
          while (v10);
        }
        ++v7;
      }
      while (v7 != v5);
      uint64_t v5 = [(NSArray *)v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v5);
  }
  return v2;
}

BOOL OZARGetWorldPointFromNDC(_OWORD *a1, double *a2, float64x2_t *a3, float a4, float a5, float a6, float a7)
{
  long long v13 = a1[5];
  v29[4] = a1[4];
  v29[5] = v13;
  long long v14 = a1[7];
  v29[6] = a1[6];
  v29[7] = v14;
  long long v15 = a1[1];
  v29[0] = *a1;
  v29[1] = v15;
  long long v16 = a1[3];
  v29[2] = a1[2];
  v29[3] = v16;
  BOOL v17 = PCMatrix44Tmpl<double>::invert((double *)v29, (double *)v29, 0.0);
  if (v17)
  {
    v27[0] = a4;
    v27[1] = a5;
    long long v28 = xmmword_1B7E73BA0;
    memset(v26, 0, sizeof(v26));
    PCMatrix44Tmpl<double>::transform<double>((double *)v29, v27, v26[0].f64);
    v26[0].f64[0] = v26[0].f64[0] / v26[1].f64[1];
    *(float64x2_t *)((char *)v26 + 8) = vdivq_f64(*(float64x2_t *)((char *)v26 + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26[1].f64[1], 0));
    v26[1].f64[1] = v26[1].f64[1] / v26[1].f64[1];
    float64x2_t v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26[0].f64[1], 0);
    v18.f64[0] = v26[0].f64[0];
    double v24 = a6;
    uint64_t v25 = 0x3FF0000000000000;
    long long v22 = 0u;
    float64x2_t v23 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0), vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((float)-a7), 0), v18))));
    float64x2_t v21 = 0u;
    PCMatrix44Tmpl<double>::transform<double>(a2, v23.f64, v21.f64);
    double v19 = 1.0 / *((double *)&v22 + 1) * *(double *)&v22;
    *a3 = vmulq_n_f64(v21, 1.0 / *((double *)&v22 + 1));
    a3[1].f64[0] = v19;
  }
  return v17;
}

void OZGetViewProjectionMatrix(OZScene *a1, CMTime *a2, uint64_t a3)
{
  unsigned int ActiveCamera = OZScene::getActiveCamera(a1, a2);
  Node = OZScene::getNode(a1, ActiveCamera);
  if (Node) {
  else
  }
    long long v8 = 0;
  OZRenderState::OZRenderState(&v10);
  *(_OWORD *)&v10.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)&a2->value;
  v10.var0.unsigned int var3 = a2->epoch;
  (*(void (**)(OZCamera *, uint64_t, OZRenderState *))(*(void *)v8 + 1256))(v8, a3, &v10);
  CMTime v9 = *a2;
  OZCamera::cameraAtTime(v8, &v9);
}

void sub_1B7D5F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
}

void OZARGetWorldPoint(OZScene *a1)
{
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  uint64_t v1 = 0x3FF0000000000000;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  OZGetViewProjectionMatrix(a1, &v11, (uint64_t)&v1);
}

void OZARGetPersonWorldPoint(OZScene *a1, void *a2, int a3, double a4, double a5)
{
  [a2 meanDepth];
  objc_msgSend(a2, "rectScaledToSize:", a4, a5);
  CGFloat v14 = v10;
  CGFloat v15 = v11;
  CGFloat v16 = v12;
  CGFloat Height = v13;
  if ((a3 & 0xFFFFFFFD) == 1)
  {
    float MidX = CGRectGetMidX(*(CGRect *)&v10);
    v28.origin.x = v14;
    v28.origin.y = v15;
    v28.size.width = v16;
    v28.size.height = Height;
    float MidY = CGRectGetMidY(v28);
    float v20 = a4 * 0.5;
    double v21 = (float)(v20 - (float)(MidX - v20));
    v29.origin.x = v14;
    v29.origin.y = v15;
    v29.size.width = v16;
    v29.size.height = Height;
    *(float *)&double v21 = v21 - CGRectGetWidth(v29) * 0.5;
    float v22 = a5 * 0.5;
    double v23 = (float)(v22 - (float)(MidY - v22));
    v30.origin.x = v14;
    v30.origin.y = v15;
    v30.size.width = v16;
    v30.size.height = Height;
    float v24 = v23 - CGRectGetHeight(v30) * 0.5;
    CGFloat v25 = *(float *)&v21;
    CGFloat v26 = v24;
    v31.origin.x = v14;
    v31.origin.y = v15;
    v31.size.width = v16;
    v31.size.height = Height;
    CGFloat Width = CGRectGetWidth(v31);
    v32.origin.x = v14;
    v32.origin.y = v15;
    v32.size.width = v16;
    v32.size.height = Height;
    CGFloat Height = CGRectGetHeight(v32);
    CGFloat v16 = Width;
    CGFloat v15 = v26;
    CGFloat v14 = v25;
  }
  v33.origin.x = v14;
  v33.origin.y = v15;
  v33.size.width = v16;
  v33.size.height = Height;
  CGRectGetMidX(v33);
  v34.origin.x = v14;
  v34.origin.y = v15;
  v34.size.width = v16;
  v34.size.height = Height;
  CGRectGetMidY(v34);
  OZARGetWorldPoint(a1);
}

uint64_t OZARSetPersonInfoJoints(OZARPersonInfo *a1, NSDictionary *a2, float a3)
{
  double v5 = a3;
  for (uint64_t i = 1; i != 15; ++i)
  {
    OZARGetBodyJointTransformFromSkeleton(i, a2, (uint64_t)v23);
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    int v27 = 4;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v30 = 0;
    PCMatrix44Tmpl<double>::getTransformation(v23, (uint64_t)&v24);
    uint64_t v22 = 0x3FF0000000000000;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v14 = 0;
    long long v16 = 0u;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint64_t v10 = 0x3FF0000000000000;
    uint64_t v13 = 0x3FF0000000000000;
    uint64_t v17 = 0x3FF0000000000000;
    *(double *)&long long v12 = *(double *)&v24 * v5;
    double v15 = *((double *)&v24 + 1) * v5;
    double v18 = *(double *)&v25 * v5;
    uint64_t v7 = [MEMORY[0x1E4F29238] PCValueWithSIMDFloat4x4:PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v10)];
    long long v8 = [(OZARPersonInfo *)a1 jointTransforms];
    uint64_t result = -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v7, [NSNumber numberWithInteger:i]);
  }
  return result;
}

void *OZARMakePersonList(ARFrame *a1, OZScene *a2, float a3, NSDictionary *a4)
{
  long long v6 = objc_opt_new();
  OZARGetBodyJointTransformFromSkeleton(10, a4, (uint64_t)v22);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  int v26 = 4;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v29 = 0;
  PCMatrix44Tmpl<double>::getTransformation(v22, (uint64_t)&v23);
  long long v10 = 0u;
  uint64_t v13 = 0;
  long long v15 = 0u;
  uint64_t v20 = 0;
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v9 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  long long v11 = COERCE_UNSIGNED_INT64(*(double *)&v23 * a3);
  double v14 = *((double *)&v23 + 1) * a3;
  double v17 = *(double *)&v24 * a3;
  uint64_t v7 = -[OZARPersonInfo init:]([OZARPersonInfo alloc], "init:", [MEMORY[0x1E4F29238] PCValueWithSIMDFloat4x4:PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v9)]);
  -[OZARPersonInfo setIndex:](v7, "setIndex:", [NSNumber numberWithUnsignedInt:0]);
  OZARSetPersonInfoJoints(v7, a4, a3);
  [v6 addObject:v7];

  return v6;
}

uint64_t OZARMakePersonList(void *a1, OZScene *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = objc_opt_new();
  obuint64_t j = (id)[a1 detectedPersonMetadata];
  if ([obj count])
  {
    objc_msgSend((id)objc_msgSend(a1, "camera"), "imageResolution");
    size_t Width = CVPixelBufferGetWidth((CVPixelBufferRef)[a1 estimatedDepthData]);
    size_t Height = CVPixelBufferGetHeight((CVPixelBufferRef)[a1 estimatedDepthData]);
    memset(v17, 0, sizeof(v17));
    if ([obj countByEnumeratingWithState:v17 objects:v18 count:16])
    {
      __asm { FMOV            V0.2D, #-1.0 }
      uint64_t v13 = (void *)**((void **)&v17[0] + 1);
      objc_msgSend((id)objc_opt_new(), "setIndex:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", 0));
      OZARGetPersonWorldPoint(a2, v13, a3, (double)Width, (double)Height);
    }
  }
  return v15;
}

uint64_t **std::__tree<std::__value_type<unsigned long,SCNNode *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,SCNNode *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,SCNNode *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,SCNNode *>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  long long v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        double v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    long long v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void OZRenderParams::OZRenderParams(OZRenderParams *this, const OZRenderParams *a2)
{
  uint64_t v4 = OZRenderState::OZRenderState((OZRenderState *)this, (const OZRenderState *)a2);
  LOBYTE(v4[1].var0.var0) = *((unsigned char *)a2 + 264);
  *(_OWORD *)&v4[1].var0.var1 = *((_OWORD *)a2 + 17);
  double v5 = *((double *)a2 + 37);
  v4[1].var1 = *((double *)a2 + 36);
  v4[1].var2 = v5;
  if (v5 != 0.0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 39);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)this + 39) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  PCImageAttributes::PCImageAttributes((OZRenderParams *)((char *)this + 320), (const OZRenderParams *)((char *)a2 + 320));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 392));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 408));
  *((unsigned char *)this + 424) = *((unsigned char *)a2 + 424);
  *((_OWORD *)this + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)this + 28) = *((_OWORD *)a2 + 28);
  *((_OWORD *)this + 29) = *((_OWORD *)a2 + 29);
  *((void *)this + 60) = *((void *)a2 + 60);
  *((unsigned char *)this + 488) = *((unsigned char *)a2 + 488);
  *((_DWORD *)this + 123) = *((_DWORD *)a2 + 123);
  *((unsigned char *)this + 496) = *((unsigned char *)a2 + 496);
  *((_DWORD *)this + 125) = *((_DWORD *)a2 + 125);
  *((void *)this + 63) = *((void *)a2 + 63);
  *((_DWORD *)this + 128) = *((_DWORD *)a2 + 128);
  *((_WORD *)this + 258) = *((_WORD *)a2 + 258);
  long long v7 = *(_OWORD *)((char *)a2 + 520);
  long long v8 = *(_OWORD *)((char *)a2 + 552);
  *(_OWORD *)((char *)this + 536) = *(_OWORD *)((char *)a2 + 536);
  *(_OWORD *)((char *)this + 55OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v8;
  *(_OWORD *)((char *)this + 520) = v7;
  unint64_t v9 = (CGColorSpace *)*((void *)a2 + 71);
  *((void *)this + 7OZLinkBehavior::clearAll(this, 1) = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  *((_DWORD *)this + 144) = *((_DWORD *)a2 + 144);
  long long v10 = *(_OWORD *)((char *)a2 + 600);
  *(_OWORD *)((char *)this + 584) = *(_OWORD *)((char *)a2 + 584);
  *(_OWORD *)((char *)this + 600) = v10;
  long long v11 = *(_OWORD *)((char *)a2 + 632);
  *(_OWORD *)((char *)this + 616) = *(_OWORD *)((char *)a2 + 616);
  *(_OWORD *)((char *)this + 63OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v11;
  *(_OWORD *)((char *)this + 648) = *(_OWORD *)((char *)a2 + 648);
  long long v12 = *(_OWORD *)((char *)a2 + 680);
  *(_OWORD *)((char *)this + 664) = *(_OWORD *)((char *)a2 + 664);
  *(_OWORD *)((char *)this + 680) = v12;
  *((unsigned char *)this + 696) = *((unsigned char *)a2 + 696);
  *((_DWORD *)this + 175) = *((_DWORD *)a2 + 175);
  uint64_t v13 = (CGColorSpace *)*((void *)a2 + 88);
  *((void *)this + 88) = v13;
  if (v13) {
    PCCFRefTraits<CGColorSpace *>::retain(v13);
  }
  uint64_t v14 = *((void *)a2 + 89);
  *((_DWORD *)this + 180) = *((_DWORD *)a2 + 180);
  *((void *)this + 89) = v14;
  *((unsigned char *)this + 728) = *((unsigned char *)a2 + 728);
  *((_DWORD *)this + 184) = *((_DWORD *)a2 + 184);
  uint64_t v15 = (CGColorSpace *)*((void *)a2 + 93);
  *((void *)this + 93) = v15;
  if (v15) {
    PCCFRefTraits<CGColorSpace *>::retain(v15);
  }
  uint64_t v16 = *((void *)a2 + 94);
  *((_DWORD *)this + 190) = *((_DWORD *)a2 + 190);
  *((void *)this + 94) = v16;
  *((unsigned char *)this + 768) = *((unsigned char *)a2 + 768);
  *((_DWORD *)this + 194) = *((_DWORD *)a2 + 194);
  *((unsigned char *)this + 780) = *((unsigned char *)a2 + 780);
  double v17 = (CGColorSpace *)*((void *)a2 + 98);
  *((void *)this + 98) = v17;
  if (v17) {
    PCCFRefTraits<CGColorSpace *>::retain(v17);
  }
  uint64_t v18 = (CGColorSpace *)*((void *)a2 + 99);
  *((void *)this + 99) = v18;
  if (v18) {
    PCCFRefTraits<CGColorSpace *>::retain(v18);
  }
  *((unsigned char *)this + 800) = *((unsigned char *)a2 + 800);
  *((_DWORD *)this + 20OZLinkBehavior::clearAll(this, 1) = *((_DWORD *)a2 + 201);
  long long v19 = *(_OWORD *)((char *)a2 + 808);
  long long v20 = *(_OWORD *)((char *)a2 + 824);
  long long v21 = *(_OWORD *)((char *)a2 + 856);
  *(_OWORD *)((char *)this + 840) = *(_OWORD *)((char *)a2 + 840);
  *(_OWORD *)((char *)this + 856) = v21;
  *(_OWORD *)((char *)this + 808) = v19;
  *(_OWORD *)((char *)this + 824) = v20;
  long long v22 = *(_OWORD *)((char *)a2 + 872);
  long long v23 = *(_OWORD *)((char *)a2 + 888);
  long long v24 = *(_OWORD *)((char *)a2 + 920);
  *(_OWORD *)((char *)this + 904) = *(_OWORD *)((char *)a2 + 904);
  *(_OWORD *)((char *)this + 920) = v24;
  *(_OWORD *)((char *)this + 87OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
  *(_OWORD *)((char *)this + 888) = v23;
  *((unsigned char *)this + 936) = *((unsigned char *)a2 + 936);
  OZPlaybackEngine::OZPlaybackEngine((OZRenderParams *)((char *)this + 940), (double *)((char *)a2 + 940));
  *((void *)this + 119) = *((void *)a2 + 119);
  long long v25 = *(_OWORD *)((char *)a2 + 968);
  *((void *)this + 123) = *((void *)a2 + 123);
  *(_OWORD *)((char *)this + 968) = v25;
  *((void *)this + 124) = *((void *)a2 + 124);
  std::map<unsigned int,PCRect<double>>::map[abi:ne180100]((uint64_t)this + 1000, (uint64_t)a2 + 1000);
  std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)this + 128, (uint64_t)a2 + 1024);
  std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)this + 131, (uint64_t)a2 + 1048);
  *((void *)this + 134) = *((void *)a2 + 134);
  *((void *)this + 135) = *((void *)a2 + 135);
  long long v26 = *((_OWORD *)a2 + 68);
  *((void *)this + 138) = *((void *)a2 + 138);
  *((_OWORD *)this + 68) = v26;
  long long v27 = *(_OWORD *)((char *)a2 + 1112);
  *((void *)this + 14OZLinkBehavior::clearAll(this, 1) = *((void *)a2 + 141);
  *(_OWORD *)((char *)this + 111OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v27;
  long long v28 = *((_OWORD *)a2 + 71);
  *((void *)this + 144) = *((void *)a2 + 144);
  *((_OWORD *)this + 7OZLinkBehavior::clearAll(this, 1) = v28;
  long long v29 = *(_OWORD *)((char *)a2 + 1160);
  *((void *)this + 147) = *((void *)a2 + 147);
  *(_OWORD *)((char *)this + 1160) = v29;
  long long v30 = *((_OWORD *)a2 + 74);
  *((void *)this + 150) = *((void *)a2 + 150);
  *((_OWORD *)this + 74) = v30;
  *((_DWORD *)this + 30OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_DWORD *)a2 + 302);
  *((_WORD *)this + 606) = *((_WORD *)a2 + 606);
  *((_OWORD *)this + 76) = 0u;
  *((_WORD *)this + 616) = *((_WORD *)a2 + 616);
  *((void *)this + 155) = *((void *)a2 + 155);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 156, (const PCSharedCount *)a2 + 156);
  *((void *)this + 157) = *((void *)a2 + 157);
  *((void *)this + 158) = *((void *)a2 + 158);
  *((unsigned char *)this + 127OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((unsigned char *)a2 + 1272);
  *((void *)this + 160) = *((void *)a2 + 160);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 161, (const PCSharedCount *)a2 + 161);
  *((void *)this + 16OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)a2 + 162);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 163, (const PCSharedCount *)a2 + 163);
  *((_WORD *)this + 656) = *((_WORD *)a2 + 656);
  long long v31 = *(_OWORD *)((char *)a2 + 1316);
  long long v32 = *(_OWORD *)((char *)a2 + 1348);
  *(_OWORD *)((char *)this + 133OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)a2 + 1332);
  *(_OWORD *)((char *)this + 1348) = v32;
  *(_OWORD *)((char *)this + 1316) = v31;
  *((void *)this + 17OZLinkBehavior::clearAll(this, 1) = &unk_1F10AD5F8;
  *((void *)this + 173) = 0;
  *((void *)this + 17OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  int v33 = *((_DWORD *)a2 + 345);
  if (v33 <= 0) {
    int v34 = 0;
  }
  else {
    int v34 = (2 * v33) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)this + 1368, v33, v34);
  if (*((int *)a2 + 345) >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    do
    {
      LiLight::operator=(*((void *)this + 173) + v35, *((void *)a2 + 173) + v35);
      ++v36;
      v35 += 944;
    }
    while (v36 < *((int *)a2 + 345));
  }
  *((unsigned char *)this + 139OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((unsigned char *)a2 + 1392);
  *((unsigned char *)this + 1400) = *((unsigned char *)a2 + 1400);
  uint64_t v37 = *((void *)a2 + 176);
  *((void *)this + 176) = v37;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
  }
  *((_WORD *)this + 708) = *((_WORD *)a2 + 708);
  *((unsigned char *)this + 1418) = *((unsigned char *)a2 + 1418);
  *((void *)this + 120) = [*((id *)a2 + 120) copy];
}

void sub_1B7D6124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v16);
  PCSharedCount::~PCSharedCount(v15);
  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 1224);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12, *(void **)(v10 + 1056));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(void **)(v10 + 1032));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a10, *(void **)(v10 + 1008));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 792));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 784));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 744));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 704));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 568));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 344));
  long long v19 = *(std::__shared_weak_count **)(v10 + 312);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v20 = *(std::__shared_weak_count **)(v10 + 296);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void OZRenderParams::~OZRenderParams(OZRenderParams *this)
{
  uint64_t v2 = *((void *)this + 176);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 1368);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 163);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 161);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 156);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 153);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1048, *((void **)this + 132));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1024, *((void **)this + 129));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1000, *((void **)this + 126));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 99);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 98);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 93);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 88);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 71);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 43);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  double v5 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void OZRenderParams::setFFInputContext(uint64_t a1, void *a2)
{
  id v2 = *(id *)(a1 + 960);
  *(void *)(a1 + 960) = a2;
}

void OZFxPlugOOPDelegate::OZFxPlugOOPDelegate(OZFxPlugOOPDelegate *this, OZFxPlugSharedBase *a2)
{
  *((void *)this + OZLinkBehavior::clearAll(this, 1) = 0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)this = &unk_1F1171670;
  uint64_t v4 = *((void *)a2 + 44);
  uint64_t v3 = *((void *)a2 + 45);
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    double v5 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + OZLinkBehavior::clearAll(this, 1) = v4;
    *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *((void *)this + OZLinkBehavior::clearAll(this, 1) = v4;
    *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  }
}

void OZFxPlugOOPDelegate::~OZFxPlugOOPDelegate(OZFxPlugOOPDelegate *this)
{
  *(void *)this = &unk_1F1171670;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F1171670;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1BA9BFBA0);
}

const char *HgcMatteInt8::GetProgram(HgcMatteInt8 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  int v5 = (*(uint64_t (**)(HgcMatteInt8 *, HGRenderer *))(*(void *)this + 312))(this, a2);
  if (Target < 0x60600 && v5 == 0) {
    unsigned int v7 = 394016;
  }
  else {
    unsigned int v7 = Target;
  }
  if (v7 == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000391\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0.x = r0.x - half(hg_Params[0].x);\n"
             "    r0.x = clamp(r0.x + c0.x, 0.00000h, 1.00000h);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1)*float4(r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fa2d4cfa:a0eefd2f:8d5b4ecc:07d7e2b0\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000371\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0.x = r0.x - hg_Params[0].x;\n"
             "    r0.x = clamp(r0.x + c0.x, 0.00000f, 1.00000f);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0884afc2:e4cd50cf:2bdf39de:297b67ea\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (v7 <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  {
    if (v7 - 394016 < 0xF0 || v7 > 0x6043F) {
      return "!!ARBfp1.0     \n"
    }
             "##LEN=000000027b\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "ATTRIB $f1=fragment.texcoord[1];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $c0={1.000000000,0.000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1;\n"
             "##@\n"
             "##1\n"
             "TEX r0.x,$f1,texture[1],RECT;\n"
             "SUB r0.x,r0,$p0;\n"
             "ADD_SAT r0.x,r0,$c0;\n"
             "##0\n"
             "TEX r1,$f0,texture[0],RECT;\n"
             "MUL $o0,r1,r0.x;\n"
             "END\n"
             "##MD5=1b5b045c:de8ba7fd:cc5fcb6c:7137b273\n"
             "##SIG=00000000:00000003:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
    else {
      return "!!ARBfp1.0     \n"
    }
             "##LEN=00000003a8\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "ATTRIB $f1=fragment.texcoord[1];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $c0={0.5000000000,1.500000000,1.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2,r3,r4;\n"
             "##@\n"
             "SUB r0.xy,$f1,$c0.x;\n"
             "FLR r1.xy,r0;\n"
             "FRC r0.xy,r0;\n"
             "ADD r2.xy,r1,$c0.x;\n"
             "##1\n"
             "TEX r2.x,r2,texture[1],RECT;\n"
             "ADD r3.xy,r1,$c0.yxzw;\n"
             "##1\n"
             "TEX r3.x,r3,texture[1],RECT;\n"
             "ADD r4.xy,r1,$c0;\n"
             "##1\n"
             "TEX r4.x,r4,texture[1],RECT;\n"
             "ADD r1.xy,r1,$c0.y;\n"
             "##1\n"
             "TEX r1,r1,texture[1],RECT;\n"
             "LRP r3.x,r0.x,r3,r2;\n"
             "LRP r4.x,r0.x,r1,r4;\n"
             "LRP r0.x,r0.y,r4,r3;\n"
             "SUB r0.x,r0,$p0;\n"
             "ADD_SAT r0.x,r0,$c0.z;\n"
             "##0\n"
             "TEX r2,$f0,texture[0],RECT;\n"
             "MUL $o0,r2,r0.x;\n"
             "END\n"
             "##MD5=073ac337:9afb9c8f:632ee472:d83d1c21\n"
             "##SIG=00000000:00000001:00000001:00000000:0001:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000031e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0.x = r0.x - hg_ProgramLocal0.x;\n"
           "    r0.x = clamp(r0.x + c0.x, 0.00000, 1.00000);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*r0.xxxx;\n"
           "}\n"
           "//MD5=40fb4a71:f9f50746:185d13c1:9a332c4d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMatteInt8::InitProgramDescriptor(HgcMatteInt8 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMatteInt8_hgc_visible", "//Metal1.0     \n//LEN=0000000235\n[[ visible ]] FragmentOut HgcMatteInt8_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0.x = r0.x - hg_Params[0].x;\n"
    "    r0.x = clamp(r0.x + c0.x, 0.00000f, 1.00000f);\n"
    "    r1 = color0;\n"
    "    output.color0 = r1*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMatteInt8");
}

void sub_1B7D61798(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D61958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D619B0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D619A8);
}

void *HgcMatteInt8::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMatteInt8 [hgc1]");
}

uint64_t HgcMatteInt8::BindTexture(HgcMatteInt8 *this, HGRenderer **a2, int a3)
{
  unsigned int Target = HGRenderer::GetTarget(a2[18], 393216);
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    if (Target > 0x6043F || Target - 394016 <= 0xEF)
    {
      (*((void (**)(HGRenderer **, uint64_t, void))*a2 + 9))(a2, 1, 0);
      uint64_t v7 = (*(uint64_t (**)(HgcMatteInt8 *, void))(*(void *)this + 312))(this, 0);
      (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v7, v7);
    }
    HGHandler::TexCoord((HGHandler *)a2, 1, 0, 0, 0);
    if (!(*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2[18] + 128))(a2[18], 46)) {
      (*((void (**)(HGRenderer **))*a2 + 21))(a2);
    }
    (*((void (**)(HGRenderer **, uint64_t))*a2 + 15))(a2, *((void *)this + 51) + 32);
  }
  else
  {
    (*((void (**)(HGRenderer **, void, void))*a2 + 9))(a2, 0, 0);
    (*((void (**)(HGRenderer **, void, void))*a2 + 6))(a2, 0, 0);
    HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
    int v8 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2[18] + 128))(a2[18], 46);
    uint64_t result = 0;
    if (v8) {
      return result;
    }
    (*((void (**)(HGRenderer **))*a2 + 21))(a2);
  }
  return 0;
}

uint64_t HgcMatteInt8::Bind(HgcMatteInt8 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMatteInt8::RenderTile(HgcMatteInt8 *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcMatteInt8 *, uint64_t))(*(void *)this + 312))(this, v4);
  int v6 = *((_DWORD *)a2 + 1);
  int v7 = *((_DWORD *)a2 + 3) - v6;
  if (v7 >= 1)
  {
    int v8 = 0;
    v9.f32[0] = (float)*(int *)a2 + 0.5;
    v9.f32[1] = (float)v6 + 0.5;
    v9.i32[2] = 0;
    v9.i32[3] = 1.0;
    int v10 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    float32x4_t v11 = 0uLL;
    float32x4_t v12 = vaddq_f32(*(float32x4_t *)(*((void *)this + 51) + 80), vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*((void *)this + 51) + 32), v9.f32[0]), vmulq_n_f32(*(float32x4_t *)(*((void *)this + 51) + 48), v9.f32[1])), vmulq_f32(*(float32x4_t *)(*((void *)this + 51) + 64), (float32x4_t)0)));
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v14 = *((void *)a2 + 10);
    uint64_t v15 = 16 * *((int *)a2 + 22);
    uint64_t v16 = 16 * *((int *)a2 + 6);
    __asm { FMOV            V3.4S, #4.0 }
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    do
    {
      float32x4_t v23 = vaddq_f32(v12, vmulq_f32(v11, *(float32x4_t *)(*((void *)this + 51) + 48)));
      if (v10 < 4)
      {
        LODWORD(v7OZLinkBehavior::clearAll(this, 1) = 0;
        float32x4_t v25 = 0uLL;
      }
      else
      {
        int v24 = 0;
        float32x4_t v25 = 0uLL;
        uint64_t v26 = 32;
        do
        {
          long long v27 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v28 = v27[2];
          float32x4_t v29 = vaddq_f32(v23, vmulq_f32(v25, v28));
          float32x4_t v30 = vaddq_f32(v28, v29);
          float32x4_t v31 = vaddq_f32(v28, v30);
          float32x4_t v32 = vaddq_f32(v28, v31);
          uint64_t v33 = *((int *)a2 + 26);
          float32x4_t v34 = vsubq_f32(v29, v9);
          uint64_t v35 = *((void *)a2 + 12);
          if (v5)
          {
            int32x4_t v36 = vaddq_s32(vcvtq_s32_f32(v34), vcltzq_f32(v34));
            float32x2_t v37 = (float32x2_t)vsubq_f32(v34, vcvtq_f32_s32(v36)).u64[0];
            int v38 = (float32x4_t *)(v35 + 16 * (v36.i32[0] + v36.i32[1] * (int)v33));
            float32x4_t v39 = vaddq_f32(*v38, vmulq_n_f32(vsubq_f32(v38[1], *v38), v37.f32[0]));
            float32x4_t v40 = vaddq_f32(v39, vmulq_lane_f32(vsubq_f32(vaddq_f32(v38[v33], vmulq_n_f32(vsubq_f32(v38[(int)v33 + 1], v38[v33]), v37.f32[0])), v39), v37, 1));
            float32x4_t v41 = vsubq_f32(v30, v9);
            int32x4_t v42 = vaddq_s32(vcvtq_s32_f32(v41), vcltzq_f32(v41));
            v41.i64[0] = vsubq_f32(v41, vcvtq_f32_s32(v42)).u64[0];
            int v43 = (float32x4_t *)(v35 + 16 * (v42.i32[0] + v42.i32[1] * (int)v33));
            float32x4_t v44 = vaddq_f32(*v43, vmulq_n_f32(vsubq_f32(v43[1], *v43), v41.f32[0]));
            float32x4_t v45 = vaddq_f32(v44, vmulq_lane_f32(vsubq_f32(vaddq_f32(v43[v33], vmulq_n_f32(vsubq_f32(v43[(int)v33 + 1], v43[v33]), v41.f32[0])), v44), *(float32x2_t *)v41.f32, 1));
            float32x4_t v46 = vsubq_f32(v31, v9);
            int32x4_t v47 = vaddq_s32(vcvtq_s32_f32(v46), vcltzq_f32(v46));
            v46.i64[0] = vsubq_f32(v46, vcvtq_f32_s32(v47)).u64[0];
            uint64_t v48 = (float32x4_t *)(v35 + 16 * (v47.i32[0] + v47.i32[1] * (int)v33));
            float32x4_t v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v46.f32[0]));
            float32x4_t v50 = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v33], vmulq_n_f32(vsubq_f32(v48[(int)v33 + 1], v48[v33]), v46.f32[0])), v49), *(float32x2_t *)v46.f32, 1));
            float32x4_t v51 = vsubq_f32(v32, v9);
            int32x4_t v52 = vaddq_s32(vcvtq_s32_f32(v51), vcltzq_f32(v51));
            v51.i64[0] = vsubq_f32(v51, vcvtq_f32_s32(v52)).u64[0];
            int v53 = (float32x4_t *)(v35 + 16 * (v52.i32[0] + v52.i32[1] * (int)v33));
            float32x4_t v54 = vaddq_f32(*v53, vmulq_n_f32(vsubq_f32(v53[1], *v53), v51.f32[0]));
            float32x4_t v55 = vaddq_f32(v54, vmulq_lane_f32(vsubq_f32(vaddq_f32(v53[v33], vmulq_n_f32(vsubq_f32(v53[(int)v33 + 1], v53[v33]), v51.f32[0])), v54), *(float32x2_t *)v51.f32, 1));
          }
          else
          {
            float32x4_t v56 = vaddq_f32(v34, v22);
            int32x4_t v57 = vcvtq_s32_f32(v56);
            v56.i64[0] = vaddq_s32(v57, vcgtq_f32(vcvtq_f32_s32(v57), v56)).u64[0];
            float32x4_t v40 = *(float32x4_t *)(v35 + 16 * (v56.i32[0] + v56.i32[1] * (int)v33));
            float32x4_t v58 = vaddq_f32(vsubq_f32(v30, v9), v22);
            int32x4_t v59 = vcvtq_s32_f32(v58);
            v58.i64[0] = vaddq_s32(v59, vcgtq_f32(vcvtq_f32_s32(v59), v58)).u64[0];
            float32x4_t v45 = *(float32x4_t *)(v35 + 16 * (v58.i32[0] + v58.i32[1] * (int)v33));
            float32x4_t v60 = vaddq_f32(vsubq_f32(v31, v9), v22);
            int32x4_t v61 = vcvtq_s32_f32(v60);
            v60.i64[0] = vaddq_s32(v61, vcgtq_f32(vcvtq_f32_s32(v61), v60)).u64[0];
            float32x4_t v50 = *(float32x4_t *)(v35 + 16 * (v60.i32[0] + v60.i32[1] * (int)v33));
            float32x4_t v62 = vaddq_f32(vsubq_f32(v32, v9), v22);
            int32x4_t v63 = vcvtq_s32_f32(v62);
            v62.i64[0] = vaddq_s32(v63, vcgtq_f32(vcvtq_f32_s32(v63), v62)).u64[0];
            float32x4_t v55 = *(float32x4_t *)(v35 + 16 * (v62.i32[0] + v62.i32[1] * (int)v33));
          }
          float32x4_t v25 = vaddq_f32(v25, _Q3);
          float32x4_t v64 = v27[6];
          float32x4_t v65 = v27[9];
          float32x4_t v66 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 - 32), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v40, *v27), v64), v65), v64).f32[0]);
          float32x4_t v67 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 - 16), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v45, *v27), v64), v65), v64).f32[0]);
          float32x4_t v68 = vmulq_n_f32(*(float32x4_t *)(v14 + v26), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v50, *v27), v64), v65), v64).f32[0]);
          float32x4_t v69 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 + 16), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v55, *v27), v64), v65), v64).f32[0]);
          uint64_t v70 = (float32x4_t *)(v13 + v26);
          v70[-2] = v66;
          v70[-1] = v67;
          float32x4_t *v70 = v68;
          v70[1] = v69;
          v24 -= 4;
          v26 += 64;
        }
        while (v10 + v24 > 3);
        LODWORD(v7OZLinkBehavior::clearAll(this, 1) = -v24;
      }
      __asm { FMOV            V7.4S, #1.0 }
      if ((int)v71 < v10)
      {
        uint64_t v71 = v71;
        do
        {
          uint64_t v73 = (float32x4_t *)*((void *)this + 51);
          uint64_t v74 = *((int *)a2 + 26);
          float32x4_t v75 = vsubq_f32(vaddq_f32(v23, vmulq_f32(v25, v73[2])), v9);
          uint64_t v76 = *((void *)a2 + 12);
          if (v5)
          {
            int32x4_t v77 = vaddq_s32(vcvtq_s32_f32(v75), vcltzq_f32(v75));
            float32x2_t v78 = (float32x2_t)vsubq_f32(v75, vcvtq_f32_s32(v77)).u64[0];
            uint64_t v79 = (float32x4_t *)(v76 + 16 * (v77.i32[0] + v77.i32[1] * (int)v74));
            float32x4_t v80 = vaddq_f32(*v79, vmulq_n_f32(vsubq_f32(v79[1], *v79), v78.f32[0]));
            float32x4_t v81 = vaddq_f32(v80, vmulq_lane_f32(vsubq_f32(vaddq_f32(v79[v74], vmulq_n_f32(vsubq_f32(v79[(int)v74 + 1], v79[v74]), v78.f32[0])), v80), v78, 1));
          }
          else
          {
            float32x4_t v82 = vaddq_f32(v75, v22);
            int32x4_t v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            float32x4_t v81 = *(float32x4_t *)(v76 + 16 * (v82.i32[0] + v82.i32[1] * (int)v74));
          }
          *(float32x4_t *)(v13 + 16 * v7OZLinkBehavior::clearAll(this, 1) = vmulq_n_f32(*(float32x4_t *)(v14 + 16 * v71), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v81, *v73), v73[6]), v73[9]), v73[6]).f32[0]);
          float32x4_t v25 = vaddq_f32(v25, _Q7);
          ++v71;
        }
        while (v71 < v10);
      }
      float32x4_t v11 = vaddq_f32(v11, _Q7);
      ++v8;
      v14 += v15;
      v13 += v16;
    }
    while (v8 != v7);
  }
  return 0;
}

const HGTransform *HgcMatteInt8::GetDOD(HgcMatteInt8 *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  int v5 = *(const HGTransform **)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((*(int (**)(HgcMatteInt8 *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
      {
        uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        int v5 = (const HGTransform *)HGRectGrow((uint64_t)v5, v4, v7);
        uint64_t v4 = v8;
      }
      HGTransform::HGTransform((HGTransform *)v14);
      HGTransform::LoadMatrixf(v14, (float32x2_t *)(*((void *)this + 51) + 32));
      HGTransform::Invert2D((HGTransform *)v14);
      float v10 = HGTransformUtils::MinW(v9);
      *(void *)&v15.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v4;
      uint64_t DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v14, v5, v15, 0.5, v10);
      int v5 = (const HGTransform *)HGRectUnion(0, 0, DOD, v12);
      HGTransform::~HGTransform((HGTransform *)v14);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_1B7D62314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HgcMatteInt8::GetROI(HgcMatteInt8 *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      HGTransform::HGTransform((HGTransform *)v16);
      HGTransform::LoadMatrixf(v16, (float32x2_t *)(*((void *)this + 51) + 32));
      float v9 = HGTransformUtils::MinW(v8);
      *(void *)&v17.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v4;
      uint64_t ROI = HGTransformUtils::GetROI((HGTransformUtils *)v16, v5, v17, 0.5, v9);
      uint64_t v5 = HGRectUnion(0, 0, ROI, v11);
      uint64_t v13 = v12;
      HGTransform::~HGTransform((HGTransform *)v16);
      if ((*(int (**)(HgcMatteInt8 *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
      {
        uint64_t v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        return HGRectGrow(v5, v13, v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_1B7D62464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HgcMatteInt8::HgcMatteInt8(HgcMatteInt8 *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F1171708;
  *(_DWORD *)(v1 + 416) = 1;
  operator new();
}

void sub_1B7D62568(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMatteInt8::~HgcMatteInt8(HGNode *this)
{
  *(void *)this = &unk_1F1171708;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C408070C27FLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMatteInt8::~HgcMatteInt8(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMatteInt8::SetParameter(HgcMatteInt8 *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2 == 1)
  {
    uint64_t v8 = (__n128 *)*((void *)this + 51);
    if (v8[1].n128_f32[0] != a3.n128_f32[0]
      || v8[1].n128_f32[1] != a3.n128_f32[0]
      || v8[1].n128_f32[2] != 0.0
      || v8[1].n128_f32[3] != 0.0)
    {
      v8[1].n128_u32[0] = a3.n128_u32[0];
      v8[1].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v8[1].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v8[11] = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (float *)*((void *)this + 51);
  if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
    return 0;
  }
  float *v7 = a3.n128_f32[0];
  v7[1] = a4;
  _OWORD v7[2] = a5;
  v7[3] = a6;
LABEL_13:
  uint64_t v9 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v9;
}

uint64_t HgcMatteInt8::GetParameter(HgcMatteInt8 *this, int a2, float *a3)
{
  if (a2 == 1)
  {
    uint64_t v5 = (float *)*((void *)this + 51);
    *a3 = v5[44];
    a3[1] = v5[45];
    a3[2] = v5[46];
    uint64_t v4 = v5 + 47;
    goto LABEL_5;
  }
  if (!a2)
  {
    uint64_t v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    uint64_t v4 = v3 + 3;
LABEL_5:
    uint64_t result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

int8x16_t HgcMatteInt8::GetOutput(HgcMatteInt8 *this, HGRenderer *a2)
{
  if (*((_DWORD *)this + 104))
  {
    uint64_t v2 = *((void *)this + 51);
    float32x4_t v3 = *(float32x4_t *)(v2 + 16);
    long long v4 = *(_OWORD *)(v2 + 112);
    int8x16_t v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(v2 + 144));
    *(float32x2_t *)&long long v6 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)(v2 + 96));
    *((int8x8_t *)&v6 + OZLinkBehavior::clearAll(this, 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v2 + 160), *(int8x16_t *)(v2 + 160), 8uLL), *(int8x8_t *)&v6);
    *(_OWORD *)(v2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v6;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)&v4);
    uint64_t v7 = *((void *)this + 51);
    *(int8x8_t *)&v3.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v7 + 160), *(int8x16_t *)(v7 + 160), 8uLL), *(int8x8_t *)v3.f32);
    *(float32x4_t *)(v7 + 48) = v3;
    *(int8x16_t *)(*((void *)this + 51) + 64) = vbslq_s8(*(int8x16_t *)(*((void *)this + 51) + 160), v5, *(int8x16_t *)(*((void *)this + 51) + 128));
    uint64_t v8 = (int8x16_t *)*((void *)this + 51);
    int8x16_t result = vbslq_s8(v8[10], v5, v8[9]);
    v8[5] = result;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

const char *HgcMatteNormalComposite::GetProgram(HgcMatteNormalComposite *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return aMetal10Len0000_1444;
    }
    else {
      return aMetal10Len0000_1445;
    }
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return aArbfp10Len0000_35;
  }
  else
  {
    return aGlfs20Len00000_529;
  }
}

void HgcMatteNormalComposite::InitProgramDescriptor(HgcMatteNormalComposite *this, HGProgramDescriptor *a2)
{
}

void sub_1B7D628DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B83848F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  uint64_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D62ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D62B3C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D62B34);
}

void *HgcMatteNormalComposite::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMatteNormalComposite [hgc1]");
}

uint64_t HgcMatteNormalComposite::BindTexture(HgcMatteNormalComposite *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      long long v4 = a2;
      int v5 = 0;
      goto LABEL_7;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      long long v4 = a2;
      int v5 = 1;
      goto LABEL_7;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      long long v4 = a2;
      int v5 = 2;
      goto LABEL_7;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      long long v4 = a2;
      int v5 = 3;
LABEL_7:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcMatteNormalComposite::Bind(HgcMatteNormalComposite *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMatteNormalComposite::RenderTile(HgcMatteNormalComposite *this, int32x2_t *a2)
{
  int v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = a2[1].i32[0] - a2->i32[0];
    int32x2_t v5 = a2[2];
    int32x2_t v6 = a2[14];
    int32x2_t v7 = a2[10];
    int32x2_t v8 = a2[12];
    uint64_t v9 = a2[13].i32[0];
    int32x2_t v10 = a2[16];
    *(float32x2_t *)v11.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v11.i64[1] = 0x3F80000000000000;
    float32x4_t v302 = v11;
    uint64_t v12 = a2[17].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    uint64_t v14 = 16 * a2[15].i32[0];
    uint64_t v15 = 16 * a2[11].i32[0];
    uint64_t v16 = 16 * v12;
    float v17 = 1.0;
    do
    {
      if (v4 >= 1)
      {
        uint64_t v18 = 0;
        int8x16_t v19 = (int8x16_t)v302;
        do
        {
          uint64_t v20 = *((void *)this + 51);
          float32x4_t v22 = *(float32x4_t *)(v20 + 256);
          float32x4_t v21 = *(float32x4_t *)(v20 + 272);
          float32x4_t v333 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
          float32x4_t v335 = (float32x4_t)v19;
          float32x4_t v23 = *(float32x4_t *)(v20 + 320);
          int8x16_t v24 = *(int8x16_t *)(v20 + 336);
          int8x16_t v25 = (int8x16_t)vsubq_f32(v21, v23);
          int8x16_t v26 = *(int8x16_t *)(v20 + 384);
          *(int8x8_t *)v27.f32 = vqtbl1_s8(v19, *(int8x8_t *)v26.i8);
          *(int8x8_t *)&v27.u32[2] = vqtbl1_s8(v19, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          float32x4_t v28 = *(float32x4_t *)(v20 + 368);
          float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s64(vbslq_s8(v24, v25, (int8x16_t)vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(v333, v23)))).i64[0], 0), *(int8x16_t *)(v20 + 352));
          float32x4_t v30 = *(float32x4_t *)(v20 + 416);
          int8x16_t v31 = *(int8x16_t *)(v20 + 432);
          float32x4_t v315 = *(float32x4_t *)(v20 + 272);
          float32x4_t v32 = vabdq_f32(v315, v30);
          int8x16_t v328 = *(int8x16_t *)(v20 + 400);
          int8x16_t v33 = vbslq_s8(v328, (int8x16_t)v29, (int8x16_t)vsubq_f32(v27, vmulq_laneq_f32(*(float32x4_t *)(v20 + 208), v28, 3)));
          int8x16_t v34 = vbslq_s8(v24, *(int8x16_t *)(*(void *)&v10 + v18), v33);
          float32x4_t v35 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
          float32x4_t v36 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_n_f32(vnegq_f32(v35), *(float *)v34.i32), v34);
          float32x4_t v37 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v22, v36, 3), (int8x16_t)v36);
          float32x4_t v38 = vmulq_f32(v22, vnegq_f32(v37));
          float32x4_t v39 = *(float32x4_t *)(v20 + 448);
          float32x4_t v40 = *(float32x4_t *)(v20 + 464);
          float32x4_t v41 = vminq_f32(vmaxq_f32(vmulq_f32(v23, vrecpeq_f32(v35)), v39), v40);
          int8x16_t v42 = (int8x16_t)vmulq_f32(v41, vrecpsq_f32(v35, v41));
          int8x16_t v43 = *(int8x16_t *)(v20 + 480);
          int8x16_t v44 = vbslq_s8(v43, v42, vbslq_s8(v31, (int8x16_t)v38, (int8x16_t)v37));
          v42.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
          *(float32x2_t *)v26.i8 = vmul_f32((float32x2_t)vqtbl1_s8(v44, *(int8x8_t *)(v20 + 496)), (float32x2_t)vqtbl1_s8(v44, *(int8x8_t *)v26.i8));
          v26.i64[1] = v42.i64[0];
          int8x16_t v45 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL), v28), (int8x16_t)v28, (int8x16_t)v30);
          *(float32x2_t *)v38.f32 = vmul_f32((float32x2_t)vqtbl1_s8(v26, *(int8x8_t *)(v20 + 512)), (float32x2_t)vqtbl1_s8(v26, *(int8x8_t *)(v20 + 528)));
          v38.i64[1] = __PAIR64__(LODWORD(v17), v42.u32[0]);
          int8x16_t v46 = (int8x16_t)vcgtq_f32(v29, v28);
          v42.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), v28), (int8x16_t)v28, (int8x16_t)v30).u64[0];
          float32x4_t v47 = *(float32x4_t *)(v20 + 112);
          float32x4_t v332 = *(float32x4_t *)(v20 + 96);
          float32x4_t v48 = vsubq_f32(vmulq_n_f32(v47, *(float *)v42.i32), v38);
          v28.i64[0] = vbslq_s8(v46, (int8x16_t)v28, (int8x16_t)v23).u64[0];
          float32x4_t v49 = *(float32x4_t *)(v20 + 128);
          float32x4_t v317 = *(float32x4_t *)(v20 + 144);
          float32x4_t v50 = vsubq_f32(vmulq_lane_f32(v49, *(float32x2_t *)v28.f32, 1), v38);
          float32x4_t v51 = vmulq_f32(v50, v50);
          float32x4_t v52 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          float32x4_t v53 = vmulq_f32(v48, v48);
          float32x4_t v54 = vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          int8x16_t v55 = vbslq_s8(v43, (int8x16_t)vaddq_f32(v54, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), (int8x16_t)v48);
          float32x4_t v56 = (float32x4_t)vextq_s8(v55, v55, 0xCuLL);
          int8x16_t v57 = vbslq_s8(v43, (int8x16_t)vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL)), (int8x16_t)v50);
          float32x4_t v58 = vminq_f32(vrsqrteq_f32(v56), v40);
          float32x4_t v59 = vminq_f32(vmulq_f32(v58, vrsqrtsq_f32(vmulq_f32(v58, v56), v58)), v40);
          v28.i64[1] = v45.i64[1];
          float32x4_t v60 = (float32x4_t)vextq_s8(v57, v57, 0xCuLL);
          int8x16_t v61 = (int8x16_t)vmulq_f32(v59, vrsqrtsq_f32(vmulq_f32(v59, v56), v59));
          float32x4_t v62 = vminq_f32(vrsqrteq_f32(v60), v40);
          float32x4_t v63 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, v60), v62)), v40);
          float32x4_t v64 = (float32x4_t)vbslq_s8(v24, v61, (int8x16_t)v28);
          int8x16_t v65 = (int8x16_t)vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v60), v63));
          float32x4_t v66 = (float32x4_t)vextq_s8(v65, v65, 4uLL);
          float32x4_t v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v66), v39), v40);
          float32x4_t v68 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v66, v67)), v39), v40);
          float32x4_t v69 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vmulq_f32(v68, vrecpsq_f32(v66, v68)), (int8x16_t)v50);
          int32x4_t v71 = *(int32x4_t *)(v20 + 288);
          float32x4_t v70 = *(float32x4_t *)(v20 + 304);
          float32x4_t v72 = vmulq_n_f32(v69, *(float *)v65.i32);
          float32x4_t v73 = (float32x4_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL);
          float32x4_t v74 = vminq_f32(vmaxq_f32(vrecpeq_f32(v73), v39), v40);
          float32x4_t v75 = vminq_f32(vmaxq_f32(vmulq_f32(v74, vrecpsq_f32(v73, v74)), v39), v40);
          float32x4_t v76 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vmulq_f32(v75, vrecpsq_f32(v73, v75)), (int8x16_t)v48);
          float32x4_t v77 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL);
          float32x4_t v78 = *(float32x4_t *)(v20 + 544);
          float32x4_t v79 = *(float32x4_t *)(v20 + 560);
          int8x16_t v80 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vsubq_f32(v76, v77), (int8x16_t)v48), v78);
          v42.i64[1] = vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(v69, (float32x4_t)vextq_s8(*(int8x16_t *)&v71, *(int8x16_t *)&v71, 8uLL))), v39).i64[1];
          int8x16_t v81 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v43, v80, (int8x16_t)v48), v64.f32[0]);
          float32x4_t v82 = (float32x4_t)vbslq_s8(v43, v80, v81);
          float32x4_t v83 = (float32x4_t)vrev64q_s32((int32x4_t)v70);
          float32x4_t v84 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v83, vmulq_laneq_f32(v70, v82, 3)), v42);
          int8x16_t v85 = vbslq_s8(v43, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32(vmulq_f32(vmulq_laneq_f32(v82, v70, 2), v82), (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), v81), v79), v81);
          float32x4_t v86 = (float32x4_t)vextq_s8(v85, v85, 0xCuLL);
          float32x4_t v87 = vminq_f32(vmaxq_f32(vrecpeq_f32(v86), v39), v40);
          float32x4_t v88 = vmulq_f32(v87, vrecpsq_f32(v86, v87));
          float32x4_t v89 = *(float32x4_t *)(v20 + 576);
          float32x4_t v90 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vsubq_f32(v333, v89), v81);
          *(int8x8_t *)&v90.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v20 + 592), *(int8x16_t *)(v20 + 592), 8uLL));
          float32x4_t v91 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v83, vmulq_laneq_f32(v70, v84, 2)), v42);
          float32x4_t v92 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL), vmulq_laneq_f32(vmulq_laneq_f32(v83, v91, 2), v91, 2));
          float32x4_t v93 = vminq_f32(vmaxq_f32(v88, v39), v40);
          int8x16_t v94 = (int8x16_t)vmaxq_f32(v92, v79);
          float32x4_t v95 = (float32x4_t)vextq_s8(v94, v94, 8uLL);
          float32x4_t v96 = vminq_f32(vmaxq_f32(vrecpeq_f32(v95), v89), v40);
          int8x16_t v326 = vbslq_s8((int8x16_t)vcgtq_f32(v90, v78), (int8x16_t)v78, (int8x16_t)v30);
          float32x4_t v97 = (float32x4_t)vbslq_s8(v43, v326, (int8x16_t)v90);
          float32x4_t v98 = vmulq_f32(v93, vrecpsq_f32(v86, v93));
          float32x4_t v99 = vsubq_f32(vmulq_laneq_f32(v317, v97, 3), v38);
          float32x4_t v100 = vminq_f32(vmaxq_f32(vmulq_f32(v96, vrecpsq_f32(v95, v96)), v89), v40);
          int8x16_t v101 = (int8x16_t)vmulq_f32(v100, vrecpsq_f32(v95, v100));
          float32x4_t v102 = vmulq_f32(v99, v99);
          float32x4_t v103 = vaddq_f32(v102, (float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL));
          float32x4_t v104 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32(v103, (float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL)), (int8x16_t)v38);
          float32x4_t v105 = vminq_f32(vrsqrteq_f32(v104), v40);
          v98.i64[0] = vbslq_s8(v24, (int8x16_t)v98, v101).u64[0];
          float32x4_t v106 = vminq_f32(vmulq_f32(v105, vrsqrtsq_f32(vmulq_f32(v105, v104), v105)), v40);
          int8x16_t v329 = (int8x16_t)vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v106, v104), v106));
          float32x4_t v107 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabdq_f32(v315, v89), v78), (int8x16_t)v78, (int8x16_t)v30);
          float32x4_t v319 = *(float32x4_t *)(v20 + 160);
          float32x4_t v108 = vsubq_f32(vmulq_laneq_f32(v319, v107, 3), v38);
          float32x4_t v109 = vmulq_f32(v108, v108);
          float32x4_t v110 = vaddq_f32(v109, (float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL));
          int8x16_t v111 = vbslq_s8(v24, (int8x16_t)v91, (int8x16_t)vaddq_f32(v110, (float32x4_t)vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)));
          float32x4_t v112 = (float32x4_t)vextq_s8(v111, v111, 8uLL);
          float32x4_t v113 = vminq_f32(vrsqrteq_f32(v112), v40);
          float32x4_t v114 = vminq_f32(vmulq_f32(v113, vrsqrtsq_f32(vmulq_f32(v113, v112), v113)), v40);
          int8x16_t v115 = (int8x16_t)vmulq_f32(v114, vrsqrtsq_f32(vmulq_f32(v114, v112), v114));
          float32x4_t v116 = (float32x4_t)vbslq_s8(v43, v115, (int8x16_t)v38);
          float32x4_t v117 = (float32x4_t)vrev64q_s32((int32x4_t)v116);
          float32x4_t v118 = vminq_f32(vmaxq_f32(vrecpeq_f32(v117), v89), v40);
          float32x4_t v119 = vminq_f32(vmaxq_f32(vmulq_f32(v118, vrecpsq_f32(v117, v118)), v89), v40);
          v111.i64[1] = vsubq_f32(vmulq_f32(v119, vrecpsq_f32(v117, v119)), (float32x4_t)vrev64q_s32(v71)).i64[1];
          float32x4_t v316 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32(v32, v78), (int8x16_t)v78, (int8x16_t)v30), (int8x16_t)v108);
          float32x4_t v120 = (float32x4_t)vbslq_s8(v43, v329, (int8x16_t)vmulq_lane_f32(v72, *(float32x2_t *)v64.f32, 1));
          float32x4_t v121 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          float32x4_t v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v121), v89), v40);
          float32x4_t v123 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v121, v122)), v89), v40);
          float32x4_t v124 = *(float32x4_t *)(v20 + 608);
          float32x4_t v125 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v123, vrecpsq_f32(v121, v123)), v111), v77), v111), v124), v111);
          int8x16_t v126 = v31;
          float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
          float32x4_t v128 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL);
          float32x4_t v129 = vmaxq_f32(v125, v39);
          v125.i64[1] = vaddq_f32(v128, vmulq_lane_f32(v127, *(float32x2_t *)&v125, 1)).i64[1];
          float32x4_t v130 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_lane_f32(v70, *(float32x2_t *)v125.f32, 1), (int8x16_t)v125);
          v130.i64[0] = vbslq_s8(v24, (int8x16_t)v130, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v130, 1), vmulq_laneq_f32(v130, v130, 2))).u64[0];
          v130.i64[1] = vaddq_f32(v128, vmulq_laneq_f32(v127, v129, 2)).i64[1];
          int8x16_t v314 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), v78), (int8x16_t)v78, (int8x16_t)v30);
          v30.i64[0] = v98.i64[0];
          v30.i64[1] = v129.i64[1];
          float32x4_t v131 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v70, v30), (int8x16_t)v130);
          int8x16_t v132 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v49, v64, 2), v120);
          float32x4_t v133 = *(float32x4_t *)(v20 + 640);
          int32x4_t v322 = *(int32x4_t *)(v20 + 656);
          int8x16_t v134 = vbslq_s8((int8x16_t)vcgtq_f32(v32, v89), (int8x16_t)v89, (int8x16_t)v133);
          float32x4_t v135 = vmulq_n_f32(v47, *(float *)v134.i32);
          v78.i64[0] = vbslq_s8(v24, v134, (int8x16_t)v73).u64[0];
          float32x4_t v312 = (float32x4_t)vbslq_s8(v43, v314, (int8x16_t)v99);
          v78.i64[1] = v316.i64[1];
          float32x4_t v136 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vrev64q_s32((int32x4_t)v312), (int8x16_t)v78);
          v131.i64[1] = vaddq_f32(vmulq_f32(v129, v131), (float32x4_t)vrev64q_s32(*(int32x4_t *)&v131)).i64[1];
          float32x4_t v137 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, *(int8x16_t *)(*(void *)&v8 + v18));
          float32x4_t v138 = vmulq_f32(v137, v137);
          int8x16_t v139 = (int8x16_t)vaddq_f32(v138, (float32x4_t)vrev64q_s32((int32x4_t)v138));
          float32x4_t v140 = vaddq_f32(v138, (float32x4_t)vextq_s8(v139, v139, 0xCuLL));
          int8x16_t v141 = vbslq_s8(v24, (int8x16_t)v131, (int8x16_t)vmaxq_f32(v131, *(float32x4_t *)(v20 + 624)));
          int8x16_t v142 = (int8x16_t)vrev64q_s32((int32x4_t)v97);
          v142.i64[0] = v141.i64[0];
          int8x16_t v143 = vbslq_s8(v43, (int8x16_t)v107, v142);
          float32x4_t v144 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v64, v143);
          float32x4_t v145 = vminq_f32(vmulq_f32(v23, vrsqrteq_f32(v140)), v40);
          int8x16_t v146 = (int8x16_t)vmulq_laneq_f32(v137, vmulq_f32(v145, vrsqrtsq_f32(vmulq_f32(v145, v140), v145)), 2);
          float32x4_t v147 = vmulq_f32(v116, v116);
          int8x16_t v148 = (int8x16_t)vaddq_f32(v147, (float32x4_t)vrev64q_s32((int32x4_t)v147));
          float32x4_t v149 = vaddq_f32(v147, (float32x4_t)vextq_s8(v148, v148, 0xCuLL));
          int8x16_t v150 = (int8x16_t)vaddq_f32(v135, (float32x4_t)vbslq_s8(v43, v326, (int8x16_t)vmulq_n_f32(v97, *(float *)v143.i32)));
          float32x4_t v151 = (float32x4_t)vextq_s8(v141, v141, 0xCuLL);
          float32x4_t v152 = vminq_f32(vmaxq_f32(vrecpeq_f32(v151), v133), v40);
          float32x4_t v153 = vminq_f32(vrsqrteq_f32(v149), v40);
          float32x4_t v154 = vminq_f32(vmulq_f32(v153, vrsqrtsq_f32(vmulq_f32(v149, v153), v153)), v40);
          int8x16_t v155 = (int8x16_t)vmulq_laneq_f32(vnegq_f32(v116), vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v149, v154), v154)), 2);
          float32x4_t v156 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, v146);
          float32x4_t v157 = vmulq_f32(*(float32x4_t *)v20, v156);
          v157.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v157, (int8x16_t)v136, 4uLL), vaddq_f32(v157, (float32x4_t)vrev64q_s32((int32x4_t)v157))).u64[0];
          float32x4_t v307 = *(float32x4_t *)(v20 + 48);
          int32x4_t v158 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v20 + 32), v156);
          float32x4_t v159 = vminq_f32(vmaxq_f32(vmulq_f32(v152, vrecpsq_f32(v151, v152)), v133), v40);
          v157.i64[1] = vaddq_f32((float32x4_t)vrev64q_s32(v158), vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v158, *(int8x16_t *)&v158, 4uLL), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v158, 0))).i64[1];
          v98.i64[1] = vmulq_f32(v159, vrecpsq_f32(v151, v159)).i64[1];
          float32x4_t v160 = vmulq_f32(*(float32x4_t *)(v20 + 16), v156);
          float32x4_t v161 = vmulq_f32(v98, v144);
          float32x4_t v162 = (float32x4_t)vbslq_s8(v43, v329, v132);
          int8x16_t v163 = vbslq_s8(v328, (int8x16_t)vaddq_f32(v160, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 0xCuLL))), (int8x16_t)v157);
          float32x4_t v327 = (float32x4_t)vbslq_s8(v43, v115, v155);
          float32x4_t v164 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, (int8x16_t)vaddq_f32(v162, v327));
          float32x4_t v165 = vmulq_f32(v164, v164);
          int8x16_t v308 = (int8x16_t)vabsq_f32(v333);
          float32x4_t v166 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vaddq_f32(v165, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 0xCuLL))), v308);
          float32x4_t v167 = vminq_f32(vrsqrteq_f32(v166), v40);
          int8x16_t v168 = (int8x16_t)vaddq_f32(v161, v136);
          float32x4_t v169 = vminq_f32(vmulq_f32(v167, vrsqrtsq_f32(vmulq_f32(v167, v166), v167)), v40);
          float32x4_t v170 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v169, vrsqrtsq_f32(vmulq_f32(v169, v166), v169)), v308);
          float32x4_t v171 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, (int8x16_t)vmulq_laneq_f32(v164, v170, 2));
          float32x4_t v172 = (float32x4_t)vextq_s8(v163, v163, 4uLL);
          float32x4_t v173 = vmulq_f32(v172, v171);
          v173.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v136, 4uLL), vaddq_f32(v173, (float32x4_t)vrev64q_s32((int32x4_t)v173))).u64[0];
          v173.i64[1] = v171.i64[1];
          float32x4_t v174 = vmulq_f32(v172, v162);
          int8x16_t v175 = vbslq_s8(v126, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL), vaddq_f32(v174, (float32x4_t)vrev64q_s32((int32x4_t)v174))), v168), v124), v168);
          *(float32x2_t *)v172.f32 = vabs_f32(*(float32x2_t *)v175.i8);
          v172.i64[1] = vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL).u64[0];
          v162.i64[0] = vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v172, v133)).u64[0];
          float32x4_t v176 = (float32x4_t)vbslq_s8(v43, v326, v150);
          v157.i64[0] = v162.i64[0];
          v157.i64[1] = vdupq_laneq_s64((int64x2_t)v170, 1).u64[0];
          v162.i64[1] = v170.i64[1];
          int8x16_t v177 = v24;
          float32x4_t v178 = (float32x4_t)vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v157), v89), (int8x16_t)v89, (int8x16_t)v133), (int8x16_t)v173);
          float32x4_t v179 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v162, (int8x16_t)vaddq_f32(v327, v176));
          float32x4_t v323 = *(float32x4_t *)(v20 + 224);
          float32x4_t v180 = *(float32x4_t *)(v20 + 240);
          float32x4_t v181 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vceqq_f32((float32x4_t)vrev64q_s32((int32x4_t)v180), v124)), v124), (int8x16_t)v39, vbslq_s8(v126, (int8x16_t)vmaxq_f32(v178, v124), (int8x16_t)v178));
          float32x4_t v334 = *(float32x4_t *)(v20 + 672);
          float32x4_t v325 = *(float32x4_t *)(v20 + 688);
          float32x4_t v182 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v181, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v325, (int8x16_t)vcgtq_f32(v334, v181)));
          float32x4_t v183 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v181, (int8x16_t)v322), (int8x16_t)v39);
          float32x4_t v184 = *(float32x4_t *)(v20 + 736);
          float32x4_t v304 = *(float32x4_t *)(v20 + 720);
          float32x4_t v185 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v183, v304));
          float32x4_t v331 = *(float32x4_t *)(v20 + 704);
          float32x4_t v186 = *(float32x4_t *)(v20 + 752);
          float32x4_t v187 = vsubq_f32(vsubq_f32(v183, v39), vmulq_f32(vmulq_f32(v184, v185), v183));
          float32x4_t v320 = *(float32x4_t *)(v20 + 800);
          float32x4_t v321 = *(float32x4_t *)(v20 + 768);
          float32x4_t v303 = *(float32x4_t *)(v20 + 816);
          float32x4_t v306 = v184;
          float32x4_t v188 = vmulq_f32(v187, v187);
          float32x4_t v189 = *(float32x4_t *)(v20 + 848);
          float32x4_t v305 = *(float32x4_t *)(v20 + 832);
          float32x4_t v190 = vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v182, v331), v185), vmulq_f32(v187, vaddq_f32(v189, vmulq_f32(v187, vaddq_f32(vaddq_f32(v303, vmulq_f32(v305, v187)), vmulq_f32(v188, vaddq_f32(vaddq_f32(v186, vmulq_f32(v321, v187)), vmulq_f32(v188, vaddq_f32(*(float32x4_t *)(v20 + 784), vmulq_f32(v320, v187)))))))))), v180.f32[0]);
          float32x4_t v191 = *(float32x4_t *)(v20 + 864);
          float32x4_t v192 = *(float32x4_t *)(v20 + 880);
          float32x4_t v193 = vmaxq_f32(v190, v191);
          float32x4_t v194 = vcvtq_f32_s32(vcvtq_s32_f32(v193));
          float32x4_t v195 = vsubq_f32(v194, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v194, v193)));
          float32x4_t v196 = vsubq_f32(v193, v195);
          float32x4_t v198 = *(float32x4_t *)(v20 + 896);
          float32x4_t v197 = *(float32x4_t *)(v20 + 912);
          float32x4_t v324 = v198;
          float32x4_t v199 = vmulq_f32(v179, v179);
          float32x4_t v201 = *(float32x4_t *)(v20 + 928);
          float32x4_t v200 = *(float32x4_t *)(v20 + 944);
          int32x4_t v202 = (int32x4_t)vbslq_s8(v177, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL), vaddq_f32(v199, (float32x4_t)vrev64q_s32((int32x4_t)v199))), v163);
          float32x4_t v203 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 4uLL), v176);
          v150.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v203, 1), vaddq_f32(v203, (float32x4_t)vrev64q_s32((int32x4_t)v203))).u64[0];
          v150.i64[1] = v176.i64[1];
          float32x4_t v204 = (float32x4_t)vrev64q_s32(v202);
          float32x4_t v205 = vminq_f32(vrsqrteq_f32(v204), v40);
          float32x4_t v206 = vminq_f32(vmulq_f32(v205, vrsqrtsq_f32(vmulq_f32(v205, v204), v205)), v40);
          int8x16_t v207 = (int8x16_t)vmulq_f32(v206, vrsqrtsq_f32(vmulq_f32(v206, v204), v206));
          int32x4_t v208 = vcvtq_s32_f32(v195);
          float32x4_t v209 = *(float32x4_t *)(v20 + 976);
          int32x4_t v210 = *(int32x4_t *)(v20 + 960);
          float32x4_t v211 = (float32x4_t)vbslq_s8(v126, v207, v150);
          int8x16_t v212 = *(int8x16_t *)(v20 + 336);
          float32x4_t v313 = (float32x4_t)vbslq_s8(v177, (int8x16_t)vmaxq_f32(v211, v200), v163);
          float32x4_t v213 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v211, (int8x16_t)vmulq_lane_f32(v179, *(float32x2_t *)v211.f32, 1));
          float32x4_t v214 = (float32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_f32(vaddq_f32(v39, vmulq_f32(v196, vaddq_f32(v200, vmulq_f32(v196, vaddq_f32(vaddq_f32(v197, vmulq_f32(v201, v196)), vmulq_f32(vmulq_f32(v196, v196), vaddq_f32(v192, vmulq_f32(v198, v196)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v210, v208), 0x17uLL)), (int8x16_t)v178);
          float32x4_t v215 = (float32x4_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 4uLL);
          float32x4_t v216 = vmulq_f32(v215, v213);
          v216.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v216, 1), vaddq_f32(v216, (float32x4_t)vrev64q_s32((int32x4_t)v216))).u64[0];
          v216.i64[1] = v213.i64[1];
          float32x4_t v330 = (float32x4_t)vbslq_s8(v43, v329, (int8x16_t)vmulq_n_f32(v307, *(float *)v175.i32));
          float32x4_t v217 = (float32x4_t)vbslq_s8(v126, vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32(v313), v175)), v133)), (int8x16_t)v216);
          float32x4_t v218 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmaxq_f32(v217, v209), (int8x16_t)v217);
          int8x16_t v219 = vbslq_s8(v126, vbslq_s8((int8x16_t)vcgtq_f32(v218, v124), (int8x16_t)v124, (int8x16_t)v39), (int8x16_t)v218);
          int8x16_t v309 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vceqq_f32(v180, v209)), v209);
          float32x4_t v220 = (float32x4_t)vbslq_s8(v309, (int8x16_t)v201, v219);
          float32x4_t v221 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v220, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v197, v220)));
          float32x4_t v222 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v220, (int8x16_t)v210), (int8x16_t)v201);
          float32x4_t v223 = (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v222, v191));
          float32x4_t v224 = vsubq_f32(vsubq_f32(v222, v201), vmulq_f32(vmulq_f32(v189, v223), v222));
          float32x4_t v225 = vmulq_f32(v224, v224);
          float32x4_t v226 = vmaxq_f32(vmulq_f32(v180, vaddq_f32(vaddq_f32(vsubq_f32(v221, v192), v223), vmulq_f32(v224, vaddq_f32(v184, vmulq_f32(v224, vaddq_f32(vaddq_f32(v321, vmulq_f32(v186, v224)), vmulq_f32(v225, vaddq_f32(vaddq_f32(v305, vmulq_f32(v303, v224)), vmulq_f32(v225, vaddq_f32(v320, vmulq_f32(*(float32x4_t *)(v20 + 784), v224))))))))))), v304);
          float32x4_t v227 = vcvtq_f32_s32(vcvtq_s32_f32(v226));
          float32x4_t v228 = vsubq_f32(v227, (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v227, v226)));
          v225.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v214, v200), (int8x16_t)v200, (int8x16_t)vrev64q_s32((int32x4_t)v214)).u64[0];
          float32x4_t v229 = *(float32x4_t *)(v20 + 64);
          float32x4_t v310 = *(float32x4_t *)(v20 + 80);
          float32x4_t v311 = vmulq_lane_f32(v229, *(float32x2_t *)v168.i8, 1);
          v225.i64[1] = v214.i64[1];
          float32x4_t v230 = vsubq_f32(v226, v228);
          float32x4_t v232 = *(float32x4_t *)(v20 + 992);
          float32x4_t v231 = *(float32x4_t *)(v20 + 1008);
          v124.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, v308, v175), v200), (int8x16_t)v200, (int8x16_t)v201).u64[0];
          v124.i64[1] = v179.i64[1];
          int32x4_t v233 = (int32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_f32(vaddq_f32(v201, vmulq_f32(v230, vaddq_f32(v231, vmulq_f32(v230, vaddq_f32(vaddq_f32(v334, vmulq_f32(v232, v230)), vmulq_f32(vmulq_f32(v230, v230), vaddq_f32(v331, vmulq_f32(v325, v230)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v228), v322), 0x17uLL)), v219);
          int8x16_t v234 = (int8x16_t)vaddq_f32(vmulq_n_f32(v307, *(float *)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32(v315), v175), v209), (int8x16_t)v209, (int8x16_t)v201), v175).i32), (float32x4_t)vbslq_s8(v43, (int8x16_t)v124, (int8x16_t)vmulq_n_f32(v229, v124.f32[0])));
          float32x4_t v235 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)v124, v234), v232), (int8x16_t)v232, (int8x16_t)v231), v234);
          int8x16_t v236 = v212;
          v228.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v233), v209), (int8x16_t)v209, (int8x16_t)v233).u64[0];
          v228.i64[1] = v233.i64[1];
          float32x4_t v237 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v228, (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v332, *(float *)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v315, (int8x16_t)v315, 0xCuLL)), v175), v209), (int8x16_t)v209, (int8x16_t)v201), v175).i32), vaddq_f32(vmulq_laneq_f32(v310, v235, 3), v235)),
                                             vmulq_f32(v323, (float32x4_t)vbslq_s8(v43, (int8x16_t)v228, (int8x16_t)vmulq_n_f32(v330, v228.f32[0])))));
          float32x4_t v238 = (float32x4_t)vbslq_s8(v43, v314, (int8x16_t)vmulq_laneq_f32(v312, v330, 3));
          int8x16_t v239 = (int8x16_t)vaddq_f32(vmulq_f32(v323, (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vmulq_n_f32(v311, v225.f32[0]))), v237);
          float32x4_t v240 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v317, v238, 3), vmulq_laneq_f32(v238, v237, 3)));
          int32x4_t v241 = (int32x4_t)vmulq_f32(v215, v240);
          int8x16_t v242 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v241), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v241, (int8x16_t)v241, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL))), v239), *(float32x4_t *)(v20 + 544));
          float32x4_t v318 = (float32x4_t)vbslq_s8(v43, v242, v239);
          float32x4_t v243 = *(float32x4_t *)(v20 + 1024);
          float32x4_t v244 = (float32x4_t)vbslq_s8(v212, vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v318, (int8x16_t)v318, 0xCuLL)), v175), v243)), v175);
          float32x4_t v245 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vaddq_f32(v327, v240));
          float32x4_t v246 = vmulq_f32(v245, v245);
          float32x4_t v247 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vaddq_f32(v246, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL))), (int8x16_t)v244);
          float32x4_t v248 = vminq_f32(vrsqrteq_f32(v247), v243);
          float32x4_t v249 = vminq_f32(vmulq_f32(v248, vrsqrtsq_f32(vmulq_f32(v248, v247), v248)), v243);
          float32x4_t v250 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vmulq_laneq_f32(v245, (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v249, vrsqrtsq_f32(vmulq_f32(v249, v247), v249)), (int8x16_t)v244), 2));
          float32x4_t v251 = vmulq_f32(v215, v250);
          int8x16_t v252 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v251, 1), vaddq_f32(v251, (float32x4_t)vrev64q_s32((int32x4_t)v251)));
          float32x4_t v253 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v250, v252, 8uLL), v231), (int8x16_t)v244);
          v252.i64[1] = v250.i64[1];
          float32x4_t v254 = (float32x4_t)vbslq_s8(v43, v252, (int8x16_t)vmulq_laneq_f32(v316, v327, 3));
          float32x4_t v255 = vaddq_f32(vmulq_laneq_f32(v319, v316, 3), vmulq_laneq_f32(v254, v254, 3));
          float32x4_t v256 = (float32x4_t)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32(v253, v209), (int8x16_t)v209, (int8x16_t)v201), (int8x16_t)v253);
          float32x4_t v257 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vceqq_f32((float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), v243)), v243), (int8x16_t)v231, (int8x16_t)vrev64q_s32((int32x4_t)v256));
          float32x4_t v258 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v257, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v200, v257)));
          float32x4_t v259 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v257, (int8x16_t)v210), (int8x16_t)v231);
          float32x4_t v260 = (float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vcgtq_f32(v259, v324));
          float32x4_t v261 = vsubq_f32(vsubq_f32(v259, v231), vmulq_f32(vmulq_f32(v192, v260), v259));
          float32x4_t v262 = *(float32x4_t *)(v20 + 848);
          float32x4_t v263 = vmulq_f32(v261, v261);
          float32x4_t v264 = *(float32x4_t *)(v20 + 784);
          float32x4_t v265 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v258, v197), v260), vmulq_f32(v261, vaddq_f32(v321, vmulq_f32(v261, vaddq_f32(vaddq_f32(v320, vmulq_f32(v264, v261)), vmulq_f32(v263, vaddq_f32(vaddq_f32(v191, vmulq_f32(v262, v261)), vmulq_f32(v263, vaddq_f32(v305, vmulq_f32(v303, v261)))))))))), v180.f32[0]), v186);
          float32x4_t v266 = vcvtq_f32_s32(vcvtq_s32_f32(v265));
          float32x4_t v267 = vsubq_f32(v266, (float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vcgtq_f32(v266, v265)));
          float32x4_t v268 = vsubq_f32(v265, v267);
          int8x16_t v269 = (int8x16_t)vmulq_f32(vaddq_f32(v231, vmulq_f32(v268, vaddq_f32(v334, vmulq_f32(v268, vaddq_f32(vaddq_f32(v331, vmulq_f32(v325, v268)), vmulq_f32(vmulq_f32(v268, v268), vaddq_f32(v184, vmulq_f32(v304, v268)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v267), v322), 0x17uLL));
          int8x16_t v270 = (int8x16_t)vaddq_f32(v255, v327);
          float32x4_t v271 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v256, (int8x16_t)v256, 4uLL), v243), (int8x16_t)v243, vbslq_s8(v43, v269, v270)), v270);
          int32x4_t v272 = (int32x4_t)vmulq_f32(v271, v271);
          float32x4_t v273 = vmulq_f32(v215, v255);
          float32x4_t v274 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v272), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v272, (int8x16_t)v272, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL))), v270);
          float32x4_t v275 = (float32x4_t)vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL);
          float32x4_t v276 = vminq_f32(vrsqrteq_f32(v275), v243);
          float32x4_t v277 = vminq_f32(vmulq_f32(v276, vrsqrtsq_f32(vmulq_f32(v276, v275), v276)), v243);
          int8x16_t v278 = vbslq_s8(v212, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v273, (int8x16_t)v273, 8uLL), vaddq_f32(v273, (float32x4_t)vrev64q_s32((int32x4_t)v273))), (int8x16_t)vmulq_f32(v277, vrsqrtsq_f32(vmulq_f32(v277, v275), v277)));
          float v17 = 1.0;
          float32x4_t v279 = vmulq_f32(v215, vmulq_lane_f32(v274, *(float32x2_t *)v278.i8, 1));
          int8x16_t v280 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v279, 1), vaddq_f32(v279, (float32x4_t)vrev64q_s32((int32x4_t)v279)));
          int8x16_t v281 = (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v278, v278, 4uLL), v243);
          v274.i64[0] = vextq_s8(v281, v280, 0xCuLL).u64[0];
          v280.i64[1] = v281.i64[1];
          *(int8x8_t *)&v274.u32[2] = vext_s8(*(int8x8_t *)v280.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v281, v281, 8uLL), 4uLL);
          int8x16_t v282 = *(int8x16_t *)(v20 + 432);
          float32x4_t v283 = (float32x4_t)vbslq_s8(v282, vandq_s8((int8x16_t)v232, (int8x16_t)vcgtq_f32(vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)v274)), v231)), v280);
          float32x4_t v284 = (float32x4_t)vbslq_s8(v309, (int8x16_t)v201, vbslq_s8(v236, (int8x16_t)vmaxq_f32(v283, v209), (int8x16_t)v283));
          float32x4_t v285 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v284, (int8x16_t)v210), (int8x16_t)v201);
          float32x4_t v286 = (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v285, v191));
          float32x4_t v287 = vsubq_f32(vsubq_f32(v285, v201), vmulq_f32(vmulq_f32(v262, v286), v285));
          float32x4_t v288 = vmulq_f32(v287, v287);
          float32x4_t v289 = vmaxq_f32(vmulq_f32(v180, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v284, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v324, (int8x16_t)vcgtq_f32(v197, v284))), v192), v286), vmulq_f32(v287, vaddq_f32(v306, vmulq_f32(v287, vaddq_f32(vaddq_f32(v321, vmulq_f32(v186, v287)), vmulq_f32(
                                 v288,
                                 vaddq_f32(vaddq_f32(v305, vmulq_f32(v303, v287)), vmulq_f32(v288, vaddq_f32(v320, vmulq_f32(v264, v287))))))))))), v304);
          float32x4_t v290 = vcvtq_f32_s32(vcvtq_s32_f32(v289));
          float32x4_t v291 = vsubq_f32(v290, (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v290, v289)));
          float32x4_t v292 = vsubq_f32(v289, v291);
          float32x4_t v293 = (float32x4_t)vbslq_s8(v236, (int8x16_t)vmulq_f32(vaddq_f32(v201, vmulq_f32(v292, vaddq_f32(v231, vmulq_f32(v292, vaddq_f32(vaddq_f32(v334, vmulq_f32(v232, v292)), vmulq_f32(vmulq_f32(v292, v292), vaddq_f32(v331, vmulq_f32(v325, v292)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v291), v322), 0x17uLL)), (int8x16_t)v283);
          int32x4_t v294 = (int32x4_t)vbslq_s8(v282, vbslq_s8((int8x16_t)vcgtq_f32(v293, *(float32x4_t *)(v20 + 608)), *(int8x16_t *)(v20 + 608), (int8x16_t)v232), (int8x16_t)v293);
          int8x16_t v295 = *(int8x16_t *)(*(void *)&v6 + v18);
          int8x16_t v296 = (int8x16_t)vsubq_f32(v232, *(float32x4_t *)(v20 + 192));
          float32x4_t v297 = (float32x4_t)vbslq_s8(v236, (int8x16_t)vsubq_f32(v201, (float32x4_t)vbslq_s8(v236, v295, v296)), v296);
          float32x4_t v298 = vmulq_laneq_f32(v310, v244, 2);
          v209.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v294), v209), (int8x16_t)v209, (int8x16_t)v294).u32[0];
          float32x4_t v299 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v294, (int8x16_t)vmulq_laneq_f32(v332, v256, 3));
          float32x4_t v300 = (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_lane_f32(v311, *(float32x2_t *)v256.f32, 1), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_n_f32(v330, v313.f32[0]), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_f32(v323, vmulq_n_f32(v299, v209.f32[0])), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_f32(v323, vmulq_laneq_f32(v298, v271, 3)), v318))))))));
          *(float32x4_t *)(*(void *)&v5 + v18) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v7 + v18), vmulq_lane_f32(v297, *(float32x2_t *)v297.f32, 1).f32[0]), vmulq_n_f32((float32x4_t)vbslq_s8(v43, *(int8x16_t *)(*(void *)&v7 + v18), (int8x16_t)vaddq_f32(*(float32x4_t *)(*(void *)&v7 + v18), vmulq_f32(*(float32x4_t *)(v20 + 176), vaddq_f32(vmulq_laneq_f32(v299, v299, 3), vaddq_f32(vmulq_laneq_f32(v298, v300, 3), v300))))), *(float *)v295.i32));
          int8x16_t v19 = (int8x16_t)vaddq_f32(v335, (float32x4_t)xmmword_1B7E736B0);
          v18 += 16;
        }
        while (16 * v4 != v18);
      }
      ++v3;
      *(void *)&v5 += v13;
      float32x4_t v302 = vaddq_f32(v302, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v6 += v14;
      *(void *)&v7 += v15;
      *(void *)&v8 += 16 * v9;
      *(void *)&v10 += v16;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMatteNormalComposite::GetDOD(HgcMatteNormalComposite *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMatteNormalComposite::GetROI(HgcMatteNormalComposite *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMatteNormalComposite::HgcMatteNormalComposite(HgcMatteNormalComposite *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1171970;
  operator new();
}

void sub_1B7D6451C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMatteNormalComposite::~HgcMatteNormalComposite(HGNode *this)
{
  *(void *)this = &unk_1F1171970;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4082453793);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMatteNormalComposite::~HgcMatteNormalComposite(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMatteNormalComposite::SetParameter(HgcMatteNormalComposite *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      float v7 = -a4;
      float v8 = -a5;
      uint64_t v9 = (__n128 *)*((void *)this + 51);
      if (v9->n128_f32[0] == (float)-a3.n128_f32[0]
        && v9->n128_f32[1] == v7
        && v9->n128_f32[2] == v8
        && v9->n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9->n128_f32[0] = -a3.n128_f32[0];
      v9->n128_f32[1] = v7;
      v9->n128_f32[2] = v8;
      a3.n128_f32[1] = a4;
      v9->n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[65] = a3;
      goto LABEL_103;
    case 1:
      float32x4_t v11 = (float *)*((void *)this + 51);
      if (v11[4] == a3.n128_f32[0] && v11[5] == a4 && v11[6] == a5 && v11[7] == a6) {
        return 0;
      }
      v11[4] = a3.n128_f32[0];
      v11[5] = a4;
      v11[6] = a5;
      v11[7] = a6;
      goto LABEL_103;
    case 2:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[8] == a3.n128_f32[0] && v12[9] == a4 && v12[10] == a5 && v12[11] == a6) {
        return 0;
      }
      unsigned char v12[8] = a3.n128_f32[0];
      v12[9] = a4;
      v12[10] = a5;
      v12[11] = a6;
      goto LABEL_103;
    case 3:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[12] == a3.n128_f32[0] && v13[13] == a4 && v13[14] == a5 && v13[15] == a6) {
        return 0;
      }
      v13[12] = a3.n128_f32[0];
      v13[13] = a4;
      v13[14] = a5;
      v13[15] = a6;
      goto LABEL_103;
    case 4:
      uint64_t v14 = (float *)*((void *)this + 51);
      if (v14[16] == a3.n128_f32[0] && v14[17] == a4 && v14[18] == a5 && v14[19] == a6) {
        return 0;
      }
      v14[16] = a3.n128_f32[0];
      v14[17] = a4;
      v14[18] = a5;
      v14[19] = a6;
      goto LABEL_103;
    case 5:
      uint64_t v15 = (float *)*((void *)this + 51);
      if (v15[20] == a3.n128_f32[0] && v15[21] == a4 && v15[22] == a5 && v15[23] == a6) {
        return 0;
      }
      unsigned char v15[20] = a3.n128_f32[0];
      v15[21] = a4;
      v15[22] = a5;
      v15[23] = a6;
      goto LABEL_103;
    case 6:
      uint64_t v16 = (float *)*((void *)this + 51);
      if (v16[24] == a3.n128_f32[0] && v16[25] == a4 && v16[26] == a5 && v16[27] == a6) {
        return 0;
      }
      v16[24] = a3.n128_f32[0];
      v16[25] = a4;
      v16[26] = a5;
      v16[27] = a6;
      goto LABEL_103;
    case 7:
      float v17 = (float *)*((void *)this + 51);
      if (v17[28] == a3.n128_f32[0] && v17[29] == a4 && v17[30] == a5 && v17[31] == a6) {
        return 0;
      }
      v17[28] = a3.n128_f32[0];
      v17[29] = a4;
      v17[30] = a5;
      v17[31] = a6;
      goto LABEL_103;
    case 8:
      uint64_t v18 = (float *)*((void *)this + 51);
      if (v18[32] == a3.n128_f32[0] && v18[33] == a4 && v18[34] == a5 && v18[35] == a6) {
        return 0;
      }
      v18[32] = a3.n128_f32[0];
      v18[33] = a4;
      v18[34] = a5;
      v18[35] = a6;
      goto LABEL_103;
    case 9:
      int8x16_t v19 = (float *)*((void *)this + 51);
      if (v19[36] == a3.n128_f32[0] && v19[37] == a4 && v19[38] == a5 && v19[39] == a6) {
        return 0;
      }
      v19[36] = a3.n128_f32[0];
      v19[37] = a4;
      v19[38] = a5;
      v19[39] = a6;
      goto LABEL_103;
    case 10:
      uint64_t v20 = (float *)*((void *)this + 51);
      if (v20[40] == a3.n128_f32[0] && v20[41] == a4 && v20[42] == a5 && v20[43] == a6) {
        return 0;
      }
      v20[40] = a3.n128_f32[0];
      v20[41] = a4;
      v20[42] = a5;
      v20[43] = a6;
      goto LABEL_103;
    case 11:
      float32x4_t v21 = (__n128 *)*((void *)this + 51);
      if (v21[11].n128_f32[0] == a3.n128_f32[0]
        && v21[11].n128_f32[1] == a3.n128_f32[0]
        && v21[11].n128_f32[2] == a3.n128_f32[0]
        && v21[11].n128_f32[3] == 0.0)
      {
        return 0;
      }
      int32x4_t v22 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v22.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v21[11] = (__n128)v22;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v21[66] = a3;
      goto LABEL_103;
    case 12:
      float32x4_t v23 = (__n128 *)*((void *)this + 51);
      if (v23[12].n128_f32[0] == 0.0
        && v23[12].n128_f32[1] == a3.n128_f32[0]
        && v23[12].n128_f32[2] == 0.0
        && v23[12].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v23[12].n128_u32[0] = 0;
      v23[12].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v23[12].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v23[67] = a3;
      goto LABEL_103;
    case 13:
      int8x16_t v24 = (__n128 *)*((void *)this + 51);
      if (v24[13].n128_f32[0] == 0.0
        && v24[13].n128_f32[1] == a4
        && v24[13].n128_f32[2] == 0.0
        && v24[13].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v24[13].n128_u32[0] = 0;
      v24[13].n128_f32[1] = a4;
      v24[13].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v24[13].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v24[68] = a3;
      goto LABEL_103;
    case 14:
      int8x16_t v25 = (float *)*((void *)this + 51);
      if (v25[56] == a3.n128_f32[0] && v25[57] == a4 && v25[58] == a5 && v25[59] == a6) {
        return 0;
      }
      v25[56] = a3.n128_f32[0];
      v25[57] = a4;
      v25[58] = a5;
      v25[59] = a6;
      goto LABEL_103;
    case 15:
      int8x16_t v26 = (float *)*((void *)this + 51);
      if (v26[60] == a3.n128_f32[0] && v26[61] == a4 && v26[62] == a5 && v26[63] == a6) {
        return 0;
      }
      v26[60] = a3.n128_f32[0];
      v26[61] = a4;
      v26[62] = a5;
      v26[63] = a6;
      goto LABEL_103;
    case 16:
      float32x4_t v27 = (float *)*((void *)this + 51);
      if (v27[64] == a3.n128_f32[0] && v27[65] == a4 && v27[66] == a5 && v27[67] == a6) {
        return 0;
      }
      v27[64] = a3.n128_f32[0];
      v27[65] = a4;
      v27[66] = a5;
      v27[67] = a6;
      goto LABEL_103;
    case 17:
      float32x4_t v28 = (float *)*((void *)this + 51);
      if (v28[68] == a3.n128_f32[0] && v28[69] == a4 && v28[70] == a5 && v28[71] == a6) {
        return 0;
      }
      v28[68] = a3.n128_f32[0];
      v28[69] = a4;
      v28[70] = a5;
      v28[71] = a6;
      goto LABEL_103;
    case 18:
      float32x4_t v29 = (float *)*((void *)this + 51);
      if (v29[72] == a3.n128_f32[0] && v29[73] == a4 && v29[74] == a5 && v29[75] == a6) {
        return 0;
      }
      v29[72] = a3.n128_f32[0];
      v29[73] = a4;
      v29[74] = a5;
      v29[75] = a6;
      goto LABEL_103;
    case 19:
      float32x4_t v30 = (float *)*((void *)this + 51);
      if (v30[76] == a3.n128_f32[0] && v30[77] == a4 && v30[78] == a5 && v30[79] == a6) {
        return 0;
      }
      v30[76] = a3.n128_f32[0];
      v30[77] = a4;
      v30[78] = a5;
      v30[79] = a6;
LABEL_103:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcMatteNormalComposite::GetParameter(HgcMatteNormalComposite *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = v3[260];
      a3[1] = v3[261];
      a3[2] = v3[262];
      int v4 = v3 + 263;
      goto LABEL_22;
    case 1:
      int32x2_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_22;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_22;
    case 3:
      float v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      int v4 = v7 + 15;
      goto LABEL_22;
    case 4:
      float v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      int v4 = v8 + 19;
      goto LABEL_22;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_22;
    case 6:
      int32x2_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
      goto LABEL_22;
    case 7:
      float32x4_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      int v4 = v11 + 31;
      goto LABEL_22;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      int v4 = v12 + 35;
      goto LABEL_22;
    case 9:
      uint64_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      int v4 = v13 + 39;
      goto LABEL_22;
    case 10:
      uint64_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      int v4 = v14 + 43;
      goto LABEL_22;
    case 11:
      uint64_t v15 = (float *)*((void *)this + 51);
      *a3 = v15[264];
      a3[1] = v15[265];
      a3[2] = v15[266];
      int v4 = v15 + 267;
      goto LABEL_22;
    case 12:
      uint64_t v16 = (float *)*((void *)this + 51);
      *a3 = v16[268];
      a3[1] = v16[269];
      a3[2] = v16[270];
      int v4 = v16 + 271;
      goto LABEL_22;
    case 13:
      float v17 = (float *)*((void *)this + 51);
      *a3 = v17[272];
      a3[1] = v17[273];
      a3[2] = v17[274];
      int v4 = v17 + 275;
      goto LABEL_22;
    case 14:
      uint64_t v18 = (float *)*((void *)this + 51);
      *a3 = v18[56];
      a3[1] = v18[57];
      a3[2] = v18[58];
      int v4 = v18 + 59;
      goto LABEL_22;
    case 15:
      int8x16_t v19 = (float *)*((void *)this + 51);
      *a3 = v19[60];
      a3[1] = v19[61];
      a3[2] = v19[62];
      int v4 = v19 + 63;
      goto LABEL_22;
    case 16:
      uint64_t v20 = (float *)*((void *)this + 51);
      *a3 = v20[64];
      a3[1] = v20[65];
      a3[2] = v20[66];
      int v4 = v20 + 67;
      goto LABEL_22;
    case 17:
      float32x4_t v21 = (float *)*((void *)this + 51);
      *a3 = v21[68];
      a3[1] = v21[69];
      a3[2] = v21[70];
      int v4 = v21 + 71;
      goto LABEL_22;
    case 18:
      int32x4_t v22 = (float *)*((void *)this + 51);
      *a3 = v22[72];
      a3[1] = v22[73];
      a3[2] = v22[74];
      int v4 = v22 + 75;
      goto LABEL_22;
    case 19:
      float32x4_t v23 = (float *)*((void *)this + 51);
      *a3 = v23[76];
      a3[1] = v23[77];
      a3[2] = v23[78];
      int v4 = v23 + 79;
LABEL_22:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcMatteNormalComposite::State::State(HgcMatteNormalComposite::State *this)
{
  *(void *)&long long v1 = 0x8000000080000000;
  *((void *)&v1 + OZLinkBehavior::clearAll(this, 1) = 0x8000000080000000;
  double result = 0.0;
  *(_OWORD *)this = v1;
  *((_OWORD *)this + OZLinkBehavior::clearAll(this, 1) = 0u;
  *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 1OZLinkBehavior::clearAll(this, 1) = 0u;
  *((_OWORD *)this + 1OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = xmmword_1B8384900;
  *((_OWORD *)this + 2OZLinkBehavior::clearAll(this, 1) = xmmword_1B7E751A0;
  *((_OWORD *)this + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75390;
  *((_OWORD *)this + 23) = xmmword_1B7E75200;
  *((_OWORD *)this + 24) = xmmword_1B8384910;
  *((_OWORD *)this + 25) = xmmword_1B7E75350;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 26) = _Q1;
  *((_OWORD *)this + 27) = xmmword_1B7E75360;
  *((_OWORD *)this + 28) = xmmword_1B8384920;
  *((int32x4_t *)this + 29) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 30) = xmmword_1B7E752F0;
  *((_OWORD *)this + 3OZLinkBehavior::clearAll(this, 1) = xmmword_1B7E75430;
  *((_OWORD *)this + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E772F0;
  *((_OWORD *)this + 33) = xmmword_1B7E77840;
  *((_OWORD *)this + 34) = xmmword_1B7E76F70;
  *((_OWORD *)this + 35) = xmmword_1B837F2C0;
  *((_OWORD *)this + 36) = xmmword_1B8384930;
  *((_OWORD *)this + 37) = xmmword_1B7E75D00;
  *((_OWORD *)this + 38) = xmmword_1B8384940;
  *((_OWORD *)this + 39) = xmmword_1B8384950;
  *((_OWORD *)this + 40) = xmmword_1B8384960;
  *((_OWORD *)this + 4OZLinkBehavior::clearAll(this, 1) = xmmword_1B8384970;
  *((_OWORD *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B8384980;
  *((_OWORD *)this + 43) = xmmword_1B8384990;
  *((_OWORD *)this + 44) = xmmword_1B83849A0;
  *((_OWORD *)this + 45) = xmmword_1B83849B0;
  *((_OWORD *)this + OZFxFilter::updateChannelsForMisbehavingPlugin(this - 46) = xmmword_1B83849C0;
  *((_OWORD *)this + 47) = xmmword_1B83849D0;
  *((_OWORD *)this + 48) = xmmword_1B83849E0;
  *((_OWORD *)this + 49) = xmmword_1B83849F0;
  *((_OWORD *)this + 50) = xmmword_1B8384A00;
  *((_OWORD *)this + 5OZLinkBehavior::clearAll(this, 1) = xmmword_1B8384A10;
  *((_OWORD *)this + 5OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B8384A20;
  *((_OWORD *)this + 53) = xmmword_1B8384A30;
  *((_OWORD *)this + 54) = xmmword_1B8384A40;
  *((_OWORD *)this + 55) = xmmword_1B8384A50;
  *((_OWORD *)this + 56) = xmmword_1B8384A60;
  *((_OWORD *)this + 57) = xmmword_1B8384A70;
  *((_OWORD *)this + 58) = xmmword_1B8384A80;
  *((_OWORD *)this + 59) = xmmword_1B8384A90;
  *((_OWORD *)this + 60) = xmmword_1B7E767B0;
  *((_OWORD *)this + 6OZLinkBehavior::clearAll(this, 1) = xmmword_1B8384AA0;
  *((_OWORD *)this + 6OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B8384AB0;
  *((_OWORD *)this + 63) = xmmword_1B8384AC0;
  *((_OWORD *)this + 64) = xmmword_1B8384AD0;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  return result;
}

const char *HgcZebraStripe::GetProgram(HgcZebraStripe *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006c5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const half4 c1 = half4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const half4 c2 = half4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    half4 r0, r1;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord2.xy*float2(c0.xx);\n"
             "    s0.xy = floor(s0.xy);\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    s0.xy = -s0.xy*float2(c0.yy) + frag._texCoord2.xy;\n"
             "    s0.x = s0.y - s0.x;\n"
             "    s0.x = s0.x*float(c0.z) + float(c0.w);\n"
             "    s0.y = s0.x*float(c1.y);\n"
             "    s0.y = floor(s0.y);\n"
             "    s0.x = -s0.y*float(c1.x) + s0.x;\n"
             "    s0.x = float(c1.z) - s0.x;\n"
             "    s0.y = fmax(float(r0.x), float(c1.w));\n"
             "    s0.x = -s0.y*float(c1.x) + fabs(s0.x);\n"
             "    s0.w = float(c1.z);\n"
             "    s0.xyz = clamp(s0.xxx + float3(c1.zzz), 0.00000f, 1.00000f);\n"
             "    s0 = fmax(s0, hg_Params[1]);\n"
             "    r0.w = half(r0.x >= c2.w);\n"
             "    r0.x = half(-r0.w >= c2.x);\n"
             "    r1.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.xyz = fmax(r1.xyz, c2.xxx);\n"
             "    r1.xyz = half3(dot(r1.xyz, half3(hg_Params[0].xyz)));\n"
             "    r1.w = c1.z;\n"
             "    output.color0 = select(s0, float4(r1), -float4(r0.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=87c737f3:aae2c528:1aa74fa8:9f439e8c\n"
             "//SIG=00400000:00000003:00000003:00000003:0003:0002:0003:0000:0000:0000:000e:0000:0003:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000649\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const float4 c1 = float4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const float4 c2 = float4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord2.xy*c0.xx;\n"
             "    r0.xy = floor(r0.xy);\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xy = -r0.xy*c0.yy + frag._texCoord2.xy;\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.x = r0.x*c0.z + c0.w;\n"
             "    r0.y = r0.x*c1.y;\n"
             "    r0.y = floor(r0.y);\n"
             "    r0.x = -r0.y*c1.x + r0.x;\n"
             "    r0.x = c1.z - r0.x;\n"
             "    r0.y = fmax(r1.x, c1.w);\n"
             "    r0.x = -r0.y*c1.x + fabs(r0.x);\n"
             "    r0.w = c1.z;\n"
             "    r0.xyz = clamp(r0.xxx + c1.zzz, 0.00000f, 1.00000f);\n"
             "    r0 = fmax(r0, hg_Params[1]);\n"
             "    r1.w = float(r1.x >= c2.w);\n"
             "    r1.x = float(-r1.w >= c2.x);\n"
             "    r2.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r2.xyz = fmax(r2.xyz, c2.xxx);\n"
             "    r2.xyz = float3(dot(r2.xyz, hg_Params[0].xyz));\n"
             "    r2.w = c1.z;\n"
             "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=045c4aa2:f4d6e5f0:b4e97ea2:a67f2456\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:000e:0000:0003:02:0:1:0\n";
  }
  else
  {
    unsigned int v5 = Target;
    if (Target <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
    {
      if (v5 <= 0x6040F) {
        return "!!ARBfp1.0     \n"
      }
               "##LEN=00000004a1\n"
               "##                          \n"
               "##                            \n"
               "##                                \n"
               "##                                     \n"
               "##$\n"
               "OUTPUT $o0=result.color;\n"
               "ATTRIB $f0=fragment.texcoord[0];\n"
               "ATTRIB $f1=fragment.texcoord[1];\n"
               "ATTRIB $f2=fragment.texcoord[2];\n"
               "PARAM $p0=program.local[0];\n"
               "PARAM $p1=program.local[1];\n"
               "PARAM $c0={0.1428571492,7.000000000,0.2857142985,1.714285851};\n"
               "PARAM $c1={2.000000000,0.5000000000,1.000000000,0.3000000119};\n"
               "PARAM $c2={0.000000000,0.000000000,0.000000000,0.004999999888};\n"
               "##%\n"
               "TEMP r0,r1,r2;\n"
               "##@\n"
               "MUL r0.xy,$f2,$c0.x;\n"
               "FLR r0.xy,r0;\n"
               "##0\n"
               "TEX r1.x,$f0,texture[0],RECT;\n"
               "MAD r0.xy,-r0,$c0.y,$f2;\n"
               "SUB r0.x,r0.y,r0;\n"
               "MAD r0.x,r0,$c0.z,$c0.w;\n"
               "MUL r0.y,r0.x,$c1;\n"
               "FLR r0.y,r0;\n"
               "MAD r0.x,-r0.y,$c1,r0;\n"
               "SUB r0.x,$c1.z,r0;\n"
               "MAX r0.y,r1.x,$c1.w;\n"
               "ABS r2.x,r0;\n"
               "MAD r0.x,-r0.y,$c1,r2;\n"
               "MOV r0.w,$c1.z;\n"
               "ADD_SAT r0.xyz,r0.x,$c1.z;\n"
               "MAX r0,r0,$p1;\n"
               "SGE r1.w,r1.x,$c2;\n"
               "SGE r1.x,-r1.w,$c2;\n"
               "##1\n"
               "TEX r2.xyz,$f1,texture[1],RECT;\n"
               "MAX r2.xyz,r2,$c2.x;\n"
               "DP3 r2.xyz,r2,$p0;\n"
               "MOV r2.w,$c1.z;\n"
               "CMP $o0,-r1.x,r2,r0;\n"
               "END\n"
               "##MD5=be9160a0:5a1c5010:c59c640e:b7dc9a26\n"
               "##SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
      else {
        return "!!ARBfp1.0     \n"
      }
               "##LEN=0000000496\n"
               "OPTION NV_fragment_program; \n"
               "##                            \n"
               "##                                \n"
               "##                                     \n"
               "##$\n"
               "OUTPUT $o0=result.color;\n"
               "ATTRIB $f0=fragment.texcoord[0];\n"
               "ATTRIB $f1=fragment.texcoord[1];\n"
               "ATTRIB $f2=fragment.texcoord[2];\n"
               "PARAM $p0=program.local[0];\n"
               "PARAM $p1=program.local[1];\n"
               "PARAM $c0={0.1428571492,7.000000000,0.2857142985,1.714285851};\n"
               "PARAM $c1={2.000000000,0.5000000000,1.000000000,0.3000000119};\n"
               "PARAM $c2={0.000000000,0.000000000,0.000000000,0.004999999888};\n"
               "##%\n"
               "TEMP r0,r1,r2;\n"
               "##@\n"
               "MUL r0.xy,$f2,$c0.x;\n"
               "FLR r0.xy,r0;\n"
               "##0\n"
               "TEX r1.x,$f0,texture[0],RECT;\n"
               "MAD r0.xy,-r0,$c0.y,$f2;\n"
               "SUB r0.x,r0.y,r0;\n"
               "MAD r0.x,r0,$c0.z,$c0.w;\n"
               "MUL r0.y,r0.x,$c1;\n"
               "FLR r0.y,r0;\n"
               "MAD r0.x,-r0.y,$c1,r0;\n"
               "SUB r0.x,$c1.z,r0;\n"
               "MAX r0.y,r1.x,$c1.w;\n"
               "MAD r0.x,-r0.y,$c1,|r0|;\n"
               "MOV r0.w,$c1.z;\n"
               "ADD_SAT r0.xyz,r0.x,$c1.z;\n"
               "MAX r0,r0,$p1;\n"
               "SGE r1.w,r1.x,$c2;\n"
               "SGE r1.x,-r1.w,$c2;\n"
               "##1\n"
               "TEX r2.xyz,$f1,texture[1],RECT;\n"
               "MAX r2.xyz,r2,$c2.x;\n"
               "DP3 r2.xyz,r2,$p0;\n"
               "MOV r2.w,$c1.z;\n"
               "CMP $o0,-r1.x,r2,r0;\n"
               "END\n"
               "##MD5=769072dd:b7a12e89:d332824c:9cb8f34d\n"
               "##SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
    }
    else
    {
      return "//GLfs2.0      \n"
             "//LEN=0000000698\n"
             "#ifndef GL_ES\n"
             "#define lowp\n"
             "#define mediump\n"
             "#define highp\n"
             "#endif\n"
             "#define defaultp mediump\n"
             "uniform defaultp sampler2D hg_Texture0;\n"
             "uniform defaultp sampler2D hg_Texture1;\n"
             "uniform highp vec4 hg_ProgramLocal0;\n"
             "uniform highp vec4 hg_ProgramLocal1;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "varying highp vec4 hg_TexCoord1;\n"
             "varying highp vec4 hg_TexCoord2;\n"
             "void main()\n"
             "{\n"
             "    const highp vec4 c0 = vec4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const highp vec4 c1 = vec4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const highp vec4 c2 = vec4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    highp vec4 r0, r1, r2;\n"
             "\n"
             "    r0.xy = hg_TexCoord2.xy*c0.xx;\n"
             "    r0.xy = floor(r0.xy);\n"
             "    r1.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
             "    r0.xy = -r0.xy*c0.yy + hg_TexCoord2.xy;\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.x = r0.x*c0.z + c0.w;\n"
             "    r0.y = r0.x*c1.y;\n"
             "    r0.y = floor(r0.y);\n"
             "    r0.x = -r0.y*c1.x + r0.x;\n"
             "    r0.x = c1.z - r0.x;\n"
             "    r0.y = max(r1.x, c1.w);\n"
             "    r0.x = -r0.y*c1.x + abs(r0.x);\n"
             "    r0.w = c1.z;\n"
             "    r0.xyz = clamp(r0.xxx + c1.zzz, vec3(0.00000), vec3(1.00000));\n"
             "    r0 = max(r0, hg_ProgramLocal1);\n"
             "    r1.w = float(r1.x >= c2.w);\n"
             "    r1.x = float(-r1.w >= c2.x);\n"
             "    r2.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
             "    r2.xyz = max(r2.xyz, c2.xxx);\n"
             "    r2.xyz = vec3(dot(r2.xyz, hg_ProgramLocal0.xyz));\n"
             "    r2.w = c1.z;\n"
             "    gl_FragColor = vec4(-r1.x < 0.00000 ? r2.x : r0.x, -r1.x < 0.00000 ? r2.y : r0.y, -r1.x < 0.00000 ? r2."
             "z : r0.z, -r1.x < 0.00000 ? r2.w : r0.w);\n"
             "}\n"
             "//MD5=c395a7ea:f982a5dc:73d36360:92518159\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
    }
  }
}

void HgcZebraStripe::InitProgramDescriptor(HgcZebraStripe *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcZebraStripe_hgc_visible", "//Metal1.0     \n//LEN=00000004b0\n[[ visible ]] FragmentOut HgcZebraStripe_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 texCoord2)\n{\n    const float4 c0 = float4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
    "    const float4 c1 = float4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
    "    const float4 c2 = float4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord2.xy*c0.xx;\n"
    "    r0.xy = floor(r0.xy);\n"
    "    r1.x = color0.x;\n"
    "    r0.xy = -r0.xy*c0.yy + texCoord2.xy;\n"
    "    r0.x = r0.y - r0.x;\n"
    "    r0.x = r0.x*c0.z + c0.w;\n"
    "    r0.y = r0.x*c1.y;\n"
    "    r0.y = floor(r0.y);\n"
    "    r0.x = -r0.y*c1.x + r0.x;\n"
    "    r0.x = c1.z - r0.x;\n"
    "    r0.y = fmax(r1.x, c1.w);\n"
    "    r0.x = -r0.y*c1.x + fabs(r0.x);\n"
    "    r0.w = c1.z;\n"
    "    r0.xyz = clamp(r0.xxx + c1.zzz, 0.00000f, 1.00000f);\n"
    "    r0 = fmax(r0, hg_Params[1]);\n"
    "    r1.w = float(r1.x >= c2.w);\n"
    "    r1.x = float(-r1.w >= c2.x);\n"
    "    r2.xyz = color1.xyz;\n"
    "    r2.xyz = fmax(r2.xyz, c2.xxx);\n"
    "    r2.xyz = float3(dot(r2.xyz, hg_Params[0].xyz));\n"
    "    r2.w = c1.z;\n"
    "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcZebraStripe");
}

void sub_1B7D65294(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D65414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D65464()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6545CLL);
}

void *HgcZebraStripe::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcZebraStripe [hgc1]");
}

uint64_t HgcZebraStripe::BindTexture(HgcZebraStripe *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcZebraStripe::Bind(HgcZebraStripe *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcZebraStripe::RenderTile(HgcZebraStripe *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v6 = a2[2];
    int32x2_t v7 = a2[12];
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    int32x2_t v8 = a2[10];
    v9.i64[1] = 0x3F80000000000000;
    uint64_t v10 = 16 * a2[11].i32[0];
    uint64_t v11 = 16 * a2[3].i32[0];
    uint64_t v12 = 16 * a2[13].i32[0];
    do
    {
      if (v5 < 2)
      {
        unsigned int v62 = 0;
        float32x4_t v15 = v9;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 16;
        float32x4_t v15 = v9;
        do
        {
          float32x4_t v16 = vaddq_f32(v15, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v17 = *((void *)this + 51);
          float32x4_t v19 = *(float32x4_t *)(v17 + 32);
          float32x4_t v18 = *(float32x4_t *)(v17 + 48);
          float32x4_t v20 = vmulq_f32(v15, v19);
          float32x4_t v21 = vmulq_f32(v16, v19);
          float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
          float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
          float32x4_t v24 = vsubq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v22, v20)));
          float32x4_t v25 = vsubq_f32(v23, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v23, v21)));
          float32x4_t v26 = *(float32x4_t *)(v17 + 64);
          float32x4_t v27 = *(float32x4_t *)(v17 + 80);
          float32x4_t v28 = vsubq_f32(v15, vmulq_lane_f32(v24, *(float32x2_t *)v26.f32, 1));
          float32x4_t v29 = vsubq_f32(v16, vmulq_lane_f32(v25, *(float32x2_t *)v26.f32, 1));
          int32x4_t v30 = (int32x4_t)vaddq_f32(v26, vmulq_f32(v27, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v28)));
          int32x4_t v31 = (int32x4_t)vaddq_f32(v26, vmulq_f32(v27, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), v29)));
          int8x16_t v32 = (int8x16_t)vmulq_f32(v27, (float32x4_t)vrev64q_s32(v30));
          int8x16_t v33 = (int8x16_t)vmulq_f32(v27, (float32x4_t)vrev64q_s32(v31));
          int8x16_t v34 = *(int8x16_t *)(v17 + 96);
          float32x4_t v35 = *(float32x4_t *)(v17 + 112);
          int32x4_t v36 = *(int32x4_t *)(*(void *)&v8 + v14 - 16);
          int32x4_t v37 = *(int32x4_t *)(*(void *)&v8 + v14);
          float32x4_t v38 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, v32);
          float32x4_t v39 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v31, v33);
          float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          float32x4_t v42 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v40, v38))));
          float32x4_t v43 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v31, (int8x16_t)vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v41, v39))));
          float32x4_t v44 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32(v18, vsubq_f32(v42, vmulq_lane_f32(v35, *(float32x2_t *)v42.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v36), v35));
          float32x4_t v45 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32(v18, vsubq_f32(v43, vmulq_lane_f32(v35, *(float32x2_t *)v43.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v37), v35));
          int8x16_t v46 = (int8x16_t)vsubq_f32(vabsq_f32(v44), vmulq_lane_f32(v35, *(float32x2_t *)v44.f32, 1));
          int8x16_t v47 = (int8x16_t)vsubq_f32(vabsq_f32(v45), vmulq_lane_f32(v35, *(float32x2_t *)v45.f32, 1));
          float32x4_t v48 = *(float32x4_t *)(v17 + 128);
          int8x16_t v49 = *(int8x16_t *)(v17 + 144);
          int8x16_t v50 = vandq_s8((int8x16_t)v35, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), v48));
          int8x16_t v51 = vandq_s8((int8x16_t)v35, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), v48));
          v50.i64[0] = vandq_s8((int8x16_t)v18, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v50, v50, 0xCuLL)), v48)).u64[0];
          v51.i64[0] = vandq_s8((int8x16_t)v18, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v51, v51, 0xCuLL)), v48)).u64[0];
          float32x4_t v52 = *(float32x4_t *)(v17 + 16);
          int32x4_t v53 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(void *)&v7 + v14 - 16), v48), *(float32x4_t *)v17);
          int32x4_t v54 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(void *)&v7 + v14), v48), *(float32x4_t *)v17);
          v46.i32[3] = 1.0;
          float32x4_t v55 = (float32x4_t)vbslq_s8(v49, v46, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 0)), v48), v18));
          int8x16_t v56 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v53, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 1)));
          v47.i32[3] = 1.0;
          float32x4_t v57 = (float32x4_t)vbslq_s8(v49, v47, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 0)), v48), v18));
          int8x16_t v58 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v54, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.i8, 1)));
          v56.i32[3] = 1.0;
          v58.i32[3] = 1.0;
          float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 0);
          float32x4_t v60 = *(float32x4_t *)(v17 + 160);
          int8x16_t v61 = (int8x16_t *)(*(void *)&v6 + v14);
          v61[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, v60), v56, (int8x16_t)vmaxq_f32(v55, v52));
          int8x16_t *v61 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0), v60), v58, (int8x16_t)vmaxq_f32(v57, v52));
          float32x4_t v15 = vaddq_f32(v16, (float32x4_t)xmmword_1B7E736B0);
          v13 -= 2;
          v14 += 32;
        }
        while (v5 + v13 > 1);
        unsigned int v62 = -v13;
      }
      if ((int)v62 < v5)
      {
        uint64_t v63 = *((void *)this + 51);
        float32x4_t v64 = *(float32x4_t *)(v63 + 48);
        float32x4_t v65 = vmulq_f32(v15, *(float32x4_t *)(v63 + 32));
        float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
        float32x4_t v67 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v66, v65)));
        int32x4_t v68 = *(int32x4_t *)(*(void *)&v8 + 16 * v62);
        float32x4_t v69 = *(float32x4_t *)(v63 + 64);
        float32x4_t v70 = *(float32x4_t *)(v63 + 80);
        float32x4_t v71 = vsubq_f32(v15, vmulq_lane_f32(v67, *(float32x2_t *)v69.f32, 1));
        int32x4_t v72 = (int32x4_t)vaddq_f32(v69, vmulq_f32(v70, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v71), v71)));
        int8x16_t v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)vrev64q_s32(v72));
        int8x16_t v74 = *(int8x16_t *)(v63 + 96);
        float32x4_t v75 = *(float32x4_t *)(v63 + 112);
        float32x4_t v76 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v72, v73);
        float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
        float32x4_t v78 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v72, (int8x16_t)vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v77, v76))));
        float32x4_t v79 = (float32x4_t)vbslq_s8(v74, (int8x16_t)vsubq_f32(v64, vsubq_f32(v78, vmulq_lane_f32(v75, *(float32x2_t *)v78.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v68), v75));
        int8x16_t v80 = (int8x16_t)vsubq_f32(vabsq_f32(v79), vmulq_lane_f32(v75, *(float32x2_t *)v79.f32, 1));
        v80.i32[3] = 1.0;
        float32x4_t v81 = *(float32x4_t *)(v63 + 128);
        float32x4_t v82 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v63 + 144), v80, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.i8, 0)), v81), v64));
        int8x16_t v83 = vandq_s8((int8x16_t)v75, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), v81));
        v64.i64[0] = vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v83, v83, 0xCuLL)), v81)).u64[0];
        int32x4_t v84 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(void *)&v7 + 16 * v62), v81), *(float32x4_t *)v63);
        int8x16_t v85 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v84, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.i8, 1)));
        v85.i32[3] = 1.0;
        *(int8x16_t *)(*(void *)&v6 + 16 * v6OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 0), *(float32x4_t *)(v63 + 160)), v85, (int8x16_t)vmaxq_f32(v82, *(float32x4_t *)(v63 + 16)));
      }
      float32x4_t v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v8 += v10;
      *(void *)&v7 += v12;
      *(void *)&v6 += v11;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcZebraStripe::GetDOD(HgcZebraStripe *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcZebraStripe::GetROI(HgcZebraStripe *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcZebraStripe::HgcZebraStripe(HgcZebraStripe *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1171BD8;
  operator new();
}

void sub_1B7D65BB0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcZebraStripe::~HgcZebraStripe(HGNode *this)
{
  *(void *)this = &unk_1F1171BD8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C3A7E6FCLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcZebraStripe::~HgcZebraStripe(this);

  HGObject::operator delete(v1);
}

uint64_t HgcZebraStripe::SetParameter(HgcZebraStripe *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  int32x2_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcZebraStripe::GetParameter(HgcZebraStripe *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

void OZTileBlend::renderTile(uint64_t a1, PCWorkingColor *this, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  PCWorkingColor::getRGBA(this, v60.f32, &v60.f32[1], &v60.f32[2], (float *)((unint64_t)&v60 | 0xC));
  float32x4_t v5 = v60;
  if (a3 == 1)
  {
    int v32 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    if (v32 >= 1)
    {
      int v33 = 0;
      int v34 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
      uint64_t v35 = *(void *)(a1 + 16);
      uint64_t v36 = *(void *)(a1 + 96);
      uint64_t v37 = 16 * *(int *)(a1 + 88);
      uint64_t v38 = *(void *)(a1 + 80);
      uint64_t v39 = 16 * *(int *)(a1 + 104);
      uint64_t v40 = 16 * *(int *)(a1 + 24);
      do
      {
        if (v34 < 4)
        {
          LODWORD(v56) = 0;
        }
        else
        {
          int v41 = 0;
          uint64_t v42 = 48;
          do
          {
            float32x4_t v43 = *(float32x4_t *)(v38 + v42 - 48);
            float32x4_t v44 = *(float32x4_t *)(v38 + v42 - 32);
            float32x4_t v45 = *(float32x4_t *)(v38 + v42 - 16);
            float32x4_t v46 = *(float32x4_t *)(v38 + v42);
            float32x4_t v47 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 48));
            float32x4_t v48 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 32));
            float32x4_t v49 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 16));
            float32x4_t v50 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42));
            float32x4_t v51 = vaddq_f32(v43, v47);
            float32x4_t v52 = vaddq_f32(v44, v48);
            float32x4_t v53 = vaddq_f32(v45, v49);
            float32x4_t v54 = vaddq_f32(v46, v50);
            v51.i32[3] = vsubq_f32(v51, vmulq_f32(v43, v47)).i32[3];
            v52.i32[3] = vsubq_f32(v52, vmulq_f32(v44, v48)).i32[3];
            v53.i32[3] = vsubq_f32(v53, vmulq_f32(v45, v49)).i32[3];
            v54.i32[3] = vsubq_f32(v54, vmulq_f32(v46, v50)).i32[3];
            float32x4_t v55 = (float32x4_t *)(v35 + v42);
            v55[-3] = v51;
            v55[-2] = v52;
            v55[-1] = v53;
            *float32x4_t v55 = v54;
            v41 -= 4;
            v42 += 64;
          }
          while (v34 + v41 > 3);
          LODWORD(v56) = -v41;
        }
        if ((int)v56 < v34)
        {
          uint64_t v56 = v56;
          do
          {
            float32x4_t v57 = *(float32x4_t *)(v38 + 16 * v56);
            float32x4_t v58 = vmulq_f32(v5, *(float32x4_t *)(v36 + 16 * v56));
            float32x4_t v59 = vaddq_f32(v57, v58);
            v59.i32[3] = vsubq_f32(v59, vmulq_f32(v57, v58)).i32[3];
            *(float32x4_t *)(v35 + 16 * v56++) = v59;
          }
          while (v56 < v34);
        }
        ++v33;
        v38 += v37;
        v36 += v39;
        v35 += v40;
      }
      while (v33 != v32);
    }
  }
  else if (!a3)
  {
    int v6 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    if (v6 >= 1)
    {
      int v7 = 0;
      int v8 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 96);
      uint64_t v11 = *(void *)(a1 + 80);
      uint64_t v12 = 16 * *(int *)(a1 + 88);
      uint64_t v13 = 16 * *(int *)(a1 + 104);
      uint64_t v14 = 16 * *(int *)(a1 + 24);
      __asm { FMOV            V1.4S, #1.0 }
      do
      {
        if (v8 < 4)
        {
          LODWORD(v30) = 0;
        }
        else
        {
          int v20 = 0;
          uint64_t v21 = 48;
          do
          {
            float32x4_t v22 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 48));
            float32x4_t v23 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 32));
            float32x4_t v24 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 16));
            float32x4_t v25 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21));
            float32x4_t v26 = vaddq_f32(v23, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 32), vsubq_f32(_Q1, v23), 3));
            float32x4_t v27 = vaddq_f32(v24, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 16), vsubq_f32(_Q1, v24), 3));
            float32x4_t v28 = vaddq_f32(v25, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21), vsubq_f32(_Q1, v25), 3));
            float32x4_t v29 = (float32x4_t *)(v9 + v21);
            v29[-3] = vaddq_f32(v22, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 48), vsubq_f32(_Q1, v22), 3));
            v29[-2] = v26;
            v29[-1] = v27;
            float32x4_t *v29 = v28;
            v20 -= 4;
            v21 += 64;
          }
          while (v8 + v20 > 3);
          LODWORD(v30) = -v20;
        }
        if ((int)v30 < v8)
        {
          uint64_t v30 = v30;
          do
          {
            float32x4_t v31 = vmulq_f32(v5, *(float32x4_t *)(v10 + 16 * v30));
            *(float32x4_t *)(v9 + 16 * v30) = vaddq_f32(v31, vmulq_laneq_f32(*(float32x4_t *)(v11 + 16 * v30), vsubq_f32(_Q1, v31), 3));
            ++v30;
          }
          while (v30 < v8);
        }
        ++v7;
        v11 += v12;
        v10 += v13;
        v9 += v14;
      }
      while (v7 != v6);
    }
  }
}

const char *HgcMaskCompIntersect::GetProgram(HgcMaskCompIntersect *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004bb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = r0.yyyy*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac2b60ee:6ba9cb69:34ade124:5d40c400\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000481\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = r0.yyyy*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=77d7d354:a5b065a0:a8b165d0:d4bae7e3\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000335\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "SUB r1.x,$c0,r0.y;\n"
           "CMP r0.z,-$p1,r1.x,r0.y;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "MUL r1,r0.y,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=b11fb0f2:dceb6060:16c24b65:6e4e89de\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r1.x = c0.x - r0.y;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r1.x : r0.y;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = r0.yyyy*r1;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=3e59aa96:6f901a54:534f47f4:36e85ad7\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompIntersect::InitProgramDescriptor(HgcMaskCompIntersect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompIntersect_hgc_visible", "//Metal1.0     \n//LEN=00000002e4\n[[ visible ]] FragmentOut HgcMaskCompIntersect_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r1.x = c0.x - r0.y;\n"
    "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
    "    r1 = color1;\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = r0.yyyy*r1;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskCompIntersect");
}

void sub_1B7D66144(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D66284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D662CC()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D662C4);
}

void *HgcMaskCompIntersect::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompIntersect [hgc1]");
}

uint64_t HgcMaskCompIntersect::BindTexture(HgcMaskCompIntersect *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompIntersect::Bind(HgcMaskCompIntersect *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskCompIntersect::RenderTile(HgcMaskCompIntersect *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 26);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v54) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          uint64_t v13 = *((void *)this + 51);
          float32x4_t v14 = *(float32x4_t *)(v13 + 16);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          float32x4_t v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          float32x4_t v18 = vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)v13);
          float32x4_t v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          float32x4_t v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          float32x4_t v21 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          float32x4_t v22 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          float32x4_t v23 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          int32x4_t v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v25 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v26 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v27 = (int32x4_t)vmulq_lane_f32(v23, *(float32x2_t *)v14.f32, 1);
          float32x4_t v28 = *(float32x4_t *)(v13 + 32);
          float32x4_t v29 = *(float32x4_t *)(v13 + 48);
          int8x16_t v30 = *(int8x16_t *)(v13 + 64);
          float32x4_t v31 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v24))));
          float32x4_t v32 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v25, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v25))));
          float32x4_t v33 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v26))));
          float32x4_t v34 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v27, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v27))));
          float32x4_t v35 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v14.f32[0]));
          float32x4_t v36 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v14.f32[0]));
          float32x4_t v37 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v14.f32[0]));
          float32x4_t v38 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v34), vmulq_n_f32(v34, v14.f32[0]));
          int8x16_t v39 = (int8x16_t)vcgtq_f32(v14, v29);
          v35.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v35)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v35, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v36)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v36, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v37)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v37, 0xCuLL)).i64[1];
          v38.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v38)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v38, 0xCuLL)).i64[1];
          int8x16_t v40 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v29);
          float32x4_t v41 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v35);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v36);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v37);
          float32x4_t v44 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v38);
          int8x16_t v45 = (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x2_t *)v41.f32, 1);
          int8x16_t v46 = (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x2_t *)v44.f32, 1);
          int8x16_t v47 = (int8x16_t)vcgtq_f32(v28, v42);
          v41.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v28, v41), (int8x16_t)vdupq_laneq_s32((int32x4_t)v41, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)).u64[0];
          int8x16_t v48 = (int8x16_t)vcgtq_f32(v28, v43);
          v28.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v28, v44), (int8x16_t)vdupq_laneq_s32((int32x4_t)v44, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)).u64[0];
          int8x16_t v49 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *(float32x4_t *)(v13 + 80));
          int8x16_t v50 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0), v45);
          int8x16_t v51 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v47, (int8x16_t)vdupq_laneq_s32((int32x4_t)v42, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x2_t *)v42.f32, 1));
          int8x16_t v52 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v48, (int8x16_t)vdupq_laneq_s32((int32x4_t)v43, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12), *(float32x2_t *)v43.f32, 1));
          float32x4_t v53 = (int8x16_t *)(v5 + v12);
          v53[-2] = v50;
          v53[-1] = v51;
          int8x16_t *v53 = v52;
          v53[1] = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v46);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v54) = -v11;
      }
      if ((int)v54 < v4)
      {
        uint64_t v54 = v54;
        do
        {
          uint64_t v55 = *((void *)this + 51);
          float32x4_t v56 = *(float32x4_t *)(v55 + 16);
          float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v54), *(float32x4_t *)v55);
          float32x4_t v58 = vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL));
          int32x4_t v59 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v58, (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), *(float32x2_t *)v56.f32, 1);
          float32x4_t v60 = *(float32x4_t *)(v55 + 32);
          float32x4_t v61 = *(float32x4_t *)(v55 + 48);
          int8x16_t v62 = *(int8x16_t *)(v55 + 64);
          float32x4_t v63 = (float32x4_t)vbslq_s8(v62, (int8x16_t)v59, (int8x16_t)vaddq_f32(v60, vmulq_f32(v61, (float32x4_t)vrev64q_s32(v59))));
          float32x4_t v64 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v63), vmulq_n_f32(v63, v56.f32[0]));
          v64.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v56, v61), (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v60, v64)), 0), vextq_s8(*(int8x16_t *)&v64, *(int8x16_t *)&v64, 0xCuLL)).i64[1];
          float32x4_t v65 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), v61), (int8x16_t)v64);
          *(int8x16_t *)(v5 + 16 * v54) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), *(float32x4_t *)(v55 + 80)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v60, v65), (int8x16_t)vdupq_laneq_s32((int32x4_t)v65, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + 16 * v54), *(float32x2_t *)v65.f32, 1));
          ++v54;
        }
        while (v54 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompIntersect::GetDOD(HgcMaskCompIntersect *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskCompIntersect::GetROI(HgcMaskCompIntersect *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskCompIntersect::HgcMaskCompIntersect(HgcMaskCompIntersect *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1171E40;
  operator new();
}

void sub_1B7D66948(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompIntersect::~HgcMaskCompIntersect(HGNode *this)
{
  *(void *)this = &unk_1F1171E40;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskCompIntersect::~HgcMaskCompIntersect(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompIntersect::SetParameter(HgcMaskCompIntersect *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompIntersect::GetParameter(HgcMaskCompIntersect *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcMaskElem::GetProgram(HgcMaskElem *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000032e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = fmin(r0, half4(hg_Params[1]));\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmax(r0, half4(hg_Params[0]));\n"
             "    output.color0 = float4(r0)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=697add7e:c663244d:2a11e2f1:d614b1ba\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000303\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = fmin(r0, hg_Params[1]);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmax(r0, hg_Params[0]);\n"
             "    output.color0 = r0*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f5cef5f9:18fdecb9:e83be33b:ee75b063\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=000000024e\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##1\n"
           "TEX r0,$f1,texture[1],RECT;\n"
           "MIN r0,r0,$p1;\n"
           "##0\n"
           "TEX r1,$f0,texture[0],RECT;\n"
           "MAX r0,r0,$p0;\n"
           "MUL $o0,r0,r1;\n"
           "END\n"
           "##MD5=90b56ecf:f74056c4:26bebe67:a11aed9f\n"
           "##SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = min(r0, hg_ProgramLocal1);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = max(r0, hg_ProgramLocal0);\n"
           "    gl_FragColor = r0*r1;\n"
           "}\n"
           "//MD5=9b7caf92:8007f644:c8cd0c22:84ae7f2c\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskElem::InitProgramDescriptor(HgcMaskElem *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskElem_hgc_visible", "//Metal1.0     \n//LEN=000000015d\n[[ visible ]] FragmentOut HgcMaskElem_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = fmin(r0, hg_Params[1]);\n"
    "    r1 = color0;\n"
    "    r0 = fmax(r0, hg_Params[0]);\n"
    "    output.color0 = r0*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskElem");
}

void sub_1B7D66BDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D66D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D66D64()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D66D5CLL);
}

void *HgcMaskElem::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskElem [hgc1]");
}

uint64_t HgcMaskElem::BindTexture(HgcMaskElem *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskElem::Bind(HgcMaskElem *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskElem::RenderTile(HgcMaskElem *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 26);
    uint64_t v8 = *((void *)a2 + 12);
    uint64_t v9 = 16 * *((int *)a2 + 22);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          uint64_t v13 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v14 = v13[1];
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 32), v14), *v13));
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 16), v14), *v13));
          float32x4_t v17 = vmulq_f32(*(float32x4_t *)(v6 + v12), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12), v14), *v13));
          float32x4_t v18 = vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 + 16), v14), *v13));
          float32x4_t v19 = (float32x4_t *)(v5 + v12);
          v19[-2] = v15;
          v19[-1] = v16;
          *float32x4_t v19 = v17;
          v19[1] = v18;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v20) = -v11;
      }
      if ((int)v20 < v4)
      {
        uint64_t v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vmulq_f32(*(float32x4_t *)(v6 + 16 * v20), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + 16 * v20), *(float32x4_t *)(*((void *)this + 51) + 16)), *(float32x4_t *)*((void *)this + 51)));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskElem::GetDOD(HgcMaskElem *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskElem::GetROI(HgcMaskElem *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskElem::HgcMaskElem(HgcMaskElem *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11720A8;
  operator new();
}

void sub_1B7D671A4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskElem::~HgcMaskElem(HGNode *this)
{
  *(void *)this = &unk_1F11720A8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40FA0F61DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskElem::~HgcMaskElem(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskElem::SetParameter(HgcMaskElem *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2 == 1)
  {
    uint64_t v9 = *((void *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a3.n128_f32[0]
      || *(float *)(v9 + 24) != a3.n128_f32[0]
      || *(float *)(v9 + 28) != a3.n128_f32[0])
    {
      int32x4_t v10 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v9 + 16) = v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v9 + 48) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!a2)
  {
    uint64_t v7 = *((void *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != a3.n128_f32[0])
    {
      int32x4_t v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)uint64_t v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcMaskElem::GetParameter(HgcMaskElem *this, int a2, float *a3)
{
  if (a2 == 1)
  {
    uint64_t v5 = (float *)*((void *)this + 51);
    *a3 = v5[12];
    a3[1] = v5[13];
    a3[2] = v5[14];
    int v4 = v5 + 15;
    goto LABEL_5;
  }
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = v3[8];
    a3[1] = v3[9];
    a3[2] = v3[10];
    int v4 = v3 + 11;
LABEL_5:
    uint64_t result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcMaskCompFirstPass::GetProgram(HgcMaskCompFirstPass *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003cf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    output.color0 = select(float4(r0.yyyy), float4(r0.zzzz), float4(r0.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=88751bc3:e39b93c7:7fe374e9:1b84dc55\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000394\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    output.color0 = select(r0.yyyy, r0.zzzz, r0.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6e7ee701:27f67b24:d1febe3f:d1b5bf22\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002cb\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.z,-r0.y,$c0.x;\n"
           "CMP r0.z,-$p1,r0,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "CMP $o0,r0.x,r0.z,r0.y;\n"
           "END\n"
           "##MD5=20fb8b16:dccc0196:ae71c795:1cad3d67\n"
           "##SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.z = -r0.y + c0.x;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    gl_FragColor = vec4(r0.x < 0.00000 ? r0.z : r0.y, r0.x < 0.00000 ? r0.z : r0.y, r0.x < 0.00000 ? r0.z : r"
           "0.y, r0.x < 0.00000 ? r0.z : r0.y);\n"
           "}\n"
           "//MD5=c2b59dea:d57cf6b5:dcb56bb1:afc40db5\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskCompFirstPass::InitProgramDescriptor(HgcMaskCompFirstPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompFirstPass_hgc_visible", "//Metal1.0     \n//LEN=0000000272\n[[ visible ]] FragmentOut HgcMaskCompFirstPass_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.z = -r0.y + c0.x;\n"
    "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    output.color0 = select(r0.yyyy, r0.zzzz, r0.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskCompFirstPass");
}

void sub_1B7D674A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D675A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D675E4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D675DCLL);
}

void *HgcMaskCompFirstPass::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompFirstPass [hgc1]");
}

uint64_t HgcMaskCompFirstPass::BindTexture(HgcMaskCompFirstPass *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompFirstPass::Bind(HgcMaskCompFirstPass *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskCompFirstPass::RenderTile(HgcMaskCompFirstPass *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v53) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 51);
          float32x4_t v12 = *(float32x4_t *)(v11 + 16);
          float32x4_t v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          float32x4_t v17 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          float32x4_t v18 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL));
          float32x4_t v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          float32x4_t v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          float32x4_t v21 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          int32x4_t v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v25 = (int32x4_t)vmulq_lane_f32(v21, *(float32x2_t *)v12.f32, 1);
          float32x4_t v27 = *(float32x4_t *)(v11 + 32);
          float32x4_t v26 = *(float32x4_t *)(v11 + 48);
          int8x16_t v28 = *(int8x16_t *)(v11 + 64);
          float32x4_t v29 = *(float32x4_t *)(v11 + 80);
          float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v22, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v22))));
          float32x4_t v31 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v23, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v23))));
          float32x4_t v32 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v24))));
          float32x4_t v33 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v25, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v25))));
          int8x16_t v34 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v12.f32[0]));
          int8x16_t v35 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v12.f32[0]));
          int8x16_t v36 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v12.f32[0]));
          int8x16_t v37 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v12.f32[0]));
          int8x16_t v38 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v34, 0xCuLL));
          int8x16_t v39 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v35, 0xCuLL));
          int8x16_t v40 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v36, 0xCuLL));
          int8x16_t v41 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v37, 0xCuLL));
          int8x16_t v42 = v34;
          v42.i32[2] = v38.i32[2];
          int8x16_t v43 = v35;
          v43.i32[2] = v39.i32[2];
          int8x16_t v44 = v36;
          v44.i32[2] = v40.i32[2];
          int8x16_t v45 = v37;
          v45.i32[2] = v41.i32[2];
          int8x16_t v46 = (int8x16_t)vcgtq_f32(v12, v27);
          v34.i64[1] = vbslq_s8(v46, v38, vextq_s8(*(int8x16_t *)&v12, v42, 0xCuLL)).i64[1];
          v35.i64[1] = vbslq_s8(v46, v39, vextq_s8(*(int8x16_t *)&v12, v43, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v46, v40, vextq_s8(*(int8x16_t *)&v12, v44, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v46, v41, vextq_s8(*(int8x16_t *)&v12, v45, 0xCuLL)).i64[1];
          int8x16_t v47 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), v26);
          int32x4_t v48 = (int32x4_t)vbslq_s8(v28, v47, v34);
          int32x4_t v49 = (int32x4_t)vbslq_s8(v28, v47, v35);
          int32x4_t v50 = (int32x4_t)vbslq_s8(v28, v47, v36);
          int32x4_t v51 = (int32x4_t)vbslq_s8(v28, v47, v37);
          int8x16_t v52 = (int8x16_t *)(v5 + v10);
          v52[-2] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 0)), (int8x16_t)vdupq_laneq_s32(v48, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1));
          v52[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 0)), (int8x16_t)vdupq_laneq_s32(v49, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 1));
          int8x16_t *v52 = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 0)), (int8x16_t)vdupq_laneq_s32(v50, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 1));
          v52[1] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0)), (int8x16_t)vdupq_laneq_s32(v51, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v53) = -v9;
      }
      if ((int)v53 < v4)
      {
        uint64_t v53 = v53;
        do
        {
          uint64_t v54 = *((void *)this + 51);
          float32x4_t v55 = *(float32x4_t *)(v54 + 16);
          float32x4_t v56 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v53), *(float32x4_t *)v54);
          float32x4_t v57 = vaddq_f32(v56, (float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL));
          int32x4_t v58 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL)), *(float32x2_t *)v55.f32, 1);
          float32x4_t v59 = *(float32x4_t *)(v54 + 32);
          float32x4_t v60 = *(float32x4_t *)(v54 + 48);
          int8x16_t v61 = *(int8x16_t *)(v54 + 64);
          float32x4_t v62 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v58, (int8x16_t)vaddq_f32(v59, vmulq_f32(v60, (float32x4_t)vrev64q_s32(v58))));
          int8x16_t v63 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v62), vmulq_n_f32(v62, v55.f32[0]));
          int8x16_t v64 = (int8x16_t)vsubq_f32(v60, (float32x4_t)vextq_s8(v63, v63, 0xCuLL));
          v65.i64[0] = v63.i64[0];
          v65.i64[1] = v64.i64[1];
          v63.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v55, v59), v64, vextq_s8(v63, v65, 0xCuLL)).i64[1];
          int32x4_t v66 = (int32x4_t)vbslq_s8(v61, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), v60), v63);
          *(int8x16_t *)(v5 + 16 * v53++) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v54 + 80), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 0)), (int8x16_t)vdupq_laneq_s32(v66, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 1));
        }
        while (v53 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompFirstPass::GetDOD(HgcMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskCompFirstPass::GetROI(HgcMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskCompFirstPass::HgcMaskCompFirstPass(HgcMaskCompFirstPass *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1172310;
  operator new();
}

void sub_1B7D67BB4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompFirstPass::~HgcMaskCompFirstPass(HGNode *this)
{
  *(void *)this = &unk_1F1172310;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskCompFirstPass::~HgcMaskCompFirstPass(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompFirstPass::SetParameter(HgcMaskCompFirstPass *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompFirstPass::GetParameter(HgcMaskCompFirstPass *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcMaskCompSubtract::GetProgram(HgcMaskCompSubtract *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004bc\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.w = -r0.y + c0.x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.z = select(r0.y, r0.w, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = r0.wwww*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=803d36d6:745a31c5:7bf8f860:9746c0ec\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000482\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.w = -r0.y + c0.x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.z = select(r0.y, r0.w, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = r0.wwww*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c0e416c5:a8d708f0:cb142b5b:fd6a2dcc\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000338\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.w,-r0.y,$c0.x;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "CMP r0.z,-$p1,r0.w,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "MUL r1,r0.w,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=9f37110d:6551b5d6:98450f13:eade1e0c\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.w = -r0.y + c0.x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.w : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = r0.wwww*r1;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=35c39cd9:ce16825b:8c591300:4449c307\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompSubtract::InitProgramDescriptor(HgcMaskCompSubtract *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompSubtract_hgc_visible", "//Metal1.0     \n//LEN=00000002e4\n[[ visible ]] FragmentOut HgcMaskCompSubtract_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.w = -r0.y + c0.x;\n"
    "    r1 = color1;\n"
    "    r0.z = select(r0.y, r0.w, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = r0.wwww*r1;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskCompSubtract");
}

void sub_1B7D67E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D67F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D67FD0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D67FC8);
}

void *HgcMaskCompSubtract::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompSubtract [hgc1]");
}

uint64_t HgcMaskCompSubtract::BindTexture(HgcMaskCompSubtract *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompSubtract::Bind(HgcMaskCompSubtract *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskCompSubtract::RenderTile(HgcMaskCompSubtract *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 6);
    uint64_t v10 = 16 * *((int *)a2 + 26);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v47) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          uint64_t v13 = *((void *)this + 51);
          float32x4_t v14 = *(float32x4_t *)(v13 + 16);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          float32x4_t v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          float32x4_t v18 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          float32x4_t v19 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          float32x4_t v20 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          int32x4_t v21 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          float32x4_t v24 = *(float32x4_t *)(v13 + 32);
          float32x4_t v25 = *(float32x4_t *)(v13 + 48);
          int8x16_t v26 = *(int8x16_t *)(v13 + 64);
          int8x16_t v27 = *(int8x16_t *)(v13 + 80);
          float32x4_t v28 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v21, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v21))));
          float32x4_t v29 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v22, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v22))));
          float32x4_t v30 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v23, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v23))));
          v28.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), vmulq_n_f32(v28, v14.f32[0])).u64[0];
          v29.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), vmulq_n_f32(v29, v14.f32[0])).u64[0];
          v30.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v14.f32[0])).u64[0];
          int64x2_t v31 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v28.i64[0], 0));
          int64x2_t v32 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v29.i64[0], 0));
          int64x2_t v33 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v30.i64[0], 0));
          v34.i64[0] = v28.i64[0];
          v34.i64[1] = v31.i64[1];
          v35.i64[0] = v29.i64[0];
          v36.i64[0] = v30.i64[0];
          v35.i64[1] = v32.i64[1];
          v36.i64[1] = v33.i64[1];
          v28.i64[1] = vdupq_laneq_s64(v31, 1).u64[0];
          v29.i64[1] = vdupq_laneq_s64(v32, 1).u64[0];
          v30.i64[1] = vdupq_laneq_s64(v33, 1).u64[0];
          int8x16_t v37 = (int8x16_t)vcgtq_f32(v14, v25);
          int8x16_t v38 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v25);
          float32x4_t v39 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v28), vextq_s8(v34, v34, 0xCuLL)), v34));
          float32x4_t v40 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v29), vextq_s8(v35, v35, 0xCuLL)), v35));
          float32x4_t v41 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v30), vextq_s8(v36, v36, 0xCuLL)), v36));
          int8x16_t v42 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *(float32x4_t *)(v13 + 96));
          int8x16_t v43 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v39), (int8x16_t)vdupq_laneq_s32((int32x4_t)v39, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 32), v39, 3));
          int8x16_t v44 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v40), (int8x16_t)vdupq_laneq_s32((int32x4_t)v40, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 16), v40, 3));
          int8x16_t v45 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v41), (int8x16_t)vdupq_laneq_s32((int32x4_t)v41, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12), v41, 3));
          int8x16_t v46 = (int8x16_t *)(v5 + v12);
          v46[-2] = v43;
          v46[-1] = v44;
          int8x16_t *v46 = v45;
          v11 -= 3;
          v12 += 48;
        }
        while (v4 + v11 > 2);
        LODWORD(v47) = -v11;
      }
      if ((int)v47 < v4)
      {
        uint64_t v47 = v47;
        do
        {
          uint64_t v48 = *((void *)this + 51);
          float32x4_t v49 = *(float32x4_t *)(v48 + 16);
          float32x4_t v50 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v47), *(float32x4_t *)v48);
          float32x4_t v51 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL));
          int32x4_t v52 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), *(float32x2_t *)v49.f32, 1);
          float32x4_t v53 = *(float32x4_t *)(v48 + 32);
          float32x4_t v54 = *(float32x4_t *)(v48 + 48);
          int8x16_t v55 = *(int8x16_t *)(v48 + 64);
          float32x4_t v56 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v52, (int8x16_t)vaddq_f32(v53, vmulq_f32(v54, (float32x4_t)vrev64q_s32(v52))));
          v56.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v56), vmulq_n_f32(v56, v49.f32[0])).u64[0];
          int64x2_t v57 = (int64x2_t)vsubq_f32(v54, (float32x4_t)vdupq_lane_s64(v56.i64[0], 0));
          v58.i64[0] = v56.i64[0];
          v58.i64[1] = v57.i64[1];
          v56.i64[1] = vdupq_laneq_s64(v57, 1).u64[0];
          float32x4_t v59 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), v54), vbslq_s8(*(int8x16_t *)(v48 + 80), vbslq_s8((int8x16_t)vcgtq_f32(v49, v54), (int8x16_t)vrev64q_s32((int32x4_t)v56), vextq_s8(v58, v58, 0xCuLL)), v58));
          *(int8x16_t *)(v5 + 16 * v47) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 3), *(float32x4_t *)(v48 + 96)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v53, v59), (int8x16_t)vdupq_laneq_s32((int32x4_t)v59, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + 16 * v47), v59, 3));
          ++v47;
        }
        while (v47 < v4);
      }
      ++v3;
      v8 += v7;
      v5 += v9;
      v6 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompSubtract::GetDOD(HgcMaskCompSubtract *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskCompSubtract::GetROI(HgcMaskCompSubtract *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskCompSubtract::HgcMaskCompSubtract(HgcMaskCompSubtract *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1172578;
  operator new();
}

void sub_1B7D6862C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompSubtract::~HgcMaskCompSubtract(HGNode *this)
{
  *(void *)this = &unk_1F1172578;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40AC4F46D1);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskCompSubtract::~HgcMaskCompSubtract(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompSubtract::SetParameter(HgcMaskCompSubtract *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompSubtract::GetParameter(HgcMaskCompSubtract *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcWrapMirror::GetProgram(HgcWrapMirror *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  int v5 = (*(uint64_t (**)(HgcWrapMirror *, HGRenderer *))(*(void *)this + 312))(this, a2);
  if (Target <= 0x6041F) {
    int v6 = 394016;
  }
  else {
    int v6 = 394304;
  }
  if (Target < 0x60600 && v5 == 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = Target;
  }
  if (v8 == 396048)
  {
    int v9 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20);
    uint64_t v10 = "//Metal1.0     \n"
          "//LEN=00000007f8\n"
          "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
          "    const constant float4* hg_Params [[ buffer(0) ]], \n"
          "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
          "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    float4 r0, r1, r2;\n"
          "    FragmentOut output;\n"
          "\n"
          "    r0 = frag._texCoord0.yyyy*hg_Params[2];\n"
          "    r0 = frag._texCoord0.xxxx*hg_Params[1] + r0;\n"
          "    r0 = frag._texCoord0.zzzz*hg_Params[3] + r0;\n"
          "    r1 = r0 + hg_Params[4];\n"
          "    r0.x = float(r0.w < -hg_Params[4].w);\n"
          "    r0.z = float(c0.z < r1.w);\n"
          "    r0.y = r0.z;\n"
          "    r0.xy = float2(-r0.xy >= c0.zz);\n"
          "    r0.xz = fmin(r0.xx, r0.yz);\n"
          "    r0.w = fmin(r1.w, c0.x);\n"
          "    r2.x = fmax(r1.w, -c0.x);\n"
          "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
          "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
          "    r0.xyz = r1.xyz/r0.xxx;\n"
          "    r2.xy = hg_Params[0].zw + hg_Params[0].zw;\n"
          "    r2.zw = r0.xy - hg_Params[0].xy;\n"
          "    r0.xy = r2.zw/r2.xy;\n"
          "    r0.xy = floor(r0.xy);\n"
          "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
          "    r0.xy = r0.xy - hg_Params[0].zw;\n"
          "    r0.xy = hg_Params[0].zw - fabs(r0.xy);\n"
          "    r0.xy = r0.xy + hg_Params[0].xy;\n"
          "    r1.xyz = r0.yyy*hg_Params[6].xyz;\n"
          "    r1.xyz = r0.xxx*hg_Params[5].xyz + r1.xyz;\n"
          "    r0.xyz = r0.zzz*hg_Params[7].xyz + r1.xyz;\n"
          "    r0.w = float(r0.z < -hg_Params[8].w);\n"
          "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
          "    r2.y = float(c0.z < r0.z);\n"
          "    r2.x = r2.y;\n"
          "    r2.z = fmin(r0.z, c0.x);\n"
          "    r0.w = c0.y - r0.w;\n"
          "    r2.y = fmin(r0.w, r2.y);\n"
          "    r2.x = float(-r2.x >= c0.z);\n"
          "    r0.z = fmax(r0.z, -c0.x);\n"
          "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
          "    r0.w = fmin(r0.w, r2.x);\n"
          "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
          "    r0.xy = r0.xy/r0.zz;\n"
          "    r0.xy = r0.xy + hg_Params[9].xy;\n"
          "    r0.xy = r0.xy*hg_Params[9].zw;\n"
          "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
          "    return output;\n"
          "}\n"
          "//MD5=ccf4b309:ab9896f3:8a2769eb:f7dd6df8\n"
          "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    int v11 = "//Metal1.0     \n"
          "//LEN=0000000896\n"
          "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
          "    const constant float4* hg_Params [[ buffer(0) ]], \n"
          "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
          "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    const half4 c0 = half4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    half4 r0;\n"
          "    float4 s0, s1, s2;\n"
          "    FragmentOut output;\n"
          "\n"
          "    s0 = frag._texCoord0.yyyy*hg_Params[2];\n"
          "    s0 = frag._texCoord0.xxxx*hg_Params[1] + s0;\n"
          "    s0 = frag._texCoord0.zzzz*hg_Params[3] + s0;\n"
          "    s1 = s0 + hg_Params[4];\n"
          "    s0.x = float(s0.w < -hg_Params[4].w);\n"
          "    s0.z = float(float(c0.z) < s1.w);\n"
          "    s0.y = s0.z;\n"
          "    s0.xy = float2(-s0.xy >= float2(c0.zz));\n"
          "    s0.xz = fmin(s0.xx, s0.yz);\n"
          "    s0.w = fmin(s1.w, float(c0.x));\n"
          "    s2.x = fmax(s1.w, -float(c0.x));\n"
          "    s0.z = select(s0.w, s2.x, -s0.z < 0.00000h);\n"
          "    s0.x = select(s0.z, -float(c0.x), -s0.x < 0.00000h);\n"
          "    s0.xyz = s1.xyz/s0.xxx;\n"
          "    r0.xy = half2(hg_Params[0].zw) + half2(hg_Params[0].zw);\n"
          "    r0.zw = half2(s0.xy) - half2(hg_Params[0].xy);\n"
          "    s0.xy = float2(r0.zw)/float2(r0.xy);\n"
          "    s0.xy = floor(s0.xy);\n"
          "    s0.xy = -float2(r0.xy)*s0.xy + float2(r0.zw);\n"
          "    s0.xy = s0.xy - hg_Params[0].zw;\n"
          "    s0.xy = hg_Params[0].zw - fabs(s0.xy);\n"
          "    s0.xy = s0.xy + hg_Params[0].xy;\n"
          "    s2.xyz = s0.yyy*hg_Params[6].xyz;\n"
          "    s2.xyz = s0.xxx*hg_Params[5].xyz + s2.xyz;\n"
          "    s0.xyz = s0.zzz*hg_Params[7].xyz + s2.xyz;\n"
          "    s0.w = float(s0.z < -hg_Params[8].w);\n"
          "    s0.xyz = s0.xyz + hg_Params[8].xyw;\n"
          "    s1.y = float(float(c0.z) < s0.z);\n"
          "    s1.x = s1.y;\n"
          "    s1.z = fmin(s0.z, float(c0.x));\n"
          "    s0.w = float(c0.y) - s0.w;\n"
          "    s1.y = fmin(s0.w, s1.y);\n"
          "    s1.x = float(-s1.x >= float(c0.z));\n"
          "    s0.z = fmax(s0.z, -float(c0.x));\n"
          "    s0.z = select(s1.z, s0.z, -s1.y < 0.00000h);\n"
          "    s0.w = fmin(s0.w, s1.x);\n"
          "    s0.z = select(s0.z, -float(c0.x), -s0.w < 0.00000h);\n"
          "    s0.xy = s0.xy/s0.zz;\n"
          "    s0.xy = s0.xy + hg_Params[9].xy;\n"
          "    s0.xy = s0.xy*hg_Params[9].zw;\n"
          "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
          "    return output;\n"
          "}\n"
          "//MD5=ecb9e5b5:e61bd49c:a9616b8b:a3f4b05b\n"
          "//SIG=00400000:00000000:00000000:00000001:0001:000a:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    BOOL v12 = v9 == 27;
    goto LABEL_14;
  }
  if (v8 > 0x6060F)
  {
    int v13 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46);
    uint64_t v10 = "!!ARBfp1.0     \n"
          "##LEN=000000066f\n"
          "OPTION NV_fragment_program2;\n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "SUB r0.xy,$p0.zwzw,|r0|;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r1.xyz,r0.y,$p6;\n"
          "MAD r1.xyz,r0.x,$p5,r1;\n"
          "MAD r0.xyz,r0.z,$p7,r1;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r2.y,$c0.z,r0.z;\n"
          "MOV r2.x,r2.y;\n"
          "MIN r2.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r2.y,r0.w,r2;\n"
          "SGE r2.x,-r2,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r2.y,r0,r2;\n"
          "MIN r0.w,r0,r2.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r1.xy,r0.z;\n"
          "MUL r0.xy,r1,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "##0\n"
          "TEX $o0,r0,texture[0],RECT;\n"
          "END\n"
          "##MD5=2f3708bd:fca4e30f:d3f199f3:8794b567\n"
          "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    int v11 = "//GLfs2.0      \n"
          "//LEN=0000000937\n"
          "#ifndef GL_ES\n"
          "#define lowp\n"
          "#define mediump\n"
          "#define highp\n"
          "#endif\n"
          "#define defaultp mediump\n"
          "uniform defaultp sampler2D hg_Texture0;\n"
          "uniform highp vec4 hg_ProgramLocal0;\n"
          "uniform highp vec4 hg_ProgramLocal1;\n"
          "uniform highp vec4 hg_ProgramLocal2;\n"
          "uniform highp vec4 hg_ProgramLocal3;\n"
          "uniform highp vec4 hg_ProgramLocal4;\n"
          "uniform highp vec4 hg_ProgramLocal5;\n"
          "uniform highp vec4 hg_ProgramLocal6;\n"
          "uniform highp vec4 hg_ProgramLocal7;\n"
          "uniform highp vec4 hg_ProgramLocal8;\n"
          "uniform highp vec4 hg_ProgramLocal9;\n"
          "varying highp vec4 hg_TexCoord0;\n"
          "void main()\n"
          "{\n"
          "    const highp vec4 c0 = vec4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    highp vec4 r0, r1, r2;\n"
          "\n"
          "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal2;\n"
          "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal1 + r0;\n"
          "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal3 + r0;\n"
          "    r1 = r0 + hg_ProgramLocal4;\n"
          "    r0.x = float(r0.w < -hg_ProgramLocal4.w);\n"
          "    r0.z = float(c0.z < r1.w);\n"
          "    r0.y = r0.z;\n"
          "    r0.xy = vec2(greaterThanEqual(-r0.xy, c0.zz));\n"
          "    r0.xz = min(r0.xx, r0.yz);\n"
          "    r0.w = min(r1.w, c0.x);\n"
          "    r2.x = max(r1.w, -c0.x);\n"
          "    r0.z = -r0.z < 0.00000 ? r2.x : r0.w;\n"
          "    r0.x = -r0.x < 0.00000 ? -c0.x : r0.z;\n"
          "    r0.xyz = r1.xyz/r0.xxx;\n"
          "    r2.xy = hg_ProgramLocal0.zw + hg_ProgramLocal0.zw;\n"
          "    r2.zw = r0.xy - hg_ProgramLocal0.xy;\n"
          "    r0.xy = r2.zw/r2.xy;\n"
          "    r0.xy = floor(r0.xy);\n"
          "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
          "    r0.xy = r0.xy - hg_ProgramLocal0.zw;\n"
          "    r0.xy = hg_ProgramLocal0.zw - abs(r0.xy);\n"
          "    r0.xy = r0.xy + hg_ProgramLocal0.xy;\n"
          "    r1.xyz = r0.yyy*hg_ProgramLocal6.xyz;\n"
          "    r1.xyz = r0.xxx*hg_ProgramLocal5.xyz + r1.xyz;\n"
          "    r0.xyz = r0.zzz*hg_ProgramLocal7.xyz + r1.xyz;\n"
          "    r0.w = float(r0.z < -hg_ProgramLocal8.w);\n"
          "    r0.xyz = r0.xyz + hg_ProgramLocal8.xyw;\n"
          "    r2.y = float(c0.z < r0.z);\n"
          "    r2.x = r2.y;\n"
          "    r2.z = min(r0.z, c0.x);\n"
          "    r0.w = c0.y - r0.w;\n"
          "    r2.y = min(r0.w, r2.y);\n"
          "    r2.x = float(-r2.x >= c0.z);\n"
          "    r0.z = max(r0.z, -c0.x);\n"
          "    r0.z = -r2.y < 0.00000 ? r0.z : r2.z;\n"
          "    r0.w = min(r0.w, r2.x);\n"
          "    r0.z = -r0.w < 0.00000 ? -c0.x : r0.z;\n"
          "    r0.xy = r0.xy/r0.zz;\n"
          "    r0.xy = r0.xy + hg_ProgramLocal9.xy;\n"
          "    r0.xy = r0.xy*hg_ProgramLocal9.zw;\n"
          "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
          "}\n"
          "//MD5=eb01f0ce:600d3436:a6d6d921:a09c07d3\n"
          "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    BOOL v12 = v13 == 0;
LABEL_14:
    if (v12) {
      return v11;
    }
    else {
      return v10;
    }
  }
  if (v8 <= 0x6040F) {
    float32x4_t v15 = "!!ARBfp1.0     \n"
  }
          "##LEN=00000007d7\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
          "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2,r3,r4;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "ABS r1.xy,r0;\n"
          "SUB r0.xy,$p0.zwzw,r1;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r2.xyz,r0.y,$p6;\n"
          "MAD r2.xyz,r0.x,$p5,r2;\n"
          "MAD r0.xyz,r0.z,$p7,r2;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r1.y,$c0.z,r0.z;\n"
          "MOV r1.x,r1.y;\n"
          "MIN r1.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r1.y,r0.w,r1;\n"
          "SGE r1.x,-r1,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r1.y,r0,r1;\n"
          "MIN r0.w,r0,r1.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r2.xy,r0.z;\n"
          "MUL r0.xy,r2,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "SUB r0.xy,r0,$c0.w;\n"
          "FLR r1.xy,r0;\n"
          "FRC r0.xy,r0;\n"
          "ADD r2.xy,r1,$c0.w;\n"
          "##0\n"
          "TEX r2,r2,texture[0],RECT;\n"
          "ADD r3.xy,r1,$c1;\n"
          "##0\n"
          "TEX r3,r3,texture[0],RECT;\n"
          "ADD r4.xy,r1,$c1.yxzw;\n"
          "##0\n"
          "TEX r4,r4,texture[0],RECT;\n"
          "ADD r1.xy,r1,$c1.x;\n"
          "##0\n"
          "TEX r1,r1,texture[0],RECT;\n"
          "LRP r3,r0.x,r3,r2;\n"
          "LRP r4,r0.x,r1,r4;\n"
          "LRP $o0,r0.y,r4,r3;\n"
          "END\n"
          "##MD5=014b9130:75159e74:5d2309d7:86d53cb4\n"
          "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  else {
    float32x4_t v15 = "!!ARBfp1.0     \n"
  }
          "##LEN=00000007cb\n"
          "OPTION NV_fragment_program; \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
          "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2,r3,r4;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "SUB r0.xy,$p0.zwzw,|r0|;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r1.xyz,r0.y,$p6;\n"
          "MAD r1.xyz,r0.x,$p5,r1;\n"
          "MAD r0.xyz,r0.z,$p7,r1;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r2.y,$c0.z,r0.z;\n"
          "MOV r2.x,r2.y;\n"
          "MIN r2.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r2.y,r0.w,r2;\n"
          "SGE r2.x,-r2,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r2.y,r0,r2;\n"
          "MIN r0.w,r0,r2.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r1.xy,r0.z;\n"
          "MUL r0.xy,r1,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "SUB r0.xy,r0,$c0.w;\n"
          "FLR r2.xy,r0;\n"
          "FRC r0.xy,r0;\n"
          "ADD r1.xy,r2,$c0.w;\n"
          "##0\n"
          "TEX r1,r1,texture[0],RECT;\n"
          "ADD r3.xy,r2,$c1;\n"
          "##0\n"
          "TEX r3,r3,texture[0],RECT;\n"
          "ADD r4.xy,r2,$c1.yxzw;\n"
          "##0\n"
          "TEX r4,r4,texture[0],RECT;\n"
          "ADD r2.xy,r2,$c1.x;\n"
          "##0\n"
          "TEX r2,r2,texture[0],RECT;\n"
          "LRP r3,r0.x,r3,r1;\n"
          "LRP r4,r0.x,r2,r4;\n"
          "LRP $o0,r0.y,r4,r3;\n"
          "END\n"
          "##MD5=6da8ab86:a1ca2202:162ccb6a:a964f698\n"
          "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v8 - 394016 >= 0xF0) {
    float32x4_t v16 = v15;
  }
  else {
    float32x4_t v16 = "!!ARBfp1.0     \n"
  }
          "##LEN=000000067b\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "ABS r1.xy,r0;\n"
          "SUB r0.xy,$p0.zwzw,r1;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r2.xyz,r0.y,$p6;\n"
          "MAD r2.xyz,r0.x,$p5,r2;\n"
          "MAD r0.xyz,r0.z,$p7,r2;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r1.y,$c0.z,r0.z;\n"
          "MOV r1.x,r1.y;\n"
          "MIN r1.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r1.y,r0.w,r1;\n"
          "SGE r1.x,-r1,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r1.y,r0,r1;\n"
          "MIN r0.w,r0,r1.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r2.xy,r0.z;\n"
          "MUL r0.xy,r2,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "##0\n"
          "TEX $o0,r0,texture[0],RECT;\n"
          "END\n"
          "##MD5=5f410862:0f55a39c:a6ecc8e6:8e9c4288\n"
          "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v8 <= 0x6043F) {
    return v16;
  }
  else {
    return "!!ARBfp1.0     \n"
  }
           "##LEN=000000066f\n"
           "OPTION NV_fragment_program2;\n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $p2=program.local[2];\n"
           "PARAM $p3=program.local[3];\n"
           "PARAM $p4=program.local[4];\n"
           "PARAM $p5=program.local[5];\n"
           "PARAM $p6=program.local[6];\n"
           "PARAM $p7=program.local[7];\n"
           "PARAM $p8=program.local[8];\n"
           "PARAM $p9=program.local[9];\n"
           "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "MUL r0,$f0.y,$p2;\n"
           "MAD r0,$f0.x,$p1,r0;\n"
           "MAD r0,$f0.z,$p3,r0;\n"
           "ADD r1,r0,$p4;\n"
           "SLT r0.x,r0.w,-$p4.w;\n"
           "SLT r0.z,$c0,r1.w;\n"
           "MOV r0.y,r0.z;\n"
           "SGE r0.xy,-r0,$c0.z;\n"
           "MIN r0.xz,r0.x,r0.yyzw;\n"
           "MIN r0.w,r1,$c0.x;\n"
           "MAX r2.x,r1.w,-$c0;\n"
           "CMP r0.z,-r0,r2.x,r0.w;\n"
           "CMP r0.x,-r0,-$c0,r0.z;\n"
           "RCP r0.xyz,r0.x;\n"
           "MUL r0.xyz,r0,r1;\n"
           "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
           "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
           "RCP r1.x,r2.x;\n"
           "RCP r1.y,r2.y;\n"
           "MUL r0.xy,r1,r2.zwzw;\n"
           "FLR r0.xy,r0;\n"
           "MAD r0.xy,-r2,r0,r2.zwzw;\n"
           "SUB r0.xy,r0,$p0.zwzw;\n"
           "SUB r0.xy,$p0.zwzw,|r0|;\n"
           "ADD r0.xy,r0,$p0;\n"
           "MUL r1.xyz,r0.y,$p6;\n"
           "MAD r1.xyz,r0.x,$p5,r1;\n"
           "MAD r0.xyz,r0.z,$p7,r1;\n"
           "SLT r0.w,r0.z,-$p8;\n"
           "ADD r0.xyz,r0,$p8.xyww;\n"
           "SLT r2.y,$c0.z,r0.z;\n"
           "MOV r2.x,r2.y;\n"
           "MIN r2.z,r0,$c0.x;\n"
           "SUB r0.w,$c0.y,r0;\n"
           "MIN r2.y,r0.w,r2;\n"
           "SGE r2.x,-r2,$c0.z;\n"
           "MAX r0.z,r0,-$c0.x;\n"
           "CMP r0.z,-r2.y,r0,r2;\n"
           "MIN r0.w,r0,r2.x;\n"
           "CMP r0.z,-r0.w,-$c0.x,r0;\n"
           "RCP r1.xy,r0.z;\n"
           "MUL r0.xy,r1,r0;\n"
           "ADD r0.xy,r0,$p9;\n"
           "##0\n"
           "TEX $o0,r0,texture[0],RECT;\n"
           "END\n"
           "##MD5=2f3708bd:fca4e30f:d3f199f3:8794b567\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
}

void HgcWrapMirror::InitProgramDescriptor(HgcWrapMirror *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWrapMirror_hgc_visible", "//Metal1.0     \n//LEN=000000072c\n[[ visible ]] FragmentOut HgcWrapMirror_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[2];\n"
    "    r0 = texCoord0.xxxx*hg_Params[1] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[3] + r0;\n"
    "    r1 = r0 + hg_Params[4];\n"
    "    r0.x = float(r0.w < -hg_Params[4].w);\n"
    "    r0.z = float(c0.z < r1.w);\n"
    "    r0.y = r0.z;\n"
    "    r0.xy = float2(-r0.xy >= c0.zz);\n"
    "    r0.xz = fmin(r0.xx, r0.yz);\n"
    "    r0.w = fmin(r1.w, c0.x);\n"
    "    r2.x = fmax(r1.w, -c0.x);\n"
    "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
    "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
    "    r0.xyz = r1.xyz/r0.xxx;\n"
    "    r2.xy = hg_Params[0].zw + hg_Params[0].zw;\n"
    "    r2.zw = r0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r2.zw/r2.xy;\n"
    "    r0.xy = floor(r0.xy);\n"
    "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
    "    r0.xy = r0.xy - hg_Params[0].zw;\n"
    "    r0.xy = hg_Params[0].zw - fabs(r0.xy);\n"
    "    r0.xy = r0.xy + hg_Params[0].xy;\n"
    "    r1.xyz = r0.yyy*hg_Params[6].xyz;\n"
    "    r1.xyz = r0.xxx*hg_Params[5].xyz + r1.xyz;\n"
    "    r0.xyz = r0.zzz*hg_Params[7].xyz + r1.xyz;\n"
    "    r0.w = float(r0.z < -hg_Params[8].w);\n"
    "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
    "    r2.y = float(c0.z < r0.z);\n"
    "    r2.x = r2.y;\n"
    "    r2.z = fmin(r0.z, c0.x);\n"
    "    r0.w = c0.y - r0.w;\n"
    "    r2.y = fmin(r0.w, r2.y);\n"
    "    r2.x = float(-r2.x >= c0.z);\n"
    "    r0.z = fmax(r0.z, -c0.x);\n"
    "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
    "    r0.w = fmin(r0.w, r2.x);\n"
    "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.xy = r0.xy + hg_Params[9].xy;\n"
    "    r0.xy = r0.xy*hg_Params[9].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcWrapMirror");
}

void sub_1B7D68970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75D80;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int64x2_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D68AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D68B40()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D68B38);
}

void *HgcWrapMirror::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWrapMirror [hgc1]");
}

uint64_t HgcWrapMirror::BindTexture(HgcWrapMirror *this, HGRenderer **a2, int a3)
{
  unsigned int Target = HGRenderer::GetTarget(a2[18], 393216);
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if (Target > 0x6043F || Target - 394016 <= 0xEF)
  {
    (*((void (**)(HGRenderer **, void, void))*a2 + 9))(a2, 0, 0);
    uint64_t v8 = (*(uint64_t (**)(HgcWrapMirror *, void))(*(void *)this + 312))(this, 0);
    (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v8, v8);
  }
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2[18] + 128))(a2[18], 46))
  {
    v11.n128_u32[0] = 1.0;
    v12.n128_u32[0] = 1.0;
  }
  else
  {
    v11.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v12.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v9.n128_f32[0] = (float)*((int *)a2 + 60);
  v10.n128_f32[0] = (float)*((int *)a2 + 61);
  (*((void (**)(HGRenderer **, uint64_t, __n128, __n128, __n128, __n128))*a2 + 17))(a2, 9, v9, v10, v11, v12);
  return 0;
}

uint64_t HgcWrapMirror::Bind(HgcWrapMirror *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcWrapMirror::RenderTile(HgcWrapMirror *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcWrapMirror *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v15 = 0;
        float32x4_t v17 = v14;
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v10;
        float32x4_t v17 = v14;
        do
        {
          float32x4_t v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v19 = *((void *)this + 51);
          float32x4_t v20 = *(float32x4_t *)(v19 + 32);
          float32x4_t v21 = *(float32x4_t *)(v19 + 48);
          float32x4_t v22 = vmulq_lane_f32(v20, *(float32x2_t *)v17.f32, 1);
          float32x4_t v23 = vmulq_lane_f32(v20, *(float32x2_t *)v18.f32, 1);
          int8x16_t v24 = *(int8x16_t *)v19;
          float32x4_t v25 = *(float32x4_t *)(v19 + 16);
          float32x4_t v26 = vaddq_f32(vaddq_f32(v22, vmulq_n_f32(v25, v17.f32[0])), vmulq_laneq_f32(v21, v17, 2));
          float32x4_t v27 = vaddq_f32(vaddq_f32(v23, vmulq_n_f32(v25, v18.f32[0])), vmulq_laneq_f32(v21, v18, 2));
          float32x4_t v28 = *(float32x4_t *)(v19 + 64);
          float32x4_t v29 = *(float32x4_t *)(v19 + 80);
          int8x16_t v30 = (int8x16_t)vaddq_f32(v28, v26);
          int8x16_t v31 = (int8x16_t)vaddq_f32(v28, v27);
          float32x4_t v32 = vnegq_f32(v28);
          int8x16_t v33 = (int8x16_t)vcgtq_f32(v32, v26);
          int8x16_t v34 = (int8x16_t)vcgtq_f32(v32, v27);
          int8x16_t v36 = *(int8x16_t *)(v19 + 128);
          int8x16_t v35 = *(int8x16_t *)(v19 + 144);
          int8x16_t v37 = vandq_s8(v35, v33);
          int8x16_t v38 = vandq_s8(v35, v34);
          int8x16_t v39 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), (float32x4_t)v35);
          int8x16_t v40 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), (float32x4_t)v35);
          *(int8x8_t *)v37.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(int8x8_t *)v37.i8, 4uLL);
          int8x8_t v41 = (int8x8_t)vextq_s8(v39, v39, 8uLL).u64[0];
          int8x16_t v43 = *(int8x16_t *)(v19 + 160);
          int8x16_t v42 = *(int8x16_t *)(v19 + 176);
          int8x8_t v44 = (int8x8_t)vextq_s8(v43, v43, 8uLL).u64[0];
          v37.u64[1] = (unint64_t)vand_s8(v44, v41);
          *(int8x8_t *)v38.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), *(int8x8_t *)v38.i8, 4uLL);
          v38.u64[1] = (unint64_t)vand_s8(v44, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
          int8x16_t v45 = vbslq_s8(v42, vextq_s8(v37, v37, 4uLL), v37);
          int8x16_t v46 = vbslq_s8(v42, vextq_s8(v38, v38, 4uLL), v38);
          v40.i64[0] = vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v45), (float32x4_t)v43)).u64[0];
          v47.i64[0] = vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v46), (float32x4_t)v43)).u64[0];
          v40.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
          int8x16_t v49 = *(int8x16_t *)(v19 + 192);
          int8x16_t v48 = *(int8x16_t *)(v19 + 208);
          *(int8x8_t *)v50.f32 = vqtbl1_s8(v40, *(int8x8_t *)v49.i8);
          int8x8_t v51 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
          *(int8x8_t *)&v50.u32[2] = vqtbl1_s8(v40, v51);
          v47.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)v46.i8 = vqtbl1_s8(v47, *(int8x8_t *)v49.i8);
          v46.u64[1] = (unint64_t)vqtbl1_s8(v47, v51);
          int8x16_t v52 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v47.i64[0], 0), (float32x4_t)v46);
          float32x4_t v53 = (float32x4_t)vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v30, (float32x4_t)v43), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v40.i64[0], 0), v50));
          float32x4_t v54 = (float32x4_t)vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v31, (float32x4_t)v43), v52);
          int8x16_t v56 = *(int8x16_t *)(v19 + 224);
          int8x16_t v55 = *(int8x16_t *)(v19 + 240);
          v53.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v53, *(float32x4_t *)&v56), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v30, v30, 0xCuLL), *(float32x4_t *)&v56), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v53)).i64[1];
          v54.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v54, *(float32x4_t *)&v56), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v31, v31, 0xCuLL), *(float32x4_t *)&v56), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v54)).i64[1];
          int8x16_t v57 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v53, 2);
          int8x16_t v58 = (int8x16_t)vcgtq_f32(v53, (float32x4_t)v43);
          v43.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v54, (float32x4_t)v43), v56, (int8x16_t)vdupq_laneq_s32((int32x4_t)v54, 2)).u64[0];
          float32x4_t v59 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v58, v56, v57), 0);
          float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0);
          float32x4_t v61 = *(float32x4_t *)(v19 + 256);
          int8x16_t v62 = *(int8x16_t *)(v19 + 272);
          float32x4_t v63 = vminq_f32(vmaxq_f32(vrecpeq_f32(v59), (float32x4_t)v55), v61);
          float32x4_t v64 = vminq_f32(vmaxq_f32(vrecpeq_f32(v60), (float32x4_t)v55), v61);
          float32x4_t v65 = vminq_f32(vmaxq_f32(vmulq_f32(v63, vrecpsq_f32(v59, v63)), (float32x4_t)v55), v61);
          float32x4_t v66 = vminq_f32(vmaxq_f32(vmulq_f32(v64, vrecpsq_f32(v60, v64)), (float32x4_t)v55), v61);
          float32x4_t v67 = vmulq_f32((float32x4_t)v30, vmulq_f32(v65, vrecpsq_f32(v59, v65)));
          float32x4_t v68 = vmulq_f32((float32x4_t)v31, vmulq_f32(v66, vrecpsq_f32(v60, v66)));
          float32x4_t v69 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v67, *(float32x4_t *)v19).i64[0], 0);
          float32x4_t v70 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v68, *(float32x4_t *)v19).i64[0], 0);
          float32x4_t v71 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
          v69.i64[0] = vaddq_f32(*(float32x4_t *)&v24, *(float32x4_t *)&v24).i64[1];
          float32x4_t v72 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v70, 1);
          v70.i64[0] = v69.i64[0];
          float32x4_t v73 = vminq_f32(vmaxq_f32(vrecpeq_f32(v69), (float32x4_t)v55), v61);
          float32x4_t v74 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), (float32x4_t)v55), v61);
          float32x4_t v75 = vminq_f32(vmaxq_f32(vmulq_f32(v73, vrecpsq_f32(v69, v73)), (float32x4_t)v55), v61);
          float32x4_t v76 = vminq_f32(vmaxq_f32(vmulq_f32(v74, vrecpsq_f32(v70, v74)), (float32x4_t)v55), v61);
          v75.i64[0] = vmulq_f32(v71, vmulq_f32(v75, vrecpsq_f32(v69, v75))).u64[0];
          v76.i64[0] = vmulq_f32(v72, vmulq_f32(v76, vrecpsq_f32(v70, v76))).u64[0];
          v75.i64[1] = v67.i64[1];
          v76.i64[1] = v68.i64[1];
          float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          float32x4_t v78 = vsubq_f32(v77, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v77, v75), v35, (int8x16_t)0));
          float32x4_t v79 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
          float32x4_t v80 = vsubq_f32(v71, vmulq_f32(v69, v78));
          float32x4_t v81 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
          v80.i64[0] = vsubq_f32(v80, v81).u64[0];
          v70.i64[0] = vsubq_f32(vsubq_f32(v72, vmulq_f32(v70, vsubq_f32(v79, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v79, v76), v35, (int8x16_t)0)))), v81).u64[0];
          v80.i64[1] = v67.i64[1];
          v70.i64[1] = v68.i64[1];
          v80.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v81, vabsq_f32(v80))).u64[0];
          v24.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v81, vabsq_f32(v70))).u64[0];
          float32x4_t v82 = *(float32x4_t *)(v19 + 96);
          float32x4_t v83 = *(float32x4_t *)(v19 + 112);
          float32x4_t v84 = vaddq_f32(vmulq_lane_f32(v82, *(float32x2_t *)v24.i8, 1), vmulq_n_f32(v29, *(float *)v24.i32));
          int8x16_t v85 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v83, v67, 2), vaddq_f32(vmulq_lane_f32(v82, *(float32x2_t *)v80.f32, 1), vmulq_n_f32(v29, v80.f32[0])));
          int8x16_t v86 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v83, v68, 2), v84);
          float32x4_t v87 = vnegq_f32((float32x4_t)v36);
          int8x16_t v88 = vandq_s8(v55, (int8x16_t)vcgtq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v85)));
          int8x16_t v89 = vandq_s8(v55, (int8x16_t)vcgtq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v86)));
          *(int8x8_t *)v80.f32 = vqtbl1_s8(v36, *(int8x8_t *)v62.i8);
          *(int8x8_t *)&v80.u32[2] = vqtbl1_s8(v36, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
          int8x16_t v90 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v48, v88, v85));
          int8x16_t v91 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v48, v89, v86));
          int8x16_t v92 = vbslq_s8(v48, v88, v90);
          int8x16_t v93 = vbslq_s8(v48, v89, v91);
          int8x16_t v94 = vandq_s8(v35, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v92, v92, 4uLL), (float32x4_t)v56));
          int8x16_t v95 = vandq_s8(v35, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v93, v93, 4uLL), (float32x4_t)v56));
          int8x16_t v96 = *(int8x16_t *)(v19 + 288);
          float32x4_t v97 = *(float32x4_t *)(v19 + 304);
          v94.i64[0] = vbslq_s8(v96, (int8x16_t)vrev64q_s32((int32x4_t)v94), v94).u64[0];
          v95.i64[0] = vbslq_s8(v96, (int8x16_t)vrev64q_s32((int32x4_t)v95), v95).u64[0];
          v94.i64[1] = vminq_f32(*(float32x4_t *)&v92, v97).i64[1];
          v95.i64[1] = vminq_f32(*(float32x4_t *)&v93, v97).i64[1];
          int8x16_t v98 = vbslq_s8(v48, (int8x16_t)vsubq_f32(v97, (float32x4_t)v92), v90);
          int8x16_t v99 = vbslq_s8(v48, (int8x16_t)vsubq_f32(v97, (float32x4_t)v93), v91);
          int8x16_t v100 = vbslq_s8(v42, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v98, v98, 8uLL), (float32x4_t)v94), v94);
          int8x16_t v101 = vbslq_s8(v42, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v99, v99, 8uLL), (float32x4_t)v95), v95);
          int8x16_t v102 = vbslq_s8(v96, vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v100), v97)), v100);
          int8x16_t v103 = vbslq_s8(v96, vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v101), v97)), v101);
          int8x16_t v104 = *(int8x16_t *)(v19 + 320);
          int8x16_t v105 = *(int8x16_t *)(v19 + 336);
          int8x16_t v106 = vbslq_s8(v105, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v102, v102, 0xCuLL), (float32x4_t)v56), vbslq_s8(v105, (int8x16_t)vmaxq_f32((float32x4_t)v98, (float32x4_t)v104), v98), v102), v98);
          int8x16_t v107 = vbslq_s8(v105, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v103, v103, 0xCuLL), (float32x4_t)v56), vbslq_s8(v105, (int8x16_t)vmaxq_f32((float32x4_t)v99, (float32x4_t)v104), v99), v103), v99);
          int8x16_t v108 = vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v102, v102, 4uLL)), v106);
          int8x16_t v109 = vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v103, v103, 4uLL)), v107);
          int32x4_t v110 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v108), (float32x4_t)v56), v104, v108);
          int32x4_t v111 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v109), (float32x4_t)v56), v104, v109);
          v108.i64[1] = v110.i64[1];
          v109.i64[1] = v111.i64[1];
          float32x4_t v112 = (float32x4_t)vdupq_laneq_s32(v110, 2);
          float32x4_t v113 = (float32x4_t)vdupq_laneq_s32(v111, 2);
          float32x4_t v114 = vminq_f32(vmaxq_f32(vrecpeq_f32(v112), (float32x4_t)v55), v61);
          float32x4_t v115 = vminq_f32(vmaxq_f32(vrecpeq_f32(v113), (float32x4_t)v55), v61);
          float32x4_t v116 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpsq_f32(v112, v114)), (float32x4_t)v55), v61);
          float32x4_t v117 = vminq_f32(vmaxq_f32(vmulq_f32(v115, vrecpsq_f32(v113, v115)), (float32x4_t)v55), v61);
          float32x4_t v118 = vmulq_f32(v117, vrecpsq_f32(v113, v117));
          float32x4_t v119 = vmulq_f32(vmulq_f32(v116, vrecpsq_f32(v112, v116)), (float32x4_t)v108);
          float32x4_t v120 = vmulq_f32(v118, (float32x4_t)v109);
          uint64_t v121 = *((int *)a2 + 22);
          float32x4_t v122 = vsubq_f32(v119, v9);
          uint64_t v123 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v124 = vaddq_s32(vcvtq_s32_f32(v122), vcltzq_f32(v122));
            float32x2_t v125 = (float32x2_t)vsubq_f32(v122, vcvtq_f32_s32(v124)).u64[0];
            int8x16_t v126 = (float32x4_t *)(v123 + 16 * (v124.i32[0] + v124.i32[1] * (int)v121));
            float32x4_t v127 = vaddq_f32(*v126, vmulq_n_f32(vsubq_f32(v126[1], *v126), v125.f32[0]));
            float32x4_t v128 = vaddq_f32(v127, vmulq_lane_f32(vsubq_f32(vaddq_f32(v126[v121], vmulq_n_f32(vsubq_f32(v126[(int)v121 + 1], v126[v121]), v125.f32[0])), v127), v125, 1));
            float32x4_t v129 = vsubq_f32(v120, v9);
            int32x4_t v130 = vaddq_s32(vcvtq_s32_f32(v129), vcltzq_f32(v129));
            v129.i64[0] = vsubq_f32(v129, vcvtq_f32_s32(v130)).u64[0];
            float32x4_t v131 = (float32x4_t *)(v123 + 16 * (v130.i32[0] + v130.i32[1] * (int)v121));
            float32x4_t v132 = vaddq_f32(*v131, vmulq_n_f32(vsubq_f32(v131[1], *v131), v129.f32[0]));
            float32x4_t v133 = vaddq_f32(v132, vmulq_lane_f32(vsubq_f32(vaddq_f32(v131[v121], vmulq_n_f32(vsubq_f32(v131[(int)v121 + 1], v131[v121]), v129.f32[0])), v132), *(float32x2_t *)v129.f32, 1));
          }
          else
          {
            float32x4_t v134 = vaddq_f32(v122, v13);
            int32x4_t v135 = vcvtq_s32_f32(v134);
            v134.i64[0] = vaddq_s32(v135, vcgtq_f32(vcvtq_f32_s32(v135), v134)).u64[0];
            float32x4_t v128 = *(float32x4_t *)(v123 + 16 * (v134.i32[0] + v134.i32[1] * (int)v121));
            float32x4_t v136 = vaddq_f32(vsubq_f32(v120, v9), v13);
            int32x4_t v137 = vcvtq_s32_f32(v136);
            v136.i64[0] = vaddq_s32(v137, vcgtq_f32(vcvtq_f32_s32(v137), v136)).u64[0];
            float32x4_t v133 = *(float32x4_t *)(v123 + 16 * (v136.i32[0] + v136.i32[1] * (int)v121));
          }
          float32x4_t v138 = (float32x4_t *)(v11 + 16 * v15);
          *float32x4_t v138 = v128;
          v138[1] = v133;
          float32x4_t v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B7E736B0);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        uint64_t v15 = v15;
      }
      if ((int)v15 < v10)
      {
        uint64_t v139 = *((void *)this + 51);
        int8x16_t v140 = *(int8x16_t *)v139;
        float32x4_t v141 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v139 + 32), *(float32x2_t *)v17.f32, 1), vmulq_n_f32(*(float32x4_t *)(v139 + 16), v17.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v139 + 48), v17, 2));
        float32x4_t v142 = *(float32x4_t *)(v139 + 64);
        int8x16_t v143 = (int8x16_t)vaddq_f32(v142, v141);
        int8x16_t v144 = (int8x16_t)vcgtq_f32(vnegq_f32(v142), v141);
        int8x16_t v146 = *(int8x16_t *)(v139 + 128);
        int8x16_t v145 = *(int8x16_t *)(v139 + 144);
        int8x16_t v147 = vandq_s8(v145, v144);
        int8x16_t v148 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v143), (float32x4_t)v145);
        *(int8x8_t *)v147.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), *(int8x8_t *)v147.i8, 4uLL);
        int8x16_t v149 = *(int8x16_t *)(v139 + 160);
        int8x16_t v150 = *(int8x16_t *)(v139 + 176);
        v147.u64[1] = (unint64_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL));
        int8x16_t v151 = vbslq_s8(v150, vextq_s8(v147, v147, 4uLL), v147);
        v148.i64[0] = vandq_s8(v145, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v151), (float32x4_t)v149)).u64[0];
        v148.i64[1] = vextq_s8(v151, v151, 8uLL).u64[0];
        int8x16_t v152 = *(int8x16_t *)(v139 + 192);
        int8x16_t v153 = *(int8x16_t *)(v139 + 208);
        *(int8x8_t *)v154.f32 = vqtbl1_s8(v148, *(int8x8_t *)v152.i8);
        *(int8x8_t *)&v154.u32[2] = vqtbl1_s8(v148, (int8x8_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
        float32x4_t v155 = (float32x4_t)vbslq_s8(v153, (int8x16_t)vminq_f32((float32x4_t)v143, (float32x4_t)v149), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v148.i64[0], 0), v154));
        int8x16_t v156 = *(int8x16_t *)(v139 + 224);
        int8x16_t v157 = *(int8x16_t *)(v139 + 240);
        int32x4_t v158 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v155, (float32x4_t)v156), (int8x16_t)vdupq_lane_s64(vmaxq_f32((float32x4_t)vextq_s8(v143, v143, 0xCuLL), (float32x4_t)v156).i64[0], 0), (int8x16_t)vrev64q_s32((int32x4_t)v155));
        v155.i64[1] = v158.i64[1];
        float32x4_t v159 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v155, (float32x4_t)v149), v156, (int8x16_t)vdupq_laneq_s32(v158, 2)), 0);
        float32x4_t v160 = *(float32x4_t *)(v139 + 256);
        int8x16_t v161 = *(int8x16_t *)(v139 + 272);
        float32x4_t v162 = vminq_f32(vmaxq_f32(vrecpeq_f32(v159), (float32x4_t)v157), v160);
        float32x4_t v163 = vminq_f32(vmaxq_f32(vmulq_f32(v162, vrecpsq_f32(v159, v162)), (float32x4_t)v157), v160);
        float32x4_t v164 = vmulq_f32((float32x4_t)v143, vmulq_f32(v163, vrecpsq_f32(v159, v163)));
        float32x4_t v165 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v164, *(float32x4_t *)v139).i64[0], 0);
        float32x4_t v166 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v165, 1);
        v165.i64[0] = vaddq_f32(*(float32x4_t *)&v140, *(float32x4_t *)&v140).i64[1];
        float32x4_t v167 = vminq_f32(vmaxq_f32(vrecpeq_f32(v165), (float32x4_t)v157), v160);
        float32x4_t v168 = vminq_f32(vmaxq_f32(vmulq_f32(v167, vrecpsq_f32(v165, v167)), (float32x4_t)v157), v160);
        v168.i64[0] = vmulq_f32(v166, vmulq_f32(v168, vrecpsq_f32(v165, v168))).u64[0];
        v168.i64[1] = v164.i64[1];
        float32x4_t v169 = vcvtq_f32_s32(vcvtq_s32_f32(v168));
        float32x4_t v170 = vsubq_f32(v166, vmulq_f32(v165, vsubq_f32(v169, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v169, v168), v145, (int8x16_t)0))));
        float32x4_t v171 = (float32x4_t)vextq_s8(v140, v140, 8uLL);
        v170.i64[0] = vsubq_f32(v170, v171).u64[0];
        v170.i64[1] = v164.i64[1];
        v140.i64[0] = vaddq_f32(*(float32x4_t *)v139, vsubq_f32(v171, vabsq_f32(v170))).u64[0];
        int8x16_t v172 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v139 + 112), v164, 2), vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v139 + 96), *(float32x2_t *)v140.i8, 1), vmulq_n_f32(*(float32x4_t *)(v139 + 80), *(float *)v140.i32)));
        int8x16_t v173 = vandq_s8(v157, (int8x16_t)vcgtq_f32(vnegq_f32((float32x4_t)v146), (float32x4_t)vrev64q_s32((int32x4_t)v172)));
        *(int8x8_t *)v174.f32 = vqtbl1_s8(v146, *(int8x8_t *)v161.i8);
        *(int8x8_t *)&v174.u32[2] = vqtbl1_s8(v146, (int8x8_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL));
        int8x16_t v175 = (int8x16_t)vaddq_f32(v174, (float32x4_t)vbslq_s8(v153, v173, v172));
        int8x16_t v176 = vbslq_s8(v153, v173, v175);
        int8x16_t v177 = vandq_s8(v145, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v176, v176, 4uLL), (float32x4_t)v156));
        int8x16_t v178 = *(int8x16_t *)(v139 + 288);
        float32x4_t v179 = *(float32x4_t *)(v139 + 304);
        v177.i64[0] = vbslq_s8(v178, (int8x16_t)vrev64q_s32((int32x4_t)v177), v177).u64[0];
        v177.i64[1] = vminq_f32(*(float32x4_t *)&v176, v179).i64[1];
        int8x16_t v180 = vbslq_s8(v153, (int8x16_t)vsubq_f32(v179, (float32x4_t)v176), v175);
        int8x16_t v181 = vbslq_s8(v150, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v180, v180, 8uLL), (float32x4_t)v177), v177);
        int8x16_t v182 = vbslq_s8(v178, vandq_s8(v145, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v181), v179)), v181);
        int8x16_t v183 = *(int8x16_t *)(v139 + 320);
        int8x16_t v184 = vbslq_s8(*(int8x16_t *)(v139 + 336), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v182, v182, 0xCuLL), (float32x4_t)v156), vbslq_s8(*(int8x16_t *)(v139 + 336), (int8x16_t)vmaxq_f32((float32x4_t)v180, (float32x4_t)v183), v180), v182), v180);
        int8x16_t v185 = vbslq_s8(v153, (int8x16_t)vminq_f32((float32x4_t)v184, (float32x4_t)vextq_s8(v182, v182, 4uLL)), v184);
        int32x4_t v186 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v185), (float32x4_t)v156), v183, v185);
        v185.i64[1] = v186.i64[1];
        float32x4_t v187 = (float32x4_t)vdupq_laneq_s32(v186, 2);
        float32x4_t v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(v187), (float32x4_t)v157), v160);
        float32x4_t v189 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(v187, v188)), (float32x4_t)v157), v160);
        uint64_t v190 = *((int *)a2 + 22);
        float32x4_t v191 = vsubq_f32(vmulq_f32(vmulq_f32(v189, vrecpsq_f32(v187, v189)), (float32x4_t)v185), v9);
        uint64_t v192 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v193 = vaddq_s32(vcvtq_s32_f32(v191), vcltzq_f32(v191));
          float32x2_t v194 = (float32x2_t)vsubq_f32(v191, vcvtq_f32_s32(v193)).u64[0];
          float32x4_t v195 = (float32x4_t *)(v192 + 16 * (v193.i32[0] + v193.i32[1] * (int)v190));
          float32x4_t v196 = vaddq_f32(*v195, vmulq_n_f32(vsubq_f32(v195[1], *v195), v194.f32[0]));
          float32x4_t v197 = vaddq_f32(v196, vmulq_lane_f32(vsubq_f32(vaddq_f32(v195[v190], vmulq_n_f32(vsubq_f32(v195[(int)v190 + 1], v195[v190]), v194.f32[0])), v196), v194, 1));
        }
        else
        {
          float32x4_t v198 = vaddq_f32(v191, v13);
          int32x4_t v199 = vcvtq_s32_f32(v198);
          v198.i64[0] = vaddq_s32(v199, vcgtq_f32(vcvtq_f32_s32(v199), v198)).u64[0];
          float32x4_t v197 = *(float32x4_t *)(v192 + 16 * (v198.i32[0] + v198.i32[1] * (int)v190));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v197;
      }
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736C0);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWrapMirror::GetDOD(HgcWrapMirror *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcWrapMirror *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcWrapMirror::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWrapMirror::HgcWrapMirror(HgcWrapMirror *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11727E0;
  operator new();
}

void sub_1B7D69BCC(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWrapMirror::~HgcWrapMirror(HGNode *this)
{
  *(void *)this = &unk_1F11727E0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C402BC884A0);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcWrapMirror::~HgcWrapMirror(this);

  HGObject::operator delete(v1);
}

uint64_t HgcWrapMirror::SetParameter(HgcWrapMirror *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      _OWORD v7[2] = a5;
      v7[3] = a6;
      goto LABEL_48;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      uint64_t v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      void v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      double v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_48;
    case 5:
      float32x4_t v13 = (__n128 *)*((void *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
      goto LABEL_48;
    case 6:
      float32x4_t v14 = (__n128 *)*((void *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[23] = a3;
      goto LABEL_48;
    case 7:
      uint64_t v15 = (__n128 *)*((void *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a4
        && v15[7].n128_f32[2] == a6
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u32[0] = a3.n128_u32[0];
      v15[7].n128_f32[1] = a4;
      v15[7].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[24] = a3;
      goto LABEL_48;
    case 8:
      int v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcWrapMirror::GetParameter(HgcWrapMirror *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      uint64_t v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      uint64_t v4 = v8 + 19;
      goto LABEL_11;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      uint64_t v4 = v9 + 91;
      goto LABEL_11;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[92];
      a3[1] = v10[93];
      a3[2] = v10[94];
      uint64_t v4 = v10 + 95;
      goto LABEL_11;
    case 7:
      uint64_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[96];
      a3[1] = v11[97];
      a3[2] = v11[98];
      uint64_t v4 = v11 + 99;
      goto LABEL_11;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      uint64_t v4 = v12 + 35;
LABEL_11:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcMaskCompAdd::GetProgram(HgcMaskCompAdd *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004d8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = clamp(r0.yyyy + r1, 0.00000h, 1.00000h);\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3ab579a5:d8ae106a:3b4e524b:c00505ff\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000049e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = clamp(r0.yyyy + r1, 0.00000f, 1.00000f);\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1f8911c0:defa5e8f:ebc9af92:bfe95fcd\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000339\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "SUB r1.x,$c0,r0.y;\n"
           "CMP r0.z,-$p1,r1.x,r0.y;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "ADD_SAT r1,r0.y,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=f7c3babe:3a8f0f0f:f86f3e6e:5ace67e6\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000507\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r1.x = c0.x - r0.y;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r1.x : r0.y;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = clamp(r0.yyyy + r1, vec4(0.00000), vec4(1.00000));\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=b620467d:5656b608:acfc40ad:524a997e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompAdd::InitProgramDescriptor(HgcMaskCompAdd *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompAdd_hgc_visible", "//Metal1.0     \n//LEN=00000002fb\n[[ visible ]] FragmentOut HgcMaskCompAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r1.x = c0.x - r0.y;\n"
    "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
    "    r1 = color1;\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = clamp(r0.yyyy + r1, 0.00000f, 1.00000f);\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskCompAdd");
}

void sub_1B7D6A230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6A3B8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6A3B0);
}

void *HgcMaskCompAdd::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompAdd [hgc1]");
}

uint64_t HgcMaskCompAdd::BindTexture(HgcMaskCompAdd *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    uint64_t v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    uint64_t v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompAdd::Bind(HgcMaskCompAdd *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskCompAdd::RenderTile(HgcMaskCompAdd *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 26);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v56) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          uint64_t v13 = *((void *)this + 51);
          float32x4_t v14 = *(float32x4_t *)(v13 + 16);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          float32x4_t v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          float32x4_t v18 = vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)v13);
          float32x4_t v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          float32x4_t v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          float32x4_t v21 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          float32x4_t v22 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          float32x4_t v23 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          int32x4_t v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v25 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v26 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), *(float32x2_t *)v14.f32, 1);
          int32x4_t v27 = (int32x4_t)vmulq_lane_f32(v23, *(float32x2_t *)v14.f32, 1);
          float32x4_t v28 = *(float32x4_t *)(v13 + 32);
          float32x4_t v29 = *(float32x4_t *)(v13 + 48);
          int8x16_t v30 = *(int8x16_t *)(v13 + 64);
          float32x4_t v31 = *(float32x4_t *)(v13 + 80);
          float32x4_t v32 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v24))));
          float32x4_t v33 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v25, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v25))));
          float32x4_t v34 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v26))));
          float32x4_t v35 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v27, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v27))));
          float32x4_t v36 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v14.f32[0]));
          float32x4_t v37 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v14.f32[0]));
          float32x4_t v38 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v34), vmulq_n_f32(v34, v14.f32[0]));
          float32x4_t v39 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v35), vmulq_n_f32(v35, v14.f32[0]));
          int8x16_t v40 = (int8x16_t)vcgtq_f32(v14, v29);
          v36.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v36)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v36, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v37)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v37, 0xCuLL)).i64[1];
          v38.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v38)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v38, 0xCuLL)).i64[1];
          v39.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v39)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v39, 0xCuLL)).i64[1];
          int8x16_t v41 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v29);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v36);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v37);
          float32x4_t v44 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v38);
          float32x4_t v45 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v39);
          float32x4_t v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1);
          float32x4_t v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1);
          float32x4_t v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1);
          float32x4_t v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1);
          int8x16_t v50 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v31);
          int8x16_t v51 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v42), (int8x16_t)vdupq_laneq_s32((int32x4_t)v42, 2), (int8x16_t)v46), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 - 32), v46), v31), v28));
          int8x16_t v52 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v43), (int8x16_t)vdupq_laneq_s32((int32x4_t)v43, 2), (int8x16_t)v47), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 - 16), v47), v31), v28));
          int8x16_t v53 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v44), (int8x16_t)vdupq_laneq_s32((int32x4_t)v44, 2), (int8x16_t)v48), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12), v48), v31), v28));
          int8x16_t v54 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v45), (int8x16_t)vdupq_laneq_s32((int32x4_t)v45, 2), (int8x16_t)v49), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 + 16), v49), v31), v28));
          int8x16_t v55 = (int8x16_t *)(v5 + v12);
          v55[-2] = v51;
          v55[-1] = v52;
          *int8x16_t v55 = v53;
          v55[1] = v54;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v56) = -v11;
      }
      if ((int)v56 < v4)
      {
        uint64_t v56 = v56;
        do
        {
          uint64_t v57 = *((void *)this + 51);
          float32x4_t v58 = *(float32x4_t *)(v57 + 16);
          float32x4_t v59 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v56), *(float32x4_t *)v57);
          float32x4_t v60 = vaddq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL));
          int32x4_t v61 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL)), *(float32x2_t *)v58.f32, 1);
          float32x4_t v62 = *(float32x4_t *)(v57 + 32);
          float32x4_t v63 = *(float32x4_t *)(v57 + 48);
          int8x16_t v64 = *(int8x16_t *)(v57 + 64);
          float32x4_t v65 = (float32x4_t)vbslq_s8(v64, (int8x16_t)v61, (int8x16_t)vaddq_f32(v62, vmulq_f32(v63, (float32x4_t)vrev64q_s32(v61))));
          float32x4_t v66 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v65), vmulq_n_f32(v65, v58.f32[0]));
          v66.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v58, v63), (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v62, v66)), 0), vextq_s8(*(int8x16_t *)&v66, *(int8x16_t *)&v66, 0xCuLL)).i64[1];
          float32x4_t v67 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), v63), (int8x16_t)v66);
          float32x4_t v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1);
          *(int8x16_t *)(v5 + 16 * v56) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), *(float32x4_t *)(v57 + 80)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v57 + 80), v67), (int8x16_t)vdupq_laneq_s32((int32x4_t)v67, 2), (int8x16_t)v68), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + 16 * v56), v68), *(float32x4_t *)(v57 + 80)), v62));
          ++v56;
        }
        while (v56 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompAdd::GetDOD(HgcMaskCompAdd *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskCompAdd::GetROI(HgcMaskCompAdd *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskCompAdd::HgcMaskCompAdd(HgcMaskCompAdd *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1172A48;
  operator new();
}

void sub_1B7D6AA54(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompAdd::~HgcMaskCompAdd(HGNode *this)
{
  *(void *)this = &unk_1F1172A48;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskCompAdd::~HgcMaskCompAdd(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompAdd::SetParameter(HgcMaskCompAdd *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompAdd::GetParameter(HgcMaskCompAdd *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcWrapRepeat::GetProgram(HgcWrapRepeat *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  int v5 = (*(uint64_t (**)(HgcWrapRepeat *, HGRenderer *))(*(void *)this + 312))(this, a2);
  if (Target < 0x60600 && v5 == 0) {
    unsigned int v7 = 394016;
  }
  else {
    unsigned int v7 = Target;
  }
  if (v7 == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007e1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0.yyyy*hg_Params[2];\n"
             "    s0 = frag._texCoord0.xxxx*hg_Params[1] + s0;\n"
             "    s0 = frag._texCoord0.zzzz*hg_Params[3] + s0;\n"
             "    s1 = s0 + hg_Params[4];\n"
             "    s0.x = float(s0.w < -hg_Params[4].w);\n"
             "    s0.z = float(float(c0.z) < s1.w);\n"
             "    s0.y = s0.z;\n"
             "    s0.xy = float2(-s0.xy >= float2(c0.zz));\n"
             "    s0.xz = fmin(s0.xx, s0.yz);\n"
             "    s0.w = fmin(s1.w, float(c0.x));\n"
             "    s2.x = fmax(s1.w, -float(c0.x));\n"
             "    s0.z = select(s0.w, s2.x, -s0.z < 0.00000h);\n"
             "    s0.x = select(s0.z, -float(c0.x), -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s2.zw = s1.xy - hg_Params[0].xy;\n"
             "    s2.xy = s2.zw/hg_Params[0].zw;\n"
             "    s2.xy = floor(s2.xy);\n"
             "    s2.xy = -s2.xy*hg_Params[0].zw + s2.zw;\n"
             "    s1.xy = s2.xy + hg_Params[0].xy;\n"
             "    s0.xyz = s1.yyy*hg_Params[6].xyz;\n"
             "    s0.xyz = s1.xxx*hg_Params[5].xyz + s0.xyz;\n"
             "    s0.xyz = s1.zzz*hg_Params[7].xyz + s0.xyz;\n"
             "    s0.w = float(s0.z < -hg_Params[8].w);\n"
             "    s0.xyz = s0.xyz + hg_Params[8].xyw;\n"
             "    s2.y = float(float(c0.z) < s0.z);\n"
             "    s2.x = s2.y;\n"
             "    s2.z = fmin(s0.z, float(c0.x));\n"
             "    s0.w = float(c0.y) - s0.w;\n"
             "    s2.y = fmin(s0.w, s2.y);\n"
             "    s2.x = float(-s2.x >= float(c0.z));\n"
             "    s0.z = fmax(s0.z, -float(c0.x));\n"
             "    s0.z = select(s2.z, s0.z, -s2.y < 0.00000h);\n"
             "    s0.w = fmin(s0.w, s2.x);\n"
             "    s0.z = select(s0.z, -float(c0.x), -s0.w < 0.00000h);\n"
             "    s0.xy = s0.xy/s0.zz;\n"
             "    s0.xy = s0.xy + hg_Params[9].xy;\n"
             "    s0.xy = s0.xy*hg_Params[9].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f4d3e09c:894a0356:6332b3b1:c1c79ce4\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000078d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0.yyyy*hg_Params[2];\n"
             "    r0 = frag._texCoord0.xxxx*hg_Params[1] + r0;\n"
             "    r0 = frag._texCoord0.zzzz*hg_Params[3] + r0;\n"
             "    r1 = r0 + hg_Params[4];\n"
             "    r0.x = float(r0.w < -hg_Params[4].w);\n"
             "    r0.z = float(c0.z < r1.w);\n"
             "    r0.y = r0.z;\n"
             "    r0.xy = float2(-r0.xy >= c0.zz);\n"
             "    r0.xz = fmin(r0.xx, r0.yz);\n"
             "    r0.w = fmin(r1.w, c0.x);\n"
             "    r2.x = fmax(r1.w, -c0.x);\n"
             "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
             "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r2.zw = r1.xy - hg_Params[0].xy;\n"
             "    r2.xy = r2.zw/hg_Params[0].zw;\n"
             "    r2.xy = floor(r2.xy);\n"
             "    r2.xy = -r2.xy*hg_Params[0].zw + r2.zw;\n"
             "    r1.xy = r2.xy + hg_Params[0].xy;\n"
             "    r0.xyz = r1.yyy*hg_Params[6].xyz;\n"
             "    r0.xyz = r1.xxx*hg_Params[5].xyz + r0.xyz;\n"
             "    r0.xyz = r1.zzz*hg_Params[7].xyz + r0.xyz;\n"
             "    r0.w = float(r0.z < -hg_Params[8].w);\n"
             "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
             "    r2.y = float(c0.z < r0.z);\n"
             "    r2.x = r2.y;\n"
             "    r2.z = fmin(r0.z, c0.x);\n"
             "    r0.w = c0.y - r0.w;\n"
             "    r2.y = fmin(r0.w, r2.y);\n"
             "    r2.x = float(-r2.x >= c0.z);\n"
             "    r0.z = fmax(r0.z, -c0.x);\n"
             "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
             "    r0.w = fmin(r0.w, r2.x);\n"
             "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.xy = r0.xy + hg_Params[9].xy;\n"
             "    r0.xy = r0.xy*hg_Params[9].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4b4bc9f6:2cf8f900:0e89866a:3192f073\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (v7 <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  {
    if (v7 - 394016 < 0xF0 || v7 > 0x6043F) {
      return "!!ARBfp1.0     \n"
    }
             "##LEN=000000062a\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $p1=program.local[1];\n"
             "PARAM $p2=program.local[2];\n"
             "PARAM $p3=program.local[3];\n"
             "PARAM $p4=program.local[4];\n"
             "PARAM $p5=program.local[5];\n"
             "PARAM $p6=program.local[6];\n"
             "PARAM $p7=program.local[7];\n"
             "PARAM $p8=program.local[8];\n"
             "PARAM $p9=program.local[9];\n"
             "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2;\n"
             "##@\n"
             "MUL r0,$f0.y,$p2;\n"
             "MAD r0,$f0.x,$p1,r0;\n"
             "MAD r0,$f0.z,$p3,r0;\n"
             "ADD r1,r0,$p4;\n"
             "SLT r0.x,r0.w,-$p4.w;\n"
             "SLT r0.z,$c0,r1.w;\n"
             "MOV r0.y,r0.z;\n"
             "SGE r0.xy,-r0,$c0.z;\n"
             "MIN r0.xz,r0.x,r0.yyzw;\n"
             "MIN r0.w,r1,$c0.x;\n"
             "MAX r2.x,r1.w,-$c0;\n"
             "CMP r0.z,-r0,r2.x,r0.w;\n"
             "CMP r0.x,-r0,-$c0,r0.z;\n"
             "RCP r0.xyz,r0.x;\n"
             "MUL r0.xyz,r0,r1;\n"
             "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
             "RCP r1.x,$p0.z;\n"
             "RCP r1.y,$p0.w;\n"
             "MUL r2.xy,r1,r2.zwzw;\n"
             "FLR r2.xy,r2;\n"
             "MAD r2.xy,-r2,$p0.zwzw,r2.zwzw;\n"
             "ADD r0.xy,r2,$p0;\n"
             "MUL r1.xyz,r0.y,$p6;\n"
             "MAD r1.xyz,r0.x,$p5,r1;\n"
             "MAD r1.xyz,r0.z,$p7,r1;\n"
             "SLT r1.w,r1.z,-$p8;\n"
             "ADD r1.xyz,r1,$p8.xyww;\n"
             "SLT r2.y,$c0.z,r1.z;\n"
             "MOV r2.x,r2.y;\n"
             "MIN r2.z,r1,$c0.x;\n"
             "SUB r1.w,$c0.y,r1;\n"
             "MIN r2.y,r1.w,r2;\n"
             "SGE r2.x,-r2,$c0.z;\n"
             "MAX r1.z,r1,-$c0.x;\n"
             "CMP r1.z,-r2.y,r1,r2;\n"
             "MIN r1.w,r1,r2.x;\n"
             "CMP r1.z,-r1.w,-$c0.x,r1;\n"
             "RCP r0.xy,r1.z;\n"
             "MUL r1.xy,r0,r1;\n"
             "ADD r1.xy,r1,$p9;\n"
             "##0\n"
             "TEX $o0,r1,texture[0],RECT;\n"
             "END\n"
             "##MD5=4ac77a33:8849ee9f:6646c2f7:db3a3547\n"
             "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    else {
      return "!!ARBfp1.0     \n"
    }
             "##LEN=0000000786\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $p1=program.local[1];\n"
             "PARAM $p2=program.local[2];\n"
             "PARAM $p3=program.local[3];\n"
             "PARAM $p4=program.local[4];\n"
             "PARAM $p5=program.local[5];\n"
             "PARAM $p6=program.local[6];\n"
             "PARAM $p7=program.local[7];\n"
             "PARAM $p8=program.local[8];\n"
             "PARAM $p9=program.local[9];\n"
             "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
             "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2,r3,r4;\n"
             "##@\n"
             "MUL r0,$f0.y,$p2;\n"
             "MAD r0,$f0.x,$p1,r0;\n"
             "MAD r0,$f0.z,$p3,r0;\n"
             "ADD r1,r0,$p4;\n"
             "SLT r0.x,r0.w,-$p4.w;\n"
             "SLT r0.z,$c0,r1.w;\n"
             "MOV r0.y,r0.z;\n"
             "SGE r0.xy,-r0,$c0.z;\n"
             "MIN r0.xz,r0.x,r0.yyzw;\n"
             "MIN r0.w,r1,$c0.x;\n"
             "MAX r2.x,r1.w,-$c0;\n"
             "CMP r0.z,-r0,r2.x,r0.w;\n"
             "CMP r0.x,-r0,-$c0,r0.z;\n"
             "RCP r0.xyz,r0.x;\n"
             "MUL r0.xyz,r0,r1;\n"
             "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
             "RCP r1.x,$p0.z;\n"
             "RCP r1.y,$p0.w;\n"
             "MUL r2.xy,r1,r2.zwzw;\n"
             "FLR r2.xy,r2;\n"
             "MAD r2.xy,-r2,$p0.zwzw,r2.zwzw;\n"
             "ADD r0.xy,r2,$p0;\n"
             "MUL r1.xyz,r0.y,$p6;\n"
             "MAD r1.xyz,r0.x,$p5,r1;\n"
             "MAD r1.xyz,r0.z,$p7,r1;\n"
             "SLT r1.w,r1.z,-$p8;\n"
             "ADD r1.xyz,r1,$p8.xyww;\n"
             "SLT r2.y,$c0.z,r1.z;\n"
             "MOV r2.x,r2.y;\n"
             "MIN r2.z,r1,$c0.x;\n"
             "SUB r1.w,$c0.y,r1;\n"
             "MIN r2.y,r1.w,r2;\n"
             "SGE r2.x,-r2,$c0.z;\n"
             "MAX r1.z,r1,-$c0.x;\n"
             "CMP r1.z,-r2.y,r1,r2;\n"
             "MIN r1.w,r1,r2.x;\n"
             "CMP r1.z,-r1.w,-$c0.x,r1;\n"
             "RCP r0.xy,r1.z;\n"
             "MUL r1.xy,r0,r1;\n"
             "ADD r1.xy,r1,$p9;\n"
             "SUB r1.xy,r1,$c0.w;\n"
             "FLR r2.xy,r1;\n"
             "FRC r1.xy,r1;\n"
             "ADD r0.xy,r2,$c0.w;\n"
             "##0\n"
             "TEX r0,r0,texture[0],RECT;\n"
             "ADD r3.xy,r2,$c1;\n"
             "##0\n"
             "TEX r3,r3,texture[0],RECT;\n"
             "ADD r4.xy,r2,$c1.yxzw;\n"
             "##0\n"
             "TEX r4,r4,texture[0],RECT;\n"
             "ADD r2.xy,r2,$c1.x;\n"
             "##0\n"
             "TEX r2,r2,texture[0],RECT;\n"
             "LRP r3,r1.x,r3,r0;\n"
             "LRP r4,r1.x,r2,r4;\n"
             "LRP $o0,r1.y,r4,r3;\n"
             "END\n"
             "##MD5=955c87b8:0af1818c:8f0edfbf:937f46f9\n"
             "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008c5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal2;\n"
           "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal1 + r0;\n"
           "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal3 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal4;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal4.w);\n"
           "    r0.z = float(c0.z < r1.w);\n"
           "    r0.y = r0.z;\n"
           "    r0.xy = vec2(greaterThanEqual(-r0.xy, c0.zz));\n"
           "    r0.xz = min(r0.xx, r0.yz);\n"
           "    r0.w = min(r1.w, c0.x);\n"
           "    r2.x = max(r1.w, -c0.x);\n"
           "    r0.z = -r0.z < 0.00000 ? r2.x : r0.w;\n"
           "    r0.x = -r0.x < 0.00000 ? -c0.x : r0.z;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r2.zw = r1.xy - hg_ProgramLocal0.xy;\n"
           "    r2.xy = r2.zw/hg_ProgramLocal0.zw;\n"
           "    r2.xy = floor(r2.xy);\n"
           "    r2.xy = -r2.xy*hg_ProgramLocal0.zw + r2.zw;\n"
           "    r1.xy = r2.xy + hg_ProgramLocal0.xy;\n"
           "    r0.xyz = r1.yyy*hg_ProgramLocal6.xyz;\n"
           "    r0.xyz = r1.xxx*hg_ProgramLocal5.xyz + r0.xyz;\n"
           "    r0.xyz = r1.zzz*hg_ProgramLocal7.xyz + r0.xyz;\n"
           "    r0.w = float(r0.z < -hg_ProgramLocal8.w);\n"
           "    r0.xyz = r0.xyz + hg_ProgramLocal8.xyw;\n"
           "    r2.y = float(c0.z < r0.z);\n"
           "    r2.x = r2.y;\n"
           "    r2.z = min(r0.z, c0.x);\n"
           "    r0.w = c0.y - r0.w;\n"
           "    r2.y = min(r0.w, r2.y);\n"
           "    r2.x = float(-r2.x >= c0.z);\n"
           "    r0.z = max(r0.z, -c0.x);\n"
           "    r0.z = -r2.y < 0.00000 ? r0.z : r2.z;\n"
           "    r0.w = min(r0.w, r2.x);\n"
           "    r0.z = -r0.w < 0.00000 ? -c0.x : r0.z;\n"
           "    r0.xy = r0.xy/r0.zz;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal9.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal9.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=2ba55dea:465081e7:944fffc8:1e72b899\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcWrapRepeat::InitProgramDescriptor(HgcWrapRepeat *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWrapRepeat_hgc_visible", "//Metal1.0     \n//LEN=00000006c1\n[[ visible ]] FragmentOut HgcWrapRepeat_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[2];\n"
    "    r0 = texCoord0.xxxx*hg_Params[1] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[3] + r0;\n"
    "    r1 = r0 + hg_Params[4];\n"
    "    r0.x = float(r0.w < -hg_Params[4].w);\n"
    "    r0.z = float(c0.z < r1.w);\n"
    "    r0.y = r0.z;\n"
    "    r0.xy = float2(-r0.xy >= c0.zz);\n"
    "    r0.xz = fmin(r0.xx, r0.yz);\n"
    "    r0.w = fmin(r1.w, c0.x);\n"
    "    r2.x = fmax(r1.w, -c0.x);\n"
    "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
    "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r2.zw = r1.xy - hg_Params[0].xy;\n"
    "    r2.xy = r2.zw/hg_Params[0].zw;\n"
    "    r2.xy = floor(r2.xy);\n"
    "    r2.xy = -r2.xy*hg_Params[0].zw + r2.zw;\n"
    "    r1.xy = r2.xy + hg_Params[0].xy;\n"
    "    r0.xyz = r1.yyy*hg_Params[6].xyz;\n"
    "    r0.xyz = r1.xxx*hg_Params[5].xyz + r0.xyz;\n"
    "    r0.xyz = r1.zzz*hg_Params[7].xyz + r0.xyz;\n"
    "    r0.w = float(r0.z < -hg_Params[8].w);\n"
    "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
    "    r2.y = float(c0.z < r0.z);\n"
    "    r2.x = r2.y;\n"
    "    r2.z = fmin(r0.z, c0.x);\n"
    "    r0.w = c0.y - r0.w;\n"
    "    r2.y = fmin(r0.w, r2.y);\n"
    "    r2.x = float(-r2.x >= c0.z);\n"
    "    r0.z = fmax(r0.z, -c0.x);\n"
    "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
    "    r0.w = fmin(r0.w, r2.x);\n"
    "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.xy = r0.xy + hg_Params[9].xy;\n"
    "    r0.xy = r0.xy*hg_Params[9].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcWrapRepeat");
}

void sub_1B7D6AD60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75D80;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6AEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6AF30()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6AF28);
}

void *HgcWrapRepeat::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWrapRepeat [hgc1]");
}

uint64_t HgcWrapRepeat::BindTexture(HgcWrapRepeat *this, HGRenderer **a2, int a3)
{
  unsigned int Target = HGRenderer::GetTarget(a2[18], 393216);
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if (Target > 0x6043F || Target - 394016 <= 0xEF)
  {
    (*((void (**)(HGRenderer **, void, void))*a2 + 9))(a2, 0, 0);
    uint64_t v8 = (*(uint64_t (**)(HgcWrapRepeat *, void))(*(void *)this + 312))(this, 0);
    (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v8, v8);
  }
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2[18] + 128))(a2[18], 46))
  {
    v11.n128_u32[0] = 1.0;
    v12.n128_u32[0] = 1.0;
  }
  else
  {
    v11.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v12.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v9.n128_f32[0] = (float)*((int *)a2 + 60);
  v10.n128_f32[0] = (float)*((int *)a2 + 61);
  (*((void (**)(HGRenderer **, uint64_t, __n128, __n128, __n128, __n128))*a2 + 17))(a2, 9, v9, v10, v11, v12);
  return 0;
}

uint64_t HgcWrapRepeat::Bind(HgcWrapRepeat *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcWrapRepeat::RenderTile(HgcWrapRepeat *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcWrapRepeat *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v15 = 0;
        float32x4_t v17 = v14;
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v10;
        float32x4_t v17 = v14;
        do
        {
          float32x4_t v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v19 = *((void *)this + 51);
          float32x4_t v21 = *(float32x4_t *)(v19 + 32);
          float32x4_t v20 = *(float32x4_t *)(v19 + 48);
          float32x4_t v22 = *(float32x4_t *)(v19 + 16);
          float32x4_t v23 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v17.f32, 1), vmulq_n_f32(v22, v17.f32[0])), vmulq_laneq_f32(v20, v17, 2));
          float32x4_t v24 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v18.f32, 1), vmulq_n_f32(v22, v18.f32[0])), vmulq_laneq_f32(v20, v18, 2));
          float32x4_t v25 = *(float32x4_t *)(v19 + 64);
          float32x4_t v26 = *(float32x4_t *)(v19 + 80);
          int8x16_t v27 = (int8x16_t)vaddq_f32(v25, v23);
          int8x16_t v28 = (int8x16_t)vaddq_f32(v25, v24);
          float32x4_t v29 = vnegq_f32(v25);
          int8x16_t v30 = (int8x16_t)vcgtq_f32(v29, v23);
          int8x16_t v31 = (int8x16_t)vcgtq_f32(v29, v24);
          int8x16_t v33 = *(int8x16_t *)(v19 + 128);
          int8x16_t v32 = *(int8x16_t *)(v19 + 144);
          int8x16_t v34 = vandq_s8(v32, v30);
          int8x16_t v35 = vandq_s8(v32, v31);
          int8x16_t v36 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), (float32x4_t)v32);
          int8x16_t v37 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), (float32x4_t)v32);
          *(int8x8_t *)v34.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(int8x8_t *)v34.i8, 4uLL);
          int8x8_t v38 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
          int8x16_t v40 = *(int8x16_t *)(v19 + 160);
          int8x16_t v39 = *(int8x16_t *)(v19 + 176);
          int8x8_t v41 = (int8x8_t)vextq_s8(v40, v40, 8uLL).u64[0];
          v34.u64[1] = (unint64_t)vand_s8(v41, v38);
          *(int8x8_t *)v35.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(int8x8_t *)v35.i8, 4uLL);
          v35.u64[1] = (unint64_t)vand_s8(v41, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
          int8x16_t v42 = vbslq_s8(v39, vextq_s8(v34, v34, 4uLL), v34);
          int8x16_t v43 = vbslq_s8(v39, vextq_s8(v35, v35, 4uLL), v35);
          v37.i64[0] = vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v42), (float32x4_t)v40)).u64[0];
          v44.i64[0] = vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v43), (float32x4_t)v40)).u64[0];
          v37.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
          int8x16_t v46 = *(int8x16_t *)(v19 + 192);
          int8x16_t v45 = *(int8x16_t *)(v19 + 208);
          *(int8x8_t *)v47.f32 = vqtbl1_s8(v37, *(int8x8_t *)v46.i8);
          int8x8_t v48 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)&v47.u32[2] = vqtbl1_s8(v37, v48);
          v44.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
          *(int8x8_t *)v43.i8 = vqtbl1_s8(v44, *(int8x8_t *)v46.i8);
          v43.u64[1] = (unint64_t)vqtbl1_s8(v44, v48);
          int8x16_t v49 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v44.i64[0], 0), (float32x4_t)v43);
          float32x4_t v50 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v27, (float32x4_t)v40), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v37.i64[0], 0), v47));
          float32x4_t v51 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v28, (float32x4_t)v40), v49);
          int8x16_t v53 = *(int8x16_t *)(v19 + 224);
          int8x16_t v52 = *(int8x16_t *)(v19 + 240);
          v50.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v50, *(float32x4_t *)&v53), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v27, v27, 0xCuLL), *(float32x4_t *)&v53), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v50)).i64[1];
          v51.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v51, *(float32x4_t *)&v53), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v28, v28, 0xCuLL), *(float32x4_t *)&v53), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v51)).i64[1];
          int8x16_t v54 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v50, 2);
          int8x16_t v55 = (int8x16_t)vcgtq_f32(v50, (float32x4_t)v40);
          v40.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v51, (float32x4_t)v40), v53, (int8x16_t)vdupq_laneq_s32((int32x4_t)v51, 2)).u64[0];
          float32x4_t v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v55, v53, v54), 0);
          float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 0);
          float32x4_t v58 = *(float32x4_t *)(v19 + 256);
          int8x16_t v59 = *(int8x16_t *)(v19 + 272);
          float32x4_t v60 = vminq_f32(vmaxq_f32(vrecpeq_f32(v56), (float32x4_t)v52), v58);
          float32x4_t v61 = vminq_f32(vmaxq_f32(vrecpeq_f32(v57), (float32x4_t)v52), v58);
          float32x4_t v62 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpsq_f32(v56, v60)), (float32x4_t)v52), v58);
          float32x4_t v63 = vminq_f32(vmaxq_f32(vmulq_f32(v61, vrecpsq_f32(v57, v61)), (float32x4_t)v52), v58);
          float32x4_t v64 = vmulq_f32((float32x4_t)v27, vmulq_f32(v62, vrecpsq_f32(v56, v62)));
          float32x4_t v65 = vmulq_f32((float32x4_t)v28, vmulq_f32(v63, vrecpsq_f32(v57, v63)));
          float32x4_t v66 = vsubq_f32(v64, *(float32x4_t *)v19);
          float32x4_t v67 = vsubq_f32(v65, *(float32x4_t *)v19);
          float32x4_t v68 = (float32x4_t)vdupq_lane_s64(v66.i64[0], 0);
          float32x4_t v69 = (float32x4_t)vdupq_lane_s64(v67.i64[0], 0);
          float32x4_t v70 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          float32x4_t v71 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), (float32x4_t)v52), v58);
          float32x4_t v72 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpsq_f32(v70, v71)), (float32x4_t)v52), v58);
          float32x4_t v73 = vmulq_f32(v72, vrecpsq_f32(v70, v72));
          float32x4_t v74 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1);
          v68.i64[0] = vmulq_f32(v66, v73).u64[0];
          float32x4_t v75 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
          v69.i64[0] = vmulq_f32(v67, v73).u64[0];
          float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
          float32x4_t v77 = vsubq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, v68), v32, (int8x16_t)0));
          float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v77.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v74, vmulq_f32(v70, v77))).u64[0];
          float32x2_t v79 = (float32x2_t)vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v75, vmulq_f32(v70, vsubq_f32(v78, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v78, v69), v32, (int8x16_t)0))))).u64[0];
          float32x4_t v80 = *(float32x4_t *)(v19 + 96);
          float32x4_t v81 = *(float32x4_t *)(v19 + 112);
          float32x4_t v82 = vaddq_f32(vmulq_lane_f32(v80, v79, 1), vmulq_n_f32(v26, v79.f32[0]));
          int8x16_t v83 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v81, v64, 2), vaddq_f32(vmulq_lane_f32(v80, *(float32x2_t *)v77.f32, 1), vmulq_n_f32(v26, v77.f32[0])));
          int8x16_t v84 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v81, v65, 2), v82);
          float32x4_t v85 = vnegq_f32((float32x4_t)v33);
          int8x16_t v86 = vandq_s8(v52, (int8x16_t)vcgtq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v83)));
          int8x16_t v87 = vandq_s8(v52, (int8x16_t)vcgtq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v84)));
          *(int8x8_t *)v80.f32 = vqtbl1_s8(v33, *(int8x8_t *)v59.i8);
          *(int8x8_t *)&v80.u32[2] = vqtbl1_s8(v33, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
          int8x16_t v88 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v45, v86, v83));
          int8x16_t v89 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v45, v87, v84));
          int8x16_t v90 = vbslq_s8(v45, v86, v88);
          int8x16_t v91 = vbslq_s8(v45, v87, v89);
          int8x16_t v92 = vandq_s8(v32, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v90, v90, 4uLL), (float32x4_t)v53));
          int8x16_t v93 = vandq_s8(v32, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v91, v91, 4uLL), (float32x4_t)v53));
          int8x16_t v94 = *(int8x16_t *)(v19 + 288);
          float32x4_t v95 = *(float32x4_t *)(v19 + 304);
          v92.i64[0] = vbslq_s8(v94, (int8x16_t)vrev64q_s32((int32x4_t)v92), v92).u64[0];
          v93.i64[0] = vbslq_s8(v94, (int8x16_t)vrev64q_s32((int32x4_t)v93), v93).u64[0];
          v92.i64[1] = vminq_f32(*(float32x4_t *)&v90, v95).i64[1];
          v93.i64[1] = vminq_f32(*(float32x4_t *)&v91, v95).i64[1];
          int8x16_t v96 = vbslq_s8(v45, (int8x16_t)vsubq_f32(v95, (float32x4_t)v90), v88);
          int8x16_t v97 = vbslq_s8(v45, (int8x16_t)vsubq_f32(v95, (float32x4_t)v91), v89);
          int8x16_t v98 = vbslq_s8(v39, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v96, v96, 8uLL), (float32x4_t)v92), v92);
          int8x16_t v99 = vbslq_s8(v39, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v97, v97, 8uLL), (float32x4_t)v93), v93);
          int8x16_t v100 = vbslq_s8(v94, vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v98), v95)), v98);
          int8x16_t v101 = vbslq_s8(v94, vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v99), v95)), v99);
          int8x16_t v102 = *(int8x16_t *)(v19 + 320);
          int8x16_t v103 = *(int8x16_t *)(v19 + 336);
          int8x16_t v104 = vbslq_s8(v103, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v100, v100, 0xCuLL), (float32x4_t)v53), vbslq_s8(v103, (int8x16_t)vmaxq_f32((float32x4_t)v96, (float32x4_t)v102), v96), v100), v96);
          int8x16_t v105 = vbslq_s8(v103, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v101, v101, 0xCuLL), (float32x4_t)v53), vbslq_s8(v103, (int8x16_t)vmaxq_f32((float32x4_t)v97, (float32x4_t)v102), v97), v101), v97);
          int8x16_t v106 = vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v104, (float32x4_t)vextq_s8(v100, v100, 4uLL)), v104);
          int8x16_t v107 = vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v101, v101, 4uLL)), v105);
          int32x4_t v108 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v106), (float32x4_t)v53), v102, v106);
          int32x4_t v109 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v107), (float32x4_t)v53), v102, v107);
          v106.i64[1] = v108.i64[1];
          v107.i64[1] = v109.i64[1];
          float32x4_t v110 = (float32x4_t)vdupq_laneq_s32(v108, 2);
          float32x4_t v111 = (float32x4_t)vdupq_laneq_s32(v109, 2);
          float32x4_t v112 = vminq_f32(vmaxq_f32(vrecpeq_f32(v110), (float32x4_t)v52), v58);
          float32x4_t v113 = vminq_f32(vmaxq_f32(vrecpeq_f32(v111), (float32x4_t)v52), v58);
          float32x4_t v114 = vminq_f32(vmaxq_f32(vmulq_f32(v112, vrecpsq_f32(v110, v112)), (float32x4_t)v52), v58);
          float32x4_t v115 = vminq_f32(vmaxq_f32(vmulq_f32(v113, vrecpsq_f32(v111, v113)), (float32x4_t)v52), v58);
          float32x4_t v116 = vmulq_f32(vmulq_f32(v115, vrecpsq_f32(v111, v115)), (float32x4_t)v107);
          uint64_t v117 = *((int *)a2 + 22);
          float32x4_t v118 = vsubq_f32(vmulq_f32(vmulq_f32(v114, vrecpsq_f32(v110, v114)), (float32x4_t)v106), v9);
          uint64_t v119 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v120 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            float32x2_t v121 = (float32x2_t)vsubq_f32(v118, vcvtq_f32_s32(v120)).u64[0];
            float32x4_t v122 = (float32x4_t *)(v119 + 16 * (v120.i32[0] + v120.i32[1] * (int)v117));
            float32x4_t v123 = vaddq_f32(*v122, vmulq_n_f32(vsubq_f32(v122[1], *v122), v121.f32[0]));
            float32x4_t v124 = vaddq_f32(v123, vmulq_lane_f32(vsubq_f32(vaddq_f32(v122[v117], vmulq_n_f32(vsubq_f32(v122[(int)v117 + 1], v122[v117]), v121.f32[0])), v123), v121, 1));
            float32x4_t v125 = vsubq_f32(v116, v9);
            int32x4_t v126 = vaddq_s32(vcvtq_s32_f32(v125), vcltzq_f32(v125));
            v125.i64[0] = vsubq_f32(v125, vcvtq_f32_s32(v126)).u64[0];
            float32x4_t v127 = (float32x4_t *)(v119 + 16 * (v126.i32[0] + v126.i32[1] * (int)v117));
            float32x4_t v128 = vaddq_f32(*v127, vmulq_n_f32(vsubq_f32(v127[1], *v127), v125.f32[0]));
            float32x4_t v129 = vaddq_f32(v128, vmulq_lane_f32(vsubq_f32(vaddq_f32(v127[v117], vmulq_n_f32(vsubq_f32(v127[(int)v117 + 1], v127[v117]), v125.f32[0])), v128), *(float32x2_t *)v125.f32, 1));
          }
          else
          {
            float32x4_t v130 = vaddq_f32(v118, v13);
            int32x4_t v131 = vcvtq_s32_f32(v130);
            v130.i64[0] = vaddq_s32(v131, vcgtq_f32(vcvtq_f32_s32(v131), v130)).u64[0];
            float32x4_t v124 = *(float32x4_t *)(v119 + 16 * (v130.i32[0] + v130.i32[1] * (int)v117));
            float32x4_t v132 = vaddq_f32(vsubq_f32(v116, v9), v13);
            int32x4_t v133 = vcvtq_s32_f32(v132);
            v132.i64[0] = vaddq_s32(v133, vcgtq_f32(vcvtq_f32_s32(v133), v132)).u64[0];
            float32x4_t v129 = *(float32x4_t *)(v119 + 16 * (v132.i32[0] + v132.i32[1] * (int)v117));
          }
          float32x4_t v134 = (float32x4_t *)(v11 + 16 * v15);
          float32x4_t *v134 = v124;
          v134[1] = v129;
          float32x4_t v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B7E736B0);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        uint64_t v15 = v15;
      }
      if ((int)v15 < v10)
      {
        uint64_t v135 = *((void *)this + 51);
        float32x4_t v136 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v135 + 32), *(float32x2_t *)v17.f32, 1), vmulq_n_f32(*(float32x4_t *)(v135 + 16), v17.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v135 + 48), v17, 2));
        float32x4_t v137 = *(float32x4_t *)(v135 + 64);
        int8x16_t v138 = (int8x16_t)vaddq_f32(v137, v136);
        int8x16_t v139 = (int8x16_t)vcgtq_f32(vnegq_f32(v137), v136);
        int8x16_t v141 = *(int8x16_t *)(v135 + 128);
        int8x16_t v140 = *(int8x16_t *)(v135 + 144);
        int8x16_t v142 = vandq_s8(v140, v139);
        int8x16_t v143 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v138), (float32x4_t)v140);
        *(int8x8_t *)v142.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL), *(int8x8_t *)v142.i8, 4uLL);
        int8x16_t v144 = *(int8x16_t *)(v135 + 160);
        int8x16_t v145 = *(int8x16_t *)(v135 + 176);
        v142.u64[1] = (unint64_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
        int8x16_t v146 = vbslq_s8(v145, vextq_s8(v142, v142, 4uLL), v142);
        v143.i64[0] = vandq_s8(v140, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v146), (float32x4_t)v144)).u64[0];
        v143.i64[1] = vextq_s8(v146, v146, 8uLL).u64[0];
        int8x16_t v147 = *(int8x16_t *)(v135 + 192);
        int8x16_t v148 = *(int8x16_t *)(v135 + 208);
        *(int8x8_t *)v149.f32 = vqtbl1_s8(v143, *(int8x8_t *)v147.i8);
        *(int8x8_t *)&v149.u32[2] = vqtbl1_s8(v143, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
        int8x16_t v150 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v143.i64[0], 0), v149);
        int8x16_t v151 = *(int8x16_t *)(v135 + 224);
        int8x16_t v152 = *(int8x16_t *)(v135 + 240);
        float32x4_t v153 = (float32x4_t)vbslq_s8(v148, (int8x16_t)vminq_f32((float32x4_t)v138, (float32x4_t)v144), v150);
        int32x4_t v154 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v153, (float32x4_t)v151), (int8x16_t)vdupq_lane_s64(vmaxq_f32((float32x4_t)vextq_s8(v138, v138, 0xCuLL), (float32x4_t)v151).i64[0], 0), (int8x16_t)vrev64q_s32((int32x4_t)v153));
        v153.i64[1] = v154.i64[1];
        float32x4_t v155 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v153, (float32x4_t)v144), v151, (int8x16_t)vdupq_laneq_s32(v154, 2)), 0);
        float32x4_t v156 = *(float32x4_t *)(v135 + 256);
        int8x16_t v157 = *(int8x16_t *)(v135 + 272);
        float32x4_t v158 = vminq_f32(vmaxq_f32(vrecpeq_f32(v155), (float32x4_t)v152), v156);
        float32x4_t v159 = vminq_f32(vmaxq_f32(vmulq_f32(v158, vrecpsq_f32(v155, v158)), (float32x4_t)v152), v156);
        float32x4_t v160 = vmulq_f32((float32x4_t)v138, vmulq_f32(v159, vrecpsq_f32(v155, v159)));
        float32x4_t v161 = vsubq_f32(v160, *(float32x4_t *)v135);
        float32x4_t v162 = (float32x4_t)vdupq_lane_s64(v161.i64[0], 0);
        float32x4_t v163 = (float32x4_t)vextq_s8(*(int8x16_t *)v135, *(int8x16_t *)v135, 8uLL);
        float32x4_t v164 = vminq_f32(vmaxq_f32(vrecpeq_f32(v163), (float32x4_t)v152), v156);
        float32x4_t v165 = vminq_f32(vmaxq_f32(vmulq_f32(v164, vrecpsq_f32(v163, v164)), (float32x4_t)v152), v156);
        v161.i64[0] = vmulq_f32(v161, vmulq_f32(v165, vrecpsq_f32(v163, v165))).u64[0];
        float32x4_t v166 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v162, 1);
        v162.i64[0] = v161.i64[0];
        float32x4_t v167 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
        v167.i64[0] = vaddq_f32(*(float32x4_t *)v135, vsubq_f32(v166, vmulq_f32(v163, vsubq_f32(v167, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v167, v162), v140, (int8x16_t)0))))).u64[0];
        int8x16_t v168 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v135 + 112), v160, 2), vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v135 + 96), *(float32x2_t *)v167.f32, 1), vmulq_n_f32(*(float32x4_t *)(v135 + 80), v167.f32[0])));
        int8x16_t v169 = vandq_s8(v152, (int8x16_t)vcgtq_f32(vnegq_f32((float32x4_t)v141), (float32x4_t)vrev64q_s32((int32x4_t)v168)));
        *(int8x8_t *)v167.f32 = vqtbl1_s8(v141, *(int8x8_t *)v157.i8);
        *(int8x8_t *)&v167.u32[2] = vqtbl1_s8(v141, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
        int8x16_t v170 = (int8x16_t)vaddq_f32(v167, (float32x4_t)vbslq_s8(v148, v169, v168));
        int8x16_t v171 = vbslq_s8(v148, v169, v170);
        int8x16_t v172 = vandq_s8(v140, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v171, v171, 4uLL), (float32x4_t)v151));
        int8x16_t v173 = *(int8x16_t *)(v135 + 288);
        float32x4_t v174 = *(float32x4_t *)(v135 + 304);
        v172.i64[0] = vbslq_s8(v173, (int8x16_t)vrev64q_s32((int32x4_t)v172), v172).u64[0];
        v172.i64[1] = vminq_f32(*(float32x4_t *)&v171, v174).i64[1];
        int8x16_t v175 = vbslq_s8(v148, (int8x16_t)vsubq_f32(v174, (float32x4_t)v171), v170);
        int8x16_t v176 = vbslq_s8(v145, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v175, v175, 8uLL), (float32x4_t)v172), v172);
        int8x16_t v177 = vbslq_s8(v173, vandq_s8(v140, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v176), v174)), v176);
        int8x16_t v178 = *(int8x16_t *)(v135 + 320);
        int8x16_t v179 = vbslq_s8(*(int8x16_t *)(v135 + 336), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v177, v177, 0xCuLL), (float32x4_t)v151), vbslq_s8(*(int8x16_t *)(v135 + 336), (int8x16_t)vmaxq_f32((float32x4_t)v175, (float32x4_t)v178), v175), v177), v175);
        int8x16_t v180 = vbslq_s8(v148, (int8x16_t)vminq_f32((float32x4_t)v179, (float32x4_t)vextq_s8(v177, v177, 4uLL)), v179);
        int32x4_t v181 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v180), (float32x4_t)v151), v178, v180);
        v180.i64[1] = v181.i64[1];
        float32x4_t v182 = (float32x4_t)vdupq_laneq_s32(v181, 2);
        float32x4_t v183 = vminq_f32(vmaxq_f32(vrecpeq_f32(v182), (float32x4_t)v152), v156);
        float32x4_t v184 = vminq_f32(vmaxq_f32(vmulq_f32(v183, vrecpsq_f32(v182, v183)), (float32x4_t)v152), v156);
        uint64_t v185 = *((int *)a2 + 22);
        float32x4_t v186 = vsubq_f32(vmulq_f32(vmulq_f32(v184, vrecpsq_f32(v182, v184)), (float32x4_t)v180), v9);
        uint64_t v187 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v188 = vaddq_s32(vcvtq_s32_f32(v186), vcltzq_f32(v186));
          float32x2_t v189 = (float32x2_t)vsubq_f32(v186, vcvtq_f32_s32(v188)).u64[0];
          uint64_t v190 = (float32x4_t *)(v187 + 16 * (v188.i32[0] + v188.i32[1] * (int)v185));
          float32x4_t v191 = vaddq_f32(*v190, vmulq_n_f32(vsubq_f32(v190[1], *v190), v189.f32[0]));
          float32x4_t v192 = vaddq_f32(v191, vmulq_lane_f32(vsubq_f32(vaddq_f32(v190[v185], vmulq_n_f32(vsubq_f32(v190[(int)v185 + 1], v190[v185]), v189.f32[0])), v191), v189, 1));
        }
        else
        {
          float32x4_t v193 = vaddq_f32(v186, v13);
          int32x4_t v194 = vcvtq_s32_f32(v193);
          v193.i64[0] = vaddq_s32(v194, vcgtq_f32(vcvtq_f32_s32(v194), v193)).u64[0];
          float32x4_t v192 = *(float32x4_t *)(v187 + 16 * (v193.i32[0] + v193.i32[1] * (int)v185));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v192;
      }
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736C0);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWrapRepeat::GetDOD(HgcWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcWrapRepeat *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcWrapRepeat::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWrapRepeat::HgcWrapRepeat(HgcWrapRepeat *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1172CB0;
  operator new();
}

void sub_1B7D6BF54(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWrapRepeat::~HgcWrapRepeat(HGNode *this)
{
  *(void *)this = &unk_1F1172CB0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C402BC884A0);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcWrapRepeat::~HgcWrapRepeat(this);

  HGObject::operator delete(v1);
}

uint64_t HgcWrapRepeat::SetParameter(HgcWrapRepeat *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      _OWORD v7[2] = a5;
      v7[3] = a6;
      goto LABEL_48;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      uint64_t v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      void v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      double v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_48;
    case 5:
      float32x4_t v13 = (__n128 *)*((void *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
      goto LABEL_48;
    case 6:
      float32x4_t v14 = (__n128 *)*((void *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[23] = a3;
      goto LABEL_48;
    case 7:
      uint64_t v15 = (__n128 *)*((void *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a4
        && v15[7].n128_f32[2] == a6
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u32[0] = a3.n128_u32[0];
      v15[7].n128_f32[1] = a4;
      v15[7].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[24] = a3;
      goto LABEL_48;
    case 8:
      int v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcWrapRepeat::GetParameter(HgcWrapRepeat *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      uint64_t v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      uint64_t v4 = v8 + 19;
      goto LABEL_11;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      uint64_t v4 = v9 + 91;
      goto LABEL_11;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[92];
      a3[1] = v10[93];
      a3[2] = v10[94];
      uint64_t v4 = v10 + 95;
      goto LABEL_11;
    case 7:
      uint64_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[96];
      a3[1] = v11[97];
      a3[2] = v11[98];
      uint64_t v4 = v11 + 99;
      goto LABEL_11;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      uint64_t v4 = v12 + 35;
LABEL_11:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcTXColor::GetProgram(HgcTXColor *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000027f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.w = r0.w*half(hg_Params[0].w);\n"
             "    r0.xyz = half3(hg_Params[0].xyz)*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c4d7569c:2d44c83b:168a2167:76b53a8c\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000265\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.w = r0.w*hg_Params[0].w;\n"
             "    r0.xyz = hg_Params[0].xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0779d546:fa52dd80:b861373f:9406dfe9\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000001f5\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0.w,$f0,texture[0],RECT;\n"
           "MUL r0.w,r0,$p0;\n"
           "MUL r0.xyz,$p0,r0.w;\n"
           "MOV $o0,r0;\n"
           "END\n"
           "##MD5=b88c9aa1:7b970a63:350aa2cb:9535f5bb\n"
           "##SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000237\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.w = r0.w*hg_ProgramLocal0.w;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=5cc2f960:9e9a1675:5f2d55f1:a34cda55\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTXColor::InitProgramDescriptor(HgcTXColor *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXColor_hgc_visible", "//Metal1.0     \n//LEN=0000000139\n[[ visible ]] FragmentOut HgcTXColor_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.w = r0.w*hg_Params[0].w;\n"
    "    r0.xyz = hg_Params[0].xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcTXColor");
}

void sub_1B7D6C5B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6C6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6C6F8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6C6F0);
}

void *HgcTXColor::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXColor [hgc1]");
}

uint64_t HgcTXColor::BindTexture(HgcTXColor *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTXColor::Bind(HgcTXColor *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcTXColor::RenderTile(HgcTXColor *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 62);
          float32x4_t v12 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          float32x4_t v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          int8x16_t v16 = *(int8x16_t *)(v11 + 144);
          int8x16_t v17 = vbslq_s8(v16, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v12, 3));
          int8x16_t v18 = vbslq_s8(v16, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v13, 3));
          int8x16_t v19 = vbslq_s8(v16, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v14, 3));
          int8x16_t v20 = vbslq_s8(v16, (int8x16_t)v15, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v15, 3));
          float32x4_t v21 = (int8x16_t *)(v5 + v10);
          v21[-2] = v17;
          v21[-1] = v18;
          *float32x4_t v21 = v19;
          v21[1] = v20;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = -v9;
      }
      if ((int)v22 < v4)
      {
        uint64_t v22 = v22;
        do
        {
          uint64_t v23 = *((void *)this + 62);
          float32x4_t v24 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v22), *(float32x4_t *)v23);
          *(int8x16_t *)(v5 + 16 * v22++) = vbslq_s8(*(int8x16_t *)(v23 + 144), (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v23, v24, 3));
        }
        while (v22 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXColor::GetDOD(HgcTXColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcTXColor::GetROI(HgcTXColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcTXColor::HgcTXColor(HgcTXColor *this)
{
}

void sub_1B7D6CAB4(_Unwind_Exception *a1)
{
  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcTXColor::~HgcTXColor(HgcTXColor *this)
{
  *(void *)this = &unk_1F1172F18;
  uint64_t v2 = *((void *)this + 62);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40B8406A4ELL);
  }

  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcTXColor::~HgcTXColor(this);

  HGObject::operator delete(v1);
}

uint64_t HgcTXColor::SetParameter(HgcTXColor *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 62);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  float *v8 = a3;
  v8[1] = a4;
  float v8[2] = a5;
  v8[3] = a6;
  uint64_t v7 = 1;
  *((_DWORD *)this + 126) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float HgcTXColor::GetParameter(HgcTXColor *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 62);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

HGNode *HgcTXColor::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, float32x4_t a5)
{
  if (this[31].n128_u32[2])
  {
    unint64_t v5 = this[31].n128_u64[0];
    int8x16_t v6 = (int8x16_t)vmulq_f32(*(float32x4_t *)v5, (float32x4_t)0);
    int8x16_t v7 = *(int8x16_t *)(v5 + 144);
    a5 = vmulq_f32(*(float32x4_t *)(v5 + 128), *(float32x4_t *)v5);
    a4 = (__n128)vbslq_s8(v7, v6, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v5, (float32x4_t)v6, 3));
    int8x16_t v8 = vbslq_s8(v7, (int8x16_t)a5, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v5, a5, 3));
    *(__n128 *)(v5 + 16) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 48) = a4;
    *(int8x16_t *)(this[31].n128_u64[0] + 64) = v8;
    int v9 = (__n128 *)this[31].n128_u64[0];
    this[27] = v9[1];
    this[28] = v9[2];
    this[29] = v9[3];
    a3 = v9[4];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], *(int32x2_t *)a5.f32);
}

const char *HgcPMStripEvenField::GetProgram(HgcPMStripEvenField *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003a6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = half(fract(0.500000h*half(frag._texCoord1.y)) >= 0.500000h);\n"
             "    output.color0 = select(float4(r0), float4(r2), -float4(r1.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5084851f:fba9185d:22dfa3e1:0fc28038\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000375\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = float(fract(0.500000f*frag._texCoord1.y) >= 0.500000f);\n"
             "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2e9d91d6:50113d3e:5e1e8649:ca6fddee\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e7\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "ATTRIB $f2=fragment.texcoord[2];\n"
           "ATTRIB $f3=fragment.texcoord[3];\n"
           "PARAM $c0={0.5000000000,0.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "##0\n"
           "TEX r1,$f2,texture[0],RECT;\n"
           "##0\n"
           "TEX r2,$f3,texture[0],RECT;\n"
           "LRP r2,$c0.x,r2,r1;\n"
           "MUL r1.x,$c0,$f1.y;\n"
           "FRC r1.x,r1;\n"
           "SGE r1.x,r1,$c0;\n"
           "CMP $o0,-r1.x,r2,r0;\n"
           "END\n"
           "##MD5=29a43248:de9b99c5:ecd31446:e32229d2\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r2 = mix(r1, r2, c0.xxxx);\n"
           "    r1.x = c0.x*hg_TexCoord1.y;\n"
           "    r1.x = fract(r1.x);\n"
           "    r1.x = float(r1.x >= c0.x);\n"
           "    gl_FragColor = vec4(-r1.x < 0.00000 ? r2.x : r0.x, -r1.x < 0.00000 ? r2.y : r0.y, -r1.x < 0.00000 ? r2.z "
           ": r0.z, -r1.x < 0.00000 ? r2.w : r0.w);\n"
           "}\n"
           "//MD5=ca27118b:c945d0f7:15595b7c:a9239cd3\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
}

void HgcPMStripEvenField::InitProgramDescriptor(HgcPMStripEvenField *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPMStripEvenField_hgc_visible", "//Metal1.0     \n//LEN=00000002eb\n[[ visible ]] FragmentOut HgcPMStripEvenField_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r2 = mix(r1, r2, c0.xxxx);\n"
    "    r1.x = float(fract(0.500000f*texCoord1.y) >= 0.500000f);\n"
    "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcPMStripEvenField");
}

void sub_1B7D6CDA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6D050()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6D048);
}

void *HgcPMStripEvenField::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPMStripEvenField [hgc1]");
}

uint64_t HgcPMStripEvenField::BindTexture(HgcPMStripEvenField *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcPMStripEvenField::Bind(HgcPMStripEvenField *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcPMStripEvenField::RenderTile(HgcPMStripEvenField *this, int8x8_t *a2)
{
  int8x8_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    uint64_t v6 = a2[11].i32[0];
    int8x8_t v7 = a2[2];
    *(float32x2_t *)v8.i8 = vcvt_f32_s32((int32x2_t)vand_s8(v2, (int8x8_t)0x100000001));
    v8.i64[1] = 0x3F80000000000000;
    *(float *)v9.i32 = (float)(v5 & 1);
    v9.i32[1] = 1.0;
    v9.i64[1] = 0;
    int8x8_t v10 = a2[10];
    int v11 = -(int)v6;
    uint64_t v12 = 16 * v6;
    uint64_t v13 = *(void *)&v10 + 16 * v6;
    uint64_t v14 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v15 = 0;
        LODWORD(v16) = 0;
        float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        for (int i = v5; i > 3; i -= 4)
        {
          float32x4_t v19 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16));
          float32x4_t v20 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 1));
          float32x4_t v21 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 2));
          float32x4_t v22 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 3));
          uint64_t v23 = (float32x4_t *)*((void *)this + 51);
          int8x16_t v24 = (int8x16_t)vcgtq_f32(v17, v23[1]);
          int8x16_t v25 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v20, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 16), v20), *v23)), *(int8x16_t *)(*(void *)&v10 + v15 + 16));
          int8x16_t v26 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v21, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 32), v21), *v23)), *(int8x16_t *)(*(void *)&v10 + v15 + 32));
          int8x16_t v27 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v22, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 48), v22), *v23)), *(int8x16_t *)(*(void *)&v10 + v15 + 48));
          int8x16_t v28 = (int8x16_t *)(*(void *)&v7 + v15);
          *int8x16_t v28 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v19, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15), v19), *v23)), *(int8x16_t *)(*(void *)&v10 + v15));
          v28[1] = v25;
          void v28[2] = v26;
          v28[3] = v27;
          LODWORD(v16) = v16 + 4;
          v15 += 64;
        }
      }
      if ((int)v16 < v5)
      {
        float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        uint64_t v16 = v16;
        do
        {
          float32x4_t v30 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16));
          *(int8x16_t *)(*(void *)&v7 + 16 * v16) = vbslq_s8((int8x16_t)vcgtq_f32(v29, *(float32x4_t *)(*((void *)this + 51) + 16)), (int8x16_t)vaddq_f32(v30, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + 16 * v16), v30), *(float32x4_t *)*((void *)this + 51))), *(int8x16_t *)(*(void *)&v10 + 16 * v16));
          ++v16;
        }
        while (v16 < v5);
      }
      int8x16_t v8 = veorq_s8(v8, v9);
      *(void *)&v10 += v12;
      ++v4;
      v13 += v12;
      *(void *)&v7 += v14;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcPMStripEvenField::GetDOD(HgcPMStripEvenField *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcPMStripEvenField::GetROI(HgcPMStripEvenField *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcPMStripEvenField::HgcPMStripEvenField(HgcPMStripEvenField *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1173190;
  operator new();
}

void sub_1B7D6D640(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPMStripEvenField::~HgcPMStripEvenField(HGNode *this)
{
  *(void *)this = &unk_1F1173190;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40E0EAB150);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcPMStripEvenField::~HgcPMStripEvenField(this);

  HGObject::operator delete(v1);
}

uint64_t HgcPMStripEvenField::SetParameter(HgcPMStripEvenField *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcPMStripEvenField::GetParameter(HgcPMStripEvenField *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcMaskCompReplace::GetProgram(HgcMaskCompReplace *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000402\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r0.yyyy), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=26cc7fcf:10aa91a7:34f7b9ad:5e2890fb\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003cf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r0.yyyy, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d2b79949:8c64d465:e6394408:3b5018a6\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e4\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.z,-r0.y,$c0.x;\n"
           "CMP r0.z,-$p1,r0,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r0.y;\n"
           "END\n"
           "##MD5=e75ffb65:ab2cde59:e05a9533:2ea5553c\n"
           "##SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000044d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.z = -r0.y + c0.x;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y);\n"
           "}\n"
           "//MD5=425ccaa3:4ecfec84:34f5a6cc:42956020\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskCompReplace::InitProgramDescriptor(HgcMaskCompReplace *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompReplace_hgc_visible", "//Metal1.0     \n//LEN=00000002ab\n[[ visible ]] FragmentOut HgcMaskCompReplace_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.z = -r0.y + c0.x;\n"
    "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r0.yyyy, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskCompReplace");
}

void sub_1B7D6D818(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6D918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6D958()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6D950);
}

void *HgcMaskCompReplace::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompReplace [hgc1]");
}

uint64_t HgcMaskCompReplace::BindTexture(HgcMaskCompReplace *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompReplace::Bind(HgcMaskCompReplace *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcMaskCompReplace::RenderTile(HgcMaskCompReplace *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v57) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 51);
          float32x4_t v12 = *(float32x4_t *)(v11 + 16);
          float32x4_t v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          float32x4_t v17 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          float32x4_t v18 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL));
          float32x4_t v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          float32x4_t v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          float32x4_t v21 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          int32x4_t v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v12.f32, 1);
          int32x4_t v25 = (int32x4_t)vmulq_lane_f32(v21, *(float32x2_t *)v12.f32, 1);
          float32x4_t v26 = *(float32x4_t *)(v11 + 32);
          float32x4_t v27 = *(float32x4_t *)(v11 + 48);
          int8x16_t v28 = *(int8x16_t *)(v11 + 64);
          float32x4_t v29 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v22, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v22))));
          float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v23, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v23))));
          float32x4_t v31 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v24))));
          float32x4_t v32 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v25, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v25))));
          int8x16_t v33 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), vmulq_n_f32(v29, v12.f32[0]));
          int8x16_t v34 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v12.f32[0]));
          int8x16_t v35 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v12.f32[0]));
          int8x16_t v36 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v12.f32[0]));
          int8x16_t v37 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v33, 0xCuLL));
          int8x16_t v38 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v34, 0xCuLL));
          int8x16_t v39 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v35, 0xCuLL));
          int8x16_t v40 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v36, 0xCuLL));
          int8x16_t v41 = v33;
          v41.i32[2] = v37.i32[2];
          int8x16_t v42 = v34;
          int8x16_t v43 = v35;
          v42.i32[2] = v38.i32[2];
          v43.i32[2] = v39.i32[2];
          int8x16_t v44 = v36;
          v44.i32[2] = v40.i32[2];
          int8x16_t v45 = (int8x16_t)vcgtq_f32(v12, v26);
          v33.i64[1] = vbslq_s8(v45, v37, vextq_s8(*(int8x16_t *)&v12, v41, 0xCuLL)).i64[1];
          v34.i64[1] = vbslq_s8(v45, v38, vextq_s8(*(int8x16_t *)&v12, v42, 0xCuLL)).i64[1];
          v35.i64[1] = vbslq_s8(v45, v39, vextq_s8(*(int8x16_t *)&v12, v43, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v45, v40, vextq_s8(*(int8x16_t *)&v12, v44, 0xCuLL)).i64[1];
          int8x16_t v46 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), v27);
          float32x4_t v47 = (float32x4_t)vbslq_s8(v28, v46, v33);
          float32x4_t v48 = (float32x4_t)vbslq_s8(v28, v46, v34);
          float32x4_t v49 = (float32x4_t)vbslq_s8(v28, v46, v35);
          float32x4_t v50 = (float32x4_t)vbslq_s8(v28, v46, v36);
          int8x16_t v51 = (int8x16_t)vcgtq_f32(v26, v47);
          int8x16_t v52 = (int8x16_t)vcgtq_f32(v26, v48);
          int8x16_t v53 = (int8x16_t)vcgtq_f32(v26, v49);
          int8x16_t v54 = vbslq_s8((int8x16_t)vcgtq_f32(v26, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v50, 1), (int8x16_t)vrev64q_s32((int32x4_t)v50));
          v50.i64[0] = vbslq_s8(v28, vbslq_s8(v51, (int8x16_t)vdupq_laneq_s64((int64x2_t)v47, 1), (int8x16_t)vrev64q_s32((int32x4_t)v47)), v33).u64[0];
          v33.i64[0] = vbslq_s8(v28, vbslq_s8(v52, (int8x16_t)vdupq_laneq_s64((int64x2_t)v48, 1), (int8x16_t)vrev64q_s32((int32x4_t)v48)), v34).u64[0];
          v34.i64[0] = vbslq_s8(v28, vbslq_s8(v53, (int8x16_t)vdupq_laneq_s64((int64x2_t)v49, 1), (int8x16_t)vrev64q_s32((int32x4_t)v49)), v35).u64[0];
          v28.i64[0] = vbslq_s8(v28, v54, v36).u64[0];
          int8x16_t v55 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), *(float32x4_t *)(v11 + 80));
          float32x4_t v56 = (int8x16_t *)(v5 + v10);
          v56[-2] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1));
          v56[-1] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1));
          *float32x4_t v56 = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1));
          v56[1] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 1));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v57) = -v9;
      }
      if ((int)v57 < v4)
      {
        uint64_t v57 = v57;
        do
        {
          uint64_t v58 = *((void *)this + 51);
          float32x4_t v59 = *(float32x4_t *)(v58 + 16);
          float32x4_t v60 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v57), *(float32x4_t *)v58);
          float32x4_t v61 = vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL));
          int32x4_t v62 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), *(float32x2_t *)v59.f32, 1);
          float32x4_t v63 = *(float32x4_t *)(v58 + 32);
          float32x4_t v64 = *(float32x4_t *)(v58 + 48);
          int8x16_t v65 = *(int8x16_t *)(v58 + 64);
          float32x4_t v66 = (float32x4_t)vbslq_s8(v65, (int8x16_t)v62, (int8x16_t)vaddq_f32(v63, vmulq_f32(v64, (float32x4_t)vrev64q_s32(v62))));
          int8x16_t v67 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v66), vmulq_n_f32(v66, v59.f32[0]));
          int8x16_t v68 = (int8x16_t)vsubq_f32(v64, (float32x4_t)vextq_s8(v67, v67, 0xCuLL));
          v69.i64[0] = v67.i64[0];
          v69.i64[1] = v68.i64[1];
          v67.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, v63), v68, vextq_s8(v67, v69, 0xCuLL)).i64[1];
          float32x4_t v70 = (float32x4_t)vbslq_s8(v65, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), v64), v67);
          v67.i64[0] = vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v63, v70), (int8x16_t)vdupq_laneq_s64((int64x2_t)v70, 1), (int8x16_t)vrev64q_s32((int32x4_t)v70)), v67).u64[0];
          *(int8x16_t *)(v5 + 16 * v57++) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), *(float32x4_t *)(v58 + 80)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 1));
        }
        while (v57 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompReplace::GetDOD(HgcMaskCompReplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcMaskCompReplace::GetROI(HgcMaskCompReplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcMaskCompReplace::HgcMaskCompReplace(HgcMaskCompReplace *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11733F8;
  operator new();
}

void sub_1B7D6DF84(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompReplace::~HgcMaskCompReplace(HGNode *this)
{
  *(void *)this = &unk_1F11733F8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskCompReplace::~HgcMaskCompReplace(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompReplace::SetParameter(HgcMaskCompReplace *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  unint64_t v10[2] = a5;
  _OWORD v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompReplace::GetParameter(HgcMaskCompReplace *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcPMStripOddField::GetProgram(HgcPMStripOddField *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003a6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = half(fract(0.500000h*half(frag._texCoord1.y)) >= 0.500000h);\n"
             "    output.color0 = select(float4(r2), float4(r0), -float4(r1.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=56b38b80:61a82783:d2d87a6d:5fd0a193\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000375\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = float(fract(0.500000f*frag._texCoord1.y) >= 0.500000f);\n"
             "    output.color0 = select(r2, r0, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=89f71f30:d1e3aae1:2723cdfc:c7cde105\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e7\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "ATTRIB $f2=fragment.texcoord[2];\n"
           "ATTRIB $f3=fragment.texcoord[3];\n"
           "PARAM $c0={0.5000000000,0.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "##0\n"
           "TEX r1,$f2,texture[0],RECT;\n"
           "##0\n"
           "TEX r2,$f3,texture[0],RECT;\n"
           "LRP r2,$c0.x,r2,r1;\n"
           "MUL r1.x,$c0,$f1.y;\n"
           "FRC r1.x,r1;\n"
           "SGE r1.x,r1,$c0;\n"
           "CMP $o0,-r1.x,r0,r2;\n"
           "END\n"
           "##MD5=7a82c137:7b79cd8d:7c5acf4f:f553035b\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r2 = mix(r1, r2, c0.xxxx);\n"
           "    r1.x = c0.x*hg_TexCoord1.y;\n"
           "    r1.x = fract(r1.x);\n"
           "    r1.x = float(r1.x >= c0.x);\n"
           "    gl_FragColor = vec4(-r1.x < 0.00000 ? r0.x : r2.x, -r1.x < 0.00000 ? r0.y : r2.y, -r1.x < 0.00000 ? r0.z "
           ": r2.z, -r1.x < 0.00000 ? r0.w : r2.w);\n"
           "}\n"
           "//MD5=97f90009:1c4d34e1:0d793564:b9d35255\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
}

void HgcPMStripOddField::InitProgramDescriptor(HgcPMStripOddField *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPMStripOddField_hgc_visible", "//Metal1.0     \n//LEN=00000002ea\n[[ visible ]] FragmentOut HgcPMStripOddField_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r2 = mix(r1, r2, c0.xxxx);\n"
    "    r1.x = float(fract(0.500000f*texCoord1.y) >= 0.500000f);\n"
    "    output.color0 = select(r2, r0, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcPMStripOddField");
}

void sub_1B7D6E218(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6E458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6E4C0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6E4B8);
}

void *HgcPMStripOddField::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPMStripOddField [hgc1]");
}

uint64_t HgcPMStripOddField::BindTexture(HgcPMStripOddField *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcPMStripOddField::Bind(HgcPMStripOddField *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcPMStripOddField::RenderTile(HgcPMStripOddField *this, int8x8_t *a2)
{
  int8x8_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    uint64_t v6 = a2[11].i32[0];
    int8x8_t v7 = a2[2];
    *(float32x2_t *)v8.i8 = vcvt_f32_s32((int32x2_t)vand_s8(v2, (int8x8_t)0x100000001));
    v8.i64[1] = 0x3F80000000000000;
    *(float *)v9.i32 = (float)(v5 & 1);
    v9.i32[1] = 1.0;
    v9.i64[1] = 0;
    int8x8_t v10 = a2[10];
    int v11 = -(int)v6;
    uint64_t v12 = 16 * v6;
    uint64_t v13 = *(void *)&v10 + 16 * v6;
    uint64_t v14 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v15 = 0;
        LODWORD(v16) = 0;
        float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        for (int i = v5; i > 3; i -= 4)
        {
          float32x4_t v19 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16));
          float32x4_t v20 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 1));
          float32x4_t v21 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 2));
          float32x4_t v22 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16 + 3));
          int32x4_t v23 = (float32x4_t *)*((void *)this + 51);
          int8x16_t v24 = (int8x16_t)vcgtq_f32(v17, v23[1]);
          int8x16_t v25 = vbslq_s8(v24, *(int8x16_t *)(*(void *)&v10 + v15 + 16), (int8x16_t)vaddq_f32(v20, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 16), v20), *v23)));
          int8x16_t v26 = vbslq_s8(v24, *(int8x16_t *)(*(void *)&v10 + v15 + 32), (int8x16_t)vaddq_f32(v21, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 32), v21), *v23)));
          int8x16_t v27 = vbslq_s8(v24, *(int8x16_t *)(*(void *)&v10 + v15 + 48), (int8x16_t)vaddq_f32(v22, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 48), v22), *v23)));
          int8x16_t v28 = (int8x16_t *)(*(void *)&v7 + v15);
          *int8x16_t v28 = vbslq_s8(v24, *(int8x16_t *)(*(void *)&v10 + v15), (int8x16_t)vaddq_f32(v19, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15), v19), *v23)));
          v28[1] = v25;
          void v28[2] = v26;
          v28[3] = v27;
          LODWORD(v16) = v16 + 4;
          v15 += 64;
        }
      }
      if ((int)v16 < v5)
      {
        float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        uint64_t v16 = v16;
        do
        {
          float32x4_t v30 = *(float32x4_t *)(*(void *)&v10 + 16 * (v11 + (int)v16));
          *(int8x16_t *)(*(void *)&v7 + 16 * v16) = vbslq_s8((int8x16_t)vcgtq_f32(v29, *(float32x4_t *)(*((void *)this + 51) + 16)), *(int8x16_t *)(*(void *)&v10 + 16 * v16), (int8x16_t)vaddq_f32(v30, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + 16 * v16), v30), *(float32x4_t *)*((void *)this + 51))));
          ++v16;
        }
        while (v16 < v5);
      }
      int8x16_t v8 = veorq_s8(v8, v9);
      *(void *)&v10 += v12;
      ++v4;
      v13 += v12;
      *(void *)&v7 += v14;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcPMStripOddField::GetDOD(HgcPMStripOddField *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcPMStripOddField::GetROI(HgcPMStripOddField *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcPMStripOddField::HgcPMStripOddField(HgcPMStripOddField *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1173660;
  operator new();
}

void sub_1B7D6EAB0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPMStripOddField::~HgcPMStripOddField(HGNode *this)
{
  *(void *)this = &unk_1F1173660;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40E0EAB150);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcPMStripOddField::~HgcPMStripOddField(this);

  HGObject::operator delete(v1);
}

uint64_t HgcPMStripOddField::SetParameter(HgcPMStripOddField *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcPMStripOddField::GetParameter(HgcPMStripOddField *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcPSImageTint::GetProgram(HgcPSImageTint *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000256\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a42cb56b:1fcb5ecc:969f09ef:c1a07a09\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000241\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=23d3843a:4a99c9dd:a97a56bb:b049b70b\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000001e0\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "MUL r0.xyz,r0,$p0;\n"
           "MOV $o0,r0;\n"
           "END\n"
           "##MD5=74ab830a:6a538ef9:f90c7f25:45a1849b\n"
           "##SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000020f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=0f8ec3a9:eef1c591:59dd542e:b81a4daa\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPSImageTint::InitProgramDescriptor(HgcPSImageTint *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPSImageTint_hgc_visible", "//Metal1.0     \n//LEN=0000000119\n[[ visible ]] FragmentOut HgcPSImageTint_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcPSImageTint");
}

void sub_1B7D6EC88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7D6ED88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7D6EDC8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7D6EDC0);
}

void *HgcPSImageTint::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPSImageTint [hgc1]");
}

uint64_t HgcPSImageTint::BindTexture(HgcPSImageTint *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcPSImageTint::Bind(HgcPSImageTint *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcPSImageTint::RenderTile(HgcPSImageTint *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 62);
          int8x16_t v12 = *(int8x16_t *)(v11 + 144);
          int8x16_t v13 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 32), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11));
          int8x16_t v14 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 16), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11));
          int8x16_t v15 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11));
          int8x16_t v16 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 + 16), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11));
          float32x4_t v17 = (int8x16_t *)(v5 + v10);
          v17[-2] = v13;
          v17[-1] = v14;
          int8x16_t *v17 = v15;
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        uint64_t v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*((void *)this + 62) + 144), *(int8x16_t *)(v6 + 16 * v18), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v18), *(float32x4_t *)*((void *)this + 62)));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcPSImageTint::GetDOD(HgcPSImageTint *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcPSImageTint::GetROI(HgcPSImageTint *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcPSImageTint::HgcPSImageTint(HgcPSImageTint *this)
{
}

void sub_1B7D6F170(_Unwind_Exception *a1)
{
  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcPSImageTint::~HgcPSImageTint(HgcPSImageTint *this)
{
  *(void *)this = &unk_1F11738C8;
  uint64_t v2 = *((void *)this + 62);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40B8406A4ELL);
  }

  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcPSImageTint::~HgcPSImageTint(this);

  HGObject::operator delete(v1);
}

uint64_t HgcPSImageTint::SetParameter(HgcPSImageTint *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 62);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  float *v8 = a3;
  v8[1] = a4;
  float v8[2] = a5;
  v8[3] = a6;
  uint64_t v7 = 1;
  *((_DWORD *)this + 126) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float HgcPSImageTint::GetParameter(HgcPSImageTint *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 62);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

HGNode *HgcPSImageTint::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (this[31].n128_u32[2])
  {
    unint64_t v5 = this[31].n128_u64[0];
    int8x16_t v6 = *(int8x16_t *)(v5 + 144);
    a4 = (__n128)vbslq_s8(v6, *(int8x16_t *)(v5 + 96), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 96), *(float32x4_t *)v5));
    a5 = (__n128)vbslq_s8(v6, *(int8x16_t *)(v5 + 112), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 112), *(float32x4_t *)v5));
    int8x16_t v7 = vbslq_s8(v6, *(int8x16_t *)(v5 + 128), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 128), *(float32x4_t *)v5));
    *(int8x16_t *)(v5 + 16) = vbslq_s8(v6, *(int8x16_t *)(v5 + 80), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 80), *(float32x4_t *)v5));
    *(__n128 *)(this[31].n128_u64[0] + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 48) = a5;
    *(int8x16_t *)(this[31].n128_u64[0] + 64) = v7;
    uint64_t v8 = (__n128 *)this[31].n128_u64[0];
    this[27] = v8[1];
    this[28] = v8[2];
    this[29] = v8[3];
    a3 = v8[4];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], (int32x2_t)a5.n128_u64[0]);
}

void OZAttractedToBehavior::OZAttractedToBehavior(OZAttractedToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *unint64_t v5 = &unk_1F1173B40;
  float64x2_t v5[2] = &unk_1F1173E28;
  v5[6] = &unk_1F1174080;
  v5[42] = &unk_1F11740D8;
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Attracted To Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAttractedToBehavior *)((char *)this + 504), &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Strength");
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 664), 300.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Attenuation Type Enum");
  PCURL::PCURL((PCURL *)&v6, @"Attract Behavior Attenuation Type");
  OZChannelEnum::OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Attenuation");
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1072), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Cutoff");
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1224), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Drag");
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1376), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Active Axes");
  OZChannelBool3D::OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528), 1, 1, 0, &v7, (OZChannelFolder *)((char *)this + 56), 0x197u, 0, 3u);
  PCString::~PCString(&v7);
  OZChannel::setScale((OZChannel *)((char *)this + 664), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 664), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 664), 1000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1072), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1224), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1224), 4000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1376), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1376), 5.0);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 504, 1);
}

void sub_1B7D6F6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannel::~OZChannel(v14);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior::OZAttractedToBehavior(OZAttractedToBehavior *this, OZAttractedToBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1173B40;
  *(void *)(v5 + 16) = &unk_1F1173E28;
  *(void *)(v5 + 48) = &unk_1F1174080;
  *(void *)(v5 + 336) = &unk_1F11740D8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 504), (OZAttractedToBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 664), (const OZChannelBase *)((char *)a2 + 664), v6);
  *((void *)this + 83) = &unk_1F1100CF0;
  *((void *)this + 85) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816), (OZAttractedToBehavior *)((char *)a2 + 816), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1072), (const OZChannelBase *)((char *)a2 + 1072), v6);
  *((void *)this + 134) = &unk_1F1100CF0;
  *((void *)this + 136) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1224), (const OZChannelBase *)((char *)a2 + 1224), v6);
  *((void *)this + 153) = &unk_1F1100CF0;
  *((void *)this + 155) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1376), (const OZChannelBase *)((char *)a2 + 1376), v6);
  *((void *)this + 17OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 174) = &unk_1F1101050;
  OZChannelBool3D::OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528), (OZAttractedToBehavior *)((char *)a2 + 1528), v6);
}

void sub_1B7D6FA3C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v7);
  OZChannel::~OZChannel(v6);
  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannel::~OZChannel(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D6FAA0()
{
}

void sub_1B7D6FAA8()
{
}

void OZAttractedToBehavior::~OZAttractedToBehavior(OZAttractedToBehavior *this)
{
  *(void *)this = &unk_1F1173B40;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1173E28;
  *((void *)this + 6) = &unk_1F1174080;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11740D8;
  OZChannelBool3D::~OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1224));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1072));
  OZChannelEnum::~OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 664));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZAttractedToBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZAttractedToBehavior::~OZAttractedToBehavior(OZAttractedToBehavior *this)
{
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZAttractedToBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 664, (uint64_t)v5 + 664);
  OZChannelBase::operator=(a1 + 816, (uint64_t)v5 + 816);
  OZChannelBase::operator=(a1 + 1072, (uint64_t)v5 + 1072);
  OZChannelBase::operator=(a1 + 1224, (uint64_t)v5 + 1224);

  return OZChannelBase::operator=(a1 + 1376, (uint64_t)v5 + 1376);
}

const void *OZAttractedToBehavior::getReferencedNode(OZAttractedToBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
}

void OZAttractedToBehavior::calcAttraction(uint64_t a1, const CMTime *a2, double *a3, double *a4, double *a5)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 664), a2, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1224), a2, 0.0);
  double v13 = v12;
  double v14 = *a3 - *a4;
  double v15 = a3[1] - a4[1];
  double v16 = a3[2] - a4[2];
  double v26 = 0.0;
  double v27 = 0.0;
  double v28 = 0.0;
  OZChannelBool3D::getValue(a1 + 1528, MEMORY[0x1E4F1FA48], &v26, 0.0);
  double v17 = v14 * v26;
  double v18 = v15 * v27;
  double v19 = v16 * v28;
  double v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
  if (v20 >= 10.0 && v20 <= v13)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 816), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1072), a2, 0.0);
    if (ValueAsInt) {
      double v24 = v17 * v17 + v18 * v18 + v19 * v19;
    }
    else {
      double v24 = v20;
    }
    double v25 = v11 / (v24 * v23);
    *a5 = v17 * v25;
    a5[1] = v18 * v25;
    a5[2] = v19 * v25;
  }
  else
  {
    *a5 = 0.0;
    a5[1] = 0.0;
    a5[2] = 0.0;
  }
}

uint64_t OZAttractedToBehavior::getMaskVector(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t result = OZChannelBool3D::getValue(a1 + 1528, MEMORY[0x1E4F1FA48], a2, 0.0);
  if (a3)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    do
    {
      double v8 = a2[v6];
      int v9 = v8 <= -0.0000001;
      if (v8 >= 0.0000001) {
        int v9 = 1;
      }
      v7 += v9;
      ++v6;
    }
    while (v6 != 3);
    *a3 = v7;
  }
  return result;
}

void OZAttractedToBehavior::calcAttraction(uint64_t a1, uint64_t a2, OZSimulationState *a3, uint64_t a4)
{
  CMTime v11 = *(CMTime *)(a2 + 176);
  TransformNode = (OZSimulationState *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)(a1 + 504));
  if (!TransformNode || TransformNode == a3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    OZSimulationState::getNodePosition(a2, (CMTime *)(a2 + 176), (uint64_t)TransformNode, a3, v10);
    CMTime v9 = v11;
    OZAttractedToBehavior::calcAttraction(a1, &v9, v10, (double *)a2, (double *)a4);
  }
}

double OZAttractedToBehavior::accumForces(OZAttractedToBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  float64x2_t v9 = 0uLL;
  double v10 = 0.0;
  OZAttractedToBehavior::calcAttraction((uint64_t)this, (uint64_t)a2, (OZSimulationState *)a3, (uint64_t)&v9);
  CMTime v8 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1376), &v8, 0.0);
  double v6 = v10 - v5 * *((double *)a2 + 9);
  *((float64x2_t *)a2 + 8) = vaddq_f64(vsubq_f64(v9, vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v5)), *((float64x2_t *)a2 + 8));
  double result = v6 + *((double *)a2 + 18);
  *((double *)a2 + 18) = result;
  return result;
}

__n128 OZAttractedToBehavior::accumForces(OZAttractedToBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  CMTime v14 = *(CMTime *)((unsigned char *)a2 + 1);
  TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
  if (TransformNode)
  {
    memset(v13, 0, sizeof(v13));
    CMTime v12 = *(CMTime *)((unsigned char *)a2 + 1);
    OZSimulationState::GetNodePosition(&v12, (uint64_t)TransformNode, (OZSimulationState *)a3, v13);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1376), &v14, 0.0);
    memset(&v12, 0, sizeof(v12));
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2 != *((void *)a2 + 1))
    {
      __n128 v10 = result;
      do
      {
        CMTime v11 = v14;
        OZAttractedToBehavior::calcAttraction((uint64_t)this, &v11, v13, (double *)v8, (double *)&v12.value);
        __n128 result = v10;
        double v9 = *(double *)&v12.epoch - v10.n128_f64[0] * *(double *)(v8 + 72);
        *(float64x2_t *)(v8 + 128) = vaddq_f64(vsubq_f64(*(float64x2_t *)&v12.value, vmulq_n_f64(*(float64x2_t *)(v8 + 56), v10.n128_f64[0])), *(float64x2_t *)(v8 + 128));
        *(double *)(v8 + 144) = v9 + *(double *)(v8 + 144);
        v8 += 248;
      }
      while (v8 != *((void *)a2 + 1));
    }
  }
  return result;
}

void OZAttractorBehavior::OZAttractorBehavior(OZAttractorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZTransitiveBehavior::OZTransitiveBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1174118;
  float64x2_t v5[2] = &unk_1F1174408;
  v5[6] = &unk_1F1174660;
  v5[42] = &unk_1F11746B8;
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Strength");
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 792), 300.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Attenuation Type Enum");
  PCURL::PCURL((PCURL *)&v6, @"Attract Behavior Attenuation Type");
  OZChannelEnum::OZChannelEnum((OZAttractorBehavior *)((char *)this + 944), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Attenuation");
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1200), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Cutoff");
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1352), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Drag");
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1504), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Attract Behavior Active Axes");
  OZChannelBool3D::OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656), 1, 1, 0, &v7, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 3u);
  PCString::~PCString(&v7);
  OZChannel::setScale((OZChannel *)((char *)this + 792), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 792), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 1000.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1200), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1352), 4000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1504), 5.0);
}

void sub_1B7D70514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZTransitiveBehavior::~OZTransitiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior::OZAttractorBehavior(OZAttractorBehavior *this, OZAttractorBehavior *a2, char a3)
{
  OZTransitiveBehavior::OZTransitiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1174118;
  *(void *)(v5 + 16) = &unk_1F1174408;
  *(void *)(v5 + 48) = &unk_1F1174660;
  *(void *)(v5 + 336) = &unk_1F11746B8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 99) = &unk_1F1100CF0;
  *((void *)this + 10OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZAttractorBehavior *)((char *)this + 944), (OZAttractorBehavior *)((char *)a2 + 944), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1200), (const OZChannelBase *)((char *)a2 + 1200), v6);
  *((void *)this + 150) = &unk_1F1100CF0;
  *((void *)this + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1352), (const OZChannelBase *)((char *)a2 + 1352), v6);
  *((void *)this + 169) = &unk_1F1100CF0;
  *((void *)this + 17OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1504), (const OZChannelBase *)((char *)a2 + 1504), v6);
  *((void *)this + 188) = &unk_1F1100CF0;
  *((void *)this + 190) = &unk_1F1101050;
  OZChannelBool3D::OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656), (OZAttractorBehavior *)((char *)a2 + 1656), v6);
}

void sub_1B7D70824(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannel::~OZChannel(v2);
  OZTransitiveBehavior::~OZTransitiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D70880()
{
}

void OZAttractorBehavior::~OZAttractorBehavior(OZAttractorBehavior *this)
{
  *(void *)this = &unk_1F1174118;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1174408;
  *((void *)this + 6) = &unk_1F1174660;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11746B8;
  OZChannelBool3D::~OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1504));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1352));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1200));
  OZChannelEnum::~OZChannelEnum((OZAttractorBehavior *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));

  OZTransitiveBehavior::~OZTransitiveBehavior(this);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZAttractorBehavior::~OZAttractorBehavior(OZAttractorBehavior *this)
{
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZAttractorBehavior::operator=(uint64_t a1, const void *a2)
{
  OZTransitiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 792, (uint64_t)v4 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelBase::operator=(a1 + 1200, (uint64_t)v5 + 1200);
  OZChannelBase::operator=(a1 + 1352, (uint64_t)v5 + 1352);

  return OZChannelBase::operator=(a1 + 1504, (uint64_t)v5 + 1504);
}

void OZAttractorBehavior::calcAttraction(uint64_t a1, const CMTime *a2, double *a3, double *a4, double *a5)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 792), a2, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1352), a2, 0.0);
  double v13 = v12;
  double v14 = *a3 - *a4;
  double v15 = a3[1] - a4[1];
  double v16 = a3[2] - a4[2];
  double v26 = 0.0;
  double v27 = 0.0;
  double v28 = 0.0;
  OZChannelBool3D::getValue(a1 + 1656, MEMORY[0x1E4F1FA48], &v26, 0.0);
  double v17 = v14 * v26;
  double v18 = v15 * v27;
  double v19 = v16 * v28;
  double v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
  if (v20 >= 10.0 && v20 <= v13)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 944), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1200), a2, 0.0);
    if (ValueAsInt) {
      double v24 = v17 * v17 + v18 * v18 + v19 * v19;
    }
    else {
      double v24 = v20;
    }
    double v25 = v11 / (v24 * v23);
    *a5 = v17 * v25;
    a5[1] = v18 * v25;
    a5[2] = v19 * v25;
  }
  else
  {
    *a5 = 0.0;
    a5[1] = 0.0;
    a5[2] = 0.0;
  }
}

uint64_t OZAttractorBehavior::getMaskVector(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t result = OZChannelBool3D::getValue(a1 + 1656, MEMORY[0x1E4F1FA48], a2, 0.0);
  if (a3)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    do
    {
      double v8 = a2[v6];
      int v9 = v8 <= -0.0000001;
      if (v8 >= 0.0000001) {
        int v9 = 1;
      }
      v7 += v9;
      ++v6;
    }
    while (v6 != 3);
    *a3 = v7;
  }
  return result;
}

void OZAttractorBehavior::calcAttraction(OZSimulationBehavior *a1, uint64_t a2, OZSimulationState *a3, double *a4)
{
  double v8 = (CMTime *)(a2 + 176);
  CMTime v12 = *(CMTime *)(a2 + 176);
  memset(v11, 0, sizeof(v11));
  TransformNode = OZSimulationBehavior::getTransformNode(a1);
  OZSimulationState::getNodePosition(a2, v8, (uint64_t)TransformNode, a3, v11);
  CMTime v10 = v12;
  OZAttractorBehavior::calcAttraction((uint64_t)a1, &v10, v11, (double *)a2, a4);
}

double OZAttractorBehavior::accumForces(OZAttractorBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  float64x2_t v9 = 0uLL;
  double v10 = 0.0;
  OZAttractorBehavior::calcAttraction(this, (uint64_t)a2, (OZSimulationState *)a3, v9.f64);
  CMTime v8 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), &v8, 0.0);
  double v6 = v10 - v5 * *((double *)a2 + 9);
  *((float64x2_t *)a2 + 8) = vaddq_f64(vsubq_f64(v9, vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v5)), *((float64x2_t *)a2 + 8));
  double result = v6 + *((double *)a2 + 18);
  *((double *)a2 + 18) = result;
  return result;
}

__n128 OZAttractorBehavior::accumForces(OZAttractorBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  CMTime v14 = *(CMTime *)((unsigned char *)a2 + 1);
  memset(v13, 0, sizeof(v13));
  CMTime v12 = *(CMTime *)((unsigned char *)a2 + 1);
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::GetNodePosition(&v12, (uint64_t)TransformNode, (OZSimulationState *)a3, v13);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), &v14, 0.0);
  memset(&v12, 0, sizeof(v12));
  uint64_t v8 = *(void *)a2;
  if (*(void *)a2 != *((void *)a2 + 1))
  {
    __n128 v10 = result;
    do
    {
      CMTime v11 = v14;
      OZAttractorBehavior::calcAttraction((uint64_t)this, &v11, v13, (double *)v8, (double *)&v12.value);
      __n128 result = v10;
      double v9 = *(double *)&v12.epoch - v10.n128_f64[0] * *(double *)(v8 + 72);
      *(float64x2_t *)(v8 + 128) = vaddq_f64(vsubq_f64(*(float64x2_t *)&v12.value, vmulq_n_f64(*(float64x2_t *)(v8 + 56), v10.n128_f64[0])), *(float64x2_t *)(v8 + 128));
      *(double *)(v8 + 144) = v9 + *(double *)(v8 + 144);
      v8 += 248;
    }
    while (v8 != *((void *)a2 + 1));
  }
  return result;
}

void OZAverageBehavior::OZAverageBehavior(OZAverageBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F11746F8;
  float64x2_t v5[2] = &unk_1F1174A38;
  v5[6] = &unk_1F1174C90;
  v5[42] = &unk_1F1174CE8;
  v5[67] = &unk_1F1174D10;
  PCURL::PCURL((PCURL *)&v6, @"Average Behavior Window Size");
  OZChannelDouble::OZChannelDouble((OZAverageBehavior *)((char *)this + 864), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 864), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 20.0);
}

void sub_1B7D710C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZAverageBehavior::OZAverageBehavior(OZAverageBehavior *this, const OZAverageBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11746F8;
  *(void *)(v5 + 16) = &unk_1F1174A38;
  *(void *)(v5 + 48) = &unk_1F1174C90;
  *(void *)(v5 + 336) = &unk_1F1174CE8;
  *(void *)(v5 + 536) = &unk_1F1174D10;
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
}

void sub_1B7D71210(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior::~OZAverageBehavior(OZAverageBehavior *this)
{
  *(void *)this = &unk_1F11746F8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1174A38;
  *((void *)this + 6) = &unk_1F1174C90;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1174CE8;
  *((void *)this + 67) = &unk_1F1174D10;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZAverageBehavior::~OZAverageBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZAverageBehavior::~OZAverageBehavior(OZAverageBehavior *this)
{
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 48));
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 336));
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZAverageBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
}

void OZAverageBehavior::solveNode(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  uint64_t v5 = (void *)*((void *)a3 + 19);
  PCString v6 = (uint64_t *)*((void *)a3 + 10);
  int v7 = (char *)this + 16;
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 2) + 24))((char *)this + 16, 1, 1))
  {
    memset(&v39, 0, sizeof(v39));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v39);
    memset(&v38, 0, sizeof(v38));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v38);
    CMTime v37 = *(CMTime *)((unsigned char *)a3 + 5);
    long long v35 = *((_OWORD *)a3 + 3);
    uint64_t v36 = *((void *)a3 + 8);
    memset(&v34, 0, sizeof(v34));
    __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v34);
    int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*((void *)this + 2) + 24))(v7, 1, 1, FrameDuration);
    Float64 v10 = 0.0;
    if (v9) {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E4F1FA48], 0.0);
    }
    operator*(&v34, v32, v10);
    operator/((long long *)&v32[0].value, (uint64_t)&v35, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    (*(void (**)(CMTime *__return_ptr, OZAverageBehavior *))(*(void *)this + 608))(v32, this);
    v42[0] = v32[0];
    CMTime v41 = v38;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
    operator/((long long *)&v40.value, (uint64_t)&v35, (uint64_t)&v31);
    double v12 = CMTimeGetSeconds(&v31);
    v42[0] = v32[0];
    CMTime v41 = v32[1];
    PC_CMTimeSaferAdd(v42, &v41, (uint64_t)&v40);
    v42[0] = v40;
    CMTime v41 = v34;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v29);
    v42[0] = v29;
    CMTime v41 = v38;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
    operator/((long long *)&v40.value, (uint64_t)&v35, (uint64_t)&v30);
    int v13 = vcvtmd_s64_f64(CMTimeGetSeconds(&v30) + 0.0000001);
    if (*((_DWORD *)a3 + 18) - 1 >= v13) {
      int v14 = v13;
    }
    else {
      int v14 = *((_DWORD *)a3 + 18) - 1;
    }
    if (*((_DWORD *)a3 + 36))
    {
      unint64_t v15 = 0;
      int v16 = (int)Seconds;
      int v17 = vcvtpd_s64_f64(v12);
      int v18 = v17 & ~(v17 >> 31);
      do
      {
        v42[0] = v39;
        CMTime v41 = v38;
        PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
        operator/((long long *)&v40.value, (uint64_t)&v35, (uint64_t)&v28);
        int v19 = vcvtmd_s64_f64(CMTimeGetSeconds(&v28) + 0.5 + 0.0000001);
        CMTime v27 = v39;
        if ((*(unsigned int (**)(OZAverageBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v27, 0, 1, 1))
        {
          v5[v15] = 0;
          int v20 = v19 - v16;
          if (v19 - v16 <= v19 + v16)
          {
            double v21 = 0.0;
            int v22 = (2 * (int)Seconds) | 1;
            do
            {
              if (v20 >= v14) {
                int v23 = v14;
              }
              else {
                int v23 = v20;
              }
              if (v20 < v18) {
                int v23 = v18;
              }
              double v21 = v21 + 1.0 / ((double)v16 + (double)v16 + 1.0) * *(double *)&v6[v23];
              *(double *)&v5[v15] = v21;
              ++v20;
              --v22;
            }
            while (v22);
          }
        }
        else
        {
          int v24 = *((_DWORD *)a3 + 18);
          if (v19 < v24) {
            int v24 = v19;
          }
          if (v19 < 0) {
            int v24 = 0;
          }
          v5[v15] = v6[v24];
        }
        CMTime v41 = v39;
        CMTime v40 = v37;
        PC_CMTimeSaferAdd(&v41, &v40, (uint64_t)v42);
        CMTime v39 = v42[0];
        ++v15;
      }
      while (v15 < *((unsigned int *)a3 + 36));
    }
  }
  else
  {
    uint64_t v25 = *((unsigned int *)a3 + 36);
    if (v25)
    {
      do
      {
        uint64_t v26 = *v6++;
        *v5++ = v26;
        --v25;
      }
      while (v25);
    }
  }
}

void non-virtual thunk to'OZAverageBehavior::solveNode(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
}

OZCurveNodeParam *OZAverageBehavior::getNeededRange(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  uint64_t v5 = (char *)this + 16;
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 2) + 24))((char *)this + 16, 1, 1))
  {
    memset(&v16, 0, sizeof(v16));
    __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v16);
    memset(&v15, 0, sizeof(v15));
    int v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*((void *)this + 2) + 24))(v5, 1, 1, FrameDuration);
    Float64 v8 = 0.0;
    if (v7) {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E4F1FA48], 0.0);
    }
    operator*(&v16, &v15, v8);
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    operator*(2, &v15, &v12);
    operator*(*((_DWORD *)a3 + 36) - 1, (CMTime *)a3 + 5, &v11);
    CMTime v18 = v12;
    CMTime v17 = v11;
    PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v13);
    CMTime v18 = *(CMTime *)((unsigned char *)a3 + 4);
    CMTime v17 = v15;
    PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v12);
    *((CMTime *)a3 + OZLinkBehavior::clearAll(this, 1) = v12;
    operator/(&v13, (uint64_t)&v16, (uint64_t)&v10);
    *((_DWORD *)a3 + 18) = vcvtpd_s64_f64(CMTimeGetSeconds(&v10)) + 1;
    *((CMTime *)a3 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v16;
    operator new[]();
  }
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  *((_OWORD *)a3 + 3) = *(_OWORD *)((char *)a3 + 120);
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return a3;
}

OZCurveNodeParam *non-virtual thunk to'OZAverageBehavior::getNeededRange(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZAverageBehavior::getNeededRange((OZAverageBehavior *)((char *)this - 536), a2, a3);
}

void OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZCollisionBehavior::OZCollisionBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1174D88;
  float64x2_t v5[2] = &unk_1F1175080;
  v5[6] = &unk_1F11752D8;
  v5[42] = &unk_1F1175330;
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Elasticity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 504), 1.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Channel Wrap");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 656), &v6, (OZChannelFolder *)((char *)this + 56), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Active Edges");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 808), &v6, (OZChannelFolder *)((char *)this + 56), 0x1F6u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Left Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 936), 1, &v6, (OZChannelFolder *)((char *)this + 808), 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Right Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1088), 1, &v6, (OZChannelFolder *)((char *)this + 808), 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Top Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1240), 1, &v6, (OZChannelFolder *)((char *)this + 808), 3u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Bottom Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1392), 1, &v6, (OZChannelFolder *)((char *)this + 808), 4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Back Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1544), 1, &v6, (OZChannelFolder *)((char *)this + 808), 5u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Front Active");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), 1, &v6, (OZChannelFolder *)((char *)this + 808), 6u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Width");
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 1848), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Height");
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 2000), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Bounds Collision Behavior Depth");
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 2152), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F9u, 0, 0, 0);
  PCString::~PCString(&v6);
  *((unsigned char *)this + 2304) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 656), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 656));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 936));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1088), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1088));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1240), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1240));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1392), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1392));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1544), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1544));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1696), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1696));
  OZChannel::setMin((OZChannel *)((char *)this + 1848), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2000), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2152), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1848), 1000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2000), 1000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2152), 1000.0);
}

void sub_1B7D72168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, PCString a14)
{
  PCString::~PCString(&a14);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelBool::~OZChannelBool(v21);
  OZChannelBool::~OZChannelBool(v20);
  OZChannelBool::~OZChannelBool(v19);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelFolder::~OZChannelFolder(v17);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelPercent::~OZChannelPercent(a10);
  OZCollisionBehavior::~OZCollisionBehavior(v14);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this, OZBoundsCollisionBehavior *a2, char a3)
{
  OZCollisionBehavior::OZCollisionBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1174D88;
  *(void *)(v5 + 16) = &unk_1F1175080;
  *(void *)(v5 + 48) = &unk_1F11752D8;
  *(void *)(v5 + 336) = &unk_1F1175330;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 656), (const OZChannelBase *)((char *)a2 + 656), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 808), (const OZChannelFolder *)((char *)a2 + 808), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 936), (const OZChannelBase *)((char *)a2 + 936), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1088), (const OZChannelBase *)((char *)a2 + 1088), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1240), (const OZChannelBase *)((char *)a2 + 1240), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1392), (const OZChannelBase *)((char *)a2 + 1392), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1544), (const OZChannelBase *)((char *)a2 + 1544), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), (const OZChannelBase *)((char *)a2 + 1696), (OZChannelFolder *)((char *)this + 808));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1848), (const OZChannelBase *)((char *)a2 + 1848), v6);
  *((void *)this + 23OZLinkBehavior::clearAll(this, 1) = &unk_1F1100CF0;
  *((void *)this + 233) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2000), (const OZChannelBase *)((char *)a2 + 2000), v6);
  *((void *)this + 250) = &unk_1F1100CF0;
  *((void *)this + 25OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2152), (const OZChannelBase *)((char *)a2 + 2152), v6);
  *((void *)this + 269) = &unk_1F1100CF0;
  *((void *)this + 27OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  *((unsigned char *)this + 2304) = *((unsigned char *)a2 + 2304);
}

void sub_1B7D7258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannelBool *a11, OZChannelPercent *a12)
{
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelBool::~OZChannelBool(v19);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v15);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZCollisionBehavior::~OZCollisionBehavior(v12);
  _Unwind_Resume(a1);
}

void sub_1B7D72618()
{
}

void sub_1B7D72620()
{
}

void sub_1B7D72628()
{
}

void sub_1B7D72630()
{
}

void sub_1B7D72638()
{
}

void sub_1B7D72640()
{
}

void sub_1B7D72648()
{
}

void OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this)
{
  *(void *)this = &unk_1F1174D88;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1175080;
  *((void *)this + 6) = &unk_1F11752D8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1175330;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2152));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1848));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1696));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1544));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1392));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1240));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 936));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 808));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 656));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 504));

  OZCollisionBehavior::~OZCollisionBehavior(this);
}

{
  uint64_t vars8;

  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this)
{
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 48));
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZBoundsCollisionBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCollisionBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 656, (uint64_t)v5 + 656);
  OZChannelFolder::operator=(a1 + 808);
  OZChannelBase::operator=(a1 + 936, (uint64_t)v5 + 936);
  OZChannelBase::operator=(a1 + 1088, (uint64_t)v5 + 1088);
  OZChannelBase::operator=(a1 + 1240, (uint64_t)v5 + 1240);
  OZChannelBase::operator=(a1 + 1392, (uint64_t)v5 + 1392);
  OZChannelBase::operator=(a1 + 1544, (uint64_t)v5 + 1544);
  OZChannelBase::operator=(a1 + 1696, (uint64_t)v5 + 1696);
  OZChannelBase::operator=(a1 + 1848, (uint64_t)v5 + 1848);
  OZChannelBase::operator=(a1 + 2000, (uint64_t)v5 + 2000);

  return OZChannelBase::operator=(a1 + 2152, (uint64_t)v5 + 2152);
}

void OZBoundsCollisionBehavior::didAddToNode(OZBoundsCollisionBehavior *this, OZSceneNode **a2)
{
  OZReflexiveBehavior::didAddToNode(this, a2);
  int v4 = (OZScene *)(*((uint64_t (**)(OZSceneNode **))*a2 + 34))(a2);
  if (v4)
  {
    OZBoundsCollisionBehavior::copySceneDimensionsToChans(this, v4);
  }
}

void OZBoundsCollisionBehavior::copySceneDimensionsToChans(OZBoundsCollisionBehavior *this, OZScene *a2)
{
  if (!*((unsigned char *)this + 2304))
  {
    int v4 = (OZChannelBase *)((char *)this + 1848);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 1848), (double)*((int *)a2 + 86));
    OZChannelBase::reset(v4, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 2000), (double)*((int *)a2 + 87));
    OZChannelBase::reset((OZChannelBase *)((char *)this + 2000), 0);
    *((unsigned char *)this + 2304) = 1;
  }
}

uint64_t OZBoundsCollisionBehavior::parseEnd(OZBoundsCollisionBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 26);
  *((unsigned char *)this + 2304) = 1;
  if (v4 <= 2 && (*(uint64_t (**)(OZBoundsCollisionBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v5 = (OZScene *)(*(uint64_t (**)(OZBoundsCollisionBehavior *))(*(void *)this + 336))(this);
    OZBoundsCollisionBehavior::copySceneDimensionsToChans(this, v5);
  }

  return OZReflexiveBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZBoundsCollisionBehavior::parseEnd(OZBoundsCollisionBehavior *this, PCSerializerReadStream *a2)
{
  return OZBoundsCollisionBehavior::parseEnd((OZBoundsCollisionBehavior *)((char *)this - 48), a2);
}

void OZBoundsCollisionBehavior::handleCollisions(OZBoundsCollisionBehavior *this, OZTransformNode *lpsrc, OZSimulationState *a3, OZSimulationState *a4, BOOL a5, BOOL *a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!lpsrc) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)lpsrc;
  if (!v10 || !(*(unsigned int (**)(OZTransformNode *))(v9 + 1008))(lpsrc)) {
    goto LABEL_12;
  }
  unint64_t v11 = *((void *)lpsrc + 1);
  long long v50 = xmmword_1B7E78220;
  if (!OZFactory::isKindOfClass(v11, (int32x4_t *)&v50))
  {
LABEL_11:
    CMTime v10 = 0;
    goto LABEL_12;
  }
  uint64_t v12 = (*(uint64_t (**)(OZTransformNode *))(*(void *)lpsrc + 1016))(lpsrc);
  if (v12)
  {
    *(void *)&v51[0] = v51;
    *((void *)&v51[0] + OZLinkBehavior::clearAll(this, 1) = v51;
    *(void *)&v51[1] = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 48))(v12, v51);
    uint64_t v13 = *((void *)&v51[0] + 1);
    if (*((_OWORD **)&v51[0] + 1) != v51)
    {
      while (1)
      {
        uint64_t v14 = *(void **)(v13 + 16);
        if (((*(uint64_t (**)(void))(v14[2] + 48))() & 1) == 0
        {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
        if ((_OWORD *)v13 == v51) {
          goto LABEL_73;
        }
      }
      CMTime v10 = 0;
    }
LABEL_73:
    std::__list_imp<unsigned int>::clear(v51);
  }
LABEL_12:
  CMTime v49 = *(CMTime *)((char *)a4 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v49, 0.0);
  double v16 = v15;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), &v49, 0.0);
  int v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1088), &v49, 0.0);
  int v48 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1240), &v49, 0.0);
  int v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1392), &v49, 0.0);
  int v46 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1544), &v49, 0.0);
  int v45 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1696), &v49, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1848), &v49, 0.0);
  double v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2000), &v49, 0.0);
  double v23 = v22;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2152), &v49, 0.0);
  if (ValueAsInt == 0 && v18 == 0 && v48 == 0 && v19 == 0) {
    return;
  }
  double v25 = v21 * -0.5;
  double v26 = -(v21 * -0.5);
  double v27 = v23 * 0.5;
  double v28 = -(v23 * 0.5);
  double v29 = v24 * 0.5;
  double v30 = -(v24 * 0.5);
  if (!v10)
  {
    if (ValueAsInt && *(double *)a4 < v25)
    {
      *(double *)a4 = v25;
      *((double *)a4 + 7) = -(v16 * *((double *)a4 + 7));
    }
    int8x16_t v42 = a6;
    if (v19 && *((double *)a4 + 1) < v28)
    {
      *((double *)a4 + OZLinkBehavior::clearAll(this, 1) = v28;
      *((double *)a4 + 8) = -(v16 * *((double *)a4 + 8));
    }
    if (v46 && *((double *)a4 + 2) < v30)
    {
      *((double *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v30;
      *((double *)a4 + 9) = -(v16 * *((double *)a4 + 9));
    }
    if (v18 && *(double *)a4 > v26)
    {
      *(double *)a4 = v26;
      *((double *)a4 + 7) = -(v16 * *((double *)a4 + 7));
    }
    if (v48 && *((double *)a4 + 1) > v27)
    {
      *((double *)a4 + OZLinkBehavior::clearAll(this, 1) = v27;
      *((double *)a4 + 8) = -(v16 * *((double *)a4 + 8));
    }
    if (!v45 || *((double *)a4 + 2) <= v29) {
      goto LABEL_70;
    }
    *((double *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v29;
    goto LABEL_69;
  }
  memset(v52, 0, sizeof(v52));
  memset(v51, 0, sizeof(v51));
  OZSimulationState::getTransformedCorners((uint64_t)a4, (uint64_t)v10, (uint64_t)v51, (uint64_t)&v51[1] + 8, (uint64_t)v52, (uint64_t)&v52[1] + 8);
  uint64_t v31 = 0;
  double v32 = 3.40282347e38;
  double v33 = -3.40282347e38;
  double v34 = -3.40282347e38;
  double v35 = 3.40282347e38;
  double v36 = -3.40282347e38;
  double v37 = 3.40282347e38;
  do
  {
    double v39 = *(double *)((char *)v51 + v31);
    double v40 = *(double *)((char *)v51 + v31 + 8);
    if (v37 > v39) {
      double v37 = *(double *)((char *)v51 + v31);
    }
    if (v35 > v40) {
      double v35 = *(double *)((char *)v51 + v31 + 8);
    }
    CMTime v38 = (double *)((char *)v51 + v31);
    double v41 = *(double *)((char *)&v51[1] + v31);
    if (v32 > v41) {
      double v32 = v38[2];
    }
    if (v36 < v39) {
      double v36 = *(double *)((char *)v51 + v31);
    }
    if (v34 < v40) {
      double v34 = *(double *)((char *)v51 + v31 + 8);
    }
    if (v33 < v41) {
      double v33 = v38[2];
    }
    v31 += 24;
  }
  while (v31 != 96);
  int8x16_t v42 = a6;
  if (v36 - v37 < v26 - v25)
  {
    if (ValueAsInt && v37 < v25)
    {
      double v43 = v25 - v37 + *(double *)a4;
    }
    else
    {
      if (!v18 || v36 <= v26) {
        goto LABEL_54;
      }
      double v43 = v26 - v36 + *(double *)a4;
    }
    *(double *)a4 = v43;
    *((double *)a4 + 7) = -(v16 * *((double *)a4 + 7));
  }
LABEL_54:
  if (v34 - v35 < v27 + v27)
  {
    if (v19 && v35 < v28)
    {
      *((double *)a4 + OZLinkBehavior::clearAll(this, 1) = v28 - v35 + *((double *)a4 + 1);
      *((double *)a4 + 8) = -(v16 * *((double *)a4 + 8));
    }
    if (v48 && v34 > v27)
    {
      *((double *)a4 + OZLinkBehavior::clearAll(this, 1) = v27 - v34 + *((double *)a4 + 1);
      *((double *)a4 + 8) = -(v16 * *((double *)a4 + 8));
    }
  }
  if (v33 - v32 >= v29 + v29) {
    goto LABEL_70;
  }
  if (v46 && v32 < v30)
  {
    double v44 = v30 - v32 + *((double *)a4 + 2);
  }
  else
  {
    if (!v45 || v33 <= v29) {
      goto LABEL_70;
    }
    double v44 = v29 - v33 + *((double *)a4 + 2);
  }
  *((double *)a4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v44;
LABEL_69:
  *((double *)a4 + 9) = -(v16 * *((double *)a4 + 9));
LABEL_70:
  BOOL *v42 = 0;
}

void sub_1B7D73144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior::OZBrownianBehavior(OZBrownianBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1175370;
  float64x2_t v5[2] = &unk_1F1175658;
  v5[6] = &unk_1F11758B0;
  v5[42] = &unk_1F1175908;
  PCURL::PCURL((PCURL *)&v18, @"Brownian Behavior Magnitude");
  Instance = (OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *)OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(v6);
  Float64 v8 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 504), 15.0, &v18, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, @"Wriggle Behavior Frequency");
  CMTime v10 = (OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *)OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(v9);
  unint64_t v11 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(v10);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 656), 1.0, &v18, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, (OZChannelImpl *)v10, v11);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, @"Wriggle Behavior Noisiness");
  uint64_t v13 = (OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *)OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(v12);
  uint64_t v14 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 808), 0.5, &v18, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, (OZChannelImpl *)v13, v14);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, @"Brownian Behavior Drag");
  double v16 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(v15);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 960), &v18, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, v16);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, @"Brownian Behavior Active Axes");
  OZChannelBool3D::OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112), 1, 1, 0, &v18, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 3u);
  PCString::~PCString(&v18);
  unsigned int v17 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v18, @"Brownian Behavior Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 1704), v17, &v18, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v18);
}

void sub_1B7D73430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool3D::~OZChannelBool3D(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7D734E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZBrownianBehavior::OZBrownianBehavior(OZBrownianBehavior *this, OZBrownianBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1175370;
  *(void *)(v5 + 16) = &unk_1F1175658;
  *(void *)(v5 + 48) = &unk_1F11758B0;
  *(void *)(v5 + 336) = &unk_1F1175908;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 63) = &unk_1F1100CF0;
  *((void *)this + 65) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 656), (const OZChannelBase *)((char *)a2 + 656), v6);
  *((void *)this + 8OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 84) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 808), (const OZChannelBase *)((char *)a2 + 808), v6);
  *((void *)this + 10OZLinkBehavior::clearAll(this, 1) = &unk_1F1100CF0;
  *((void *)this + 103) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 960), (const OZChannelBase *)((char *)a2 + 960), v6);
  *((void *)this + 120) = &unk_1F1100CF0;
  *((void *)this + 12OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannelBool3D::OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112), (OZBrownianBehavior *)((char *)a2 + 1112), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1704), (const OZChannelBase *)((char *)a2 + 1704), v6);
  *((void *)this + 213) = &unk_1F1102B70;
  *((void *)this + 215) = &unk_1F1102ED0;
}

void sub_1B7D7375C(_Unwind_Exception *a1)
{
  OZChannelBool3D::~OZChannelBool3D(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D737B8()
{
}

void OZBrownianBehavior::~OZBrownianBehavior(OZBrownianBehavior *this)
{
  *(void *)this = &unk_1F1175370;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1175658;
  *((void *)this + 6) = &unk_1F11758B0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1175908;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1704));
  OZChannelBool3D::~OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 808));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZBrownianBehavior::~OZBrownianBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZBrownianBehavior::~OZBrownianBehavior(OZBrownianBehavior *this)
{
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 48));
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZBrownianBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 656, (uint64_t)v5 + 656);
  OZChannelBase::operator=(a1 + 808, (uint64_t)v5 + 808);
  OZChannelBase::operator=(a1 + 960, (uint64_t)v5 + 960);
  OZChannelFolder::operator=(a1 + 1112);
  OZChannelBase::operator=(a1 + 1248, (uint64_t)v5 + 1248);
  OZChannelBase::operator=(a1 + 1400, (uint64_t)v5 + 1400);
  OZChannelBase::operator=(a1 + 1552, (uint64_t)v5 + 1552);

  return OZChannelBase::operator=(a1 + 1704, (uint64_t)v5 + 1704);
}

uint64_t OZBrownianBehavior::accumForces(OZBrownianBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v85 = *(CMTime *)((char *)a2 + 176);
  CMTime v84 = v85;
  uint64_t result = (*(uint64_t (**)(OZBrownianBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v84, 0, 1, 1);
  if (result)
  {
    memset(&v83, 0, sizeof(v83));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v81);
    CMTime v87 = v85;
    *(__n128 *)&v86.CMTimeValue value = v81;
    v86.CMTimeEpoch epoch = v82;
    v7.n128_f64[0] = PC_CMTimeSaferAdd(&v87, &v86, (uint64_t)&v83);
    uint64_t v8 = *(void *)(*(uint64_t (**)(OZBrownianBehavior *, __n128))(*(void *)this + 320))(this, v7);
    __n128 v9 = ((__n128 (*)(void))*(void *)(v8 + 272))();
    v9.n128_u64[0] = 0;
    __n128 v76 = v9;
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1704), &v85, 0.0);
    int v11 = ValueAsInt;
    if (a3) {
      int v11 = *((_DWORD *)a3 + 20) ^ ValueAsInt;
    }
    CMTime time = v83;
    Float64 v12 = CMTimeGetSeconds(&time) + 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 656), &v85, 0.0);
    double v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 808), &v85, 0.0);
    double v16 = v15;
    unsigned int v17 = 0;
    double v77 = v12 + v12;
    int v18 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
    int v19 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
    int v20 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
    double v21 = 1.0;
    double v22 = v14;
    do
    {
      int v23 = (int)(v77 * v22);
      int v24 = -32;
      int v25 = -1640531527;
      unsigned int v26 = v17;
      unsigned int v27 = v11;
      do
      {
        v26 += (v23 + 16 * v27) ^ (v27 + v25) ^ (v18 + (v27 >> 5));
        v27 += (v19 + 16 * v26) ^ (v25 + v26) ^ (v20 + (v26 >> 5));
        v25 -= 1640531527;
        BOOL v28 = __CFADD__(v24++, 1);
      }
      while (!v28);
      int v29 = -32;
      int v30 = -1640531527;
      unsigned int v31 = v17;
      unsigned int v32 = v11;
      do
      {
        v31 += (v23 + 1 + 16 * v32) ^ (v32 + v30) ^ (v18 + (v32 >> 5));
        v32 += (v19 + 16 * v31) ^ (v30 + v31) ^ (v20 + (v31 >> 5));
        v30 -= 1640531527;
        BOOL v28 = __CFADD__(v29++, 1);
      }
      while (!v28);
      double v33 = (double)(int)(v27 ^ v26) / 2147483650.0;
      double v34 = (double)(int)(v32 ^ v31) / 2147483650.0;
      *(double *)&long long v35 = cos((v77 * v22 - (double)v23) * 3.14159265);
      v36.n128_u64[1] = v76.n128_u64[1];
      v36.n128_f64[0] = v76.n128_f64[0]
                      + v21 * ((1.0 - (1.0 - *(double *)&v35) * 0.5) * v33 + (1.0 - *(double *)&v35) * 0.5 * v34);
      __n128 v76 = v36;
      double v22 = v22 + v22;
      double v21 = v16 * v21;
      ++v17;
    }
    while (v17 != 10);
    unsigned int v37 = 0;
    *(void *)&long long v35 = 0;
    long long v75 = v35;
    double v38 = v14;
    double v39 = 1.0;
    do
    {
      int v40 = (int)(v77 * v38);
      int v41 = -32;
      int v42 = -1640531527;
      unsigned int v43 = v37;
      unsigned int v44 = ~v11;
      do
      {
        v43 += (v40 + 16 * v44) ^ (v44 + v42) ^ (v18 + (v44 >> 5));
        v44 += (v19 + 16 * v43) ^ (v42 + v43) ^ (v20 + (v43 >> 5));
        v42 -= 1640531527;
        BOOL v28 = __CFADD__(v41++, 1);
      }
      while (!v28);
      int v45 = -32;
      int v46 = -1640531527;
      unsigned int v47 = v37;
      unsigned int v48 = ~v11;
      do
      {
        v47 += (v40 + 1 + 16 * v48) ^ (v48 + v46) ^ (v18 + (v48 >> 5));
        v48 += (v19 + 16 * v47) ^ (v46 + v47) ^ (v20 + (v47 >> 5));
        v46 -= 1640531527;
        BOOL v28 = __CFADD__(v45++, 1);
      }
      while (!v28);
      double v49 = (double)(int)(v44 ^ v43) / 2147483650.0;
      double v50 = (double)(int)(v48 ^ v47) / 2147483650.0;
      long double v51 = cos((v77 * v38 - (double)v40) * 3.14159265);
      *((void *)&v52 + OZLinkBehavior::clearAll(this, 1) = *((void *)&v75 + 1);
      *(double *)&long long v52 = *(double *)&v75 + v39 * ((1.0 - (1.0 - v51) * 0.5) * v49 + (1.0 - v51) * 0.5 * v50);
      long long v75 = v52;
      double v38 = v38 + v38;
      double v39 = v16 * v39;
      ++v37;
    }
    while (v37 != 10);
    unsigned int v53 = 0;
    int v54 = v11 + 511;
    double v55 = 0.0;
    double v56 = 1.0;
    do
    {
      int v57 = (int)(v77 * v14);
      int v58 = -32;
      int v59 = -1640531527;
      unsigned int v60 = v53;
      unsigned int v61 = v54;
      do
      {
        v60 += (v57 + 16 * v61) ^ (v59 + v61) ^ (v18 + (v61 >> 5));
        v61 += (v19 + 16 * v60) ^ (v59 + v60) ^ (v20 + (v60 >> 5));
        v59 -= 1640531527;
        BOOL v28 = __CFADD__(v58++, 1);
      }
      while (!v28);
      int v62 = -32;
      int v63 = -1640531527;
      unsigned int v64 = v53;
      unsigned int v65 = v54;
      do
      {
        v64 += (v57 + 1 + 16 * v65) ^ (v63 + v65) ^ (v18 + (v65 >> 5));
        v65 += (v19 + 16 * v64) ^ (v63 + v64) ^ (v20 + (v64 >> 5));
        v63 -= 1640531527;
        BOOL v28 = __CFADD__(v62++, 1);
      }
      while (!v28);
      double v66 = (double)(int)(v61 ^ v60) / 2147483650.0;
      double v67 = (double)(int)(v65 ^ v64) / 2147483650.0;
      long double v68 = cos((v77 * v14 - (double)v57) * 3.14159265);
      double v55 = v55 + v56 * ((1.0 - (1.0 - v68) * 0.5) * v66 + (1.0 - v68) * 0.5 * v67);
      double v14 = v14 + v14;
      double v56 = v16 * v56;
      ++v53;
    }
    while (v53 != 10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v85, 0.0);
    double v78 = v69;
    double v70 = v55 * v69;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 960), &v85, 0.0);
    double v72 = v70 - v71 * *((double *)a2 + 9);
    memset(&v87, 0, sizeof(v87));
    *(void *)&v73.f64[0] = v76.n128_u64[0];
    *(void *)&v73.f64[1] = v75;
    float64x2_t v79 = vsubq_f64(vmulq_n_f64(v73, v78), vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v71));
    uint64_t result = OZChannelBool3D::getValue((uint64_t)this + 1112, &v85, (double *)&v87.value, 0.0);
    double v74 = v72 * *(double *)&v87.epoch;
    *((float64x2_t *)a2 + 8) = vaddq_f64(vmulq_f64(v79, *(float64x2_t *)&v87.value), *((float64x2_t *)a2 + 8));
    *((double *)a2 + 18) = v74 + *((double *)a2 + 18);
  }
  return result;
}

void OZBrownianBehavior::accumForces(OZBrownianBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  CMTime v83 = *(CMTime *)((unsigned char *)a2 + 1);
  CMTime v82 = v83;
  if ((*(unsigned int (**)(OZBrownianBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v82, 1, 1, 1))
  {
    memset(&v81, 0, sizeof(v81));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v79);
    CMTime v85 = v83;
    *(__n128 *)&v84.CMTimeValue value = v79;
    v84.CMTimeEpoch epoch = v80;
    v5.n128_f64[0] = PC_CMTimeSaferAdd(&v85, &v84, (uint64_t)&v81);
    uint64_t v6 = *(void *)(*(uint64_t (**)(OZBrownianBehavior *, __n128))(*(void *)this + 320))(this, v5);
    (*(void (**)(void))(v6 + 272))();
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1704), &v83, 0.0);
    CMTime time = v81;
    double Seconds = CMTimeGetSeconds(&time);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 656), &v83, 0.0);
    double v72 = v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 808), &v83, 0.0);
    double v77 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 960), &v83, 0.0);
    double v71 = v10;
    memset(&v85, 0, sizeof(v85));
    OZChannelBool3D::getValue((uint64_t)this + 1112, &v83, (double *)&v85.value, 0.0);
    uint64_t v11 = *(void *)a2;
    if (*(void *)a2 != *((void *)a2 + 1))
    {
      double v76 = Seconds + 0.0 + Seconds + 0.0;
      Float64 v12 = (OZChannel *)((char *)this + 504);
      do
      {
        __n128 v13 = ((__n128 (*)(void))*(void *)(**(void **)(v11 + 232) + 32))(*(void *)(v11 + 232));
        unsigned int v14 = 0;
        int v16 = v15 ^ ValueAsInt;
        int v17 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
        int v18 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
        int v19 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
        v13.n128_u64[0] = 0;
        __n128 v75 = v13;
        double v20 = 1.0;
        double v21 = v72;
        do
        {
          int v22 = (int)(v76 * v21);
          int v23 = -32;
          int v24 = -1640531527;
          unsigned int v25 = v14;
          unsigned int v26 = v16;
          do
          {
            v25 += (v22 + 16 * v26) ^ (v26 + v24) ^ (v17 + (v26 >> 5));
            v26 += (v18 + 16 * v25) ^ (v24 + v25) ^ (v19 + (v25 >> 5));
            v24 -= 1640531527;
            BOOL v27 = __CFADD__(v23++, 1);
          }
          while (!v27);
          int v28 = -32;
          int v29 = -1640531527;
          unsigned int v30 = v14;
          unsigned int v31 = v16;
          do
          {
            v30 += (v22 + 1 + 16 * v31) ^ (v31 + v29) ^ (v17 + (v31 >> 5));
            v31 += (v18 + 16 * v30) ^ (v29 + v30) ^ (v19 + (v30 >> 5));
            v29 -= 1640531527;
            BOOL v27 = __CFADD__(v28++, 1);
          }
          while (!v27);
          double v32 = (double)(int)(v26 ^ v25) / 2147483650.0;
          double v33 = (double)(int)(v31 ^ v30) / 2147483650.0;
          *(double *)&long long v34 = cos((v76 * v21 - (double)v22) * 3.14159265);
          v35.n128_u64[1] = v75.n128_u64[1];
          v35.n128_f64[0] = v75.n128_f64[0]
                          + v20 * ((1.0 - (1.0 - *(double *)&v34) * 0.5) * v32 + (1.0 - *(double *)&v34) * 0.5 * v33);
          __n128 v75 = v35;
          double v21 = v21 + v21;
          double v20 = v77 * v20;
          ++v14;
        }
        while (v14 != 10);
        unsigned int v36 = 0;
        *(void *)&long long v34 = 0;
        long long v74 = v34;
        double v37 = 1.0;
        double v38 = v72;
        do
        {
          int v39 = (int)(v76 * v38);
          int v40 = -32;
          int v41 = -1640531527;
          unsigned int v42 = v36;
          unsigned int v43 = ~v16;
          do
          {
            v42 += (v39 + 16 * v43) ^ (v43 + v41) ^ (v17 + (v43 >> 5));
            v43 += (v18 + 16 * v42) ^ (v41 + v42) ^ (v19 + (v42 >> 5));
            v41 -= 1640531527;
            BOOL v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
          int v44 = -32;
          int v45 = -1640531527;
          unsigned int v46 = v36;
          unsigned int v47 = ~v16;
          do
          {
            v46 += (v39 + 1 + 16 * v47) ^ (v47 + v45) ^ (v17 + (v47 >> 5));
            v47 += (v18 + 16 * v46) ^ (v45 + v46) ^ (v19 + (v46 >> 5));
            v45 -= 1640531527;
            BOOL v27 = __CFADD__(v44++, 1);
          }
          while (!v27);
          double v48 = (double)(int)(v43 ^ v42) / 2147483650.0;
          double v49 = (double)(int)(v47 ^ v46) / 2147483650.0;
          long double v50 = cos((v76 * v38 - (double)v39) * 3.14159265);
          *((void *)&v51 + OZLinkBehavior::clearAll(this, 1) = *((void *)&v74 + 1);
          *(double *)&long long v51 = *(double *)&v74 + v37 * ((1.0 - (1.0 - v50) * 0.5) * v48 + (1.0 - v50) * 0.5 * v49);
          long long v74 = v51;
          double v38 = v38 + v38;
          double v37 = v77 * v37;
          ++v36;
        }
        while (v36 != 10);
        unsigned int v52 = 0;
        double v53 = 0.0;
        double v54 = 1.0;
        double v55 = v72;
        do
        {
          int v56 = (int)(v76 * v55);
          int v57 = -32;
          int v58 = -1640531527;
          unsigned int v59 = v52;
          unsigned int v60 = v16 + 511;
          do
          {
            v59 += (v56 + 16 * v60) ^ (v58 + v60) ^ (v17 + (v60 >> 5));
            v60 += (v18 + 16 * v59) ^ (v58 + v59) ^ (v19 + (v59 >> 5));
            v58 -= 1640531527;
            BOOL v27 = __CFADD__(v57++, 1);
          }
          while (!v27);
          int v61 = -32;
          int v62 = -1640531527;
          unsigned int v63 = v52;
          unsigned int v64 = v16 + 511;
          do
          {
            v63 += (v56 + 1 + 16 * v64) ^ (v62 + v64) ^ (v17 + (v64 >> 5));
            v64 += (v18 + 16 * v63) ^ (v62 + v63) ^ (v19 + (v63 >> 5));
            v62 -= 1640531527;
            BOOL v27 = __CFADD__(v61++, 1);
          }
          while (!v27);
          double v65 = (double)(int)(v60 ^ v59) / 2147483650.0;
          double v66 = (double)(int)(v64 ^ v63) / 2147483650.0;
          long double v67 = cos((v76 * v55 - (double)v56) * 3.14159265);
          double v53 = v53 + v54 * ((1.0 - (1.0 - v67) * 0.5) * v65 + (1.0 - v67) * 0.5 * v66);
          double v55 = v55 + v55;
          double v54 = v77 * v54;
          ++v52;
        }
        while (v52 != 10);
        OZChannel::getValueAsDouble(v12, &v83, 0.0);
        double v69 = (v53 * v68 - v71 * *(double *)(v11 + 72)) * *(double *)&v85.epoch;
        *(void *)&v70.f64[0] = v75.n128_u64[0];
        *(void *)&v70.f64[1] = v74;
        *(float64x2_t *)(v11 + 128) = vaddq_f64(vmulq_f64(vsubq_f64(vmulq_n_f64(v70, v68), vmulq_n_f64(*(float64x2_t *)(v11 + 56), v71)), *(float64x2_t *)&v85.value), *(float64x2_t *)(v11 + 128));
        *(double *)(v11 + 144) = v69 + *(double *)(v11 + 144);
        v11 += 248;
      }
      while (v11 != *((void *)a2 + 1));
    }
  }
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::OZBrownianBehavior_magnitudeChanImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::OZBrownianBehavior_magnitudeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::_OZBrownianBehavior_magnitudeChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::_OZBrownianBehavior_magnitudeChan) {
    operator new();
  }
}

void sub_1B7D74824(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::OZBrownianBehavior_magnitudeChanImpl(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *this)
{
}

void sub_1B7D748FC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::OZBrownianBehavior_magnitudeChanInfo_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::OZBrownianBehavior_magnitudeChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::_OZBrownianBehavior_magnitudeChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::_OZBrownianBehavior_magnitudeChanInfo) {
    operator new();
  }
}

void sub_1B7D749D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::OZBrownianBehavior_magnitudeChanInfo(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 50.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11759C0;
  *((void *)this + 10) = &unk_1F11759E0;
  return this;
}

void sub_1B7D74AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::OZBrownianBehavior_frequencyChanImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::OZBrownianBehavior_frequencyChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::_OZBrownianBehavior_frequencyChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::_OZBrownianBehavior_frequencyChan) {
    operator new();
  }
}

void sub_1B7D74B88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::OZBrownianBehavior_frequencyChanImpl(OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *this)
{
}

void sub_1B7D74C60(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::OZBrownianBehavior_frequencyChanInfo_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::OZBrownianBehavior_frequencyChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::_OZBrownianBehavior_frequencyChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::_OZBrownianBehavior_frequencyChanInfo) {
    operator new();
  }
}

void sub_1B7D74D3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::OZBrownianBehavior_frequencyChanInfo(OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1175AB0;
  *((void *)this + 10) = &unk_1F1175AD0;
  return this;
}

void sub_1B7D74E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::OZBrownianBehavior_amplitudeStepChanImpl_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::OZBrownianBehavior_amplitudeStepChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::_OZBrownianBehavior_amplitudeStepChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::_OZBrownianBehavior_amplitudeStepChan) {
    operator new();
  }
}

void sub_1B7D74EE8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::OZBrownianBehavior_amplitudeStepChanImpl(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *this)
{
}

void sub_1B7D74FB8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::OZBrownianBehavior_amplitudeStepChanInfo_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::OZBrownianBehavior_amplitudeStepChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::_OZBrownianBehavior_amplitudeStepChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::_OZBrownianBehavior_amplitudeStepChanInfo) {
    operator new();
  }
}

void sub_1B7D75094(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::OZBrownianBehavior_amplitudeStepChanInfo(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1175BA0;
  *((void *)this + 10) = &unk_1F1175BC0;
  return this;
}

void sub_1B7D75164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::OZBrownianBehavior_dragChanInfo_once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::OZBrownianBehavior_dragChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::_OZBrownianBehavior_dragChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::_OZBrownianBehavior_dragChanInfo) {
    operator new();
  }
}

void sub_1B7D75240(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::OZBrownianBehavior_dragChanInfo(OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1175C18;
  *((void *)this + 10) = &unk_1F1175C38;
  return this;
}

void sub_1B7D75310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelSeed::OZChannelSeed(OZChannelSeed *this, unsigned int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelSeed_FactoryBase = (OZFactory *)getOZChannelSeed_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelSeed_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F1102B70;
  this->var2 = (void **)&unk_1F1102ED0;
  OZChannelSeedInfo = (OZChannelSeed *)OZChannelSeed::createOZChannelSeedInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
    this->var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
  }
  this->var16 = var17;
  OZChannelSeed::createOZChannelSeedImpl(OZChannelSeedInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
    this->var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B7D75460(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::OZCameraBehavior(OZCameraBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F1175C90;
  *(void *)(v5 + 16) = &unk_1F1175FB0;
  *(void *)(v5 + 48) = &unk_1F1176208;
  *(void *)(v5 + 336) = &unk_1F1176260;
  *(void *)(v5 + 536) = &unk_1F1176288;
  *(unsigned char *)(v5 + 544) = 0;
  *(_OWORD *)(v5 + 55OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 600));
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = (char *)this + 712;
  PCSharedMutex::PCSharedMutex((OZCameraBehavior *)((char *)this + 728));
  *((void *)this + 106) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 104) = (char *)this + 840;
  *((void *)this + 107) = 0x4014000000000000;
}

void sub_1B7D7559C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  __n128 v7 = v2;
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(v3, *v6);
  PCSharedMutex::~PCSharedMutex(v7);
  double v9 = (void *)*((void *)v1 + 72);
  if (v9)
  {
    *((void *)v1 + 73) = v9;
    operator delete(v9);
  }
  double v10 = *v5;
  if (*v5)
  {
    *((void *)v1 + 70) = v10;
    operator delete(v10);
  }
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::OZCameraBehavior(OZCameraBehavior *this, const OZCameraBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F1175C90;
  *(void *)(v4 + 16) = &unk_1F1175FB0;
  *(void *)(v4 + 48) = &unk_1F1176208;
  *(void *)(v4 + 336) = &unk_1F1176260;
  *(void *)(v4 + 536) = &unk_1F1176288;
  *(unsigned char *)(v4 + 544) = 0;
  *(_OWORD *)(v4 + 55OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v4 + 600));
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = (char *)this + 712;
  PCSharedMutex::PCSharedMutex((OZCameraBehavior *)((char *)this + 728));
  *((void *)this + 106) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 104) = (char *)this + 840;
  *((void *)this + 107) = 0x4014000000000000;
}

void sub_1B7D7571C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  __n128 v7 = v2;
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(v3, *v6);
  PCSharedMutex::~PCSharedMutex(v7);
  double v9 = (void *)*((void *)v1 + 72);
  if (v9)
  {
    *((void *)v1 + 73) = v9;
    operator delete(v9);
  }
  double v10 = *v5;
  if (*v5)
  {
    *((void *)v1 + 70) = v10;
    operator delete(v10);
  }
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::~OZCameraBehavior(OZCameraBehavior *this)
{
  *(void *)this = &unk_1F1175C90;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1175FB0;
  *((void *)this + 6) = &unk_1F1176208;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1176260;
  *((void *)this + 67) = &unk_1F1176288;
  OZCameraBehavior::flushCache(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 832, *((void **)this + 105));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 728));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((void **)this + 89));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 600));
  char v2 = (void *)*((void *)this + 72);
  if (v2)
  {
    *((void *)this + 73) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 70) = v3;
    operator delete(v3);
  }

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZCameraBehavior::~OZCameraBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZCameraBehavior::~OZCameraBehavior(OZCameraBehavior *this)
{
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 48));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 336));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZCameraBehavior::operator=(uint64_t a1)
{
  OZChannelBehavior::operator=();
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 832, *(void **)(a1 + 840));
  *(void *)(a1 + 83OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a1 + 840;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 856) = 0x4014000000000000;
}

unint64_t OZCameraBehavior::addCurveNodesToChannels(OZCameraBehavior *this, OZSceneNode *a2)
{
  return OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 1);
}

unint64_t OZCameraBehavior::addTransRotCurveNodesToChannels(OZCameraBehavior *this, OZSceneNode *lpsrc, int a3, int a4)
{
  if (lpsrc) {
  else
  }
    __n128 v7 = 0;
  *((void *)this + 70) = *((void *)this + 69);
  *((void *)this + 73) = *((void *)this + 72);
  if (!v7) {
    return 0;
  }
  double v8 = 0;
  __p = 0;
  int v62 = 0;
  unint64_t v66 = 0;
  if (a3)
  {
    double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, 1uLL);
    *(void *)double v10 = v7 + 1352;
    uint64_t v11 = v10 + 8;
    __p = v10;
    unint64_t v66 = (unint64_t)&v10[8 * v9];
    Float64 v12 = v7 + 1504;
    if ((unint64_t)(v10 + 8) >= v66)
    {
      unint64_t v15 = (8 * v9) >> 2;
      if (v15 <= 2) {
        unint64_t v15 = 2;
      }
      if ((unint64_t)(8 * v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        int v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v16);
      }
      else {
        int v17 = 0;
      }
      int v18 = (char *)(v17 + 1);
      int v19 = (char *)&v17[v16];
      v17[1] = v12;
      __n128 v13 = (char *)(v17 + 2);
      double v20 = v11;
      if (v11 != __p)
      {
        do
        {
          uint64_t v21 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v18 - OZLinkBehavior::clearAll(this, 1) = v21;
          v18 -= 8;
        }
        while (v20 != __p);
        double v20 = __p;
      }
      __p = v18;
      unint64_t v66 = (unint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *((void *)v10 + OZLinkBehavior::clearAll(this, 1) = v12;
      __n128 v13 = v10 + 16;
    }
    unsigned int v63 = v13;
    int v22 = v7 + 1952;
    if ((unint64_t)v13 >= v66)
    {
      uint64_t v23 = (v13 - __p) >> 3;
      if ((unint64_t)(v23 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v24 = (uint64_t)(v66 - (void)__p) >> 2;
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      if (v66 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        unsigned int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v25);
      }
      else {
        unsigned int v26 = 0;
      }
      BOOL v27 = &v26[8 * v23];
      int v28 = &v26[8 * v25];
      *(void *)BOOL v27 = v22;
      double v8 = v27 + 8;
      int v29 = v63;
      if (v63 != __p)
      {
        do
        {
          uint64_t v30 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v27 - OZLinkBehavior::clearAll(this, 1) = v30;
          v27 -= 8;
        }
        while (v29 != __p);
        int v29 = __p;
      }
      __p = v27;
      unint64_t v66 = (unint64_t)v28;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)__n128 v13 = v22;
      double v8 = v13 + 8;
    }
    int v62 = v8;
  }
  if (a4)
  {
    unsigned int v31 = v7 + 2240;
    if ((unint64_t)v8 >= v66)
    {
      uint64_t v33 = (v8 - __p) >> 3;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v34 = (uint64_t)(v66 - (void)__p) >> 2;
      if (v34 <= v33 + 1) {
        unint64_t v34 = v33 + 1;
      }
      if (v66 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unsigned int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v35);
      }
      else {
        unsigned int v36 = 0;
      }
      double v37 = &v36[8 * v33];
      double v38 = &v36[8 * v35];
      *(void *)double v37 = v31;
      double v32 = v37 + 8;
      int v39 = v62;
      if (v62 != __p)
      {
        do
        {
          uint64_t v40 = *((void *)v39 - 1);
          v39 -= 8;
          *((void *)v37 - OZLinkBehavior::clearAll(this, 1) = v40;
          v37 -= 8;
        }
        while (v39 != __p);
        int v39 = __p;
      }
      __p = v37;
      unint64_t v66 = (unint64_t)v38;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(void *)double v8 = v31;
      double v32 = v8 + 8;
    }
    unsigned int v64 = v32;
    int v41 = v7 + 2392;
    if ((unint64_t)v32 >= v66)
    {
      uint64_t v43 = (v32 - __p) >> 3;
      if ((unint64_t)(v43 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v44 = (uint64_t)(v66 - (void)__p) >> 2;
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      if (v66 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45) {
        unsigned int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v45);
      }
      else {
        unsigned int v46 = 0;
      }
      unsigned int v47 = &v46[8 * v43];
      double v48 = &v46[8 * v45];
      *(void *)unsigned int v47 = v41;
      unsigned int v42 = v47 + 8;
      double v49 = v64;
      if (v64 != __p)
      {
        do
        {
          uint64_t v50 = *((void *)v49 - 1);
          v49 -= 8;
          *((void *)v47 - OZLinkBehavior::clearAll(this, 1) = v50;
          v47 -= 8;
        }
        while (v49 != __p);
        double v49 = __p;
      }
      __p = v47;
      unint64_t v66 = (unint64_t)v48;
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(void *)double v32 = v41;
      unsigned int v42 = v32 + 8;
    }
    double v65 = v42;
    long long v51 = v7 + 2544;
    if ((unint64_t)v42 >= v66)
    {
      uint64_t v52 = (v42 - __p) >> 3;
      if ((unint64_t)(v52 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v53 = (uint64_t)(v66 - (void)__p) >> 2;
      if (v53 <= v52 + 1) {
        unint64_t v53 = v52 + 1;
      }
      if (v66 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v53;
      }
      if (v54) {
        double v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v54);
      }
      else {
        double v55 = 0;
      }
      int v56 = &v55[8 * v52];
      int v57 = &v55[8 * v54];
      *(void *)int v56 = v51;
      double v8 = v56 + 8;
      int v58 = v65;
      if (v65 != __p)
      {
        do
        {
          uint64_t v59 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v56 - OZLinkBehavior::clearAll(this, 1) = v59;
          v56 -= 8;
        }
        while (v58 != __p);
        int v58 = __p;
      }
      __p = v56;
      unint64_t v66 = (unint64_t)v57;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(void *)unsigned int v42 = v51;
      double v8 = v42 + 8;
    }
    int v62 = v8;
  }
  if (v8 != __p) {
    operator new();
  }
  PCSharedMutex::lock((std::mutex *)((char *)this + 600));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((void **)this + 89));
  *((void *)this + 88) = (char *)this + 712;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 600));
  if (a3)
  {
    OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v7 + 1216));
    if (a4) {
      OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)(v7 + 2104));
    }
  }
  else if (a4)
  {
    OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v7 + 2104));
  }
  unint64_t v14 = (unint64_t)(v62 - __p) >> 3;
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_1B7D76190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZCameraBehavior::didAddToNode(OZCameraBehavior *this, OZSceneNode *a2)
{
  uint64_t result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 544))
  {
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(OZCameraBehavior *, OZSceneNode *))(*(void *)this + 760))(this, a2);
      *((unsigned char *)this + 544) = 1;
    }
  }
  return result;
}

uint64_t OZCameraBehavior::didAddSceneNodeToScene(OZCameraBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((unsigned char *)this + 544))
  {
    uint64_t v4 = (*(uint64_t (**)(OZCameraBehavior *))(*(void *)this + 320))(this);
    uint64_t result = (*(uint64_t (**)(OZCameraBehavior *, uint64_t))(*(void *)this + 760))(this, v4);
    *((unsigned char *)this + 544) = 1;
  }
  return result;
}

uint64_t OZCameraBehavior::willRemove(OZCameraBehavior *this)
{
  OZChannelBehavior::willRemove(this);
  *((unsigned char *)this + 544) = 0;
  *((void *)this + 70) = *((void *)this + 69);
  *((void *)this + 73) = *((void *)this + 72);
  char v2 = *(uint64_t (**)(OZCameraBehavior *))(*(void *)this + 736);

  return v2(this);
}

void OZCameraBehavior::notify(OZCameraBehavior *this, __int16 a2)
{
  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0x981C) != 0)
  {
    uint64_t v4 = *(void (**)(OZCameraBehavior *))(*(void *)this + 736);
    v4(this);
  }
}

void non-virtual thunk to'OZCameraBehavior::notify(OZCameraBehavior *this, __int16 a2)
{
}

void OZCameraBehavior::flushCache(OZCameraBehavior *this)
{
  char v2 = (std::mutex *)((char *)this + 600);
  PCSharedMutex::lock((std::mutex *)((char *)this + 600));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((void **)this + 89));
  *((void *)this + 88) = (char *)this + 712;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::lock((std::mutex *)((char *)this + 728));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 832, *((void **)this + 105));
  *((void *)this + 104) = (char *)this + 840;
  *((void *)this + 106) = 0;
  *((void *)this + 105) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 728));
}

void OZCameraBehavior::getCurrentValuesOfAffectedChannels(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 600);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 600));
  uint64_t v7 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(a1 + 704, a2);
  uint64_t v8 = v7;
  if (a1 + 712 != v7 && v7 + 56 != a3) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a3, *(char **)(v7 + 56), *(void *)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
  }
  PCSharedMutex::unlock_shared(v6);
  if (a1 + 712 == v8)
  {
    uint64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
    if (v9)
    {
      uint64_t v10 = 0;
      unint64_t v11 = v9 >> 3;
      if (v11 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v11;
      }
      do
      {
        PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode(*(OZChannel **)(*(void *)(a1 + 552) + 8 * v10), *(void **)(*(void *)(a1 + 576) + 8 * v10));
        *(double *)(*(void *)a3 + 8 * v10) = OZChannel::getCurveValueForNode(*(OZChannel **)(*(void *)(a1 + 552) + 8 * v10), a2, PreviousProcessingNode, 0.0);
        ++v10;
      }
      while (v12 != v10);
    }
    PCSharedMutex::lock(v6);
    unint64_t v15 = a2;
    unint64_t v14 = (char *)std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)(a1 + 704), a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15)+ 56;
    if (v14 != (char *)a3) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v14, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    }
    PCSharedMutex::unlock(v6);
  }
}

void sub_1B7D7660C(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double OZCameraBehavior::getValueOfAffectedChannel(OZCameraBehavior *this, const CMTime *a2, int a3)
{
  PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode(*(OZChannel **)(*((void *)this + 69) + 8 * a3), *(void **)(*((void *)this + 72) + 8 * a3));
  uint64_t v7 = *(OZChannel **)(*((void *)this + 69) + 8 * a3);

  return OZChannel::getCurveValueForNode(v7, a2, PreviousProcessingNode, 0.0);
}

BOOL OZCameraBehavior::CompareDeltaKeys::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime time1 = *(CMTime *)a2;
  CMTime v6 = *(CMTime *)a3;
  if (!CMTimeCompare(&time1, &v6)) {
    return *(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24);
  }
  CMTime time1 = *(CMTime *)a2;
  CMTime v6 = *(CMTime *)a3;
  return CMTimeCompare(&time1, &v6) >> 31;
}

double OZCameraBehavior::getInputDelta(OZCameraBehavior *this, uint64_t a2, const CMTime *a3, double a4)
{
  double v5 = 0.0;
  if (*((double *)this + 107) > 3.0)
  {
    CMTime v14 = *a3;
    int v15 = a2;
    uint64_t v8 = (std::mutex *)((char *)this + 728);
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 728));
    uint64_t v9 = (double *)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::find<OZCameraBehavior::DeltaKey>((uint64_t)this + 832, (uint64_t)&v14);
    uint64_t v10 = (OZCameraBehavior *)v9;
    if ((double *)((char *)this + 840) != v9) {
      double v5 = a4 - v9[8];
    }
    PCSharedMutex::unlock_shared(v8);
    if ((OZCameraBehavior *)((char *)this + 840) == v10)
    {
      memset(v13, 0, sizeof(v13));
      (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 328))(v13);
      double v11 = (*(double (**)(OZCameraBehavior *, void *, uint64_t))(*(void *)this + 752))(this, v13, a2);
      PCSharedMutex::lock(v8);
      unint64_t v16 = &v14;
      *((double *)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__emplace_unique_key_args<OZCameraBehavior::DeltaKey,std::piecewise_construct_t const&,std::tuple<OZCameraBehavior::DeltaKey const&>,std::tuple<>>((uint64_t **)this + 104, (uint64_t)&v14, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16)+ 8) = v11;
      PCSharedMutex::unlock(v8);
      return a4 - v11;
    }
  }
  return v5;
}

void sub_1B7D768E4(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCameraBehavior::parseBegin(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin(this, a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 107) = (double)v4;
  return 1;
}

uint64_t non-virtual thunk to'OZCameraBehavior::parseBegin(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin((OZCameraBehavior *)((char *)this - 48), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 10OZLinkBehavior::clearAll(this, 1) = (double)v4;
  return 1;
}

uint64_t OZCameraBehavior::parseEnd(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZCameraBehavior::parseEnd(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

double OZCameraBehavior::getFocalDistance(OZCameraBehavior *this, OZChannelBehavior *a2, const CMTime *a3, const CMTime *a4)
{
  double ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 6808), a3);
  OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 4880), a3);
  if (ChannelValueBeforeThis <= -0.0000001 || ChannelValueBeforeThis >= 0.0000001)
  {
    CMTime v9 = *a3;
    OZCamera::cameraAtTime(a2, &v9);
  }
  return 0.0;
}

void sub_1B7D76B40(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::getPositionBeforeThis(OZCameraBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  double ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1352), a3);
  double v9 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1504), a3);
  double v10 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1952), a3);
  *a4 = ChannelValueBeforeThis;
  a4[1] = v9;
  a4[2] = v10;
}

void OZCameraBehavior::getRotationBeforeThis(OZCameraBehavior *this@<X0>, OZCamera *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  double ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2240), a3);
  double v9 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2392), a3);
  double v10 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2544), a3);
  *a4 = ChannelValueBeforeThis;
  a4[1] = v9;
  a4[2] = v10;
}

double OZCameraBehavior::getRotationBeforeThisAsQuat@<D0>(OZCameraBehavior *this@<X0>, OZCamera *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  OZCameraBehavior::getRotationBeforeThis(this, a2, a3, v21);
  double v5 = v21[1];
  double v20 = v21[2];
  __double2 v6 = __sincos_stret(v21[0] * 0.5);
  double v7 = v6.__sinval * 0.0;
  __double2 v8 = __sincos_stret(v5 * 0.5);
  double v9 = v8.__sinval * 0.0;
  __double2 v10 = __sincos_stret(v20 * 0.5);
  double v11 = v6.__cosval * v8.__cosval - (v7 * v9 + v7 * v8.__sinval + v6.__sinval * v9);
  double v12 = v6.__sinval * v8.__cosval + v6.__cosval * v9 + v7 * v8.__sinval - v7 * v9;
  double v13 = v7 * v8.__cosval + v6.__cosval * v8.__sinval + v6.__sinval * v9 - v7 * v9;
  double v14 = v7 * v9 - v6.__sinval * v8.__sinval + v7 * v8.__cosval + v6.__cosval * v9;
  double v15 = v10.__sinval * 0.0 * v12;
  double v16 = v10.__sinval * 0.0 * v13;
  double v17 = v10.__sinval * 0.0 * v11;
  double v18 = v10.__sinval * 0.0 * v14;
  a4[2] = v18 - v10.__sinval * v12 + v10.__cosval * v13 + v17;
  a4[3] = v15 - v16 + v10.__cosval * v14 + v10.__sinval * v11;
  double result = v10.__sinval * v13 - v18 + v10.__cosval * v12 + v17;
  *a4 = v10.__cosval * v11 - (v10.__sinval * v14 + v15 + v16);
  a4[1] = result;
  return result;
}

double OZCameraBehavior::calcEaseInEaseOut(OZCameraBehavior *this, double result)
{
  switch((int)this)
  {
    case 1:
      double v2 = cos(result * 3.14159265 * 0.5);
      double v3 = 1.0;
      goto LABEL_8;
    case 2:
      double v4 = sin(result * 3.14159265 * 0.5);
      double v5 = 0.0;
      goto LABEL_5;
    case 3:
      long double v6 = sin(result * 3.14159265 + -1.57079633);
      double v5 = 0.5;
      double v4 = v6 * 0.5;
LABEL_5:
      double result = v4 + v5;
      break;
    case 4:
      double result = result * result;
      break;
    case 5:
      double v3 = 1.0;
      double v2 = (1.0 - result) * (1.0 - result);
LABEL_8:
      double result = v3 - v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OZCameraBehavior::isActive(OZCameraBehavior *this)
{
  int v2 = (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
  uint64_t result = 0;
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(OZCameraBehavior *))(*(void *)this + 320))(this);
    if (result) {
      return (*(unsigned char *)(result + 1024) & 2) == 0;
    }
  }
  return result;
}

__n128 OZCameraBehavior::solveNode(OZCameraBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.CMTimeValue value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZCameraBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZCameraBehavior::solveNode(OZCameraBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZCameraBehavior::solveNode((OZCameraBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZCameraBehavior::getNeededRange(OZCameraBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

__n128 non-virtual thunk to'OZCameraBehavior::getNeededRange(OZCameraBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

void std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  long double v6 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v11, a2);
  double v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    __double2 v8 = (uint64_t **)v6;
    double v7 = operator new(0x50uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    _OWORD v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::find<OZCameraBehavior::DeltaKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, (uint64_t)(v3 + 4), a2);
    long double v6 = v3 + 1;
    if (!a1)
    {
      long double v6 = v3;
      uint64_t v5 = (uint64_t)v3;
    }
    uint64_t v3 = (void *)*v6;
  }
  while (*v6);
  if (v5 == v2 || OZCameraBehavior::CompareDeltaKeys::operator()(a1, a2, v5 + 32)) {
    return v2;
  }
  return v5;
}

_OWORD *std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__emplace_unique_key_args<OZCameraBehavior::DeltaKey,std::piecewise_construct_t const&,std::tuple<OZCameraBehavior::DeltaKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  long double v6 = (void **)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__find_equal<OZCameraBehavior::DeltaKey>((uint64_t)a1, &v11, a2);
  double v7 = *v6;
  if (!*v6)
  {
    __double2 v8 = (uint64_t **)v6;
    double v7 = operator new(0x48uLL);
    long long v9 = *(_OWORD *)((char *)*a4 + 12);
    _OWORD v7[2] = **a4;
    *(_OWORD *)((char *)v7 + 44) = v9;
    *((void *)v7 + 8) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__find_equal<OZCameraBehavior::DeltaKey>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        double v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!a1) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, v8, a3);
      if (!a1) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    double v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void OZClampBehavior::OZClampBehavior(OZClampBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1176320;
  float64x2_t v5[2] = &unk_1F1176660;
  v5[6] = &unk_1F11768B8;
  v5[42] = &unk_1F1176910;
  v5[67] = &unk_1F1176938;
  PCURL::PCURL((PCURL *)&v7, @"Clamp Behavior Operation Enum");
  PCURL::PCURL((PCURL *)&v6, @"Clamp Behavior Operation");
  OZChannelEnum::OZChannelEnum((OZClampBehavior *)((char *)this + 864), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Clamp Behavior Min");
  OZChannelDouble::OZChannelDouble((OZClampBehavior *)((char *)this + 1120), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Clamp Behavior Max");
  OZChannelDouble::OZChannelDouble((OZClampBehavior *)((char *)this + 1272), 10.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B7D7752C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZClampBehavior::OZClampBehavior(OZClampBehavior *this, const OZClampBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1176320;
  *(void *)(v5 + 16) = &unk_1F1176660;
  *(void *)(v5 + 48) = &unk_1F11768B8;
  *(void *)(v5 + 336) = &unk_1F1176910;
  *(void *)(v5 + 536) = &unk_1F1176938;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 864), (const OZClampBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1120), (const OZChannelBase *)a2 + 10, v6);
  *((void *)this + 140) = &unk_1F1100CF0;
  *((void *)this + 14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1272), (const OZChannelBase *)((char *)a2 + 1272), v6);
  *((void *)this + 159) = &unk_1F1100CF0;
  *((void *)this + 16OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
}

void sub_1B7D77730(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZClampBehavior::~OZClampBehavior(OZClampBehavior *this)
{
  *(void *)this = &unk_1F1176320;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1176660;
  *((void *)this + 6) = &unk_1F11768B8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1176910;
  *((void *)this + 67) = &unk_1F1176938;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1120));
  OZChannelEnum::~OZChannelEnum((OZClampBehavior *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZClampBehavior::~OZClampBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZClampBehavior::~OZClampBehavior(OZClampBehavior *this)
{
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 48));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 336));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZClampBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 1120, (uint64_t)v4 + 1120);

  return OZChannelBase::operator=(a1 + 1272, (uint64_t)v5 + 1272);
}

BOOL OZClampBehavior::isRebuildUIChannel(OZClampBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 864) == a2;
}

void OZClampBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return;
  }
  int v4 = 0;
  char v5 = 0;
  PCString v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    PCString v7 = *(char **)(v2 + 16);
    if (v7) {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v7 + 864), v6, 0.0);
    }
    if (ValueAsInt == 2)
    {
      char v5 = 1;
      int v4 = 1;
    }
    else
    {
      if (ValueAsInt) {
        int v9 = v4;
      }
      else {
        int v9 = 1;
      }
      if (ValueAsInt == 1) {
        char v5 = 1;
      }
      else {
        int v4 = v9;
      }
      if ((v4 & 1) == 0) {
        goto LABEL_16;
      }
    }
    if (v5) {
      break;
    }
LABEL_16:
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2) {
      goto LABEL_19;
    }
  }
  char v5 = 1;
  LOBYTE(v4) = 1;
LABEL_19:
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v11 = *(const void **)(i + 16);
    if (v11) {
    else
    }
      CMTime v12 = 0;
    CMTime v13 = (OZChannelBase *)(v12 + 1120);
    if (v4) {
      OZChannelBase::resetFlag(v13, 0x400000, 1);
    }
    else {
      OZChannelBase::setFlag(v13, 0x400000, 1);
    }
    CMTime v14 = (OZChannelBase *)(v12 + 1272);
    if (v5) {
      OZChannelBase::resetFlag(v14, 0x400000, 1);
    }
    else {
      OZChannelBase::setFlag(v14, 0x400000, 1);
    }
  }
}

double OZClampBehavior::solveNode(OZClampBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v16, a4);
  CMTime v15 = v16;
  if ((*(unsigned int (**)(OZClampBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v15, 0, 1, 1))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), &v16, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1120), &v16, 0.0);
    double v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1272), &v16, 0.0);
    if ((ValueAsInt & 0xFFFFFFFD) != 0 || v9 <= a5) {
      double v12 = a5;
    }
    else {
      double v12 = v9;
    }
    if ((ValueAsInt - 1) >= 2 || v12 <= v10) {
      return v12;
    }
    else {
      return v10;
    }
  }
  return a5;
}

double non-virtual thunk to'OZClampBehavior::solveNode(OZClampBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZClampBehavior::solveNode((OZClampBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZClampBehavior::didSetChannelInfo(OZClampBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel::setInfo((OZChannel *)((char *)this + 1120), a2);

  OZChannel::setInfo((OZChannel *)((char *)this + 1272), a2);
}

void OZDiscreteBehavior::OZDiscreteBehavior(OZDiscreteBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *char v5 = &unk_1F11769B0;
  float64x2_t v5[2] = &unk_1F1176CF0;
  v5[6] = &unk_1F1176F48;
  v5[42] = &unk_1F1176FA0;
  v5[67] = &unk_1F1176FC8;
  PCURL::PCURL((PCURL *)&v6, @"Discrete Behavior Step Size");
  OZChannelDouble::OZChannelDouble((OZDiscreteBehavior *)((char *)this + 864), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Discrete Behavior Offset");
  OZChannelDouble::OZChannelDouble((OZDiscreteBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 864), 0.0);
}

void sub_1B7D77F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior::OZDiscreteBehavior(OZDiscreteBehavior *this, const OZDiscreteBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11769B0;
  *(void *)(v5 + 16) = &unk_1F1176CF0;
  *(void *)(v5 + 48) = &unk_1F1176F48;
  *(void *)(v5 + 336) = &unk_1F1176FA0;
  *(void *)(v5 + 536) = &unk_1F1176FC8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((void *)this + 127) = &unk_1F1100CF0;
  *((void *)this + 129) = &unk_1F1101050;
}

void sub_1B7D780E8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior::~OZDiscreteBehavior(OZDiscreteBehavior *this)
{
  *(void *)this = &unk_1F11769B0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1176CF0;
  *((void *)this + 6) = &unk_1F1176F48;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1176FA0;
  *((void *)this + 67) = &unk_1F1176FC8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZDiscreteBehavior::~OZDiscreteBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZDiscreteBehavior::~OZDiscreteBehavior(OZDiscreteBehavior *this)
{
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 48));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 336));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZDiscreteBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);

  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

long double OZDiscreteBehavior::solveNode(OZDiscreteBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v13, 0, sizeof(v13));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v13, a4);
  CMTime v12 = v13;
  if ((*(unsigned int (**)(OZDiscreteBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v12, 0, 1, 1))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v13, 0.0);
    long double v8 = v7;
    if (v7 >= 0.001)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), &v13, 0.0);
      long double v10 = fmod(v9, v8);
      return v10 + v8 * floor((a5 - v10) / v8 + 0.0000001);
    }
  }
  return a5;
}

long double non-virtual thunk to'OZDiscreteBehavior::solveNode(OZDiscreteBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZDiscreteBehavior::solveNode((OZDiscreteBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZDiscreteBehavior::didSetChannelInfo(OZDiscreteBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
}

void OZDollyInOutBehavior::OZDollyInOutBehavior(OZDollyInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1177040;
  float64x2_t v5[2] = &unk_1F1177360;
  v5[6] = &unk_1F11775B8;
  v5[42] = &unk_1F1177610;
  v5[67] = &unk_1F1177638;
  PCURL::PCURL((PCURL *)v7, @"Dolly In/Out Behavior Distance");
  OZChannelDouble::OZChannelDouble((OZDollyInOutBehavior *)((char *)this + 864), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((void *)this + 159) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 864), -100000.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 100000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -10000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 10000.0);
  uint64_t v8 = 0x500000004;
  *(_OWORD *)&v7[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = xmmword_1B8384F30;
  OZChannelEnum::setTags((OZDollyInOutBehavior *)((char *)this + 1016), (char *)v7, 6);
}

void sub_1B7D78768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior::OZDollyInOutBehavior(OZDollyInOutBehavior *this, const OZDollyInOutBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1177040;
  *(void *)(v5 + 16) = &unk_1F1177360;
  *(void *)(v5 + 48) = &unk_1F11775B8;
  *(void *)(v5 + 336) = &unk_1F1177610;
  *(void *)(v5 + 536) = &unk_1F1177638;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016), (const OZDollyInOutBehavior *)((char *)a2 + 1016), v6);
  *((void *)this + 159) = 0;
}

void sub_1B7D7890C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior::~OZDollyInOutBehavior(OZDollyInOutBehavior *this)
{
  *(void *)this = &unk_1F1177040;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1177360;
  *((void *)this + 6) = &unk_1F11775B8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1177610;
  *((void *)this + 67) = &unk_1F1177638;
  OZChannelEnum::~OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZDollyInOutBehavior::~OZDollyInOutBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZDollyInOutBehavior::~OZDollyInOutBehavior(OZDollyInOutBehavior *this)
{
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 48));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 336));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZDollyInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);

  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

unint64_t OZDollyInOutBehavior::addCurveNodesToChannels(OZDollyInOutBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2) {
  else
  }
    uint64_t v5 = 0;
  *((void *)this + 159) = v5;
  return v4;
}

double OZDollyInOutBehavior::solveNode(OZDollyInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  int v9 = (*(uint64_t (**)(OZDollyInOutBehavior *, double))(*(void *)this + 768))(this, a4);
  if (a2 <= 2 && v9)
  {
    memset(&v31, 0, sizeof(v31));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v31);
    __n128 v29 = 0uLL;
    CMTimeEpoch v30 = 0;
    uint64_t v10 = (*(uint64_t (**)(OZDollyInOutBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v29);
    (*(void (**)(CMTime *__return_ptr, OZDollyInOutBehavior *, __n128))(*(void *)this + 608))(v28, this, FrameDuration);
    CMTime v27 = v28[0];
    memset(&v26, 0, sizeof(v26));
    CMTime v23 = v28[1];
    *(__n128 *)&time2.CMTimeValue value = v29;
    time2.CMTimeEpoch epoch = v30;
    PC_CMTimeSaferSubtract(&v23, &time2, (uint64_t)&v26);
    CMTime v23 = v31;
    CMTime time2 = v27;
    PC_CMTimeSaferSubtract(&v23, &time2, (uint64_t)__p);
    *(__n128 *)&v23.CMTimeValue value = v29;
    v23.CMTimeEpoch epoch = v30;
    CMTime time2 = v26;
    CMTime v12 = CMTimeCompare(&v23, &time2) >= 0 ? (CMTime *)&v29 : &v26;
    CMTime v23 = *v12;
    operator/((long long *)__p, (uint64_t)&v23, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0000001)
    {
      double v14 = Seconds;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v31, 0.0);
      double v16 = v15;
      if (v15 <= -0.0000001 || v15 >= 0.0000001)
      {
        if (v14 > 0.9999999) {
          double v14 = 1.0;
        }
        int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), MEMORY[0x1E4F1FA48], 0.0);
        double v18 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v14);
        time2.CMTimeValue value = 0;
        *(void *)&time2.timescale = 0;
        *(double *)&time2.CMTimeEpoch epoch = -(v16 * v18);
        std::vector<double>::vector(__p, 3uLL);
        (*(void (**)(OZDollyInOutBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, __p);
        double v19 = *(double *)__p[0];
        double v20 = *((double *)__p[0] + 1);
        double v21 = *((double *)__p[0] + 2);
        OZCameraBehavior::getRotationBeforeThisAsQuat(this, *((OZCamera **)this + 159), a3, (double *)&v23.value);
        PCQuat<double>::transform<double>((double *)&v23.value, (double *)&time2.value);
        if (a2 == 2)
        {
          a5 = v21 + *(double *)&time2.epoch;
        }
        else if (a2 == 1)
        {
          a5 = v20 + *(double *)&time2.timescale;
        }
        else
        {
          a5 = v19 + *(double *)&time2.value;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return a5;
}

void sub_1B7D79024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double non-virtual thunk to'OZDollyInOutBehavior::solveNode(OZDollyInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZDollyInOutBehavior::solveNode((OZDollyInOutBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B7D790A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F11776B0;
  *(void *)(v5 + 16) = &unk_1F1177998;
  *(void *)(v5 + 48) = &unk_1F1177BF0;
  *(void *)(v5 + 336) = &unk_1F1177C48;
  PCString v6 = (OZChannel *)(v5 + 664);
  OZChannel::setScale((OZChannel *)(v5 + 664), 0.1);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 100.0);
  OZChannel::setDefaultValue(v6, 30.0);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1376), 4.5);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1376), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 816), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 816));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1072), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1072));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1224), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1224));
}

void sub_1B7D79220(_Unwind_Exception *a1)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this, OZDriftAttractedToBehavior *a2, char a3)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *uint64_t v3 = &unk_1F11776B0;
  v3[2] = &unk_1F1177998;
  v3[6] = &unk_1F1177BF0;
  v3[42] = &unk_1F1177C48;
}

void non-virtual thunk to'OZDriftAttractedToBehavior::~OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this)
{
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZDriftAttractedToBehavior::~OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZDriftAttractorBehavior::OZDriftAttractorBehavior(OZDriftAttractorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F1177C88;
  *(void *)(v5 + 16) = &unk_1F1177F78;
  *(void *)(v5 + 48) = &unk_1F11781D0;
  *(void *)(v5 + 336) = &unk_1F1178228;
  PCString v6 = (OZChannel *)(v5 + 792);
  OZChannel::setScale((OZChannel *)(v5 + 792), 0.1);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 100.0);
  OZChannel::setDefaultValue(v6, 30.0);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 4.5);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1504), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 944), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 944));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1200), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1200));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1352), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1352));
}

void sub_1B7D79534(_Unwind_Exception *a1)
{
  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior::OZDriftAttractorBehavior(OZDriftAttractorBehavior *this, OZDriftAttractorBehavior *a2, char a3)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *uint64_t v3 = &unk_1F1177C88;
  v3[2] = &unk_1F1177F78;
  v3[6] = &unk_1F11781D0;
  v3[42] = &unk_1F1178228;
}

void non-virtual thunk to'OZDriftAttractorBehavior::~OZDriftAttractorBehavior(OZDriftAttractorBehavior *this)
{
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZDriftAttractorBehavior::~OZDriftAttractorBehavior(OZDriftAttractorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZExponentialBehavior::OZExponentialBehavior(OZExponentialBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZRampBehavior::OZRampBehavior(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F1178268;
  *(void *)(v4 + 16) = &unk_1F11785A8;
  *(void *)(v4 + 48) = &unk_1F1178800;
  *(void *)(v4 + 336) = &unk_1F1178858;
  *(void *)(v4 + 536) = &unk_1F1178880;
  uint64_t v5 = (OZChannelBase *)(v4 + 1168);
  OZChannelBase::setFlag((OZChannelBase *)(v4 + 1168), 2, 0);
  OZChannelBase::saveStateAsDefault(v5);
}

void sub_1B7D797CC(_Unwind_Exception *a1)
{
  OZRampBehavior::~OZRampBehavior(v1);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior::OZExponentialBehavior(OZExponentialBehavior *this, const OZExponentialBehavior *a2, char a3)
{
  OZRampBehavior::OZRampBehavior(this, a2, a3);
  *uint64_t v3 = &unk_1F1178268;
  v3[2] = &unk_1F11785A8;
  v3[6] = &unk_1F1178800;
  v3[42] = &unk_1F1178858;
  v3[67] = &unk_1F1178880;
}

void non-virtual thunk to'OZExponentialBehavior::~OZExponentialBehavior(OZExponentialBehavior *this)
{
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZExponentialBehavior::~OZExponentialBehavior(OZExponentialBehavior *this)
{
  OZRampBehavior::~OZRampBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZExponentialBehavior::createCurveNode(OZExponentialBehavior *this, OZChannel *a2)
{
  var16 = a2->var16;
  double v5 = *((double *)var16 + 5);
  if (v5 != *((double *)this + 78))
  {
    *((double *)this + 78) = v5;
    (*(void (**)(OZExponentialBehavior *))(*(void *)this + 752))(this);
    var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    (*(void (**)(OZExponentialBehavior *, char *, OZChannel *))(*(void *)this + 760))(this, (char *)this + 544, a2);
  }
  double v6 = *((double *)a2->var16 + 2);
  (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
  double v8 = 3.40282347e38;
  if (v6 != -3.40282347e38 && v7.n128_f64[0] != 3.40282347e38) {
    double v8 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v7, 3.40282347e38)
  }
       - *((double *)a2->var16 + 2);
  *((double *)this + 79) = v8;
  operator new();
}

void sub_1B7D79B88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void OZExponentialCurveNode::OZExponentialCurveNode(OZExponentialCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *double v5 = &unk_1F11788F8;
  if (a2) {
  else
  }
    double v6 = 0;
  *((void *)this + 4) = v6;
}

void OZExponentialCurveNode::~OZExponentialCurveNode(OZExponentialCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZExponentialCurveNode::solveNode(OZExponentialCurveNode *this, const CMTime *a2, __n128 a3, double a4)
{
  memset(&v36, 0, sizeof(v36));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*(void *)(*((void *)this + 4) + 376) + 32)
                                                       + 336))(&v36, a3);
  uint64_t v6 = *((void *)this + 4);
  CMTime v35 = v36;
  if ((*(unsigned int (**)(void))(*(void *)v6 + 296))())
  {
    __n128 v33 = 0uLL;
    CMTimeEpoch v34 = 0;
    __n128 FrameDuration = OZBehavior::getFrameDuration((OZBehavior *)*((void *)this + 4), &v33);
    (*(void (**)(CMTime *__return_ptr, __n128))(**((void **)this + 4) + 608))(v32, FrameDuration);
    memset(&v31, 0, sizeof(v31));
    CMTime v37 = v32[0];
    double v8 = (OZBehavior *)*((void *)this + 4);
    OZBehavior::getFrameDuration(v8, (__n128 *)&time1);
    int v9 = (OZChannel *)((char *)v8 + 1320);
    uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble(v9, MEMORY[0x1E4F1FA48], 0.0);
    operator*(&time1, &v30, v11);
    CMTime time1 = v37;
    CMTime time2 = v30;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
    memset(&v30, 0, sizeof(v30));
    CMTime time1 = v32[0];
    CMTime time2 = v32[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
    CMTime time1 = v37;
    *(__n128 *)&time2.CMTimeValue value = v33;
    time2.CMTimeEpoch epoch = v34;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    uint64_t v12 = *((void *)this + 4);
    OZBehavior::getFrameDuration((OZBehavior *)v12, (__n128 *)&time1);
    OZChannel::getValueAsDouble((OZChannel *)(v12 + 1472), v10, 0.0);
    operator*(&time1, &v37, v13);
    CMTime time1 = v29;
    CMTime time2 = v37;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
    OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 4) + 864), v10, 0.0);
    double v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 4) + 1016), v10, 0.0);
    double v17 = v16;
    if (v16 >= v15) {
      double v18 = 1.0;
    }
    else {
      double v18 = -1.0;
    }
    if (vabdd_f64(v16, v15) >= 0.0000001)
    {
      CMTime time1 = v30;
      CMTime time2 = v31;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      if (fabs(Seconds) >= 0.0000001)
      {
        double v20 = log((v17 + 0.0001 - v15) * v18);
        CMTime time1 = v36;
        CMTime time2 = v31;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        Float64 v21 = CMTimeGetSeconds(&v27);
        double v22 = v20 + 9.21034037;
        CMTime time1 = v36;
        CMTime time2 = v31;
        double v23 = v21 / Seconds;
        if (CMTimeCompare(&time1, &time2) < 0) {
          double v23 = 0.0;
        }
        CMTime time1 = v36;
        CMTime time2 = v30;
        int32_t v24 = CMTimeCompare(&time1, &time2);
        double v25 = 1.0;
        if (v24 <= 0) {
          double v25 = v23;
        }
        double v15 = v15 + v18 * exp(v22 * v25 + -9.21034037) + -0.0001;
      }
    }
    return v15 + a4;
  }
  return a4;
}

__n128 OZExponentialCurveNode::solveNode(OZExponentialCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  __n128 result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.CMTimeValue value = result;
  v8.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZExponentialCurveNode *, CMTime *, double, double))(*(void *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      __n128 result = *(__n128 *)&v12.value;
      CMTime v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

void OZExponentialCurveNode::cloneNode(OZExponentialCurveNode *this)
{
}

void sub_1B7D7A228(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZExponentialCurveNode::compare(OZExponentialCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

OZCurveNodeParam *OZExponentialCurveNode::getNeededRange(OZExponentialCurveNode *this, OZCurveNodeParam *a2)
{
  return a2;
}

void OZFadeInOutBehavior::OZFadeInOutBehavior(OZFadeInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F11789F0;
  float64x2_t v5[2] = &unk_1F1178CA0;
  v5[6] = &unk_1F1178EF8;
  v5[42] = &unk_1F1178F50;
  PCURL::PCURL((PCURL *)&v14, @"Fade In Out Behavior Fade In Time");
  Instance = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(v6);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 536), 20.0, &v14, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Fade In Out Behavior Fade Out Time");
  CMTime v9 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 688), 20.0, &v14, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, v9, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Fade In Out Behavior Start Frame Offset");
  CMTime v11 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(v10);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 840), &v14, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, v11, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, @"Fade In Out Behavior End Frame Offset");
  Float64 v13 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 992), &v14, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, v13, 0);
  PCString::~PCString(&v14);
}

void sub_1B7D7A514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7D7A588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZFadeInOutBehavior::OZFadeInOutBehavior(OZFadeInOutBehavior *this, const OZFadeInOutBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11789F0;
  *(void *)(v5 + 16) = &unk_1F1178CA0;
  *(void *)(v5 + 48) = &unk_1F1178EF8;
  *(void *)(v5 + 336) = &unk_1F1178F50;
  uint64_t v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 67) = &unk_1F1100CF0;
  *((void *)this + 69) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  *((void *)this + 86) = &unk_1F1100CF0;
  *((void *)this + 88) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((void *)this + 105) = &unk_1F1100CF0;
  *((void *)this + 107) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 992), (const OZChannelBase *)((char *)a2 + 992), v6);
  *((void *)this + 124) = &unk_1F1100CF0;
  *((void *)this + 126) = &unk_1F1101050;
}

void sub_1B7D7A794(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::~OZFadeInOutBehavior(OZFadeInOutBehavior *this)
{
  *(void *)this = &unk_1F11789F0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1178CA0;
  *((void *)this + 6) = &unk_1F1178EF8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1178F50;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 840));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZFadeInOutBehavior::~OZFadeInOutBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFadeInOutBehavior::~OZFadeInOutBehavior(OZFadeInOutBehavior *this)
{
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 48));
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

double OZFadeInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v4 + 67));
  OZChannelBase::operator=(a1 + 688, (uint64_t)(v5 + 86));
  OZChannelBase::operator=(a1 + 840, (uint64_t)(v5 + 105));
  OZChannelBase::operator=(a1 + 992, (uint64_t)(v5 + 124));
  double result = v5[143];
  *(double *)(a1 + 1144) = result;
  return result;
}

OZChannelBehavior *OZFadeInOutBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = this;
    if (this)
    {
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      operator new();
    }
  }
  return this;
}

void sub_1B7D7AB58(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

double OZFadeInOutBehavior::getMultiplier(OZFadeInOutBehavior *this, CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(v25);
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&v25[0].value;
  CMTimeEpoch epoch = v25[0].epoch;
  a2->CMTimeEpoch epoch = v25[0].epoch;
  long long v26 = *(_OWORD *)&a2->value;
  CMTimeEpoch v27 = epoch;
  double Seconds = -1.0;
  if ((*(unsigned int (**)(OZFadeInOutBehavior *, long long *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v26, 0, 1, 1))
  {
    uint64_t v6 = *(void *)(*(uint64_t (**)(OZFadeInOutBehavior *))(*(void *)this + 312))(this);
    (*(void (**)(CMTime *__return_ptr))(v6 + 712))(v25);
    memset(&v24, 0, sizeof(v24));
    OZBehavior::getFrameDuration(this, (__n128 *)&v24);
    memset(&v23, 0, sizeof(v23));
    CMTime v28 = v25[0];
    unint64_t v7 = (CMTime *)MEMORY[0x1E4F1FA48];
    double Seconds = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 840), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v24, &v22, v8);
    CMTime time1 = v28;
    CMTime time2 = v22;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
    memset(&v22, 0, sizeof(v22));
    CMTime time1 = v25[0];
    CMTime time2 = v25[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
    CMTime time1 = v28;
    CMTime time2 = v24;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), v7, 0.0);
    operator*(&v24, &v28, v9);
    CMTime time1 = v21;
    CMTime time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
    memset(&v21, 0, sizeof(v21));
    CMTime time1 = *a2;
    CMTime time2 = v24;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v21);
    CMTime time1 = v21;
    CMTime time2 = v23;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = v21;
      CMTime time2 = v22;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        CMTime time1 = *a2;
        CMTime time2 = v22;
        if (CMTimeCompare(&time1, &time2) >= 1) {
          *a2 = v22;
        }
        memset(&v20, 0, sizeof(v20));
        CMTime time1 = v22;
        CMTime time2 = v23;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
        CMTime time2 = *a2;
        CMTime v28 = v23;
        PC_CMTimeSaferSubtract(&time2, &v28, (uint64_t)&time1);
        *a2 = time1;
        memset(&v28, 0, sizeof(v28));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), v7, 0.0);
        operator*(&v24, &v28, v11);
        memset(&v19, 0, sizeof(v19));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 688), v7, 0.0);
        operator*(&v24, &v19, v12);
        memset(&v18, 0, sizeof(v18));
        CMTime time1 = v20;
        CMTime time2 = v19;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
        CMTime time1 = *a2;
        CMTime time2 = v28;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          operator/((long long *)&a2->value, (uint64_t)&v28, (uint64_t)&v17);
          double Seconds = CMTimeGetSeconds(&v17);
          CMTime time1 = *a2;
          CMTime time2 = v18;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            CMTime time1 = v19;
            CMTime time2 = *v7;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              CMTime time1 = *a2;
              CMTime time2 = v18;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
              operator/(&v15, (uint64_t)&v19, (uint64_t)&v16);
              double v13 = 1.0 - CMTimeGetSeconds(&v16);
              if (Seconds > v13) {
                return v13;
              }
            }
          }
        }
        else
        {
          CMTime time1 = *a2;
          CMTime time2 = v18;
          double Seconds = 1.0;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            CMTime time1 = v19;
            CMTime time2 = *v7;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              CMTime time1 = *a2;
              CMTime time2 = v18;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
              operator/(&v15, (uint64_t)&v19, (uint64_t)&time);
              return 1.0 - CMTimeGetSeconds(&time);
            }
          }
        }
      }
    }
  }
  return Seconds;
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeInTimeChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeInTimeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::_OZFadeInOutBehavior_fadeInTimeChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::_OZFadeInOutBehavior_fadeInTimeChan) {
    operator new();
  }
}

void sub_1B7D7B26C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::OZFadeInOutBehavior_fadeInTimeChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *this)
{
}

void sub_1B7D7B340(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeOutTimeChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeOutTimeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::_OZFadeInOutBehavior_fadeOutTimeChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::_OZFadeInOutBehavior_fadeOutTimeChan) {
    operator new();
  }
}

void sub_1B7D7B41C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::OZFadeInOutBehavior_fadeOutTimeChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *this)
{
}

void sub_1B7D7B4F0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_startTimeOffsetChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_startTimeOffsetChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::_OZFadeInOutBehavior_startTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::_OZFadeInOutBehavior_startTimeOffsetChan) {
    operator new();
  }
}

void sub_1B7D7B5CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::OZFadeInOutBehavior_startTimeOffsetChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *this)
{
}

void sub_1B7D7B6A4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_endTimeOffsetChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_endTimeOffsetChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::_OZFadeInOutBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::_OZFadeInOutBehavior_endTimeOffsetChan) {
    operator new();
  }
}

void sub_1B7D7B780(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::OZFadeInOutBehavior_endTimeOffsetChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *this)
{
}

void sub_1B7D7B858(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZFadeInOutCurveNode::OZFadeInOutCurveNode(OZFadeInOutCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *uint64_t v5 = &unk_1F1179170;
  if (a2) {
  else
  }
    uint64_t v6 = 0;
  *((void *)this + 4) = v6;
}

void OZFadeInOutCurveNode::~OZFadeInOutCurveNode(OZFadeInOutCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZFadeInOutCurveNode::solveNode(OZFadeInOutCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v5 = (OZFadeInOutBehavior *)*((void *)this + 4);
  CMTime v10 = *a2;
  double Multiplier = OZFadeInOutBehavior::getMultiplier(v5, &v10);
  if (Multiplier >= 0.0)
  {
    BOOL v7 = a4 >= 0.0000001 || a4 <= -0.0000001;
    double v8 = 1.0;
    if (v7) {
      double v8 = a4;
    }
    return v8 * Multiplier;
  }
  return a4;
}

void OZFadeInOutCurveNode::solveNode(OZFadeInOutCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v13 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v12 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v6 = 0;
    do
    {
      BOOL v7 = (OZFadeInOutBehavior *)*((void *)this + 4);
      CMTime v11 = v12;
      double Multiplier = OZFadeInOutBehavior::getMultiplier(v7, &v11);
      double v9 = *(double *)(v3 + 8 * v6);
      if (Multiplier >= 0.0)
      {
        if (v9 < 0.0000001 && v9 > -0.0000001) {
          double v9 = 1.0;
        }
        double v9 = Multiplier * v9;
      }
      *(double *)(v2 + 8 * v6) = v9;
      CMTime v15 = v12;
      CMTime v14 = v13;
      PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)&v12);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

void OZFadeInOutCurveNode::cloneNode(OZFadeInOutCurveNode *this)
{
}

void sub_1B7D7BB48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutCurveNode::compare(OZFadeInOutCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZFadeInOutCurveNode::getNeededRange(OZFadeInOutCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZFocusBehavior::OZFocusBehavior(OZFocusBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1179268;
  float64x2_t v5[2] = &unk_1F1179568;
  v5[6] = &unk_1F11797C0;
  v5[42] = &unk_1F1179818;
  v5[67] = &unk_1F1179840;
  PCURL::PCURL((PCURL *)v7, @"Focus Behavior Target");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZFocusBehavior *)((char *)this + 544), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Focus Behavior Transition");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 704), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZFocusBehavior *)((char *)this + 856), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((void *)this + 139) = 0;
  *((unsigned char *)this + 1120) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)&v7[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = xmmword_1B8385100;
  uint64_t v8 = 0x500000004;
  OZChannelEnum::setTags((OZFocusBehavior *)((char *)this + 856), (char *)v7, 6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 544, 1);
}

void sub_1B7D7BE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZChannelBehavior::~OZChannelBehavior(v11);
  _Unwind_Resume(a1);
}

void OZFocusBehavior::OZFocusBehavior(OZFocusBehavior *this, const OZFocusBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1179268;
  *(void *)(v5 + 16) = &unk_1F1179568;
  *(void *)(v5 + 48) = &unk_1F11797C0;
  *(void *)(v5 + 336) = &unk_1F1179818;
  *(void *)(v5 + 536) = &unk_1F1179840;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 544), (const OZFocusBehavior *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 704), (const OZChannelBase *)((char *)a2 + 704), v6);
  OZChannelEnum::OZChannelEnum((OZFocusBehavior *)((char *)this + 856), (const OZFocusBehavior *)((char *)a2 + 856), v6);
  *((void *)this + 139) = 0;
  *((unsigned char *)this + 1120) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
}

void sub_1B7D7C048(_Unwind_Exception *a1)
{
  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZFocusBehavior::~OZFocusBehavior(OZFocusBehavior *this)
{
  *(void *)this = &unk_1F1179268;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1179568;
  *((void *)this + 6) = &unk_1F11797C0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1179818;
  *((void *)this + 67) = &unk_1F1179840;
  uint64_t v2 = (void *)*((void *)this + 144);
  if (v2)
  {
    *((void *)this + 145) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 141);
  if (v3)
  {
    *((void *)this + 14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v3;
    operator delete(v3);
  }
  OZChannelEnum::~OZChannelEnum((OZFocusBehavior *)((char *)this + 856));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 704));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZFocusBehavior *)((char *)this + 544));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZFocusBehavior::~OZFocusBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFocusBehavior::~OZFocusBehavior(OZFocusBehavior *this)
{
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 48));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 336));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZFocusBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 544, (uint64_t)v4 + 544);
  OZChannelBase::operator=(a1 + 704, (uint64_t)v5 + 704);

  return OZChannelBase::operator=(a1 + 856, (uint64_t)v5 + 856);
}

uint64_t OZFocusBehavior::addCurveNodesToChannels(OZFocusBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    *((void *)this + 139) = v3;
    if (v3)
    {
      OZChannel::getCurveInterface((OZChannel *)(v3 + 7848));
      operator new();
    }
  }
  else
  {
    *((void *)this + 139) = 0;
  }
  return 0;
}

void sub_1B7D7C69C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZFocusBehavior::didAddToNode(OZFocusBehavior *this, OZSceneNode *a2)
{
  uint64_t result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 1120))
  {
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(OZFocusBehavior *, OZSceneNode *))(*(void *)this + 736))(this, a2);
      *((unsigned char *)this + 1120) = 1;
    }
  }
  return result;
}

uint64_t OZFocusBehavior::didAddSceneNodeToScene(OZFocusBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((unsigned char *)this + 1120))
  {
    uint64_t v4 = (*(uint64_t (**)(OZFocusBehavior *))(*(void *)this + 320))(this);
    uint64_t result = (*(uint64_t (**)(OZFocusBehavior *, uint64_t))(*(void *)this + 736))(this, v4);
    *((unsigned char *)this + 1120) = 1;
  }
  return result;
}

void OZFocusBehavior::willRemove(OZFocusBehavior *this)
{
  *((unsigned char *)this + 1120) = 0;
  *((void *)this + 14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((void *)this + 141);
  *((void *)this + 145) = *((void *)this + 144);
}

uint64_t OZFocusBehavior::isActive(OZFocusBehavior *this)
{
  int v2 = (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
  uint64_t result = 0;
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(OZFocusBehavior *))(*(void *)this + 320))(this);
    if (result) {
      return (*(unsigned char *)(result + 1024) & 2) == 0;
    }
  }
  return result;
}

void OZFocusBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  if (lpsrc)
  {
    if (v5)
    {
      PCString v6 = v5;
      do
      {
        BOOL v7 = operator new(0x18uLL);
        v7[1] = a4;
        PCString v7[2] = v6 + 136;
        uint64_t v8 = *a4;
        void *v7 = *a4;
        *(void *)(v8 + 8) = v7;
        *a4 = (uint64_t)v7;
        ++a4[2];
        uint64_t v9 = (const void *)v6[120];
        if (!v9) {
          break;
        }
      }
      while (v6);
    }
  }
}

double OZFocusBehavior::solveNode(OZFocusBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  if ((*(unsigned int (**)(OZFocusBehavior *, double))(*(void *)this + 744))(this, a4)
    && OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 544))
    && *((void *)this + 139))
  {
    memset(&v32, 0, sizeof(v32));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v32);
    __n128 v30 = 0uLL;
    CMTimeEpoch v31 = 0;
    uint64_t v8 = (*(uint64_t (**)(OZFocusBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v30);
    (*(void (**)(CMTime *__return_ptr, OZFocusBehavior *, __n128))(*(void *)this + 608))(&v27, this, FrameDuration);
    CMTime v26 = v27;
    memset(&v25, 0, sizeof(v25));
    *(_OWORD *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v28;
    time1.var0.unsigned int var3 = v29;
    *(__n128 *)&v20[0].CMTimeValue value = v30;
    v20[0].CMTimeEpoch epoch = v31;
    PC_CMTimeSaferSubtract((CMTime *)&time1, v20, (uint64_t)&v25);
    time1.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v32;
    v20[0] = v26;
    PC_CMTimeSaferSubtract((CMTime *)&time1, v20, (uint64_t)&v23);
    *(__n128 *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v30;
    time1.var0.unsigned int var3 = v31;
    v20[0] = v25;
    CMTime v10 = CMTimeCompare((CMTime *)&time1, v20) >= 0 ? &v30 : (__n128 *)&v25;
    *(__n128 *)&time1.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *v10;
    time1.var0.unsigned int var3 = v10[1].n128_i64[0];
    operator/(&v23, (uint64_t)&time1, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0)
    {
      double v12 = 1.0;
      double v13 = Seconds <= 1.0 ? Seconds : 1.0;
      if (!a2)
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 704), &v32, 0.0);
        if (v14 <= -0.0000001 || v14 >= 0.0000001)
        {
          double v15 = v13 / v14;
          double v16 = 1.0;
          if (v15 <= 1.0) {
            double v16 = v15;
          }
          if (v15 >= 0.0) {
            double v12 = v16;
          }
          else {
            double v12 = 0.0;
          }
        }
        int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 856), MEMORY[0x1E4F1FA48], 0.0);
        OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v12);
        OZRenderState::OZRenderState(&time1);
        time1.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v32;
        CMTime v18 = (OZCamera *)*((void *)this + 139);
        CMTime v21 = v32;
        OZCamera::cameraAtTime(v18, &v21);
      }
    }
  }
  return a5;
}

void sub_1B7D7CDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
}

double non-virtual thunk to'OZFocusBehavior::solveNode(OZFocusBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZFocusBehavior::solveNode((OZFocusBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

__n128 OZFocusBehavior::solveNode(OZFocusBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  __n128 result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.CMTimeValue value = result;
  v10.CMTimeEpoch epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZFocusBehavior *, uint64_t, CMTime *, double, double))(*(void *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      __n128 result = *(__n128 *)&v14.value;
      CMTime v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZFocusBehavior::solveNode(OZFocusBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  *(void *)&double result = OZFocusBehavior::solveNode((OZFocusBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZFocusBehavior::getNeededRange(OZFocusBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

__n128 non-virtual thunk to'OZFocusBehavior::getNeededRange(OZFocusBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  __n128 result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  return result;
}

void OZFramingBehavior::OZFramingBehavior(OZFramingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F11798D8;
  float64x2_t v5[2] = &unk_1F1179BF8;
  v5[6] = &unk_1F1179E50;
  v5[42] = &unk_1F1179EA8;
  v5[67] = &unk_1F1179ED0;
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Target");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZFramingBehavior *)((char *)this + 864), v11, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Target Face Enum");
  PCURL::PCURL((PCURL *)v15, @"Framing Behavior Target Face Label");
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1024), 4u, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Up Vector Enum");
  PCURL::PCURL((PCURL *)v15, @"Framing Behavior Up Vector Label");
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1280), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Framing Enum");
  PCURL::PCURL((PCURL *)v15, @"Framing Behavior Framing Label");
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1536), 2u, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Framing Offset");
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792), v11, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 3u);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Path Apex");
  OZChannelDouble::OZChannelDouble((OZFramingBehavior *)((char *)this + 2680), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Path Offset");
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832), v11, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 3u);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Orientation Enum");
  PCURL::PCURL((PCURL *)v15, @"Framing Behavior Orientation Label");
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 3720), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Position Transition");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3976), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Rotation Transition");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4128), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)v15, @"Framing Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 4280), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Ease Out Time");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4536), 1.0, v11, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Framing Behavior Ease Out Curve");
  OZChannelDouble::OZChannelDouble((OZFramingBehavior *)((char *)this + 4688), 10.0, v11, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(v11);
  *(_OWORD *)((char *)this + 4840) = 0u;
  OZValueCache<OZFramingCacheItem>::OZValueCache((uint64_t)this + 4856);
  *((void *)this + 627) = 0;
  *((void *)this + 626) = 0;
  *((void *)this + 625) = (char *)this + 5008;
  PCMutex::PCMutex((PCMutex *)((char *)this + 5024));
  *((void *)this + 637) = 0x3FF0000000000000;
  *((void *)this + 64OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0xBFF0000000000000;
  *((_OWORD *)this + 320) = xmmword_1B7E73BA0;
  *((_OWORD *)this + 319) = xmmword_1B7E73BA0;
  *(_OWORD *)&v15[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = xmmword_1B8385180;
  uint64_t v16 = 0x500000004;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1024), (char *)v15, 6);
  int v14 = 12;
  *(_OWORD *)&v11[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = xmmword_1B8385138;
  long long v12 = unk_1B8385148;
  long long v13 = xmmword_1B8385158;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1280), (char *)v11, 13);
  int v10 = 4;
  *(_OWORD *)unint64_t v9 = xmmword_1B838516C;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1536), (char *)v9, 5);
  *(void *)uint64_t v8 = 0x100000000;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 3720), (char *)v8, 2);
  uint64_t v7 = 0x500000004;
  *(_OWORD *)PCString v6 = xmmword_1B8385180;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 4280), (char *)v6, 6);
  OZChannelBase::resetFlag((OZChannelBase *)this + 16, 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1792));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2832), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2832));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2680), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2680));
  OZChannel::setMin((OZChannel *)((char *)this + 2680), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2680), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2680), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2680), 1.0);
  *((unsigned char *)this + 223OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 327OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);
  *((void *)this + 61OZLinkBehavior::clearAll(this, 1) = 250;
}

void sub_1B7D7D730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannelPercent *a11, OZChanTransformNodeRef *a12, _Unwind_Exception *exception_object, uint64_t a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChannelEnum *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,PCString a27)
{
  PCMutex::~PCMutex(v29);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v27 + 5000, *v35);
  OZValueCache<OZFramingCacheItem>::~OZValueCache(v28);
  OZChannel::~OZChannel(v36);
  OZChannelPercent::~OZChannelPercent(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannelPercent::~OZChannelPercent(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPosition3D::~OZChannelPosition3D(v34);
  OZChannel::~OZChannel(v33);
  OZChannelPosition3D::~OZChannelPosition3D(v32);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a12);
  OZCameraBehavior::~OZCameraBehavior(v27);
  _Unwind_Resume(a1);
}

void OZFramingBehavior::OZFramingBehavior(OZFramingBehavior *this, const OZFramingBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11798D8;
  *(void *)(v5 + 16) = &unk_1F1179BF8;
  *(void *)(v5 + 48) = &unk_1F1179E50;
  *(void *)(v5 + 336) = &unk_1F1179EA8;
  *(void *)(v5 + 536) = &unk_1F1179ED0;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZFramingBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1024), (const OZFramingBehavior *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1280), (const OZFramingBehavior *)((char *)a2 + 1280), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1536), (const OZFramingBehavior *)((char *)a2 + 1536), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792), (const OZFramingBehavior *)((char *)a2 + 1792), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2680), (const OZChannelBase *)((char *)a2 + 2680), v6);
  *((void *)this + 335) = &unk_1F1100CF0;
  *((void *)this + 337) = &unk_1F1101050;
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832), (const OZFramingBehavior *)((char *)a2 + 2832), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 3720), (const OZFramingBehavior *)((char *)a2 + 3720), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3976), (const OZChannelBase *)((char *)a2 + 3976), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4128), (const OZChannelBase *)((char *)a2 + 4128), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 4280), (const OZFramingBehavior *)((char *)a2 + 4280), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4536), (const OZChannelBase *)((char *)a2 + 4536), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 4688), (const OZChannelBase *)((char *)a2 + 4688), v6);
  *((void *)this + 586) = &unk_1F1100CF0;
  *((void *)this + 588) = &unk_1F1101050;
  *(_OWORD *)((char *)this + 4840) = 0u;
  OZValueCache<OZFramingCacheItem>::OZValueCache((uint64_t)this + 4856);
  *((void *)this + 627) = 0;
  *((void *)this + 626) = 0;
  *((void *)this + 625) = (char *)this + 5008;
  PCMutex::PCMutex((PCMutex *)((char *)this + 5024));
  *((void *)this + 637) = 0x3FF0000000000000;
  *((void *)this + 64OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0xBFF0000000000000;
  *((_OWORD *)this + 320) = xmmword_1B7E73BA0;
  *((_OWORD *)this + 319) = xmmword_1B7E73BA0;
  *((unsigned char *)this + 223OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((unsigned char *)this + 327OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  PCMutex::lock((PCMutex *)((char *)this + 5024));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((void **)this + 626));
  *((void *)this + 625) = (char *)this + 5008;
  *((_OWORD *)this + 313) = 0u;
  PCMutex::unlock((PCMutex *)((char *)this + 5024));
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);
  *((void *)this + 61OZLinkBehavior::clearAll(this, 1) = 250;
}

void sub_1B7D7DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannelPercent *a11, OZChannelEnum *a12, OZChannelPosition3D *a13, OZChannelPosition3D *a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChanTransformNodeRef *a18)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21, *v26);
  OZValueCache<OZFramingCacheItem>::~OZValueCache(v23);
  OZChannel::~OZChannel(v25);
  OZChannelPercent::~OZChannelPercent(v22);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelPosition3D::~OZChannelPosition3D(a13);
  OZChannel::~OZChannel(v24);
  OZChannelPosition3D::~OZChannelPosition3D(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a18);
  OZCameraBehavior::~OZCameraBehavior(v18);
  _Unwind_Resume(a1);
}

void OZFramingBehavior::~OZFramingBehavior(OZFramingBehavior *this)
{
  *(void *)this = &unk_1F11798D8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1179BF8;
  *((void *)this + 6) = &unk_1F1179E50;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1179EA8;
  *((void *)this + 67) = &unk_1F1179ED0;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 5024));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((void **)this + 626));
  OZValueCache<OZFramingCacheItem>::~OZValueCache((uint64_t)this + 4856);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 4536));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 4280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 4128));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3976));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 3720));
  OZChannelPosition3D::~OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2680));
  OZChannelPosition3D::~OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1536));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1280));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZFramingBehavior *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZFramingBehavior::~OZFramingBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFramingBehavior::~OZFramingBehavior(OZFramingBehavior *this)
{
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 48));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 336));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZFramingBehavior::flushCache(OZFramingBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);

  OZCameraBehavior::flushCache(this);
}

uint64_t OZFramingBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1024, (uint64_t)v5 + 1024);
  OZChannelBase::operator=(a1 + 1280, (uint64_t)v5 + 1280);
  OZChannelBase::operator=(a1 + 1536, (uint64_t)v5 + 1536);
  OZChannelPosition::operator=(a1 + 1792, (uint64_t)v5 + 1792);
  OZChannelBase::operator=(a1 + 2680, (uint64_t)v5 + 2680);
  OZChannelPosition::operator=(a1 + 2832, (uint64_t)v5 + 2832);
  OZChannelBase::operator=(a1 + 3720, (uint64_t)v5 + 3720);
  OZChannelBase::operator=(a1 + 3976, (uint64_t)v5 + 3976);
  OZChannelBase::operator=(a1 + 4128, (uint64_t)v5 + 4128);
  OZChannelBase::operator=(a1 + 4280, (uint64_t)v5 + 4280);
  OZChannelBase::operator=(a1 + 4536, (uint64_t)v5 + 4536);

  return OZChannelBase::operator=(a1 + 4688, (uint64_t)v5 + 4688);
}

unint64_t OZFramingBehavior::addCurveNodesToChannels(OZFramingBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addCurveNodesToChannels(this, a2);
  if (a2)
  {
    *((void *)this + 605) = v5;
    *((void *)this + 606) = v6;
    if (v5) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7)
    {
      if (v5) {
        BOOL v8 = v6 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8) {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1536), 2, 0);
      }
    }
    else
    {
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1536), 2, 0);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 4840) = 0u;
  }
  return v4;
}

void shortest_slerp(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v10 = a4;
  double v4 = a1[1];
  double v5 = a2[1];
  double v6 = a1[2];
  double v7 = a1[3];
  double v9 = a2[2];
  double v8 = a2[3];
  if ((*a1 + *a2) * (*a1 + *a2) + (v4 + v5) * (v4 + v5) + (v6 + v9) * (v6 + v9) + (v7 + v8) * (v7 + v8) < (*a1 - *a2) * (*a1 - *a2) + (v4 - v5) * (v4 - v5) + (v6 - v9) * (v6 - v9) + (v7 - v8) * (v7 - v8))
  {
    *a2 = -*a2;
    a2[1] = -v5;
    a2[2] = -v9;
    a2[3] = -v8;
  }
  slerp<double>(a1, a2, &v10, a3);
}

double calcRotation@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  long long v44 = *(_OWORD *)a2;
  double v45 = a2[2];
  uint64_t v43 = 0x3FF0000000000000;
  double v40 = 1.0;
  double v37 = 1.0;
  memset(&v36[8], 0, 32);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  *(double *)&unint64_t v9 = -*a1;
  double v10 = -a1[1];
  double v11 = -a1[2];
  *(void *)CMTime v36 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v36, (float64x2_t)v9, v10, v11);
  if (a6 != 1.0)
  {
    *(float64x2_t *)CMTime v36 = vmulq_n_f64(*(float64x2_t *)v36, a6);
    *(float64x2_t *)&v36[16] = vmulq_n_f64(*(float64x2_t *)&v36[16], a6);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)v36, (double *)&v44, (double *)&v44);
  if (*(double *)&v44 > -0.0000001
    && *(double *)&v44 < 0.0000001
    && *((double *)&v44 + 1) > -0.0000001
    && *((double *)&v44 + 1) < 0.0000001
    && v45 > -0.0000001
    && v45 < 0.0000001)
  {
    long long v44 = *(_OWORD *)a4;
    double v45 = a4[2];
  }
  *(void *)a5 = 0x3FF0000000000000;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  PCQuat<double>::setRotation((double *)a5, a4, (double *)&v44);
  double v12 = *a3;
  double v13 = a3[1];
  double v14 = a3[2];
  long long v33 = xmmword_1B7E733E0;
  uint64_t v34 = 0;
  v35[0] = v12 * *(double *)v36 + v13 * *(double *)&v36[8] + v14 * *(double *)&v36[16];
  v35[1] = v12 * *(double *)&v36[32] + v13 * v37 + v14 * *(double *)&v38;
  v35[2] = v12 * *(double *)&v39 + v13 * *((double *)&v39 + 1) + v14 * v40;
  double v15 = *(double *)a5;
  double v30 = v15;
  float64x2_t v16 = *(float64x2_t *)(a5 + 8);
  float64x2_t v31 = v16;
  double v17 = *(double *)(a5 + 24);
  double v32 = v17;
  double v18 = v15 * v15 + vaddvq_f64(vmulq_f64(v16, v16)) + v17 * v17;
  if (v18 != 0.0)
  {
    double v30 = v15 / v18;
    float64x2_t v31 = vdivq_f64(vnegq_f64(v16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
    double v32 = -v17 / v18;
  }
  PCQuat<double>::transform<double>(&v30, v35);
  PCQuat<double>::setRotation(&v30, (double *)&v33, v35);
  if (&v30 != (double *)a5)
  {
    double v20 = *(double *)(a5 + 8);
    double v21 = *(double *)(a5 + 16);
    double v22 = *(double *)(a5 + 24);
    double v23 = *(double *)a5 * v30 - (v20 * v31.f64[0] + v21 * v31.f64[1] + v22 * v32);
    double v24 = v30 * v20 + *(double *)a5 * v31.f64[0];
    double v25 = v30 * v22 + *(double *)a5 * v32;
    double v26 = v21 * v32 - v31.f64[1] * v22;
    float64_t v27 = v31.f64[0] * v22 - v20 * v32;
    double v28 = v20 * v31.f64[1] - v31.f64[0] * v21;
    *(double *)(a5 + 16) = v30 * v21 + *(double *)a5 * v31.f64[1] + v27;
    *(double *)(a5 + 24) = v28 + v25;
    double result = v24 + v26;
    *(double *)a5 = v23;
    *(double *)(a5 + 8) = v24 + v26;
  }
  return result;
}

void *OZFramingBehavior::calcTargetSize@<X0>(OZFramingBehavior *this@<X0>, CMTimeValue *a2@<X8>)
{
  double result = (void *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    (*(void (**)(CMTime *__return_ptr, OZFramingBehavior *))(*(void *)this + 608))(v45, this);
    $3CC8671D27C23BF42ADDB32F2B5E48AE v44 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v45[0];
    long long v42 = 0uLL;
    int64_t v43 = 0;
    OZBehavior::getFrameDuration(this, &v40);
    v38.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v45[0];
    CMTime v29 = v45[1];
    PC_CMTimeSaferAdd((CMTime *)&v38, &v29, (uint64_t)&v46);
    v38.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v46;
    *(__n128 *)&v29.CMTimeValue value = v40;
    v29.CMTimeEpoch epoch = v41;
    PC_CMTimeSaferSubtract((CMTime *)&v38, &v29, (uint64_t)&v42);
    double v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3976), MEMORY[0x1E4F1FA48], 0.0);
    double v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4128), v6, 0.0);
    if (v8 <= v9) {
      double v8 = v9;
    }
    __n128 v40 = 0uLL;
    CMTimeEpoch v41 = 0;
    *(_OWORD *)&v38.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v42;
    v38.var0.unsigned int var3 = v43;
    CMTime v29 = (CMTime)v44;
    PC_CMTimeSaferSubtract((CMTime *)&v38, &v29, (uint64_t)&v39);
    operator*(&v39, (CMTime *)&v46, v8);
    v38.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v44;
    CMTime v29 = (CMTime)v46;
    PC_CMTimeSaferAdd((CMTime *)&v38, &v29, (uint64_t)&v40);
    *((_OWORD *)a2 + OZLinkBehavior::clearAll(this, 1) = xmmword_1B7E736F0;
    *((_OWORD *)a2 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = xmmword_1B7E736F0;
    *(_OWORD *)a2 = xmmword_1B7E736F0;
    OZRenderState::OZRenderState(&v38);
    *(__n128 *)&v38.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v40;
    v38.var0.unsigned int var3 = v41;
    (*(void (**)(uint64_t, CMTimeValue *, OZRenderState *))(*(void *)v5 + 1360))(v5, a2, &v38);
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v39.CMTimeValue value = _Q0;
    v39.CMTimeEpoch epoch = 0x3FF0000000000000;
    (*(void (**)(uint64_t, CMTime *, OZRenderState *, void))(*(void *)v5 + 1320))(v5, &v39, &v38, 0);
    int v15 = 0;
    uint64_t v37 = 0x3FF0000000000000;
    v29.CMTimeValue value = v39.value;
    *(_OWORD *)&v29.timescale = 0u;
    long long v30 = 0u;
    uint64_t v31 = *(void *)&v39.timescale;
    long long v32 = 0u;
    long long v33 = 0u;
    double v16 = -1.0;
    double v17 = 1.0;
    CMTimeEpoch epoch = v39.epoch;
    double v18 = 1.0;
    double v19 = -1.0;
    long long v35 = 0u;
    double v20 = 1.0;
    long long v36 = 0u;
    double v21 = -1.0;
    do
    {
      double v22 = a2 + 1;
      if (v15) {
        double v22 = a2;
      }
      CMTimeValue v23 = *v22;
      double v24 = a2 + 3;
      if ((v15 & 2) != 0) {
        double v24 = a2 + 2;
      }
      uint64_t v25 = *v24;
      double v26 = a2 + 5;
      if ((v15 & 4) != 0) {
        double v26 = a2 + 4;
      }
      CMTimeEpoch v27 = *v26;
      v46.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v23;
      *(void *)&v46.var1 = v25;
      v46.unsigned int var3 = v27;
      double result = PCMatrix44Tmpl<double>::transform<double>((double *)&v29.value, (double *)&v46.var0, (double *)&v46.var0);
      if (v15)
      {
        if (v17 >= *(double *)&v46.var0) {
          double v17 = *(double *)&v46.var0;
        }
        if (v16 <= *(double *)&v46.var0) {
          double v16 = *(double *)&v46.var0;
        }
        if (v18 >= *(double *)&v46.var1) {
          double v18 = *(double *)&v46.var1;
        }
        if (v19 <= *(double *)&v46.var1) {
          double v19 = *(double *)&v46.var1;
        }
        if (v20 >= *(double *)&v46.var3) {
          double v20 = *(double *)&v46.var3;
        }
        if (v21 <= *(double *)&v46.var3) {
          double v21 = *(double *)&v46.var3;
        }
      }
      else
      {
        double v19 = *(double *)&v46.var1;
        double v21 = *(double *)&v46.var3;
        double v16 = *(double *)&v46.var0;
        double v17 = *(double *)&v46.var0;
        double v18 = *(double *)&v46.var1;
        double v20 = *(double *)&v46.var3;
      }
      ++v15;
    }
    while (v15 != 8);
    *(double *)a2 = v17;
    *((double *)a2 + OZLinkBehavior::clearAll(this, 1) = v16;
    *((double *)a2 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v18;
    *((double *)a2 + 3) = v19;
    *((double *)a2 + 4) = v20;
    *((double *)a2 + 5) = v21;
  }
  else
  {
    long long v28 = *(_OWORD *)((char *)this + 5112);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 5096);
    *((_OWORD *)a2 + OZLinkBehavior::clearAll(this, 1) = v28;
    *((_OWORD *)a2 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)((char *)this + 5128);
  }
  return result;
}

uint64_t OZFramingBehavior::targetSizeHasChanged(OZFramingBehavior *this)
{
  OZFramingBehavior::calcTargetSize(this, (CMTimeValue *)&v4);
  if (*(double *)&v4 == *((double *)this + 637)
    && *((double *)&v4 + 1) == *((double *)this + 638)
    && *(double *)&v5 == *((double *)this + 639)
    && *((double *)&v5 + 1) == *((double *)this + 640)
    && *(double *)&v6 == *((double *)this + 641)
    && *((double *)&v6 + 1) == *((double *)this + 642))
  {
    return 0;
  }
  long long v2 = v5;
  *(_OWORD *)((char *)this + 5096) = v4;
  *(_OWORD *)((char *)this + 511OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v2;
  *(_OWORD *)((char *)this + 5128) = v6;
  return 1;
}

const void *OZFramingBehavior::getTargetTransform(uint64_t a1, double *a2, uint64_t a3)
{
  double result = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)(a1 + 864));
  if (result)
  {
    long long v6 = result;
    (*(void (**)(const void *, double *, uint64_t))(*(void *)result + 1256))(result, a2, a3);
    if (v7)
    {
      double v13 = 0.0;
      double v14 = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v15 = _Q0;
      (*(void (**)(void *, double *, uint64_t))(*(void *)v7 + 1488))(v7, &v13, a3);
      PCMatrix44Tmpl<double>::rightTranslate(a2, v13 + *(double *)&v15 * 0.5, v14 + *((double *)&v15 + 1) * 0.5, 0.0);
    }
    return (const void *)PCMatrix44Tmpl<double>::orthoNormalize((uint64_t)a2);
  }
  return result;
}

const void *OZFramingBehavior::calculateFraming(OZFramingBehavior *this, const CMTime *a2, double *a3, double *a4, double *a5)
{
  *a3 = 0.0;
  *a4 = 0.0;
  *a5 = 0.0;
  double result = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
  if (result && *((void *)this + 605))
  {
    double result = (const void *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1024), MEMORY[0x1E4F1FA48], 0.0);
    if (*((void *)this + 605))
    {
      OZRenderState::OZRenderState(&v10);
      *(_OWORD *)&v10.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)&a2->value;
      v10.var0.unsigned int var3 = a2->epoch;
      double v8 = (OZCamera *)*((void *)this + 605);
      CMTime v9 = *a2;
      OZCamera::cameraAtTime(v8, &v9);
    }
  }
  return result;
}

void sub_1B7D7EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

OZScene *OZFramingBehavior::calculateFramingOffset(OZFramingBehavior *this)
{
  double result = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(void *)this + 336))(this);
  if (result)
  {
    memset(&v9, 0, sizeof(v9));
    OZScene::getCurrentTime(result, (__n128 *)&v9);
    double result = (OZScene *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1536), &v9, 0.0);
    if (result >= 3)
    {
      if (result != 3) {
        return result;
      }
      long long v4 = (OZFramingBehavior *)((char *)this + 1792);
      double v5 = 0.0;
    }
    else
    {
      int v3 = (int)result;
      double v7 = 0.0;
      double v8 = 0.0;
      double v6 = 0.0;
      OZFramingBehavior::calculateFraming(this, &v9, &v8, &v7, &v6);
      if (v3 == 2)
      {
        long long v4 = (OZFramingBehavior *)((char *)this + 1792);
        double v5 = v6;
      }
      else
      {
        long long v4 = (OZFramingBehavior *)((char *)this + 1792);
        if (v3 == 1) {
          double v5 = v7;
        }
        else {
          double v5 = v8;
        }
      }
    }
    return (OZScene *)OZChannelPosition3D::setPosition(v4, &v9, 0.0, 0.0, v5);
  }
  return result;
}

uint64_t OZFramingBehavior::checkFit(OZFramingBehavior *this, uint64_t a2)
{
  long long v4 = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(void *)this + 336))(this);
  if (v4)
  {
    memset(&v18, 0, sizeof(v18));
    OZScene::getCurrentTime(v4, (__n128 *)&v18);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1928), &v18, 0.0);
    double v6 = v5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2080), &v18, 0.0);
    double v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2528), &v18, 0.0);
    if (v6 != 0.0 || v8 != 0.0) {
      return 4;
    }
    double v10 = v9;
    double v16 = 0.0;
    double v17 = 0.0;
    double v15 = 0.0;
    OZFramingBehavior::calculateFraming(this, &v18, &v17, &v16, &v15);
    void v14[2] = v10 == v15;
    v14[0] = v10 == v17;
    v14[1] = v10 == v16;
    void v14[3] = v10 == 0.0;
    _OWORD v14[4] = 1;
    BOOL v11 = v14[(int)a2] != 0;
    if (v10 == v15) {
      BOOL v11 = 1;
    }
    if (v10 == v17) {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != v16)
    {
      if (v10 == 0.0) {
        return 3;
      }
      return 4;
    }
    if (v14[(int)a2]) {
      unsigned int v12 = a2;
    }
    else {
      unsigned int v12 = 2 * (v10 == v15);
    }
    if (v11) {
      return v12;
    }
    else {
      return 1;
    }
  }
  return a2;
}

void OZChannelPosition3D::getPosition(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
  uint64_t v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 736), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

uint64_t OZFramingBehavior::performDragOperation(OZFramingBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  uint64_t v9 = OZBehavior::performDragOperation(this, a2, a3, a4, a5, a6, a7, a8);
  OZFramingBehavior::calcTargetSize(this, (CMTimeValue *)v12);
  long long v10 = v12[1];
  *(_OWORD *)((char *)this + 5096) = v12[0];
  *(_OWORD *)((char *)this + 511OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v10;
  *(_OWORD *)((char *)this + 5128) = v12[2];
  OZFramingBehavior::calculateFramingOffset(this);
  return v9;
}

uint64_t non-virtual thunk to'OZFramingBehavior::performDragOperation(OZFramingBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  return OZFramingBehavior::performDragOperation((OZFramingBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZFramingBehavior::notify(OZFramingBehavior *this, __int16 a2)
{
  long long v4 = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(void *)this + 336))(this);
  if ((a2 & 0xC) != 0)
  {
    double v5 = v4;
    uint64_t v6 = *((void *)v4 + 198);
    memset(&v19, 0, sizeof(v19));
    OZScene::getCurrentTime(v4, (__n128 *)&v19);
    uint64_t v7 = *((void *)this + 605);
    if (v7)
    {
      uint64_t v8 = *(OZNotificationManager **)(v6 + 168);
      if (v8)
      {
        if (OZNotificationManager::wasChannelModified(v8, (const OZChannelBase *)(v7 + 6808)))
        {
          uint64_t v9 = (OZChannelBase *)*((void *)v5 + 188);
          if (v9) {
            OZChannelBase::setRangeName(v9, (const PCString *)1);
          }
          OZFramingBehavior::calculateFramingOffset(this);
        }
      }
    }
    if (OZFramingBehavior::targetSizeHasChanged(this)) {
      goto LABEL_13;
    }
    long long v10 = *(OZNotificationManager **)(v6 + 168);
    if (!v10) {
      goto LABEL_16;
    }
    if (OZNotificationManager::wasChannelModified(v10, (const OZChannelBase *)((char *)this + 1536))) {
      goto LABEL_13;
    }
    uint64_t v11 = *(OZNotificationManager **)(v6 + 168);
    if (!v11) {
      goto LABEL_16;
    }
    if (OZNotificationManager::wasChannelModified(v11, (const OZChannelBase *)((char *)this + 864)))
    {
LABEL_13:
      uint64_t v12 = (OZChannelBase *)*((void *)v5 + 188);
      if (v12) {
        OZChannelBase::setRangeName(v12, (const PCString *)1);
      }
      OZFramingBehavior::calculateFramingOffset(this);
    }
    else
    {
      double v13 = *(OZNotificationManager **)(v6 + 168);
      if (v13)
      {
        if (OZNotificationManager::wasChannelModified(v13, (const OZChannelBase *)((char *)this + 1928))
          || (double v14 = *(OZNotificationManager **)(v6 + 168)) != 0
          && (OZNotificationManager::wasChannelModified(v14, (const OZChannelBase *)((char *)this + 2080))
           || (double v15 = *(OZNotificationManager **)(v6 + 168)) != 0
           && OZNotificationManager::wasChannelModified(v15, (const OZChannelBase *)((char *)this + 2528))))
        {
          double v16 = (OZChannelBase *)*((void *)v5 + 188);
          if (v16) {
            OZChannelBase::setRangeName(v16, (const PCString *)1);
          }
          uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1536), &v19, 0.0);
          int v18 = OZFramingBehavior::checkFit(this, ValueAsInt);
          OZChannel::setValue((OZChannel *)((char *)this + 1536), &v19, (double)v18, 0);
        }
      }
    }
  }
LABEL_16:
  if ((a2 & 0x981C) != 0)
  {
    PCMutex::lock((PCMutex *)((char *)this + 5024));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((void **)this + 626));
    *((void *)this + 625) = (char *)this + 5008;
    *((void *)this + 627) = 0;
    *((void *)this + 626) = 0;
    PCMutex::unlock((PCMutex *)((char *)this + 5024));
  }
  OZCameraBehavior::notify(this, a2);
}

void non-virtual thunk to'OZFramingBehavior::notify(OZFramingBehavior *this, __int16 a2)
{
}

BOOL OZFramingBehavior::velocityCached(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t v6 = (PCMutex *)(a1 + 5024);
  PCMutex::lock((PCMutex *)(a1 + 5024));
  uint64_t v7 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(a1 + 5000, a2);
  if (a1 + 5008 != v7)
  {
    long long v8 = *(_OWORD *)(v7 + 56);
    *(void *)(a3 + 16) = *(void *)(v7 + 72);
    *(_OWORD *)a3 = v8;
  }
  BOOL v9 = a1 + 5008 != v7;
  PCMutex::unlock(v6);
  return v9;
}

uint64_t OZFramingBehavior::cacheVelocity(uint64_t a1, _OWORD *a2, long long *a3)
{
  uint64_t v6 = (PCMutex *)(a1 + 5024);
  PCMutex::lock((PCMutex *)(a1 + 5024));
  long long v10 = a2;
  uint64_t v7 = std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)(a1 + 5000), (CMTime *)a2, (uint64_t)&std::piecewise_construct, &v10);
  long long v8 = *a3;
  *((void *)v7 + 9) = *((void *)a3 + 2);
  *(_OWORD *)((char *)v7 + 56) = v8;
  return PCMutex::unlock(v6);
}

uint64_t OZFramingBehavior::accumTargetVelocity@<X0>(OZFramingBehavior *this@<X0>, Float64 a2@<D0>, double a3@<D1>, const CMTime *a4@<X1>, OZTransformNode *a5@<X2>, double *a6@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 608))(&v55);
  __n128 v53 = 0uLL;
  CMTimeEpoch v54 = 0;
  uint64_t v12 = (*(uint64_t (**)(OZFramingBehavior *))(*(void *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v53);
  int64_t v52 = v56;
  long long v51 = v55;
  memset(&v50, 0, sizeof(v50));
  *(_OWORD *)&v43.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v57;
  v43.var0.unsigned int var3 = v58;
  *(__n128 *)&v34.CMTimeValue value = v53;
  v34.CMTimeEpoch epoch = v54;
  PC_CMTimeSaferSubtract((CMTime *)&v43, &v34, (uint64_t)&v50);
  memset(&v49, 0, sizeof(v49));
  operator*(&v50, &time2, a2);
  v43.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)time2;
  *(__n128 *)&v34.CMTimeValue value = v53;
  v34.CMTimeEpoch epoch = v54;
  PC_CMTimeFloorToSampleDuration((CMTime *)&v43, &v34, (uint64_t)&time1);
  *(_OWORD *)&v43.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v51;
  v43.var0.unsigned int var3 = v52;
  CMTime v34 = time1;
  PC_CMTimeSaferAdd((CMTime *)&v43, &v34, (uint64_t)&v49);
  CMTime v48 = *a4;
  memset(&v47, 0, sizeof(v47));
  *(_OWORD *)&v43.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v51;
  v43.var0.unsigned int var3 = v52;
  CMTime v34 = v50;
  PC_CMTimeSaferAdd((CMTime *)&v43, &v34, (uint64_t)&v47);
  float64x2_t v45 = 0uLL;
  double v46 = 0.0;
  memset(v44, 0, sizeof(v44));
  a6[1] = 0.0;
  a6[2] = 0.0;
  *a6 = 0.0;
  OZRenderState::OZRenderState(&v43);
  uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  v34.CMTimeValue value = 0x3FF0000000000000;
  *(_OWORD *)&v34.timescale = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  CMTime time1 = v49;
  *(__n128 *)&time2.CMTimeValue value = v53;
  time2.CMTimeEpoch epoch = v54;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
  v43.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v59;
  (*(void (**)(OZTransformNode *, CMTime *, OZRenderState *))(*(void *)a5 + 1256))(a5, &v34, &v43);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34.value, v44, v45.f64);
  float64x2_t v32 = 0uLL;
  double v33 = 0.0;
  CMTime v31 = v49;
  CMTime time1 = v49;
  CMTime time2 = v48;
  uint64_t result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    double v14 = 1.0 / (a3 * 0.1);
    if (a3 * 0.1 > 10.0) {
      double v14 = 0.1;
    }
    if (a3 * 0.1 >= 0.1) {
      double v15 = v14;
    }
    else {
      double v15 = 10.0;
    }
    float v16 = v15;
    double v17 = 0.0;
    double v18 = 0.0;
    double v19 = 0.0;
    do
    {
      if (OZFramingBehavior::velocityCached((uint64_t)this, &v31, (uint64_t)&v32))
      {
        float64x2_t v45 = vaddq_f64(v32, v45);
        double v20 = v33;
        double v46 = v33 + v46;
        double v21 = v32.f64[1];
        double v28 = v32.f64[0];
      }
      else
      {
        double v23 = v45.f64[1];
        double v22 = v45.f64[0];
        double v24 = v46;
        v43.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v31;
        (*(void (**)(OZTransformNode *, CMTime *, OZRenderState *))(*(void *)a5 + 1256))(a5, &v34, &v43);
        PCMatrix44Tmpl<double>::transform<double>((double *)&v34.value, v44, v45.f64);
        float64_t v25 = v45.f64[0] - v22;
        double v21 = v45.f64[1] - v23;
        double v20 = v46 - v24;
        double v28 = v25;
        v32.f64[0] = v25;
        v32.f64[1] = v21;
        double v33 = v46 - v24;
        OZFramingBehavior::cacheVelocity((uint64_t)this, &v31, (long long *)&v32);
      }
      CMTime time1 = v31;
      CMTime time2 = v49;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
      CMTime time1 = v47;
      CMTime time2 = v49;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v29);
      operator/((long long *)&v59.var0, (uint64_t)v29, (uint64_t)&time);
      float Seconds = CMTimeGetSeconds(&time);
      double v27 = 1.0 - powf(Seconds, v16);
      double v17 = v28 * v27 + v17;
      double v18 = v21 * v27 + v18;
      *a6 = v17;
      a6[1] = v18;
      double v19 = v27 * v20 + v19;
      a6[2] = v19;
      CMTime time2 = v31;
      *(__n128 *)&v59.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v53;
      v59.unsigned int var3 = v54;
      PC_CMTimeSaferAdd(&time2, (CMTime *)&v59, (uint64_t)&time1);
      CMTime v31 = time1;
      CMTime time2 = v48;
      uint64_t result = CMTimeCompare(&time1, &time2);
    }
    while ((int)result < 1);
  }
  return result;
}

double OZFramingBehavior::solveNode(OZFramingBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  if ((*(unsigned int (**)(OZFramingBehavior *, double))(*(void *)this + 768))(this, a4))
  {
    TransformNode = (OZTransformNode *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
    if (TransformNode)
    {
      if (*((void *)this + 606))
      {
        long long v10 = TransformNode;
        if (!*((void *)this + 605)) {
          goto LABEL_10;
        }
        uint64_t v11 = (const void *)*((void *)TransformNode + 120);
        if (!v11) {
          goto LABEL_10;
        }
        if (!v12) {
          goto LABEL_10;
        }
        do
        {
          double v13 = v12;
          double v14 = (const void *)v12[120];
          if (!v14) {
            break;
          }
        }
        while (v12);
        if ((*(unsigned int (**)(void *))(*v13 + 1640))(v13))
        {
LABEL_10:
          memset(&v181, 0, sizeof(v181));
          (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v181);
          __n128 v179 = 0uLL;
          int64_t v180 = 0;
          uint64_t v15 = (*(uint64_t (**)(OZFramingBehavior *))(*(void *)this + 336))(this);
          __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v179);
          (*(void (**)(long long *__return_ptr, OZFramingBehavior *, __n128))(*(void *)this + 608))(&v175, this, FrameDuration);
          long long v173 = v175;
          int64_t v174 = v176;
          memset(v172, 0, sizeof(v172));
          OZBehavior::getFrameDuration(this, (__n128 *)v139);
          *(_OWORD *)&time1.var0.CMTime var0 = v175;
          time1.var0.unsigned int var3 = v176;
          *(_OWORD *)&time2.var0.CMTime var0 = v177;
          time2.var0.unsigned int var3 = v178;
          PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v134);
          *(_OWORD *)&time1.var0.CMTime var0 = *(_OWORD *)&v134.var0.var0;
          time1.var0.unsigned int var3 = v134.var0.var3;
          *(_OWORD *)&time2.var0.CMTime var0 = *(_OWORD *)v139;
          time2.var0.unsigned int var3 = *(void *)&v139[16];
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v172);
          memset(&v171, 0, sizeof(v171));
          *(_OWORD *)&time1.var0.CMTime var0 = v177;
          time1.var0.unsigned int var3 = v178;
          *(__n128 *)&time2.var0.CMTime var0 = v179;
          time2.var0.unsigned int var3 = v180;
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v171);
          time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v181;
          *(_OWORD *)&time2.var0.CMTime var0 = v173;
          time2.var0.unsigned int var3 = v174;
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v134);
          *(__n128 *)&time1.var0.CMTime var0 = v179;
          time1.var0.unsigned int var3 = v180;
          time2.CMTime var0 = v171;
          double v17 = CMTimeCompare((CMTime *)&time1, (CMTime *)&time2) >= 0 ? &v179 : (__n128 *)&v171;
          *(__n128 *)&time1.var0.CMTime var0 = *v17;
          time1.var0.unsigned int var3 = v17[1].n128_i64[0];
          operator/((long long *)&v134.var0.var0, (uint64_t)&time1, (uint64_t)&time);
          double Seconds = CMTimeGetSeconds(&time);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3976), &v181, 0.0);
          double v20 = v19;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4128), &v181, 0.0);
          if (Seconds >= 0.0)
          {
            double v22 = v21;
            if (Seconds != 0.0 || v20 <= 0.0 || v21 <= 0.0)
            {
              BOOL v23 = Seconds <= 1.0;
              if (Seconds <= 1.0) {
                double v24 = Seconds;
              }
              else {
                double v24 = 1.0;
              }
              double v25 = 0.0;
              if (!v23)
              {
                *(_OWORD *)&time1.var0.CMTime var0 = v173;
                time1.var0.unsigned int var3 = v174;
                time2.CMTime var0 = v171;
                PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v134);
                double v25 = (*(double (**)(OZFramingBehavior *, uint64_t, OZRenderState *, double))(*(void *)this + 776))(this, a2, &v134, a5);
              }
              v169[1] = 0xBFF0000000000000;
              v169[0] = &unk_1F1179F48;
              if (OZValueCache<OZFramingCacheItem>::find((uint64_t)this + 4856, (uint64_t)v169, v24))
              {
                switch((int)a2)
                {
                  case 0:
                    double v26 = *(double *)&v169[2];
                    goto LABEL_67;
                  case 1:
                    double v26 = *(double *)&v169[3];
                    goto LABEL_67;
                  case 2:
                    double v26 = *(double *)&v169[4];
                    goto LABEL_67;
                  case 3:
                    double v26 = *(double *)&v169[5];
                    goto LABEL_67;
                  case 4:
                    double v26 = *(double *)&v169[6];
                    goto LABEL_67;
                  case 5:
                    double v26 = *(double *)&v169[7];
LABEL_67:
                    a5 = v25 + v26;
                    break;
                  default:
                    return a5;
                }
              }
              else
              {
                double v101 = v25;
                double v27 = (const CMTime *)MEMORY[0x1E4F1FA48];
                int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3720), MEMORY[0x1E4F1FA48], 0.0);
                uint64_t v29 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4280), v27, 0.0);
                long long v30 = (OZCameraBehavior *)v29;
                if (ValueAsInt) {
                  CMTime v31 = (OZCameraBehavior *)v29;
                }
                else {
                  CMTime v31 = 0;
                }
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4536), &v181, 0.0);
                double v33 = v32;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4688), &v181, 0.0);
                double v35 = v34;
                if (v20 >= v22) {
                  double v36 = v20;
                }
                else {
                  double v36 = v22;
                }
                double v37 = 1.0;
                if (v33 <= 1.0) {
                  double v38 = v33;
                }
                else {
                  double v38 = 1.0;
                }
                if (v33 >= v36) {
                  double v39 = v38;
                }
                else {
                  double v39 = v36;
                }
                if (v20 <= -0.0000001 || v20 >= 0.0000001)
                {
                  double v40 = 1.0;
                  if (v24 / v20 <= 1.0) {
                    double v40 = v24 / v20;
                  }
                  if (v24 / v20 >= 0.0) {
                    double v37 = v40;
                  }
                  else {
                    double v37 = 0.0;
                  }
                }
                double v41 = OZCameraBehavior::calcEaseInEaseOut(v30, v37);
                if (v22 <= -0.0000001 || (double v42 = 1.0, v22 >= 0.0000001))
                {
                  double v43 = 1.0;
                  if (v24 / v22 <= 1.0) {
                    double v43 = v24 / v22;
                  }
                  double v42 = 0.0;
                  if (v24 / v22 >= 0.0) {
                    double v42 = v43;
                  }
                }
                Float64 v105 = v39;
                double v44 = OZCameraBehavior::calcEaseInEaseOut(v31, v42);
                std::vector<double>::vector(__p, 6uLL);
                (*(void (**)(OZFramingBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, __p);
                double v45 = *(double *)__p[0];
                double v46 = *((double *)__p[0] + 1);
                double v108 = *((double *)__p[0] + 2);
                double v47 = *((double *)__p[0] + 4);
                double v48 = *((double *)__p[0] + 5);
                v167[0] = *((double *)__p[0] + 3);
                v167[1] = v47;
                v167[2] = v48;
                uint64_t v164 = 0x3FF0000000000000;
                long long v165 = 0uLL;
                uint64_t v166 = 0;
                PCQuat<double>::setEulerAngles((double *)&v164, 4, v167[0], v47, v48);
                memset(&v163, 0, sizeof(v163));
                if (v24 == 1.0)
                {
                  *(_OWORD *)&time1.var0.CMTime var0 = v173;
                  time1.var0.unsigned int var3 = v174;
                  time2.CMTime var0 = v171;
                  PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v163);
                }
                else
                {
                  CMTime v163 = v181;
                }
                OZRenderState::OZRenderState(&time1);
                CMTime v49 = (CMTime *)v172;
                if (!ValueAsInt) {
                  CMTime v49 = &v163;
                }
                *(_OWORD *)&time1.var0.CMTime var0 = *(_OWORD *)&v49->value;
                time1.var0.unsigned int var3 = v49->epoch;
                time1.var8 = 0;
                OZRenderState::OZRenderState(&time2);
                time2.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v181;
                time2.var8 = 0;
                double v110 = (*(double (**)(void))(**((void **)this + 606) + 1328))(*((void *)this + 606));
                uint64_t v159 = 0;
                PCSharedCount::PCSharedCount(&v160);
                CMTime v50 = (OZCamera *)*((void *)this + 605);
                if (v50)
                {
                  CMTime var0 = (CMTime)time2.var0;
                  OZCamera::cameraAtTime(v50, &var0);
                }
                int64_t v52 = (const void *)*((void *)this + 606);
                int v103 = ValueAsInt;
                double v102 = v41;
                double v104 = v35;
                if (v52) {
                else
                }
                  __n128 v53 = 0;
                float64x2_t v109 = (float64x2_t)xmmword_1B7E733E0;
                long long v156 = xmmword_1B7E733E0;
                double v157 = 0.0;
                double v54 = 0.0;
                int v55 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1024), MEMORY[0x1E4F1FA48], 0.0);
                int v56 = v55;
                double v57 = 1.0;
                double v107 = v45;
                switch(v55)
                {
                  case 0:
                    long long v58 = xmmword_1B7E733D0;
                    goto LABEL_70;
                  case 1:
                    long long v58 = xmmword_1B7E7C890;
LABEL_70:
                    float64x2_t v109 = (float64x2_t)v58;
                    goto LABEL_73;
                  case 2:
                    long long v156 = 0uLL;
                    double v157 = -1.0;
                    double v57 = 0.0;
                    double v54 = -1.0;
                    goto LABEL_73;
                  case 3:
                    long long v156 = 0uLL;
                    double v157 = 1.0;
                    float64x2_t v109 = (float64x2_t)xmmword_1B7E7E030;
                    double v57 = 0.0;
                    double v54 = 1.0;
LABEL_73:
                    double v59 = 0.0;
                    goto LABEL_77;
                  case 4:
                    double v59 = 1.0;
                    goto LABEL_76;
                  case 5:
                    double v59 = -1.0;
                    goto LABEL_76;
                  default:
                    double v59 = 0.0;
LABEL_76:
                    float64x2_t v109 = 0u;
LABEL_77:
                    if (!v53 || !v51) {
                      goto LABEL_84;
                    }
                    if (v55 == 2)
                    {
                      double v54 = 1.0;
                    }
                    else
                    {
                      if (v55 != 3) {
                        goto LABEL_84;
                      }
                      double v54 = -1.0;
                    }
                    long long v156 = 0uLL;
                    double v57 = 0.0;
                    double v157 = v54;
LABEL_84:
                    double v106 = v46;
                    double v60 = 0.0;
                    int v61 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1280), MEMORY[0x1E4F1FA48], 0.0);
                    switch(v61)
                    {
                      case 1:
                      case 7:
                        long long v156 = 0x3FF0000000000000uLL;
                        double v157 = 0.0;
                        double v54 = 0.0;
                        double v60 = 1.0;
                        goto LABEL_92;
                      case 2:
                      case 8:
                        long long v156 = 0xBFF0000000000000;
                        double v157 = 0.0;
                        double v54 = 0.0;
                        double v60 = -1.0;
                        goto LABEL_92;
                      case 3:
                      case 9:
                        long long v156 = xmmword_1B7E733E0;
                        double v157 = 0.0;
                        double v57 = 1.0;
                        goto LABEL_89;
                      case 4:
                      case 10:
                        long long v156 = xmmword_1B7E7E030;
                        double v157 = 0.0;
                        double v57 = -1.0;
LABEL_89:
                        double v54 = 0.0;
                        break;
                      case 5:
                      case 11:
                        long long v156 = 0uLL;
                        double v157 = 1.0;
                        double v54 = 1.0;
                        goto LABEL_92;
                      case 6:
                      case 12:
                        long long v156 = 0uLL;
                        double v157 = -1.0;
                        double v54 = -1.0;
LABEL_92:
                        double v57 = 0.0;
                        break;
                      default:
                        break;
                    }
                    if (v159 && (*(unsigned int (**)(uint64_t))(*(void *)v159 + 632))(v159) == 1)
                    {
                      memset(v139, 0, sizeof(v139));
                      v134.var7.var0[1][2] = 1.0;
                      v134.var7.var0[0][1] = 1.0;
                      v134.unsigned int var3 = 1.0;
                      v134.var0.CMTime var0 = 0x3FF0000000000000;
                      memset(&v134.var0.var1, 0, 32);
                      memset(&v134.var4, 0, 32);
                      memset(&v134.var7.var0[0][2], 0, 32);
                      PCMatrix44Tmpl<double>::leftRotate((long long *)&v134.var0.var0, (double *)&v164);
                      double v62 = 1.0 / v110;
                      if (1.0 / v110 != 1.0)
                      {
                        *(float64x2_t *)&v134.var0.CMTime var0 = vmulq_n_f64(*(float64x2_t *)&v134.var0.var0, v62);
                        *(float64x2_t *)&v134.var0.unsigned int var3 = vmulq_n_f64(*(float64x2_t *)&v134.var0.var3, v62);
                      }
                      PCMatrix44Tmpl<double>::transform<double>((double *)&v134.var0.var0, (double *)v139, (double *)v139);
                      double v106 = v106 + *(double *)&v139[8];
                      double v107 = v107 + *(double *)v139;
                      double v108 = v108 + *(double *)&v139[16];
                    }
                    float64x2_t v154 = 0uLL;
                    double v155 = 0.0;
                    double v152 = 0.0;
                    double v151 = 0.0;
                    double v153 = 0.0;
                    OZChannelPosition3D::getPosition((uint64_t)this + 1792, &v181, &v151, 0.0);
                    switch(v56)
                    {
                      case 0:
                        float64_t v63 = v152;
                        double v64 = -v151;
                        goto LABEL_101;
                      case 1:
                        float64_t v63 = v152;
                        double v64 = v151;
LABEL_101:
                        v154.f64[0] = 0.0;
                        goto LABEL_108;
                      case 2:
                        float64_t v65 = v151;
                        double v64 = -v152;
                        goto LABEL_104;
                      case 3:
                        float64_t v65 = v151;
                        double v64 = v152;
LABEL_104:
                        v154.f64[0] = v65;
                        float64_t v63 = 0.0;
                        goto LABEL_108;
                      case 4:
                        double v66 = v151;
                        float64_t v63 = v152;
                        goto LABEL_107;
                      case 5:
                        float64_t v63 = v152;
                        double v66 = -v151;
LABEL_107:
                        v154.f64[0] = v66;
                        double v64 = 0.0;
LABEL_108:
                        v154.f64[1] = v63;
                        double v155 = v64;
                        break;
                      default:
                        break;
                    }
                    if (v51)
                    {
                      CMTime v150 = (CMTime)time1.var0;
                      OZCamera::cameraAtTime(v51, &v150);
                    }
                    double v67 = v153 + 0.0;
                    if (v153 + 0.0 < 0.0000001 && v67 > -0.0000001) {
                      double v67 = -1.0;
                    }
                    float64x2_t v148 = vaddq_f64(v154, vmulq_n_f64(v109, v67));
                    double v149 = v155 + v59 * v67;
                    uint64_t v147 = 0x3FF0000000000000;
                    double v144 = 1.0;
                    double v141 = 1.0;
                    *(void *)int8x16_t v139 = 0x3FF0000000000000;
                    *(_OWORD *)&v139[8] = 0u;
                    long long v140 = 0u;
                    long long v142 = 0u;
                    long long v143 = 0u;
                    long long v145 = 0u;
                    long long v146 = 0u;
                    OZFramingBehavior::getTargetTransform((uint64_t)this, (double *)v139, (uint64_t)&time1);
                    if (fabs(v105 + -1.0) < 0.0000001 || v24 < v105)
                    {
                      PCMatrix44Tmpl<double>::transform<double>((double *)v139, v154.f64, v154.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v139, v148.f64, v148.f64);
                    }
                    else
                    {
                      memset(v126, 0, sizeof(v126));
                      operator*((CMTime *)&v171, (CMTime *)&v138, v105);
                      v134.CMTime var0 = v138;
                      *(__n128 *)float32x4_t v128 = v179;
                      *(void *)&unsigned char v128[16] = v180;
                      PC_CMTimeFloorToSampleDuration((CMTime *)&v134, (CMTime *)v128, (uint64_t)v111);
                      *(_OWORD *)&v134.var0.CMTime var0 = v173;
                      v134.var0.unsigned int var3 = v174;
                      *(_OWORD *)float32x4_t v128 = *(_OWORD *)v111;
                      *(void *)&unsigned char v128[16] = *(void *)&v111[16];
                      PC_CMTimeSaferAdd((CMTime *)&v134, (CMTime *)v128, (uint64_t)v126);
                      memset(&v138, 0, sizeof(v138));
                      *(_OWORD *)&v134.var0.CMTime var0 = v173;
                      v134.var0.unsigned int var3 = v174;
                      *($3CC8671D27C23BF42ADDB32F2B5E48AE *)float32x4_t v128 = v171;
                      PC_CMTimeSaferAdd((CMTime *)&v134, (CMTime *)v128, (uint64_t)&v138);
                      v134.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v181;
                      *($3CC8671D27C23BF42ADDB32F2B5E48AE *)float32x4_t v128 = v138;
                      int32_t v69 = CMTimeCompare((CMTime *)&v134, (CMTime *)v128);
                      float64x2_t v70 = (CMTime *)&v138;
                      if (v69 < 0) {
                        float64x2_t v70 = &v181;
                      }
                      CMTime v137 = *v70;
                      OZFramingBehavior::accumTargetVelocity(this, v105, v104, &v137, v10, v135.f64);
                      OZRenderState::OZRenderState(&v134, &time1);
                      *(_OWORD *)float32x4_t v128 = *(_OWORD *)v126;
                      *(void *)&unsigned char v128[16] = *(void *)&v126[16];
                      *(__n128 *)float32x4_t v111 = v179;
                      *(void *)&v111[16] = v180;
                      PC_CMTimeSaferSubtract((CMTime *)v128, (CMTime *)v111, (uint64_t)&v132);
                      *(_OWORD *)&v134.var0.CMTime var0 = v132;
                      *(double *)&v134.var0.unsigned int var3 = v133;
                      *(void *)&v131[40] = 0x3FF0000000000000;
                      *(void *)int32x4_t v131 = 0x3FF0000000000000;
                      *(void *)&v128[40] = 0x3FF0000000000000;
                      *(void *)float32x4_t v128 = 0x3FF0000000000000;
                      memset(&v128[8], 0, 32);
                      long long v129 = 0u;
                      long long v130 = 0u;
                      memset(&v131[8], 0, 32);
                      OZFramingBehavior::getTargetTransform((uint64_t)this, (double *)v128, (uint64_t)&v134);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v128, v154.f64, v154.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v128, v148.f64, v148.f64);
                      float64x2_t v154 = vaddq_f64(v135, v154);
                      double v155 = v136 + v155;
                      float64x2_t v148 = vaddq_f64(v135, v148);
                      double v149 = v136 + v149;
                    }
                    if (v61 <= 6)
                    {
                      double v71 = v60 * *((double *)&v140 + 1);
                      double v72 = v60 * *(double *)&v143;
                      double v60 = v60 * *(double *)v139 + v57 * *(double *)&v139[8] + v54 * *(double *)&v139[16];
                      double v73 = v71 + v57 * v141;
                      double v74 = v57 * *((double *)&v143 + 1);
                      double v57 = v73 + v54 * *(double *)&v142;
                      *(double *)&long long v156 = v60;
                      *((double *)&v156 + OZLinkBehavior::clearAll(this, 1) = v57;
                      double v54 = v72 + v74 + v54 * v144;
                      double v157 = v54;
                    }
                    v134.var7.var0[1][2] = 1.0;
                    v134.var7.var0[0][1] = 1.0;
                    v134.unsigned int var3 = 1.0;
                    v134.var0.CMTime var0 = 0x3FF0000000000000;
                    memset(&v134.var0.var1, 0, 32);
                    memset(&v134.var4, 0, 32);
                    memset(&v134.var7.var0[0][2], 0, 32);
                    __n128 v75 = *(const void **)(*((void *)this + 606) + 960);
                    if (v75
                    {
                      (*(void (**)(void *, OZRenderState *, OZRenderState *))(*(void *)v76 + 1256))(v76, &v134, &time2);
                    }
                    else
                    {
                      *(double *)&v134.var0.CMTime var0 = v110;
                    }
                    long long v130 = *(_OWORD *)&v134.var6;
                    *(_OWORD *)int32x4_t v131 = *(_OWORD *)&v134.var7.var0[0][1];
                    *(_OWORD *)&v131[16] = *(_OWORD *)&v134.var7.var0[0][3];
                    *(_OWORD *)&v131[32] = *(_OWORD *)&v134.var7.var0[1][1];
                    *(_OWORD *)float32x4_t v128 = *(_OWORD *)&v134.var0.var0;
                    *(_OWORD *)&unsigned char v128[16] = *(_OWORD *)&v134.var0.var3;
                    *(_OWORD *)&v128[32] = *(_OWORD *)&v134.var2;
                    long long v129 = *(_OWORD *)&v134.var4;
                    if (PCMatrix44Tmpl<double>::invert((double *)v128, (double *)v128, 0.0))
                    {
                      double v77 = &v148;
                      PCMatrix44Tmpl<double>::transform<double>((double *)v128, v148.f64, v148.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v128, v154.f64, v154.f64);
                      *(double *)&long long v156 = v60 * *(double *)v128 + v57 * *(double *)&v128[8] + v54 * *(double *)&v128[16];
                      *((double *)&v156 + OZLinkBehavior::clearAll(this, 1) = v60 * *(double *)&v128[32]
                                             + v57 * *(double *)&v128[40]
                                             + v54 * *(double *)&v129;
                      double v157 = v60 * *(double *)&v130 + v57 * *((double *)&v130 + 1) + v54 * *(double *)v131;
                      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2680), &v181, 0.0);
                      double v79 = v78;
                      double v80 = v149;
                      if (v102 == 1.0) {
                        double v81 = v149 + 3.0e-12;
                      }
                      else {
                        double v81 = v108 + v102 * (v149 - v108);
                      }
                      double v82 = v148.f64[1];
                      double v83 = v102 * (v148.f64[1] - v106);
                      double v84 = v107 + v102 * (v148.f64[0] - v107);
                      double v85 = v106 + v83;
                      *(double *)&v138.CMTime var0 = v84;
                      *(void *)&v137.timescale = 0;
                      v137.CMTimeValue value = 0;
                      double v86 = -1.0;
                      if (v53) {
                        double v86 = 1.0;
                      }
                      *(double *)&v137.CMTimeEpoch epoch = v86;
                      if (!v103)
                      {
                        double v77 = (float64x2_t *)&v138;
                        double v82 = v106 + v83;
                      }
                      v135.f64[0] = v77->f64[0];
                      v135.f64[1] = v82;
                      if (!v103) {
                        double v80 = v81;
                      }
                      double v136 = v80;
                      calcRotation(v135.f64, v154.f64, (double *)&v156, (double *)&v137.value, (uint64_t)v126, v110);
                      long long v132 = 0uLL;
                      double v133 = 0.0;
                      OZChannelPosition3D::getPosition((uint64_t)this + 2832, &v181, &v132, 0.0);
                      double v87 = 0.00001;
                      if (v79 != 0.0) {
                        double v87 = v79;
                      }
                      if (v102 <= v87)
                      {
                        double v91 = v102 / v87;
                        double v90 = (v87 * 3.0 * (v102 / v87)
                             + v91 * v91 * ((v87 - v87) * 3.0 - v87 * 3.0)
                             + v91 * (v91 * v91) * (v87 - v87 * 3.0 - ((v87 - v87) * 3.0 - v87 * 3.0))
                             + 0.0)
                            / v87;
                      }
                      else
                      {
                        double v88 = (v102 - v87) / (1.0 - v87);
                        double v89 = (v87 - v87) * 3.0;
                        double v90 = 1.0
                            - (v87
                             + v89 * v88
                             + v88 * v88 * (v89 - v89)
                             + v88 * (v88 * v88) * (1.0 - v87 - v89 - (v89 - v89))
                             - v87)
                            / (1.0 - v87);
                      }
                      PCQuat<double>::transform<double>((double *)v126, (double *)&v132);
                      double v92 = v90 * v133;
                      double v93 = v84 + v90 * *(double *)&v132;
                      double v94 = v85 + v90 * *((double *)&v132 + 1);
                      *(double *)&v138.CMTime var0 = v93;
                      *(double *)&v138.var1 = v94;
                      double v95 = v92 + v81;
                      *(double *)&v138.unsigned int var3 = v95;
                      float64x2_t v135 = *v77;
                      double v136 = v77[1].f64[0];
                      calcRotation(v135.f64, v154.f64, (double *)&v156, (double *)&v137.value, (uint64_t)v111, v110);
                      *(_OWORD *)&v126[8] = *(_OWORD *)&v111[8];
                      uint64_t v127 = *(void *)&v111[24];
                      long long v124 = *(_OWORD *)&v111[8];
                      uint64_t v123 = *(void *)v111;
                      uint64_t v125 = *(void *)&v111[24];
                      *(void *)int32x4_t v126 = *(void *)v111;
                      shortest_slerp((double *)&v164, (double *)&v123, (uint64_t)v111, v44);
                      uint64_t v164 = *(void *)v111;
                      long long v165 = *(_OWORD *)&v111[8];
                      uint64_t v166 = *(void *)&v111[24];
                      long long v121 = 0uLL;
                      v122[0] = 0.0;
                      double EulerAngles = PCQuat<double>::getEulerAngles((double *)&v164, &v121, (void *)&v121 + 1, v122, 4);
                      if (v159
                        && (*(unsigned int (**)(uint64_t, double))(*(void *)v159 + 632))(v159, EulerAngles) == 1)
                      {
                        double v118 = 0.0;
                        double v119 = 0.0;
                        double v120 = 0.0;
                        uint64_t v117 = 0x3FF0000000000000;
                        uint64_t v114 = 0x3FF0000000000000;
                        *(void *)float32x4_t v112 = 0x3FF0000000000000;
                        *(void *)float32x4_t v111 = 0x3FF0000000000000;
                        memset(&v111[8], 0, 32);
                        *(_OWORD *)&v112[8] = 0u;
                        long long v113 = 0u;
                        long long v115 = 0u;
                        long long v116 = 0u;
                        PCMatrix44Tmpl<double>::leftRotate((long long *)v111, (double *)&v164);
                        double v97 = 1.0 / v110;
                        if (1.0 / v110 != 1.0)
                        {
                          *(float64x2_t *)float32x4_t v111 = vmulq_n_f64(*(float64x2_t *)v111, v97);
                          *(float64x2_t *)&v111[16] = vmulq_n_f64(*(float64x2_t *)&v111[16], v97);
                        }
                        PCMatrix44Tmpl<double>::transform<double>((double *)v111, &v118, &v118);
                        double v93 = v93 - v118;
                        double v94 = v94 - v119;
                        double v95 = v95 - v120;
                      }
                      if ((a2 - 3) <= 2)
                      {
                        for (uint64_t i = 0; i != 3; ++i)
                          v122[i - 2] = v122[i - 2]
                                      + (double)(int)vcvtmd_s64_f64((v167[i] - v122[i - 2]) / 6.28318531 + 0.5 + 0.0000001)
                                      * 6.28318531;
                      }
                      *(double *)&v111[8] = v24;
                      *(double *)&v111[16] = v93;
                      *(void *)float32x4_t v111 = &unk_1F1179F48;
                      *(double *)&v111[24] = v94;
                      *(double *)&v111[32] = v95;
                      *(_OWORD *)float32x4_t v112 = v121;
                      *(double *)&v112[16] = v122[0];
                      OZValueCache<OZFramingCacheItem>::add((uint64_t)this + 4856, (uint64_t)v111);
                      switch((int)a2)
                      {
                        case 0:
                          a5 = v101 + v93;
                          break;
                        case 1:
                          a5 = v101 + v94;
                          break;
                        case 2:
                          a5 = v101 + v95;
                          break;
                        case 3:
                          double v99 = *(double *)&v121;
                          goto LABEL_159;
                        case 4:
                          double v99 = *((double *)&v121 + 1);
                          goto LABEL_159;
                        case 5:
                          double v99 = v122[0];
LABEL_159:
                          a5 = v101 + v99;
                          break;
                        default:
                          break;
                      }
                    }
                    PCSharedCount::~PCSharedCount(&v160);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    break;
                }
              }
            }
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B7D810F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount *a18)
{
  PCSharedCount::~PCSharedCount(a18);
  double v19 = (void *)STACK[0x740];
  if (STACK[0x740])
  {
    STACK[0x748] = (unint64_t)v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZFramingCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == a1 + 8)
    {
      uint64_t v9 = 0;
      goto LABEL_7;
    }
    double v8 = *(double *)(i + 24);
    if (v8 == a3) {
      break;
    }
  }
  *(double *)(a2 + 8) = v8;
  long long v10 = *(_OWORD *)(i + 32);
  long long v11 = *(_OWORD *)(i + 64);
  *(_OWORD *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 16) = v10;
  uint64_t v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

double PCQuat<double>::getEulerAngles(double *a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v16, a1);
  memset(v11, 0, sizeof(v11));
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  int v12 = a5;
  PCMatrix44Tmpl<double>::getTransformation((long long *)&v16, (uint64_t)v11);
  uint64_t v9 = *((void *)&v13 + 1);
  *a2 = v13;
  *a3 = v9;
  double result = *(double *)&v14;
  *a4 = v14;
  return result;
}

void OZValueCache<OZFramingCacheItem>::add(uint64_t a1, uint64_t a2)
{
  long long v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    std::list<OZProjectedBoundsCacheItem>::pop_front(a1 + 8);
  }
  double v5 = operator new(0x50uLL);
  v5[3] = *(void *)(a2 + 8);
  v5[1] = a1 + 8;
  float64x2_t v5[2] = &unk_1F1179F48;
  long long v6 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v5 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v5 + 3) = v6;
  *((_OWORD *)v5 + 4) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 8);
  *double v5 = v7;
  *(void *)(v7 + 8) = v5;
  *(void *)(a1 + 8) = v5;
  ++*(void *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B7D81470(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZFramingBehavior::solveNode(OZFramingBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZFramingBehavior::solveNode((OZFramingBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZFramingCacheItem::~OZFramingCacheItem(OZFramingCacheItem *this)
{
}

uint64_t OZValueCache<OZFramingCacheItem>::OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F1179F80;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B7E782B0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B7D81500(_Unwind_Exception *a1)
{
  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZFramingCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZFramingCacheItem>::~OZValueCache(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZValueCache<OZFramingCacheItem>::~OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F1179F80;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

void BHOvershootBehavior::BHOvershootBehavior(BHOvershootBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1179FB0;
  float64x2_t v5[2] = &unk_1F117A2F0;
  v5[6] = &unk_1F117A548;
  v5[42] = &unk_1F117A5A0;
  v5[67] = &unk_1F117A5C8;
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior Start Value");
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior End Value");
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior Ramp Fraction");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), 0.35, &v6, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior Ring Cycles");
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1320), 3.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior Acceleration");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1472), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior Start Frame Offset");
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1624), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Overshoot Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1776), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1624), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1776), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1168), 0.01);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1168));
  OZChannel::setMin((OZChannel *)((char *)this + 1320), 0.01);
  OZChannel::setMax((OZChannel *)((char *)this + 1320), 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1320), 10.0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1320));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1624), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1624));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1776), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1776));
}

void sub_1B7D81998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannel::~OZChannel(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior::BHOvershootBehavior(BHOvershootBehavior *this, const BHOvershootBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1179FB0;
  *(void *)(v5 + 16) = &unk_1F117A2F0;
  *(void *)(v5 + 48) = &unk_1F117A548;
  *(void *)(v5 + 336) = &unk_1F117A5A0;
  *(void *)(v5 + 536) = &unk_1F117A5C8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((void *)this + 127) = &unk_1F1100CF0;
  *((void *)this + 129) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((void *)this + 165) = &unk_1F1100CF0;
  *((void *)this + 167) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1624), (const OZChannelBase *)((char *)a2 + 1624), v6);
  *((void *)this + 203) = &unk_1F1100CF0;
  *((void *)this + 205) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1776), (const OZChannelBase *)((char *)a2 + 1776), v6);
  *((void *)this + 22OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 224) = &unk_1F1101050;
}

void sub_1B7D81D30(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v7);
  OZChannelPercent::~OZChannelPercent(v6);
  OZChannel::~OZChannel(v5);
  OZChannelPercent::~OZChannelPercent(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D81D94()
{
}

void sub_1B7D81D9C()
{
}

void BHOvershootBehavior::~BHOvershootBehavior(BHOvershootBehavior *this)
{
  *(void *)this = &unk_1F1179FB0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117A2F0;
  *((void *)this + 6) = &unk_1F117A548;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117A5A0;
  *((void *)this + 67) = &unk_1F117A5C8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1776));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1624));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  BHOvershootBehavior::~BHOvershootBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'BHOvershootBehavior::~BHOvershootBehavior(BHOvershootBehavior *this)
{
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 48));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 336));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t BHOvershootBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
  OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
  OZChannelBase::operator=(a1 + 1624, (uint64_t)v5 + 1624);

  return OZChannelBase::operator=(a1 + 1776, (uint64_t)v5 + 1776);
}

double BHOvershootBehavior::solveNode(BHOvershootBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v44, 0, sizeof(v44));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v44, a4);
  CMTime v43 = v44;
  if ((*(unsigned int (**)(BHOvershootBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v43, 0, 1, 1)&& (*(uint64_t (**)(BHOvershootBehavior *))(*(void *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, BHOvershootBehavior *))(*(void *)this + 608))(v42, this);
    memset(&v41, 0, sizeof(v41));
    __n128 v45 = *(__n128 *)&v42[0].value;
    CMTimeEpoch epoch = v42[0].epoch;
    uint64_t v7 = (OZScene *)(*(uint64_t (**)(BHOvershootBehavior *))(*(void *)this + 336))(this);
    double v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1624), MEMORY[0x1E4F1FA48], 0.0);
    OZScene::getTimeForFrame(v7, v9, &v39);
    *(__n128 *)&time1.CMTimeValue value = v45;
    time1.CMTimeEpoch epoch = epoch;
    *(__n128 *)&time2.CMTimeValue value = v39;
    time2.CMTimeEpoch epoch = v40;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    __n128 v39 = 0uLL;
    CMTimeEpoch v40 = 0;
    OZBehavior::getFrameDuration(this, &v36);
    CMTime time1 = v42[0];
    CMTime time2 = v42[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v45);
    *(__n128 *)&time1.CMTimeValue value = v45;
    time1.CMTimeEpoch epoch = epoch;
    *(__n128 *)&time2.CMTimeValue value = v36;
    time2.CMTimeEpoch epoch = v37;
    v10.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v38);
    long long v11 = (OZScene *)(*(uint64_t (**)(BHOvershootBehavior *, __n128))(*(void *)this + 336))(this, v10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1776), v8, 0.0);
    OZScene::getTimeForFrame(v11, v12, &v45);
    CMTime time1 = v38;
    *(__n128 *)&time2.CMTimeValue value = v45;
    time2.CMTimeEpoch epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v39);
    CMTime time1 = v44;
    CMTime time2 = v41;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      long long v13 = (OZChannel *)((char *)this + 864);
      goto LABEL_7;
    }
    CMTime time1 = v44;
    *(__n128 *)&time2.CMTimeValue value = v39;
    time2.CMTimeEpoch epoch = v40;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      long long v13 = (OZChannel *)((char *)this + 1016);
LABEL_7:
      OZChannel::getValueAsDouble(v13, MEMORY[0x1E4F1FA48], 0.0);
      return v14 + a5;
    }
    __n128 v45 = 0uLL;
    CMTimeEpoch epoch = 0;
    *(__n128 *)&time1.CMTimeValue value = v39;
    time1.CMTimeEpoch epoch = v40;
    CMTime time2 = v41;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v45);
    *(__n128 *)&time1.CMTimeValue value = v45;
    time1.CMTimeEpoch epoch = epoch;
    CMTime time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), v8, 0.0);
      double v17 = v16;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), v8, 0.0);
      double v19 = v18;
      double v20 = v18 - v17;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), v8, 0.0);
      double v22 = v21;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1472), v8, 0.0);
      double v24 = v23;
      CMTime time1 = v44;
      CMTime time2 = v41;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v38);
      operator/((long long *)&v38.value, (uint64_t)&v45, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      double v27 = Seconds;
      if (Seconds <= v22)
      {
        double v34 = Seconds / v22;
        *(double *)&time1.CMTimeValue value = v27 / v22;
        if (v24 > 0.0 && v34 > 0.0 && v34 < 1.0)
        {
          PCMath::easeInOut((double *)&time1.value, v34, v24, 0.0, 0.0, 1.0, 0, v25);
          double v34 = *(double *)&time1.value;
        }
        return v17 + v20 * v34 + a5;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), MEMORY[0x1E4F1FA48], 0.0);
        double v29 = v28 * 6.28318531;
        time1.CMTimeValue value = 0;
        PCMath::easeInOut(0, 1.0, v24, 0.0, 0.0, 1.0, (double *)&time1.value, v30);
        double v31 = (1.0 - v22) * (v20 * *(double *)&time1.value) / v22 / v29;
        double v32 = (v27 - v22) / (1.0 - v22);
        long double v33 = v31 * sin(v29 * v32);
        return v19 + a5 + v33 * ((exp(v32 * -3.0) + -0.0497870684) * 1.0523957);
      }
    }
    else
    {
      return 0.0;
    }
  }
  return a5;
}

double non-virtual thunk to'BHOvershootBehavior::solveNode(BHOvershootBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return BHOvershootBehavior::solveNode((BHOvershootBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void BHOvershootBehavior::didSetChannelInfo(BHOvershootBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  PCString v6 = (OZChannel *)((char *)this + 864);
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
  uint64_t v7 = (OZChannel *)((char *)this + 1016);
  OZChannel::setInfo((OZChannel *)((char *)this + 1016), a2);
  double v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (double v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((void *)this + 124) + 40) + -57.2957795) >= 0.0000001) {
      double v10 = 100.0;
    }
    else {
      double v10 = 6.28318531;
    }
  }
  else
  {
    double v10 = v9 - v8;
    double v11 = *((double *)this + 79);
    if (v11 != 3.40282347e38)
    {
      double v12 = v10 / v11;
      long long v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble(v6, MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setValue(v6, v13, v12 * v14, 0);
      OZChannel::getValueAsDouble(v7, v13, 0.0);
      OZChannel::setValue(v7, v13, v12 * v15, 0);
    }
  }
  double v19 = 0.0;
  (*(void (**)(void, double *))(**((void **)a3->var14 + 1) + 264))(*((void *)a3->var14 + 1), &v19);
  double v16 = v19;
  double v19 = 0.0;
  (*(void (**)(void))(**((void **)a3->var14 + 1) + 256))();
  if (v19 == 3.40282347e38 || v16 == -3.40282347e38) {
    double v18 = 3.40282347e38;
  }
  else {
    double v18 = v19 - v16;
  }
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, v10);
  OZChannel::setMin(v6, -v18);
  OZChannel::setMax(v6, v18);
  OZChannel::setSliderMin(v7, 0.0);
  OZChannel::setSliderMax(v7, v10);
  OZChannel::setMin(v7, -v18);
  OZChannel::setMax(v7, v18);
}

void OZGenericBehavior::OZGenericBehavior(OZGenericBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F117A640;
  *(void *)(v4 + 16) = &unk_1F117A900;
  *(void *)(v4 + 48) = &unk_1F117AB58;
  *(void *)(v4 + 336) = &unk_1F117ABB0;
  *(void *)(v4 + 55OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(v4 + 544) = 0;
  *(void *)(v4 + 536) = v4 + 544;
  *(void *)(v4 + 560) = v4 + 560;
  *(void *)(v4 + 568) = v4 + 560;
  *(void *)(v4 + 576) = 0;
  *(unsigned char *)(v4 + 584) = 0;
}

void OZGenericBehavior::OZGenericBehavior(OZGenericBehavior *this, unint64_t ***a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, (const OZChannelBehavior *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F117A640;
  *(void *)(v5 + 16) = &unk_1F117A900;
  *(void *)(v5 + 48) = &unk_1F117AB58;
  *(void *)(v5 + 336) = &unk_1F117ABB0;
  *(void *)(v5 + 55OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(v5 + 544) = 0;
  *(void *)(v5 + 536) = v5 + 544;
  *(void *)(v5 + 560) = v5 + 560;
  *(void *)(v5 + 568) = v5 + 560;
  *(void *)(v5 + 576) = 0;
  *(unsigned char *)(v5 + 584) = *((unsigned char *)a2 + 584);
  PCString v6 = a2[21];
  if (v6)
  {
    double v8 = *v6;
    uint64_t v7 = v6[1];
    v30[0] = 0;
    v30[1] = 0;
    double v29 = (uint64_t *)v30;
    double v27 = v7;
    if (v8 != v7)
    {
      double v9 = (char *)(a2 + 68);
      do
      {
        unint64_t v28 = *v8;
        double v10 = (OZChannelBase *)(*(uint64_t (**)(unint64_t))(*(void *)v28 + 248))(v28);
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v10);
        double v11 = *(void **)v9;
        if (*(void *)v9)
        {
          double v12 = (char *)(a2 + 68);
          do
          {
            unint64_t v13 = v11[4];
            BOOL v14 = v13 >= v28;
            if (v13 >= v28) {
              double v15 = v11;
            }
            else {
              double v15 = v11 + 1;
            }
            if (v14) {
              double v12 = (char *)v11;
            }
            double v11 = (void *)*v15;
          }
          while (*v15);
          if (v12 != v9 && v28 >= *((void *)v12 + 4))
          {
            double v16 = (OZChannelBase *)*((void *)v12 + 5);
            OZChannelBase::getChannelRootBase(v16);
            uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v16);
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
            (*(void (**)(uint64_t))(*(void *)v18 + 56))(v18);
            operator new();
          }
        }
        double v31 = &v28;
        std::__tree<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const* const&>,std::tuple<>>(&v29, &v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31)[5] = (uint64_t)v10;
        ++v8;
      }
      while (v8 != v27);
    }
    if (a2[72])
    {
      for (uint64_t i = (unint64_t ***)a2[71]; i != a2 + 70; uint64_t i = (unint64_t ***)i[1])
      {
        double v20 = v30[0];
        if (v30[0])
        {
          unint64_t v21 = (unint64_t)i[5];
          double v22 = v30;
          do
          {
            double v23 = v20;
            double v24 = v22;
            unint64_t v25 = v20[4];
            double v26 = v20 + 1;
            if (v25 >= v21)
            {
              double v26 = v23;
              double v22 = (void **)v23;
            }
            double v20 = (void *)*v26;
          }
          while (v20);
          if (v22 != v30)
          {
            if (v25 < v21) {
              double v23 = v24;
            }
            if (v21 >= v23[4]) {
              operator new();
            }
          }
        }
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
  }
}

void sub_1B7D82DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  MEMORY[0x1BA9BFBA0](v16, 0x1012C40EC159624);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  std::__list_imp<unsigned int>::clear(a10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v15 + 536, *((void **)v15 + 68));
  OZChannelBehavior::~OZChannelBehavior(v15);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::~OZGenericBehavior(OZGenericBehavior *this)
{
  *(void *)this = &unk_1F117A640;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117A900;
  *((void *)this + 6) = &unk_1F117AB58;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117ABB0;
  long long v2 = (uint64_t **)*((void *)this + 21);
  if (v2)
  {
    unint64_t v13 = &v13;
    BOOL v14 = &v13;
    uint64_t v15 = 0;
    int v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      uint64_t v5 = 1;
      PCString v6 = &v13;
      do
      {
        uint64_t v7 = operator new(0x18uLL);
        uint64_t v8 = *v3++;
        v7[1] = &v13;
        PCString v7[2] = v8;
        void *v7 = v6;
        v6[1] = v7;
        unint64_t v13 = v7;
        uint64_t v15 = v5++;
        PCString v6 = v7;
      }
      while (v3 != v4);
      for (uint64_t i = v14; i != &v13; uint64_t i = (void *)i[1])
      {
        double v12 = (OZChannelBase *)i[2];
        OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v12);
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 536, (unint64_t *)&v12);
        if (v12) {
          (*((void (**)(OZChannelBase *))v12->var0 + 1))(v12);
        }
      }
    }
    std::__list_imp<unsigned int>::clear(&v13);
  }
  while (*((void *)this + 72))
  {
    double v10 = (uint64_t *)*((void *)this + 71);
    if (v10[4])
    {
      MEMORY[0x1BA9BFBA0](v10[4], 0x1000C40451B5BE8);
      double v10 = (uint64_t *)*((void *)this + 71);
    }
    void v10[4] = 0;
    if (v10[3])
    {
      OZChannelRef::~OZChannelRef((void **)v10[3]);
      MEMORY[0x1BA9BFBA0]();
      double v10 = (uint64_t *)*((void *)this + 71);
    }
    double v10[3] = 0;
    uint64_t v11 = *v10;
    *(void *)(v11 + 8) = v10[1];
    *(void *)v10[1] = v11;
    --*((void *)this + 72);
    operator delete(v10);
  }
  std::__list_imp<unsigned int>::clear((void *)this + 70);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 536, *((void **)this + 68));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGenericBehavior::~OZGenericBehavior(OZGenericBehavior *this)
{
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 48));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZGenericBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t i = v4;
  PCString v6 = *(uint64_t ***)(a1 + 168);
  if (v6)
  {
    double v35 = (uint64_t *)&v35;
    __n128 v36 = &v35;
    uint64_t v37 = 0;
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      double v9 = v4;
      uint64_t v10 = 1;
      uint64_t v11 = &v35;
      do
      {
        double v12 = (uint64_t *)operator new(0x18uLL);
        uint64_t v13 = *v7++;
        v12[1] = (uint64_t)&v35;
        v12[2] = v13;
        *double v12 = (uint64_t)v11;
        v11[1] = v12;
        double v35 = v12;
        uint64_t v37 = v10++;
        uint64_t v11 = (uint64_t **)v12;
      }
      while (v7 != v8);
      BOOL v14 = v36;
      for (i = v9; v14 != &v35; BOOL v14 = (uint64_t **)v14[1])
      {
        OZGenericBehavior::removeChannel((uint64_t **)a1, (OZChannelBase *)v14[2]);
        uint64_t v15 = v14[2];
        if (v15) {
          (*(void (**)(uint64_t *))(*v15 + 8))(v15);
        }
        void v14[2] = 0;
      }
    }
    std::__list_imp<unsigned int>::clear(&v35);
  }
  while (*(void *)(a1 + 576))
  {
    uint64_t v16 = *(uint64_t **)(a1 + 568);
    if (v16[4])
    {
      MEMORY[0x1BA9BFBA0](v16[4], 0x1000C40451B5BE8);
      uint64_t v16 = *(uint64_t **)(a1 + 568);
    }
    _OWORD v16[4] = 0;
    if (v16[3])
    {
      OZChannelRef::~OZChannelRef((void **)v16[3]);
      MEMORY[0x1BA9BFBA0]();
      uint64_t v16 = *(uint64_t **)(a1 + 568);
    }
    _OWORD v16[3] = 0;
    uint64_t v17 = *v16;
    *(void *)(v17 + 8) = v16[1];
    *(void *)v16[1] = v17;
    --*(void *)(a1 + 576);
    operator delete(v16);
  }
  uint64_t v18 = (unint64_t **)*((void *)i + 21);
  if (v18)
  {
    long double v33 = i;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
    unint64_t v21 = *v18;
    double v20 = v18[1];
    __n128 v36 = 0;
    uint64_t v37 = 0;
    double v35 = (uint64_t *)&v36;
    if (v21 != v20)
    {
      uint64_t v22 = v19;
      double v23 = v33 + 68;
      do
      {
        unint64_t v34 = *v21;
        double v24 = (OZChannelBase *)(*(uint64_t (**)(unint64_t))(*(void *)v34 + 248))(v34);
        OZChannelFolder::push_back((OZChannelFolder *)(a1 + 56), v24);
        if (v22 && (*(uint64_t (**)(uint64_t))(*(void *)v22 + 272))(v22)) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v22 + 896))(v22, v34);
        }
        unint64_t v25 = (void *)*v23;
        if (*v23)
        {
          double v26 = v33 + 68;
          do
          {
            unint64_t v27 = v25[4];
            BOOL v28 = v27 >= v34;
            if (v27 >= v34) {
              double v29 = v25;
            }
            else {
              double v29 = v25 + 1;
            }
            if (v28) {
              double v26 = v25;
            }
            unint64_t v25 = (void *)*v29;
          }
          while (*v29);
          if (v26 != v23 && v34 >= v26[4])
          {
            long long v30 = (OZChannelBase *)v26[5];
            OZChannelBase::getChannelRootBase(v30);
            uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v30);
            uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
            (*(void (**)(uint64_t))(*(void *)v32 + 56))(v32);
            operator new();
          }
        }
        CMTime v38 = &v34;
        std::__tree<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const* const&>,std::tuple<>>(&v35, &v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v38)[5] = (uint64_t)v24;
        ++v21;
      }
      while (v21 != v20);
    }
    if (v33[72] && (void *)v33[71] != v33 + 70) {
      operator new();
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1)) {
      OZGenericBehavior::genericBehaviorDidLoad((OZGenericBehavior *)a1, 1);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v35, v36);
  }
}

void sub_1B7D83764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void OZGenericBehavior::removeChannel(uint64_t **this, OZChannelBase *a2)
{
  uint64_t v5 = a2;
  uint64_t v4 = ((uint64_t (*)(uint64_t **))(*this)[40])(this);
  if (v4) {
    (*(void (**)(uint64_t, OZChannelBase *))(*(void *)v4 + 888))(v4, a2);
  }
  OZChannelFolder::removeDescendant((OZChannelFolder *)(this + 7), a2);
  std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)(this + 67), (unint64_t *)&v5);
  OZGenericBehavior::removeGenericNodes(this, v5);
}

void *OZGenericBehavior::genericBehaviorDidLoad(OZGenericBehavior *this, int a2)
{
  double result = (void *)(*(uint64_t (**)(OZGenericBehavior *))(*(void *)this + 320))(this);
  if (*((void *)this + 21))
  {
    int v65 = a2;
    uint64_t v5 = *((void *)this + 71);
    double v67 = &v67;
    double v68 = &v67;
    uint64_t v69 = 0;
    if ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)this + 560))
    {
      uint64_t v6 = (uint64_t)result;
      uint64_t v7 = (char *)this + 544;
      uint64_t v8 = result + 2;
      double v9 = result + 122;
      uint64_t v10 = result + 125;
      do
      {
        uint64_t v11 = *(void **)v7;
        if (*(void *)v7)
        {
          unint64_t v12 = *(void *)(v5 + 40);
          uint64_t v13 = (char *)this + 544;
          do
          {
            unint64_t v14 = v11[4];
            BOOL v15 = v14 >= v12;
            if (v14 >= v12) {
              uint64_t v16 = v11;
            }
            else {
              uint64_t v16 = v11 + 1;
            }
            if (v15) {
              uint64_t v13 = (char *)v11;
            }
            uint64_t v11 = (void *)*v16;
          }
          while (*v16);
          if (v13 != v7 && v12 >= *((void *)v13 + 4)) {
            goto LABEL_77;
          }
        }
        int v17 = *(_DWORD *)(v5 + 16);
        if (v17) {
          BOOL v18 = *(_DWORD *)(v6 + 80) == v17;
        }
        else {
          BOOL v18 = 1;
        }
        uint64_t v19 = v8;
        if (!v18)
        {
          if (OZSceneNode::getEffect((OZSceneNode *)v6, *(_DWORD *)(v5 + 16)))
          {
            uint64_t Effect = OZSceneNode::getEffect((OZSceneNode *)v6, v17);
            uint64_t v21 = Effect + 48;
          }
          else
          {
            if (!OZSceneNode::getBehavior((OZSceneNode *)v6, v17))
            {
              uint64_t v19 = 0;
              goto LABEL_26;
            }
            uint64_t Effect = OZSceneNode::getBehavior((OZSceneNode *)v6, v17);
            uint64_t v21 = Effect + 16;
          }
          if (Effect) {
            uint64_t v19 = (void *)v21;
          }
          else {
            uint64_t v19 = 0;
          }
        }
LABEL_26:
        uint64_t v22 = *(int **)(v5 + 32);
        int v23 = *v22;
        int v24 = v22[1];
        __int32 v25 = v22[2];
        __int32 v26 = v22[3];
        if (v24 | v23 | v25 | v26)
        {
          if (v19)
          {
            uint64_t v27 = (*(uint64_t (**)(void *))(*v19 + 256))(v19);
            BOOL v28 = *(int32x4_t **)(v5 + 32);
            int32x4_t v29 = *v28;
            if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v27 + 8)+ 8), *v28)))))
            {
              int v23 = (int)*v28;
              int v24 = HIDWORD(v28->i64[0]);
              __int32 v25 = v29.i32[2];
              __int32 v26 = v29.i32[3];
              goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            long long v30 = *(_DWORD **)(v6 + 8);
            int v31 = v30[2];
            int v32 = v30[3];
            int v34 = v30[4];
            int v33 = v30[5];
            BOOL v37 = v31 == v23 && v32 == v24 && v34 == v25 && v33 == v26;
            uint64_t v19 = v8;
            if (!v37)
            {
              for (uint64_t i = *(void **)(v6 + 984); i != v9; uint64_t i = (void *)i[1])
              {
                uint64_t v39 = i[2];
                CMTimeEpoch v40 = *(_DWORD **)(v39 + 40);
                int v41 = v40[2];
                int v42 = v40[3];
                int v44 = v40[4];
                int v43 = v40[5];
                if (v41 == v23 && v42 == v24 && v44 == v25 && v43 == v26)
                {
                  uint64_t v19 = (void *)(v39 + 48);
                  goto LABEL_72;
                }
              }
              for (uint64_t j = *(void **)(v6 + 1008); ; uint64_t j = (void *)j[1])
              {
                if (j == v10)
                {
                  double v66 = *(OZChannelBase **)(v5 + 40);
                  goto LABEL_76;
                }
                uint64_t v49 = j[2];
                CMTime v50 = *(_DWORD **)(v49 + 8);
                int v51 = v50[2];
                int v52 = v50[3];
                int v54 = v50[4];
                int v53 = v50[5];
                BOOL v55 = v51 == v23 && v52 == v24;
                BOOL v56 = v55 && v54 == v25;
                if (v56 && v53 == v26) {
                  break;
                }
              }
              uint64_t v19 = (void *)(v49 + 16);
            }
          }
LABEL_72:
          double v66 = *(OZChannelBase **)(v5 + 40);
          goto LABEL_73;
        }
        double v66 = *(OZChannelBase **)(v5 + 40);
        if (!v19) {
          goto LABEL_76;
        }
LABEL_73:
        long long v58 = (OZChannelBase *)(*(uint64_t (**)(void *, void, double))(*v19 + 224))(v19, *(void *)(v5 + 24), *((double *)this + 74));
        if (!v58
          || !(*(unsigned int (**)(OZGenericBehavior *, OZChannelBase *, OZChannelBase *))(*(void *)this + 680))(this, v66, v58))
        {
LABEL_76:
          double v59 = operator new(0x18uLL);
          double v60 = v66;
          int v61 = v67;
          v59[1] = &v67;
          v59[2] = v60;
          void *v59 = v61;
          v61[1] = v59;
          double v67 = v59;
          ++v69;
          goto LABEL_77;
        }
        float64x2_t v70 = &v66;
        std::__tree<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const* const&>,std::tuple<>>((uint64_t **)this + 67, (unint64_t *)&v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v70)[5] = (uint64_t)v58;
        OZChannelBase::resetFlag(v66, 2, 0);
        OZGenericBehavior::addGenericNodes(this, v66, v58);
LABEL_77:
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)this + 560));
    }
    if (v65)
    {
      for (uint64_t k = v68; k != &v67; uint64_t k = (void *)k[1])
        OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), (OZChannelBase *)k[2]);
      while (*((void *)this + 72))
      {
        float64_t v63 = (uint64_t *)*((void *)this + 71);
        if (v63[4])
        {
          MEMORY[0x1BA9BFBA0](v63[4], 0x1000C40451B5BE8);
          float64_t v63 = (uint64_t *)*((void *)this + 71);
        }
        v63[4] = 0;
        if (v63[3])
        {
          OZChannelRef::~OZChannelRef((void **)v63[3]);
          MEMORY[0x1BA9BFBA0]();
          float64_t v63 = (uint64_t *)*((void *)this + 71);
        }
        v63[3] = 0;
        uint64_t v64 = *v63;
        *(void *)(v64 + 8) = v63[1];
        *(void *)v63[1] = v64;
        --*((void *)this + 72);
        operator delete(v63);
      }
    }
    return std::__list_imp<unsigned int>::clear(&v67);
  }
  return result;
}

void sub_1B7D83D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::willDeleteObject(OZGenericBehavior *this, OZObjectManipulator *a2)
{
  uint64_t v4 = (char *)*((void *)this + 67);
  uint64_t v5 = (char *)this + 544;
  if (v4 != (char *)this + 544)
  {
    do
    {
      ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(*((OZChannelBase **)v4 + 5));
      if ((OZObjectManipulator *)OZChannelBase::getObjectManipulator(ChannelRootBase) == a2)
      {
        uint64_t v7 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
        (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
        operator new();
      }
      uint64_t v8 = (char *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          double v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          double v9 = (char *)*((void *)v4 + 2);
          BOOL v10 = *(void *)v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v5);
  }
  OZChannelBehavior::willDeleteObject(this, a2);
}

void sub_1B7D84024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZGenericBehavior::removeGenericNodes(uint64_t **this, OZChannelBase *a2)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    if (v8)
    {
      for (uint64_t i = *v8; i != v8[1]; ++i)
      {
        BOOL v10 = *i;
        OZGenericBehavior::removeGenericNodes((OZGenericBehavior *)this, v10);
      }
    }
  }
  else
  {
    uint64_t v4 = this[44];
    if (v4 != (uint64_t *)(this + 43))
    {
      uint64_t v5 = v3;
      while (1)
      {
        uint64_t v6 = (const void *)v4[2];
        uint64_t v7 = v6
        if (v5 == *((void **)v7 + 5)) {
          break;
        }
        uint64_t v4 = (uint64_t *)v4[1];
        if (v4 == (uint64_t *)(this + 43)) {
          return;
        }
      }
      OZChannel::deleteCurveProcessingNode(*((OZChannel **)v7 + 2), v7);
      uint64_t v11 = *v4;
      *(void *)(v11 + 8) = v4[1];
      *(void *)v4[1] = v11;
      this[45] = (uint64_t *)((char *)this[45] - 1);
      operator delete(v4);
    }
  }
}

void *OZGenericBehavior::didUndoDeleteOfObject(OZGenericBehavior *this, OZObjectManipulator *a2)
{
  uint64_t v4 = (char *)this + 560;
  uint64_t v5 = *((void *)this + 71);
  uint64_t v6 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  double result = (void *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  if ((char *)v5 != v4)
  {
    while (v7 != *(_DWORD *)(v5 + 16)
         || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(result[1] + 8), *(int32x4_t *)*(void *)(v5 + 32))))) & 1) != 0)
    {
      uint64_t v5 = *(void *)(v5 + 8);
      if ((char *)v5 == v4) {
        return result;
      }
    }
    OZChannelBase::resetFlag(*(OZChannelBase **)(v5 + 40), 2, 0);
    return OZGenericBehavior::genericBehaviorDidLoad(this, 0);
  }
  return result;
}

void OZGenericBehavior::willDeleteChannel(OZGenericBehavior *this, OZChannelBase *a2)
{
  long long v2 = (OZGenericBehavior *)*((void *)this + 67);
  if (v2 != (OZGenericBehavior *)((char *)this + 544))
  {
    do
    {
      if (*((OZChannelBase **)v2 + 5) == a2)
      {
        ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
        uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(ChannelRootBase);
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
        (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
        operator new();
      }
      uint64_t v6 = (OZGenericBehavior *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = *(OZGenericBehavior **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (OZGenericBehavior *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          long long v2 = v7;
        }
        while (!v8);
      }
      long long v2 = v7;
    }
    while (v7 != (OZGenericBehavior *)((char *)this + 544));
  }
  OZChannelBehavior::willDeleteChannel(this, a2);
}

void sub_1B7D84668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZGenericBehavior::didUndoDeleteChannel(OZGenericBehavior *this, OZChannelBase *a2)
{
  uint64_t v4 = (char *)this + 560;
  uint64_t v5 = *((void *)this + 71);
  ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(ChannelRootBase);
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)ObjectManipulator + 256))();
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  double result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
  if ((char *)v5 != v4)
  {
    int32x4_t v11 = *(int32x4_t *)((char *)result->var1 + 8);
    int32x4_t v13 = v11;
    while (1)
    {
      if (v9 == *(_DWORD *)(v5 + 16)
        && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v11, *(int32x4_t *)*(void *)(v5 + 32))))) & 1) == 0)
      {
        double result = OZChannelRef::getChannel(*(OZChannelRef **)(v5 + 24), ChannelRootBase);
        int32x4_t v11 = v13;
        if (result == a2) {
          break;
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if ((char *)v5 == v4) {
        return result;
      }
    }
    OZGenericBehavior::genericBehaviorDidLoad(this, 0);
    unint64_t v12 = *(OZChannelBase **)(v5 + 40);
    return OZChannelBase::resetFlag(v12, 2, 0);
  }
  return result;
}

void *OZGenericBehavior::addGenericNodes(OZGenericBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  if ((a2->var7 & 0x1000) == 0)
  {
    if (a3) {
    double v23 = 0.0;
    }
    (*(void (**)(void, double *))(**((void **)a3[1].var0 + 1) + 264))(*((void *)a3[1].var0 + 1), &v23);
    v7.n128_f64[0] = v23;
    if (v23 > -0.0000001 && v23 < 0.0000001)
    {
      double v23 = 0.0;
      (*(void (**)(void, double *, double))(**((void **)a3[1].var0 + 1) + 256))(*((void *)a3[1].var0 + 1), &v23, v7.n128_f64[0]);
      OZChannel::setMin(v6, -v23);
    }
    double v23 = 0.0;
    (*(void (**)(void, double *, __n128))(**((void **)a3[1].var0 + 1) + 256))(*((void *)a3[1].var0 + 1), &v23, v7);
    double v8 = v23;
    if (v23 > -0.0000001 && v23 < 0.0000001)
    {
      double v23 = 0.0;
      (*(void (**)(void, double *, double))(**((void **)a3[1].var0 + 1) + 264))(*((void *)a3[1].var0 + 1), &v23, v8);
      OZChannel::setMax(v6, -v23);
    }
    double v9 = *((double *)a3[1].var2 + 2);
    if (v9 > -0.0000001 && v9 < 0.0000001)
    {
      double v10 = (*((double (**)(OZChannelBase *))a3->var0 + 101))(a3);
      OZChannel::setSliderMin(v6, -v10);
    }
    double v22 = (*((double (**)(OZChannelBase *))a3->var0 + 101))(a3);
    if (v22 > -0.0000001 && v22 < 0.0000001) {
      OZChannel::setSliderMax(v6, -*((double *)a3[1].var2 + 2));
    }
    (*(void (**)(OZGenericBehavior *, OZChannelBase *))(*(void *)this + 672))(this, a3);
    operator new();
  }
  if (v11) {
    v11[440] = 0;
  }
  unint64_t v14 = (OZChannelBase ***)v12[14];
  BOOL v15 = (OZChannelBase ***)result[14];
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    int v17 = *v14;
    if (*v14 != v14[1])
    {
      BOOL v18 = *v15;
      do
      {
        if (v18 == v15[1]) {
          break;
        }
        double v20 = *v17++;
        uint64_t v19 = v20;
        uint64_t v21 = *v18++;
        double result = (void *)OZGenericBehavior::addGenericNodes(this, v19, v21);
      }
      while (v17 != v14[1]);
    }
  }
  return result;
}

void sub_1B7D84CE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::didAddToNode(OZGenericBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  OZChannelBehavior::setAffectedChannel(this, v4);
  if (!*((unsigned char *)this + 584))
  {
    OZGenericBehavior::genericBehaviorDidLoad(this, 0);
  }
}

void OZGenericBehavior::willRemove(OZGenericBehavior *this)
{
  long long v2 = (unint64_t **)*((void *)this + 21);
  if (v2)
  {
    uint64_t v4 = *v2;
    int v3 = v2[1];
    if (*v2 != v3)
    {
      uint64_t v5 = (char *)this + 544;
      do
      {
        uint64_t v6 = *(void **)v5;
        if (*(void *)v5)
        {
          unint64_t v7 = *v4;
          double v8 = (char *)this + 544;
          do
          {
            unint64_t v9 = v6[4];
            BOOL v10 = v9 >= v7;
            if (v9 >= v7) {
              int32x4_t v11 = v6;
            }
            else {
              int32x4_t v11 = v6 + 1;
            }
            if (v10) {
              double v8 = (char *)v6;
            }
            uint64_t v6 = (void *)*v11;
          }
          while (*v11);
          if (v8 != v5 && v7 >= *((void *)v8 + 4))
          {
            unint64_t v12 = (OZChannelBase *)*((void *)v8 + 5);
            uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v12);
            uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
            (*(void (**)(uint64_t))(*(void *)v14 + 56))(v14);
            (*(void (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
            ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v12);
            OZChannelRef::OZChannelRef((OZChannelRef *)v18, v12, ChannelRootBase);
            if (v19 >= 0) {
              BOOL v16 = (const char *)v18;
            }
            else {
              BOOL v16 = (const char *)v18[0];
            }
            PCString::PCString(&v17, v16);
            operator new();
          }
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 536, *((void **)this + 68));
  *((void *)this + 67) = (char *)this + 544;
  *((void *)this + 69) = 0;
  *((void *)this + 68) = 0;
  OZChannelBehavior::willRemove(this);
}

void sub_1B7D84FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, void *a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x1012C40EC159624);
  PCString::~PCString(&a9);
  OZChannelRef::~OZChannelRef(&a10);
  _Unwind_Resume(a1);
}

void *OZGenericBehavior::updateReferenceIDs(OZGenericBehavior *a1, void *a2)
{
  double result = OZChannelObjectRoot::updateReferenceIDs((void *)a1 + 7, a2);
  uint64_t v5 = *((void *)a1 + 71);
  if ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)a1 + 560))
  {
    uint64_t v8 = a2[1];
    unint64_t v7 = a2 + 1;
    uint64_t v6 = v8;
    do
    {
      if (v6)
      {
        unsigned int v9 = *(_DWORD *)(v5 + 16);
        uint64_t v10 = v7;
        uint64_t v11 = v6;
        do
        {
          unsigned int v12 = *(_DWORD *)(v11 + 28);
          BOOL v13 = v12 >= v9;
          if (v12 >= v9) {
            uint64_t v14 = (uint64_t *)v11;
          }
          else {
            uint64_t v14 = (uint64_t *)(v11 + 8);
          }
          if (v13) {
            uint64_t v10 = (void *)v11;
          }
          uint64_t v11 = *v14;
        }
        while (*v14);
        if (v10 != v7 && v9 >= *((_DWORD *)v10 + 7)) {
          *(_DWORD *)(v5 + 16) = *((_DWORD *)v10 + 8);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)a1 + 560));
  }
  if (*((unsigned char *)a1 + 584) || *((void *)a1 + 72))
  {
    double result = (void *)(*(uint64_t (**)(OZGenericBehavior *))(*(void *)a1 + 320))(a1);
    if (result)
    {
      double result = OZGenericBehavior::genericBehaviorDidLoad(a1, 1);
      *((unsigned char *)a1 + 584) = 0;
    }
  }
  return result;
}

void *non-virtual thunk to'OZGenericBehavior::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZGenericBehavior::updateReferenceIDs((OZGenericBehavior *)(a1 - 16), a2);
}

void *OZGenericBehavior::sceneNodeDidLoad(OZGenericBehavior *this)
{
  double result = OZGenericBehavior::genericBehaviorDidLoad(this, 1);
  *((unsigned char *)this + 584) = 0;
  return result;
}

uint64_t OZGenericBehavior::affectsBehavior(OZGenericBehavior *this, OZBehavior *a2)
{
  long long v2 = (unint64_t **)*((void *)this + 21);
  if (v2)
  {
    int v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      int v6 = 0;
      unint64_t v7 = (uint64_t **)((char *)this + 536);
      while (1)
      {
        unint64_t v13 = *v3;
        uint64_t v14 = &v13;
        uint64_t v8 = std::__tree<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const* const&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)&v14);
        uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator((OZChannelBase *)v8[5]);
        if (ObjectManipulator)
        {
          if (v10 == a2) {
            goto LABEL_13;
          }
          if (v10)
          {
            if (v11) {
              v6 |= (*(uint64_t (**)(void *, OZBehavior *))(*(void *)v11 + 624))(v11, a2);
            }
          }
        }
        else if (!a2)
        {
LABEL_13:
          LOBYTE(v6) = 1;
          return v6 & 1;
        }
        if (++v3 == v4) {
          return v6 & 1;
        }
      }
    }
  }
  LOBYTE(v6) = 0;
  return v6 & 1;
}

uint64_t OZGenericBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  uint64_t v4 = (OZChannelFolder *)(this + 7);
  uint64_t result = OZChannelBase::testFlag((OZChannelBase *)(this + 7), 8);
  if ((result & 1) == 0)
  {
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
    return (uint64_t)OZChannelFolder::markFactoriesForSerialization(v4, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'OZGenericBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZGenericBehavior::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZGenericBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGenericBehaviorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZGenericBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZGenericBehavior::writeHeader(this - 6, a2);
}

uint64_t OZGenericBehavior::writeBody(OZGenericBehavior *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGenericBehaviorScope);
  OZChannelObjectRoot::serializeSelfOnly((OZGenericBehavior *)((char *)this + 56), a2, a3);
  int v6 = (unint64_t **)*((void *)this + 21);
  if (v6)
  {
    uint64_t v8 = *v6;
    unint64_t v7 = v6[1];
    if (*v6 != v7)
    {
      unsigned int v9 = (void *)((char *)this + 544);
      do
      {
        uint64_t v10 = (void *)*v9;
        if (*v9)
        {
          unint64_t v11 = *v8;
          unsigned int v12 = v9;
          do
          {
            unint64_t v13 = v10[4];
            BOOL v14 = v13 >= v11;
            if (v13 >= v11) {
              BOOL v15 = v10;
            }
            else {
              BOOL v15 = v10 + 1;
            }
            if (v14) {
              unsigned int v12 = v10;
            }
            uint64_t v10 = (void *)*v15;
          }
          while (*v15);
          if (v12 != v9 && v11 >= v12[4])
          {
            BOOL v16 = (OZChannelBase *)v12[5];
            uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v16);
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator);
            uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18);
            uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator)
                            + 8);
            ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v16);
            OZChannelRef::OZChannelRef((OZChannelRef *)v26, v16, ChannelRootBase);
            if (v27 >= 0) {
              double v22 = (const char *)v26;
            }
            else {
              double v22 = (const char *)v26[0];
            }
            PCString::PCString(&v25, v22);
            (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 200);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 7, v19);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 8, v20 + 8);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 6, &v25);
            (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
            uint64_t v23 = *v8 + 16;
            (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(void *)v23 + 16))(v23, a2, 1);
            (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 24))(v23, a2, 1, 1, 1);
            (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
            PCString::~PCString(&v25);
            OZChannelRef::~OZChannelRef(v26);
          }
        }
        ++v8;
      }
      while (v8 != v7);
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7D857CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZGenericBehavior::writeBody(OZGenericBehavior *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  return OZGenericBehavior::writeBody((OZGenericBehavior *)((char *)this - 48), a2, a3);
}

uint64_t OZGenericBehavior::parseBegin(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 584) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGenericBehaviorScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 56), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 74) = (double)v4;
  return 1;
}

uint64_t non-virtual thunk to'OZGenericBehavior::parseBegin(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 536) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGenericBehaviorScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 68) = (double)v4;
  return 1;
}

uint64_t OZGenericBehavior::parseEnd(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 56), a2);
  unsigned int v4 = *((_DWORD *)a2 + 26);
  uint64_t v5 = (uint64_t *)*((void *)this + 21);
  if (v4 > 4)
  {
    if (!v5) {
      return 1;
    }
    char v17 = 0;
    uint64_t v8 = v5[1];
  }
  else
  {
    if (!v5) {
      return 1;
    }
    unint64_t v6 = v5[1] - *v5;
    if ((v6 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v7 = *(OZChannelBase **)(*v5 + 8 * ((v6 >> 3) - 1));
      if (v7)
      {
        OZChannelBase::setID(v7, v7->var3 + 10000);
        uint64_t v5 = (uint64_t *)*((void *)this + 21);
        if (!v5) {
          return 1;
        }
      }
    }
    uint64_t v8 = v5[1];
    v29[0] = 0;
    v29[1] = 0;
    BOOL v28 = v29;
    uint64_t v9 = *v5;
    if (*v5 == v8)
    {
      unint64_t v11 = 0;
      char v17 = 0;
    }
    else
    {
      while (1)
      {
        unsigned int v10 = *(_DWORD *)(*(void *)v9 + 24);
        unsigned int v27 = v10;
        unint64_t v11 = (void *)v29[0];
        if (v29[0])
        {
          unsigned int v12 = v29;
          unint64_t v13 = (uint64_t *)v29[0];
          do
          {
            BOOL v14 = v13;
            BOOL v15 = v12;
            unsigned int v16 = *((_DWORD *)v13 + 7);
            if (v16 >= v10) {
              unsigned int v12 = v13;
            }
            else {
              ++v13;
            }
            unint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
          if (v12 != v29)
          {
            if (v16 < v10) {
              BOOL v14 = v15;
            }
            if (v10 >= *((_DWORD *)v14 + 7)) {
              break;
            }
          }
        }
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v28, &v27, &v27);
        v9 += 8;
        if (v9 == v8)
        {
          char v17 = 0;
          unint64_t v11 = (void *)v29[0];
          goto LABEL_23;
        }
      }
      char v17 = 1;
    }
LABEL_23:
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, v11);
  }
  uint64_t v18 = (char *)this + 560;
  uint64_t v19 = *v5;
  uint64_t v20 = (char *)*((void *)this + 71);
  if (v19 != v8 && v20 != v18)
  {
    uint64_t v22 = v19 + 8;
    int v23 = 1;
    do
    {
      int v24 = *(OZChannelBase **)(v22 - 8);
      OZChannelBase::setFlag(v24, 2, 0);
      *((void *)v20 + 5) = v24;
      if (v4 <= 4)
      {
        unsigned int v25 = v23;
        if ((v17 & 1) == 0) {
          unsigned int v25 = v24->var3 - 10000;
        }
        OZChannelBase::setID(v24, v25);
      }
      if (v22 == v8) {
        break;
      }
      uint64_t v20 = (char *)*((void *)v20 + 1);
      ++v23;
      v22 += 8;
    }
    while (v20 != v18);
  }
  return 1;
}

void sub_1B7D85A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t non-virtual thunk to'OZGenericBehavior::parseEnd(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZGenericBehavior::parseElement(OZGenericBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v17);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 110)
  {
    unsigned int v12 = (void *)*((void *)this + 21);
    if (v12) {
      uint64_t v13 = (((v12[1] - *v12) << 29) + 0x100000000) >> 32;
    }
    else {
      uint64_t v13 = 1;
    }
    if (*((void *)this + 72) != v13)
    {
      (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 40))(a2);
      goto LABEL_17;
    }
  }
  else if (v6 == 200)
  {
    unint64_t v7 = (uint64_t *)*((void *)this + 21);
    if (v7)
    {
      uint64_t v8 = *v7;
      unint64_t v9 = *(void *)(*((void *)this + 21) + 8) - v8;
      if ((v9 & 0x7FFFFFFF8) != 0 && *((_DWORD *)a2 + 26) <= 4u)
      {
        unsigned int v10 = *(OZChannelBase **)(v8 + 8 * ((v9 >> 3) - 1));
        if (v10) {
          OZChannelBase::setID(v10, v10->var3 + 10000);
        }
      }
    }
    int v16 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v16);
    AttributeAsUUunsigned int ID = PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 8);
    PCSharedCount::PCSharedCount(&v15);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 6, (uint64_t)&v15);
    if (!AttributeAsUUID) {
      operator new();
    }
    operator new();
  }
  OZChannelObjectRoot::parseElement((PCSerializer **)this + 7, a2, a3);
LABEL_17:
  PCString::~PCString((PCString *)&v17);
  return 1;
}

void sub_1B7D85CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  MEMORY[0x1BA9BFBA0](v12, 0x1012C40EC159624);
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZGenericBehavior::parseElement(OZGenericBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

BOOL OZGenericBehavior::shouldReplaceValueForChan(OZGenericBehavior *this, OZChannelBase *lpsrc)
{
  BOOL result = 1;
  if (!lpsrc
  {
    var6 = lpsrc->var6;
    if (!var6
    {
      return 0;
    }
  }
  return result;
}

BOOL OZGenericBehavior::areChannelsCompatible(OZGenericBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), *(int32x4_t *)((char *)a2->var1 + 8))))) & 1) == 0;
}

void OZGenericBehaviorV2::OZGenericBehaviorV2(OZGenericBehaviorV2 *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZGenericBehavior::OZGenericBehavior(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F117ABF0;
  v4[2] = &unk_1F117AEB0;
  v4[6] = &unk_1F117B108;
  v4[42] = &unk_1F117B160;
}

void OZGenericBehaviorV2::OZGenericBehaviorV2(OZGenericBehaviorV2 *this, unint64_t ***a2, char a3)
{
  OZGenericBehavior::OZGenericBehavior(this, a2, a3);
  *int v3 = &unk_1F117ABF0;
  v3[2] = &unk_1F117AEB0;
  v3[6] = &unk_1F117B108;
  v3[42] = &unk_1F117B160;
}

uint64_t OZGenericBehaviorV2::areChannelsCompatible(OZGenericBehaviorV2 *this, OZChannelBase *a2, OZChannelBase *a3)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), *(int32x4_t *)((char *)a2->var1 + 8))))) & 1) == 0)return 1; {
  if (!*((unsigned char *)this + 584))
  }
    return 0;
  uint64_t result = (*((uint64_t (**)(OZChannelBase *))a2->var0 + 15))(a2);
  if (result)
  {
    uint64_t v5 = (uint64_t (*)(OZChannelBase *))*((void *)a3->var0 + 15);
    return v5(a3);
  }
  return result;
}

void OZGenericBehaviorV1::OZGenericBehaviorV1(OZGenericBehaviorV1 *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZGenericBehavior::OZGenericBehavior(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F117B188;
  v4[2] = &unk_1F117B448;
  v4[6] = &unk_1F117B6A0;
  v4[42] = &unk_1F117B6F8;
}

void OZGenericBehaviorV1::OZGenericBehaviorV1(OZGenericBehaviorV1 *this, unint64_t ***a2, char a3)
{
  OZGenericBehavior::OZGenericBehavior(this, a2, a3);
  *int v3 = &unk_1F117B188;
  v3[2] = &unk_1F117B448;
  v3[6] = &unk_1F117B6A0;
  v3[42] = &unk_1F117B6F8;
}

BOOL OZGenericBehaviorV1::shouldReplaceValueForChan(OZGenericBehaviorV1 *this, OZChannelBase *lpsrc)
{
  return lpsrc
}

void OZGenericBehaviorV2::~OZGenericBehaviorV2(OZGenericBehaviorV2 *this)
{
  OZGenericBehavior::~OZGenericBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGenericBehaviorV2::~OZGenericBehaviorV2(OZGenericBehaviorV2 *this)
{
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZGenericCurveNode::OZGenericCurveNode(OZGenericCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a4);
  void *v7 = &unk_1F117B750;
  v7[5] = a3;
  if (a2) {
  else
  }
    uint64_t v8 = 0;
  *((void *)this + 4) = v8;
}

void OZGenericCurveNode::~OZGenericCurveNode(OZGenericCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZGenericCurveNode::compare(OZGenericCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

void OZGenericOffsetCurveNode::OZGenericOffsetCurveNode(OZGenericOffsetCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  OZGenericCurveNode::OZGenericCurveNode(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F117B848;
}

void OZGenericOffsetCurveNode::~OZGenericOffsetCurveNode(OZGenericOffsetCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZGenericOffsetCurveNode::solveNode(OZGenericOffsetCurveNode *this, const CMTime *a2, double a3, double a4)
{
  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, double))(**((void **)this + 2) + 320))(&v11, a3);
  CMTime v14 = *a2;
  CMTime v13 = v11;
  PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v12);
  uint64_t v7 = *((void *)this + 4);
  CMTime v10 = v12;
  if ((*(unsigned int (**)(uint64_t, CMTime *, void))(*(void *)v7 + 296))(v7, &v10, 0))
  {
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v12, 0.0);
    return v8 + a4;
  }
  return a4;
}

void OZGenericOffsetCurveNode::solveNode(OZGenericOffsetCurveNode *this, OZCurveNodeParam *a2)
{
  unsigned int v4 = (void *)*((void *)a2 + 19);
  uint64_t v5 = (uint64_t *)*((void *)a2 + 10);
  CMTime v32 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v31 = *(CMTime *)((unsigned char *)a2 + 4);
  memset(&v30, 0, sizeof(v30));
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 2) + 320))(&v30);
  CMTime v35 = v31;
  CMTime v34 = v30;
  PC_CMTimeSaferAdd(&v35, &v34, (uint64_t)&v31);
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  operator*(*((_DWORD *)a2 + 36), &v32, &v33);
  CMTime v35 = v31;
  CMTime v34 = v33;
  PC_CMTimeSaferAdd(&v35, &v34, (uint64_t)&v28);
  CMTime v27 = v31;
  uint64_t v6 = *((void *)this + 4);
  CMTime v26 = v31;
  if ((*(unsigned int (**)(void))(*(void *)v6 + 296))()
    && (uint64_t v7 = *((void *)this + 4),
        long long v24 = v28,
        uint64_t v25 = v29,
        (*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v7 + 296))(v7, &v24, 0, 1, 1)))
  {
    if (*((_DWORD *)a2 + 36))
    {
      unint64_t v8 = 0;
      do
      {
        double v9 = *(double *)&v5[v8];
        OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v27, 0.0);
        *(double *)&v4[v8] = v9 + v10;
        CMTime v34 = v27;
        CMTime v33 = v32;
        PC_CMTimeSaferAdd(&v34, &v33, (uint64_t)&v35);
        CMTime v27 = v35;
        ++v8;
      }
      while (v8 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    uint64_t v11 = *((void *)this + 4);
    CMTime v23 = v31;
    if ((*(uint64_t (**)(uint64_t, CMTime *, void, uint64_t, uint64_t))(*(void *)v11 + 296))(v11, &v23, 0, 1, 1) & 1) != 0|| (uint64_t v12 = *((void *)this + 4), v21 = v28, v22 = v29, ((*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, &v21, 0, 1, 1)))
    {
      if (*((_DWORD *)a2 + 36))
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = *((void *)this + 4);
          CMTime v20 = v27;
          int v15 = (*(uint64_t (**)(uint64_t, CMTime *, void, uint64_t, uint64_t))(*(void *)v14 + 296))(v14, &v20, 0, 1, 1);
          double v16 = *(double *)&v5[v13];
          if (v15)
          {
            OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v27, 0.0);
            double v16 = v16 + v17;
          }
          *(double *)&v4[v13] = v16;
          CMTime v34 = v27;
          CMTime v33 = v32;
          PC_CMTimeSaferAdd(&v34, &v33, (uint64_t)&v35);
          CMTime v27 = v35;
          ++v13;
        }
        while (v13 < *((unsigned int *)a2 + 36));
      }
    }
    else
    {
      uint64_t v18 = *((unsigned int *)a2 + 36);
      if (v18)
      {
        do
        {
          uint64_t v19 = *v5++;
          *v4++ = v19;
          --v18;
        }
        while (v18);
      }
    }
  }
}

void OZGenericOffsetCurveNode::cloneNode(OZGenericOffsetCurveNode *this)
{
}

void sub_1B7D869EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t OZGenericOffsetCurveNode::compare(OZGenericOffsetCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZGenericOffsetCurveNode::getNeededRange(OZGenericOffsetCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZGenericReplaceCurveNode::OZGenericReplaceCurveNode(OZGenericReplaceCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  OZGenericCurveNode::OZGenericCurveNode(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F117B940;
}

void OZGenericReplaceCurveNode::~OZGenericReplaceCurveNode(OZGenericReplaceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZGenericReplaceCurveNode::solveNode(OZGenericReplaceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  (*(void (**)(CMTime *__return_ptr, double))(**((void **)this + 2) + 320))(&v12, a3);
  CMTime v16 = *a2;
  CMTime v15 = v12;
  PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)&v13);
  uint64_t v7 = *((void *)this + 4);
  long long v10 = v13;
  uint64_t v11 = v14;
  if ((*(unsigned int (**)(uint64_t, long long *, void))(*(void *)v7 + 296))(v7, &v10, 0))
  {
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), a2, 0.0);
    return v8;
  }
  return a4;
}

double OZGenericReplaceCurveNode::solveNode(OZGenericReplaceCurveNode *this, OZCurveNodeParam *a2)
{
  unsigned int v4 = (double *)*((void *)a2 + 19);
  uint64_t v5 = (double *)*((void *)a2 + 10);
  CMTime v30 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v29 = *(CMTime *)((unsigned char *)a2 + 4);
  memset(&v28, 0, sizeof(v28));
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 2) + 320))(&v28);
  CMTime v33 = v29;
  CMTime v32 = v28;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v29);
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  operator*(*((_DWORD *)a2 + 36), &v30, &v31);
  CMTime v33 = v29;
  CMTime v32 = v31;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v26);
  CMTime v25 = v29;
  uint64_t v6 = *((void *)this + 4);
  CMTime v24 = v29;
  if ((*(unsigned int (**)(void))(*(void *)v6 + 296))()
    && (uint64_t v7 = *((void *)this + 4),
        long long v22 = v26,
        uint64_t v23 = v27,
        (*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v7 + 296))(v7, &v22, 0, 1, 1)))
  {
    if (*((_DWORD *)a2 + 36))
    {
      unint64_t v9 = 0;
      do
      {
        OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v25, 0.0);
        v4[v9] = v10;
        CMTime v32 = v25;
        CMTime v31 = v30;
        PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v33);
        double result = *(double *)&v33.value;
        CMTime v25 = v33;
        ++v9;
      }
      while (v9 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    uint64_t v11 = *((void *)this + 4);
    CMTime v21 = v29;
    if ((*(uint64_t (**)(uint64_t, CMTime *, void, uint64_t, uint64_t))(*(void *)v11 + 296))(v11, &v21, 0, 1, 1) & 1) != 0|| (uint64_t v12 = *((void *)this + 4), v19 = v26, v20 = v27, ((*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, &v19, 0, 1, 1)))
    {
      if (*((_DWORD *)a2 + 36))
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = *((void *)this + 4);
          CMTime v18 = v25;
          if ((*(unsigned int (**)(uint64_t, CMTime *, void, uint64_t, uint64_t))(*(void *)v14 + 296))(v14, &v18, 0, 1, 1))
          {
            OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v25, 0.0);
          }
          else
          {
            double v15 = v5[v13];
          }
          v4[v13] = v15;
          CMTime v32 = v25;
          CMTime v31 = v30;
          PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v33);
          double result = *(double *)&v33.value;
          CMTime v25 = v33;
          ++v13;
        }
        while (v13 < *((unsigned int *)a2 + 36));
      }
    }
    else
    {
      uint64_t v16 = *((unsigned int *)a2 + 36);
      if (v16)
      {
        do
        {
          double v17 = *v5++;
          double result = v17;
          *v4++ = v17;
          --v16;
        }
        while (v16);
      }
    }
  }
  return result;
}

void OZGenericReplaceCurveNode::cloneNode(OZGenericReplaceCurveNode *this)
{
}

void sub_1B7D87090(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t OZGenericReplaceCurveNode::compare(OZGenericReplaceCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZGenericReplaceCurveNode::getNeededRange(OZGenericReplaceCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZGravityBehavior::OZGravityBehavior(OZGravityBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F117BA38;
  float64x2_t v5[2] = &unk_1F117BD20;
  v5[6] = &unk_1F117BF78;
  v5[42] = &unk_1F117BFD0;
  PCURL::PCURL((PCURL *)&v6, @"Gravity Behavior Grav Acceleration");
  OZChannelDouble::OZChannelDouble((OZGravityBehavior *)((char *)this + 504), 30.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 504), 100.0);
}

void sub_1B7D8727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZGravityBehavior::OZGravityBehavior(OZGravityBehavior *this, OZGravityBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117BA38;
  *(void *)(v5 + 16) = &unk_1F117BD20;
  *(void *)(v5 + 48) = &unk_1F117BF78;
  *(void *)(v5 + 336) = &unk_1F117BFD0;
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 63) = &unk_1F1100CF0;
  *((void *)this + 65) = &unk_1F1101050;
}

void sub_1B7D873A8(_Unwind_Exception *a1)
{
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZGravityBehavior::~OZGravityBehavior(OZGravityBehavior *this)
{
  *(void *)this = &unk_1F117BA38;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117BD20;
  *((void *)this + 6) = &unk_1F117BF78;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117BFD0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZGravityBehavior::~OZGravityBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGravityBehavior::~OZGravityBehavior(OZGravityBehavior *this)
{
}

{
  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 48));
}

{
  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZGravityBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
}

double OZGravityBehavior::accumForces(OZGravityBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v7 = *(CMTime *)((char *)a2 + 176);
  double v4 = *((double *)a2 + 17);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v7, 0.0);
  double result = v4 - v5;
  *((double *)a2 + 17) = result;
  return result;
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior(OZGrowShrinkBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F117C010;
  float64x2_t v5[2] = &unk_1F117C2C0;
  v5[6] = &unk_1F117C518;
  v5[42] = &unk_1F117C570;
  PCURL::PCURL((PCURL *)&v21, @"Grow/Shrink Behavior Increment Type Enum");
  PCURL::PCURL((PCURL *)&v20, @"Grow/Shrink Behavior Increment Type");
  Instance = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(v6);
  OZChannelEnum::OZChannelEnum((OZGrowShrinkBehavior *)((char *)this + 536), 2u, &v21, &v20, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, Instance, 0);
  PCString::~PCString(&v20);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, @"Grow/Shrink Behavior Scale Rate");
  unint64_t v9 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(v8);
  double v10 = (OZChannelInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(v9);
  OZChannel2D::OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792), &v21, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 2u, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, @"Grow/Shrink Behavior Scale Dest");
  uint64_t v12 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(v11);
  unint64_t v13 = (OZChannelInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(v12);
  OZChannelScale::OZChannelScale((OZGrowShrinkBehavior *)((char *)this + 1232), 0.0, 0.0, &v21, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 2u, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, @"Grow/Shrink Behavior Curvature");
  double v15 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(v14);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 11, 0.0, &v21, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, v15, 0);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, @"Grow/Shrink Behavior End Frame Offset");
  double v17 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZGrowShrinkBehavior *)((char *)this + 1824), &v21, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, v17, 0);
  PCString::~PCString(&v21);
  CMTime v18 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *)PCString::PCString(&v21, "HUD Scale (Hidden)");
  long long v19 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZGrowShrinkBehavior *)((char *)this + 1976), &v21, (OZChannelFolder *)((char *)this + 56), 0xCEu, 2, v19, 0);
  PCString::~PCString(&v21);
  *((unsigned char *)this + 2128) = 0;
}

void sub_1B7D87944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannel::~OZChannel(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannel2D::~OZChannel2D(v15);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelBehavior::~OZChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void sub_1B7D87A08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior(OZGrowShrinkBehavior *this, const OZGrowShrinkBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117C010;
  *(void *)(v5 + 16) = &unk_1F117C2C0;
  *(void *)(v5 + 48) = &unk_1F117C518;
  *(void *)(v5 + 336) = &unk_1F117C570;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 536), (const OZGrowShrinkBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannel2D::OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792), (const OZGrowShrinkBehavior *)((char *)a2 + 792), v6);
  OZChannelScale::OZChannelScale((OZGrowShrinkBehavior *)((char *)this + 1232), (const OZGrowShrinkBehavior *)((char *)a2 + 1232), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 11, (const OZChannelBase *)((char *)a2 + 1672), v6);
  OZChannel::OZChannel((OZChannel *)this + 12, (const OZChannelBase *)((char *)a2 + 1824), v6);
  *((void *)this + 228) = &unk_1F1100CF0;
  *((void *)this + 230) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)this + 13, (const OZChannelBase *)((char *)a2 + 1976), v6);
  *((void *)this + 247) = &unk_1F1100CF0;
  *((void *)this + 249) = &unk_1F1101050;
  *((unsigned char *)this + 2128) = 0;
}

void sub_1B7D87BD0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v6);
  OZChannelPercent::~OZChannelPercent(v5);
  OZChannel2D::~OZChannel2D(v4);
  OZChannel2D::~OZChannel2D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D87C2C()
{
}

void OZGrowShrinkBehavior::~OZGrowShrinkBehavior(OZGrowShrinkBehavior *this)
{
  *(void *)this = &unk_1F117C010;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117C2C0;
  *((void *)this + 6) = &unk_1F117C518;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117C570;
  OZChannel::~OZChannel((OZChannel *)this + 13);
  OZChannel::~OZChannel((OZChannel *)this + 12);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 11);
  OZChannel2D::~OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 1232));
  OZChannel2D::~OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZGrowShrinkBehavior *)((char *)this + 536));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZGrowShrinkBehavior::~OZGrowShrinkBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGrowShrinkBehavior::~OZGrowShrinkBehavior(OZGrowShrinkBehavior *this)
{
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 48));
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZGrowShrinkBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)v4 + 536);
  OZChannelFolder::operator=(a1 + 792);
  OZChannelBase::operator=(a1 + 928, (uint64_t)v5 + 928);
  OZChannelBase::operator=(a1 + 1080, (uint64_t)v5 + 1080);
  OZChannelFolder::operator=(a1 + 1232);
  OZChannelBase::operator=(a1 + 1368, (uint64_t)v5 + 1368);
  OZChannelBase::operator=(a1 + 1520, (uint64_t)v5 + 1520);
  OZChannelBase::operator=(a1 + 1672, (uint64_t)v5 + 1672);
  OZChannelBase::operator=(a1 + 1824, (uint64_t)v5 + 1824);
  uint64_t result = OZChannelBase::operator=(a1 + 1976, (uint64_t)v5 + 1976);
  *(unsigned char *)(a1 + 2128) = 0;
  return result;
}

void OZGrowShrinkBehavior::addGrowShrinkNodes(OZGrowShrinkBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc) {
  operator new();
  }
}

void sub_1B7D8804C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::didAddToNode(OZGrowShrinkBehavior *this, OZSceneNode *a2)
{
  uint64_t result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 2128))
  {
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
    if (result) {
      OZGrowShrinkBehavior::addGrowShrinkNodes(this, a2);
    }
  }
  return result;
}

uint64_t OZGrowShrinkBehavior::didAddSceneNodeToScene(OZGrowShrinkBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((unsigned char *)this + 2128))
  {
    double v4 = (OZSceneNode *)(*(uint64_t (**)(OZGrowShrinkBehavior *))(*(void *)this + 320))(this);
    OZGrowShrinkBehavior::addGrowShrinkNodes(this, v4);
  }
  return result;
}

void OZGrowShrinkBehavior::willRemove(OZGrowShrinkBehavior *this)
{
  *((unsigned char *)this + 2128) = 0;
}

BOOL OZGrowShrinkBehavior::isRebuildUIChannel(OZGrowShrinkBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2;
}

OZChannelBase *OZGrowShrinkBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 536), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = (int)result;
    PCString v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      CMTime v7 = *(char **)(v4 + 16);
      if (v7) {
      uint64_t result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 536), v6, 0.0);
      }
      if (v5 != result) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          unint64_t v9 = *(const void **)(i + 16);
          if (v9) {
          else
          }
            double v10 = 0;
          uint64_t v11 = (OZChannelBase *)(v10 + 792);
          if (v5 == 1)
          {
            int v12 = 1;
            OZChannelBase::setFlag(v11, 0x400000, 1);
            OZChannelBase::resetFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
          }
          else if (v5)
          {
            OZChannelBase::setFlag(v11, 0x400000, 1);
            OZChannelBase::resetFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
            int v12 = 0;
          }
          else
          {
            int v12 = 1;
            OZChannelBase::resetFlag(v11, 0x400000, 1);
            OZChannelBase::setFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
          }
          uint64_t result = OZChannelBase::enable((OZChannelBase *)(v10 + 1672), v12, 0);
        }
        return result;
      }
    }
    for (uint64_t j = *(void *)(a2 + 8); j != a2; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v14 = *(const void **)(j + 16);
      if (v14) {
      else
      }
        double v15 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v15 + 792), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)v15 + 11, 0x400000, 1);
      uint64_t result = OZChannelBase::enable((OZChannelBase *)(v15 + 1672), 0, 0);
    }
  }
  return result;
}

void OZGrowShrinkBehavior::createCurveNode(OZGrowShrinkBehavior *this, OZChannel *a2)
{
}

void sub_1B7D88478(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::getScaleRates(OZGrowShrinkBehavior *this, CMTime *a2, double *a3, double *a4)
{
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(v42);
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&v42[0].value;
  CMTimeEpoch epoch = v42[0].epoch;
  a2->CMTimeEpoch epoch = v42[0].epoch;
  long long v44 = *(_OWORD *)&a2->value;
  CMTimeEpoch v45 = epoch;
  if (((*(uint64_t (**)(OZGrowShrinkBehavior *, long long *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v44, 0, 1, 1) & 1) == 0)
  {
    *a3 = 0.0;
    *a4 = 0.0;
    return;
  }
  memset(&v43, 0, sizeof(v43));
  __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v43);
  (*(void (**)(CMTime *__return_ptr, OZGrowShrinkBehavior *, __n128))(*(void *)this + 608))(v42, this, FrameDuration);
  memset(&v41, 0, sizeof(v41));
  CMTime time1 = v42[0];
  CMTime time2 = v42[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v46);
  CMTime time1 = v46;
  CMTime time2 = v43;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
  double v10 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)this + 12, MEMORY[0x1E4F1FA48], 0.0);
  operator*(&v43, &v46, v11);
  CMTime time1 = v40;
  CMTime time2 = v46;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v41);
  CMTime time1 = *a2;
  CMTime time2 = v41;
  if (CMTimeCompare(&time1, &time2) >= 1) {
    *a2 = v41;
  }
  memset(&v40, 0, sizeof(v40));
  CMTime time2 = v42[0];
  CMTime time1 = v41;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
  CMTime time1 = v40;
  CMTime time2 = *v10;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *a3 = 0.0;
    *a4 = 0.0;
  }
  CMTime v46 = v42[0];
  CMTime time2 = *a2;
  PC_CMTimeSaferSubtract(&time2, &v46, (uint64_t)&time1);
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&time1.value;
  CMTimeEpoch v12 = time1.epoch;
  a2->CMTimeEpoch epoch = time1.epoch;
  *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)&a2->value;
  time.CMTimeEpoch epoch = v12;
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v38 = v40;
  double v14 = Seconds / CMTimeGetSeconds(&v38);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 11, a2, 0.0);
    long double v22 = (1.0 - cos(v14 * 3.14159265)) * 0.5 * v21 + v14 * (1.0 - v21);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 928), a2, 0.0);
    double v24 = v23;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1080), a2, 0.0);
    double v26 = v25;
    CMTime v37 = v40;
    double v27 = v24 * CMTimeGetSeconds(&v37);
    CMTime v36 = v40;
    Float64 v28 = CMTimeGetSeconds(&v36);
    *a3 = v22 * v27;
    double v20 = v22 * (v26 * v28);
    goto LABEL_18;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0) == 1)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 11, a2, 0.0);
    long double v16 = (1.0 - cos(v14 * 3.14159265)) * 0.5 * v15 + v14 * (1.0 - v15);
    OZChannel::getValueAsDouble((OZChannel *)this + 9, a2, 0.0);
    double v18 = v17;
    OZChannel::getValueAsDouble((OZChannel *)this + 10, a2, 0.0);
    *a3 = v18 * v16;
    double v20 = v19 * v16;
    goto LABEL_18;
  }
  OZChannel::getValueAsDouble((OZChannel *)this + 9, &v40, 0.0);
  double v30 = v29;
  OZChannel::getValueAsDouble((OZChannel *)this + 10, &v40, 0.0);
  double v32 = v31;
  if (v30 <= -0.99)
  {
    double v34 = -1.0;
    *a3 = exp2(v14 * -6.64385619) + -1.0;
    CMTime time1 = *a2;
    CMTime time2 = v40;
    if (CMTimeCompare(&time1, &time2)) {
      goto LABEL_15;
    }
  }
  else
  {
    long double v33 = log(v30 + 1.0);
    double v34 = exp2(v14 * (v33 / 0.693147181)) + -1.0;
  }
  *a3 = v34;
LABEL_15:
  if (v32 <= -0.99)
  {
    double v20 = -1.0;
    *a4 = exp2(v14 * -6.64385619) + -1.0;
    CMTime time1 = *a2;
    CMTime time2 = v40;
    if (CMTimeCompare(&time1, &time2)) {
      return;
    }
  }
  else
  {
    long double v35 = log(v32 + 1.0);
    double v20 = exp2(v14 * (v35 / 0.693147181)) + -1.0;
  }
LABEL_18:
  *a4 = v20;
}

double OZGrowShrinkBehavior::getXMultiplier(OZGrowShrinkBehavior *this, CMTime *a2)
{
  double v5 = 0.0;
  CMTime v3 = *a2;
  OZGrowShrinkBehavior::getScaleRates(this, &v3, &v5, &v4);
  double result = v5 + 1.0;
  if (v5 + 1.0 < 0.0) {
    return 0.0;
  }
  return result;
}

double OZGrowShrinkBehavior::getYMultiplier(OZGrowShrinkBehavior *this, CMTime *a2)
{
  double v4 = 0.0;
  CMTime v3 = *a2;
  OZGrowShrinkBehavior::getScaleRates(this, &v3, &v5, &v4);
  double result = v4 + 1.0;
  if (v4 + 1.0 < 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::OZGrowShrinkBehavior_incrementTypeChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::OZGrowShrinkBehavior_incrementTypeChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::_OZGrowShrinkBehavior_incrementTypeChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::_OZGrowShrinkBehavior_incrementTypeChan) {
    operator new();
  }
}

void sub_1B7D88BDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::OZGrowShrinkBehavior_incrementTypeChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *this)
{
}

void sub_1B7D88CB0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::_OZGrowShrinkBehavior_scaleRateChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::_OZGrowShrinkBehavior_scaleRateChan) {
    operator new();
  }
}

void sub_1B7D88D8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::OZGrowShrinkBehavior_scaleRateChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *this)
{
}

void sub_1B7D88E64(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    CMTime v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::_OZGrowShrinkBehavior_scaleRateChanInfo;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::_OZGrowShrinkBehavior_scaleRateChanInfo) {
    operator new();
  }
}

void sub_1B7D88F40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::OZGrowShrinkBehavior_scaleRateChanInfo(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 1.0, 0.01, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F117C6A0;
  *((void *)this + 10) = &unk_1F117C6C0;
  return this;
}

void sub_1B7D89014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::_OZGrowShrinkBehavior_scaleDestChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::_OZGrowShrinkBehavior_scaleDestChan) {
    operator new();
  }
}

void sub_1B7D890F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::OZGrowShrinkBehavior_scaleDestChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *this)
{
}

void sub_1B7D891C8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::_OZGrowShrinkBehavior_scaleDestChanInfo;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::_OZGrowShrinkBehavior_scaleDestChanInfo) {
    operator new();
  }
}

void sub_1B7D892A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::OZGrowShrinkBehavior_scaleDestChanInfo(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F117C790;
  *((void *)this + 10) = &unk_1F117C7B0;
  return this;
}

void sub_1B7D8937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::OZGrowShrinkBehavior_curvatureFactorChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::OZGrowShrinkBehavior_curvatureFactorChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::_OZGrowShrinkBehavior_curvatureFactorChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::_OZGrowShrinkBehavior_curvatureFactorChan) {
    operator new();
  }
}

void sub_1B7D89458(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::OZGrowShrinkBehavior_curvatureFactorChanImpl(OZChannelPercent *this)
{
}

void sub_1B7D89528(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::OZGrowShrinkBehavior_endTimeOffsetChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::OZGrowShrinkBehavior_endTimeOffsetChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::_OZGrowShrinkBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::_OZGrowShrinkBehavior_endTimeOffsetChan) {
    operator new();
  }
}

void sub_1B7D89604(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::OZGrowShrinkBehavior_endTimeOffsetChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *this)
{
}

void sub_1B7D896DC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::OZGrowShrinkBehavior_hudValueScaleChanImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::OZGrowShrinkBehavior_hudValueScaleChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::_OZGrowShrinkBehavior_hudValueScaleChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::_OZGrowShrinkBehavior_hudValueScaleChan) {
    operator new();
  }
}

void sub_1B7D897B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::OZGrowShrinkBehavior_hudValueScaleChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *this)
{
}

void sub_1B7D89890(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZGrowShrinkCurveNode::OZGrowShrinkCurveNode(OZGrowShrinkCurveNode *this, OZGrowShrinkBehavior *a2, OZChannel *a3, char a4)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(void *)uint64_t v6 = &unk_1F117C970;
  *(void *)(v6 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = a2;
  *(unsigned char *)(v6 + 40) = a4;
}

void OZGrowShrinkCurveNode::~OZGrowShrinkCurveNode(OZGrowShrinkCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZGrowShrinkCurveNode::solveNode(OZGrowShrinkCurveNode *this, const CMTime *a2, double a3, double a4)
{
  int v5 = *((unsigned __int8 *)this + 40);
  uint64_t v6 = (OZGrowShrinkBehavior *)*((void *)this + 4);
  if (v5)
  {
    CMTime v10 = *a2;
    Xdouble Multiplier = OZGrowShrinkBehavior::getXMultiplier(v6, &v10);
  }
  else
  {
    CMTime v9 = *a2;
    Xdouble Multiplier = OZGrowShrinkBehavior::getYMultiplier(v6, &v9);
  }
  return XMultiplier * a4;
}

void OZGrowShrinkCurveNode::solveNode(OZGrowShrinkCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v4 = *((void *)a2 + 19);
  uint64_t v5 = *((void *)a2 + 10);
  CMTime v16 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v15 = *(CMTime *)((unsigned char *)a2 + 4);
  int v6 = *((_DWORD *)a2 + 36);
  if (*((unsigned char *)this + 40))
  {
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        double v8 = *(double *)(v5 + 8 * v7);
        CMTime v9 = (OZGrowShrinkBehavior *)*((void *)this + 4);
        CMTime v14 = v15;
        *(double *)(v4 + 8 * v7) = v8 * OZGrowShrinkBehavior::getXMultiplier(v9, &v14);
        CMTime v18 = v15;
        CMTime v17 = v16;
        PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
        ++v7;
      }
      while (v7 < *((unsigned int *)a2 + 36));
    }
  }
  else if (v6)
  {
    unint64_t v10 = 0;
    do
    {
      double v11 = *(double *)(v5 + 8 * v10);
      CMTimeEpoch v12 = (OZGrowShrinkBehavior *)*((void *)this + 4);
      CMTime v13 = v15;
      *(double *)(v4 + 8 * v10) = v11 * OZGrowShrinkBehavior::getYMultiplier(v12, &v13);
      CMTime v18 = v15;
      CMTime v17 = v16;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      ++v10;
    }
    while (v10 < *((unsigned int *)a2 + 36));
  }
}

void OZGrowShrinkCurveNode::cloneNode(OZGrowShrinkCurveNode *this)
{
}

void sub_1B7D89B68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkCurveNode::compare(OZGrowShrinkCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZGrowShrinkCurveNode::getNeededRange(OZGrowShrinkCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZLogarithmicBehavior::OZLogarithmicBehavior(OZLogarithmicBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZRampBehavior::OZRampBehavior(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F117CA68;
  *(void *)(v4 + 16) = &unk_1F117CDA8;
  *(void *)(v4 + 48) = &unk_1F117D000;
  *(void *)(v4 + 336) = &unk_1F117D058;
  *(void *)(v4 + 536) = &unk_1F117D080;
  uint64_t v5 = (OZChannelBase *)(v4 + 1168);
  OZChannelBase::setFlag((OZChannelBase *)(v4 + 1168), 2, 0);
  OZChannelBase::saveStateAsDefault(v5);
}

void sub_1B7D89D10(_Unwind_Exception *a1)
{
  OZRampBehavior::~OZRampBehavior(v1);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior::OZLogarithmicBehavior(OZLogarithmicBehavior *this, const OZLogarithmicBehavior *a2, char a3)
{
  OZRampBehavior::OZRampBehavior(this, a2, a3);
  *PCString v3 = &unk_1F117CA68;
  v3[2] = &unk_1F117CDA8;
  v3[6] = &unk_1F117D000;
  v3[42] = &unk_1F117D058;
  v3[67] = &unk_1F117D080;
}

void non-virtual thunk to'OZLogarithmicBehavior::~OZLogarithmicBehavior(OZLogarithmicBehavior *this)
{
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZLogarithmicBehavior::~OZLogarithmicBehavior(OZLogarithmicBehavior *this)
{
  OZRampBehavior::~OZRampBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLogarithmicBehavior::createCurveNode(OZLogarithmicBehavior *this, OZChannel *a2)
{
  var16 = a2->var16;
  double v5 = *((double *)var16 + 5);
  if (v5 != *((double *)this + 78))
  {
    *((double *)this + 78) = v5;
    (*(void (**)(OZLogarithmicBehavior *))(*(void *)this + 752))(this);
    var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    (*(void (**)(OZLogarithmicBehavior *, char *, OZChannel *))(*(void *)this + 760))(this, (char *)this + 544, a2);
  }
  double v6 = *((double *)a2->var16 + 2);
  (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
  double v8 = 3.40282347e38;
  if (v6 != -3.40282347e38 && v7.n128_f64[0] != 3.40282347e38) {
    double v8 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v7, 3.40282347e38)
  }
       - *((double *)a2->var16 + 2);
  *((double *)this + 79) = v8;
  operator new();
}

void sub_1B7D8A0CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void OZLogarithmicCurveNode::OZLogarithmicCurveNode(OZLogarithmicCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *double v5 = &unk_1F117D0F8;
  if (a2) {
  else
  }
    double v6 = 0;
  *((void *)this + 4) = v6;
}

void OZLogarithmicCurveNode::~OZLogarithmicCurveNode(OZLogarithmicCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZLogarithmicCurveNode::solveNode(OZLogarithmicCurveNode *this, const CMTime *a2, __n128 a3, double a4)
{
  memset(&v35, 0, sizeof(v35));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*(void *)(*((void *)this + 4) + 376) + 32)
                                                       + 336))(&v35, a3);
  uint64_t v6 = *((void *)this + 4);
  CMTime v34 = v35;
  if ((*(unsigned int (**)(void))(*(void *)v6 + 296))())
  {
    __n128 v32 = 0uLL;
    CMTimeEpoch v33 = 0;
    __n128 FrameDuration = OZBehavior::getFrameDuration((OZBehavior *)*((void *)this + 4), &v32);
    (*(void (**)(CMTime *__return_ptr, __n128))(**((void **)this + 4) + 608))(v31, FrameDuration);
    memset(&v30, 0, sizeof(v30));
    CMTime v36 = v31[0];
    double v8 = (OZBehavior *)*((void *)this + 4);
    OZBehavior::getFrameDuration(v8, (__n128 *)&time1);
    CMTime v9 = (OZChannel *)((char *)v8 + 1320);
    unint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble(v9, MEMORY[0x1E4F1FA48], 0.0);
    operator*(&time1, &v29, v11);
    CMTime time1 = v36;
    CMTime time2 = v29;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v30);
    memset(&v29, 0, sizeof(v29));
    CMTime time1 = v31[0];
    CMTime time2 = v31[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v36);
    CMTime time1 = v36;
    *(__n128 *)&time2.CMTimeValue value = v32;
    time2.CMTimeEpoch epoch = v33;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
    uint64_t v12 = *((void *)this + 4);
    OZBehavior::getFrameDuration((OZBehavior *)v12, (__n128 *)&time1);
    OZChannel::getValueAsDouble((OZChannel *)(v12 + 1472), v10, 0.0);
    operator*(&time1, &v36, v13);
    CMTime time1 = v28;
    CMTime time2 = v36;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 4) + 864), v10, 0.0);
    double v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 4) + 1016), v10, 0.0);
    double v17 = v16;
    if (vabdd_f64(v16, v15) >= 0.0000001)
    {
      CMTime time1 = v29;
      CMTime time2 = v30;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      if (fabs(Seconds) >= 0.0000001)
      {
        CMTime time1 = v35;
        CMTime time2 = v30;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
        Float64 v19 = CMTimeGetSeconds(&v26) / Seconds;
        CMTime time1 = v35;
        CMTime time2 = v30;
        double v20 = (v17 - v15) / 6.90775528;
        int32_t v21 = CMTimeCompare(&time1, &time2);
        double v22 = v19 * 999.0;
        CMTime time1 = v35;
        CMTime time2 = v29;
        int32_t v23 = CMTimeCompare(&time1, &time2);
        double v24 = 1.0;
        if (v21 >= 0) {
          double v24 = v22 + 1.0;
        }
        if (v23 > 0) {
          double v24 = 1000.0;
        }
        double v15 = v15 + v20 * log(v24);
      }
    }
    return v15 + a4;
  }
  return a4;
}

__n128 OZLogarithmicCurveNode::solveNode(OZLogarithmicCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  __n128 result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.CMTimeValue value = result;
  v8.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZLogarithmicCurveNode *, CMTime *, double, double))(*(void *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      __n128 result = *(__n128 *)&v12.value;
      CMTime v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

void OZLogarithmicCurveNode::cloneNode(OZLogarithmicCurveNode *this)
{
}

void sub_1B7D8A740(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZLogarithmicCurveNode::compare(OZLogarithmicCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

OZCurveNodeParam *OZLogarithmicCurveNode::getNeededRange(OZLogarithmicCurveNode *this, OZCurveNodeParam *a2)
{
  return a2;
}

void OZMoveToBehavior::OZMoveToBehavior(OZMoveToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F117D1F0;
  float64x2_t v5[2] = &unk_1F117D510;
  v5[6] = &unk_1F117D768;
  v5[42] = &unk_1F117D7C0;
  v5[67] = &unk_1F117D7E8;
  PCURL::PCURL((PCURL *)v6, @"Move To Behavior Position");
  OZChannelPosition3D::OZChannelPosition3D((OZMoveToBehavior *)((char *)this + 864), v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 3u);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, @"Move To Behavior Influence");
  OZChannelDouble::OZChannelDouble((OZMoveToBehavior *)((char *)this + 1752), 1.0, v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, @"Move To Behavior Direction Enum");
  PCURL::PCURL((PCURL *)&v8, @"Move To Behavior Direction Label");
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904), 0, v6, &v8, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v8, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160), 0, v6, &v8, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(v6);
  *((void *)this + 30OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 864), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 864));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1000), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 125) + 128))((char *)this + 1000);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1152), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 144) + 128))((char *)this + 1152);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1600), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 200) + 128))((char *)this + 1600);
  OZChannel::setMin((OZChannel *)((char *)this + 1752), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1752), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1752), 0.01);
  v8.CMTime var0 = (__CFString *)0x100000000;
  OZChannelEnum::setTags((OZMoveToBehavior *)((char *)this + 1904), (char *)&v8, 2);
  uint64_t v7 = 0x500000004;
  *(_OWORD *)&v6[0].CMTime var0 = xmmword_1B8385544;
  OZChannelEnum::setTags((OZMoveToBehavior *)((char *)this + 2160), (char *)v6, 6);
}

void sub_1B7D8ABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15)
{
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v17);
  OZChannelPosition3D::~OZChannelPosition3D(v16);
  OZCameraBehavior::~OZCameraBehavior(v15);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior::OZMoveToBehavior(OZMoveToBehavior *this, const OZMoveToBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117D1F0;
  *(void *)(v5 + 16) = &unk_1F117D510;
  *(void *)(v5 + 48) = &unk_1F117D768;
  *(void *)(v5 + 336) = &unk_1F117D7C0;
  *(void *)(v5 + 536) = &unk_1F117D7E8;
  uint64_t v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)(v5 + 864), (const OZMoveToBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1752), (const OZChannelBase *)((char *)a2 + 1752), v6);
  *((void *)this + 219) = &unk_1F1100CF0;
  *((void *)this + 22OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904), (const OZMoveToBehavior *)((char *)a2 + 1904), v6);
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160), (const OZMoveToBehavior *)((char *)a2 + 2160), v6);
  *((void *)this + 30OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
}

void sub_1B7D8AE20(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannel::~OZChannel(v3);
  OZChannelPosition3D::~OZChannelPosition3D(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior::~OZMoveToBehavior(OZMoveToBehavior *this)
{
  *(void *)this = &unk_1F117D1F0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117D510;
  *((void *)this + 6) = &unk_1F117D768;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117D7C0;
  *((void *)this + 67) = &unk_1F117D7E8;
  OZChannelEnum::~OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160));
  OZChannelEnum::~OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1752));
  OZChannelPosition3D::~OZChannelPosition3D((OZMoveToBehavior *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZMoveToBehavior::~OZMoveToBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZMoveToBehavior::~OZMoveToBehavior(OZMoveToBehavior *this)
{
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 48));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 336));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZMoveToBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelPosition::operator=(a1 + 864, (uint64_t)v4 + 864);

  return OZChannelBase::operator=(a1 + 2160, (uint64_t)v5 + 2160);
}

unint64_t OZMoveToBehavior::addCurveNodesToChannels(OZMoveToBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2) {
  else
  }
    uint64_t v5 = 0;
  *((void *)this + 30OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v5;
  return v4;
}

double OZMoveToBehavior::solveNode(OZMoveToBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  int v9 = (*(uint64_t (**)(OZMoveToBehavior *, double))(*(void *)this + 768))(this, a4);
  if (a2 <= 2 && v9)
  {
    memset(&v61, 0, sizeof(v61));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v61);
    __n128 v59 = 0uLL;
    CMTimeEpoch v60 = 0;
    uint64_t v10 = (*(uint64_t (**)(OZMoveToBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v59);
    (*(void (**)(CMTime *__return_ptr, OZMoveToBehavior *, __n128))(*(void *)this + 608))(&v56, this, FrameDuration);
    CMTime v55 = v56;
    memset(&v54, 0, sizeof(v54));
    *(_OWORD *)&time1.var0.CMTime var0 = v57;
    time1.var0.unsigned int var3 = v58;
    *(__n128 *)&time2.CMTimeValue value = v59;
    time2.CMTimeEpoch epoch = v60;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v54);
    time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v61;
    CMTime time2 = v55;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v51);
    *(__n128 *)&time1.var0.CMTime var0 = v59;
    time1.var0.unsigned int var3 = v60;
    CMTime time2 = v54;
    if (CMTimeCompare((CMTime *)&time1, &time2) >= 0) {
      CMTime v12 = (CMTime *)&v59;
    }
    else {
      CMTime v12 = &v54;
    }
    *(_OWORD *)&time1.var0.CMTime var0 = *(_OWORD *)&v12->value;
    time1.var0.unsigned int var3 = v12->epoch;
    operator/((long long *)&v51, (uint64_t)&time1, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    double v14 = Seconds;
    if (Seconds > 1.0) {
      double Seconds = 1.0;
    }
    if (v14 >= 0.0) {
      double v15 = Seconds;
    }
    else {
      double v15 = 0.0;
    }
    double v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 2160), MEMORY[0x1E4F1FA48], 0.0);
    double v18 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v15);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1752), a3, 0.0);
    double v36 = v18 * v19;
    int v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1904), v16, 0.0);
    if (v20 == 1)
    {
      double v21 = 1.0 - v36;
      if (1.0 - v36 < 0.0000001) {
        double v21 = 0.0;
      }
    }
    else
    {
      double v21 = v36;
    }
    BOOL v22 = v21 < 0.0000001;
    if (v20 == 1) {
      BOOL v22 = v21 > 1.0;
    }
    if (!v22)
    {
      double v37 = v21;
      if (v21 == v14)
      {
        double v23 = 0.0;
      }
      else if (v14 < 0.0000001 && v20 == 1 || (double v23 = 0.0, v14 > 1.0) && v20 != 1)
      {
        time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v55;
        CMTime time2 = v54;
        PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)&v51);
        double v23 = (*(double (**)(OZMoveToBehavior *, uint64_t, float64x2_t *, double))(*(void *)this + 776))(this, a2, &v51, a5);
      }
      OZRenderState::OZRenderState(&time1);
      time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v61;
      *(_WORD *)&time1.var8 = 256;
      time1.var6 = 0;
      uint64_t v49 = 0x3FF0000000000000;
      uint64_t v46 = 0x3FF0000000000000;
      uint64_t v43 = 0x3FF0000000000000;
      time2.CMTimeValue value = 0x3FF0000000000000;
      *(_OWORD *)&time2.timescale = 0u;
      long long v42 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      double v24 = *(const void **)(*((void *)this + 302) + 960);
      if (v24)
      {
        if (v25) {
          (*(void (**)(void *, CMTime *, OZRenderState *))(*(void *)v25 + 1256))(v25, &time2, &time1);
        }
      }
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1000), &v61, 0.0);
      float64_t v35 = v26;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1152), &v61, 0.0);
      float64_t v34 = v27;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1600), &v61, 0.0);
      double v29 = v28;
      v51.f64[0] = v35;
      v51.f64[1] = v34;
      double v52 = v28;
      if (v37 < 1.0)
      {
        std::vector<double>::vector(__p, 3uLL);
        (*(void (**)(OZMoveToBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, __p);
        double v30 = *((double *)__p[0] + 2);
        float64x2_t v38 = *(float64x2_t *)__p[0];
        double v39 = v30;
        PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, v38.f64, v38.f64);
        v31.f64[0] = v35;
        v31.f64[1] = v34;
        float64x2_t v51 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(v31, v38), v37));
        double v52 = v39 + v37 * (v29 - v39);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      PCMatrix44Tmpl<double>::invert((double *)&time2.value, (double *)&time2.value, 0.0);
      PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, v51.f64, v51.f64);
      if (a2 == 2)
      {
        double v32 = v52;
      }
      else if (a2 == 1)
      {
        double v32 = v51.f64[1];
      }
      else
      {
        double v32 = v51.f64[0];
      }
      return v23 + v32;
    }
  }
  return a5;
}

void sub_1B7D8B7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double non-virtual thunk to'OZMoveToBehavior::solveNode(OZMoveToBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZMoveToBehavior::solveNode((OZMoveToBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZNegateBehavior::OZNegateBehavior(OZNegateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *unint64_t v4 = &unk_1F117D860;
  v4[2] = &unk_1F117DBA0;
  v4[6] = &unk_1F117DDF8;
  v4[42] = &unk_1F117DE50;
  v4[67] = &unk_1F117DE78;
}

void OZNegateBehavior::OZNegateBehavior(OZNegateBehavior *this, const OZNegateBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *uint64_t v3 = &unk_1F117D860;
  v3[2] = &unk_1F117DBA0;
  v3[6] = &unk_1F117DDF8;
  v3[42] = &unk_1F117DE50;
  v3[67] = &unk_1F117DE78;
}

void non-virtual thunk to'OZNegateBehavior::~OZNegateBehavior(OZNegateBehavior *this)
{
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZNegateBehavior::~OZNegateBehavior(OZNegateBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZNegateBehavior::solveNode(OZNegateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  (*(void (**)(long long *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v9, a4);
  long long v7 = v9;
  uint64_t v8 = v10;
  return (*(uint64_t (**)(OZNegateBehavior *, long long *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v7, 0, 1, 1);
}

uint64_t non-virtual thunk to'OZNegateBehavior::solveNode(OZNegateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZNegateBehavior::solveNode((OZNegateBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZOscillateBehavior::OZOscillateBehavior(OZOscillateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F117DEF0;
  float64x2_t v5[2] = &unk_1F117E230;
  v5[6] = &unk_1F117E488;
  v5[42] = &unk_1F117E4E0;
  v5[67] = &unk_1F117E508;
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Wave Shape Enum");
  PCURL::PCURL((PCURL *)&v6, @"Oscillate Behavior Wave Shape");
  OZChannelEnum::OZChannelEnum((OZOscillateBehavior *)((char *)this + 864), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Phase");
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1120), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Amplitude");
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1272), 100.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Speed");
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1424), 10.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Absolute");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1576), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior Start Frame Offset");
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1728), &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1880), &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2032), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 2u, 0, 0);
  PCString::~PCString(&v7);
  *((_WORD *)this + 109OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1728), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1880), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1728));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1880), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1880));
}

void sub_1B7D8BF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior::OZOscillateBehavior(OZOscillateBehavior *this, const OZOscillateBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117DEF0;
  *(void *)(v5 + 16) = &unk_1F117E230;
  *(void *)(v5 + 48) = &unk_1F117E488;
  *(void *)(v5 + 336) = &unk_1F117E4E0;
  *(void *)(v5 + 536) = &unk_1F117E508;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 864), (const OZOscillateBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1120), (const OZChannelBase *)a2 + 10, v6);
  *((void *)this + 140) = &unk_1F1100CF0;
  *((void *)this + 14OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1272), (const OZChannelBase *)((char *)a2 + 1272), v6);
  *((void *)this + 159) = &unk_1F1100CF0;
  *((void *)this + 16OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1424), (const OZChannelBase *)((char *)a2 + 1424), v6);
  *((void *)this + 178) = &unk_1F1100CF0;
  *((void *)this + 180) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1576), (const OZChannelBase *)((char *)a2 + 1576), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1728), (const OZChannelBase *)((char *)a2 + 1728), v6);
  *((void *)this + 216) = &unk_1F1100CF0;
  *((void *)this + 218) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1880), (const OZChannelBase *)((char *)a2 + 1880), v6);
  *((void *)this + 235) = &unk_1F1100CF0;
  *((void *)this + 237) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2032), (const OZChannelBase *)((char *)a2 + 2032), v6);
  *((_WORD *)this + 109OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_WORD *)a2 + 1092);
}

void sub_1B7D8C33C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v8);
  OZChannel::~OZChannel(v7);
  OZChannelBool::~OZChannelBool(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D8C3A8()
{
}

void sub_1B7D8C3B0()
{
}

void sub_1B7D8C3B8()
{
}

void OZOscillateBehavior::~OZOscillateBehavior(OZOscillateBehavior *this)
{
  *(void *)this = &unk_1F117DEF0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117E230;
  *((void *)this + 6) = &unk_1F117E488;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117E4E0;
  *((void *)this + 67) = &unk_1F117E508;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1880));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1728));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1120));
  OZChannelEnum::~OZChannelEnum((OZOscillateBehavior *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZOscillateBehavior::~OZOscillateBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZOscillateBehavior::~OZOscillateBehavior(OZOscillateBehavior *this)
{
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 48));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 336));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZOscillateBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)(v4 + 432));
  OZChannelBase::operator=(a1 + 1120, (uint64_t)(v5 + 560));
  OZChannelBase::operator=(a1 + 1272, (uint64_t)(v5 + 636));
  OZChannelBase::operator=(a1 + 1424, (uint64_t)(v5 + 712));
  OZChannelBase::operator=(a1 + 1728, (uint64_t)(v5 + 864));
  OZChannelBase::operator=(a1 + 1880, (uint64_t)(v5 + 940));
  uint64_t result = OZChannelBase::operator=(a1 + 2032, (uint64_t)(v5 + 1016));
  *(_WORD *)(a1 + 2184) = v5[1092];
  return result;
}

uint64_t OZOscillateBehavior::sceneNodeDidLoad(OZOscillateBehavior *this)
{
  uint64_t result = OZSingleChannelBehavior::sceneNodeDidLoad(this);
  *((_WORD *)this + 109OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  return result;
}

long double OZOscillateBehavior::waveFunc(OZOscillateBehavior *this, double a2)
{
  double v3 = 0.0;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      return sin(a2 * 6.28318531);
    case 1u:
      if (a2 > 0.5) {
        return -1.0;
      }
      else {
        return 1.0;
      }
    case 2u:
      double v3 = a2 + a2;
      goto LABEL_16;
    case 3u:
      if (a2 <= 0.25 || a2 >= 0.75)
      {
        double v3 = a2 * 4.0;
        if (a2 * 4.0 <= 1.0) {
          return v3;
        }
        double v6 = -4.0;
        return v3 + v6;
      }
      double v3 = (a2 + -0.5) * -4.0;
LABEL_16:
      if (v3 > 1.0)
      {
        double v6 = -2.0;
        return v3 + v6;
      }
      return v3;
    default:
      return v3;
  }
}

double OZOscillateBehavior::solveNode(OZOscillateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v38, 0, sizeof(v38));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v38, a4);
  CMTime v37 = v38;
  if ((*(unsigned int (**)(OZOscillateBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v37, 0, 1, 1)&& (*(uint64_t (**)(OZOscillateBehavior *))(*(void *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, OZOscillateBehavior *))(*(void *)this + 608))(v36, this);
    memset(&v35, 0, sizeof(v35));
    CMTime v41 = v36[0];
    uint64_t v8 = (OZScene *)(*(uint64_t (**)(OZOscillateBehavior *))(*(void *)this + 336))(this);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1728), &v38, 0.0);
    OZScene::getTimeForFrame(v8, v9, (__n128 *)&v40);
    CMTime time1 = v41;
    CMTime time2 = v40;
    uint64_t v10 = &v35;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v35);
    memset(&v34, 0, sizeof(v34));
    OZBehavior::getFrameDuration(this, (__n128 *)&v39);
    CMTime time1 = v36[0];
    CMTime time2 = v36[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    CMTime time1 = v41;
    CMTime time2 = v39;
    v11.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
    CMTime v12 = (OZScene *)(*(uint64_t (**)(OZOscillateBehavior *, __n128))(*(void *)this + 336))(this, v11);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1880), &v38, 0.0);
    OZScene::getTimeForFrame(v12, v13, (__n128 *)&v41);
    CMTime time1 = v40;
    CMTime time2 = v41;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
    CMTime time1 = v38;
    CMTime time2 = v35;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = v38;
      CMTime time2 = v34;
      if (CMTimeCompare(&time1, &time2) <= 0) {
        uint64_t v10 = &v38;
      }
      else {
        uint64_t v10 = &v34;
      }
    }
    CMTime v33 = *v10;
    CMTime time1 = *v10;
    CMTime time2 = v35;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v33);
    memset(&v32, 0, sizeof(v32));
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2032), MEMORY[0x1E4F1FA48], 0.0))
    {
      (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 320))(&v40);
      CMTime time1 = *a3;
      CMTime time2 = v40;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v39);
      CMTime time1 = v41;
      CMTime time2 = v39;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
    }
    else
    {
      CMTime v32 = v38;
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1120), &v32, 0.0);
    double v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1272), &v32, 0.0);
    double v17 = v16;
    if (OZChannel::hasMoreThanOneKeypoint((OZChannel *)((char *)this + 1424))
      || OZBehavior::IsChannelAffectedByBehaviors((OZOscillateBehavior *)((char *)this + 1424), 0))
    {
      CMTime v40 = v35;
      int v18 = 0;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), MEMORY[0x1E4F1FA48], 0.0) == 2) {
        int v19 = 2;
      }
      else {
        int v19 = 4;
      }
      double v20 = (double)v19;
      while (1)
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1424), &v40, 0.0);
        double v22 = v21 / 60.0;
        double v23 = 1.0 / (v21 / 60.0);
        double v24 = v22 <= 0.0 ? 100000000.0 : v23;
        memset(&v39, 0, sizeof(v39));
        OZFigTimeForChannelSeconds(&v39, v24 / v20, 0x40000);
        CMTime time1 = v40;
        CMTime time2 = v39;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
        CMTime time1 = v41;
        CMTime time2 = v33;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          break;
        }
        CMTime time2 = v40;
        CMTime v41 = v39;
        PC_CMTimeSaferAdd(&time2, &v41, (uint64_t)&time1);
        CMTime v40 = time1;
        ++v18;
      }
      CMTime time1 = v33;
      CMTime time2 = v40;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      double v25 = v15 / 6.28318531 + v22 * ((double)(v18 & (v19 - 1)) / v20 * v24 + CMTimeGetSeconds(&time));
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1424), &v32, 0.0);
      CMTime v30 = v33;
      long double v27 = v15 / 6.28318531 + v26 * (CMTimeGetSeconds(&v30) / 60.0);
      time1.CMTimeValue value = 0;
      modf(v27, (long double *)&time1.value);
      double v25 = v27 - *(double *)&time1.value;
      if (v27 - *(double *)&time1.value < 0.0) {
        double v25 = v25 + 1.0;
      }
    }
    double v28 = v17 * OZOscillateBehavior::waveFunc(this, v25);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1576), MEMORY[0x1E4F1FA48], 0.0)
      && (v17 > 0.0 && v28 < 0.0 || v17 < 0.0 && v28 > 0.0))
    {
      double v28 = -v28;
    }
    return v28 + a5;
  }
  return a5;
}

double non-virtual thunk to'OZOscillateBehavior::solveNode(OZOscillateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZOscillateBehavior::solveNode((OZOscillateBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZOscillateBehavior::didSetChannelInfo(OZOscillateBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  uint64_t v5 = (OZChannel *)((char *)this + 1272);
  double v6 = *(double *)(*((void *)this + 175) + 40);
  OZChannel::setInfo((OZChannel *)((char *)this + 1272), a2);
  double v7 = 1.0;
  if (!*((unsigned char *)this + 2184)) {
    double v7 = v6 / *((double *)a2 + 5);
  }
  double v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (double v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((void *)this + 175) + 40) + -57.2957795) >= 0.0000001) {
      double v10 = 100.0;
    }
    else {
      double v10 = 6.28318531;
    }
  }
  else
  {
    double v10 = v9 - v8;
    if (!*((unsigned char *)this + 2184))
    {
      double v11 = *((double *)this + 79);
      if (v11 != 3.40282347e38) {
        double v7 = v7 * (v10 / v11);
      }
    }
  }
  if (vabdd_f64(1.0, v7) >= 0.0000001) {
    OZChannel::scaleChannel(v5, v7);
  }
  OZChannel::setSliderMin(v5, 0.0);
  OZChannel::setSliderMax(v5, v10);
  (*(void (**)(void))(**(void **)(*((void *)this + 173) + 8) + 256))();
  if (v10 > 0.0) {
    OZChannel::setMax(v5, v10);
  }
}

void OZOscillateBehavior::didSkipApplyingToNonkeyframableChannel(OZOscillateBehavior *this, OZChannel *a2, __n128 a3)
{
  if (*((unsigned char *)this + 2185)) {
    OZSingleChannelBehavior::conformToChannel(this, a2, 0, a3);
  }
}

uint64_t OZOscillateBehavior::parseBegin(OZOscillateBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 2184) = 0;
  unsigned int v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (BOOL v5 = *((_DWORD *)a2 + 27) > 6u) : (BOOL v5 = 1), !v5))
  {
    *((unsigned char *)this + 2185) = 1;
    OZChannel::setValue((OZChannel *)((char *)this + 2032), MEMORY[0x1E4F1FA48], 1.0, 0);
  }

  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZOscillateBehavior::parseBegin(OZOscillateBehavior *this, PCSerializerReadStream *a2)
{
  return OZOscillateBehavior::parseBegin((OZOscillateBehavior *)((char *)this - 48), a2);
}

uint64_t OZOscillateBehavior::parseElement(OZOscillateBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 110)
  {
    int v7 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v7);
    if (v7 == *((_DWORD *)this + 324)) {
      *((unsigned char *)this + 2184) = 1;
    }
  }
  return OZSingleChannelBehavior::parseElement((PCSerializer **)this, a2, a3);
}

uint64_t non-virtual thunk to'OZOscillateBehavior::parseElement(OZOscillateBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZOscillateBehavior::parseElement((OZOscillateBehavior *)((char *)this - 48), a2, a3);
}

void OZPanBehavior::OZPanBehavior(OZPanBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *BOOL v5 = &unk_1F117E580;
  float64x2_t v5[2] = &unk_1F117E8A0;
  v5[6] = &unk_1F117EAF8;
  v5[42] = &unk_1F117EB50;
  v5[67] = &unk_1F117EB78;
  PCURL::PCURL((PCURL *)v7, @"Pan Behavior Angle Start");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 864), 0.0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Pan Behavior Angle End");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1016), 0.523598776, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1168), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Pan Behavior Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Pan Behavior Axis Label");
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1424), 1u, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((void *)this + 210) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -3.14159265);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 3.14159265);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1016), -3.14159265);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1016), 3.14159265);
  uint64_t v8 = 0x500000004;
  *(_OWORD *)&v7[0].CMTime var0 = xmmword_1B83855B0;
  OZChannelEnum::setTags((OZPanBehavior *)((char *)this + 1168), (char *)v7, 6);
}

void sub_1B7D8D530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZPanBehavior::OZPanBehavior(OZPanBehavior *this, const OZPanBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117E580;
  *(void *)(v5 + 16) = &unk_1F117E8A0;
  *(void *)(v5 + 48) = &unk_1F117EAF8;
  *(void *)(v5 + 336) = &unk_1F117EB50;
  *(void *)(v5 + 536) = &unk_1F117EB78;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F11010C0;
  *((void *)this + 110) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((void *)this + 127) = &unk_1F11010C0;
  *((void *)this + 129) = &unk_1F1101420;
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1168), (const OZPanBehavior *)((char *)a2 + 1168), v6);
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1424), (const OZPanBehavior *)((char *)a2 + 1424), v6);
  *((void *)this + 210) = 0;
}

void sub_1B7D8D790(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZPanBehavior::~OZPanBehavior(OZPanBehavior *this)
{
  *(void *)this = &unk_1F117E580;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117E8A0;
  *((void *)this + 6) = &unk_1F117EAF8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117EB50;
  *((void *)this + 67) = &unk_1F117EB78;
  OZChannelEnum::~OZChannelEnum((OZPanBehavior *)((char *)this + 1424));
  OZChannelEnum::~OZChannelEnum((OZPanBehavior *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZPanBehavior::~OZPanBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZPanBehavior::~OZPanBehavior(OZPanBehavior *this)
{
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 48));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 336));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZPanBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);

  return OZChannelBase::operator=(a1 + 1424, (uint64_t)v5 + 1424);
}

unint64_t OZPanBehavior::addCurveNodesToChannels(OZPanBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 0, 1);
  if (a2) {
  else
  }
    uint64_t v5 = 0;
  *((void *)this + 210) = v5;
  return v4;
}

double OZPanBehavior::solveNode(OZPanBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  int v8 = (*(uint64_t (**)(OZPanBehavior *, double))(*(void *)this + 768))(this, a4);
  if (a2 <= 2 && v8)
  {
    memset(&v31, 0, sizeof(v31));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v31);
    __n128 v29 = 0uLL;
    CMTimeEpoch v30 = 0;
    uint64_t v9 = (*(uint64_t (**)(OZPanBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v29);
    (*(void (**)(CMTime *__return_ptr, OZPanBehavior *, __n128))(*(void *)this + 608))(v28, this, FrameDuration);
    CMTime v27 = v28[0];
    memset(&v26, 0, sizeof(v26));
    CMTime time1 = v28[1];
    *(__n128 *)&time2.CMTimeValue value = v29;
    time2.CMTimeEpoch epoch = v30;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
    CMTime time1 = v31;
    CMTime time2 = v27;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    *(__n128 *)&time1.CMTimeValue value = v29;
    time1.CMTimeEpoch epoch = v30;
    CMTime time2 = v26;
    double v11 = CMTimeCompare(&time1, &time2) >= 0 ? (CMTime *)&v29 : &v26;
    CMTime time1 = *v11;
    operator/(&v24, (uint64_t)&time1, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0)
    {
      if (Seconds <= 1.0) {
        double v13 = Seconds;
      }
      else {
        double v13 = 1.0;
      }
      double v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
      int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1168), MEMORY[0x1E4F1FA48], 0.0);
      double v16 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v13);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v31, 0.0);
      double v18 = v17;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), &v31, 0.0);
      double v20 = v19;
      int v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1424), v14, 0.0);
      double v22 = v16 * (v18 - v20) - v18;
      if (v21 != a2) {
        double v22 = 0.0;
      }
      return a5 - v22;
    }
  }
  return a5;
}

double non-virtual thunk to'OZPanBehavior::solveNode(OZPanBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZPanBehavior::solveNode((OZPanBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZPointAtBehavior::OZPointAtBehavior(OZPointAtBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F117EBF0;
  float64x2_t v5[2] = &unk_1F117EF10;
  v5[6] = &unk_1F117F168;
  v5[42] = &unk_1F117F1C0;
  v5[67] = &unk_1F117F1E8;
  PCURL::PCURL((PCURL *)v7, @"Point At Behavior Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZPointAtBehavior *)((char *)this + 864), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Point At Behavior Transition");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Point At Behavior Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Point At Behavior Axis Label");
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432), 2u, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Point At Behavior Invert Axis");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1688), 1, v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(v7);
  *((void *)this + 230) = 0;
  OZValueCache<OZPointAtCacheItem>::OZValueCache((uint64_t)this + 1848);
  *((unsigned char *)this + 2016) = 0;
  *((void *)this + 25OZLinkBehavior::clearAll(this, 1) = 0;
  *(_OWORD *)((char *)this + 199OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *(_OWORD *)&v7[0].CMTime var0 = xmmword_1B83855E0;
  uint64_t v8 = 0x500000004;
  OZChannelEnum::setTags((OZPointAtBehavior *)((char *)this + 1176), (char *)v7, 6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 864, 1);
  *((void *)this + 249) = 0;
  *((void *)this + 250) = 0;
  *((void *)this + 25OZLinkBehavior::clearAll(this, 1) = 0;
}

void sub_1B7D8E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelBool::~OZChannelBool(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior::OZPointAtBehavior(OZPointAtBehavior *this, const OZPointAtBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117EBF0;
  *(void *)(v5 + 16) = &unk_1F117EF10;
  *(void *)(v5 + 48) = &unk_1F117F168;
  *(void *)(v5 + 336) = &unk_1F117F1C0;
  *(void *)(v5 + 536) = &unk_1F117F1E8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZPointAtBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), (const OZChannelBase *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176), (const OZPointAtBehavior *)((char *)a2 + 1176), v6);
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432), (const OZPointAtBehavior *)((char *)a2 + 1432), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1688), (const OZChannelBase *)((char *)a2 + 1688), v6);
  *((void *)this + 230) = 0;
  OZValueCache<OZPointAtCacheItem>::OZValueCache((uint64_t)this + 1848);
  *((void *)this + 25OZLinkBehavior::clearAll(this, 1) = 0;
  *(_OWORD *)((char *)this + 199OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((unsigned char *)this + 2016) = *((unsigned char *)a2 + 2016);
  *((void *)this + 249) = 0;
  *((void *)this + 25OZLinkBehavior::clearAll(this, 1) = 0;
  *((void *)this + 250) = 0;
}

void sub_1B7D8E3F0(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D8E44C()
{
}

void OZPointAtBehavior::~OZPointAtBehavior(OZPointAtBehavior *this)
{
  *(void *)this = &unk_1F117EBF0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117EF10;
  *((void *)this + 6) = &unk_1F117F168;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117F1C0;
  *((void *)this + 67) = &unk_1F117F1E8;
  OZValueCache<OZPointAtCacheItem>::~OZValueCache((uint64_t)this + 1848);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1688));
  OZChannelEnum::~OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432));
  OZChannelEnum::~OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZPointAtBehavior *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZPointAtBehavior::~OZPointAtBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZPointAtBehavior::~OZPointAtBehavior(OZPointAtBehavior *this)
{
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 48));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 336));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZPointAtBehavior::flushCache(OZPointAtBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 1848);

  OZCameraBehavior::flushCache(this);
}

uint64_t OZPointAtBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)(v4 + 864));
  OZChannelBase::operator=(a1 + 1024, (uint64_t)(v5 + 1024));
  OZChannelBase::operator=(a1 + 1176, (uint64_t)(v5 + 1176));
  OZChannelBase::operator=(a1 + 1432, (uint64_t)(v5 + 1432));
  uint64_t result = OZChannelBase::operator=(a1 + 1688, (uint64_t)(v5 + 1688));
  *(unsigned char *)(a1 + 2016) = v5[2016];
  *(void *)(a1 + 2000) = 0;
  *(void *)(a1 + 2008) = 0;
  *(void *)(a1 + 199OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  return result;
}

unint64_t OZPointAtBehavior::addCurveNodesToChannels(OZPointAtBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 0, 1);
  if (a2) {
  else
  }
    uint64_t v5 = 0;
  if (v5 != *((void **)this + 230))
  {
    if (!*((unsigned char *)this + 2016))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 1432), MEMORY[0x1E4F1FA48], 2.0, 0);
      double v6 = 0.0;
      if (a2
      {
        double v6 = 1.0;
      }
      OZChannel::setValue((OZChannel *)((char *)this + 1688), MEMORY[0x1E4F1FA48], v6, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 1688), v6);
    }
    *((void *)this + 230) = v5;
    *((unsigned char *)this + 2016) = 1;
  }
  return v4;
}

void OZPointAtBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  if (lpsrc)
  {
    if (v5)
    {
      double v6 = v5;
      do
      {
        int v7 = operator new(0x18uLL);
        v7[1] = a4;
        PCString v7[2] = v6 + 136;
        uint64_t v8 = *a4;
        void *v7 = *a4;
        *(void *)(v8 + 8) = v7;
        *a4 = (uint64_t)v7;
        ++a4[2];
        uint64_t v9 = (const void *)v6[120];
        if (!v9) {
          break;
        }
      }
      while (v6);
    }
  }
}

double OZPointAtBehavior::solveNode(OZPointAtBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  int v9 = (*(uint64_t (**)(OZPointAtBehavior *, double))(*(void *)this + 768))(this, a4);
  if (a2 <= 2)
  {
    if (v9)
    {
      TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
      if (TransformNode)
      {
        double v11 = TransformNode;
        CMTime v12 = (const void *)*((void *)this + 230);
        if (v12)
        {
          if (!v13) {
            goto LABEL_11;
          }
          double v14 = (const void *)v11[120];
          if (!v14) {
            goto LABEL_11;
          }
          if (!v15) {
            goto LABEL_11;
          }
          do
          {
            double v16 = v15;
            double v17 = (const void *)v15[120];
            if (!v17) {
              break;
            }
          }
          while (v15);
          if ((*(unsigned int (**)(void *))(*v16 + 1640))(v16))
          {
LABEL_11:
            memset(&v159, 0, sizeof(v159));
            (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v159);
            __n128 v157 = 0uLL;
            int64_t v158 = 0;
            uint64_t v18 = (*(uint64_t (**)(OZPointAtBehavior *))(*(void *)this + 336))(this);
            __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), &v157);
            (*(void (**)(long long *__return_ptr, OZPointAtBehavior *, __n128))(*(void *)this + 608))(&v153, this, FrameDuration);
            int64_t v152 = v154;
            long long v151 = v153;
            long long v149 = 0uLL;
            int64_t v150 = 0;
            *(_OWORD *)&time1.var0.CMTime var0 = v155;
            time1.var0.unsigned int var3 = v156;
            *(__n128 *)&time2.var0.CMTime var0 = v157;
            time2.var0.unsigned int var3 = v158;
            PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v149);
            time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v159;
            *(_OWORD *)&time2.var0.CMTime var0 = v151;
            time2.var0.unsigned int var3 = v152;
            PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v167);
            *(__n128 *)&time1.var0.CMTime var0 = v157;
            time1.var0.unsigned int var3 = v158;
            *(_OWORD *)&time2.var0.CMTime var0 = v149;
            time2.var0.unsigned int var3 = v150;
            double v20 = CMTimeCompare((CMTime *)&time1, (CMTime *)&time2) >= 0 ? &v157 : (__n128 *)&v149;
            *(__n128 *)&time1.var0.CMTime var0 = *v20;
            time1.var0.unsigned int var3 = v20[1].n128_i64[0];
            operator/((long long *)v167, (uint64_t)&time1, (uint64_t)&time);
            double Seconds = CMTimeGetSeconds(&time);
            if (Seconds >= 0.0)
            {
              if (Seconds <= 1.0) {
                double v22 = Seconds;
              }
              else {
                double v22 = 1.0;
              }
              double v23 = 0.0;
              if (Seconds > 1.0)
              {
                *(_OWORD *)&time1.var0.CMTime var0 = v151;
                time1.var0.unsigned int var3 = v152;
                *(_OWORD *)&time2.var0.CMTime var0 = v149;
                time2.var0.unsigned int var3 = v150;
                PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v167);
                double v23 = (*(double (**)(OZPointAtBehavior *, uint64_t, unsigned char *, double))(*(void *)this + 776))(this, a2, v167, a5);
              }
              v144[1] = 0xBFF0000000000000;
              v144[0] = &unk_1F117F260;
              double v145 = 0.0;
              double v147 = 0.0;
              double v146 = 0.0;
              if (OZValueCache<OZPointAtCacheItem>::find((uint64_t)this + 1848, (uint64_t)v144, v22))
              {
                if (a2 == 2)
                {
                  double v24 = v147;
                }
                else if (a2 == 1)
                {
                  double v24 = v146;
                }
                else
                {
                  double v24 = v145;
                }
                return v23 + v24;
              }
              else
              {
                double v143 = 0.0;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1024), &v159, 0.0);
                if (v25 <= -0.0000001 || (double v26 = 1.0, v25 >= 0.0000001))
                {
                  double v27 = v22 / v25;
                  double v26 = 1.0;
                  if (v27 <= 1.0) {
                    double v26 = v27;
                  }
                  if (v27 < 0.0) {
                    double v26 = 0.0;
                  }
                }
                double v143 = v26;
                int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1176), MEMORY[0x1E4F1FA48], 0.0);
                double v143 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v143);
                OZCameraBehavior::getPositionBeforeThis(this, *((OZTransformNode **)this + 230), a3, v142);
                std::vector<double>::vector(__p, 3uLL);
                (*(void (**)(OZPointAtBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, __p);
                double v30 = *(double *)__p[0];
                double v29 = *((double *)__p[0] + 1);
                double v31 = *((double *)__p[0] + 2);
                v140[0] = *(void *)__p[0];
                *(double *)&v140[1] = v29;
                *(double *)&v140[2] = v31;
                memset(&v139, 0, sizeof(v139));
                if (v22 == 1.0)
                {
                  *(_OWORD *)&time1.var0.CMTime var0 = v151;
                  time1.var0.unsigned int var3 = v152;
                  *(_OWORD *)&time2.var0.CMTime var0 = v149;
                  time2.var0.unsigned int var3 = v150;
                  PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v139);
                }
                else
                {
                  CMTime v139 = v159;
                }
                OZRenderState::OZRenderState(&time1);
                time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v139;
                OZRenderState::OZRenderState(&time2);
                time2.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v159;
                time2.var8 = 0;
                double v32 = (*(double (**)(void))(**((void **)this + 230) + 1328))(*((void *)this + 230));
                long long v135 = 0uLL;
                double v136 = 0.0;
                if (v33)
                {
                  CMTime var0 = (CMTime)time1.var0;
                  OZCamera::cameraAtTime(v33, &var0);
                }
                *(void *)&v133[40] = 0x3FF0000000000000;
                *(void *)double v133 = 0x3FF0000000000000;
                *(void *)&v130[40] = 0x3FF0000000000000;
                *(void *)long long v130 = 0x3FF0000000000000;
                memset(&v130[8], 0, 32);
                long long v131 = 0u;
                long long v132 = 0u;
                memset(&v133[8], 0, 32);
                (*(void (**)(void *, unsigned char *, OZRenderState *))(*v11 + 1256))(v11, v130, &time1);
                PCMatrix44Tmpl<double>::transform<double>((double *)v130, (double *)&v135, (double *)&v135);
                *(void *)&v129[40] = 0x3FF0000000000000;
                *(void *)long long v129 = 0x3FF0000000000000;
                *(void *)&v126[40] = 0x3FF0000000000000;
                *(void *)int32x4_t v126 = 0x3FF0000000000000;
                memset(&v126[8], 0, 32);
                long long v127 = 0u;
                long long v128 = 0u;
                memset(&v129[8], 0, 32);
                CMTime v34 = *(const void **)(*((void *)this + 230) + 960);
                if (v34
                {
                  (*(void (**)(void *, unsigned char *, OZRenderState *))(*(void *)v35 + 1256))(v35, v126, &time2);
                  double v36 = v142[0];
                }
                else
                {
                  double v36 = v32 * v142[0];
                  v142[0] = v32 * v142[0];
                }
                long long v122 = v128;
                long long v123 = *(_OWORD *)v129;
                long long v124 = *(_OWORD *)&v129[16];
                long long v125 = *(_OWORD *)&v129[32];
                long long v118 = *(_OWORD *)v126;
                long long v119 = *(_OWORD *)&v126[16];
                long long v120 = *(_OWORD *)&v126[32];
                long long v121 = v127;
                PCMatrix44Tmpl<double>::rightTranslate((double *)&v118, v36, v142[1], v142[2]);
                PCMatrix44Tmpl<double>::rightRotate((double *)&v118, 4, v30, v29, v31);
                v117[4] = v122;
                v117[5] = v123;
                v117[6] = v124;
                v117[7] = v125;
                v117[0] = v118;
                v117[1] = v119;
                v117[2] = v120;
                v117[3] = v121;
                PCMatrix44Tmpl<double>::invert((double *)v117, (double *)v117, 0.0);
                PCMatrix44Tmpl<double>::transform<double>((double *)v117, (double *)&v135, (double *)&v135);
                long long v113 = v122;
                long long v114 = v123;
                long long v115 = v124;
                long long v116 = v125;
                long long v109 = v118;
                long long v110 = v119;
                long long v111 = v120;
                long long v112 = v121;
                if (!v13)
                {
                  long long v169 = v132;
                  *(_OWORD *)int8x16_t v170 = *(_OWORD *)v133;
                  *(_OWORD *)&v170[16] = *(_OWORD *)&v133[16];
                  *(_OWORD *)&v170[32] = *(_OWORD *)&v133[32];
                  *(_OWORD *)float32x4_t v167 = *(_OWORD *)v130;
                  *(_OWORD *)&v167[16] = *(_OWORD *)&v130[16];
                  *(_OWORD *)&v167[32] = *(_OWORD *)&v130[32];
                  long long v168 = v131;
                  PCMatrix44Tmpl<double>::invert((double *)v167, (double *)v167, 0.0);
                  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v109, (double *)v167);
                }
                memset(v108, 0, sizeof(v108));
                int v37 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1432), &v159, 0.0);
                double v89 = v22;
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1688), &v159, 0.0)) {
                  double v38 = -1.0;
                }
                else {
                  double v38 = 1.0;
                }
                v108[v37] = v38;
                long long v106 = v135;
                double v107 = v136;
                double v39 = sqrt(*(double *)&v135 * *(double *)&v135+ *((double *)&v135 + 1) * *((double *)&v135 + 1)+ v107 * v107);
                if (v39 <= -0.000000100000001 || v39 >= 0.000000100000001)
                {
                  *(double *)&long long v106 = *(double *)&v135 / v39;
                  *((double *)&v106 + OZLinkBehavior::clearAll(this, 1) = *((double *)&v135 + 1) / v39;
                  double v107 = v136 / v39;
                }
                double v103 = 1.0;
                long long v104 = 0uLL;
                double v105 = 0.0;
                v102[0] = 1.0;
                memset(&v102[1], 0, 24);
                PCQuat<double>::setRotation(&v103, v108, (double *)&v106);
                double v93 = v30;
                double v94 = v29;
                double v95 = v23;
                slerp<double>(v102, &v103, &v143, (uint64_t)v167);
                int v40 = 0;
                if (v37 == 2) {
                  uint64_t v41 = 1;
                }
                else {
                  uint64_t v41 = 2;
                }
                *(void *)&long long v161 = 0;
                *((void *)&v160 + OZLinkBehavior::clearAll(this, 1) = 0;
                *((void *)&v160 + v4OZLinkBehavior::clearAll(this, 1) = 0x3FF0000000000000;
                double v103 = *(double *)v167;
                long long v104 = *(_OWORD *)&v167[8];
                double v105 = *(double *)&v167[24];
                *(void *)&long long v160 = 0;
                double v96 = 0.0;
                double v97 = 0.0;
                double v98 = 0.0;
                *(&v96 + v37) = v38;
                double v42 = sqrt(v96 * v96 + v97 * v97 + v98 * v98);
                if (v42 < 0.000000100000001 && v42 > -0.000000100000001) {
                  double v42 = 1.0;
                }
                double v44 = v96 / v42;
                double v45 = v97 / v42;
                double v46 = v98 / v42;
                double v47 = -3.40282347e38;
                double v48 = -3.40282347e38;
                do
                {
                  long long v100 = v160;
                  double v101 = *(double *)&v161;
                  __double2 v49 = __sincos_stret((((double)v40 + (double)v40) / 2880.0 + -1.0) * 3.14159265 * 0.5);
                  *(double *)&v167[16] = v49.__cosval * *((double *)&v104 + 1)
                                       + v103 * (v49.__sinval * v45)
                                       + v105 * (v49.__sinval * v44)
                                       - *(double *)&v104 * (v49.__sinval * v46);
                  *(double *)&v167[24] = *(double *)&v104 * (v49.__sinval * v45)
                                       - *((double *)&v104 + 1) * (v49.__sinval * v44)
                                       + v49.__cosval * v105
                                       + v103 * (v49.__sinval * v46);
                  *(double *)&v167[8] = v49.__cosval * *(double *)&v104
                                      + v103 * (v49.__sinval * v44)
                                      + *((double *)&v104 + 1) * (v49.__sinval * v46)
                                      - v105 * (v49.__sinval * v45);
                  *(double *)float32x4_t v167 = v49.__cosval * v103
                                  - (v105 * (v49.__sinval * v46)
                                   + *(double *)&v104 * (v49.__sinval * v44)
                                   + *((double *)&v104 + 1) * (v49.__sinval * v45));
                  PCQuat<double>::transform<double>((double *)v167, (double *)&v100);
                  long long v50 = v100;
                  double v51 = *(double *)&v100 * *(double *)&v111
                      + *((double *)&v100 + 1) * *((double *)&v111 + 1)
                      + v101 * *(double *)&v112;
                  *(double *)&long long v100 = *(double *)&v100 * *(double *)&v109
                                   + *((double *)&v100 + 1) * *((double *)&v109 + 1)
                                   + v101 * *(double *)&v110;
                  *((double *)&v100 + OZLinkBehavior::clearAll(this, 1) = v51;
                  double v101 = *(double *)&v50 * *(double *)&v113
                       + *((double *)&v50 + 1) * *((double *)&v113 + 1)
                       + v101 * *(double *)&v114;
                  if (*((double *)&v100 + v41) > v48)
                  {
                    double v48 = *((double *)&v100 + v41);
                    double v47 = (((double)v40 + (double)v40) / 2880.0 + -1.0) * 3.14159265;
                  }
                  ++v40;
                }
                while (v40 != 2880);
                __double2 v52 = __sincos_stret(v47 * 0.5);
                double v90 = v52.__cosval * v103
                    - (v105 * (v52.__sinval * v46)
                     + *(double *)&v104 * (v52.__sinval * v44)
                     + *((double *)&v104 + 1) * (v52.__sinval * v45));
                double v91 = v52.__cosval * *(double *)&v104
                    + v103 * (v52.__sinval * v44)
                    + *((double *)&v104 + 1) * (v52.__sinval * v46)
                    - v105 * (v52.__sinval * v45);
                double v53 = *(double *)&v104 * (v52.__sinval * v45)
                    - *((double *)&v104 + 1) * (v52.__sinval * v44)
                    + v52.__cosval * v105
                    + v103 * (v52.__sinval * v46);
                *((double *)&v104 + OZLinkBehavior::clearAll(this, 1) = v52.__cosval * *((double *)&v104 + 1)
                                       + v103 * (v52.__sinval * v45)
                                       + v105 * (v52.__sinval * v44)
                                       - *(double *)&v104 * (v52.__sinval * v46);
                double v92 = *((double *)&v104 + 1);
                double v105 = v53;
                double v103 = v90;
                *(double *)&long long v104 = v91;
                long long v100 = 0uLL;
                double v101 = 0.0;
                __double2 v54 = __sincos_stret(v93 * 0.5);
                double v55 = v54.__sinval * 0.0;
                __double2 v56 = __sincos_stret(v94 * 0.5);
                double v57 = v56.__sinval * 0.0;
                __double2 v58 = __sincos_stret(v31 * 0.5);
                double v59 = v54.__cosval * v56.__cosval - (v55 * v57 + v55 * v56.__sinval + v54.__sinval * v57);
                double v60 = v54.__sinval * v56.__cosval + v54.__cosval * v57 + v55 * v56.__sinval - v55 * v57;
                double v61 = v55 * v56.__cosval + v54.__cosval * v56.__sinval + v54.__sinval * v57 - v55 * v57;
                double v62 = v55 * v57 - v54.__sinval * v56.__sinval + v55 * v56.__cosval + v54.__cosval * v57;
                double v63 = v58.__sinval * 0.0 * v60;
                double v64 = v58.__sinval * 0.0 * v61;
                double v65 = v58.__cosval * v59 - (v58.__sinval * v62 + v63 + v64);
                double v66 = v58.__sinval * 0.0 * v59;
                double v67 = v58.__cosval * v62 + v58.__sinval * v59;
                double v68 = v58.__sinval * 0.0 * v62;
                double v69 = v58.__sinval * v61 - v68 + v58.__cosval * v60 + v66;
                double v70 = v68 - v58.__sinval * v60 + v58.__cosval * v61 + v66;
                double v71 = v63 - v64 + v67;
                double v72 = v65 * v90 - (v71 * v53 + v69 * v91 + v70 * v92);
                double v73 = v65 * v91 + v69 * v90;
                double v74 = v65 * v92 + v70 * v90;
                double v75 = v65 * v53 + v71 * v90;
                double v76 = v70 * v53 - v71 * v92;
                double v77 = v71 * v91 - v69 * v53;
                double v78 = v69 * v92 - v70 * v91;
                double v79 = v76 + v73;
                double v80 = v77 + v74;
                double v81 = v78 + v75;
                double v82 = sqrt(v72 * v72 + v81 * v81 + v79 * v79 + v80 * v80);
                if (v82 == 0.0)
                {
                  double v97 = 0.0;
                  double v98 = 0.0;
                  double v99 = 0.0;
                  double v83 = 1.0;
                }
                else
                {
                  double v97 = v79 / v82;
                  double v98 = v80 / v82;
                  double v99 = v81 / v82;
                  double v83 = v72 / v82;
                }
                double v96 = v83;
                *(void *)&v170[40] = 0x3FF0000000000000;
                *(void *)int8x16_t v170 = 0x3FF0000000000000;
                *(void *)&v167[40] = 0x3FF0000000000000;
                *(void *)float32x4_t v167 = 0x3FF0000000000000;
                memset(&v167[8], 0, 32);
                long long v168 = 0u;
                long long v169 = 0u;
                memset(&v170[8], 0, 32);
                PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)v167, &v96);
                long long v162 = 0u;
                long long v161 = 0u;
                long long v160 = 0u;
                long long v164 = 0u;
                long long v165 = 0u;
                uint64_t v166 = 0;
                int v163 = 4;
                PCMatrix44Tmpl<double>::getTransformation((long long *)v167, (uint64_t)&v160);
                uint64_t v84 = 0;
                long long v100 = v164;
                double v101 = *(double *)&v165;
                do
                {
                  *(double *)((char *)&v100 + v84 * 8) = *(double *)((char *)&v100 + v84 * 8)
                                                       + (double)(int)vcvtmd_s64_f64((*(double *)&v140[v84]- *(double *)((char *)&v100 + v84 * 8))/ 6.28318531+ 0.5+ 0.0000001)* 6.28318531;
                  ++v84;
                }
                while (v84 != 3);
                double v85 = *((double *)&v100 + v37);
                if (v85 < 0.01 && v85 > -0.01) {
                  double v85 = 0.0;
                }
                *((double *)&v100 + v37) = v85;
                if (*(double *)&v135 * *(double *)&v135 + *((double *)&v135 + 1) * *((double *)&v135 + 1) + v136 * v136 >= 0.001)
                {
                  *(double *)&v167[8] = v89;
                  *(void *)float32x4_t v167 = &unk_1F117F260;
                  *(_OWORD *)&v167[16] = v100;
                  *(double *)&v167[32] = v101;
                  OZValueCache<OZPointAtCacheItem>::add((uint64_t)this + 1848, (uint64_t)v167);
                  *((double *)this + 25OZLinkBehavior::clearAll(this, 1) = v101;
                  *(_OWORD *)((char *)this + 199OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v100;
                }
                else
                {
                  double v101 = *((double *)this + 251);
                  long long v100 = *(_OWORD *)((char *)this + 1992);
                }
                if (a2 == 1)
                {
                  double v87 = *((double *)&v100 + 1);
                }
                else if (a2)
                {
                  double v87 = v101;
                }
                else
                {
                  double v87 = *(double *)&v100;
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                return v95 + v87;
              }
            }
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B7D8FB84(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x788]);
  uint64_t v2 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZPointAtCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  double v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == a1 + 8)
    {
      uint64_t v9 = 0;
      goto LABEL_7;
    }
    double v8 = *(double *)(i + 24);
    if (v8 == a3) {
      break;
    }
  }
  *(double *)(a2 + 8) = v8;
  long long v10 = *(_OWORD *)(i + 32);
  *(void *)(a2 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(void *)(i + 48);
  *(_OWORD *)(a2 + 16) = v10;
  uint64_t v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZPointAtCacheItem>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    std::list<OZProjectedBoundsCacheItem>::pop_front(a1 + 8);
  }
  std::list<OZPointAtCacheItem>::push_back((uint64_t *)(a1 + 8), a2);
  PCSharedMutex::unlock(v4);
}

void sub_1B7D8FD14(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZPointAtBehavior::solveNode(OZPointAtBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZPointAtBehavior::solveNode((OZPointAtBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZPointAtCacheItem::~OZPointAtCacheItem(OZPointAtCacheItem *this)
{
}

uint64_t OZValueCache<OZPointAtCacheItem>::OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F117F298;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B7E782B0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B7D8FDA4(_Unwind_Exception *a1)
{
  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZPointAtCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZPointAtCacheItem>::~OZValueCache(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZValueCache<OZPointAtCacheItem>::~OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F117F298;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

__n128 std::list<OZPointAtCacheItem>::push_back(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x38uLL);
  *((void *)v4 + OZLinkBehavior::clearAll(this, 1) = a1;
  *((void *)v4 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117F260;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 40) = result;
  uint64_t v6 = *a1;
  *(void *)unint64_t v4 = *a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void OZRandomizeBehavior::OZRandomizeBehavior(OZRandomizeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZWriggleBehavior::OZWriggleBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F117F2C8;
  *(void *)(v5 + 16) = &unk_1F117F608;
  *(void *)(v5 + 48) = &unk_1F117F860;
  *(void *)(v5 + 336) = &unk_1F117F8B8;
  *(void *)(v5 + 536) = &unk_1F117F8E0;
  uint64_t v6 = (OZChannelBase *)(v5 + 1704);
  OZChannelBase::setFlag((OZChannelBase *)(v5 + 1704), 2, 0);
  OZChannelBase::saveStateAsDefault(v6);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 992), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 992), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1552), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1552), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1552), 20.0);
}

void sub_1B7D8FFE4(_Unwind_Exception *a1)
{
  OZWriggleBehavior::~OZWriggleBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior::OZRandomizeBehavior(OZRandomizeBehavior *this, const OZRandomizeBehavior *a2, char a3)
{
  OZWriggleBehavior::OZWriggleBehavior(this, a2, a3);
  *double v3 = &unk_1F117F2C8;
  v3[2] = &unk_1F117F608;
  v3[6] = &unk_1F117F860;
  v3[42] = &unk_1F117F8B8;
  v3[67] = &unk_1F117F8E0;
}

void non-virtual thunk to'OZRandomizeBehavior::~OZRandomizeBehavior(OZRandomizeBehavior *this)
{
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 48));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 336));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZRandomizeBehavior::~OZRandomizeBehavior(OZRandomizeBehavior *this)
{
  OZWriggleBehavior::~OZWriggleBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZRampBehavior::OZRampBehavior(OZRampBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F117F958;
  float64x2_t v5[2] = &unk_1F117FC98;
  v5[6] = &unk_1F117FEF0;
  v5[42] = &unk_1F117FF48;
  v5[67] = &unk_1F117FF70;
  PCURL::PCURL((PCURL *)&v6, @"Ramp Behavior Start Value");
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Ramp Behavior End Value");
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Ramp Behavior Curvature");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Ramp Behavior Start Frame Offset");
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1320), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Ramp Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1472), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1320), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1320));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1472), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1472));
}

void sub_1B7D904E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRampBehavior::OZRampBehavior(OZRampBehavior *this, const OZRampBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117F958;
  *(void *)(v5 + 16) = &unk_1F117FC98;
  *(void *)(v5 + 48) = &unk_1F117FEF0;
  *(void *)(v5 + 336) = &unk_1F117FF48;
  *(void *)(v5 + 536) = &unk_1F117FF70;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((void *)this + 127) = &unk_1F1100CF0;
  *((void *)this + 129) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((void *)this + 165) = &unk_1F1100CF0;
  *((void *)this + 167) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  *((void *)this + 184) = &unk_1F1100CF0;
  *((void *)this + 186) = &unk_1F1101050;
}

void sub_1B7D907CC(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannelPercent::~OZChannelPercent(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRampBehavior::~OZRampBehavior(OZRampBehavior *this)
{
  *(void *)this = &unk_1F117F958;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117FC98;
  *((void *)this + 6) = &unk_1F117FEF0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F117FF48;
  *((void *)this + 67) = &unk_1F117FF70;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRampBehavior::~OZRampBehavior(OZRampBehavior *this)
{
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRampBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);

  return OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
}

double OZRampBehavior::solveNode(OZRampBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v31, 0, sizeof(v31));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v31, a4);
  CMTime v30 = v31;
  if ((*(unsigned int (**)(OZRampBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v30, 0, 1, 1)&& (*(uint64_t (**)(OZRampBehavior *))(*(void *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, OZRampBehavior *))(*(void *)this + 608))(v29, this);
    memset(&v28, 0, sizeof(v28));
    __n128 v32 = *(__n128 *)&v29[0].value;
    CMTimeEpoch epoch = v29[0].epoch;
    int v7 = (OZScene *)(*(uint64_t (**)(OZRampBehavior *))(*(void *)this + 336))(this);
    double v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), MEMORY[0x1E4F1FA48], 0.0);
    OZScene::getTimeForFrame(v7, v9, &v26);
    *(__n128 *)&time1.CMTimeValue value = v32;
    time1.CMTimeEpoch epoch = epoch;
    *(__n128 *)&time2.CMTimeValue value = v26;
    time2.CMTimeEpoch epoch = v27;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
    __n128 v26 = 0uLL;
    CMTimeEpoch v27 = 0;
    OZBehavior::getFrameDuration(this, &v23);
    CMTime time1 = v29[0];
    CMTime time2 = v29[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v32);
    *(__n128 *)&time1.CMTimeValue value = v32;
    time1.CMTimeEpoch epoch = epoch;
    *(__n128 *)&time2.CMTimeValue value = v23;
    time2.CMTimeEpoch epoch = v24;
    v10.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
    double v11 = (OZScene *)(*(uint64_t (**)(OZRampBehavior *, __n128))(*(void *)this + 336))(this, v10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1472), v8, 0.0);
    OZScene::getTimeForFrame(v11, v12, &v32);
    CMTime time1 = v25;
    *(__n128 *)&time2.CMTimeValue value = v32;
    time2.CMTimeEpoch epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
    CMTime time1 = v31;
    CMTime time2 = v28;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      double v13 = (OZChannel *)((char *)this + 864);
      goto LABEL_7;
    }
    CMTime time1 = v31;
    *(__n128 *)&time2.CMTimeValue value = v26;
    time2.CMTimeEpoch epoch = v27;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      double v13 = (OZChannel *)((char *)this + 1016);
LABEL_7:
      OZChannel::getValueAsDouble(v13, MEMORY[0x1E4F1FA48], 0.0);
      return v14 + a5;
    }
    __n128 v32 = 0uLL;
    CMTimeEpoch epoch = 0;
    *(__n128 *)&time1.CMTimeValue value = v26;
    time1.CMTimeEpoch epoch = v27;
    CMTime time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
    *(__n128 *)&time1.CMTimeValue value = v32;
    time1.CMTimeEpoch epoch = epoch;
    CMTime time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), v8, 0.0);
      double v17 = v16;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), v8, 0.0);
      double v19 = v18 - v17;
      CMTime time1 = v31;
      CMTime time2 = v28;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
      operator/((long long *)&v25.value, (uint64_t)&v32, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), v8, 0.0);
      return v17 + v19 * (Seconds * (1.0 - v21) + v21 * ((1.0 - cos(Seconds * 3.14159265)) * 0.5)) + a5;
    }
    else
    {
      return 0.0;
    }
  }
  return a5;
}

double non-virtual thunk to'OZRampBehavior::solveNode(OZRampBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZRampBehavior::solveNode((OZRampBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZRampBehavior::didSetChannelInfo(OZRampBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  PCString v6 = (OZChannel *)((char *)this + 864);
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
  int v7 = (OZChannel *)((char *)this + 1016);
  OZChannel::setInfo((OZChannel *)((char *)this + 1016), a2);
  double v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (double v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((void *)this + 124) + 40) + -57.2957795) >= 0.0000001) {
      double v10 = 100.0;
    }
    else {
      double v10 = 6.28318531;
    }
  }
  else
  {
    double v10 = v9 - v8;
    double v11 = *((double *)this + 79);
    if (v11 != 3.40282347e38)
    {
      double v12 = v10 / v11;
      double v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble(v6, MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setValue(v6, v13, v12 * v14, 0);
      OZChannel::getValueAsDouble(v7, v13, 0.0);
      OZChannel::setValue(v7, v13, v12 * v15, 0);
    }
  }
  double v19 = 0.0;
  (*(void (**)(void, double *))(**((void **)a3->var14 + 1) + 264))(*((void *)a3->var14 + 1), &v19);
  double v16 = v19;
  double v19 = 0.0;
  (*(void (**)(void))(**((void **)a3->var14 + 1) + 256))();
  if (v19 == 3.40282347e38 || v16 == -3.40282347e38) {
    double v18 = 3.40282347e38;
  }
  else {
    double v18 = v19 - v16;
  }
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, v10);
  OZChannel::setMin(v6, -v18);
  OZChannel::setMax(v6, v18);
  OZChannel::setSliderMin(v7, 0.0);
  OZChannel::setSliderMax(v7, v10);
  OZChannel::setMin(v7, -v18);
  OZChannel::setMax(v7, v18);
}

void OZRateBehavior::OZRateBehavior(OZRateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F117FFE8;
  float64x2_t v5[2] = &unk_1F1180328;
  v5[6] = &unk_1F1180580;
  v5[42] = &unk_1F11805D8;
  v5[67] = &unk_1F1180600;
  PCURL::PCURL((PCURL *)&v6, @"Rate Behavior Rate");
  OZChannelDouble::OZChannelDouble((OZRateBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Rate Behavior Curvature");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1016), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Rate Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZRateBehavior *)((char *)this + 1168), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1168), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1168));
}

void sub_1B7D91450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRateBehavior::OZRateBehavior(OZRateBehavior *this, const OZRateBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F117FFE8;
  *(void *)(v5 + 16) = &unk_1F1180328;
  *(void *)(v5 + 48) = &unk_1F1180580;
  *(void *)(v5 + 336) = &unk_1F11805D8;
  *(void *)(v5 + 536) = &unk_1F1180600;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  *((void *)this + 1OZFxFilter::updateChannelsForMisbehavingPlugin(this - 46) = &unk_1F1100CF0;
  *((void *)this + 148) = &unk_1F1101050;
}

void sub_1B7D91654(_Unwind_Exception *a1)
{
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRateBehavior::~OZRateBehavior(OZRateBehavior *this)
{
  *(void *)this = &unk_1F117FFE8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1180328;
  *((void *)this + 6) = &unk_1F1180580;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11805D8;
  *((void *)this + 67) = &unk_1F1180600;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1168));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZRateBehavior::~OZRateBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRateBehavior::~OZRateBehavior(OZRateBehavior *this)
{
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 48));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 336));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRateBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);

  return OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
}

Float64 OZRateBehavior::solveNode(OZRateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v23, a4);
  CMTime v22 = v23;
  if ((*(unsigned int (**)(OZRateBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v22, 0, 1, 1))
  {
    memset(&v21, 0, sizeof(v21));
    __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v21);
    (*(void (**)(CMTime *__return_ptr, OZRateBehavior *, __n128))(*(void *)this + 608))(v20, this, FrameDuration);
    memset(&v19, 0, sizeof(v19));
    CMTime time2 = v20[0];
    CMTime time1 = v23;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    memset(&v18, 0, sizeof(v18));
    CMTime v17 = v20[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v21, &v16, v8);
    CMTime time1 = v17;
    CMTime time2 = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    CMTime time1 = v18;
    CMTime time2 = v21;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      CMTime time1 = v19;
      CMTime time2 = v18;
      if (CMTimeCompare(&time1, &time2) >= 1) {
        CMTime v19 = v18;
      }
      OZBehavior::getFrameDuration(this, (__n128 *)&v16);
      CMTime time1 = v18;
      CMTime time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
      operator/((long long *)&v19.value, (uint64_t)&v17, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), MEMORY[0x1E4F1FA48], 0.0);
      double v11 = v10 * ((1.0 - cos(Seconds * 3.14159265)) * 0.5) + Seconds * (1.0 - v10);
      if ((~v18.flags & 0x11) == 0)
      {
        CMTimeMake(&time1, 10, 1);
        CMTime v18 = time1;
      }
      memset(&time1, 0, sizeof(time1));
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E4F1FA48], 0.0);
      operator*(&v18, &time1, v12);
      operator*(&time1, &v14, v11);
      return CMTimeGetSeconds(&v14) + a5;
    }
  }
  return a5;
}

Float64 non-virtual thunk to'OZRateBehavior::solveNode(OZRateBehavior *this, unsigned int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZRateBehavior::solveNode((OZRateBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZRateBehavior::didSetChannelInfo(OZRateBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
}

void OZRepelFromBehavior::OZRepelFromBehavior(OZRepelFromBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F1180678;
  *(void *)(v5 + 16) = &unk_1F1180960;
  *(void *)(v5 + 48) = &unk_1F1180BB8;
  *(void *)(v5 + 336) = &unk_1F1180C10;
  PCString v6 = (OZChannel *)(v5 + 664);
  OZChannel::setScale((OZChannel *)(v5 + 664), -*(double *)(*(void *)(v5 + 792) + 40));
  uint64_t v7 = *((void *)this + 99);
  double v8 = *(double *)(v7 + 16);
  OZChannel::setSliderMin(v6, -*(double *)(v7 + 8));
  OZChannel::setSliderMax(v6, -v8);
  OZChannel::getValueAsDouble(v6, MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setDefaultValue(v6, -v9);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1224), 100.0);
}

void sub_1B7D91E14(_Unwind_Exception *a1)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior::OZRepelFromBehavior(OZRepelFromBehavior *this, OZRepelFromBehavior *a2, char a3)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *double v3 = &unk_1F1180678;
  v3[2] = &unk_1F1180960;
  v3[6] = &unk_1F1180BB8;
  v3[42] = &unk_1F1180C10;
}

void non-virtual thunk to'OZRepelFromBehavior::~OZRepelFromBehavior(OZRepelFromBehavior *this)
{
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZRepelFromBehavior::~OZRepelFromBehavior(OZRepelFromBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZRepelorBehavior::OZRepelorBehavior(OZRepelorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F1180C38;
  *(void *)(v5 + 16) = &unk_1F1180F28;
  *(void *)(v5 + 48) = &unk_1F1181180;
  *(void *)(v5 + 336) = &unk_1F11811D8;
  PCString v6 = (OZChannel *)(v5 + 792);
  OZChannel::setScale((OZChannel *)(v5 + 792), -*(double *)(*(void *)(v5 + 920) + 40));
  uint64_t v7 = *((void *)this + 115);
  double v8 = *(double *)(v7 + 16);
  OZChannel::setSliderMin(v6, -*(double *)(v7 + 8));
  OZChannel::setSliderMax(v6, -v8);
  OZChannel::getValueAsDouble(v6, MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setDefaultValue(v6, -v9);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 100.0);
}

void sub_1B7D920F0(_Unwind_Exception *a1)
{
  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior::OZRepelorBehavior(OZRepelorBehavior *this, OZRepelorBehavior *a2, char a3)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *double v3 = &unk_1F1180C38;
  v3[2] = &unk_1F1180F28;
  v3[6] = &unk_1F1181180;
  v3[42] = &unk_1F11811D8;
}

void non-virtual thunk to'OZRepelorBehavior::~OZRepelorBehavior(OZRepelorBehavior *this)
{
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void OZRepelorBehavior::~OZRepelorBehavior(OZRepelorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZReverseBehavior::OZReverseBehavior(OZReverseBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *unint64_t v4 = &unk_1F1181230;
  v4[2] = &unk_1F1181570;
  v4[6] = &unk_1F11817C8;
  v4[42] = &unk_1F1181820;
  v4[67] = &unk_1F1181848;
}

void OZReverseBehavior::OZReverseBehavior(OZReverseBehavior *this, const OZReverseBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *double v3 = &unk_1F1181230;
  v3[2] = &unk_1F1181570;
  v3[6] = &unk_1F11817C8;
  v3[42] = &unk_1F1181820;
  v3[67] = &unk_1F1181848;
}

void non-virtual thunk to'OZReverseBehavior::~OZReverseBehavior(OZReverseBehavior *this)
{
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZReverseBehavior::~OZReverseBehavior(OZReverseBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZReverseBehavior::solveNode(OZReverseBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double non-virtual thunk to'OZReverseBehavior::solveNode(OZReverseBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

uint64_t OZReverseBehavior::getNeededTime@<X0>(OZReverseBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(v14);
  uint64_t result = (*(uint64_t (**)(OZReverseBehavior *, void *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, v14, 0, 1, 1);
  if (result)
  {
    (*(void (**)(CMTime *__return_ptr, OZReverseBehavior *))(*(void *)this + 608))(v13, this);
    memset(&v12, 0, sizeof(v12));
    (*(void (**)(__n128 *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v10);
    CMTime time2 = v13[0];
    *(__n128 *)&time1.CMTimeValue value = v10;
    time1.CMTimeEpoch epoch = v11;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    __n128 v10 = 0uLL;
    CMTimeEpoch v11 = 0;
    OZBehavior::getFrameDuration(this, &v10);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    CMTime time1 = v13[1];
    *(__n128 *)&time2.CMTimeValue value = v10;
    time2.CMTimeEpoch epoch = v11;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
    CMTime time1 = v8;
    CMTime time2 = v12;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
    CMTime time2 = v13[0];
    CMTime time1 = v9;
    PC_CMTimeSaferAdd(&time1, &time2, a3);
    CMTime time2 = v13[0];
    CMTime time1 = *(CMTime *)a3;
    if (CMTimeCompare(&time1, &time2) < 0) {
      *(CMTime *)a3 = v13[0];
    }
    uint64_t result = (uint64_t)(*(void *(**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32)
                                                                      + 328))(&time1);
    *(_OWORD *)a3 = *(_OWORD *)&time1.value;
    CMTimeEpoch epoch = time1.epoch;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
  }
  *(void *)(a3 + 16) = epoch;
  return result;
}

uint64_t non-virtual thunk to'OZReverseBehavior::getNeededTime@<X0>(OZReverseBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  return OZReverseBehavior::getNeededTime((OZReverseBehavior *)((char *)this - 536), a2, a3);
}

void OZRotationalDragBehavior::OZRotationalDragBehavior(OZRotationalDragBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F11818C0;
  float64x2_t v5[2] = &unk_1F1181BA8;
  v5[6] = &unk_1F1181E00;
  v5[42] = &unk_1F1181E58;
  PCURL::PCURL((PCURL *)&v6, @"Rotational Drag Behavior Drag Coefficient");
  OZChannelDouble::OZChannelDouble((OZRotationalDragBehavior *)((char *)this + 504), 0.5, &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setMin((OZChannel *)((char *)this + 504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 504), 2.0);
}

void sub_1B7D9296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior::OZRotationalDragBehavior(OZRotationalDragBehavior *this, OZRotationalDragBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11818C0;
  *(void *)(v5 + 16) = &unk_1F1181BA8;
  *(void *)(v5 + 48) = &unk_1F1181E00;
  *(void *)(v5 + 336) = &unk_1F1181E58;
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 63) = &unk_1F1100CF0;
  *((void *)this + 65) = &unk_1F1101050;
}

void sub_1B7D92A98(_Unwind_Exception *a1)
{
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior::~OZRotationalDragBehavior(OZRotationalDragBehavior *this)
{
  *(void *)this = &unk_1F11818C0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1181BA8;
  *((void *)this + 6) = &unk_1F1181E00;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1181E58;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZRotationalDragBehavior::~OZRotationalDragBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZRotationalDragBehavior::~OZRotationalDragBehavior(OZRotationalDragBehavior *this)
{
}

{
  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 48));
}

{
  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZRotationalDragBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
}

double OZRotationalDragBehavior::accumForces(OZRotationalDragBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), (const CMTime *)((char *)a2 + 176), 0.0);
  double v5 = v4 * *((double *)a2 + 12);
  *(float64x2_t *)((char *)a2 + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = vsubq_f64(*(float64x2_t *)((char *)a2 + 152), vmulq_n_f64(*((float64x2_t *)a2 + 5), v4));
  double result = *((double *)a2 + 21) - v5;
  *((double *)a2 + 2OZLinkBehavior::clearAll(this, 1) = result;
  return result;
}

double OZRotationalDragBehavior::accumForces(OZRotationalDragBehavior *this, const CMTime *a2, OZTransformNode *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), a2 + 1, 0.0);
  CMTimeValue value = a2->value;
  uint64_t v6 = *(void *)&a2->timescale;
  while (value != v6)
  {
    double v7 = result * *(double *)(value + 96);
    *(float64x2_t *)(value + 15OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = vsubq_f64(*(float64x2_t *)(value + 152), vmulq_n_f64(*(float64x2_t *)(value + 80), result));
    *(double *)(value + 168) = *(double *)(value + 168) - v7;
    value += 248;
  }
  return result;
}

void OZSnapAlignBehavior::OZSnapAlignBehavior(OZSnapAlignBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1181E98;
  float64x2_t v5[2] = &unk_1F1182160;
  v5[6] = &unk_1F11823B8;
  v5[42] = &unk_1F1182410;
  v5[67] = &unk_1F1182438;
  PCURL::PCURL((PCURL *)&v7, @"Snap Align Behavior Rotation Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Snap Align Behavior Rotation Axis");
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 544), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Snap Align Behavior Object Axis Enum");
  PCURL::PCURL((PCURL *)&v6, @"Snap Align Behavior Object Axis");
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Snap Align Behavior Invert Axis");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1056), &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Oscillate Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZSnapAlignBehavior *)((char *)this + 1208), &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 544), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 800), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1208), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1208), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1208));
}

void sub_1B7D93064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelBehavior::~OZChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior::OZSnapAlignBehavior(OZSnapAlignBehavior *this, const OZSnapAlignBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1181E98;
  *(void *)(v5 + 16) = &unk_1F1182160;
  *(void *)(v5 + 48) = &unk_1F11823B8;
  *(void *)(v5 + 336) = &unk_1F1182410;
  *(void *)(v5 + 536) = &unk_1F1182438;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 544), (const OZSnapAlignBehavior *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800), (const OZSnapAlignBehavior *)((char *)a2 + 800), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1056), (const OZChannelBase *)((char *)a2 + 1056), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1208), (const OZChannelBase *)((char *)a2 + 1208), v6);
  *((void *)this + 15OZLinkBehavior::clearAll(this, 1) = &unk_1F1100CF0;
  *((void *)this + 153) = &unk_1F1101050;
}

void sub_1B7D93280(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior::~OZSnapAlignBehavior(OZSnapAlignBehavior *this)
{
  *(void *)this = &unk_1F1181E98;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1182160;
  *((void *)this + 6) = &unk_1F11823B8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1182410;
  *((void *)this + 67) = &unk_1F1182438;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1056));
  OZChannelEnum::~OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800));
  OZChannelEnum::~OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 544));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZSnapAlignBehavior::~OZSnapAlignBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZSnapAlignBehavior::~OZSnapAlignBehavior(OZSnapAlignBehavior *this)
{
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 48));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 336));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSnapAlignBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 544, (uint64_t)v4 + 544);
  OZChannelBase::operator=(a1 + 800, (uint64_t)v5 + 800);
  OZChannelBase::operator=(a1 + 1056, (uint64_t)v5 + 1056);

  return OZChannelBase::operator=(a1 + 1208, (uint64_t)v5 + 1208);
}

OZChannelBehavior *OZSnapAlignBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  uint64_t v2 = this;
  if (lpsrc)
  {
    *((void *)v2 + 170) = this;
    if (this)
    {
      OZChannelBehavior::didAddToNode(v2, lpsrc);
      OZChannelBehavior::setAffectedChannel(v2, (OZChannelBase *)(*((void *)v2 + 170) + 2104));
      operator new();
    }
  }
  else
  {
    *((void *)this + 170) = 0;
  }
  return this;
}

void sub_1B7D9374C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZSnapAlignBehavior::solveHelper(OZSnapAlignBehavior *this, int a2, CMTime *a3, double a4)
{
  double v97 = 0.0;
  double v98 = 0.0;
  double v99 = 0.0;
  double v94 = 0.0;
  double v95 = 0.0;
  double v96 = 0.0;
  double v91 = 0.0;
  double v92 = 0.0;
  double v93 = 0.0;
  CMTime v90 = *a3;
  OZTransformNode::getTranslation(*((void *)this + 170), &v97, &v90);
  OZBehavior::getFrameDuration(this, (__n128 *)&v88);
  operator*(&v88, (CMTime *)&v89, 0.5);
  v87.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)*a3;
  long long v79 = *(_OWORD *)&v89.var0;
  *(void *)&long long v80 = v89.var3;
  PC_CMTimeSaferAdd((CMTime *)&v87, (CMTime *)&v79, (uint64_t)&v100);
  CMTime v90 = v100;
  OZTransformNode::getTranslation(*((void *)this + 170), &v94, &v90);
  OZBehavior::getFrameDuration(this, (__n128 *)&v89);
  v87.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)*a3;
  long long v79 = *(_OWORD *)&v89.var0;
  *(void *)&long long v80 = v89.var3;
  PC_CMTimeSaferAdd((CMTime *)&v87, (CMTime *)&v79, (uint64_t)&v100);
  CMTime v90 = v100;
  OZTransformNode::getTranslation(*((void *)this + 170), &v91, &v90);
  CMTime v8 = *(const void **)(*((void *)this + 170) + 960);
  if (v8)
  {
    if (v9)
    {
      __n128 v10 = v9;
      OZRenderState::OZRenderState(&v87);
      *(_OWORD *)&v87.var0.CMTime var0 = *(_OWORD *)&a3->value;
      CMTimeEpoch epoch = a3->epoch;
      v87.unsigned int var3 = 1.0;
      v87.var0.unsigned int var3 = epoch;
      (*(void (**)(void *, double *, OZRenderState *))(*(void *)v10 + 1232))(v10, &v97, &v87);
      OZBehavior::getFrameDuration(this, (__n128 *)&v86);
      operator*(&v86, &v88, 0.5);
      long long v79 = *(_OWORD *)&a3->value;
      *(void *)&long long v80 = a3->epoch;
      CMTime v100 = v88;
      PC_CMTimeSaferAdd((CMTime *)&v79, &v100, (uint64_t)&v89);
      v87.CMTime var0 = v89;
      (*(void (**)(void *, double *, OZRenderState *))(*(void *)v10 + 1232))(v10, &v94, &v87);
      OZBehavior::getFrameDuration(this, (__n128 *)&v88);
      long long v79 = *(_OWORD *)&a3->value;
      *(void *)&long long v80 = a3->epoch;
      CMTime v100 = v88;
      PC_CMTimeSaferAdd((CMTime *)&v79, &v100, (uint64_t)&v89);
      v87.CMTime var0 = v89;
      (*(void (**)(void *, double *, OZRenderState *))(*(void *)v10 + 1232))(v10, &v91, &v87);
    }
  }
  double v12 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 544), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt != 3)
  {
    int v24 = ValueAsInt;
    int v25 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 800), a3, 0.0);
    if (a2 != 3 && v24 == 2) {
      return v12;
    }
    if (v24)
    {
      if (v24 != 2)
      {
        if (v24 != 1)
        {
          char v28 = 0;
          double v26 = 0.0;
          double v27 = 0.0;
          goto LABEL_58;
        }
        if (a2 == 1) {
          return -1.57079633;
        }
        if (a2 != 2)
        {
          double v26 = v91 - v97;
          double v27 = -(v93 - v99);
          char v28 = 1;
LABEL_58:
          if (fabs(v26) < 0.01)
          {
            double v12 = a4;
            if (fabs(v27) < 0.01) {
              return v12;
            }
          }
          double v72 = atan2(v27, v26);
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1056), a3, 0.0))
          {
            double v73 = 3.14159265;
            if (v72 <= 3.14159265) {
              double v73 = -3.14159265;
            }
            double v72 = v72 + v73;
          }
          if (v24)
          {
            if (v28)
            {
              if (!v25) {
                goto LABEL_73;
              }
LABEL_70:
              double v74 = -3.14159265;
LABEL_74:
              double v72 = v72 + v74;
            }
          }
          else if (v25)
          {
            double v72 = v72 + 4.71238898;
            if (v28) {
              goto LABEL_70;
            }
          }
          else
          {
            double v72 = v72 + 0.0;
            if (v28)
            {
LABEL_73:
              double v74 = -1.57079633;
              goto LABEL_74;
            }
          }
          if (v25) {
            BOOL v75 = v24 == 2;
          }
          else {
            BOOL v75 = 0;
          }
          if (v75) {
            return v72 + -1.57079633;
          }
          else {
            return v72;
          }
        }
        return 1.57079633;
      }
      char v28 = 0;
      double v29 = v92;
      double v30 = v98;
      double v26 = v91 - v97;
    }
    else
    {
      if (a2 == 1) {
        return v12;
      }
      if (a2 == 2) {
        return 1.57079633;
      }
      char v28 = 0;
      double v29 = v92;
      double v30 = v98;
      double v26 = -(v93 - v99);
    }
    double v27 = v29 - v30;
    goto LABEL_58;
  }
  double v14 = v94 - v97;
  double v15 = v95 - v98;
  double v16 = v96 - v99;
  double v17 = v91 - v94;
  double v18 = v92 - v95;
  double v19 = v93 - v96;
  double v20 = v14 * v14 + v15 * v15 + v16 * v16;
  if (v20 <= -0.0000001)
  {
    double v21 = v94 - v97;
    double v22 = v95 - v98;
    double v23 = v96 - v99;
  }
  else
  {
    double v21 = v94 - v97;
    double v22 = v95 - v98;
    double v23 = v96 - v99;
    if (v20 < 0.0000001)
    {
      double v20 = v17 * v17 + v18 * v18 + v19 * v19;
      if (v20 <= -0.0000001)
      {
        double v21 = v91 - v94;
        double v22 = v92 - v95;
        double v23 = v93 - v96;
      }
      else
      {
        double v21 = v91 - v94;
        double v22 = v92 - v95;
        double v23 = v93 - v96;
        if (v20 < 0.0000001) {
          return a4;
        }
      }
    }
  }
  double v31 = v17 - v14;
  double v32 = v18 - v15;
  double v33 = v19 - v16;
  double v34 = sqrt(v20);
  if (v34 <= -0.000000100000001 || v34 >= 0.000000100000001)
  {
    double v21 = v21 / v34;
    double v22 = v22 / v34;
    double v23 = v23 / v34;
  }
  float v35 = v21;
  double v36 = v35;
  float v37 = v22;
  double v38 = v37;
  float v39 = v23;
  double v40 = v39;
  double v41 = v33 * v38 - v32 * v39;
  double v42 = v31 * v40 - v33 * v36;
  double v43 = v32 * v36 - v31 * v38;
  double v44 = v43 * v43 + v41 * v41 + v42 * v42;
  BOOL v45 = v44 > -0.0000001;
  BOOL v46 = v44 < 0.0000001;
  if (v45 && v46)
  {
    double v41 = 0.0;
    double v47 = 1.0;
  }
  else
  {
    double v47 = v42;
  }
  if (v45 && v46) {
    double v48 = 0.0;
  }
  else {
    double v48 = v43;
  }
  double v49 = sqrt(v48 * v48 + v41 * v41 + v47 * v47);
  double v77 = a4;
  if (v49 <= -0.000000100000001 || v49 >= 0.000000100000001)
  {
    double v41 = v41 / v49;
    double v47 = v47 / v49;
    double v48 = v48 / v49;
  }
  double v50 = v47 * v40 - v48 * v38;
  double v51 = v48 * v36 - v41 * v40;
  double v52 = v41 * v38 - v47 * v36;
  double v53 = sqrt(v52 * v52 + v50 * v50 + v51 * v51);
  int64_t v78 = *(void *)&v41;
  if (v53 <= -0.000000100000001 || v53 >= 0.000000100000001)
  {
    double v50 = v50 / v53;
    double v51 = v51 / v53;
    double v52 = v52 / v53;
  }
  int v54 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 800), a3, 0.0);
  double v55 = -v50;
  double v56 = -v51;
  double v57 = -v52;
  if (v54 == 1)
  {
    double v50 = v36;
    double v51 = v38;
    double v52 = v40;
    double v36 = v55;
    double v38 = v56;
    double v40 = v57;
  }
  int v58 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1056), a3, 0.0);
  double v59 = -v36;
  double v60 = -v50;
  if (!v58)
  {
    double v60 = v50;
    double v59 = v36;
  }
  *(double *)&v87.var0.CMTime var0 = v59;
  *(double *)&v87.var0.var1 = v60;
  double v61 = -v38;
  double v62 = -v51;
  if (!v58)
  {
    double v62 = v51;
    double v61 = v38;
  }
  v87.var2 = v61;
  v87.unsigned int var3 = v62;
  double v63 = -v40;
  double v64 = -v52;
  if (!v58)
  {
    double v64 = v52;
    double v63 = v40;
  }
  *(double *)&v87.var6 = v63;
  v87.var7.var0[0][0] = v64;
  v87.var0.unsigned int var3 = v78;
  *(double *)&v87.var4 = v47;
  v87.var7.var0[0][1] = v48;
  v87.var1 = 0.0;
  v87.var5 = 0;
  memset(&v87.var7.var0[0][2], 0, 32);
  v87.var7.var0[1][2] = 1.0;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v85 = 0;
  int v82 = 4;
  BOOL Transformation = PCMatrix44Tmpl<double>::getTransformation((long long *)&v87.var0.var0, (uint64_t)&v79);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZSnapAlignBehavior.cpp", 202, v66, v67, v68, v69, v70);
  switch(a2)
  {
    case 1:
      double v71 = (double *)&v83;
      break;
    case 3:
      double v71 = (double *)&v84;
      break;
    case 2:
      double v71 = (double *)&v83 + 1;
      break;
    default:
      return v77;
  }
  return *v71;
}

double OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, const CMTime *a3, __n128 a4, double a5)
{
  memset(&v18, 0, sizeof(v18));
  (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 336))(&v18, a4);
  CMTime v17 = v18;
  if ((*(unsigned int (**)(OZSnapAlignBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                 + 296))(this, &v17, 0, 1, 1))
  {
    memset(&v16, 0, sizeof(v16));
    __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v16);
    (*(void (**)(CMTime *__return_ptr, OZSnapAlignBehavior *, __n128))(*(void *)this + 608))(v15, this, FrameDuration);
    memset(&v14, 0, sizeof(v14));
    CMTime time1 = v15[0];
    CMTime time2 = v15[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    CMTime time1 = v19;
    CMTime time2 = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1208), &v18, 0.0);
    operator*(&v16, &v19, v9);
    *(__n128 *)&time1.CMTimeValue value = v12;
    time1.CMTimeEpoch epoch = v13;
    CMTime time2 = v19;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    OZBehavior::getFrameDuration(this, &v12);
    CMTime time1 = v18;
    *(__n128 *)&time2.CMTimeValue value = v12;
    time2.CMTimeEpoch epoch = v13;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    CMTime time1 = v19;
    CMTime time2 = v14;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = v14;
      CMTime time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
      CMTime v18 = v19;
    }
    CMTime v11 = v18;
    return OZSnapAlignBehavior::solveHelper(this, a2, &v11, a5);
  }
  return a5;
}

double non-virtual thunk to'OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, const CMTime *a3, __n128 a4, double a5)
{
  return OZSnapAlignBehavior::solveNode((OZSnapAlignBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

double OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, OZCurveNodeParam *a3)
{
  uint64_t v6 = *((void *)a3 + 19);
  uint64_t v7 = *((void *)a3 + 10);
  CMTime v22 = *(CMTime *)((unsigned char *)a3 + 5);
  memset(&v21, 0, sizeof(v21));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v21);
  memset(&v20, 0, sizeof(v20));
  __n128 FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v20);
  (*(void (**)(CMTime *__return_ptr, OZSnapAlignBehavior *, __n128))(*(void *)this + 608))(v19, this, FrameDuration);
  memset(&v18, 0, sizeof(v18));
  CMTime time1 = v19[0];
  CMTime time2 = v19[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
  CMTime time1 = v23;
  CMTime time2 = v20;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1208), MEMORY[0x1E4F1FA48], 0.0);
  operator*(&v20, &v23, v9);
  CMTime time1 = v17;
  CMTime time2 = v23;
  double result = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v11 = 0;
    do
    {
      CMTime v16 = v21;
      if ((*(unsigned int (**)(OZSnapAlignBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v16, 0, 1, 1))
      {
        CMTime v23 = v21;
        OZBehavior::getFrameDuration(this, &v14);
        CMTime time1 = v23;
        *(__n128 *)&time2.CMTimeValue value = v14;
        time2.CMTimeEpoch epoch = v15;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
        CMTime time1 = v17;
        CMTime time2 = v18;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CMTime time1 = v18;
          CMTime time2 = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        }
        CMTime v13 = v23;
        double v12 = OZSnapAlignBehavior::solveHelper(this, a2, &v13, *(double *)(v7 + 8 * v11));
      }
      else
      {
        double v12 = *(double *)(v7 + 8 * v11);
      }
      *(double *)(v6 + 8 * v1OZLinkBehavior::clearAll(this, 1) = v12;
      CMTime time2 = v21;
      CMTime v23 = v22;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&time1);
      double result = *(double *)&time1.value;
      CMTime v21 = time1;
      ++v11;
    }
    while (v11 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, OZCurveNodeParam *a3)
{
  return OZSnapAlignBehavior::solveNode((OZSnapAlignBehavior *)((char *)this - 536), a2, a3);
}

void OZSpinBehavior::OZSpinBehavior(OZSpinBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F11824D0;
  float64x2_t v5[2] = &unk_1F11827B8;
  v5[6] = &unk_1F1182A10;
  v5[42] = &unk_1F1182A68;
  PCURL::PCURL((PCURL *)&v7, @"Spin Behavior Increment Type Enum");
  PCURL::PCURL((PCURL *)&v6, @"Spin Behavior Increment Type");
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 504), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Spin Behavior Agular Velocity");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 5, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Spin Behavior Final Angle");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 6, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Sping Behavior Axis Preset Enum");
  PCURL::PCURL((PCURL *)&v6, @"Sping Behavior Axis Preset");
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 1064), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Spin Behavior Axis Latitude");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1320), &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Spin Behavior Axis Longitude");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1472), &v7, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setKeyframable((OZChannel *)this + 5, 0);
  OZChannel::setKeyframable((OZChannel *)this + 6, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
}

void sub_1B7D94918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZSpinBehavior::OZSpinBehavior(OZSpinBehavior *this, OZSpinBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11824D0;
  *(void *)(v5 + 16) = &unk_1F11827B8;
  *(void *)(v5 + 48) = &unk_1F1182A10;
  *(void *)(v5 + 336) = &unk_1F1182A68;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZSpinBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)this + 5, (const OZChannelBase *)((char *)a2 + 760), v6);
  *((void *)this + 95) = &unk_1F11010C0;
  *((void *)this + 97) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)this + 6, (const OZChannelBase *)((char *)a2 + 912), v6);
  *((void *)this + 114) = &unk_1F11010C0;
  *((void *)this + 116) = &unk_1F1101420;
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 1064), (OZSpinBehavior *)((char *)a2 + 1064), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((void *)this + 165) = &unk_1F11010C0;
  *((void *)this + 167) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  *((void *)this + 184) = &unk_1F11010C0;
  *((void *)this + 186) = &unk_1F1101420;
}

void sub_1B7D94C38(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7D94C94()
{
}

void OZSpinBehavior::~OZSpinBehavior(OZSpinBehavior *this)
{
  *(void *)this = &unk_1F11824D0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11827B8;
  *((void *)this + 6) = &unk_1F1182A10;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1182A68;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelEnum::~OZChannelEnum((OZSpinBehavior *)((char *)this + 1064));
  OZChannel::~OZChannel((OZChannel *)this + 6);
  OZChannel::~OZChannel((OZChannel *)this + 5);
  OZChannelEnum::~OZChannelEnum((OZSpinBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZSpinBehavior::~OZSpinBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZSpinBehavior::~OZSpinBehavior(OZSpinBehavior *this)
{
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 48));
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSpinBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 760, (uint64_t)v5 + 760);
  OZChannelBase::operator=(a1 + 912, (uint64_t)v5 + 912);
  OZChannelBase::operator=(a1 + 1064, (uint64_t)v5 + 1064);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);

  return OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
}

BOOL OZSpinBehavior::isRebuildUIChannel(OZSpinBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 504) == a2 || (OZChannelBase *)((char *)this + 1064) == a2;
}

OZChannelBase *OZSpinBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  double result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = (int)result;
    char v6 = 0;
    LOBYTE(v7) = 1;
    CMTime v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      Float64 v9 = *(const void **)(v4 + 16);
      if (v9) {
      else
      }
        __n128 v10 = 0;
      int v7 = (v5 == OZChannel::getValueAsInt((OZChannel *)(v10 + 504), v8, 0.0)) & v7;
      double result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)v10 + 7, v8, 0.0);
      v6 |= result == 3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2);
    for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      double v12 = *(const void **)(i + 16);
      if (v12) {
      else
      }
        CMTime v13 = 0;
      __n128 v14 = (OZChannelBase *)(v13 + 760);
      if (v7)
      {
        if (!v5)
        {
          OZChannelBase::resetFlag(v14, 0x400000, 1);
          OZChannelBase::setFlag((OZChannelBase *)(v13 + 912), 0x400000, 1);
          goto LABEL_16;
        }
        OZChannelBase::setFlag(v14, 0x400000, 1);
        CMTimeEpoch v15 = (OZChannelBase *)(v13 + 912);
      }
      else
      {
        OZChannelBase::resetFlag(v14, 0x400000, 1);
        CMTimeEpoch v15 = (OZChannelBase *)(v13 + 912);
      }
      OZChannelBase::resetFlag(v15, 0x400000, 1);
LABEL_16:
      CMTime v16 = (OZChannelBase *)(v13 + 1320);
      CMTime v17 = (OZChannelBase *)(v13 + 1472);
      if (v6)
      {
        OZChannelBase::resetFlag(v16, 0x400000, 1);
        double result = OZChannelBase::resetFlag(v17, 0x400000, 1);
      }
      else
      {
        OZChannelBase::setFlag(v16, 0x400000, 1);
        double result = OZChannelBase::setFlag(v17, 0x400000, 1);
      }
    }
  }
  return result;
}

double OZSpinBehavior::calcRotSpeed(OZSpinBehavior *this)
{
  double v2 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), MEMORY[0x1E4F1FA48], 0.0);
  if (v3 == 0.0)
  {
    uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)this + 5, v4, 0.0);
  }
  else
  {
    __n128 v14 = 0uLL;
    CMTimeEpoch v15 = 0;
    uint64_t v6 = (*(uint64_t (**)(OZSpinBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v14);
    (*(void (**)(void *__return_ptr, OZSpinBehavior *, __n128))(*(void *)this + 608))(v12, this, FrameDuration);
    CMTime v17 = v13;
    *(__n128 *)&v16.CMTimeValue value = v14;
    v16.CMTimeEpoch epoch = v15;
    PC_CMTimeSaferSubtract(&v17, &v16, (uint64_t)&v11);
    double Seconds = CMTimeGetSeconds(&v11);
    if (Seconds > 0.0)
    {
      double v9 = Seconds;
      OZChannel::getValueAsDouble((OZChannel *)this + 6, MEMORY[0x1E4F1FA48], 0.0);
      return v10 / v9;
    }
    return v2;
  }
  return result;
}

void OZSpinBehavior::calcAxis(uint64_t a1, double *a2)
{
  switch(OZChannel::getValueAsInt((OZChannel *)(a1 + 1064), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      a2[1] = 0.0;
      a2[2] = 0.0;
      *a2 = 1.0;
      break;
    case 1u:
      *(_OWORD *)a2 = xmmword_1B7E733E0;
      a2[2] = 0.0;
      break;
    case 2u:
      *a2 = 0.0;
      a2[1] = 0.0;
      a2[2] = 1.0;
      break;
    case 3u:
      uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 1320), MEMORY[0x1E4F1FA48], 0.0);
      __double2 v6 = __sincos_stret(v5);
      a2[1] = v6.__sinval;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 1472), v4, 0.0);
      __double2 v8 = __sincos_stret(v7);
      a2[2] = v6.__cosval * v8.__cosval;
      *a2 = v6.__cosval * v8.__sinval;
      break;
    default:
      return;
  }
}

void OZSpinBehavior::accumForces(OZSpinBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  memset(&v20, 0, sizeof(v20));
  uint64_t v5 = (*(uint64_t (**)(OZSpinBehavior *, OZSimulationState *, OZTransformNode *))(*(void *)this + 336))(this, a2, a3);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v20);
  memset(&v19, 0, sizeof(v19));
  operator*(&v20, &v19, 0.001);
  (*(void (**)(float64x2_t *__return_ptr, OZSpinBehavior *))(*(void *)this + 608))(&v16, this);
  *(float64x2_t *)&time1.CMTimeValue value = v16;
  *(double *)&time1.CMTimeEpoch epoch = v17;
  CMTime time2 = *(CMTime *)((char *)a2 + 176);
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(float64x2_t *)&time1.CMTimeValue value = v16;
    *(double *)&time1.CMTimeEpoch epoch = v17;
    CMTime time2 = v18;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
    CMTime time1 = v23;
    CMTime time2 = v20;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
    CMTime time1 = *(CMTime *)((char *)a2 + 176);
    CMTime time2 = v22;
    if (CMTimeCompare(&time1, &time2) <= 0 || (v18.flags & 1) != 0 && (v18.flags & 0x10) != 0)
    {
      (*(void (**)(CMTime *__return_ptr, OZSpinBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime time2 = *(CMTime *)((char *)a2 + 176);
      CMTime v23 = v19;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v13);
      CMTime time2 = time1;
      CMTime v23 = v13;
      if (CMTimeCompare(&time2, &v23) > 0) {
        goto LABEL_6;
      }
      CMTime time2 = time1;
      CMTime v23 = v15;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v22);
      CMTime time2 = v22;
      CMTime v23 = v20;
      PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v21);
      CMTime time2 = v13;
      CMTime v23 = v21;
      if (CMTimeCompare(&time2, &v23) > 0 && ((v15.flags & 1) == 0 || (v15.flags & 0x10) == 0))
      {
LABEL_6:
        float64x2_t v16 = 0uLL;
        double v17 = 0.0;
        OZSpinBehavior::calcAxis((uint64_t)this, v16.f64);
        double v6 = OZSpinBehavior::calcRotSpeed(this);
        double v7 = v6 * v17;
        int8x16_t v8 = (int8x16_t)vmulq_n_f64(v16, v6);
        float64x2_t v9 = (float64x2_t)vextq_s8(v8, v8, 8uLL);
        v10.f64[0] = v9.f64[0];
        v10.f64[1] = v7;
        float64x2_t v11 = vsubq_f64(*((float64x2_t *)a2 + 7), v10);
        v9.f64[0] = v7;
        float64x2_t v12 = vsubq_f64(*((float64x2_t *)a2 + 6), v9);
        *((float64x2_t *)a2 + 5) = vsubq_f64(*((float64x2_t *)a2 + 5), (float64x2_t)v8);
        *((float64x2_t *)a2 + 6) = v12;
        *((float64x2_t *)a2 + 7) = v11;
      }
    }
  }
}

float64x2_t OZSpinBehavior::accumInitialValues(OZSpinBehavior *this, float64x2_t *a2, OZTransformNode *a3)
{
  float64x2_t v13 = 0uLL;
  double v14 = 0.0;
  OZSpinBehavior::calcAxis((uint64_t)this, v13.f64);
  double v5 = OZSpinBehavior::calcRotSpeed(this);
  double v6 = v5 * v14;
  int8x16_t v7 = (int8x16_t)vmulq_n_f64(v13, v5);
  float64x2_t v8 = (float64x2_t)vextq_s8(v7, v7, 8uLL);
  v9.f64[0] = v8.f64[0];
  v9.f64[1] = v6;
  float64x2_t v10 = vaddq_f64(v9, a2[7]);
  float64x2_t result = vaddq_f64((float64x2_t)v7, a2[5]);
  v8.f64[0] = v6;
  float64x2_t v12 = vaddq_f64(v8, a2[6]);
  a2[5] = result;
  a2[6] = v12;
  a2[7] = v10;
  return result;
}

void OZSpringBehavior::OZSpringBehavior(OZSpringBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1182AA8;
  float64x2_t v5[2] = &unk_1F1182D90;
  v5[6] = &unk_1F1182FE8;
  v5[42] = &unk_1F1183040;
  PCURL::PCURL((PCURL *)&v6, @"Spring Behavior Attracted To Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZSpringBehavior *)((char *)this + 504), &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Spring Behavior Spring Constant");
  OZChannelDouble::OZChannelDouble((OZSpringBehavior *)((char *)this + 664), 0.1, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Spring Behavior Relaxed Length");
  OZChannelDouble::OZChannelDouble((OZSpringBehavior *)((char *)this + 816), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Spring Behavior Repel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 968), &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Spring Behavior Active Axes");
  OZChannelBool3D::OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120), 1, 1, 0, &v6, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 3u);
  PCString::~PCString(&v6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 504, 1);
}

void sub_1B7D95A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelBool3D::~OZChannelBool3D(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7D95A80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D95A90()
{
}

void sub_1B7D95A98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D95AA8()
{
}

void sub_1B7D95AB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7D95AC0()
{
}

void OZSpringBehavior::OZSpringBehavior(OZSpringBehavior *this, OZSpringBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1182AA8;
  *(void *)(v5 + 16) = &unk_1F1182D90;
  *(void *)(v5 + 48) = &unk_1F1182FE8;
  *(void *)(v5 + 336) = &unk_1F1183040;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 504), (OZSpringBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 664), (const OZChannelBase *)((char *)a2 + 664), v6);
  *((void *)this + 83) = &unk_1F1100CF0;
  *((void *)this + 85) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 816), (const OZChannelBase *)((char *)a2 + 816), v6);
  *((void *)this + 10OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 104) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 968), (const OZChannelBase *)((char *)a2 + 968), v6);
  OZChannelBool3D::OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120), (OZSpringBehavior *)((char *)a2 + 1120), v6);
}

void sub_1B7D95C68(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSpringBehavior::~OZSpringBehavior(OZSpringBehavior *this)
{
  *(void *)this = &unk_1F1182AA8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1182D90;
  *((void *)this + 6) = &unk_1F1182FE8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1183040;
  OZChannelBool3D::~OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 968));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 816));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 664));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZSpringBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZSpringBehavior::~OZSpringBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZSpringBehavior::~OZSpringBehavior(OZSpringBehavior *this)
{
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 48));
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSpringBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 664, (uint64_t)v5 + 664);
  OZChannelBase::operator=(a1 + 816, (uint64_t)v5 + 816);

  return OZChannelBase::operator=(a1 + 968, (uint64_t)v5 + 968);
}

uint64_t OZSpringBehavior::accumForces(OZSpringBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
  if (result)
  {
    float64x2_t v23 = 0uLL;
    double v24 = 0.0;
    OZSimulationState::getNodePosition((uint64_t)a2, (CMTime *)((char *)a2 + 176), result, (OZSimulationState *)a3, &v23);
    double v7 = *((double *)a2 + 2) - v24;
    float64x2_t v19 = vsubq_f64(*(float64x2_t *)a2, v23);
    double v8 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v7 * v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), (const CMTime *)((char *)a2 + 176), 0.0);
    double v10 = v8 - v9;
    CMTime v22 = *(CMTime *)((char *)a2 + 176);
    if (v8 - v9 >= 0.0
      || (uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 968), &v22, 0.0), result))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v22, 0.0);
      double v12 = -(v11 * v10);
      double v18 = v12;
      BOOL v13 = v8 >= 0.000000100000001 || v8 <= -0.000000100000001;
      double v14 = 1.0;
      if (v13) {
        double v14 = v8;
      }
      uint64_t v17 = *(void *)&v14;
      double v15 = v7 / v14 * v12;
      float64x2_t v20 = 0uLL;
      double v21 = 0.0;
      uint64_t result = OZChannelBool3D::getValue((uint64_t)this + 1120, (const CMTime *)((char *)a2 + 176), v20.f64, 0.0);
      double v16 = v15 * v21;
      *((float64x2_t *)a2 + 8) = vaddq_f64(vmulq_f64(vmulq_n_f64(vdivq_f64(v19, (float64x2_t)vdupq_lane_s64(v17, 0)), v18), v20), *((float64x2_t *)a2 + 8));
      *((double *)a2 + 18) = v16 + *((double *)a2 + 18);
    }
  }
  return result;
}

const void *OZSpringBehavior::getReferencedNode(OZSpringBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
}

void OZStopBehavior::OZStopBehavior(OZStopBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F1183080;
  v4[2] = &unk_1F11833C0;
  v4[6] = &unk_1F1183618;
  v4[42] = &unk_1F1183670;
  v4[67] = &unk_1F1183698;
}

void OZStopBehavior::OZStopBehavior(OZStopBehavior *this, const OZStopBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *double v3 = &unk_1F1183080;
  v3[2] = &unk_1F11833C0;
  v3[6] = &unk_1F1183618;
  v3[42] = &unk_1F1183670;
  v3[67] = &unk_1F1183698;
}

void non-virtual thunk to'OZStopBehavior::~OZStopBehavior(OZStopBehavior *this)
{
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZStopBehavior::~OZStopBehavior(OZStopBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double non-virtual thunk to'OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  uint64_t v5 = *((void *)a3 + 19);
  uint64_t v6 = *((void *)a3 + 10);
  CMTime v17 = *(CMTime *)((unsigned char *)a3 + 5);
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v16);
  (*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(void *)this + 608))(&time1, this);
  CMTime v15 = time1;
  int v7 = (*(uint64_t (**)(char *, void, uint64_t))(*((void *)this + 2) + 24))((char *)this + 16, 0, 1);
  if (*((_DWORD *)a3 + 36))
  {
    int v9 = v7;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = v10;
      if (v9)
      {
        CMTime v14 = v16;
        int v12 = (*(uint64_t (**)(OZStopBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this + 296))(this, &v14, 1, 1, 1);
        unint64_t v11 = v10;
        if (v12)
        {
          CMTime time1 = v16;
          CMTime time2 = v15;
          int32_t v13 = CMTimeCompare(&time1, &time2);
          unint64_t v11 = v10;
          if (v13 >= 1) {
            unint64_t v11 = (*((_DWORD *)a3 + 18) - 1);
          }
        }
      }
      *(void *)(v5 + 8 * v10) = *(void *)(v6 + 8 * v11);
      CMTime time2 = v16;
      CMTime v19 = v17;
      PC_CMTimeSaferAdd(&time2, &v19, (uint64_t)&time1);
      double result = *(double *)&time1.value;
      CMTime v16 = time1;
      ++v10;
    }
    while (v10 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double non-virtual thunk to'OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZStopBehavior::solveNode((OZStopBehavior *)((char *)this - 536), a2, a3);
}

__n128 OZStopBehavior::getNeededTime@<Q0>(OZStopBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v10, 0, sizeof(v10));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v10);
  CMTime v9 = v10;
  if (((*(uint64_t (**)(OZStopBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v9, 0, 1, 1) & 1) != 0&& ((*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(void *)this + 608))(&time1, this), epoch = time1.epoch, CMTime v8 = time1, time1 = v10, *(_OWORD *)&time2.value = *(_OWORD *)&v8.value, time2.epoch = epoch, CMTimeCompare(&time1, &time2) > 0))
  {
    (*(void (**)(void, CMTime *))(**(void **)(*((void *)this + 47) + 32) + 328))(*(void *)(*((void *)this + 47) + 32), &v8);
  }
  else
  {
    __n128 result = *(__n128 *)&a2->value;
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(void *)(a3 + 16) = a2->epoch;
  }
  return result;
}

double non-virtual thunk to'OZStopBehavior::getNeededTime@<D0>(OZStopBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&double result = OZStopBehavior::getNeededTime((OZStopBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

OZCurveNodeParam *OZStopBehavior::getNeededRange(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  int v5 = (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((void *)a3 + 5) = *((void *)a3 + 14);
  *((_OWORD *)a3 + 3) = *(_OWORD *)((char *)a3 + 120);
  *((void *)a3 + 8) = *((void *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((unsigned char *)a3 + 88) = 0;
  *((void *)a3 + 10) = *((void *)a3 + 19);
  if (v5)
  {
    uint64_t v6 = (_OWORD *)((char *)a3 + 96);
    int v7 = (_OWORD *)((char *)a3 + 24);
    CMTime v8 = (_OWORD *)((char *)a3 + 120);
    __n128 v19 = 0uLL;
    CMTime v9 = (_OWORD *)((char *)a3 + 48);
    CMTimeEpoch v20 = 0;
    __n128 FrameDuration = OZBehavior::getFrameDuration(this, &v19);
    memset(&v18, 0, sizeof(v18));
    (*(void (**)(CMTime *__return_ptr, OZStopBehavior *, __n128))(*(void *)this + 608))(v21, this, FrameDuration);
    CMTime time1 = v21[0];
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 328))(&v18);
    (*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(void *)this + 608))(v21, this);
    memset(&v17, 0, sizeof(v17));
    CMTime time1 = v21[0];
    CMTime time2 = v21[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
    CMTime time1 = v22;
    *(__n128 *)&time2.CMTimeValue value = v19;
    time2.CMTimeEpoch epoch = v20;
    v11.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    (*(void (**)(CMTime *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 328))(&v17, v11);
    memset(&v22, 0, sizeof(v22));
    operator*(*((_DWORD *)a3 + 36) - 1, (CMTime *)a3 + 5, &v16);
    CMTime time1 = *(CMTime *)((unsigned char *)a3 + 4);
    CMTime time2 = v16;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
    CMTime time1 = v17;
    CMTime time2 = v22;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      _OWORD *v7 = *v6;
      *((void *)a3 + 5) = *((void *)a3 + 14);
      _OWORD *v9 = *v8;
      *((void *)a3 + 8) = *((void *)a3 + 17);
      *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
      *((unsigned char *)a3 + 88) = 0;
      *((void *)a3 + 10) = *((void *)a3 + 19);
    }
    else
    {
      *(_OWORD *)&time1.CMTimeValue value = *v6;
      time1.CMTimeEpoch epoch = *((void *)a3 + 14);
      CMTime time2 = v18;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        _OWORD *v7 = *(_OWORD *)&v18.value;
        *((void *)a3 + 5) = v18.epoch;
        *((_DWORD *)a3 + 18) = 1;
        _OWORD *v9 = *v8;
        *((void *)a3 + 8) = *((void *)a3 + 17);
        goto LABEL_8;
      }
      _OWORD *v7 = *v6;
      *((void *)a3 + 5) = *((void *)a3 + 14);
      _OWORD *v9 = *v8;
      *((void *)a3 + 8) = *((void *)a3 + 17);
      *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
      *((unsigned char *)a3 + 88) = 0;
      *((void *)a3 + 10) = *((void *)a3 + 19);
      CMTime time1 = v18;
      *(_OWORD *)&time2.CMTimeValue value = *v6;
      time2.CMTimeEpoch epoch = *((void *)a3 + 14);
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
      CMTime time1 = v14;
      *(__n128 *)&time2.CMTimeValue value = v19;
      time2.CMTimeEpoch epoch = v20;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
      operator/((long long *)&v16.value, (uint64_t)a3 + 120, (uint64_t)&time);
      unsigned int v12 = vcvtpd_u64_f64(CMTimeGetSeconds(&time));
      if (*((_DWORD *)a3 + 36) > v12)
      {
        *((_DWORD *)a3 + 18) = v12;
LABEL_8:
        operator new[]();
      }
    }
  }
  return a3;
}

OZCurveNodeParam *non-virtual thunk to'OZStopBehavior::getNeededRange(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZStopBehavior::getNeededRange((OZStopBehavior *)((char *)this - 536), a2, a3);
}

void OZThrowBehavior::OZThrowBehavior(OZThrowBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *int v5 = &unk_1F1183710;
  float64x2_t v5[2] = &unk_1F11839F8;
  v5[6] = &unk_1F1183C50;
  v5[42] = &unk_1F1183CA8;
  PCURL::PCURL((PCURL *)&v7, @"Throw Behavior Increment Type Enum");
  PCURL::PCURL((PCURL *)&v6, @"Throw Behavior Increment Type");
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 504), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Throw Behavior Throw Velocity");
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 760), &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Throw Behavior Throw Distance");
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 1352), &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "HUD Scale (Hidden)");
  OZChannelDouble::OZChannelDouble((OZThrowBehavior *)((char *)this + 1944), &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Throw Dimension Type Enum (Hidden)");
  PCString::PCString(&v6, "Throw Dimension Type Enum (Hidden)");
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 2096), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x194u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 760), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 1352), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1944), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2096), 0);
}

void sub_1B7D96EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel3D::~OZChannel3D(v13);
  OZChannel3D::~OZChannel3D(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZThrowBehavior::OZThrowBehavior(OZThrowBehavior *this, OZThrowBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1183710;
  *(void *)(v5 + 16) = &unk_1F11839F8;
  *(void *)(v5 + 48) = &unk_1F1183C50;
  *(void *)(v5 + 336) = &unk_1F1183CA8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZThrowBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 760), (OZThrowBehavior *)((char *)a2 + 760), v6);
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 1352), (OZThrowBehavior *)((char *)a2 + 1352), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1944), (const OZChannelBase *)((char *)a2 + 1944), v6);
  *((void *)this + 243) = &unk_1F1100CF0;
  *((void *)this + 245) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 2096), (OZThrowBehavior *)((char *)a2 + 2096), v6);
}

void sub_1B7D970E8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannel3D::~OZChannel3D(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZThrowBehavior::~OZThrowBehavior(OZThrowBehavior *this)
{
  *(void *)this = &unk_1F1183710;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11839F8;
  *((void *)this + 6) = &unk_1F1183C50;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1183CA8;
  OZChannelEnum::~OZChannelEnum((OZThrowBehavior *)((char *)this + 2096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1944));
  *((void *)this + 169) = &unk_1F1106258;
  *((void *)this + 17OZLinkBehavior::clearAll(this, 1) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1792));
  OZChannel2D::~OZChannel2D((OZThrowBehavior *)((char *)this + 1352));
  *((void *)this + 95) = &unk_1F1106258;
  *((void *)this + 97) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1200));
  OZChannel2D::~OZChannel2D((OZThrowBehavior *)((char *)this + 760));
  OZChannelEnum::~OZChannelEnum((OZThrowBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZThrowBehavior::~OZThrowBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZThrowBehavior::~OZThrowBehavior(OZThrowBehavior *this)
{
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 48));
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZThrowBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelFolder::operator=(a1 + 760);
  OZChannelBase::operator=(a1 + 896, (uint64_t)v5 + 896);
  OZChannelBase::operator=(a1 + 1048, (uint64_t)v5 + 1048);
  OZChannelBase::operator=(a1 + 1200, (uint64_t)v5 + 1200);
  OZChannelFolder::operator=(a1 + 1352);
  OZChannelBase::operator=(a1 + 1488, (uint64_t)v5 + 1488);
  OZChannelBase::operator=(a1 + 1640, (uint64_t)v5 + 1640);
  OZChannelBase::operator=(a1 + 1792, (uint64_t)v5 + 1792);
  OZChannelBase::operator=(a1 + 1944, (uint64_t)v5 + 1944);

  return OZChannelBase::operator=(a1 + 2096, (uint64_t)v5 + 2096);
}

BOOL OZThrowBehavior::isRebuildUIChannel(OZThrowBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 504) == a2;
}

OZChannelBase *OZThrowBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  double result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = (int)result;
    PCString v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      PCString v7 = *(char **)(v4 + 16);
      if (v7) {
      double result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 504), v6, 0.0);
      }
      if (v5 != result) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          CMTime v9 = *(const void **)(i + 16);
          if (v9) {
          else
          }
            CMTime v10 = 0;
          __n128 v11 = (OZChannelBase *)(v10 + 760);
          unsigned int v12 = (OZChannelBase *)(v10 + 1352);
          if (v5)
          {
            OZChannelBase::setFlag(v11, 0x400000, 1);
            double result = OZChannelBase::resetFlag(v12, 0x400000, 1);
          }
          else
          {
            OZChannelBase::resetFlag(v11, 0x400000, 1);
            double result = OZChannelBase::setFlag(v12, 0x400000, 1);
          }
        }
        return result;
      }
    }
    for (uint64_t j = *(void *)(a2 + 8); j != a2; uint64_t j = *(void *)(j + 8))
    {
      CMTime v14 = *(const void **)(j + 16);
      if (v14) {
      else
      }
        CMTime v15 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v15 + 760), 0x400000, 1);
      double result = OZChannelBase::resetFlag((OZChannelBase *)(v15 + 1352), 0x400000, 1);
    }
  }
  return result;
}

void OZThrowBehavior::calcThrowVelocity(uint64_t a1, double *a2)
{
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E4F1FA48], 0.0))
  {
    __n128 v12 = 0uLL;
    CMTimeEpoch v13 = 0;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v12);
    (*(void (**)(void *__return_ptr, uint64_t, __n128))(*(void *)a1 + 608))(v10, a1, FrameDuration);
    CMTime v15 = v11;
    *(__n128 *)&v14.CMTimeValue value = v12;
    v14.CMTimeEpoch epoch = v13;
    PC_CMTimeSaferSubtract(&v15, &v14, (uint64_t)&v9);
    double Seconds = CMTimeGetSeconds(&v9);
    if (Seconds <= 0.0)
    {
      *a2 = 0.0;
      a2[1] = 0.0;
      a2[2] = 0.0;
    }
    else
    {
      double v7 = Seconds;
      OZChannel3D::getValue(a1 + 1352, MEMORY[0x1E4F1FA48], a2, 0.0);
      *(float64x2_t *)a2 = vmulq_n_f64(*(float64x2_t *)a2, 1.0 / v7);
      a2[2] = 1.0 / v7 * a2[2];
    }
  }
  else
  {
    CMTime v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel3D::getValue(a1 + 760, v8, a2, 0.0);
  }
}

void OZThrowBehavior::accumForces(OZThrowBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v5 = (*(uint64_t (**)(OZThrowBehavior *, OZSimulationState *, OZTransformNode *))(*(void *)this + 336))(this, a2, a3);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v13);
  memset(&v12, 0, sizeof(v12));
  operator*(&v13, &v12, 0.001);
  (*(void (**)(float64x2_t *__return_ptr, OZThrowBehavior *))(*(void *)this + 608))(&v9, this);
  *(float64x2_t *)&time1.CMTimeValue value = v9;
  *(double *)&time1.CMTimeEpoch epoch = v10;
  CMTime time2 = *(CMTime *)((char *)a2 + 176);
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(float64x2_t *)&time1.CMTimeValue value = v9;
    *(double *)&time1.CMTimeEpoch epoch = v10;
    CMTime time2 = v11;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
    CMTime time1 = v16;
    CMTime time2 = v13;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
    CMTime time1 = *(CMTime *)((char *)a2 + 176);
    CMTime time2 = v15;
    if (CMTimeCompare(&time1, &time2) <= 0 || (v11.flags & 1) != 0 && (v11.flags & 0x10) != 0)
    {
      (*(void (**)(CMTime *__return_ptr, OZThrowBehavior *))(*(void *)this + 608))(&time1, this);
      CMTime time2 = *(CMTime *)((char *)a2 + 176);
      CMTime v16 = v12;
      PC_CMTimeSaferAdd(&time2, &v16, (uint64_t)&v6);
      CMTime time2 = time1;
      CMTime v16 = v6;
      if (CMTimeCompare(&time2, &v16) > 0) {
        goto LABEL_6;
      }
      CMTime time2 = time1;
      CMTime v16 = v8;
      PC_CMTimeSaferAdd(&time2, &v16, (uint64_t)&v15);
      CMTime time2 = v15;
      CMTime v16 = v13;
      PC_CMTimeSaferSubtract(&time2, &v16, (uint64_t)&v14);
      CMTime time2 = v6;
      CMTime v16 = v14;
      if (CMTimeCompare(&time2, &v16) > 0 && ((v8.flags & 1) == 0 || (v8.flags & 0x10) == 0))
      {
LABEL_6:
        float64x2_t v9 = 0uLL;
        double v10 = 0.0;
        OZThrowBehavior::calcThrowVelocity((uint64_t)this, v9.f64);
        *(float64x2_t *)((char *)a2 + 56) = vsubq_f64(*(float64x2_t *)((char *)a2 + 56), v9);
        *((double *)a2 + 9) = *((double *)a2 + 9) - v10;
      }
    }
  }
}

double OZThrowBehavior::accumInitialValues(OZThrowBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  float64x2_t v5 = 0uLL;
  double v6 = 0.0;
  OZThrowBehavior::calcThrowVelocity((uint64_t)this, v5.f64);
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(v5, *(float64x2_t *)((char *)a2 + 56));
  double result = v6 + *((double *)a2 + 9);
  *((double *)a2 + 9) = result;
  return result;
}

void OZViscousDragBehavior::OZViscousDragBehavior(OZViscousDragBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *float64x2_t v5 = &unk_1F1183CE8;
  float64x2_t v5[2] = &unk_1F1183FD0;
  v5[6] = &unk_1F1184228;
  v5[42] = &unk_1F1184280;
  PCURL::PCURL((PCURL *)&v9, @"Viscous Drag Behavior Coefficient of Drag");
  Instance = (OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *)OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(v6);
  CMTime v8 = (OZChannelInfo *)OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(Instance);
  OZChannel3D::OZChannel3D((OZViscousDragBehavior *)((char *)this + 504), 0.3, 0.3, 0.3, &v9, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Viscous Drag Behavior Active Axes");
  OZChannelBool3D::OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096), 1, 1, 0, &v9, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 3u);
  PCString::~PCString(&v9);
}

void sub_1B7D97D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannel3D::~OZChannel3D(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior::OZViscousDragBehavior(OZViscousDragBehavior *this, OZViscousDragBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1183CE8;
  *(void *)(v5 + 16) = &unk_1F1183FD0;
  *(void *)(v5 + 48) = &unk_1F1184228;
  *(void *)(v5 + 336) = &unk_1F1184280;
  double v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel3D::OZChannel3D((OZChannel3D *)(v5 + 504), (OZViscousDragBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelBool3D::OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096), (OZViscousDragBehavior *)((char *)a2 + 1096), v6);
}

void sub_1B7D97E90(_Unwind_Exception *a1)
{
  OZChannel3D::~OZChannel3D(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior::~OZViscousDragBehavior(OZViscousDragBehavior *this)
{
  *(void *)this = &unk_1F1183CE8;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1183FD0;
  *((void *)this + 6) = &unk_1F1184228;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1184280;
  OZChannelBool3D::~OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096));
  *((void *)this + 63) = &unk_1F1106258;
  *((void *)this + 65) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel2D::~OZChannel2D((OZViscousDragBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZViscousDragBehavior::~OZViscousDragBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZViscousDragBehavior::~OZViscousDragBehavior(OZViscousDragBehavior *this)
{
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 48));
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZViscousDragBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 504);
  OZChannelBase::operator=(a1 + 640, (uint64_t)v5 + 640);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);

  return OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
}

double OZViscousDragBehavior::accumForces(OZViscousDragBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v13 = *(CMTime *)((char *)a2 + 176);
  float64x2_t v11 = 0uLL;
  double v12 = 0.0;
  OZChannel3D::getValue((uint64_t)this + 504, &v13, &v11, 0.0);
  double v5 = v12 * *((double *)a2 + 9);
  float64x2_t v9 = 0uLL;
  double v10 = 0.0;
  float64x2_t v8 = vmulq_f64(v11, *(float64x2_t *)((char *)a2 + 56));
  OZChannelBool3D::getValue((uint64_t)this + 1096, &v13, v9.f64, 0.0);
  double v6 = v5 * v10;
  *((float64x2_t *)a2 + 8) = vsubq_f64(*((float64x2_t *)a2 + 8), vmulq_f64(v8, v9));
  double result = *((double *)a2 + 18) - v6;
  *((double *)a2 + 18) = result;
  return result;
}

uint64_t OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::OZViscousDragBehavior_kChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::OZViscousDragBehavior_kChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::_OZViscousDragBehavior_kChan;
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::_OZViscousDragBehavior_kChan) {
    operator new();
  }
}

void sub_1B7D982F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::OZViscousDragBehavior_kChanImpl(OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *this)
{
}

void sub_1B7D983DC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::OZViscousDragBehavior_kChanInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::OZViscousDragBehavior_kChanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::_OZViscousDragBehavior_kChanInfo;
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::_OZViscousDragBehavior_kChanInfo) {
    operator new();
  }
}

void sub_1B7D984B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::OZViscousDragBehavior_kChanInfo(OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1184338;
  *((void *)this + 10) = &unk_1F1184358;
  return this;
}

void sub_1B7D98588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::OZVortexAroundBehavior(OZVortexAroundBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F11843B0;
  float64x2_t v5[2] = &unk_1F1184698;
  v5[6] = &unk_1F11848F0;
  v5[42] = &unk_1F1184948;
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Pole Axis Enum");
  PCURL::PCURL((PCURL *)&v7, @"Vortex Behavior Pole Axis");
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2120), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  unsigned int v6 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2376), v6, &v8, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Direction Enum");
  PCURL::PCURL((PCURL *)&v7, @"Vortex Behavior Direction");
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528), &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2376), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2376));
}

void sub_1B7D987C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZAttractedToBehavior::~OZAttractedToBehavior(v12);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::OZVortexAroundBehavior(OZVortexAroundBehavior *this, OZVortexAroundBehavior *a2, char a3)
{
  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11843B0;
  *(void *)(v5 + 16) = &unk_1F1184698;
  *(void *)(v5 + 48) = &unk_1F11848F0;
  *(void *)(v5 + 336) = &unk_1F1184948;
  unsigned int v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 2120), (OZVortexAroundBehavior *)((char *)a2 + 2120), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2376), (const OZChannelBase *)((char *)a2 + 2376), v6);
  *((void *)this + 297) = &unk_1F1102B70;
  *((void *)this + 299) = &unk_1F1102ED0;
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528), (OZVortexAroundBehavior *)((char *)a2 + 2528), v6);
}

void sub_1B7D98988(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::~OZVortexAroundBehavior(OZVortexAroundBehavior *this)
{
  *(void *)this = &unk_1F11843B0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1184698;
  *((void *)this + 6) = &unk_1F11848F0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1184948;
  OZChannelEnum::~OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2376));
  OZChannelEnum::~OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2120));

  OZAttractedToBehavior::~OZAttractedToBehavior(this);
}

{
  uint64_t vars8;

  OZVortexAroundBehavior::~OZVortexAroundBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZVortexAroundBehavior::~OZVortexAroundBehavior(OZVortexAroundBehavior *this)
{
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 48));
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZVortexAroundBehavior::operator=(uint64_t a1, const void *a2)
{
  OZAttractedToBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 2528, (uint64_t)v4 + 2528);
}

BOOL OZVortexAroundBehavior::isRebuildUIChannel(OZVortexAroundBehavior *this, OZChannelBase *a2)
{
  return a2->var6 == (OZChannelFolder *)((char *)this + 1528) || (OZChannelBase *)((char *)this + 2120) == a2;
}

void OZVortexAroundBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    char v4 = 0;
    uint64_t v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      unsigned int v6 = *(const void **)(v2 + 16);
      if (v6) {
      else
      }
        PCString v7 = 0;
      BOOL v8 = OZChannelBool3D::getX((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      BOOL v9 = OZChannelBool3D::getY((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      if (v8) {
        int v10 = 2;
      }
      else {
        int v10 = 1;
      }
      if (v9) {
        BOOL v8 = v10;
      }
      BOOL v11 = OZChannelBool3D::getZ((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      v4 |= v8 + v11 == 3;
      if (v8 + v11 == 3 && OZChannel::getValueAsInt((OZChannel *)(v7 + 2120), v5, 0.0) == 3) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a2)
      {
        char v12 = 1;
        goto LABEL_16;
      }
    }
    char v12 = 0;
LABEL_16:
    for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      CMTime v14 = *(const void **)(i + 16);
      if (v14) {
      else
      }
        CMTime v15 = 0;
      CMTime v16 = (OZChannelBase *)(v15 + 2120);
      if (v4) {
        OZChannelBase::resetFlag(v16, 0x400000, 1);
      }
      else {
        OZChannelBase::setFlag(v16, 0x400000, 1);
      }
      OZChannelBase::enable((OZChannelBase *)(v15 + 2120), v4 & 1, 1);
      CMTime v17 = (OZChannelBase *)(v15 + 2376);
      if (v12) {
        OZChannelBase::setFlag(v17, 0x400000, 1);
      }
      else {
        OZChannelBase::resetFlag(v17, 0x400000, 1);
      }
    }
  }
}

uint64_t OZVortexAroundBehavior::accumInitialValues(OZVortexAroundBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v41 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v41, 0.0);
  double v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1224), &v41, 0.0);
  double v9 = v8;
  float64x2_t v39 = 0uLL;
  double v40 = 0.0;
  unsigned int v38 = 0;
  uint64_t result = OZAttractedToBehavior::getMaskVector((uint64_t)this, v39.f64, &v38);
  if (v38 >= 2)
  {
    uint64_t result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
    if (result)
    {
      float64x2_t v36 = 0uLL;
      double v37 = 0.0;
      uint64_t result = (uint64_t)OZSimulationState::getNodePosition((uint64_t)a2, (CMTime *)((char *)a2 + 176), result, (OZSimulationState *)a3, &v36);
      double v11 = v37 - *((double *)a2 + 2);
      float64x2_t v34 = vmulq_f64(vsubq_f64(v36, *(float64x2_t *)a2), v39);
      double v35 = v11 * v40;
      double v12 = vaddvq_f64(vmulq_f64(v34, v34)) + v35 * v35;
      double v13 = sqrt(v12);
      if (v13 >= 10.0 && v13 <= v9)
      {
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 816), &v41, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1072), &v41, 0.0);
        if (ValueAsInt) {
          double v17 = v12;
        }
        else {
          double v17 = v13;
        }
        double v18 = v7 / (v17 * v16);
        unsigned int v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2120), &v41, 0.0);
        int v20 = v38;
        unsigned int v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2376), MEMORY[0x1E4F1FA48], 0.0);
        OZVortexBehavior::CalcThrowDirection(v34.f64, v39.f64, v20, v19, 0, v21, v32.f64);
        float64x2_t v22 = v32;
        double v23 = v33;
        double v24 = sqrt(v13* sqrt(v18 * v34.f64[0] * (v18 * v34.f64[0])+ v18 * v34.f64[1] * (v18 * v34.f64[1])+ v18 * v35 * (v18 * v35)));
        double v25 = sqrt(vaddvq_f64(vmulq_f64(v22, v22)) + v23 * v23);
        if (v25 <= -0.000000100000001 || v25 >= 0.000000100000001)
        {
          float64x2_t v22 = vdivq_f64(v32, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25, 0));
          double v23 = v33 / v25;
        }
        int8x16_t v31 = (int8x16_t)vmulq_n_f64(v22, v24);
        double v26 = v24 * v23;
        double v30 = v24;
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2528), MEMORY[0x1E4F1FA48], 0.0);
        double v27 = -(v30 * v23);
        if (result) {
          double v27 = v26;
        }
        int32x2_t v28 = vdup_n_s32(result == 0);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v29, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v31), v31));
        *((double *)a2 + 9) = v27 + *((double *)a2 + 9);
      }
    }
  }
  return result;
}

uint64_t OZVortexAroundBehavior::accumInitialValues(OZVortexAroundBehavior *this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  CMTime v49 = *(CMTime *)((unsigned char *)a2 + 1);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v49, 0.0);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1224), &v49, 0.0);
  double v11 = v10;
  float64x2_t v47 = 0uLL;
  double v48 = 0.0;
  unsigned int v46 = 0;
  uint64_t result = OZAttractedToBehavior::getMaskVector((uint64_t)this, v47.f64, &v46);
  if (v46 >= 2)
  {
    uint64_t result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
    if (result)
    {
      float64x2_t v44 = 0uLL;
      double v45 = 0.0;
      OZSimulationState::GetNodePosition(&v49, result, (OZSimulationState *)a4, &v44);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1072), &v49, 0.0);
      double v14 = v13;
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2376), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 1);
      if (v16 != *(void *)a2 && a3 >= 1)
      {
        int v17 = result;
        double v18 = (OZChannel *)((char *)this + 816);
        unsigned int v19 = (OZChannel *)((char *)this + 2120);
        int v20 = (OZChannel *)((char *)this + 2528);
        uint64_t v21 = v16 - 248;
        int v22 = 1;
        do
        {
          double v23 = v45 - *(double *)(v21 + 16);
          float64x2_t v42 = vmulq_f64(vsubq_f64(v44, *(float64x2_t *)v21), v47);
          double v43 = v23 * v48;
          double v24 = vaddvq_f64(vmulq_f64(v42, v42)) + v43 * v43;
          double v25 = sqrt(v24);
          BOOL v26 = v25 >= 10.0 && v25 <= v11;
          if (v26)
          {
            if (OZChannel::getValueAsInt(v18, &v49, 0.0)) {
              double v27 = v24;
            }
            else {
              double v27 = v25;
            }
            unsigned int ValueAsInt = OZChannel::getValueAsInt(v19, &v49, 0.0);
            int v29 = v46;
            unsigned int v30 = (*(uint64_t (**)(void))(**(void **)(v21 + 232) + 32))(*(void *)(v21 + 232));
            OZVortexBehavior::CalcThrowDirection(v42.f64, v47.f64, v29, ValueAsInt, v17, v30, v40.f64);
            float64x2_t v31 = v40;
            double v32 = v41;
            double v33 = sqrt(vaddvq_f64(vmulq_f64(v31, v31)) + v32 * v32);
            if (v33 <= -0.000000100000001 || v33 >= 0.000000100000001)
            {
              float64x2_t v31 = vdivq_f64(v40, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0));
              double v32 = v41 / v33;
            }
            double v34 = v9 / (v14 * v27);
            double v38 = sqrt(v25* sqrt(v34 * v42.f64[0] * (v34 * v42.f64[0])+ v34 * v42.f64[1] * (v34 * v42.f64[1])+ v34 * v43 * (v34 * v43)));
            int8x16_t v39 = (int8x16_t)vmulq_n_f64(v31, v38);
            uint64_t result = OZChannel::getValueAsInt(v20, MEMORY[0x1E4F1FA48], 0.0);
            double v35 = -(v38 * v32);
            if (result) {
              double v35 = v38 * v32;
            }
            int32x2_t v36 = vdup_n_s32(result == 0);
            v37.i64[0] = v36.u32[0];
            v37.i64[1] = v36.u32[1];
            *(float64x2_t *)(v21 + 56) = vaddq_f64(*(float64x2_t *)(v21 + 56), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v37, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v39), v39));
            *(double *)(v21 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v35 + *(double *)(v21 + 72);
            uint64_t v15 = *(void *)a2;
          }
          if (v21 == v15) {
            break;
          }
          v21 -= 248;
          BOOL v26 = v22++ < a3;
        }
        while (v26);
      }
    }
  }
  return result;
}

void OZVortexBehavior::OZVortexBehavior(OZVortexBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1184988;
  float64x2_t v5[2] = &unk_1F1184C78;
  v5[6] = &unk_1F1184ED0;
  v5[42] = &unk_1F1184F28;
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Pole Axis Enum");
  PCURL::PCURL((PCURL *)&v7, @"Vortex Behavior Pole Axis");
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2248), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  unsigned int v6 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2504), v6, &v8, (OZChannelFolder *)((char *)this + 56), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Vortex Behavior Direction Enum");
  PCURL::PCURL((PCURL *)&v7, @"Vortex Behavior Direction");
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2656), &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2504), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2504));
}

void sub_1B7D9963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZAttractorBehavior::~OZAttractorBehavior(v12);
  _Unwind_Resume(a1);
}

void OZVortexBehavior::OZVortexBehavior(OZVortexBehavior *this, OZVortexBehavior *a2, char a3)
{
  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1184988;
  *(void *)(v5 + 16) = &unk_1F1184C78;
  *(void *)(v5 + 48) = &unk_1F1184ED0;
  *(void *)(v5 + 336) = &unk_1F1184F28;
  unsigned int v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 2248), (OZVortexBehavior *)((char *)a2 + 2248), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2504), (const OZChannelBase *)((char *)a2 + 2504), v6);
  *((void *)this + 313) = &unk_1F1102B70;
  *((void *)this + 315) = &unk_1F1102ED0;
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2656), (OZVortexBehavior *)((char *)a2 + 2656), v6);
}

void sub_1B7D99804(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZVortexBehavior::~OZVortexBehavior(OZVortexBehavior *this)
{
  *(void *)this = &unk_1F1184988;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1184C78;
  *((void *)this + 6) = &unk_1F1184ED0;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1184F28;
  OZChannelEnum::~OZChannelEnum((OZVortexBehavior *)((char *)this + 2656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2504));
  OZChannelEnum::~OZChannelEnum((OZVortexBehavior *)((char *)this + 2248));

  OZAttractorBehavior::~OZAttractorBehavior(this);
}

{
  uint64_t vars8;

  OZVortexBehavior::~OZVortexBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZVortexBehavior::~OZVortexBehavior(OZVortexBehavior *this)
{
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 48));
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZVortexBehavior::operator=(uint64_t a1, const void *a2)
{
  OZAttractorBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }

  return OZChannelBase::operator=(a1 + 2656, (uint64_t)v4 + 2656);
}

BOOL OZVortexBehavior::isRebuildUIChannel(OZVortexBehavior *this, OZChannelBase *a2)
{
  return a2->var6 == (OZChannelFolder *)((char *)this + 1656)
      || (OZChannelBase *)((char *)this + 2248) == a2
      || OZTransitiveBehavior::isRebuildUIChannel(this, a2);
}

void OZVortexBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZTransitiveBehavior::updateHiddenFlags(a1, a2);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    char v4 = 0;
    uint64_t v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      unsigned int v6 = *(const void **)(v3 + 16);
      if (v6) {
      else
      }
        PCString v7 = 0;
      BOOL v8 = OZChannelBool3D::getX((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      BOOL v9 = OZChannelBool3D::getY((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      if (v8) {
        int v10 = 2;
      }
      else {
        int v10 = 1;
      }
      if (v9) {
        BOOL v8 = v10;
      }
      BOOL v11 = OZChannelBool3D::getZ((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      v4 |= v8 + v11 == 3;
      if (v8 + v11 == 3 && OZChannel::getValueAsInt((OZChannel *)(v7 + 2248), v5, 0.0) == 3) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == a2)
      {
        char v12 = 1;
        goto LABEL_16;
      }
    }
    char v12 = 0;
LABEL_16:
    for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      double v14 = *(const void **)(i + 16);
      if (v14) {
      else
      }
        uint64_t v15 = 0;
      uint64_t v16 = (OZChannelBase *)(v15 + 2248);
      if (v4) {
        OZChannelBase::resetFlag(v16, 0x400000, 1);
      }
      else {
        OZChannelBase::setFlag(v16, 0x400000, 1);
      }
      OZChannelBase::enable((OZChannelBase *)(v15 + 2248), v4 & 1, 1);
      int v17 = (OZChannelBase *)(v15 + 2504);
      if (v12) {
        OZChannelBase::setFlag(v17, 0x400000, 1);
      }
      else {
        OZChannelBase::resetFlag(v17, 0x400000, 1);
      }
    }
  }
}

uint64_t OZVortexBehavior::accumInitialValues(OZVortexBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v37 = 0.0;
  double v38 = 0.0;
  double v39 = 0.0;
  unsigned int v6 = (CMTime *)((char *)a2 + 176);
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::getNodePosition((uint64_t)a2, v6, (uint64_t)TransformNode, (OZSimulationState *)a3, &v37);
  double v8 = v37;
  double v9 = v38;
  double v10 = *(double *)a2;
  double v11 = *((double *)a2 + 1);
  double v12 = v39;
  double v13 = *((double *)a2 + 2);
  double v31 = 0.0;
  double v32 = 0.0;
  double v33 = 0.0;
  unsigned int v30 = 0;
  uint64_t result = OZAttractorBehavior::getMaskVector((uint64_t)this, &v31, &v30);
  if (v30 >= 2)
  {
    double v34 = (v8 - v10) * v31;
    double v35 = (v9 - v11) * v32;
    double v36 = (v12 - v13) * v33;
    double v15 = sqrt(v34 * v34 + v35 * v35 + v36 * v36);
    if (v15 <= -0.0000001 || v15 >= 0.0000001)
    {
      uint64_t v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
      unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2248), MEMORY[0x1E4F1FA48], 0.0);
      int v18 = v30;
      int v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2504), v16, 0.0);
      OZVortexBehavior::CalcThrowDirection(&v34, &v31, v18, ValueAsInt, v19, 0, v28.f64);
      double v20 = v29;
      float64x2_t v26 = v28;
      float64x2_t v28 = 0uLL;
      double v29 = 0.0;
      OZAttractorBehavior::calcAttraction(this, (uint64_t)a2, (OZSimulationState *)a3, v28.f64);
      double v25 = sqrt(v15 * sqrt(v28.f64[0] * v28.f64[0] + v28.f64[1] * v28.f64[1] + v29 * v29));
      int8x16_t v27 = (int8x16_t)vmulq_n_f64(v26, v25);
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2656), v16, 0.0);
      double v21 = -(v20 * v25);
      int32x2_t v22 = vdup_n_s32(result == 0);
      v23.i64[0] = v22.u32[0];
      v23.i64[1] = v22.u32[1];
      float64x2_t v24 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v27), v27);
      if (result) {
        double v21 = v20 * v25;
      }
      *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), v24);
      *((double *)a2 + 9) = *((double *)a2 + 9) + v21;
    }
  }
  return result;
}

void OZVortexBehavior::CalcThrowDirection(double *a1@<X0>, double *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, double *a7@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    double v8 = a2[1];
    BOOL v9 = *a2 >= 0.0000001 || *a2 <= -0.0000001;
    double v10 = 0.0;
    if (v9) {
      double v11 = 0.0;
    }
    else {
      double v11 = 1.0;
    }
    if (v8 >= 0.0000001 || v8 <= -0.0000001) {
      double v13 = 0.0;
    }
    else {
      double v13 = 1.0;
    }
    double v14 = a2[2];
    if (v14 < 0.0000001 && v14 > -0.0000001) {
      double v10 = 1.0;
    }
    double v16 = a1[1];
    double v17 = a1[2];
    double v18 = v16 * v10 - v17 * v13;
    double v19 = v11 * v17 - v10 * *a1;
    double v20 = v13 * *a1 - v16 * v11;
    goto LABEL_46;
  }
  if (a4 != 3)
  {
    double v55 = 0.0;
    double v56 = 0.0;
    double v53 = 1.0;
    double v54 = 0.0;
    double v57 = 1.0;
    double v58 = 0.0;
    double v59 = 0.0;
    double v60 = 0.0;
    double v61 = 1.0;
    int8x16_t v27 = &v53 + 3 * a4;
    double v29 = v27[1];
    double v28 = v27[2];
    double v31 = *a1;
    double v30 = a1[1];
    double v32 = a1[2];
    double v33 = v30 * v28 - v32 * v29;
    double v34 = v32 * *v27 - v28 * *a1;
    double v35 = v29 * *a1 - v30 * *v27;
    if (v35 * v35 + v33 * v33 + v34 * v34 <= 0.0001)
    {
      double v38 = &v53 + 3 * ((a4 + 2) % 3);
      double v18 = -*v38;
      double v19 = -v38[1];
      double v20 = -v38[2];
    }
    else
    {
      double v36 = &v53 + 3 * ((a4 + 1) % 3);
      if (v33 * *v36 + v34 * v36[1] + v35 * v36[2] >= 0.0)
      {
        double v37 = v33;
      }
      else
      {
        double v35 = -v35;
        double v34 = -v34;
        double v37 = -v33;
      }
      double v18 = v30 * v35 - v32 * v34;
      double v19 = v32 * v37 - v31 * v35;
      double v20 = v31 * v34 - v30 * v37;
    }
    goto LABEL_46;
  }
  double v21 = *a1;
  double v22 = a1[1];
  double v23 = a1[2];
  if (*a1 < v22)
  {
    if (v21 < v23)
    {
      double v24 = 1.0;
      double v25 = 0.0;
      double v26 = 0.0;
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v22 >= v23)
  {
LABEL_32:
    double v26 = 0.0;
    double v25 = 1.0;
    goto LABEL_33;
  }
  double v26 = 1.0;
  double v25 = 0.0;
LABEL_33:
  double v24 = 0.0;
LABEL_34:
  double v39 = v26 * v23 - v22 * v25;
  double v40 = v21 * v25 - v24 * v23;
  double v41 = v22 * v24 - v21 * v26;
  double v42 = sqrt(v41 * v41 + v39 * v39 + v40 * v40);
  if (v42 <= -0.000000100000001 || v42 >= 0.000000100000001)
  {
    double v39 = v39 / v42;
    double v40 = v40 / v42;
    double v41 = v41 / v42;
  }
  int v43 = -32;
  int v44 = -1640531527;
  unsigned int v45 = a6;
  do
  {
    a6 += (a5 + 16 * v45) ^ (v44 + v45) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1 + (v45 >> 5));
    v45 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * a6) ^ (v44 + a6) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (a6 >> 5));
    v44 -= 1640531527;
  }
  while (!__CFADD__(v43++, 1));
  __double2 v47 = __sincos_stret((double)(v45 ^ a6) / 4294967300.0 * 6.28318531 * 0.5);
  double v48 = sqrt(v21 * v21 + v22 * v22 + v23 * v23);
  if (v48 < 0.000000100000001 && v48 > -0.000000100000001) {
    double v48 = 1.0;
  }
  v52[0] = v47.__cosval;
  v52[1] = v21 / v48 * v47.__sinval;
  v52[2] = v22 / v48 * v47.__sinval;
  _OWORD v52[3] = v23 / v48 * v47.__sinval;
  double v53 = 1.0;
  double v54 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v57 = 1.0;
  double v58 = 0.0;
  double v59 = 0.0;
  double v60 = 0.0;
  double v61 = 1.0;
  PCMatrix33Tmpl<double>::setRotationFromQuaternion(&v53, v52);
  double v18 = v39 * v53 + v40 * v54 + v41 * v55;
  double v19 = v39 * v56 + v40 * v57 + v41 * v58;
  double v20 = v39 * v59 + v40 * v60 + v41 * v61;
LABEL_46:
  double v50 = sqrt(v20 * v20 + v19 * v19 + v18 * v18);
  if (v50 < 0.000000100000001 && v50 > -0.000000100000001) {
    double v50 = 1.0;
  }
  *a7 = v18 / v50;
  a7[1] = v19 / v50;
  a7[2] = v20 / v50;
}

uint64_t OZVortexBehavior::accumInitialValues(OZVortexBehavior *this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  CMTime v40 = *(CMTime *)((unsigned char *)a2 + 1);
  float64x2_t v38 = 0uLL;
  double v39 = 0.0;
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::GetNodePosition(&v40, (uint64_t)TransformNode, (OZSimulationState *)a4, &v38);
  float64x2_t v36 = 0uLL;
  double v37 = 0.0;
  unsigned int v35 = 0;
  uint64_t result = OZAttractorBehavior::getMaskVector((uint64_t)this, v36.f64, &v35);
  if (v35 >= 2)
  {
    unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2248), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2504), &v40, 0.0);
    uint64_t v11 = *((void *)a2 + 1);
    if (v11 != *(void *)a2 && a3 >= 1)
    {
      int v12 = result;
      uint64_t v13 = v11 - 248;
      int v14 = 1;
      double v15 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        double v16 = v39 - *(double *)(v13 + 16);
        float64x2_t v33 = vmulq_f64(vsubq_f64(v38, *(float64x2_t *)v13), v36);
        double v34 = v16 * v37;
        double v17 = sqrt(vaddvq_f64(vmulq_f64(v33, v33)) + v34 * v34);
        if (v17 > -0.0000001 && v17 < 0.0000001) {
          break;
        }
        int v18 = v35;
        unsigned int v19 = (*(uint64_t (**)(void))(**(void **)(v13 + 232) + 32))(*(void *)(v13 + 232));
        OZVortexBehavior::CalcThrowDirection(v33.f64, v36.f64, v18, ValueAsInt, v12, v19, v31.f64);
        double v20 = v32;
        float64x2_t v21 = v31;
        float64x2_t v31 = 0uLL;
        double v32 = 0.0;
        float64x2_t v28 = v21;
        CMTime v30 = v40;
        OZAttractorBehavior::calcAttraction((uint64_t)this, &v30, v38.f64, (double *)v13, v31.f64);
        double v27 = sqrt(v17 * sqrt(v31.f64[0] * v31.f64[0] + v31.f64[1] * v31.f64[1] + v32 * v32));
        int8x16_t v29 = (int8x16_t)vmulq_n_f64(v28, v27);
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2656), v15, 0.0);
        double v22 = -(v20 * v27);
        int32x2_t v23 = vdup_n_s32(result == 0);
        v24.i64[0] = v23.u32[0];
        v24.i64[1] = v23.u32[1];
        float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v29), v29);
        if (result) {
          double v22 = v20 * v27;
        }
        *(float64x2_t *)(v13 + 56) = vaddq_f64(*(float64x2_t *)(v13 + 56), v25);
        *(double *)(v13 + 7OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(double *)(v13 + 72) + v22;
        if (v13 == *(void *)a2) {
          break;
        }
        v13 -= 248;
      }
      while (v14++ < a3);
    }
  }
  return result;
}

double PCMatrix33Tmpl<double>::setRotationFromQuaternion(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5;
  double v7 = 2.0 / v6;
  BOOL v8 = v6 <= 0.0;
  double v9 = 0.0;
  if (!v8) {
    double v9 = v7;
  }
  double v10 = v3 * v9;
  double v11 = v4 * v9;
  double v12 = v5 * v9;
  double v13 = v2 * v10;
  double v14 = v2 * v11;
  double v15 = v2 * v12;
  double v16 = v3 * v10;
  double v17 = v3 * v11;
  double v18 = v3 * v12;
  double v19 = v4 * v11;
  double v20 = v4 * v12;
  double v21 = v5 * v12;
  *a1 = 1.0 - (v19 + v21);
  a1[1] = v17 - v15;
  a1[2] = v18 + v14;
  a1[3] = v17 + v15;
  a1[4] = 1.0 - (v16 + v21);
  a1[5] = v20 - v13;
  a1[6] = v18 - v14;
  a1[7] = v20 + v13;
  double result = 1.0 - (v16 + v19);
  a1[8] = result;
  return result;
}

void OZWindBehavior::OZWindBehavior(OZWindBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1184F68;
  float64x2_t v5[2] = &unk_1F1185250;
  v5[6] = &unk_1F11854A8;
  v5[42] = &unk_1F1185500;
  PCURL::PCURL((PCURL *)&v7, @"Wind Behavior Coefficient");
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 504), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Wind Behavior Wind Velocity");
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 1096), &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "HUD Scale (Hidden)");
  OZChannelDouble::OZChannelDouble((OZWindBehavior *)((char *)this + 1688), &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Wind Dimension Type Enum (Hidden)");
  PCString::PCString(&v6, "Wind Dimension Type Enum (Hidden)");
  OZChannelEnum::OZChannelEnum((OZWindBehavior *)((char *)this + 1840), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 640), 5.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 5.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1688), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1840), 0);
}

void sub_1B7D9A924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel3D::~OZChannel3D(v12);
  OZChannel3D::~OZChannel3D(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZWindBehavior::OZWindBehavior(OZWindBehavior *this, OZWindBehavior *a2, char a3)
{
  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1184F68;
  *(void *)(v5 + 16) = &unk_1F1185250;
  *(void *)(v5 + 48) = &unk_1F11854A8;
  *(void *)(v5 + 336) = &unk_1F1185500;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel3D::OZChannel3D((OZChannel3D *)(v5 + 504), (OZWindBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 1096), (OZWindBehavior *)((char *)a2 + 1096), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1688), (const OZChannelBase *)((char *)a2 + 1688), v6);
  *((void *)this + 21OZLinkBehavior::clearAll(this, 1) = &unk_1F1100CF0;
  *((void *)this + 213) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZWindBehavior *)((char *)this + 1840), (OZWindBehavior *)((char *)a2 + 1840), v6);
}

void sub_1B7D9AB10(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannel3D::~OZChannel3D(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZWindBehavior::~OZWindBehavior(OZWindBehavior *this)
{
  *(void *)this = &unk_1F1184F68;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1185250;
  *((void *)this + 6) = &unk_1F11854A8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1185500;
  OZChannelEnum::~OZChannelEnum((OZWindBehavior *)((char *)this + 1840));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1688));
  *((void *)this + 137) = &unk_1F1106258;
  *((void *)this + 139) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1536));
  OZChannel2D::~OZChannel2D((OZWindBehavior *)((char *)this + 1096));
  *((void *)this + 63) = &unk_1F1106258;
  *((void *)this + 65) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel2D::~OZChannel2D((OZWindBehavior *)((char *)this + 504));

  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  uint64_t vars8;

  OZWindBehavior::~OZWindBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZWindBehavior::~OZWindBehavior(OZWindBehavior *this)
{
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 48));
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZWindBehavior::operator=(uint64_t a1, const void *a2)
{
  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 504);
  OZChannelBase::operator=(a1 + 640, (uint64_t)v5 + 640);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelFolder::operator=(a1 + 1096);
  OZChannelBase::operator=(a1 + 1232, (uint64_t)v5 + 1232);
  OZChannelBase::operator=(a1 + 1384, (uint64_t)v5 + 1384);
  OZChannelBase::operator=(a1 + 1536, (uint64_t)v5 + 1536);
  OZChannelBase::operator=(a1 + 1688, (uint64_t)v5 + 1688);

  return OZChannelBase::operator=(a1 + 1840, (uint64_t)v5 + 1840);
}

uint64_t OZWindBehavior::parseBegin(OZWindBehavior *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 944), 0.0);
    (*(void (**)(char *, void))(*((void *)this + 118) + 288))((char *)this + 944, 0);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZWindBehavior::parseBegin(OZWindBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

double OZWindBehavior::accumForces(OZWindBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime v11 = *(CMTime *)((char *)a2 + 176);
  float64x2_t v9 = 0uLL;
  double v10 = 0.0;
  float64x2_t v7 = 0uLL;
  double v8 = 0.0;
  OZChannel3D::getValue((uint64_t)this + 504, &v11, &v9, 0.0);
  OZChannel3D::getValue((uint64_t)this + 1096, &v11, &v7, 0.0);
  double v5 = (*((double *)a2 + 9) - v8) * v10;
  *((float64x2_t *)a2 + 8) = vsubq_f64(*((float64x2_t *)a2 + 8), vmulq_f64(vsubq_f64(*(float64x2_t *)((char *)a2 + 56), v7), v9));
  double result = *((double *)a2 + 18) - v5;
  *((double *)a2 + 18) = result;
  return result;
}

void OZWriggleBehavior::OZWriggleBehavior(OZWriggleBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *double v5 = &unk_1F1185540;
  float64x2_t v5[2] = &unk_1F1185880;
  v5[6] = &unk_1F1185AD8;
  v5[42] = &unk_1F1185B30;
  v5[67] = &unk_1F1185B58;
  v5[110] = 0;
  v5[109] = 0;
  v5[108] = v5 + 109;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 111));
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Offset");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 992), 100.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Multiplier");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1144), 1.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Apply Mode Enum");
  PCURL::PCURL((PCURL *)&v7, @"Wriggle Behavior Apply Mode");
  OZChannelEnum::OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296), 0, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Frequency");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1552), 1.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Phase");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1704), &v8, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Num Octaves");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1856), 10.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCDu, 2, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Frequency Step");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2008), 2.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCEu, 2, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Noisiness");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2160), 0.5, &v8, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Link");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2312), 0, &v8, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Affect Objects");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2464), &v8, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2616), &v8, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior Start Frame Offset");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2768), &v8, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Wriggle Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2920), &v8, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::PCString(&v8, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3072), 0, &v8, (OZChannelFolder *)((char *)this + 56), 0xD6u, 2u, 0, 0);
  PCString::~PCString(&v8);
  *((_WORD *)this + 161OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 1552), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1552), 2.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1704), 100.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1856), 1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1856), 20.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2008), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2008), 10.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2160), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2160), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2160), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2160), 1.0);
  LODWORD(v6) = *(_DWORD *)((*(uint64_t (**)(OZWriggleBehavior *))(*(void *)this + 312))(this) + 24);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2616), (double)v6);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2616), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2768), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2920), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1296), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1296));
  OZChannelBase::resetFlag((OZChannelBase *)this + 22, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 22);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2616), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2616));
  *((void *)this + 79) = 0x4059000000000000;
}

void sub_1B7D9B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelPercent *a11, OZChannel *a12, std::mutex *a13, OZChannel *a14, OZChannelEnum *a15, OZChannel *a16, PCString a17, PCString a18)
{
  PCString::~PCString(&a18);
  OZChannel::~OZChannel(v21);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v19);
  OZChannelBool::~OZChannelBool(v20);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a16);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannel::~OZChannel(a12);
  PCSharedMutex::~PCSharedMutex(a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v18 + 864, *((void **)v18 + 109));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v18);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior::OZWriggleBehavior(OZWriggleBehavior *this, const OZWriggleBehavior *a2, char a3)
{
  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *double v5 = &unk_1F1185540;
  float64x2_t v5[2] = &unk_1F1185880;
  v5[6] = &unk_1F1185AD8;
  v5[42] = &unk_1F1185B30;
  v5[67] = &unk_1F1185B58;
  v5[110] = 0;
  v5[109] = 0;
  v5[108] = v5 + 109;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 111));
  OZChannel::OZChannel((OZChannel *)((char *)this + 992), (const OZChannelBase *)((char *)a2 + 992), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 124) = &unk_1F1100CF0;
  *((void *)this + 126) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1144), (const OZChannelBase *)((char *)a2 + 1144), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296), (const OZWriggleBehavior *)((char *)a2 + 1296), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1552), (const OZChannelBase *)((char *)a2 + 1552), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 194) = &unk_1F1100CF0;
  *((void *)this + 196) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1704), (const OZChannelBase *)((char *)a2 + 1704), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 213) = &unk_1F1100CF0;
  *((void *)this + 215) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1856), (const OZChannelBase *)((char *)a2 + 1856), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 23OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 234) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2008), (const OZChannelBase *)((char *)a2 + 2008), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 25OZLinkBehavior::clearAll(this, 1) = &unk_1F1100CF0;
  *((void *)this + 253) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2160), (const OZChannelBase *)((char *)a2 + 2160), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 270) = &unk_1F1100CF0;
  *((void *)this + 27OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2312), (const OZChannelBase *)((char *)a2 + 2312), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2464), (const OZChannelBase *)a2 + 22, (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2616), (const OZChannelBase *)((char *)a2 + 2616), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 327) = &unk_1F1102B70;
  *((void *)this + 329) = &unk_1F1102ED0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2768), (const OZChannelBase *)((char *)a2 + 2768), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 3OZFxFilter::updateChannelsForMisbehavingPlugin(this - 46) = &unk_1F1100CF0;
  *((void *)this + 348) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2920), (const OZChannelBase *)((char *)a2 + 2920), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 365) = &unk_1F1100CF0;
  *((void *)this + 367) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3072), (const OZChannelBase *)((char *)a2 + 3072), (OZChannelFolder *)((char *)this + 56));
  *((_WORD *)this + 161OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_WORD *)a2 + 1612);
}

void sub_1B7D9BD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannel *a11, OZChannel *a12, OZChannelEnum *a13, OZChannelPercent *a14, OZChannel *a15, std::mutex *a16)
{
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v21);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(v20);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelPercent::~OZChannelPercent(a14);
  OZChannel::~OZChannel(a15);
  PCSharedMutex::~PCSharedMutex(a16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v16 + 864, *((void **)v16 + 109));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v16);
  _Unwind_Resume(a1);
}

void sub_1B7D9BDC0()
{
}

void sub_1B7D9BDC8()
{
}

void sub_1B7D9BDD0()
{
}

void sub_1B7D9BDD8()
{
}

void sub_1B7D9BDE0()
{
}

void sub_1B7D9BDE8()
{
}

void sub_1B7D9BDF0()
{
}

void sub_1B7D9BDF8()
{
}

void sub_1B7D9BE00()
{
}

void sub_1B7D9BE08()
{
}

void OZWriggleBehavior::~OZWriggleBehavior(OZWriggleBehavior *this)
{
  *(void *)this = &unk_1F1185540;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1185880;
  *((void *)this + 6) = &unk_1F1185AD8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1185B30;
  *((void *)this + 67) = &unk_1F1185B58;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3072));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2920));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2616));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2464));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2312));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1856));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1704));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1552));
  OZChannelEnum::~OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1144));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 888));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 864, *((void **)this + 109));

  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZWriggleBehavior::~OZWriggleBehavior(OZWriggleBehavior *this)
{
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 48));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 336));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZWriggleBehavior::operator=(uint64_t a1, const void *a2)
{
  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  double v5 = v4;
  OZChannelBase::operator=(a1 + 992, (uint64_t)(v4 + 496));
  OZChannelBase::operator=(a1 + 1144, (uint64_t)(v5 + 572));
  OZChannelBase::operator=(a1 + 1296, (uint64_t)(v5 + 648));
  OZChannelBase::operator=(a1 + 1552, (uint64_t)(v5 + 776));
  OZChannelBase::operator=(a1 + 1704, (uint64_t)(v5 + 852));
  OZChannelBase::operator=(a1 + 1856, (uint64_t)(v5 + 928));
  OZChannelBase::operator=(a1 + 2008, (uint64_t)(v5 + 1004));
  OZChannelBase::operator=(a1 + 2160, (uint64_t)(v5 + 1080));
  OZChannelBase::operator=(a1 + 2312, (uint64_t)(v5 + 1156));
  OZChannelBase::operator=(a1 + 2464, (uint64_t)(v5 + 1232));
  OZChannelBase::operator=(a1 + 2616, (uint64_t)(v5 + 1308));
  OZChannelBase::operator=(a1 + 2768, (uint64_t)(v5 + 1384));
  OZChannelBase::operator=(a1 + 2920, (uint64_t)(v5 + 1460));
  uint64_t result = OZChannelBase::operator=(a1 + 3072, (uint64_t)(v5 + 1536));
  *(_WORD *)(a1 + 3224) = v5[1612];
  return result;
}

uint64_t OZWriggleBehavior::sceneNodeDidLoad(OZWriggleBehavior *this)
{
  uint64_t result = OZSingleChannelBehavior::sceneNodeDidLoad(this);
  *((_WORD *)this + 161OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  return result;
}

int8x8_t *OZWriggleBehavior::dirty(OZWriggleBehavior *this)
{
  double v2 = (std::mutex *)((char *)this + 888);
  PCSharedMutex::lock((std::mutex *)((char *)this + 888));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 864, *((void **)this + 109));
  *((void *)this + 108) = (char *)this + 872;
  *((void *)this + 110) = 0;
  *((void *)this + 109) = 0;
  PCSharedMutex::unlock(v2);

  return OZBehavior::dirty(this);
}

int8x8_t *non-virtual thunk to'OZWriggleBehavior::dirty(OZWriggleBehavior *this)
{
  return OZWriggleBehavior::dirty((OZWriggleBehavior *)((char *)this - 16));
}

BOOL OZWriggleBehavior::isRebuildUIChannel(OZWriggleBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 1296) == a2;
}

OZChannelBase *OZWriggleBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 1296), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 != a2)
  {
    int v6 = ValueAsInt;
    PCString v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      PCString v8 = *(char **)(v5 + 16);
      if (v8) {
      if (v6 != OZChannel::getValueAsInt((OZChannel *)(v8 + 1296), v7, 0.0))
      }
        break;
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          double v10 = *(const void **)(i + 16);
          if (v10) {
          else
          }
            CMTime v11 = 0;
          double v12 = (OZChannelBase *)(v11 + 992);
          double v13 = (OZChannelBase *)(v11 + 1144);
          if (v6 == 2)
          {
            OZChannelBase::setFlag(v12, 0x400000, 1);
            OZChannelBase::resetFlag(v13, 0x400000, 1);
          }
          else
          {
            OZChannelBase::resetFlag(v12, 0x400000, 1);
            OZChannelBase::setFlag(v13, 0x400000, 1);
          }
        }
        goto LABEL_21;
      }
    }
    for (uint64_t j = *(void *)(a2 + 8); j != a2; uint64_t j = *(void *)(j + 8))
    {
      double v15 = *(const void **)(j + 16);
      if (v15) {
      else
      }
        double v16 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v16 + 992), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)(v16 + 1144), 0x400000, 1);
    }
  }
LABEL_21:
  int canAffectObjects = OZWriggleBehavior::canAffectObjects((OZWriggleBehavior *)a1);
  double v18 = (OZChannelBase *)(a1 + 2464);
  if (canAffectObjects)
  {
    return OZChannelBase::resetFlag(v18, 0x400000, 1);
  }
  else
  {
    return OZChannelBase::setFlag(v18, 0x400000, 1);
  }
}

uint64_t OZWriggleBehavior::canAffectObjects(OZWriggleBehavior *this)
{
  uint64_t ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase && (uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(ChanBase)) != 0) {
    char v3 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator) + 8)+ 8), (int32x4_t)xmmword_1B8385810)))) ^ 1;
  }
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

void OZWriggleBehavior::createCurveNode(OZWriggleBehavior *this, OZChannel *a2, __n128 a3)
{
  OZSingleChannelBehavior::conformToChannel(this, a2, 1, a3);
  uint64_t ChanBase = (OZChannel *)OZSingleChannelBehavior::getChanBase(this);
  unsigned int var3 = a2->var3;
  if (ChanBase != a2 && a2)
  {
    int v7 = 1;
    PCString v8 = a2;
    do
    {
      PCString v8 = (OZChannel *)v8->var6;
      if (v8 == ChanBase)
      {
        BOOL v9 = 1;
      }
      else
      {
        v7 *= 100;
        var3 += v8->var3 * v7;
        BOOL v9 = v8 == 0;
      }
    }
    while (!v9);
  }
  operator new();
}

void sub_1B7D9C63C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior::didSkipApplyingToNonkeyframableChannel(OZWriggleBehavior *this, OZChannel *a2, __n128 a3)
{
  if (*((unsigned char *)this + 3225)) {
    OZSingleChannelBehavior::conformToChannel(this, a2, 0, a3);
  }
}

BOOL OZWriggleBehavior::CompareKeys::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return *(_DWORD *)a2 < *(_DWORD *)a3;
  }
  CMTime time1 = *(CMTime *)(a2 + 4);
  CMTime v6 = *(CMTime *)(a3 + 4);
  if (!CMTimeCompare(&time1, &v6)) {
    return *(double *)(a2 + 32) < *(double *)(a3 + 32);
  }
  CMTime time1 = *(CMTime *)(a2 + 4);
  CMTime v6 = *(CMTime *)(a3 + 4);
  return CMTimeCompare(&time1, &v6) >> 31;
}

double OZWriggleBehavior::solveNode(OZWriggleBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  memset(&v135, 0, sizeof(v135));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v135);
  CMTime v134 = v135;
  if ((*(unsigned int (**)(OZWriggleBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v134, 0, 1, 1)&& (*(uint64_t (**)(OZWriggleBehavior *))(*(void *)this + 336))(this))
  {
    CMTime v133 = v135;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3072), MEMORY[0x1E4F1FA48], 0.0))
    {
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&time2);
      *(CMTime *)long long v131 = v133;
      CMTime time1 = time2;
      PC_CMTimeSaferAdd((CMTime *)v131, &time1, (uint64_t)v130);
      CMTime v133 = v130[0];
    }
    *(void *)&v131[24] = 0;
    *(_DWORD *)long long v131 = a2;
    *(_OWORD *)&v131[4] = *(_OWORD *)&a3->value;
    *(void *)&v131[20] = a3->epoch;
    double v132 = a4;
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 888));
    uint64_t v11 = std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::find<OZWriggleBehavior::ValueCacheKey>((uint64_t)this + 864, (uint64_t)v131);
    if ((OZWriggleBehavior *)((char *)this + 872) != (OZWriggleBehavior *)v11
      && *(unsigned char *)(v11 + 88)
      && *(double *)(v11 + 72) == a5)
    {
      int v12 = 0;
      double v5 = *(double *)(v11 + 80);
    }
    else
    {
      int v12 = 1;
    }
    PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 888));
    if (v12)
    {
      (*(void (**)(CMTime *__return_ptr, OZWriggleBehavior *))(*(void *)this + 608))(v130, this);
      memset(&v129, 0, sizeof(v129));
      __n128 v136 = *(__n128 *)&v130[0].value;
      CMTimeEpoch epoch = v130[0].epoch;
      double v13 = (OZScene *)(*(uint64_t (**)(OZWriggleBehavior *))(*(void *)this + 336))(this);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2768), &v133, 0.0);
      OZScene::getTimeForFrame(v13, v14, &v127);
      *(__n128 *)&time1.CMTimeValue value = v136;
      time1.CMTimeEpoch epoch = epoch;
      *(__n128 *)&time2.CMTimeValue value = v127;
      time2.CMTimeEpoch epoch = v128;
      double v15 = &v129;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v129);
      __n128 v127 = 0uLL;
      CMTimeEpoch v128 = 0;
      OZBehavior::getFrameDuration(this, &v124);
      CMTime time1 = v130[0];
      CMTime time2 = v130[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v136);
      *(__n128 *)&time1.CMTimeValue value = v136;
      time1.CMTimeEpoch epoch = epoch;
      *(__n128 *)&time2.CMTimeValue value = v124;
      time2.CMTimeEpoch epoch = v125;
      v16.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v126);
      double v17 = (OZScene *)(*(uint64_t (**)(OZWriggleBehavior *, __n128))(*(void *)this + 336))(this, v16);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2920), &v133, 0.0);
      OZScene::getTimeForFrame(v17, v18, &v136);
      CMTime time1 = v126;
      *(__n128 *)&time2.CMTimeValue value = v136;
      time2.CMTimeEpoch epoch = epoch;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v127);
      __n128 v136 = 0uLL;
      CMTimeEpoch epoch = 0;
      CMTime time1 = v135;
      CMTime time2 = v129;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        CMTime time1 = v135;
        *(__n128 *)&time2.CMTimeValue value = v127;
        time2.CMTimeEpoch epoch = v128;
        if (CMTimeCompare(&time1, &time2) <= 0) {
          double v15 = &v135;
        }
        else {
          double v15 = (CMTime *)&v127;
        }
      }
      __n128 v136 = *(__n128 *)&v15->value;
      CMTimeEpoch epoch = v15->epoch;
      CMTime time1 = *v15;
      CMTime time2 = v129;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v136);
      unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2616), &v133, 0.0);
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 2312), &v133, 0.0)
        && OZSingleChannelBehavior::getChanBase(this))
      {
        ValueAsInt ^= a2 & (*(unsigned __int8 *)(OZSingleChannelBehavior::getChanBase(this) + 57) << 27 >> 31);
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2464), &v133, 0.0)
        && OZWriggleBehavior::canAffectObjects(this))
      {
        ValueAsInt ^= a4;
      }
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1704), &v133, 0.0);
      double v21 = v20;
      *(__n128 *)&time.CMTimeValue value = v136;
      time.CMTimeEpoch epoch = epoch;
      double Seconds = CMTimeGetSeconds(&time);
      int v23 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1856), &v133, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1552), &v133, 0.0);
      double v25 = v24;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2008), &v133, 0.0);
      double v122 = v26;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2160), &v133, 0.0);
      double v121 = v27;
      int v28 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1296), &v133, 0.0);
      double v5 = a5;
      double v29 = v21 + Seconds;
      switch(v28)
      {
        case 0:
          if (v23 < 1)
          {
            double v50 = 0.5;
          }
          else
          {
            double v30 = a5;
            unsigned int v31 = 0;
            double v117 = v29 + v29;
            int v32 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            int v33 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            double v34 = -1.0;
            int v35 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            double v36 = 0.0;
            double v37 = 1.0;
            do
            {
              int v38 = (int)(v117 * v25);
              if (v38)
              {
                int v39 = -32;
                int v40 = -1640531527;
                unsigned int v41 = v31;
                unsigned int v42 = ValueAsInt;
                do
                {
                  v41 += (v38 + 16 * v42) ^ (v42 + v40) ^ (v32 + (v42 >> 5));
                  v42 += (v33 + 16 * v41) ^ (v40 + v41) ^ (v35 + (v41 >> 5));
                  v40 -= 1640531527;
                  BOOL v43 = __CFADD__(v39++, 1);
                }
                while (!v43);
                double v34 = (double)(int)(v42 ^ v41) / 2147483650.0;
              }
              int v44 = -32;
              int v45 = -1640531527;
              unsigned int v46 = v31;
              unsigned int v47 = ValueAsInt;
              do
              {
                v46 += (v38 + 1 + 16 * v47) ^ (v47 + v45) ^ (v32 + (v47 >> 5));
                v47 += (v33 + 16 * v46) ^ (v45 + v46) ^ (v35 + (v46 >> 5));
                v45 -= 1640531527;
                BOOL v43 = __CFADD__(v44++, 1);
              }
              while (!v43);
              double v48 = (double)(int)(v47 ^ v46) / 2147483650.0;
              long double v49 = cos((v117 * v25 - (double)v38) * 3.14159265);
              double v36 = v36 + v37 * ((1.0 - (1.0 - v49) * 0.5) * v34 + (1.0 - v49) * 0.5 * v48);
              double v25 = v122 * v25;
              double v37 = v121 * v37;
              ++v31;
              double v34 = 0.0;
            }
            while (v31 != v23);
            double v50 = (v36 + 1.0) * 0.5;
            a5 = v30;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          double v110 = v109 * v50;
          goto LABEL_78;
        case 1:
          if (v23 < 1)
          {
            double v70 = 0.5;
          }
          else
          {
            double v51 = a5;
            unsigned int v52 = 0;
            double v118 = v29 + v29;
            int v53 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            int v54 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            double v55 = -1.0;
            int v56 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            double v57 = 0.0;
            double v58 = 1.0;
            do
            {
              int v59 = (int)(v118 * v25);
              if (v59)
              {
                int v60 = -32;
                int v61 = -1640531527;
                unsigned int v62 = v52;
                unsigned int v63 = ValueAsInt;
                do
                {
                  v62 += (v59 + 16 * v63) ^ (v63 + v61) ^ (v53 + (v63 >> 5));
                  v63 += (v54 + 16 * v62) ^ (v61 + v62) ^ (v56 + (v62 >> 5));
                  v61 -= 1640531527;
                  BOOL v43 = __CFADD__(v60++, 1);
                }
                while (!v43);
                double v55 = (double)(int)(v63 ^ v62) / 2147483650.0;
              }
              int v64 = -32;
              int v65 = -1640531527;
              unsigned int v66 = v52;
              unsigned int v67 = ValueAsInt;
              do
              {
                v66 += (v59 + 1 + 16 * v67) ^ (v67 + v65) ^ (v53 + (v67 >> 5));
                v67 += (v54 + 16 * v66) ^ (v65 + v66) ^ (v56 + (v66 >> 5));
                v65 -= 1640531527;
                BOOL v43 = __CFADD__(v64++, 1);
              }
              while (!v43);
              double v68 = (double)(int)(v67 ^ v66) / 2147483650.0;
              long double v69 = cos((v118 * v25 - (double)v59) * 3.14159265);
              double v57 = v57 + v58 * ((1.0 - (1.0 - v69) * 0.5) * v55 + (1.0 - v69) * 0.5 * v68);
              double v25 = v122 * v25;
              double v58 = v121 * v58;
              ++v52;
              double v55 = 0.0;
            }
            while (v52 != v23);
            double v70 = (v57 + 1.0) * 0.5;
            a5 = v51;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          double v5 = a5 - v111 * v70;
          break;
        case 2:
          if (v23 < 1)
          {
            double v90 = 0.5;
          }
          else
          {
            double v71 = a5;
            unsigned int v72 = 0;
            double v119 = v29 + v29;
            int v73 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            int v74 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            double v75 = 0.0;
            int v76 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            double v77 = 1.0;
            double v78 = 1.0;
            do
            {
              int v79 = (int)(v119 * v25);
              if (v79)
              {
                int v80 = -32;
                int v81 = -1640531527;
                unsigned int v82 = v72;
                unsigned int v83 = ValueAsInt;
                do
                {
                  v82 += (v79 + 16 * v83) ^ (v83 + v81) ^ (v73 + (v83 >> 5));
                  v83 += (v74 + 16 * v82) ^ (v81 + v82) ^ (v76 + (v82 >> 5));
                  v81 -= 1640531527;
                  BOOL v43 = __CFADD__(v80++, 1);
                }
                while (!v43);
                double v78 = (double)(int)(v83 ^ v82) / 2147483650.0;
              }
              int v84 = -32;
              int v85 = -1640531527;
              unsigned int v86 = v72;
              unsigned int v87 = ValueAsInt;
              do
              {
                v86 += (v79 + 1 + 16 * v87) ^ (v87 + v85) ^ (v73 + (v87 >> 5));
                v87 += (v74 + 16 * v86) ^ (v85 + v86) ^ (v76 + (v86 >> 5));
                v85 -= 1640531527;
                BOOL v43 = __CFADD__(v84++, 1);
              }
              while (!v43);
              double v88 = (double)(int)(v87 ^ v86) / 2147483650.0;
              long double v89 = cos((v119 * v25 - (double)v79) * 3.14159265);
              double v75 = v75 + v77 * ((1.0 - (1.0 - v89) * 0.5) * v78 + (1.0 - v89) * 0.5 * v88);
              double v25 = v122 * v25;
              double v77 = v121 * v77;
              ++v72;
              double v78 = 0.0;
            }
            while (v72 != v23);
            double v90 = (v75 + 1.0) * 0.5;
            a5 = v71;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1144), &v133, 0.0);
          double v5 = v112 * v90 * a5;
          break;
        case 3:
          double v116 = a5;
          if (v23 < 1)
          {
            double v94 = 0.0;
          }
          else
          {
            unsigned int v91 = 0;
            double v120 = v29 + v29;
            int v92 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            int v93 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            double v94 = 0.0;
            int v95 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            double v96 = 1.0;
            do
            {
              int v97 = (int)(v120 * v25);
              double v98 = 0.0;
              if (v97)
              {
                int v99 = -32;
                int v100 = -1640531527;
                unsigned int v101 = v91;
                unsigned int v102 = ValueAsInt;
                do
                {
                  v101 += (v97 + 16 * v102) ^ (v102 + v100) ^ (v92 + (v102 >> 5));
                  v102 += (v93 + 16 * v101) ^ (v100 + v101) ^ (v95 + (v101 >> 5));
                  v100 -= 1640531527;
                  BOOL v43 = __CFADD__(v99++, 1);
                }
                while (!v43);
                double v98 = (double)(int)(v102 ^ v101) / 2147483650.0;
              }
              int v103 = -32;
              int v104 = -1640531527;
              unsigned int v105 = v91;
              unsigned int v106 = ValueAsInt;
              do
              {
                v105 += (v97 + 1 + 16 * v106) ^ (v106 + v104) ^ (v92 + (v106 >> 5));
                v106 += (v93 + 16 * v105) ^ (v104 + v105) ^ (v95 + (v105 >> 5));
                v104 -= 1640531527;
                BOOL v43 = __CFADD__(v103++, 1);
              }
              while (!v43);
              double v107 = (double)(int)(v106 ^ v105) / 2147483650.0;
              long double v108 = cos((v120 * v25 - (double)v97) * 3.14159265);
              double v94 = v94 + v96 * ((1.0 - (1.0 - v108) * 0.5) * v98 + (1.0 - v108) * 0.5 * v107);
              double v25 = v122 * v25;
              double v96 = v121 * v96;
              ++v91;
            }
            while (v91 != v23);
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          double v110 = v94 * v113;
          a5 = v116;
LABEL_78:
          double v5 = v110 + a5;
          break;
        default:
          break;
      }
      PCSharedMutex::lock((std::mutex *)((char *)this + 888));
      time1.CMTimeValue value = (CMTimeValue)v131;
      long long v114 = (double *)std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__emplace_unique_key_args<OZWriggleBehavior::ValueCacheKey,std::piecewise_construct_t const&,std::tuple<OZWriggleBehavior::ValueCacheKey const&>,std::tuple<>>((uint64_t **)this + 108, (uint64_t)v131, (uint64_t)&std::piecewise_construct, &time1);
      v114[9] = a5;
      v114[10] = v5;
      *((unsigned char *)v114 + 88) = 1;
      PCSharedMutex::unlock((std::mutex *)((char *)this + 888));
    }
    return v5;
  }
  return a5;
}

void sub_1B7D9D444(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZWriggleBehavior::solveNode(OZWriggleBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZWriggleBehavior::solveNode((OZWriggleBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZWriggleBehavior::didSetChannelInfo(OZWriggleBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  double v5 = (OZChannel *)((char *)this + 992);
  double v6 = *(double *)(*((void *)this + 140) + 40);
  OZChannel::setInfo((OZChannel *)((char *)this + 992), a2);
  double v7 = 1.0;
  if (!*((unsigned char *)this + 3224)) {
    double v7 = v6 / *((double *)a2 + 5);
  }
  double v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (double v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((void *)this + 140) + 40) + -57.2957795) >= 0.0000001) {
      double v10 = 100.0;
    }
    else {
      double v10 = 6.28318531;
    }
  }
  else
  {
    double v10 = v9 - v8;
    if (!*((unsigned char *)this + 3224))
    {
      double v11 = *((double *)this + 79);
      if (v11 < 3.40282347e38) {
        double v7 = v7 * (v10 / v11);
      }
    }
  }
  if (vabdd_f64(1.0, v7) >= 0.0000001) {
    OZChannel::scaleChannel(v5, v7);
  }
  OZChannel::setSliderMin(v5, 0.0);
  OZChannel::setSliderMax(v5, v10);
  (*(void (**)(void))(**(void **)(*((void *)this + 138) + 8) + 256))();
  if (v10 > 0.0) {
    OZChannel::setMax(v5, v10);
  }
}

uint64_t OZWriggleBehavior::parseBegin(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 3224) = 0;
  unsigned int v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (BOOL v5 = *((_DWORD *)a2 + 27) > 6u) : (BOOL v5 = 1), !v5))
  {
    *((unsigned char *)this + 3225) = 1;
    OZChannel::setValue((OZChannel *)((char *)this + 3072), MEMORY[0x1E4F1FA48], 1.0, 0);
  }

  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZWriggleBehavior::parseBegin(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  return OZWriggleBehavior::parseBegin((OZWriggleBehavior *)((char *)this - 48), a2);
}

uint64_t OZWriggleBehavior::parseElement(OZWriggleBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 110)
  {
    int v7 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v7);
    if (v7 == *((_DWORD *)this + 254)) {
      *((unsigned char *)this + 3224) = 1;
    }
  }
  return OZSingleChannelBehavior::parseElement((PCSerializer **)this, a2, a3);
}

uint64_t non-virtual thunk to'OZWriggleBehavior::parseElement(OZWriggleBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZWriggleBehavior::parseElement((OZWriggleBehavior *)((char *)this - 48), a2, a3);
}

uint64_t OZWriggleBehavior::parseEnd(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  if (!*((unsigned char *)this + 3224)) {
    *((void *)this + 79) = 0x4059000000000000;
  }
  return OZSingleChannelBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZWriggleBehavior::parseEnd(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  if (!*((unsigned char *)this + 3176)) {
    *((void *)this + 73) = 0x4059000000000000;
  }
  return OZSingleChannelBehavior::parseEnd((OZWriggleBehavior *)((char *)this - 48), a2);
}

uint64_t std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::find<OZWriggleBehavior::ValueCacheKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  char v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    a1 = OZWriggleBehavior::CompareKeys::operator()(a1, (uint64_t)(v3 + 4), a2);
    double v6 = v3 + 1;
    if (!a1)
    {
      double v6 = v3;
      uint64_t v5 = (uint64_t)v3;
    }
    char v3 = (void *)*v6;
  }
  while (*v6);
  if (v5 == v2 || OZWriggleBehavior::CompareKeys::operator()(a1, a2, v5 + 32)) {
    return v2;
  }
  return v5;
}

_OWORD *std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__emplace_unique_key_args<OZWriggleBehavior::ValueCacheKey,std::piecewise_construct_t const&,std::tuple<OZWriggleBehavior::ValueCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  double v6 = (void **)std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__find_equal<OZWriggleBehavior::ValueCacheKey>((uint64_t)a1, &v12, a2);
  int v7 = *v6;
  if (!*v6)
  {
    double v8 = (uint64_t **)v6;
    int v7 = operator new(0x60uLL);
    uint64_t v9 = *((void *)*a4 + 4);
    long long v10 = (*a4)[1];
    PCString v7[2] = **a4;
    v7[3] = v10;
    *((void *)v7 + 10) = 0;
    *((void *)v7 + 1OZLinkBehavior::clearAll(this, 1) = 0;
    *((void *)v7 + 8) = v9;
    *((void *)v7 + 9) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__find_equal<OZWriggleBehavior::ValueCacheKey>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        a1 = OZWriggleBehavior::CompareKeys::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!a1) {
          break;
        }
        unsigned int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      a1 = OZWriggleBehavior::CompareKeys::operator()(a1, v8, a3);
      if (!a1) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unsigned int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void OZZoomInOutBehavior::OZZoomInOutBehavior(OZZoomInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1185BD0;
  float64x2_t v5[2] = &unk_1F1185EF0;
  v5[6] = &unk_1F1186148;
  v5[42] = &unk_1F11861A0;
  v5[67] = &unk_1F11861C8;
  PCURL::PCURL((PCURL *)v7, @"Zoom In/Out Behavior Zoom");
  OZChannelDouble::OZChannelDouble((OZZoomInOutBehavior *)((char *)this + 864), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((void *)this + 159) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 864), -1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 1.0);
  uint64_t v8 = 0x500000004;
  *(_OWORD *)&v7[0].CMTime var0 = xmmword_1B8385840;
  OZChannelEnum::setTags((OZZoomInOutBehavior *)((char *)this + 1016), (char *)v7, 6);
}

void sub_1B7D9DB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior::OZZoomInOutBehavior(OZZoomInOutBehavior *this, const OZZoomInOutBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1185BD0;
  *(void *)(v5 + 16) = &unk_1F1185EF0;
  *(void *)(v5 + 48) = &unk_1F1186148;
  *(void *)(v5 + 336) = &unk_1F11861A0;
  *(void *)(v5 + 536) = &unk_1F11861C8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 108) = &unk_1F1100CF0;
  *((void *)this + 110) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016), (const OZZoomInOutBehavior *)((char *)a2 + 1016), v6);
  *((void *)this + 159) = 0;
}

void sub_1B7D9DCB4(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior::~OZZoomInOutBehavior(OZZoomInOutBehavior *this)
{
  *(void *)this = &unk_1F1185BD0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1185EF0;
  *((void *)this + 6) = &unk_1F1186148;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11861A0;
  *((void *)this + 67) = &unk_1F11861C8;
  OZChannelEnum::~OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZZoomInOutBehavior::~OZZoomInOutBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZZoomInOutBehavior::~OZZoomInOutBehavior(OZZoomInOutBehavior *this)
{
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 48));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 336));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZZoomInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);

  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

unint64_t OZZoomInOutBehavior::addCurveNodesToChannels(OZZoomInOutBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  {
    *((void *)this + 159) = v5;
    if (v5) {
      operator new();
    }
  }
  else
  {
    *((void *)this + 159) = 0;
  }
  return v4;
}

void sub_1B7D9E214(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZZoomInOutBehavior::solveNode(OZZoomInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  if ((*(unsigned int (**)(OZZoomInOutBehavior *, double))(*(void *)this + 768))(this, a4))
  {
    memset(&v29, 0, sizeof(v29));
    (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v29);
    __n128 v27 = 0uLL;
    CMTimeEpoch v28 = 0;
    uint64_t v8 = (*(uint64_t (**)(OZZoomInOutBehavior *))(*(void *)this + 336))(this);
    __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v27);
    (*(void (**)(CMTime *__return_ptr, OZZoomInOutBehavior *, __n128))(*(void *)this + 608))(&v24, this, FrameDuration);
    CMTime v23 = v24;
    memset(&v22, 0, sizeof(v22));
    *(_OWORD *)&time1.var0.CMTime var0 = v25;
    time1.var0.unsigned int var3 = v26;
    *(__n128 *)&v17.CMTimeValue value = v27;
    v17.CMTimeEpoch epoch = v28;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &v17, (uint64_t)&v22);
    time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v29;
    CMTime v17 = v23;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &v17, (uint64_t)__p);
    *(__n128 *)&time1.var0.CMTime var0 = v27;
    time1.var0.unsigned int var3 = v28;
    CMTime v17 = v22;
    long long v10 = CMTimeCompare((CMTime *)&time1, &v17) >= 0 ? &v27 : (__n128 *)&v22;
    *(__n128 *)&time1.var0.CMTime var0 = *v10;
    time1.var0.unsigned int var3 = v10[1].n128_i64[0];
    operator/((long long *)__p, (uint64_t)&time1, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0000001)
    {
      if (Seconds <= 0.9999999) {
        double v12 = Seconds;
      }
      else {
        double v12 = 1.0;
      }
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v29, 0.0);
      if (v13 <= -0.0000001 || v13 >= 0.0000001)
      {
        std::vector<double>::vector(__p, 4uLL);
        (*(void (**)(OZZoomInOutBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, __p);
        unsigned int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), MEMORY[0x1E4F1FA48], 0.0);
        OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v12);
        OZRenderState::OZRenderState(&time1);
        time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v29;
        __n128 v16 = (OZCamera *)*((void *)this + 159);
        CMTime v18 = v29;
        OZCamera::cameraAtTime(v16, &v18);
      }
    }
  }
  return a5;
}

void sub_1B7D9E7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZZoomInOutBehavior::solveNode(OZZoomInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZZoomInOutBehavior::solveNode((OZZoomInOutBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZZoomObjectBehavior::OZZoomObjectBehavior(OZZoomObjectBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *uint64_t v5 = &unk_1F1186240;
  float64x2_t v5[2] = &unk_1F1186560;
  v5[6] = &unk_1F11867B8;
  v5[42] = &unk_1F1186810;
  v5[67] = &unk_1F1186838;
  PCURL::PCURL((PCURL *)v7, @"Zoom Object Behavior Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZZoomObjectBehavior *)((char *)this + 864), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Zoom Object Behavior Transition");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Camera Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v6, @"Camera Behavior Speed Label");
  OZChannelEnum::OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, @"Zoom Object Behavior Zoom");
  OZChannelDouble::OZChannelDouble((OZZoomObjectBehavior *)((char *)this + 1432), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(v7);
  *((void *)this + 198) = 0;
  OZValueCache<OZZoomObjectCacheItem>::OZValueCache((uint64_t)this + 1592);
  OZChannel::setMin((OZChannel *)((char *)this + 1432), -1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1432), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1432), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1432), 1.0);
  uint64_t v8 = 0x500000004;
  *(_OWORD *)&v7[0].CMTime var0 = xmmword_1B8385870;
  OZChannelEnum::setTags((OZZoomObjectBehavior *)((char *)this + 1176), (char *)v7, 6);
}

void sub_1B7D9EB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(v16);
  OZChannel::~OZChannel(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior::OZZoomObjectBehavior(OZZoomObjectBehavior *this, const OZZoomObjectBehavior *a2, char a3)
{
  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1186240;
  *(void *)(v5 + 16) = &unk_1F1186560;
  *(void *)(v5 + 48) = &unk_1F11867B8;
  *(void *)(v5 + 336) = &unk_1F1186810;
  *(void *)(v5 + 536) = &unk_1F1186838;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZZoomObjectBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), (const OZChannelBase *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176), (const OZZoomObjectBehavior *)((char *)a2 + 1176), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1432), (const OZChannelBase *)((char *)a2 + 1432), v6);
  *((void *)this + 179) = &unk_1F1100CF0;
  *((void *)this + 18OZLinkBehavior::clearAll(this, 1) = &unk_1F1101050;
  *((void *)this + 198) = 0;
  OZValueCache<OZZoomObjectCacheItem>::OZValueCache((uint64_t)this + 1592);
}

void sub_1B7D9ED54(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior::~OZZoomObjectBehavior(OZZoomObjectBehavior *this)
{
  *(void *)this = &unk_1F1186240;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1186560;
  *((void *)this + 6) = &unk_1F11867B8;
  *((void *)this + 4OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1186810;
  *((void *)this + 67) = &unk_1F1186838;
  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache((uint64_t)this + 1592);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1432));
  OZChannelEnum::~OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZZoomObjectBehavior *)((char *)this + 864));

  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  uint64_t vars8;

  OZZoomObjectBehavior::~OZZoomObjectBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZZoomObjectBehavior::~OZZoomObjectBehavior(OZZoomObjectBehavior *this)
{
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 48));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 336));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

void OZZoomObjectBehavior::flushCache(OZZoomObjectBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 1592);

  OZCameraBehavior::flushCache(this);
}

uint64_t OZZoomObjectBehavior::operator=(uint64_t a1, const void *a2)
{
  OZCameraBehavior::operator=(a1);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1024, (uint64_t)v5 + 1024);
  OZChannelBase::operator=(a1 + 1432, (uint64_t)v5 + 1432);

  return OZChannelBase::operator=(a1 + 1176, (uint64_t)v5 + 1176);
}

unint64_t OZZoomObjectBehavior::addCurveNodesToChannels(OZZoomObjectBehavior *this, OZSceneNode *a2)
{
  unint64_t v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  {
    *((void *)this + 198) = v5;
    if (v5) {
      operator new();
    }
  }
  else
  {
    *((void *)this + 198) = 0;
  }
  return v4;
}

void sub_1B7D9F350(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZZoomObjectBehavior::solveNode(OZZoomObjectBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  if ((*(unsigned int (**)(OZZoomObjectBehavior *, double))(*(void *)this + 768))(this, a4))
  {
    TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
    if (TransformNode)
    {
      uint64_t v10 = (uint64_t)TransformNode;
      if (a2 < 3 || a2 == 100)
      {
        memset(&v63, 0, sizeof(v63));
        (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v63);
        __n128 v61 = 0uLL;
        CMTimeEpoch v62 = 0;
        uint64_t v11 = (*(uint64_t (**)(OZZoomObjectBehavior *))(*(void *)this + 336))(this);
        __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v61);
        (*(void (**)(CMTime *__return_ptr, OZZoomObjectBehavior *, __n128))(*(void *)this + 608))(&v58, this, FrameDuration);
        CMTime v57 = v58;
        memset(&v56, 0, sizeof(v56));
        *(_OWORD *)&time1.var0.CMTime var0 = v59;
        time1.var0.unsigned int var3 = v60;
        *(__n128 *)&time2.CMTimeValue value = v61;
        time2.CMTimeEpoch epoch = v62;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v56);
        time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v63;
        CMTime time2 = v57;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)v30);
        *(__n128 *)&time1.var0.CMTime var0 = v61;
        time1.var0.unsigned int var3 = v62;
        CMTime time2 = v56;
        double v13 = CMTimeCompare((CMTime *)&time1, &time2) >= 0 ? &v61 : (__n128 *)&v56;
        *(__n128 *)&time1.var0.CMTime var0 = *v13;
        time1.var0.unsigned int var3 = v13[1].n128_i64[0];
        operator/((long long *)v30, (uint64_t)&time1, (uint64_t)&time);
        double Seconds = CMTimeGetSeconds(&time);
        if (Seconds >= 0.0)
        {
          if (Seconds <= 1.0) {
            double v15 = Seconds;
          }
          else {
            double v15 = 1.0;
          }
          double v16 = 0.0;
          if (Seconds > 1.0)
          {
            if (a2 == 100) {
              uint64_t v17 = 3;
            }
            else {
              uint64_t v17 = a2;
            }
            time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v57;
            CMTime time2 = v56;
            PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)v30);
            double v16 = (*(double (**)(OZZoomObjectBehavior *, uint64_t, unsigned char *, double))(*(void *)this + 776))(this, v17, v30, a5);
          }
          v54[1] = 0xBFF0000000000000;
          v54[0] = &unk_1F11868B0;
          if (!OZValueCache<OZBoundsCacheItem>::find((uint64_t)this + 1592, (uint64_t)v54, v15))
          {
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1432), &v63, 0.0);
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1024), &v63, 0.0);
            double v20 = v19;
            if (v19 <= -0.0000001 || (double v21 = 1.0, v19 >= 0.0000001))
            {
              double v22 = v15 / v19;
              double v23 = 1.0;
              if (v15 / v20 <= 1.0) {
                double v23 = v15 / v20;
              }
              if (v22 >= 0.0) {
                double v21 = v23;
              }
              else {
                double v21 = 0.0;
              }
            }
            unsigned int ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1176), MEMORY[0x1E4F1FA48], 0.0);
            OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v21);
            memset(&v53, 0, sizeof(v53));
            if (v15 == 1.0)
            {
              time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v57;
              CMTime time2 = v56;
              PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)&v53);
            }
            else
            {
              CMTime v53 = v63;
            }
            OZRenderState::OZRenderState(&time1);
            time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v53;
            time1.var9 = 1;
            std::vector<double>::vector(&__p, 4uLL);
            (*(void (**)(OZZoomObjectBehavior *, const CMTime *, void **))(*(void *)this + 744))(this, a3, &__p);
            long long v49 = *(_OWORD *)__p;
            uint64_t v50 = *((void *)__p + 2);
            long long v47 = 0uLL;
            uint64_t v48 = 0;
            uint64_t v46 = 0x3FF0000000000000;
            uint64_t v43 = 0x3FF0000000000000;
            uint64_t v40 = 0x3FF0000000000000;
            time2.CMTimeValue value = 0x3FF0000000000000;
            *(_OWORD *)&time2.timescale = 0u;
            long long v39 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            OZTransformNode::getPivot(v10, &v47, (CMTime *)&time1);
            (*(void (**)(uint64_t, CMTime *, OZRenderState *))(*(void *)v10 + 1256))(v10, &time2, &time1);
            PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, (double *)&v47, (double *)&v47);
            time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v63;
            uint64_t v37 = 0x3FF0000000000000;
            uint64_t v34 = 0x3FF0000000000000;
            uint64_t v31 = 0x3FF0000000000000;
            *(void *)double v30 = 0x3FF0000000000000;
            memset(&v30[8], 0, 32);
            long long v32 = 0u;
            long long v33 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v25 = *(const void **)(*((void *)this + 198) + 960);
            if (v25)
            {
              if (v26) {
                (*(void (**)(void *, unsigned char *, OZRenderState *))(*(void *)v26 + 1256))(v26, v30, &time1);
              }
            }
            PCMatrix44Tmpl<double>::transform<double>((double *)v30, (double *)&v49, (double *)&v49);
            __n128 v27 = (OZCamera *)*((void *)this + 198);
            CMTime var0 = (CMTime)time1.var0;
            OZCamera::cameraAtTime(v27, &var0);
          }
          if (a2 > 1)
          {
            if (a2 == 2) {
              double v18 = *(double *)&v54[4];
            }
            else {
              double v18 = *(double *)&v54[5];
            }
          }
          else if (a2)
          {
            double v18 = *(double *)&v54[3];
          }
          else
          {
            double v18 = *(double *)&v54[2];
          }
          return v16 + v18;
        }
      }
    }
  }
  return a5;
}

void sub_1B7D9FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(&a28);
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZValueCache<OZZoomObjectCacheItem>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    std::list<OZProjectedBoundsCacheItem>::pop_front(a1 + 8);
  }
  uint64_t v5 = operator new(0x40uLL);
  v5[3] = *(void *)(a2 + 8);
  v5[1] = a1 + 8;
  float64x2_t v5[2] = &unk_1F11868B0;
  long long v6 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v5 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v5 + 3) = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  *uint64_t v5 = v7;
  *(void *)(v7 + 8) = v5;
  *(void *)(a1 + 8) = v5;
  ++*(void *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B7D9FE50(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'OZZoomObjectBehavior::solveNode(OZZoomObjectBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZZoomObjectBehavior::solveNode((OZZoomObjectBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

uint64_t OZValueCache<OZZoomObjectCacheItem>::OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F11868E8;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B7E782B0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B7D9FECC(_Unwind_Exception *a1)
{
  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F11868E8;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1B7DA056C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OZAttractedToBehavior_Factory::getInstance(OZAttractedToBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZAttractedToBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZAttractedToBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAttractedToBehavior_Factory::_instance;
}

uint64_t OZAttractorBehavior_Factory::getInstance(OZAttractorBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZAttractorBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZAttractorBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAttractorBehavior_Factory::_instance;
}

uint64_t OZDriftAttractorBehavior_Factory::getInstance(OZDriftAttractorBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDriftAttractorBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZDriftAttractorBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDriftAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDriftAttractorBehavior_Factory::_instance;
}

uint64_t OZDriftAttractedToBehavior_Factory::getInstance(OZDriftAttractedToBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDriftAttractedToBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZDriftAttractedToBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDriftAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDriftAttractedToBehavior_Factory::_instance;
}

uint64_t OZRepelFromBehavior_Factory::getInstance(OZRepelFromBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRepelFromBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRepelFromBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRepelFromBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRepelFromBehavior_Factory::_instance;
}

uint64_t OZRepelorBehavior_Factory::getInstance(OZRepelorBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRepelorBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRepelorBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRepelorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRepelorBehavior_Factory::_instance;
}

uint64_t OZGravityBehavior_Factory::getInstance(OZGravityBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGravityBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZGravityBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGravityBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGravityBehavior_Factory::_instance;
}

uint64_t OZThrowBehavior_Factory::getInstance(OZThrowBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZThrowBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZThrowBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZThrowBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZThrowBehavior_Factory::_instance;
}

uint64_t OZSpinBehavior_Factory::getInstance(OZSpinBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSpinBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZSpinBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSpinBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSpinBehavior_Factory::_instance;
}

uint64_t OZBrownianBehavior_Factory::getInstance(OZBrownianBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBrownianBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZBrownianBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior_Factory::_instance;
}

uint64_t OZAlignSimBehavior_Factory::getInstance(OZAlignSimBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZAlignSimBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZAlignSimBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAlignSimBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAlignSimBehavior_Factory::_instance;
}

uint64_t OZRotationalDragBehavior_Factory::getInstance(OZRotationalDragBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRotationalDragBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRotationalDragBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRotationalDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRotationalDragBehavior_Factory::_instance;
}

uint64_t OZSpringBehavior_Factory::getInstance(OZSpringBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSpringBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZSpringBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSpringBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSpringBehavior_Factory::_instance;
}

uint64_t OZViscousDragBehavior_Factory::getInstance(OZViscousDragBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZViscousDragBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZViscousDragBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior_Factory::_instance;
}

uint64_t OZWindBehavior_Factory::getInstance(OZWindBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZWindBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZWindBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWindBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWindBehavior_Factory::_instance;
}

uint64_t OZVortexAroundBehavior_Factory::getInstance(OZVortexAroundBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZVortexAroundBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZVortexAroundBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZVortexAroundBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZVortexAroundBehavior_Factory::_instance;
}

uint64_t OZVortexBehavior_Factory::getInstance(OZVortexBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZVortexBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZVortexBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZVortexBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZVortexBehavior_Factory::_instance;
}

uint64_t OZBoundsCollisionBehavior_Factory::getInstance(OZBoundsCollisionBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBoundsCollisionBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZBoundsCollisionBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBoundsCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBoundsCollisionBehavior_Factory::_instance;
}

uint64_t OZRampBehavior_Factory::getInstance(OZRampBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRampBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRampBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRampBehavior_Factory::_instance;
}

uint64_t OZExponentialBehavior_Factory::getInstance(OZExponentialBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZExponentialBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZExponentialBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZExponentialBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZExponentialBehavior_Factory::_instance;
}

uint64_t OZLogarithmicBehavior_Factory::getInstance(OZLogarithmicBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLogarithmicBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZLogarithmicBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLogarithmicBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLogarithmicBehavior_Factory::_instance;
}

uint64_t OZRateBehavior_Factory::getInstance(OZRateBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRateBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRateBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRateBehavior_Factory::_instance;
}

uint64_t OZGrowShrinkBehavior_Factory::getInstance(OZGrowShrinkBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGrowShrinkBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZGrowShrinkBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior_Factory::_instance;
}

uint64_t OZAverageBehavior_Factory::getInstance(OZAverageBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZAverageBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZAverageBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAverageBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAverageBehavior_Factory::_instance;
}

uint64_t OZRandomizeBehavior_Factory::getInstance(OZRandomizeBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRandomizeBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZRandomizeBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRandomizeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRandomizeBehavior_Factory::_instance;
}

uint64_t OZReverseBehavior_Factory::getInstance(OZReverseBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZReverseBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZReverseBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZReverseBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZReverseBehavior_Factory::_instance;
}

uint64_t OZNegateBehavior_Factory::getInstance(OZNegateBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZNegateBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZNegateBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZNegateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZNegateBehavior_Factory::_instance;
}

uint64_t OZStopBehavior_Factory::getInstance(OZStopBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZStopBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZStopBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZStopBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZStopBehavior_Factory::_instance;
}

uint64_t OZOscillateBehavior_Factory::getInstance(OZOscillateBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZOscillateBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZOscillateBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZOscillateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZOscillateBehavior_Factory::_instance;
}

uint64_t OZFadeInOutBehavior_Factory::getInstance(OZFadeInOutBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFadeInOutBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZFadeInOutBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior_Factory::_instance;
}

uint64_t OZSnapAlignBehavior_Factory::getInstance(OZSnapAlignBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSnapAlignBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZSnapAlignBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSnapAlignBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSnapAlignBehavior_Factory::_instance;
}

uint64_t OZFocusBehavior_Factory::getInstance(OZFocusBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFocusBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZFocusBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFocusBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFocusBehavior_Factory::_instance;
}

uint64_t OZFramingBehavior_Factory::getInstance(OZFramingBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFramingBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZFramingBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFramingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFramingBehavior_Factory::_instance;
}

uint64_t OZMoveToBehavior_Factory::getInstance(OZMoveToBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMoveToBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZMoveToBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMoveToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMoveToBehavior_Factory::_instance;
}

uint64_t OZPointAtBehavior_Factory::getInstance(OZPointAtBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZPointAtBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZPointAtBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZPointAtBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZPointAtBehavior_Factory::_instance;
}

uint64_t OZWriggleBehavior_Factory::getInstance(OZWriggleBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZWriggleBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZWriggleBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWriggleBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWriggleBehavior_Factory::_instance;
}

uint64_t OZGenericBehavior_Factory::getInstance(OZGenericBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGenericBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZGenericBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehavior_Factory::_instance;
}

uint64_t OZGenericBehaviorV1_Factory::getInstance(OZGenericBehaviorV1_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGenericBehaviorV1_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZGenericBehaviorV1_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehaviorV1_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehaviorV1_Factory::_instance;
}

uint64_t OZGenericBehaviorV2_Factory::getInstance(OZGenericBehaviorV2_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGenericBehaviorV2_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZGenericBehaviorV2_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehaviorV2_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehaviorV2_Factory::_instance;
}

uint64_t OZAlignToBehavior_Factory::getInstance(OZAlignToBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZAlignToBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZAlignToBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAlignToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAlignToBehavior_Factory::_instance;
}

uint64_t OZ3DEnginePhysicsBehavior_Factory::getInstance(OZ3DEnginePhysicsBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEnginePhysicsBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZ3DEnginePhysicsBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePhysicsBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePhysicsBehavior_Factory::_instance;
}

uint64_t OZ3DEngineApplyForceBehavior_Factory::getInstance(OZ3DEngineApplyForceBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEngineApplyForceBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZ3DEngineApplyForceBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineApplyForceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineApplyForceBehavior_Factory::_instance;
}

uint64_t OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(OZ3DEnginePhysicsFieldBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEnginePhysicsFieldBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZ3DEnginePhysicsFieldBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePhysicsFieldBehavior_Factory::_instance;
}

uint64_t OZ3DEngineScenePlacementBehavior_Factory::getInstance(OZ3DEngineScenePlacementBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEngineScenePlacementBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZ3DEngineScenePlacementBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineScenePlacementBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineScenePlacementBehavior_Factory::_instance;
}

uint64_t BHOvershootBehavior_Factory::getInstance(BHOvershootBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&BHOvershootBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&BHOvershootBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<BHOvershootBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return BHOvershootBehavior_Factory::_instance;
}

uint64_t OZDiscreteBehavior_Factory::getInstance(OZDiscreteBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDiscreteBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZDiscreteBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDiscreteBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDiscreteBehavior_Factory::_instance;
}

uint64_t OZClampBehavior_Factory::getInstance(OZClampBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZClampBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZClampBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZClampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZClampBehavior_Factory::_instance;
}

uint64_t OZDollyInOutBehavior_Factory::getInstance(OZDollyInOutBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZDollyInOutBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZDollyInOutBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDollyInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDollyInOutBehavior_Factory::_instance;
}

uint64_t OZPanBehavior_Factory::getInstance(OZPanBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZPanBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZPanBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZPanBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZPanBehavior_Factory::_instance;
}

uint64_t OZZoomInOutBehavior_Factory::getInstance(OZZoomInOutBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZZoomInOutBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZZoomInOutBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZZoomInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZZoomInOutBehavior_Factory::_instance;
}

uint64_t OZZoomObjectBehavior_Factory::getInstance(OZZoomObjectBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZZoomObjectBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unint64_t v4 = &v2;
    char v3 = &v4;
    std::__call_once(&OZZoomObjectBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZZoomObjectBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZZoomObjectBehavior_Factory::_instance;
}

void std::__call_once_param<std::tuple<OZAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA1B50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::OZAttractedToBehavior_Factory(OZAttractedToBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C40;
  long long v5 = xmmword_1B83858F0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186918;
  *((void *)this + 18) = &unk_1F11869F8;
}

void sub_1B7DA1C18(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::create(OZAttractedToBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA1C8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::createCopy(OZAttractedToBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA1D50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZAttractedToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Attracted To Behavior");
}

void OZAttractedToBehavior_Factory::createBehaviorCopy(OZAttractedToBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA1E3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA1EC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::OZAttractorBehavior_Factory(OZAttractorBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C80;
  long long v5 = xmmword_1B8385900;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186A50;
  *((void *)this + 18) = &unk_1F1186B30;
}

void sub_1B7DA1F8C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::create(OZAttractorBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA2000(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::createCopy(OZAttractorBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA20C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZAttractorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Attractor Behavior");
}

void OZAttractorBehavior_Factory::createBehaviorCopy(OZAttractorBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA21B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZDriftAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA2238(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::OZDriftAttractorBehavior_Factory(OZDriftAttractorBehavior_Factory *this)
{
  long long v4 = xmmword_1B8385900;
  long long v5 = xmmword_1B8385910;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186B88;
  *((void *)this + 18) = &unk_1F1186C68;
}

void sub_1B7DA2300(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::create(OZDriftAttractorBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA2374(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::createCopy(OZDriftAttractorBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA2438(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZDriftAttractorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Drift Attractor Behavior");
}

void OZDriftAttractorBehavior_Factory::createBehaviorCopy(OZDriftAttractorBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA2524(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZDriftAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA25AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::OZDriftAttractedToBehavior_Factory(OZDriftAttractedToBehavior_Factory *this)
{
  long long v4 = xmmword_1B83858F0;
  long long v5 = xmmword_1B8385920;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186CC0;
  *((void *)this + 18) = &unk_1F1186DA0;
}

void sub_1B7DA2674(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::create(OZDriftAttractedToBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA26E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::createCopy(OZDriftAttractedToBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA27AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZDriftAttractedToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Drift Attracted To Behavior");
}

void OZDriftAttractedToBehavior_Factory::createBehaviorCopy(OZDriftAttractedToBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA2898(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRepelFromBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA2920(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::OZRepelFromBehavior_Factory(OZRepelFromBehavior_Factory *this)
{
  long long v4 = xmmword_1B83858F0;
  long long v5 = xmmword_1B8385930;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186DF8;
  *((void *)this + 18) = &unk_1F1186ED8;
}

void sub_1B7DA29E8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::create(OZRepelFromBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA2A5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::createCopy(OZRepelFromBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA2B20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRepelFromBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Repel From Behavior");
}

void OZRepelFromBehavior_Factory::createBehaviorCopy(OZRepelFromBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA2C0C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRepelorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA2C94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::OZRepelorBehavior_Factory(OZRepelorBehavior_Factory *this)
{
  long long v4 = xmmword_1B8385900;
  long long v5 = xmmword_1B8385940;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1186F30;
  *((void *)this + 18) = &unk_1F1187010;
}

void sub_1B7DA2D5C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::create(OZRepelorBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA2DD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::createCopy(OZRepelorBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA2E94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRepelorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Repel Behavior");
}

void OZRepelorBehavior_Factory::createBehaviorCopy(OZRepelorBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA2F80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZGravityBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA3008(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::OZGravityBehavior_Factory(OZGravityBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8385950;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187068;
  *((void *)this + 18) = &unk_1F1187148;
}

void sub_1B7DA30D0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::create(OZGravityBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA3144(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::createCopy(OZGravityBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA3208(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZGravityBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Gravity Behavior");
}

void OZGravityBehavior_Factory::createBehaviorCopy(OZGravityBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA32F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZThrowBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA337C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::OZThrowBehavior_Factory(OZThrowBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8385960;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11871A0;
  *((void *)this + 18) = &unk_1F1187280;
}

void sub_1B7DA3444(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::create(OZThrowBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA34B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::createCopy(OZThrowBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA357C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZThrowBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Throw Behavior");
}

PCString *OZThrowBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Basic Motion");
}

void OZThrowBehavior_Factory::createBehaviorCopy(OZThrowBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA3678(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSpinBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA3700(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::OZSpinBehavior_Factory(OZSpinBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8385970;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11872D8;
  *((void *)this + 18) = &unk_1F11873B8;
}

void sub_1B7DA37C8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::create(OZSpinBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA383C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::createCopy(OZSpinBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA3900(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSpinBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Spin Behavior");
}

void OZSpinBehavior_Factory::createBehaviorCopy(OZSpinBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA39EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZBrownianBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA3A74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::OZBrownianBehavior_Factory(OZBrownianBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8385980;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187410;
  *((void *)this + 18) = &unk_1F11874F0;
}

void sub_1B7DA3B3C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::create(OZBrownianBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA3BB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::createCopy(OZBrownianBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA3C74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZBrownianBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Random Motion Behavior");
}

void OZBrownianBehavior_Factory::createBehaviorCopy(OZBrownianBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA3D60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZAlignSimBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA3DE8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::OZAlignSimBehavior_Factory(OZAlignSimBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8385990;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187548;
  *((void *)this + 18) = &unk_1F1187628;
}

void sub_1B7DA3EB0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::create(OZAlignSimBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA3F24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::createCopy(OZAlignSimBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA3FE8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZAlignSimBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Align To Motion (Simulation) Behavior");
}

void OZAlignSimBehavior_Factory::createBehaviorCopy(OZAlignSimBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA40D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRotationalDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA415C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::OZRotationalDragBehavior_Factory(OZRotationalDragBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B83859A0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187680;
  *((void *)this + 18) = &unk_1F1187760;
}

void sub_1B7DA4224(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::create(OZRotationalDragBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA4298(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::createCopy(OZRotationalDragBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA435C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRotationalDragBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rotational Drag Behavior");
}

void OZRotationalDragBehavior_Factory::createBehaviorCopy(OZRotationalDragBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA4448(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSpringBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA44D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::OZSpringBehavior_Factory(OZSpringBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B83859B0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11877B8;
  *((void *)this + 18) = &unk_1F1187898;
}

void sub_1B7DA4598(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::create(OZSpringBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA460C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::createCopy(OZSpringBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA46D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSpringBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Spring Behavior");
}

void OZSpringBehavior_Factory::createBehaviorCopy(OZSpringBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA47BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA4844(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::OZViscousDragBehavior_Factory(OZViscousDragBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B83859C0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11878F0;
  *((void *)this + 18) = &unk_1F11879D0;
}

void sub_1B7DA490C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::create(OZViscousDragBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA4980(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::createCopy(OZViscousDragBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA4A44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZViscousDragBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Viscous Drag Behavior");
}

void OZViscousDragBehavior_Factory::createBehaviorCopy(OZViscousDragBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA4B30(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZWindBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA4BB8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::OZWindBehavior_Factory(OZWindBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B83859D0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187A28;
  *((void *)this + 18) = &unk_1F1187B08;
}

void sub_1B7DA4C80(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::create(OZWindBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA4CF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::createCopy(OZWindBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA4DB8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZWindBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Wind Behavior");
}

void OZWindBehavior_Factory::createBehaviorCopy(OZWindBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA4EA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZVortexAroundBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA4F2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::OZVortexAroundBehavior_Factory(OZVortexAroundBehavior_Factory *this)
{
  long long v4 = xmmword_1B83858F0;
  long long v5 = xmmword_1B83859E0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187B60;
  *((void *)this + 18) = &unk_1F1187C40;
}

void sub_1B7DA4FF4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::create(OZVortexAroundBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA5068(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::createCopy(OZVortexAroundBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA512C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZVortexAroundBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Vortex Around Behavior");
}

void OZVortexAroundBehavior_Factory::createBehaviorCopy(OZVortexAroundBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA5218(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZVortexBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA52A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::OZVortexBehavior_Factory(OZVortexBehavior_Factory *this)
{
  long long v4 = xmmword_1B8385900;
  long long v5 = xmmword_1B83859F0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187C98;
  *((void *)this + 18) = &unk_1F1187D78;
}

void sub_1B7DA5368(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::create(OZVortexBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA53DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::createCopy(OZVortexBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA54A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZVortexBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Vortex Behavior");
}

void OZVortexBehavior_Factory::createBehaviorCopy(OZVortexBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA558C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZBoundsCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA5614(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::OZBoundsCollisionBehavior_Factory(OZBoundsCollisionBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380CA0;
  long long v5 = xmmword_1B8385A00;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187DD0;
  *((void *)this + 18) = &unk_1F1187EB0;
}

void sub_1B7DA56DC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::create(OZBoundsCollisionBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA5750(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::createCopy(OZBoundsCollisionBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA5814(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZBoundsCollisionBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Edge Collision Behavior");
}

void OZBoundsCollisionBehavior_Factory::createBehaviorCopy(OZBoundsCollisionBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA5900(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA5988(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::OZRampBehavior_Factory(OZRampBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385A10;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1187F08;
  *((void *)this + 18) = &unk_1F1187FE8;
}

void sub_1B7DA5A40(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::create(OZRampBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA5ADC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::createCopy(OZRampBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA5BA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRampBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Ramp Behavior");
}

void OZRampBehavior_Factory::createBehaviorCopy(OZRampBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA5C8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZExponentialBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA5D14(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::OZExponentialBehavior_Factory(OZExponentialBehavior_Factory *this)
{
  long long v3 = xmmword_1B8385A10;
  long long v4 = xmmword_1B8385A20;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188040;
  *((void *)this + 18) = &unk_1F1188120;
}

void sub_1B7DA5DCC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::create(OZExponentialBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA5E68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::createCopy(OZExponentialBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA5F2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZExponentialBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Exponential Behavior");
}

void OZExponentialBehavior_Factory::createBehaviorCopy(OZExponentialBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA6018(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZLogarithmicBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA60A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::OZLogarithmicBehavior_Factory(OZLogarithmicBehavior_Factory *this)
{
  long long v3 = xmmword_1B8385A10;
  long long v4 = xmmword_1B8385A30;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188178;
  *((void *)this + 18) = &unk_1F1188258;
}

void sub_1B7DA6158(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::create(OZLogarithmicBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA61F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::createCopy(OZLogarithmicBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA62B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZLogarithmicBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Logarithmic Behavior");
}

void OZLogarithmicBehavior_Factory::createBehaviorCopy(OZLogarithmicBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA63A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA642C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::OZRateBehavior_Factory(OZRateBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385A40;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11882B0;
  *((void *)this + 18) = &unk_1F1188390;
}

void sub_1B7DA64E4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::create(OZRateBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA6580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::createCopy(OZRateBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA6644(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rate Behavior");
}

void OZRateBehavior_Factory::createBehaviorCopy(OZRateBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA6730(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA67B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::OZGrowShrinkBehavior_Factory(OZGrowShrinkBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385A50;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11883E8;
  *((void *)this + 18) = &unk_1F11884C8;
}

void sub_1B7DA6880(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::create(OZGrowShrinkBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA691C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::createCopy(OZGrowShrinkBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA69E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZGrowShrinkBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Grow/Shrink Behavior");
}

void OZGrowShrinkBehavior_Factory::createBehaviorCopy(OZGrowShrinkBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA6ACC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZAverageBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA6B54(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::OZAverageBehavior_Factory(OZAverageBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385A60;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188520;
  *((void *)this + 18) = &unk_1F1188600;
}

void sub_1B7DA6C0C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::create(OZAverageBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA6CA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::createCopy(OZAverageBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA6D6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZAverageBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Average Behavior");
}

void OZAverageBehavior_Factory::createBehaviorCopy(OZAverageBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA6E58(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRandomizeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA6EE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::OZRandomizeBehavior_Factory(OZRandomizeBehavior_Factory *this)
{
  long long v3 = xmmword_1B8385A80;
  long long v4 = xmmword_1B8385A70;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188658;
  *((void *)this + 18) = &unk_1F1188738;
}

void sub_1B7DA6F98(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::create(OZRandomizeBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA7034(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::createCopy(OZRandomizeBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA70F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRandomizeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Randomize Behavior");
}

void OZRandomizeBehavior_Factory::createBehaviorCopy(OZRandomizeBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA71E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZReverseBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA726C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::OZReverseBehavior_Factory(OZReverseBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385A90;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188790;
  *((void *)this + 18) = &unk_1F1188870;
}

void sub_1B7DA7324(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::create(OZReverseBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA73C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::createCopy(OZReverseBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA7484(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZReverseBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Reverse Behavior");
}

void OZReverseBehavior_Factory::createBehaviorCopy(OZReverseBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA7570(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZNegateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA75F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::OZNegateBehavior_Factory(OZNegateBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385AA0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11888C8;
  *((void *)this + 18) = &unk_1F11889A8;
}

void sub_1B7DA76B0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::create(OZNegateBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA774C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::createCopy(OZNegateBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA7810(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZNegateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Negate Behavior");
}

void OZNegateBehavior_Factory::createBehaviorCopy(OZNegateBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA78FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZStopBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA7984(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::OZStopBehavior_Factory(OZStopBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385AB0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188A00;
  *((void *)this + 18) = &unk_1F1188AE0;
}

void sub_1B7DA7A3C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::create(OZStopBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA7AD8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::createCopy(OZStopBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA7B9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZStopBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Stop Behavior");
}

void OZStopBehavior_Factory::createBehaviorCopy(OZStopBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA7C88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZOscillateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA7D10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::OZOscillateBehavior_Factory(OZOscillateBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385AC0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188B38;
  *((void *)this + 18) = &unk_1F1188C18;
}

void sub_1B7DA7DC8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::create(OZOscillateBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA7E64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::createCopy(OZOscillateBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA7F28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZOscillateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Oscillate Behavior");
}

void OZOscillateBehavior_Factory::createBehaviorCopy(OZOscillateBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA8014(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA809C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::OZFadeInOutBehavior_Factory(OZFadeInOutBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385AD0;
  long long v3 = xmmword_1B7E78B90;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188C70;
  *((void *)this + 18) = &unk_1F1188D50;
}

void sub_1B7DA8164(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::create(OZFadeInOutBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA8200(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::createCopy(OZFadeInOutBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA82C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZFadeInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Fade In/Fade Out Behavior");
}

void OZFadeInOutBehavior_Factory::createBehaviorCopy(OZFadeInOutBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA83B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSnapAlignBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA8438(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::OZSnapAlignBehavior_Factory(OZSnapAlignBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385AE0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188DA8;
  *((void *)this + 18) = &unk_1F1188E88;
}

void sub_1B7DA8500(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::create(OZSnapAlignBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA859C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::createCopy(OZSnapAlignBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA8660(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSnapAlignBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Snap Alignment to Motion Behavior");
}

void OZSnapAlignBehavior_Factory::createBehaviorCopy(OZSnapAlignBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA874C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZFocusBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA87D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::OZFocusBehavior_Factory(OZFocusBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385AF0;
  long long v3 = xmmword_1B837FEA0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1188EE0;
  *((void *)this + 18) = &unk_1F1188FC0;
}

void sub_1B7DA889C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::create(OZFocusBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA8938(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::createCopy(OZFocusBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA89FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZFocusBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Focus Behavior");
}

void OZFocusBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZFocusBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Camera");
}

void OZFocusBehavior_Factory::createBehaviorCopy(OZFocusBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA8B10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZFramingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA8B98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::OZFramingBehavior_Factory(OZFramingBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B00;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189018;
  *((void *)this + 18) = &unk_1F11890F8;
}

void sub_1B7DA8C60(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::create(OZFramingBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA8CFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::createCopy(OZFramingBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA8DC0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZFramingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Framing Behavior");
}

void OZFramingBehavior_Factory::createBehaviorCopy(OZFramingBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA8EAC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZMoveToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA8F34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::OZMoveToBehavior_Factory(OZMoveToBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B10;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189150;
  *((void *)this + 18) = &unk_1F1189230;
}

void sub_1B7DA8FFC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::create(OZMoveToBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA9098(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::createCopy(OZMoveToBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA915C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZMoveToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Move To Behavior");
}

void OZMoveToBehavior_Factory::createBehaviorCopy(OZMoveToBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA9248(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZPointAtBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA92D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::OZPointAtBehavior_Factory(OZPointAtBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B20;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189288;
  *((void *)this + 18) = &unk_1F1189368;
}

void sub_1B7DA9398(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::create(OZPointAtBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA9434(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::createCopy(OZPointAtBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA94F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZPointAtBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Point At Behavior");
}

void OZPointAtBehavior_Factory::createBehaviorCopy(OZPointAtBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA95E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZWriggleBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA966C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::OZWriggleBehavior_Factory(OZWriggleBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385A80;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11893C0;
  *((void *)this + 18) = &unk_1F11894A0;
}

void sub_1B7DA9724(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::create(OZWriggleBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA97C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::createCopy(OZWriggleBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA9884(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZWriggleBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Wriggle Behavior");
}

void OZWriggleBehavior_Factory::createBehaviorCopy(OZWriggleBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA9970(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZGenericBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA99F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::OZGenericBehavior_Factory(OZGenericBehavior_Factory *this)
{
  long long v3 = xmmword_1B7E78BB0;
  long long v4 = xmmword_1B8385B30;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11894F8;
  *((void *)this + 18) = &unk_1F11895D8;
}

void sub_1B7DA9AB0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::create(OZGenericBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DA9B4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::createCopy(OZGenericBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA9C10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZGenericBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Custom Behavior");
}

void OZGenericBehavior_Factory::createBehaviorCopy(OZGenericBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DA9CFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZGenericBehaviorV1_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DA9D84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV1_Factory::OZGenericBehaviorV1_Factory(OZGenericBehaviorV1_Factory *this)
{
  long long v3 = xmmword_1B8385B30;
  long long v4 = xmmword_1B8385B40;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189630;
  *((void *)this + 18) = &unk_1F1189710;
}

void sub_1B7DA9E3C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV1_Factory::create(OZGenericBehaviorV1_Factory *this, const PCString *a2)
{
}

void sub_1B7DA9ED8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV1_Factory::createCopy(OZGenericBehaviorV1_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DA9F9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV1_Factory::createBehaviorCopy(OZGenericBehaviorV1_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAA060(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZGenericBehaviorV2_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAA0D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV2_Factory::OZGenericBehaviorV2_Factory(OZGenericBehaviorV2_Factory *this)
{
  long long v3 = xmmword_1B7E78BB0;
  long long v4 = xmmword_1B8385B50;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189768;
  *((void *)this + 18) = &unk_1F1189848;
}

void sub_1B7DAA188(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV2_Factory::create(OZGenericBehaviorV2_Factory *this, const PCString *a2)
{
}

void sub_1B7DAA224(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV2_Factory::createCopy(OZGenericBehaviorV2_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAA2E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

uint64_t OZGenericBehaviorV2_Factory::revision(OZGenericBehaviorV2_Factory *this)
{
  return 5;
}

void OZGenericBehaviorV2_Factory::createBehaviorCopy(OZGenericBehaviorV2_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAA3B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZAlignToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAA424(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::OZAlignToBehavior_Factory(OZAlignToBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B60;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11898A0;
  *((void *)this + 18) = &unk_1F1189980;
}

void sub_1B7DAA4EC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::create(OZAlignToBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAA588(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::createCopy(OZAlignToBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAA64C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZAlignToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Align To Behavior");
}

void OZAlignToBehavior_Factory::createBehaviorCopy(OZAlignToBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAA738(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZ3DEnginePhysicsBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAA7C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior_Factory::OZ3DEnginePhysicsBehavior_Factory(OZ3DEnginePhysicsBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B70;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11899D8;
  *((void *)this + 18) = &unk_1F1189AB8;
}

void sub_1B7DAA888(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior_Factory::create(OZ3DEnginePhysicsBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAA924(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior_Factory::createCopy(OZ3DEnginePhysicsBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAA9E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Physics Behavior");
}

PCString *OZ3DEnginePhysicsBehavior_Factory::getCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulations Behavior Category");
}

void OZ3DEnginePhysicsBehavior_Factory::createBehaviorCopy(OZ3DEnginePhysicsBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAAACC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Enable physics simulation on a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEngineApplyForceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAAB4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEngineApplyForceBehavior_Factory::OZ3DEngineApplyForceBehavior_Factory(OZ3DEngineApplyForceBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8383180;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189B10;
  *((void *)this + 18) = &unk_1F1189BF0;
}

void sub_1B7DAAC14(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineApplyForceBehavior_Factory::create(OZ3DEngineApplyForceBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAACB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

void OZ3DEngineApplyForceBehavior_Factory::createCopy(OZ3DEngineApplyForceBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAAD74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineApplyForceBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply Force");
}

void OZ3DEngineApplyForceBehavior_Factory::createBehaviorCopy(OZ3DEngineApplyForceBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAAE48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineApplyForceBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply a force to a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAAEC8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior_Factory::OZ3DEnginePhysicsFieldBehavior_Factory(OZ3DEnginePhysicsFieldBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8383190;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189C48;
  *((void *)this + 18) = &unk_1F1189D28;
}

void sub_1B7DAAF90(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior_Factory::create(OZ3DEnginePhysicsFieldBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAB02C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior_Factory::createCopy(OZ3DEnginePhysicsFieldBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAB0F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsFieldBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Physics Field");
}

void OZ3DEnginePhysicsFieldBehavior_Factory::createBehaviorCopy(OZ3DEnginePhysicsFieldBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAB1C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsFieldBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply a physics field to a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEngineScenePlacementBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAB244(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior_Factory::OZ3DEngineScenePlacementBehavior_Factory(OZ3DEngineScenePlacementBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385B80;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189D80;
  *((void *)this + 18) = &unk_1F1189E60;
}

void sub_1B7DAB30C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior_Factory::create(OZ3DEngineScenePlacementBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAB3A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior_Factory::createCopy(OZ3DEngineScenePlacementBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAB46C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineScenePlacementBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Place In Scene");
}

void OZ3DEngineScenePlacementBehavior_Factory::createBehaviorCopy(OZ3DEngineScenePlacementBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAB540(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineScenePlacementBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Place an object in a 3D Scene.");
}

void std::__call_once_param<std::tuple<BHOvershootBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAB5C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::BHOvershootBehavior_Factory(BHOvershootBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385B90;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189EB8;
  *((void *)this + 18) = &unk_1F1189F98;
}

void sub_1B7DAB678(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::create(BHOvershootBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAB714(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::createCopy(BHOvershootBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAB7D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *BHOvershootBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Overshoot Behavior");
}

void BHOvershootBehavior_Factory::createBehaviorCopy(BHOvershootBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAB8C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZDiscreteBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAB94C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::OZDiscreteBehavior_Factory(OZDiscreteBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385BA0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1189FF0;
  *((void *)this + 18) = &unk_1F118A0D0;
}

void sub_1B7DABA04(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::create(OZDiscreteBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DABAA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::createCopy(OZDiscreteBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DABB64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZDiscreteBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Discrete Behavior");
}

void OZDiscreteBehavior_Factory::createBehaviorCopy(OZDiscreteBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DABC50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZClampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DABCD8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::OZClampBehavior_Factory(OZClampBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8385BB0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F118A128;
  *((void *)this + 18) = &unk_1F118A208;
}

void sub_1B7DABD90(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::create(OZClampBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DABE2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::createCopy(OZClampBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DABEF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZClampBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Clamp Behavior");
}

void OZClampBehavior_Factory::createBehaviorCopy(OZClampBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DABFDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZDollyInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAC064(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::OZDollyInOutBehavior_Factory(OZDollyInOutBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385BC0;
  long long v3 = xmmword_1B837FEA0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F118A260;
  *((void *)this + 18) = &unk_1F118A340;
}

void sub_1B7DAC12C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::create(OZDollyInOutBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAC1C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::createCopy(OZDollyInOutBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAC28C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZDollyInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Dolly In/Out Behavior");
}

void OZDollyInOutBehavior_Factory::createBehaviorCopy(OZDollyInOutBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAC378(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZPanBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAC400(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::OZPanBehavior_Factory(OZPanBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385BD0;
  long long v3 = xmmword_1B837FEA0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F118A398;
  *((void *)this + 18) = &unk_1F118A478;
}

void sub_1B7DAC4C8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::create(OZPanBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAC564(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::createCopy(OZPanBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAC628(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZPanBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pan Behavior");
}

void OZPanBehavior_Factory::createBehaviorCopy(OZPanBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DAC714(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZZoomInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DAC79C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::OZZoomInOutBehavior_Factory(OZZoomInOutBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385BE0;
  long long v3 = xmmword_1B837FEA0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F118A4D0;
  *((void *)this + 18) = &unk_1F118A5B0;
}

void sub_1B7DAC864(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::create(OZZoomInOutBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DAC900(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::createCopy(OZZoomInOutBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DAC9C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZZoomInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Zoom In/Out Behavior");
}

void OZZoomInOutBehavior_Factory::createBehaviorCopy(OZZoomInOutBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DACAB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZZoomObjectBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7DACB38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::OZZoomObjectBehavior_Factory(OZZoomObjectBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8385BF0;
  long long v3 = xmmword_1B837FEA0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F118A608;
  *((void *)this + 18) = &unk_1F118A6E8;
}

void sub_1B7DACC00(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::create(OZZoomObjectBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7DACC9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::createCopy(OZZoomObjectBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7DACD60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZZoomObjectBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Zoom Object Behavior");
}

void OZZoomObjectBehavior_Factory::createBehaviorCopy(OZZoomObjectBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7DACE4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void PSEmitter::PSEmitter(PSEmitter *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *long long v5 = &unk_1F118A740;
  v5[25] = &unk_1F118A9E0;
  v5[27] = &unk_1F118B2B8;
  v5[31] = &unk_1F118B510;
  v5[841] = &unk_1F118B568;
  PCString::PCString(&v166, "Channel ParticleTypes");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18976), &v166, (OZChannelFolder *)((char *)this + 256), 0x12Cu, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v6, @"Emitter Shape Options");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19104), &v166, (OZChannelFolder *)((char *)this + 648), 0x12Du, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v7, @"Emitter Shape Enum 2D");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Shape Type");
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19232), &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v8, @"Emitter Shape Anim Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Shape Anim");
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19488), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x15Au, 2, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v9, @"Emitter Emit At Points");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19744), &v166, (OZChannelFolder *)((char *)this + 19104), 0x12Fu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v10, @"Emitter Emit Pattern Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Emit Pattern Type");
  Instance = (OZChannelImpl *)PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(v11);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19896), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x148u, 0, Instance, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v13, @"Emitter Num Points");
  double v15 = (PSEmitter::PSEmitter_numPointsChanInfo *)PSEmitter::PSEmitter_numPointsChanImpl::getInstance(v14);
  double v16 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsChanInfo::getInstance(v15);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20152), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x130u, 0, (OZChannelImpl *)v15, v16);
  PCString::~PCString(&v166);
  PCURL::PCURL(v17, @"Emitter Num Points U");
  double v19 = (PSEmitter::PSEmitter_numPointsUChanInfo *)PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(v18);
  double v20 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(v19);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20304), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x131u, 0, (OZChannelImpl *)v19, v20);
  PCString::~PCString(&v166);
  PCURL::PCURL(v21, @"Emitter Num Points V");
  double v23 = (PSEmitter::PSEmitter_numPointsVChanInfo *)PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(v22);
  CMTime v24 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(v23);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20456), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x132u, 0, (OZChannelImpl *)v23, v24);
  PCString::~PCString(&v166);
  PCURL::PCURL(v25, @"Emitter Num Points W");
  __n128 v27 = (PSEmitter::PSEmitter_numPointsWChanInfo *)PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(v26);
  CMTimeEpoch v28 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(v27);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20608), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x167u, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v166);
  PCURL::PCURL(v29, @"Emitter Stroke Width");
  uint64_t v31 = (PSEmitter::PSEmitter_strokeWidthChanInfo *)PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(v30);
  long long v32 = (OZChannelInfo *)PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(v31);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20760), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x162u, 2u, (OZChannelImpl *)v31, v32);
  PCString::~PCString(&v166);
  PCURL::PCURL(v33, @"Emitter Stroke Width OS");
  long long v35 = (PSEmitter::PSEmitter_strokeWidthOSChanInfo *)PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(v34);
  long long v36 = (OZChannelInfo *)PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(v35);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20912), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x163u, 2u, (OZChannelImpl *)v35, v36);
  PCString::~PCString(&v166);
  PCURL::PCURL(v37, @"Emitter Tile Offset");
  long long v39 = (PSEmitter::PSEmitter_tileOffsetChanInfo *)PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(v38);
  uint64_t v40 = (OZChannelInfo *)PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(v39);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21064), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x149u, 0, (OZChannelImpl *)v39, v40);
  PCString::~PCString(&v166);
  PCURL::PCURL(v41, @"Emitter Rect Build Origin Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Rect Build Origin Type");
  uint64_t v43 = (OZChannelImpl *)PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(v42);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21216), 4u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Au, 0, v43, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v44, @"Emitter Rect Build Style Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Rect Build Style Type");
  uint64_t v46 = (OZChannelImpl *)PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(v45);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21472), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Bu, 0, v46, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCString::PCString(v47, "Hidden");
  uint64_t v48 = (PSEmitter::PSEmitter_boxBuildOriginChanImpl *)PCString::PCString(&v165, "Hidden");
  long long v49 = (OZChannelImpl *)PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(v48);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21728), 0xEu, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x168u, 0, v49, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCString::PCString(v50, "Hidden");
  double v51 = (PSEmitter::PSEmitter_boxBuildStyleChanImpl *)PCString::PCString(&v165, "Hidden");
  unsigned int v52 = (OZChannelImpl *)PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(v51);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21984), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x169u, 0, v52, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v53, @"Emitter Open Build Origin Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Open Build Origin Type");
  double v55 = (OZChannelImpl *)PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(v54);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22240), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Eu, 0, v55, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v56, @"Emitter Closed Build Origin Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Closed Build Origin Type");
  CMTime v58 = (OZChannelImpl *)PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(v57);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22496), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Cu, 0, v58, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v59, @"Emitter Radial Build Origin Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Radial Build Origin Type");
  __n128 v61 = (OZChannelImpl *)PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(v60);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22752), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Du, 0, v61, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v62, @"Emitter Build Randomly");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23008), 0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x14Fu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v63, @"Emitter Outline Offset");
  int v65 = (PSEmitter::PSEmitter_outlineOffsetChanInfo *)PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(v64);
  unsigned int v66 = (OZChannelInfo *)PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(v65);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23160), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x150u, 0, (OZChannelImpl *)v65, v66);
  PCString::~PCString(&v166);
  PCURL::PCURL(v67, @"Emitter Radius");
  long double v69 = (PSEmitter::PSEmitter_radiusChanInfo *)PSEmitter::PSEmitter_radiusChanImpl::getInstance(v68);
  double v70 = (OZChannelInfo *)PSEmitter::PSEmitter_radiusChanInfo::getInstance(v69);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 23312), 200.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x133u, 0, (OZChannelImpl *)v69, v70);
  PCString::~PCString(&v166);
  PCURL::PCURL(v71, @"Emitter Point 1");
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 23464), -100.0, 0.0, 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x134u, 0, 3u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v72, @"Emitter Point 2");
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 24352), 100.0, 0.0, 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x135u, 0, 3u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v73, @"Emitter Rect Width");
  double v75 = (OZChannelImpl *)PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(v74);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 25240), 200.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x151u, 2, v75, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v76, @"Emitter Rect Size");
  double v78 = (PSEmitter::PSEmitter_rectSizeChanInfo *)PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(v77);
  int v79 = (OZChannelInfo *)PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(v78);
  OZChannel3D::OZChannel3D((PSEmitter *)((char *)this + 25392), 300.0, 300.0, 300.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x15Bu, 0, 3u, (OZChannelImpl *)v78, v79);
  PCString::~PCString(&v166);
  PCURL::PCURL(v80, @"Emitter Num Radial Arms");
  unsigned int v82 = (PSEmitter::PSEmitter_numRadialArmsChanInfo *)PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(v81);
  unsigned int v83 = (OZChannelInfo *)PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(v82);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 25984), 3.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x153u, 0, (OZChannelImpl *)v82, v83);
  PCString::~PCString(&v166);
  PCURL::PCURL(v84, @"Emitter Points Per Arm");
  unsigned int v86 = (PSEmitter::PSEmitter_pointsPerArmChanInfo *)PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(v85);
  unsigned int v87 = (OZChannelInfo *)PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(v86);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 26136), 10.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x154u, 0, (OZChannelImpl *)v86, v87);
  PCString::~PCString(&v166);
  PCURL::PCURL(v88, @"Emitter Spiral Twists");
  double v90 = (PSEmitter::PSEmitter_spiralCoeffChanInfo *)PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(v89);
  unsigned int v91 = (OZChannelInfo *)PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(v90);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26288), 0.25, &v166, (OZChannelFolder *)((char *)this + 19104), 0x155u, 0, (OZChannelImpl *)v90, v91);
  PCString::~PCString(&v166);
  PCURL::PCURL(v92, @"Emitter Wave Amplitude");
  double v94 = (OZChannelImpl *)PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(v93);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26440), 50.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x156u, 0, v94, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v95, @"Emitter Wave Frequency");
  int v97 = (PSEmitter::PSEmitter_waveFrequencyChanInfo *)PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(v96);
  double v98 = (OZChannelInfo *)PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(v97);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26592), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x157u, 0, (OZChannelImpl *)v97, v98);
  PCString::~PCString(&v166);
  PCURL::PCURL(v99, @"Emitter Wave Phase");
  unsigned int v101 = (OZChannelInfo *)PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(v100);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 26744), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x158u, 0, 0, v101);
  PCString::~PCString(&v166);
  PCURL::PCURL(v102, @"Emitter Wave Damping");
  int v104 = (PSEmitter::PSEmitter_waveDampingChanInfo *)PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(v103);
  unsigned int v105 = (OZChannelInfo *)PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(v104);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26896), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x15Fu, 0, (OZChannelImpl *)v104, v105);
  PCString::~PCString(&v166);
  PCURL::PCURL(v106, @"Emitter Emit At Alpha");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27048), 1, &v166, (OZChannelFolder *)((char *)this + 19104), 0x141u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v107, @"Emitter Emit Alpha Cutoff");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 27200), 0.5, &v166, (OZChannelFolder *)((char *)this + 19104), 0x142u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v108, @"Emitter Geometry Node Ref");
  OZChanRotoshapeRef::OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352), &v166, (OZChannelFolder *)((char *)this + 19104), 0x146u, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v109, @"Emitter Image Node Ref");
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512), &v166, (OZChannelFolder *)((char *)this + 19104), 0x147u, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v110, @"Emitter Emission Angle");
  double v112 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(v111);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27672), 0.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x136u, 0, v112, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v113, @"Emitter Emission Longitude");
  long long v115 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(v114);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27824), 4.71238898, &v166, (OZChannelFolder *)((char *)this + 648), 0x166u, 0, v115, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v116, @"Emitter Emission Range");
  double v118 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(v117);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27976), 6.28318531, &v166, (OZChannelFolder *)((char *)this + 648), 0x137u, 0, v118, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v119, @"Emitter Multiplier Properties");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28128), &v166, (OZChannelFolder *)((char *)this + 648), 0x138u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v120, @"Emitter Birth Rate");
  double v122 = (PSEmitter::PSEmitter_birthRateChanInfo *)PSEmitter::PSEmitter_birthRateChanImpl::getInstance(v121);
  long long v123 = (OZChannelInfo *)PSEmitter::PSEmitter_birthRateChanInfo::getInstance(v122);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28256), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x139u, 0, (OZChannelImpl *)v122, v123);
  PCString::~PCString(&v166);
  PCString::PCString(v124, "Hidden");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 28408), 0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x16Cu, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v125, @"Emitter Initial Num");
  __n128 v127 = (OZChannelImpl *)PSEmitter::PSEmitter_initialNumChanImpl::getInstance(v126);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28560), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Au, 0, v127, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v128, @"Emitter Lifetime");
  long long v130 = (PSEmitter::PSEmitter_lifetimeChanInfo *)PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(v129);
  long long v131 = (OZChannelInfo *)PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(v130);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28712), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Bu, 0, (OZChannelImpl *)v130, v131);
  PCString::~PCString(&v166);
  PCURL::PCURL(v132, @"Emitter Scale");
  OZChannelScale3D::OZChannelScale3D((PSEmitter *)((char *)this + 28864), 1.0, 1.0, 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Cu, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v133, @"Emitter Speed");
  CMTime v135 = (PSEmitter::PSEmitter_speedChanInfo *)PSEmitter::PSEmitter_speedChanImpl::getInstance(v134);
  __n128 v136 = (OZChannelInfo *)PSEmitter::PSEmitter_speedChanInfo::getInstance(v135);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29456), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Du, 0, (OZChannelImpl *)v135, v136);
  PCString::~PCString(&v166);
  PCURL::PCURL(v137, @"Emitter Spin");
  CMTime v139 = (PSEmitter::PSEmitter_spinChanInfo *)PSEmitter::PSEmitter_spinChanImpl::getInstance(v138);
  long long v140 = (OZChannelInfo *)PSEmitter::PSEmitter_spinChanInfo::getInstance(v139);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29608), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Eu, 0, (OZChannelImpl *)v139, v140);
  PCString::~PCString(&v166);
  PCURL::PCURL(v141, @"Emitter Tint Color");
  OZChannelColor::OZChannelColor((PSEmitter *)((char *)this + 29760), 1.0, 1.0, 1.0, 1.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x13Fu, 2u, 6u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v142, @"Emitter Tint Amount");
  double v144 = (OZChannelImpl *)PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(v143);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 30920), 0.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x140u, 2u, v144, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v145, @"Emitter Render Order Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Render Order");
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 31072), &v166, &v165, (OZChannelFolder *)((char *)this + 648), 0x143u, 0, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v146, @"Replicator Reverse Stacking");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31328), &v166, (OZChannelFolder *)((char *)this + 648), 0x15Cu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v147, @"Emitter Interleave Particle Types");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31480), &v166, (OZChannelFolder *)((char *)this + 648), 0x144u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v148, @"Emitter Fill Points");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31632), 0, &v166, (OZChannelFolder *)((char *)this + 648), 0x159u, 0, 0, 0);
  PCString::~PCString(&v166);
  LODWORD(v139) = *((_DWORD *)this + 70);
  PCURL::PCURL(v149, @"Emitter Random Fill Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 31784), v139, &v166, (OZChannelFolder *)((char *)this + 648), 0x15Du, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v150, @"Emitter Use Reparametrized Shape");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31936), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x15Eu, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v151, @"Emitter Preview Position");
  OZChannelPosition::OZChannelPosition((PSEmitter *)((char *)this + 32088), &v166, (OZChannelFolder *)((char *)this + 648), 0x145u, 2u, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v152, @"Emitter Is 3D");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32792), 0, &v166, (OZChannelFolder *)((char *)this + 648), 0x164u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v153, @"Emitter Render Space Enum");
  PCURL::PCURL((PCURL *)&v165, @"Emitter Render Space");
  long long v155 = (OZChannelImpl *)PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(v154);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 32944), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 648), 0x16Au, 0, v155, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v156, @"Emitter Is Facing Camera");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33200), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x165u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v157, @"Emitter Is Depth Ordered");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33352), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x16Bu, 0, 0, 0);
  PCString::~PCString(&v166);
  *(_OWORD *)((char *)this + 3351OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((_DWORD *)this + 8396) = -1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 33592));
  *((_OWORD *)this + 2104) = 0u;
  *((int64x2_t *)this + 2105) = vdupq_n_s64((unint64_t)this + 33680);
  *((void *)this + 421OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 256), 0x40000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18976), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 18976));
  PSEmitter::updateEmitterShapeEnum(this, 0);
  PCURL::PCURL((PCURL *)&v166, @"Emitter Rect Size Width");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25528), &v166, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v158, @"Emitter Rect Size Height");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25680), &v166, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v159, @"Emitter Rect Size Depth");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25832), &v166, 0);
  PCString::~PCString(&v166);
  resetVisibleInHUDFlags((OZChannelBase *)((char *)this + 256), (OZChannelBase *)((char *)this + 18976));
  (*(void (**)(PSEmitter *, uint64_t))(*(void *)this + 448))(this, 1);
  *((_WORD *)this + 16776) = 0;
  *((_DWORD *)this + 8389) = 0;
  *((_DWORD *)this + 8390) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2098) = _Q0;
}

void sub_1B7DAE624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelPosition *a11, OZChannelBool *a12, OZChannel *a13, OZChannelBool *a14, OZChannelBool *a15, OZChannelBool *a16, OZChannelEnum *a17, OZChannelPercent *a18, OZChannelColor *a19, OZChannelPercent *a20,OZChannelPercent *a21,OZChannelScale3D *a22,OZChannelPercent *a23,OZChannelPercent *a24,OZChannelBool *a25,OZChannelPercent *a26,OZChannel *a27,OZChannel *a28,OZChannel *a29,OZChanElementOrFootageRef *a30,OZChanRotoshapeRef *a31,OZChannelPercent *a32,OZChannelBool *a33,OZChannel *a34,OZChannel *a35,OZChannel *a36,OZChannel *a37,OZChannel *a38,OZChannel *a39,OZChannel *a40,OZChannel3D *a41,OZChannel *a42,OZChannelPosition3D *a43,OZChannelPosition3D *a44,OZChannelBool *a45,OZChannelEnum *a46,OZChannelEnum *a47,OZChannel *a48)
{
  PCString::~PCString((PCString *)(v57 - 96));
  std::__list_imp<unsigned int>::clear(v55);
  PCMutex::~PCMutex(v56);
  if (*v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v54);
  }
  OZChannelBool::~OZChannelBool(v53);
  OZChannelBool::~OZChannelBool(v49);
  OZChannelEnum::~OZChannelEnum(v52);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelPosition::~OZChannelPosition(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannel::~OZChannel(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelPercent::~OZChannelPercent(a18);
  OZChannelColor::~OZChannelColor(a19);
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannelPercent::~OZChannelPercent(a21);
  OZChannelScale3D::~OZChannelScale3D(a22);
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelPercent::~OZChannelPercent(a24);
  OZChannelBool::~OZChannelBool(a25);
  OZChannelPercent::~OZChannelPercent(a26);
  OZChannelFolder::~OZChannelFolder(v51);
  OZChannel::~OZChannel(a27);
  OZChannel::~OZChannel(a28);
  OZChannel::~OZChannel(a29);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a30);
  OZChanRotoshapeRef::~OZChanRotoshapeRef(a31);
  OZChannelPercent::~OZChannelPercent(a32);
  OZChannelBool::~OZChannelBool(a33);
  OZChannel::~OZChannel(a34);
  OZChannel::~OZChannel(a35);
  OZChannel::~OZChannel(a36);
  OZChannel::~OZChannel(a37);
  OZChannel::~OZChannel(a38);
  OZChannel::~OZChannel(a39);
  OZChannel::~OZChannel(a40);
  OZChannel3D::~OZChannel3D(a41);
  OZChannel::~OZChannel(a42);
  OZChannelPosition3D::~OZChannelPosition3D(a43);
  OZChannelPosition3D::~OZChannelPosition3D(a44);
  OZChannel::~OZChannel(a48);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v57 - 256));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v57 - 248));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 240));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 224));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 216));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 208));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 200));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 192));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v57 - 184));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v57 - 176));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v57 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v57 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v57 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v57 - 144));
  OZChannel::~OZChannel(*(OZChannel **)(v57 - 136));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v57 - 128));
  OZChannelBool::~OZChannelBool(a45);
  OZChannelEnum::~OZChannelEnum(a46);
  OZChannelEnum::~OZChannelEnum(a47);
  OZChannelFolder::~OZChannelFolder(v50);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v57 - 112));
  OZLockingElement::~OZLockingElement(v48);
  _Unwind_Resume(a1);
}

void PSEmitter::updateEmitterShapeEnum(PSEmitter *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    PCSharedCount::PCSharedCount(v9);
    OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 19232), (const PCString *)v9);
    PCString::~PCString((PCString *)v9);
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E4F1FA48], 0.0);
  long long v5 = (PSEmitter *)((char *)this + 19232);
  if (ValueAsInt)
  {
    *(_OWORD *)&v9[0].CMTime var0 = xmmword_1B838625C;
    *(_OWORD *)uint64_t v10 = unk_1B838626C;
    *(_OWORD *)&v10[12] = unk_1B8386278;
    OZChannelEnum::setTags(v5, (char *)v9, 11);
    PCURL::PCURL((PCURL *)&v8, @"Emitter Shape Enum 3D");
    OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
    PCString::~PCString(&v8);
    return;
  }
  *(_DWORD *)&double v10[16] = 5;
  *(_OWORD *)&v9[0].CMTime var0 = xmmword_1B8386288;
  *(_OWORD *)uint64_t v10 = unk_1B8386298;
  OZChannelEnum::setTags(v5, (char *)v9, 9);
  PCURL::PCURL((PCURL *)&v8, @"Emitter Shape Enum 2D");
  OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
  PCString::~PCString(&v8);
  if (a2)
  {
    int v6 = OZChannel::getValueAsInt((OZChannel *)v5, MEMORY[0x1E4F1FA48], 0.0);
    if (v6 == 10)
    {
      double v7 = 2.0;
    }
    else
    {
      if (v6 != 11) {
        return;
      }
      double v7 = 6.0;
    }
    OZChannel::setValue((OZChannel *)v5, MEMORY[0x1E4F1FA48], v7, 0);
  }
}

void sub_1B7DAF0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
}

OZChannelBase *resetVisibleInHUDFlags(OZChannelBase *result, OZChannelBase *a2)
{
  CMTime var0 = (OZChannelBase ***)result[1].var0;
  if (var0)
  {
    for (uint64_t i = *var0; i != var0[1]; ++i)
    {
      long long v5 = *i;
      if (*i != a2)
      {
        if (v5 {
          && (int v6 = v5->var0,
        }
        {
          uint64_t result = (OZChannelBase *)resetVisibleInHUDFlags(v8, a2);
        }
        else
        {
          uint64_t result = OZChannelBase::resetFlag(v5, 16, 0);
        }
      }
    }
  }
  return result;
}

void PSEmitter::PSEmitter(PSEmitter *this, const PSEmitter *a2, uint64_t a3)
{
  long long v5 = (char *)a2 + 200;
  unsigned int v27 = a3;
  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *(void *)uint64_t v6 = &unk_1F118A740;
  uint64_t v7 = v6 + 200;
  *(void *)(v6 + 200) = &unk_1F118A9E0;
  *(void *)(v6 + 216) = &unk_1F118B2B8;
  *(void *)(v6 + 248) = &unk_1F118B510;
  *(void *)(v6 + 6728) = &unk_1F118B568;
  int64_t v26 = (OZChannelFolder *)(v6 + 18976);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18976), (const OZChannelFolder *)((char *)a2 + 18976), (OZChannelFolder *)((char *)this + 256));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19104), (const OZChannelFolder *)((char *)a2 + 19104), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19232), (const PSEmitter *)((char *)a2 + 19232), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19488), (const PSEmitter *)((char *)a2 + 19488), (OZChannelFolder *)((char *)this + 19104));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19744), (const OZChannelBase *)((char *)a2 + 19744), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19896), (const PSEmitter *)((char *)a2 + 19896), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 20152), (const OZChannelBase *)((char *)a2 + 20152), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 2519) = &unk_1F1101490;
  *((void *)this + 252OZLinkBehavior::clearAll(this, 1) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20304), (const OZChannelBase *)((char *)a2 + 20304), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 2538) = &unk_1F1101490;
  *((void *)this + 2540) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20456), (const OZChannelBase *)((char *)a2 + 20456), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 2557) = &unk_1F1101490;
  *((void *)this + 2559) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20608), (const OZChannelBase *)a2 + 184, (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 2576) = &unk_1F1101490;
  *((void *)this + 2578) = &unk_1F11017F0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20760), (const OZChannelBase *)((char *)a2 + 20760), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20912), (const OZChannelBase *)((char *)a2 + 20912), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21064), (const OZChannelBase *)((char *)a2 + 21064), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21216), (const PSEmitter *)((char *)a2 + 21216), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21472), (const PSEmitter *)((char *)a2 + 21472), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21728), (const PSEmitter *)((char *)a2 + 21728), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21984), (const PSEmitter *)((char *)a2 + 21984), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22240), (const PSEmitter *)((char *)a2 + 22240), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22496), (const PSEmitter *)((char *)a2 + 22496), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22752), (const PSEmitter *)((char *)a2 + 22752), (OZChannelFolder *)((char *)this + 19104));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23008), (const OZChannelBase *)((char *)a2 + 23008), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23160), (const OZChannelBase *)((char *)a2 + 23160), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23312), (const OZChannelBase *)((char *)a2 + 23312), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 2914) = &unk_1F1100CF0;
  *((void *)this + 2916) = &unk_1F1101050;
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 23464), (const PSEmitter *)((char *)a2 + 23464), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 24352), (const PSEmitter *)((char *)a2 + 24352), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 25240), (const OZChannelBase *)((char *)a2 + 25240), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3155) = &unk_1F1100CF0;
  *((void *)this + 3157) = &unk_1F1101050;
  OZChannel3D::OZChannel3D((PSEmitter *)((char *)this + 25392), (const PSEmitter *)((char *)a2 + 25392), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 25984), (const OZChannelBase *)a2 + 232, (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3248) = &unk_1F1101490;
  *((void *)this + 3250) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26136), (const OZChannelBase *)((char *)a2 + 26136), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3267) = &unk_1F1101490;
  *((void *)this + 3269) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26288), (const OZChannelBase *)((char *)a2 + 26288), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3286) = &unk_1F1100CF0;
  *((void *)this + 3288) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26440), (const OZChannelBase *)((char *)a2 + 26440), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3305) = &unk_1F1100CF0;
  *((void *)this + 3307) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26592), (const OZChannelBase *)((char *)a2 + 26592), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3324) = &unk_1F1100CF0;
  *((void *)this + 3326) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26744), (const OZChannelBase *)((char *)a2 + 26744), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 3343) = &unk_1F11010C0;
  *((void *)this + 3345) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26896), (const OZChannelBase *)((char *)a2 + 26896), (OZChannelFolder *)((char *)this + 19104));
  *((void *)this + 336OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1100CF0;
  *((void *)this + 3364) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27048), (const OZChannelBase *)((char *)a2 + 27048), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 27200), (const OZChannelBase *)((char *)a2 + 27200), (OZChannelFolder *)((char *)this + 19104));
  OZChanRotoshapeRef::OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352), (const PSEmitter *)((char *)a2 + 27352), (OZChannelFolder *)((char *)this + 19104));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512), (const PSEmitter *)((char *)a2 + 27512), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 27672), (const OZChannelBase *)((char *)a2 + 27672), (OZChannelFolder *)((char *)this + 648));
  *((void *)this + 3459) = &unk_1F11010C0;
  *((void *)this + 346OZLinkBehavior::clearAll(this, 1) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27824), (const OZChannelBase *)((char *)a2 + 27824), (OZChannelFolder *)((char *)this + 648));
  *((void *)this + 3478) = &unk_1F11010C0;
  *((void *)this + 3480) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27976), (const OZChannelBase *)((char *)a2 + 27976), (OZChannelFolder *)((char *)this + 648));
  *((void *)this + 3497) = &unk_1F11010C0;
  *((void *)this + 3499) = &unk_1F1101420;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28128), (const OZChannelFolder *)((char *)a2 + 28128), (OZChannelFolder *)((char *)this + 648));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28256), (const OZChannelBase *)((char *)a2 + 28256), (OZChannelFolder *)((char *)this + 28128));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 28408), (const OZChannelBase *)((char *)a2 + 28408), (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28560), (const OZChannelBase *)a2 + 255, (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28712), (const OZChannelBase *)((char *)a2 + 28712), (OZChannelFolder *)((char *)this + 28128));
  OZChannelScale3D::OZChannelScale3D((PSEmitter *)((char *)this + 28864), (const PSEmitter *)((char *)a2 + 28864), (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29456), (const OZChannelBase *)a2 + 263, (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29608), (const OZChannelBase *)((char *)a2 + 29608), (OZChannelFolder *)((char *)this + 28128));
  OZChannelColor::OZChannelColor((PSEmitter *)((char *)this + 29760), (const PSEmitter *)((char *)a2 + 29760), (OZChannelFolder *)((char *)this + 648));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 30920), (const OZChannelBase *)((char *)a2 + 30920), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 31072), (const PSEmitter *)((char *)a2 + 31072), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31328), (const OZChannelBase *)((char *)a2 + 31328), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31480), (const OZChannelBase *)((char *)a2 + 31480), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31632), (const OZChannelBase *)((char *)a2 + 31632), (OZChannelFolder *)((char *)this + 648));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31784), (const OZChannelBase *)((char *)a2 + 31784), (OZChannelFolder *)((char *)this + 648));
  *((void *)this + 3973) = &unk_1F1102B70;
  *((void *)this + 3975) = &unk_1F1102ED0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31936), (const OZChannelBase *)((char *)a2 + 31936), (OZChannelFolder *)((char *)this + 648));
  OZChannelPosition::OZChannelPosition((PSEmitter *)((char *)this + 32088), (const PSEmitter *)((char *)a2 + 32088), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32792), (const OZChannelBase *)((char *)a2 + 32792), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 32944), (const PSEmitter *)((char *)a2 + 32944), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33200), (const OZChannelBase *)((char *)a2 + 33200), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33352), (const OZChannelBase *)((char *)a2 + 33352), (OZChannelFolder *)((char *)this + 648));
  *(_OWORD *)((char *)this + 3351OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0u;
  *((_DWORD *)this + 8396) = -1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 33592));
  *((_OWORD *)this + 2104) = 0u;
  *((void *)this + 4210) = (char *)this + 33680;
  *((void *)this + 421OZLinkBehavior::clearAll(this, 1) = (char *)this + 33680;
  *((void *)this + 421OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)a2 + 16, v29);
  (*(void (**)(uint64_t, __n128 *, void, __n128))(*(void *)v7 + 1120))(v7, v29, 0, TimeOffset);
  (*(void (**)(void *__return_ptr))(*(void *)v5 + 1128))(v28);
  (*(void (**)(uint64_t, void *, void))(*(void *)v7 + 1136))(v7, v28, 0);
  PSEmitter::updateEmitterShapeEnum(this, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 256), 0x40000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  *((_WORD *)this + 16776) = 0;
  *((_DWORD *)this + 8389) = 0;
  *((_DWORD *)this + 8390) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2098) = _Q0;
  if ((v27 & 1) == 0)
  {
    double v14 = (char *)a2 + 33680;
    if (v14 != *((char **)v14 + 1))
    {
      double v15 = v14;
      do
      {
        double v16 = (const void *)(*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(*(void *)v15 + 16)
                                                                                            + 8)
                                                                              + 24))(*(void *)(*(void *)(*(void *)v15 + 16) + 8), *(void *)(*(void *)v15 + 16), v27);
        if (v16)
        {
          if (v17)
          {
            double v18 = (OZSceneNode *)v17;
            if ((v27 & 8) == 0)
            {
              OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v17 + 2));
              double v19 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v18 + 640))(v18);
              OZChannelBase::setNameUnset(v19, 1);
            }
            double v20 = operator new(0x18uLL);
            double v21 = (void *)*((void *)this + 4211);
            void *v20 = (char *)this + 33680;
            v20[1] = v21;
            CMTime v20[2] = v18;
            *double v21 = v20;
            uint64_t v22 = *((void *)this + 4212) + 1;
            *((void *)this + 421OZLinkBehavior::clearAll(this, 1) = v20;
            *((void *)this + 421OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v22;
            double v23 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v18 + 640))(v18);
            OZChannelFolder::push_front(v26, v23);
            PSParticleType::setEmitter(v18, this);
            (*(void (**)(OZSceneNode *, uint64_t))(*(void *)v18 + 256))(v18, v7);
            CMTime v24 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 272))(v7);
            uint64_t v25 = (uint64_t)v24;
            if (v24)
            {
              OZScene::registerNode(v24, v18);
              OZScene::addAllDependencies(v25, v18);
            }
          }
        }
        double v15 = *(char **)v15;
      }
      while (v15 != *((char **)v14 + 1));
    }
  }
}

void sub_1B7DB0034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCMutex *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelEnum *a13, OZChannelBool *a14, OZChannelPosition *a15, OZChannelBool *a16, OZChannel *a17, OZChannelBool *a18, OZChannelBool *a19, OZChannelBool *a20,OZChannelEnum *a21,OZChannelPercent *a22,OZChannelColor *a23,OZChannelPercent *a24,OZChannelPercent *a25,OZChannelScale3D *a26,OZChannelPercent *a27,OZChannelPercent *a28,OZChannelBool *a29,OZChannelPercent *a30,OZChannelFolder *a31,OZChannel *a32,OZChannel *a33,OZChannel *a34,OZChanElementOrFootageRef *a35,OZChanRotoshapeRef *a36,OZChannelPercent *a37,OZChannelBool *a38,OZChannel *a39,OZChannel *a40,OZChannel *a41,OZChannel *a42,OZChannel *a43,OZChannel *a44,OZChannel *a45,OZChannel3D *a46,OZChannel *a47,OZChannelPosition3D *a48,OZChannelPosition3D *a49,OZChannel *a50,OZChannelPercent *a51,OZChannelBool *a52,OZChannelEnum *a53,OZChannelEnum *a54,OZChannelEnum *a55,OZChannelEnum *a56,OZChannelEnum *a57,OZChannelEnum *a58,OZChannelEnum *a59,OZChannelPercent *a60,OZChannelPercent *a61,OZChannelPercent *a62)
{
  if (*v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v64);
  }
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelPosition::~OZChannelPosition(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannel::~OZChannel(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelColor::~OZChannelColor(a23);
  OZChannelPercent::~OZChannelPercent(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelScale3D::~OZChannelScale3D(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannelPercent::~OZChannelPercent(a28);
  OZChannelBool::~OZChannelBool(a29);
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannelFolder::~OZChannelFolder(a31);
  OZChannel::~OZChannel(a32);
  OZChannel::~OZChannel(a33);
  OZChannel::~OZChannel(a34);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a35);
  OZChanRotoshapeRef::~OZChanRotoshapeRef(a36);
  OZChannelPercent::~OZChannelPercent(a37);
  OZChannelBool::~OZChannelBool(a38);
  OZChannel::~OZChannel(a39);
  OZChannel::~OZChannel(a40);
  OZChannel::~OZChannel(a41);
  OZChannel::~OZChannel(a42);
  OZChannel::~OZChannel(a43);
  OZChannel::~OZChannel(a44);
  OZChannel::~OZChannel(a45);
  OZChannel3D::~OZChannel3D(a46);
  OZChannel::~OZChannel(a47);
  OZChannelPosition3D::~OZChannelPosition3D(a48);
  OZChannelPosition3D::~OZChannelPosition3D(a49);
  OZChannel::~OZChannel(a50);
  OZChannelPercent::~OZChannelPercent(a51);
  OZChannelBool::~OZChannelBool(a52);
  OZChannelEnum::~OZChannelEnum(a53);
  OZChannelEnum::~OZChannelEnum(a54);
  OZChannelEnum::~OZChannelEnum(a55);
  OZChannelEnum::~OZChannelEnum(a56);
  OZChannelEnum::~OZChannelEnum(a57);
  OZChannelEnum::~OZChannelEnum(a58);
  OZChannelEnum::~OZChannelEnum(a59);
  OZChannelPercent::~OZChannelPercent(a60);
  OZChannelPercent::~OZChannelPercent(a61);
  OZChannelPercent::~OZChannelPercent(a62);
  OZChannel::~OZChannel(*(OZChannel **)(v65 - 256));
  OZChannel::~OZChannel(*(OZChannel **)(v65 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v65 - 240));
  OZChannel::~OZChannel(*(OZChannel **)(v65 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v65 - 224));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v65 - 216));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v65 - 208));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v65 - 200));
  OZChannelFolder::~OZChannelFolder(v63);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v65 - 176));
  OZLockingElement::~OZLockingElement(v62);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::operator=(uint64_t a1, const void *a2)
{
  OZElement::operator=(a1 + 200, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  long long v5 = v4;
  OZChannelFolder::operator=(a1 + 18976);
  OZChannelFolder::operator=(a1 + 19104);
  OZChannelBase::operator=(a1 + 19232, (uint64_t)(v5 + 19232));
  OZChannelBase::operator=(a1 + 19488, (uint64_t)(v5 + 19488));
  OZChannelBase::operator=(a1 + 19744, (uint64_t)(v5 + 19744));
  OZChannelBase::operator=(a1 + 20304, (uint64_t)(v5 + 20304));
  OZChannelBase::operator=(a1 + 20456, (uint64_t)(v5 + 20456));
  OZChannelBase::operator=(a1 + 20608, (uint64_t)(v5 + 20608));
  OZChannelBase::operator=(a1 + 20760, (uint64_t)(v5 + 20760));
  OZChannelBase::operator=(a1 + 20912, (uint64_t)(v5 + 20912));
  OZChannelBase::operator=(a1 + 23312, (uint64_t)(v5 + 23312));
  OZChannelPosition::operator=(a1 + 23464, (uint64_t)(v5 + 23464));
  OZChannelPosition::operator=(a1 + 24352, (uint64_t)(v5 + 24352));
  OZChannelBase::operator=(a1 + 27048, (uint64_t)(v5 + 27048));
  OZChannelBase::operator=(a1 + 27200, (uint64_t)(v5 + 27200));
  OZChanSceneNodeRef::operator=(a1 + 27352, (uint64_t)(v5 + 27352));
  OZChanSceneNodeRef::operator=(a1 + 27512, (uint64_t)(v5 + 27512));
  OZChannelBase::operator=(a1 + 27672, (uint64_t)(v5 + 27672));
  OZChannelBase::operator=(a1 + 27824, (uint64_t)(v5 + 27824));
  OZChannelBase::operator=(a1 + 27976, (uint64_t)(v5 + 27976));
  OZChannelBase::operator=(a1 + 28712, (uint64_t)(v5 + 28712));
  OZChannelBase::operator=(a1 + 28256, (uint64_t)(v5 + 28256));
  OZChannelBase::operator=(a1 + 28408, (uint64_t)(v5 + 28408));
  OZChannelBase::operator=(a1 + 28560, (uint64_t)(v5 + 28560));
  OZChannelFolder::operator=(a1 + 28864);
  OZChannelBase::operator=(a1 + 29000, (uint64_t)(v5 + 29000));
  OZChannelBase::operator=(a1 + 29152, (uint64_t)(v5 + 29152));
  OZChannelBase::operator=(a1 + 29304, (uint64_t)(v5 + 29304));
  OZChannelBase::operator=(a1 + 29456, (uint64_t)(v5 + 29456));
  OZChannelBase::operator=(a1 + 29608, (uint64_t)(v5 + 29608));
  OZChannelFolder::operator=(a1 + 29760);
  OZChannelBase::operator=(a1 + 29896, (uint64_t)(v5 + 29896));
  OZChannelBase::operator=(a1 + 30048, (uint64_t)(v5 + 30048));
  OZChannelBase::operator=(a1 + 30200, (uint64_t)(v5 + 30200));
  OZChannelBase::operator=(a1 + 30352, (uint64_t)(v5 + 30352));
  OZChannelBase::operator=(a1 + 30504, (uint64_t)(v5 + 30504));
  *(unsigned char *)(a1 + 30760) = v5[30760];
  OZChannelBase::operator=(a1 + 30768, (uint64_t)(v5 + 30768));
  OZChannelBase::operator=(a1 + 30920, (uint64_t)(v5 + 30920));
  OZChannelBase::operator=(a1 + 31072, (uint64_t)(v5 + 31072));
  OZChannelBase::operator=(a1 + 31328, (uint64_t)(v5 + 31328));
  OZChannelBase::operator=(a1 + 31480, (uint64_t)(v5 + 31480));
  OZChannelBase::operator=(a1 + 31936, (uint64_t)(v5 + 31936));
  *(_WORD *)(a1 + 3355OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *(void *)(a1 + 33556) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 33568) = _Q0;
  *(_DWORD *)(a1 + 33584) = -1;
  *(_OWORD *)(a1 + 33664) = 0u;

  return OZChannelBase::operator=(a1 + 26896, (uint64_t)(v5 + 26896));
}

uint64_t non-virtual thunk to'PSEmitter::operator=(uint64_t a1, const void *a2)
{
  return PSEmitter::operator=(a1 - 200, a2);
}

void PSEmitter::~PSEmitter(PSEmitter *this)
{
  uint64_t v2 = (char *)this + 33520;
  *(void *)this = &unk_1F118A740;
  long long v3 = (OZElement *)((char *)this + 200);
  *((void *)this + 25) = &unk_1F118A9E0;
  *((void *)this + 27) = &unk_1F118B2B8;
  *((void *)this + 3OZLinkBehavior::clearAll(this, 1) = &unk_1F118B510;
  *((void *)this + 84OZLinkBehavior::clearAll(this, 1) = &unk_1F118B568;
  for (uint64_t i = *((void *)this + 4212); i; uint64_t i = *((void *)v2 + 22))
  {
    long long v5 = (uint64_t *)*((void *)v2 + 21);
    uint64_t v6 = (unsigned int *)v5[2];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = v5[1];
    *(void *)v5[1] = v7;
    *((void *)v2 + 2OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = i - 1;
    operator delete(v5);
    PCString v8 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(void *)v6 + 640))(v6);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18976), v8);
    uint64_t v9 = (OZScene *)*((void *)this + 146);
    if (v9 && OZScene::getNode(v9, v6[20]) == v6)
    {
      OZScene::unregisterNode(*((OZScene **)this + 146), (OZSceneNode *)v6);
      OZScene::removeAllDependencies(*((OZScene **)this + 146), (OZSceneNode *)v6);
    }
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v10 = *((void *)v2 + 18);
  if (v10) {
    MEMORY[0x1BA9BFB70](v10, 0x1000C8052888210);
  }
  *((void *)v2 + 18) = 0;
  std::__list_imp<unsigned int>::clear((void *)this + 4210);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 33592));
  if (*(void *)v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v2);
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 33352));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 33200));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 32944));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32792));
  OZChannelPosition::~OZChannelPosition((PSEmitter *)((char *)this + 32088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31936));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31784));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31632));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31480));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31328));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 31072));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 30920));
  *((void *)this + 3720) = &unk_1F1107698;
  *((void *)this + 372OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30768));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((PSEmitter *)((char *)this + 29760));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 29608));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 29456));
  *((void *)this + 3608) = &unk_1F1110838;
  *((void *)this + 3610) = &unk_1F1110B90;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29304));
  OZChannel2D::~OZChannel2D((PSEmitter *)((char *)this + 28864));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28712));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28560));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 28408));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28128));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27976));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27672));
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512));
  OZChanRotoshapeRef::~OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 27200));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 27048));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26896));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26136));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25984));
  *((void *)this + 3174) = &unk_1F1106258;
  *((void *)this + 3176) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25832));
  OZChannel2D::~OZChannel2D((PSEmitter *)((char *)this + 25392));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25240));
  OZChannelPosition3D::~OZChannelPosition3D((PSEmitter *)((char *)this + 24352));
  OZChannelPosition3D::~OZChannelPosition3D((PSEmitter *)((char *)this + 23464));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23312));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23160));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 23008));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22752));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22496));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22240));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21984));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21728));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21472));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21064));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 20912));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 20760));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20608));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20456));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20152));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19896));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19744));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19488));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19232));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 19104));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18976));
  OZElement::~OZElement(v3);
  *(void *)this = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

{
  uint64_t vars8;

  PSEmitter::~PSEmitter(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'PSEmitter::~PSEmitter(PSEmitter *this)
{
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 216));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 248));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 6728));
}

{
  uint64_t vars8;

  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *PSEmitter::didCreateCopyForCopyOnWrite(PSEmitter *this, double a2)
{
  uint64_t v2 = (OZChannel *)((char *)this + 31784);
  LODWORD(aOZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((_DWORD *)this + 70);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 31784), (double)*(unint64_t *)&a2);
  OZChannel::resetCurve(v2);

  return OZChannelBase::resetFlag((OZChannelBase *)v2, 0x100000000, 1);
}

OZChannelBase *non-virtual thunk to'PSEmitter::didCreateCopyForCopyOnWrite(PSEmitter *this, double a2)
{
  return PSEmitter::didCreateCopyForCopyOnWrite((PSEmitter *)((char *)this - 200), a2);
}

uint64_t PSEmitter::willRemoveFromScene(PSEmitter *this, OZScene *a2)
{
  OZLockingElement::willRemoveFromScene(this, a2);
  uint64_t v4 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 256))(this);
  uint64_t result = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 264))(this);
  if (v4 != result)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, OZScene *))(**(void **)(v4 + 16) + 872))(*(void *)(v4 + 16), a2);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t non-virtual thunk to'PSEmitter::willRemoveFromScene(PSEmitter *this, OZScene *a2)
{
  return PSEmitter::willRemoveFromScene((PSEmitter *)((char *)this - 200), a2);
}

BOOL PSEmitter::areEffectsAppliedInScreenSpace(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL non-virtual thunk to'PSEmitter::areEffectsAppliedInScreenSpace(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 26064), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

void PSEmitter::getOriginalBounds(Li3DEngineScene *a1, float64x2_t *a2, const CMTime *a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v37, v6);
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v21 = _Q0;
  a2[1] = _Q0;
  CMTime v36 = *a3;
  if (PSEmitter::needSourceBitmap(a1, &v36)) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v26 = 0x3FF0000000000000;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  (*(void (**)(void *, uint64_t *, const CMTime *))(*((void *)a1 + 25) + 1264))((void *)a1 + 25, &v26, a3);
  uint64_t v13 = (*(uint64_t (**)(Li3DEngineScene *))(*(void *)a1 + 256))(a1);
  for (i = (*(uint64_t (**)(Li3DEngineScene *))(*(void *)a1 + 264))(a1); v13 != i; uint64_t v13 = *(void *)(v13 + 8))
  {
    double v15 = *(const void **)(v13 + 16);
    if (v15) {
    else
    }
      double v16 = 0;
    CMTime v25 = v36;
    if ((*(unsigned int (**)(void *, CMTime *, void, uint64_t, uint64_t))(*((void *)v16 + 2) + 104))((void *)v16 + 2, &v25, 0, 1, 1))
    {
      CMTime v24 = 0;
      BOOL v23 = 0;
      PSParticleType::getState(v16, v12, a3, &v24, &v23);
      (*(void (**)(PSParticleType *))(*(void *)v16 + 1240))(v16);
      uint64_t v17 = (PCSharedCount *)v24;
      for (uint64_t j = *(PC_Sp_counted_base **)v24; j != v17[1].var0; uint64_t j = (PC_Sp_counted_base *)((char *)j + 248))
      {
        v22[0] = 0uLL;
        v22[1] = v21;
        (*(void (**)(PSParticleType *, PC_Sp_counted_base *, const CMTime *, float64x2_t *))(*(void *)v16 + 1248))(v16, j, a3, v22);
        PCRect<double>::operator|=(a2, v22);
        uint64_t v17 = (PCSharedCount *)v24;
      }
      if (v23)
      {
        OZSimStateArray::~OZSimStateArray(v17);
        MEMORY[0x1BA9BFBA0]();
      }
    }
  }
  __asm { FMOV            V0.2D, #2.0 }
  float64x2_t v20 = vrndpq_f64(vaddq_f64(a2[1], _Q0));
  *a2 = vrndpq_f64(vaddq_f64(*a2, v21));
  a2[1] = v20;
  if (v20.f64[0] < 0.0 || v20.f64[1] < 0.0)
  {
    *a2 = v21;
    a2[1] = _Q0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v37);
}

void sub_1B7DB1454(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::needSourceBitmap(PSEmitter *this, const CMTime *a2)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E4F1FA48], 0.0) != 5) {
    return 0;
  }
  uint64_t result = (uint64_t)OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 27512));
  if (!result) {
    return result;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 27048), MEMORY[0x1E4F1FA48], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27200), a2, 0.0);
    uint64_t result = 1;
    if (v5 <= -0.0000001 || v5 >= 0.0000001) {
      return result;
    }
  }
  uint64_t v6 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 256))(this);
  uint64_t v7 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 264))(this);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
  do
  {
    uint64_t v10 = *(char **)(v6 + 16);
    if (v10) {
    BOOL v11 = OZChannel::getValueAsInt((OZChannel *)(v10 + 5368), v9, 0.0) == 4;
    }
    uint64_t result = v11;
    if (v11) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6 != v8);
  return result;
}

void non-virtual thunk to'PSEmitter::getOriginalBounds(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
}

uint64_t PSEmitter::getProjectedBounds(uint64_t a1, float64x2_t *a2, double *a3, const OZRenderState *a4)
{
  OZRenderParams::OZRenderParams((OZRenderParams *)v19);
  OZRenderParams::setState((OZRenderParams *)v19, a4);
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v9 = 0x3FF0000000000000;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  (*(void (**)(uint64_t, uint64_t *, const OZRenderState *))(*(void *)(a1 + 200) + 1256))(a1 + 200, &v9, a4);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v9, a3);
  PSEmitter::getRenderBounds(a1, a2, v19, &v9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v19);
  return 1;
}

void sub_1B7DB1724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void PSEmitter::getRenderBounds(uint64_t a1, float64x2_t *a2, CMTime *this, unsigned char *a4)
{
  if (OZRenderParams::hasParameter((OZRenderParams *)this, (const char *)kPSIsPreviewRender))
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0xC090000000000000);
    a2[1] = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  }
  else
  {
    CMTime v44 = *this;
    PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v33, (const OZRenderParams *)this);
    v33[0] = a1;
    unsigned __int8 v36 = 0;
    BOOL v37 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32792), &v44, 0.0) != 0;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v44, 0.0)) {
      _ZF = !v37;
    }
    else {
      _ZF = 1;
    }
    char v9 = !_ZF;
    char v38 = v9;
    if (!_ZF)
    {
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)(a1 + 200) + 1304))(a1 + 200, &v39, this);
      PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)this, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
    }
    if (v40 != a4)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        long long v11 = &v40[i];
        long long v12 = *(_OWORD *)&a4[i + 16];
        _OWORD *v11 = *(_OWORD *)&a4[i];
        v11[1] = v12;
      }
    }
    long long v13 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v32, v13);
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v27 = _Q0;
    a2[1] = _Q0;
    if (PSEmitter::needSourceBitmap((PSEmitter *)a1, &v44)) {
      int v18 = 2;
    }
    else {
      int v18 = v36;
    }
    CMTime v31 = *this;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
    for (j = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1); v19 != j; uint64_t v19 = *(void *)(v19 + 8))
    {
      float64x2_t v21 = *(const void **)(v19 + 16);
      if (v21) {
      else
      }
        uint64_t v22 = 0;
      CMTime v30 = v44;
      if ((*(unsigned int (**)(void *, CMTime *, void, uint64_t, uint64_t))(*((void *)v22 + 2) + 104))((void *)v22 + 2, &v30, 0, 1, 1))
      {
        uint64_t v29 = 0;
        BOOL v28 = 0;
        (*(void (**)(PSParticleType *))(*(void *)v22 + 1240))(v22);
        PSParticleType::getState(v22, v18, &v31, &v29, &v28);
        uint64_t v23 = *(void *)v29;
        uint64_t v24 = *((void *)v29 + 1);
        while (v23 != v24)
        {
          (*(void (**)(PSParticleType *, void *, uint64_t, float64x2_t *))(*(void *)v22 + 1256))(v22, v33, v23, a2);
          v23 += 248;
        }
        if (v28 && v29)
        {
          OZSimStateArray::~OZSimStateArray((PCSharedCount *)v29);
          MEMORY[0x1BA9BFBA0]();
        }
      }
    }
    __asm { FMOV            V0.2D, #2.0 }
    float64x2_t v26 = vrndpq_f64(vaddq_f64(a2[1], _Q0));
    *a2 = vrndpq_f64(vaddq_f64(*a2, v27));
    a2[1] = v26;
    if (v26.f64[0] < 0.0 || v26.f64[1] < 0.0)
    {
      *a2 = v27;
      a2[1] = _Q0;
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v32);
    LiClipSet::~LiClipSet((LiClipSet *)&v35);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v34);
  }
}

void sub_1B7DB1B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  LiClipSet::~LiClipSet((LiClipSet *)&STACK[0x608]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'PSEmitter::getProjectedBounds(uint64_t a1, float64x2_t *a2, double *a3, const OZRenderState *a4)
{
  return 1;
}

void PSEmitter::getCameraPropertiesInLocalSpace(uint64_t a1, PC_Sp_counted_base **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)a4 = xmmword_1B7E733E0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0x3FF0000000000000;
  if ((unint64_t)a2[162] | (unint64_t)a2[160] && *((unsigned char *)a2 + 242))
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v26, (const OZRenderParams *)a2);
    long long v10 = a2[162];
    if (!v10) {
      long long v10 = a2[160];
    }
    v16.CMTime var0 = v10;
    if (v10) {
      long long v11 = (PCShared_base *)((char *)v10 + *(void *)(*(void *)v10 - 24));
    }
    else {
      long long v11 = 0;
    }
    PCSharedCount::PCSharedCount((PCSharedCount *)&v17, v11);
    OZRenderParams::setCamera((uint64_t)v26, &v16);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v17);
    uint64_t v25 = 0x3FF0000000000000;
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0x3FF0000000000000;
    v16.CMTime var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    (*(void (**)(uint64_t, PCSharedCount *, unsigned char *))(*(void *)(a1 + 200) + 1296))(a1 + 200, &v16, v26);
    PCMatrix44Tmpl<double>::transform<double>((double *)&v16, (double *)a3, (double *)a3);
    CMTime var0 = v16.var0;
    uint64_t v14 = *((void *)&v18 + 1);
    uint64_t v13 = v19;
    *(void *)a4 = v17;
    *(void *)(a4 + 8) = v13;
    uint64_t v15 = v21;
    *(void *)(a4 + 16) = *((void *)&v21 + 1);
    *(void *)a5 = var0;
    *(void *)(a5 + 8) = v14;
    *(void *)(a5 + 16) = v15;
    PCVector3<double>::normalize((double *)a4, 0.000000100000001);
    PCVector3<double>::normalize((double *)a5, 0.000000100000001);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v26);
  }
}

void sub_1B7DB1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  PCSharedCount::~PCSharedCount(v25);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a25);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::estimateRenderMemory(uint64_t a1, CMTime *a2, unsigned char *a3)
{
  CMTime v43 = *a2;
  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v32, (const OZRenderParams *)a2);
  v32[0] = a1;
  BOOL hasParameter = OZRenderParams::hasParameter((OZRenderParams *)a2, (const char *)kPSIsPreviewRender);
  BOOL v36 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32792), &v43, 0.0) != 0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v43, 0.0)) {
    BOOL v6 = !v36;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = !v6;
  char v37 = v7;
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(void *)(a1 + 200) + 1304))(a1 + 200, &v38, a2);
    PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)a2, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v42);
  }
  if (v39 != a3)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      char v9 = &v39[i];
      long long v10 = *(_OWORD *)&a3[i + 16];
      _OWORD *v9 = *(_OWORD *)&a3[i];
      v9[1] = v10;
    }
  }
  long long v11 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v11);
  int v12 = PSEmitter::needSourceBitmap((PSEmitter *)a1, &v43);
  int v13 = hasParameter;
  if (v12) {
    int v13 = 2;
  }
  unsigned int v23 = v13;
  CMTime v30 = *a2;
  v29[0] = 0;
  v29[1] = 0;
  BOOL v28 = v29;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  if (v14 == v15)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      long long v17 = *(const void **)(v14 + 16);
      if (v17) {
      else
      }
        long long v18 = 0;
      CMTime v27 = v43;
      if ((*(unsigned int (**)(void *, CMTime *, void, uint64_t, uint64_t))(*((void *)v18 + 2) + 104))((void *)v18 + 2, &v27, 0, 1, 1))
      {
        (*(void (**)(PSParticleType *, CMTime *))(*(void *)v18 + 1288))(v18, a2);
        char v26 = 1;
        unint64_t v19 = (*(uint64_t (**)(PSParticleType *, CMTime *, char *))(*(void *)v18 + 1272))(v18, a2, &v26);
        if (v26 || !(v19 >> 24))
        {
          v16 += v19;
        }
        else
        {
          uint64_t v25 = 0;
          BOOL v24 = 0;
          PSParticleType::getState(v18, v23, &v30, &v25, &v24);
          uint64_t v21 = *(void *)v25;
          uint64_t v20 = *((void *)v25 + 1);
          while (v21 != v20)
          {
            v16 += (*(uint64_t (**)(PSParticleType *, void *, uint64_t, void ***))(*(void *)v18 + 1264))(v18, v32, v21, &v28);
            v21 += 248;
          }
          if (v24 && v25)
          {
            OZSimStateArray::~OZSimStateArray((PCSharedCount *)v25);
            MEMORY[0x1BA9BFBA0]();
          }
        }
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14 != v15);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, v29[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
  LiClipSet::~LiClipSet((LiClipSet *)&v34);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v33);
  return v16;
}

void sub_1B7DB21C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void PSEmitter::SimEntry::~SimEntry(PCSharedCount **this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *this;
    if (*this)
    {
      OZSimStateArray::~OZSimStateArray(v2);
      MEMORY[0x1BA9BFBA0]();
    }
  }
}

double PSEmitter::setupEmitterParams(PSEmitter *this, const OZRenderParams *a2, PSEmitter::RenderParams *a3)
{
  CMTime v9 = *(CMTime *)a2;
  *(void *)a3 = this;
  *((unsigned char *)a3 + 1496) = OZRenderParams::hasParameter(a2, (const char *)kPSIsPreviewRender);
  *((unsigned char *)a3 + 1497) = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 168))(this);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 33200), &v9, 0.0)) {
    BOOL v6 = *((unsigned char *)a3 + 1497) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = !v6;
  *((unsigned char *)a3 + 1498) = v7;
  if (!v6)
  {
    (*(void (**)(char *, char *, const OZRenderParams *))(*((void *)this + 25) + 1304))((char *)this + 200, (char *)a3 + 1504, a2);
    PSEmitter::getCameraPropertiesInLocalSpace((uint64_t)this, (PC_Sp_counted_base **)a2, (uint64_t)a3 + 1760, (uint64_t)a3 + 1784, (uint64_t)a3 + 1808);
  }
  *((void *)a3 + 219) = 0x3FF0000000000000;
  *((void *)a3 + 214) = 0x3FF0000000000000;
  *((void *)a3 + 209) = 0x3FF0000000000000;
  *((void *)a3 + 204) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)((char *)a3 + 1640) = 0u;
  *(_OWORD *)((char *)a3 + 1656) = 0u;
  *((_OWORD *)a3 + 105) = 0u;
  *((_OWORD *)a3 + 106) = 0u;
  *(_OWORD *)((char *)a3 + 1720) = 0u;
  *(_OWORD *)((char *)a3 + 1736) = 0u;
  return result;
}

OZSimStateArray *PSEmitter::getSimList(uint64_t a1, const CMTime *a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  double result = (OZSimStateArray *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  if ((OZSimStateArray *)v8 != result)
  {
    long long v10 = result;
    do
    {
      long long v11 = *(const void **)(v8 + 16);
      if (v11) {
      else
      }
        int v12 = 0;
      CMTimeEpoch epoch = a2->epoch;
      long long v16 = *(_OWORD *)&a2->value;
      double result = (OZSimStateArray *)(*(uint64_t (**)(void *, long long *, void, uint64_t, uint64_t))(*((void *)v12 + 2) + 104))((void *)v12 + 2, &v16, 0, 1, 1);
      if (result)
      {
        uint64_t v15 = 0;
        BOOL v14 = 0;
        PSParticleType::getState(v12, a3, a2, &v15, &v14);
        double result = v15;
        if (*(void *)v15 != *((void *)v15 + 1)) {
          operator new();
        }
        if (v14)
        {
          OZSimStateArray::~OZSimStateArray((PCSharedCount *)v15);
          double result = (OZSimStateArray *)MEMORY[0x1BA9BFBA0]();
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while ((OZSimStateArray *)v8 != v10);
  }
  *a5 = 0;
  return result;
}

BOOL PSEmitter::lessThanOldestFirst(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 32);
  CMTime v8 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v8))
  {
    CMTime time1 = *(CMTime *)(a1 + 32);
    CMTime v8 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v8) >> 31;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 56);
    unsigned int v6 = *(_DWORD *)(a2 + 56);
    if (v5 >= v6)
    {
      if (v5 > v6)
      {
        return 0;
      }
      else
      {
        unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
        return v7 < (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
      }
    }
    else
    {
      return 1;
    }
  }
}

uint64_t PSEmitter::lessThanYoungestFirst(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 32);
  CMTime v8 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v8))
  {
    CMTime time1 = *(CMTime *)(a1 + 32);
    CMTime v8 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v8) > 0;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 56);
    unsigned int v6 = *(_DWORD *)(a2 + 56);
    if (v5 <= v6)
    {
      if (v5 >= v6)
      {
        unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
        return v7 > (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
}

BOOL PSEmitter::lessThanOldestFirstWithRank(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 32);
  CMTime v11 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v11))
  {
    CMTime time1 = *(CMTime *)(a1 + 32);
    CMTime v11 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v11) >> 31;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  unsigned int v6 = *(_DWORD *)(a2 + 56);
  if (v5 < v6) {
    return 1;
  }
  if (v5 > v6) {
    return 0;
  }
  unsigned int v7 = *(double **)(a1 + 8);
  double v8 = v7[22];
  double v9 = *(double *)(*(void *)(a2 + 8) + 176);
  if (v8 < v9) {
    return 1;
  }
  if (v8 > v9) {
    return 0;
  }
  unsigned int v10 = (*(uint64_t (**)(double *))(*(void *)v7 + 32))(v7);
  return v10 < (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
}

BOOL PSEmitter::lessThanYoungestFirstWithRank(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 32);
  CMTime v11 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v11))
  {
    CMTime time1 = *(CMTime *)(a1 + 32);
    CMTime v11 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v11) > 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  unsigned int v6 = *(_DWORD *)(a2 + 56);
  if (v5 < v6) {
    return 1;
  }
  if (v5 > v6) {
    return 0;
  }
  unsigned int v7 = *(double **)(a1 + 8);
  double v8 = v7[22];
  double v9 = *(double *)(*(void *)(a2 + 8) + 176);
  if (v8 > v9) {
    return 1;
  }
  if (v8 < v9) {
    return 0;
  }
  unsigned int v10 = (*(uint64_t (**)(double *))(*(void *)v7 + 32))(v7);
  return v10 > (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
}

BOOL PSEmitter::lessThanZDepthOldestFirst(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) >= 0.0000001) {
    return v2 < v3;
  }
  else {
    return PSEmitter::lessThanOldestFirst(a1, a2);
  }
}

uint64_t PSEmitter::lessThanZDepthYoungestFirst(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) >= 0.0000001) {
    return v2 < v3;
  }
  else {
    return PSEmitter::lessThanYoungestFirst(a1, a2);
  }
}

void PSEmitter::PostRenderFinalizer::~PostRenderFinalizer(PSEmitter::PostRenderFinalizer *this)
{
  uint64_t v2 = *(void *)this;
  for (uint64_t i = *(void *)(*(void *)this + 8); i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    (*(void (**)(void, void))(**(void **)(v4 + 40) + 1304))(*(void *)(v4 + 40), *((void *)this + 1));
    PSEmitter::SimEntry::~SimEntry((PCSharedCount **)v4);
    MEMORY[0x1BA9BFBA0]();
  }
}

void PSEmitter::getHelium(PSEmitter *this@<X0>, CMTime *a2@<X1>, LiAgent *a3@<X2>, PSHeliumNode **a4@<X8>)
{
  long long v28 = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  if ((*(uint64_t (**)(void))(*((void *)this + 27) + 104))())
  {
    BOOL hasParameter = OZRenderParams::hasParameter((OZRenderParams *)a2, (const char *)kPSIsPreviewRender);
    double v9 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v27, v9);
    unsigned int v10 = (PSHeliumNode *)HGObject::operator new(0x390uLL);
    PSHeliumNode::PSHeliumNode(v10, (const OZRenderParams *)a2);
    unsigned int v26 = 0;
    uint64_t v23 = (uint64_t)&v23;
    BOOL v24 = &v23;
    uint64_t v25 = 0;
    CMTime v22 = *a2;
    PSEmitter::getSimList((uint64_t)this, &v22, hasParameter, (uint64_t)&v23, &v26);
    if (v25)
    {
      uint64_t v20 = &v23;
      uint64_t v21 = a2;
      for (uint64_t i = v24; i != &v23; uint64_t i = (uint64_t *)i[1])
        (*(void (**)(void, CMTime *, PSHeliumNode *))(**(void **)(i[2] + 40) + 1296))(*(void *)(i[2] + 40), v21, v10);
      int v12 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 168))(this);
      uint64_t v13 = *((void *)a3 + 20);
      LiAgent::getObjectToImageTransform(a3, (uint64_t)v18);
      PCMatrix44Tmpl<double>::operator*(v13, v18, (uint64_t)&v19);
      PSHeliumNode::setObjectToFilmMatrix((uint64_t)v10, (uint64_t)&v19);
      unsigned int v14 = v26;
      PSHeliumNode::setNumberOfParticles(v10, v26);
      ObjectClipPlanes = (const LiClipSet *)LiAgent::getObjectClipPlanes(a3);
      PSHeliumNode::setClip(v10, ObjectClipPlanes);
      if (v12) {
        PSEmitter::getHeliumGraph3D((uint64_t)this, a2, (uint64_t)a3, &v23, hasParameter, v14, (uint64_t)v10);
      }
      else {
        PSEmitter::getHeliumGraph2D((uint64_t)this, (const OZRenderParams *)a2, (uint64_t)a3, &v23, hasParameter, v14, (uint64_t)v10);
      }
      PSHeliumNode::preRender((uint64_t)v10);
      PSEmitter::PostRenderFinalizer::~PostRenderFinalizer((PSEmitter::PostRenderFinalizer *)&v20);
      uint64_t CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a3 + 6)
                                                                                              + 160));
      uint64_t RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a3);
      FxColorDescription::FxColorDescription(&v19, RequestedColorDescription, CGColorSpace);
      LiAgent::setActualColorDescription((CGColorSpace **)a3, &v19);
      *a4 = v10;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v19._pcColorDesc._colorSpaceRef._obj);
      std::__list_imp<unsigned int>::clear(&v23);
    }
    else
    {
      *a4 = 0;
      std::__list_imp<unsigned int>::clear(&v23);
      if (v10) {
        (*(void (**)(PSHeliumNode *))(*(void *)v10 + 24))(v10);
      }
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v27);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1B7DB2E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  std::__list_imp<unsigned int>::clear((void *)(v18 - 152));
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v18 - 120));
  _Unwind_Resume(a1);
}

void PSEmitter::getHeliumGraph3D(uint64_t a1, CMTime *a2, uint64_t a3, void *a4, char a5, unsigned int a6, uint64_t a7)
{
  CMTime v42 = *a2;
  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v32, (const OZRenderParams *)a2);
  LiClipSet::operator=((uint64_t)v34, a3 + 96);
  v34[6] = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  v32[0] = a1;
  char v35 = a5;
  BOOL v37 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v42, 0.0) != 0;
  char v36 = 1;
  uint64_t v14 = *(void *)(a3 + 160);
  LiAgent::getObjectToImageTransform((LiAgent *)a3, (uint64_t)v29);
  PCMatrix44Tmpl<double>::operator*(v14, v29, (uint64_t)v31);
  for (uint64_t i = 0; i != 16; i += 4)
  {
    long long v16 = &v32[i];
    long long v17 = *(_OWORD *)&v31[i * 8 + 16];
    *((_OWORD *)v16 + 10OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)&v31[i * 8];
    *((_OWORD *)v16 + 103) = v17;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v42, 0.0))
  {
    LiAgent::getFaceCameraTransform((LiAgent *)a3, (uint64_t)v29);
    for (uint64_t j = 0; j != 8; j += 2)
    {
      FxColorDescription v19 = &v38[j * 16];
      long long v20 = v29[j + 1];
      *FxColorDescription v19 = v29[j];
      v19[1] = v20;
    }
    PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)a2, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
  }
  unsigned int v26 = 0;
  CMTime v27 = 0;
  uint64_t v28 = 0;
  LiAgent::getObjectToFilmTransform((LiAgent *)a3, (uint64_t)v29);
  float64x2_t v24 = vnegq_f64((float64x2_t)v29[4]);
  double v25 = -v30;
  PSEmitter::buildRenderList3D(a1, v21, a4, a6, &v26, 0, v24.f64);
  CMTime v22 = v26;
  uint64_t v23 = v27;
  if (v26 != v27)
  {
    do
    {
      (*(void (**)(void, void *, void, void, uint64_t))(**((void **)v22 + 2) + 1280))(*((void *)v22 + 2), v32, *((void *)v22 + 1), *(void *)v22, a7);
      v22 += 4;
    }
    while (v22 != v23);
    CMTime v22 = v26;
  }
  if (v22)
  {
    CMTime v27 = v22;
    operator delete(v22);
  }
  LiClipSet::~LiClipSet((LiClipSet *)v34);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v33);
}

void sub_1B7DB314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50)
{
  LiClipSet::~LiClipSet(v50);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a50);
  _Unwind_Resume(a1);
}

void PSEmitter::getHeliumGraph2D(uint64_t a1, const OZRenderParams *a2, uint64_t a3, void *a4, char a5, unsigned int a6, uint64_t a7)
{
  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v59, a2);
  LiClipSet::operator=((uint64_t)v61, a3 + 96);
  v61[6] = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  v59[0] = a1;
  char v62 = a5;
  __int16 v63 = 0;
  uint64_t v14 = *(void *)(a3 + 160);
  LiAgent::getObjectToImageTransform((LiAgent *)a3, (uint64_t)&v56);
  PCMatrix44Tmpl<double>::operator*(v14, &v56, (uint64_t)v58);
  for (uint64_t i = 0; i != 16; i += 4)
  {
    long long v16 = &v59[i];
    long long v17 = *(_OWORD *)&v58[i * 8 + 16];
    *((_OWORD *)v16 + 10OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)&v58[i * 8];
    *((_OWORD *)v16 + 103) = v17;
  }
  CMTime v53 = 0;
  int v54 = 0;
  uint64_t v55 = 0;
  std::vector<simd_float4x4>::resize((uint64_t)&v53, a6);
  uint64_t v18 = (long long *)v53;
  CMTime v52 = *(CMTime *)a2;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 31480), &v52, 0.0);
  int v19 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), MEMORY[0x1E4F1FA48], 0.0);
  long long v20 = *(unsigned int (**)(uint64_t))(*(void *)a1 + 576);
  if (v19)
  {
    _ZF = v20(a1) == 0;
    CMTime v22 = PSEmitter::lessThanYoungestFirstWithRank;
    uint64_t v23 = PSEmitter::lessThanOldestFirstWithRank;
  }
  else
  {
    _ZF = v20(a1) == 0;
    CMTime v22 = PSEmitter::lessThanYoungestFirst;
    uint64_t v23 = PSEmitter::lessThanOldestFirst;
  }
  if (!_ZF) {
    CMTime v22 = v23;
  }
  uint64_t v46 = v22;
  haveuint64_t ROI = LiAgent::haveROI((LiAgent *)a3);
  LiAgent::getROI((__n128 *)a3, &v51);
  uint64_t v45 = a7;
  long long v47 = (void *)a4[1];
  if (v47 == a4)
  {
    double v30 = v18;
  }
  else
  {
    int v25 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    __n128 v49 = _Q0;
    double v30 = v18;
    do
    {
      CMTime v31 = *(uint64_t ***)(*a4 + 16);
      uint64_t v33 = **v31;
      uint64_t v32 = (*v31)[1];
      if (v33 != v32)
      {
        uint64_t v34 = v31[5];
        double v30 = v18;
        do
        {
          if (!haveROI) {
            goto LABEL_16;
          }
          long long v56 = 0uLL;
          __n128 v57 = v49;
          (*(void (**)(uint64_t *, void *, uint64_t, long long *))(*v34 + 1256))(v34, v59, v33, &v56);
          if (v57.n128_f64[0] < 0.0
            || v57.n128_f64[1] < 0.0
            || (v35.i64[0] = v51.n128_i32[0],
                v35.i64[1] = v51.n128_i32[1],
                float64x2_t v36 = vcvtq_f64_s64(v35),
                v35.i64[0] = v51.n128_i32[2],
                v35.i64[1] = v51.n128_i32[3],
                v50[0] = v36,
                v50[1] = vcvtq_f64_s64(v35),
                PCRect<double>::intersects((double *)&v56, (double *)v50)))
          {
LABEL_16:
            BOOL v37 = *(char **)(v33 + 232);
            if (v37) {
            *((void *)v30 + OZLinkBehavior::clearAll(this, 1) = v37;
            }
            *((void *)v30 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v34;
            *((_DWORD *)v30 + 14) = v25;
            *(void *)double v30 = v33;
            _Q0 = *(__n128 *)(v37 + 8);
            *((void *)v30 + 6) = *((void *)v37 + 3);
            _OWORD v30[2] = (__int128)_Q0;
            v30 += 4;
          }
          v33 += 248;
        }
        while (v33 != v32);
      }
      if (!ValueAsInt)
      {
        unint64_t v38 = 126 - 2 * __clz(((char *)v30 - (char *)v18) >> 6);
        *(void *)&long long v56 = v46;
        if (v30 == v18) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v38;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(v18, (__n128 *)v30, (uint64_t (**)(long long *, long long *))&v56, v39, 1, _Q0);
      }
      ++v25;
      a4 = (void *)*a4;
      uint64_t v18 = v30;
    }
    while (a4 != v47);
  }
  std::vector<simd_float4x4>::resize((uint64_t)&v53, (int)(((char *)v30 - (char *)v53) >> 6));
  if (ValueAsInt)
  {
    unint64_t v41 = 126 - 2 * __clz(((char *)v54 - (char *)v53) >> 6);
    *(void *)&long long v56 = v46;
    if (v54 == v53) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>((long long *)v53, v54, (uint64_t (**)(long long *, long long *))&v56, v42, 1, v40);
  }
  CMTime v43 = v53;
  CMTime v44 = v54;
  if (v53 != v54)
  {
    do
    {
      (*(void (**)(unint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v43[1].n128_u64[0] + 1280))(v43[1].n128_u64[0], v59, v43->n128_u64[1], v43->n128_u64[0], v45);
      v43 += 4;
    }
    while (v43 != v44);
    CMTime v43 = v53;
  }
  if (v43)
  {
    int v54 = v43;
    operator delete(v43);
  }
  LiClipSet::~LiClipSet((LiClipSet *)v61);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v60);
}

void sub_1B7DB3600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, LiClipSet *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  LiClipSet::~LiClipSet(a11);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a63);
  _Unwind_Resume(a1);
}

void PSEmitter::buildRenderList3D(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, long long **a5, char a6, double *a7)
{
  std::vector<simd_float4x4>::resize((uint64_t)a5, a4);
  double v9 = (void *)a3[1];
  if (v9 != a3)
  {
    int v10 = 0;
    CMTime v11 = *a5;
    do
    {
      int v12 = *(uint64_t ***)(*a3 + 16);
      uint64_t v14 = **v12;
      uint64_t v13 = (*v12)[1];
      if (v14 == v13)
      {
        a3 = (void *)*a3;
      }
      else
      {
        uint64_t v15 = v12[5];
        do
        {
          double v16 = a7[1];
          double v17 = *(double *)(v14 + 184);
          double v18 = *a7 * *(double *)(v14 + 176);
          *(void *)CMTime v11 = v14;
          *((void *)v11 + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v15;
          *((double *)v11 + 3) = v18 + v16 * v17 + a7[2] * *(double *)(v14 + 192);
          *((_DWORD *)v11 + 14) = v10;
          int v19 = *(char **)(v14 + 232);
          if (v19) {
          long long v20 = v11 + 4;
          }
          *((void *)v11 + OZLinkBehavior::clearAll(this, 1) = v19;
          long long v21 = *(_OWORD *)(v19 + 8);
          *((void *)v11 + 6) = *((void *)v19 + 3);
          PCString v11[2] = v21;
          v14 += 248;
          v11 += 4;
        }
        while (v14 != v13);
        a3 = (void *)*a3;
        CMTime v11 = v20;
      }
      ++v10;
    }
    while (a3 != v9);
  }
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 33352), MEMORY[0x1E4F1FA48], 0.0) || (a6 & 1) != 0)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), MEMORY[0x1E4F1FA48], 0.0);
    BOOL v22 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 576))(a1) == 0;
    if (ValueAsInt)
    {
      float64x2_t v24 = (uint64_t (*)(long long *, long long *))PSEmitter::lessThanYoungestFirstWithRank;
      int v25 = PSEmitter::lessThanOldestFirstWithRank;
    }
    else
    {
      float64x2_t v24 = (uint64_t (*)(long long *, long long *))PSEmitter::lessThanYoungestFirst;
      int v25 = PSEmitter::lessThanOldestFirst;
    }
  }
  else
  {
    BOOL v22 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 576))(a1) == 0;
    float64x2_t v24 = (uint64_t (*)(long long *, long long *))PSEmitter::lessThanZDepthYoungestFirst;
    int v25 = PSEmitter::lessThanZDepthOldestFirst;
  }
  if (!v22) {
    float64x2_t v24 = (uint64_t (*)(long long *, long long *))v25;
  }
  CMTime v27 = *a5;
  uint64_t v28 = (__n128 *)a5[1];
  unint64_t v29 = 126 - 2 * __clz(((char *)v28 - (char *)*a5) >> 6);
  BOOL v22 = v28 == (__n128 *)*a5;
  uint64_t v34 = v24;
  if (v22) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(v27, v28, &v34, v30, 1, v23);
}

uint64_t PSEmitter::shouldPrecompose(PSEmitter *this, const CMTime *a2)
{
  uint64_t v4 = (char *)this + 6880;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6880), a2, 0.0);
  if (vabdd_f64(1.0, v5) >= 0.0000001) {
    return 1;
  }
  if ((*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 496))(v4, 1)) {
    return 1;
  }
  if ((*(uint64_t (**)(PSEmitter *))(*(void *)this + 288))(this)) {
    return 1;
  }
  unsigned int v6 = (char *)this + 200;
  if (((*(uint64_t (**)(char *))(*((void *)this + 25) + 416))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *))(*(void *)v6 + 1864))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *, const CMTime *))(*(void *)v6 + 1592))((char *)this + 200, a2) & 1) != 0
    || ((*(uint64_t (**)(PSEmitter *))(*(void *)this + 272))(this) & 1) != 0)
  {
    return 1;
  }
  double v8 = *(uint64_t (**)(PSEmitter *))(*(void *)this + 280);

  return v8(this);
}

uint64_t PSEmitter::shouldDoLocalParticleRender(PSEmitter *this)
{
  uint64_t v2 = (char *)this + 33708;
  if (!*((unsigned char *)this + 33712))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E4F1FA48], 0.0);
    *(_DWORD *)uint64_t v2 = ValueAsInt;
    v2[4] = 1;
    if (!ValueAsInt) {
      goto LABEL_6;
    }
    return 1;
  }
  if (*(_DWORD *)v2) {
    return 1;
  }
LABEL_6:
  uint64_t v5 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 256))(this);
  uint64_t v6 = (*(uint64_t (**)(PSEmitter *))(*(void *)this + 264))(this);
  if (v5 != v6)
  {
    uint64_t v7 = v6;
    while (1)
    {
      double v8 = *(const void **)(v5 + 16);
      double v9 = v8
      if ((*(unsigned int (**)(void *, void, uint64_t))(*((void *)v9 + 2) + 24))((void *)v9 + 2, 0, 1)&& PSParticleType::shouldDoLocalParticleRender(v9))
      {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v7) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t PSEmitter::setLithiumTransform(PSEmitter *this, LiSceneObject *a2, OZRenderState *a3)
{
  return OZElement::setLithiumTransform((OZElement *)((char *)this + 200), a2, a3);
}

uint64_t PSEmitter::doesTransformFromLocalToScreenSpace(PSEmitter *this, CMTime *a2)
{
  if ((*(uint64_t (**)(PSEmitter *))(*(void *)this + 168))(this))
  {
    int v4 = (*(uint64_t (**)(PSEmitter *, CMTime *))(*(void *)this + 136))(this, a2);
    CMTime v6 = *a2;
    if (!PSEmitter::shouldPrecompose(this, &v6) || v4) {
      return PSEmitter::shouldDoLocalParticleRender(this);
    }
    else {
      return 1;
    }
  }
  else
  {
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
  }
}